
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db98  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800de68  0800de68  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e16c  0800e16c  0001e16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0800e174  0800e174  0001e174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e188  0800e188  0001e188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800e18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001068  24000078  0800e204  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240010e0  0800e204  000210e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026b34  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000442c  00000000  00000000  00046bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001568  00000000  00000000  0004b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001418  00000000  00000000  0004c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035ad3  00000000  00000000  0004d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ceed  00000000  00000000  0008345b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153d4f  00000000  00000000  000a0348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f4097  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e20  00000000  00000000  001f40e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800de50 	.word	0x0800de50

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800de50 	.word	0x0800de50

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
DC_motor fr(1,2,3,4,5,6,7);
DC_motor fl(1,2,3,4,5,6,7);
DC_motor br(1,2,3,4,5,6,7);
DC_motor bl(1,2,3,4,5,6,7);

void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f906 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f902 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f8fe 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f8fa 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f8f6 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f8f2 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f8ee 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f8ea 	bl	800a894 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fdfb 	bl	800a2bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 fed5 	bl	800a478 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 fed1 	bl	800a478 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 fecd 	bl	800a478 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 fec9 	bl	800a478 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	240002bc 	.word	0x240002bc
 80006f0:	240003a0 	.word	0x240003a0
 80006f4:	24000308 	.word	0x24000308
 80006f8:	24000354 	.word	0x24000354
 80006fc:	24000438 	.word	0x24000438
 8000700:	240003ec 	.word	0x240003ec
 8000704:	24000484 	.word	0x24000484

08000708 <_ZN8DC_motorC1Eddddddd>:


DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio, double limit){
 8000708:	b480      	push	{r7}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000710:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8000714:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8000718:	ed87 2b08 	vstr	d2, [r7, #32]
 800071c:	ed87 3b06 	vstr	d3, [r7, #24]
 8000720:	ed87 4b04 	vstr	d4, [r7, #16]
 8000724:	ed87 5b02 	vstr	d5, [r7, #8]
 8000728:	ed87 6b00 	vstr	d6, [r7]
	this->p = p;
 800072c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800072e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000732:	e9c1 2300 	strd	r2, r3, [r1]
	this->i = i;
 8000736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000738:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800073c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->d = d;
 8000740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000746:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->time = time;
 800074a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800074c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000750:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	this->res_encoder = res;
 8000754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000756:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800075a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->sr_ratio = ratio;
 800075e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000760:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000764:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->I_limit=limit;
 8000768:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800076a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800076e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 8000772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000774:	4618      	mov	r0, r3
 8000776:	3744      	adds	r7, #68	; 0x44
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <_ZN8DC_motor10PIDControlEv>:

void DC_motor::PIDControl(void){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	temp = error;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007a2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007b0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80007ba:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	error = rps_goal - rps_now;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	P = p * error;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b00 	vldr	d6, [r3]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80007f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b02 	vstr	d7, [r3, #8]
	sum = i * error * time;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b04 	vldr	d6, [r3, #16]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000806:	ee26 6b07 	vmul.f64	d6, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000810:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	I = I + sum;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	ed93 6b06 	vldr	d6, [r3, #24]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000826:	ee36 7b07 	vadd.f64	d7, d6, d7
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	ed83 7b06 	vstr	d7, [r3, #24]
	if (rps_now == 0) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000836:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d106      	bne.n	800084e <_ZN8DC_motor10PIDControlEv+0xce>
		I = 0;
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	f04f 0200 	mov.w	r2, #0
 8000846:	f04f 0300 	mov.w	r3, #0
 800084a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I >= I_limit) {
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	ed93 6b06 	vldr	d6, [r3, #24]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800085a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000862:	db05      	blt.n	8000870 <_ZN8DC_motor10PIDControlEv+0xf0>
		I = I_limit;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I < -I_limit) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	ed93 6b06 	vldr	d6, [r3, #24]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 800087c:	eeb1 7b47 	vneg.f64	d7, d7
 8000880:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000888:	d507      	bpl.n	800089a <_ZN8DC_motor10PIDControlEv+0x11a>
		I = -I_limit;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000890:	eeb1 7b47 	vneg.f64	d7, d7
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	ed83 7b06 	vstr	d7, [r3, #24]
	}
	D = d * (error - temp) / time;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	ed93 6b08 	vldr	d6, [r3, #32]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80008ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80008b0:	ee26 5b07 	vmul.f64	d5, d6, d7
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80008ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	PID = P + I + D;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	ed93 6b02 	vldr	d6, [r3, #8]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	ed93 7b06 	vldr	d7, [r3, #24]
 80008d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80008da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_Z41__static_initialization_and_destruction_0ii>:
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d148      	bne.n	8000992 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000906:	4293      	cmp	r3, r2
 8000908:	d143      	bne.n	8000992 <_Z41__static_initialization_and_destruction_0ii+0xa2>
DC_motor fr(1,2,3,4,5,6,7);
 800090a:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 800090e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000912:	eeb1 4b04 	vmov.f64	d4, #20	; 0x40a00000  5.0
 8000916:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 800091a:	eeb0 2b08 	vmov.f64	d2, #8	; 0x40400000  3.0
 800091e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000922:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000926:	481d      	ldr	r0, [pc, #116]	; (800099c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000928:	f7ff feee 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor fl(1,2,3,4,5,6,7);
 800092c:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8000930:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000934:	eeb1 4b04 	vmov.f64	d4, #20	; 0x40a00000  5.0
 8000938:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 800093c:	eeb0 2b08 	vmov.f64	d2, #8	; 0x40400000  3.0
 8000940:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000944:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8000948:	4815      	ldr	r0, [pc, #84]	; (80009a0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800094a:	f7ff fedd 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor br(1,2,3,4,5,6,7);
 800094e:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8000952:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000956:	eeb1 4b04 	vmov.f64	d4, #20	; 0x40a00000  5.0
 800095a:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 800095e:	eeb0 2b08 	vmov.f64	d2, #8	; 0x40400000  3.0
 8000962:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000966:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800096c:	f7ff fecc 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor bl(1,2,3,4,5,6,7);
 8000970:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8000974:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8000978:	eeb1 4b04 	vmov.f64	d4, #20	; 0x40a00000  5.0
 800097c:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8000980:	eeb0 2b08 	vmov.f64	d2, #8	; 0x40400000  3.0
 8000984:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000988:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800098e:	f7ff febb 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	24000098 	.word	0x24000098
 80009a0:	24000120 	.word	0x24000120
 80009a4:	240001a8 	.word	0x240001a8
 80009a8:	24000230 	.word	0x24000230

080009ac <_GLOBAL__sub_I_fr>:
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009b4:	2001      	movs	r0, #1
 80009b6:	f7ff ff9b 	bl	80008f0 <_Z41__static_initialization_and_destruction_0ii>
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_Z10debug_loopv>:
#include "debug.h"

bool debug_mode;
void debug_loop(){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f003 ffef 	bl	80049b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f817 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fb57 	bl	8001088 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009da:	f000 fae1 	bl	8000fa0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80009de:	f000 fb2b 	bl	8001038 <MX_DMA_Init>
  MX_TIM2_Init();
 80009e2:	f000 f881 	bl	8000ae8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009e6:	f000 f8d3 	bl	8000b90 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009ea:	f000 f927 	bl	8000c3c <MX_TIM4_Init>
  MX_TIM5_Init();
 80009ee:	f000 f97b 	bl	8000ce8 <MX_TIM5_Init>
  MX_TIM12_Init();
 80009f2:	f000 f9cf 	bl	8000d94 <MX_TIM12_Init>
  MX_TIM13_Init();
 80009f6:	f000 fa1d 	bl	8000e34 <MX_TIM13_Init>
  MX_TIM15_Init();
 80009fa:	f000 fa3f 	bl	8000e7c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80009fe:	f000 fc37 	bl	8001270 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <main+0x38>

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09c      	sub	sp, #112	; 0x70
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	224c      	movs	r2, #76	; 0x4c
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f00d f892 	bl	800db3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f00d f88c 	bl	800db3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a24:	2002      	movs	r0, #2
 8000a26:	f007 f961 	bl	8007cec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <SystemClock_Config+0xe0>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a36:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <SystemClock_Config+0xe0>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <SystemClock_Config+0xe0>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4a:	bf00      	nop
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <SystemClock_Config+0xe0>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a58:	d1f8      	bne.n	8000a4c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000a72:	2315      	movs	r3, #21
 8000a74:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a82:	230c      	movs	r3, #12
 8000a84:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 f964 	bl	8007d60 <HAL_RCC_OscConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9e:	f000 fbe1 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa2:	233f      	movs	r3, #63	; 0x3f
 8000aa4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab4:	2340      	movs	r3, #64	; 0x40
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 fcf6 	bl	80084bc <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000ad6:	f000 fbc5 	bl	8001264 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3770      	adds	r7, #112	; 0x70
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	58024800 	.word	0x58024800

08000ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2224      	movs	r2, #36	; 0x24
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00d f820 	bl	800db3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b46:	2301      	movs	r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b5a:	f009 fdf5 	bl	800a748 <HAL_TIM_Encoder_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b64:	f000 fb7e 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_TIM2_Init+0xa4>)
 8000b76:	f00a fd19 	bl	800b5ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000b80:	f000 fb70 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	240002bc 	.word	0x240002bc

08000b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2224      	movs	r2, #36	; 0x24
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00c ffcc 	bl	800db3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <MX_TIM3_Init+0xa8>)
 8000bb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000c00:	f009 fda2 	bl	800a748 <HAL_TIM_Encoder_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c0a:	f000 fb2b 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_TIM3_Init+0xa4>)
 8000c1c:	f00a fcc6 	bl	800b5ac <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c26:	f000 fb1d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	24000308 	.word	0x24000308
 8000c38:	40000400 	.word	0x40000400

08000c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2224      	movs	r2, #36	; 0x24
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00c ff76 	bl	800db3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <MX_TIM4_Init+0xa8>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000cac:	f009 fd4c 	bl	800a748 <HAL_TIM_Encoder_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb6:	f000 fad5 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <MX_TIM4_Init+0xa4>)
 8000cc8:	f00a fc70 	bl	800b5ac <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cd2:	f000 fac7 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	; 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000354 	.word	0x24000354
 8000ce4:	40000800 	.word	0x40000800

08000ce8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2224      	movs	r2, #36	; 0x24
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00c ff20 	bl	800db3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <MX_TIM5_Init+0xa8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d34:	2301      	movs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d58:	f009 fcf6 	bl	800a748 <HAL_TIM_Encoder_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000d62:	f000 fa7f 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM5_Init+0xa4>)
 8000d74:	f00a fc1a 	bl	800b5ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000d7e:	f000 fa71 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	; 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	240003a0 	.word	0x240003a0
 8000d90:	40000c00 	.word	0x40000c00

08000d94 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000dae:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <MX_TIM12_Init+0x9c>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000dd2:	4816      	ldr	r0, [pc, #88]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000dd4:	f009 faf8 	bl	800a3c8 <HAL_TIM_PWM_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000dde:	f000 fa41 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	; 0x60
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000dfa:	f009 fef9 	bl	800abf0 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000e04:	f000 fa2e 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000e10:	f009 feee 	bl	800abf0 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000e1a:	f000 fa23 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM12_Init+0x98>)
 8000e20:	f003 f9e2 	bl	80041e8 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	240003ec 	.word	0x240003ec
 8000e30:	40001800 	.word	0x40001800

08000e34 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_TIM13_Init+0x40>)
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <MX_TIM13_Init+0x44>)
 8000e3c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_TIM13_Init+0x40>)
 8000e40:	223f      	movs	r2, #63	; 0x3f
 8000e42:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_TIM13_Init+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_TIM13_Init+0x40>)
 8000e4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e50:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_TIM13_Init+0x40>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_TIM13_Init+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_TIM13_Init+0x40>)
 8000e60:	f009 f9d4 	bl	800a20c <HAL_TIM_Base_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000e6a:	f000 f9fb 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	24000438 	.word	0x24000438
 8000e78:	40001c00 	.word	0x40001c00

08000e7c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b098      	sub	sp, #96	; 0x60
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2234      	movs	r2, #52	; 0x34
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00c fe47 	bl	800db3c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000eb0:	4a3a      	ldr	r2, [pc, #232]	; (8000f9c <MX_TIM15_Init+0x120>)
 8000eb2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000eda:	482f      	ldr	r0, [pc, #188]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000edc:	f009 fa74 	bl	800a3c8 <HAL_TIM_PWM_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 f9bd 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4827      	ldr	r0, [pc, #156]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000efa:	f00a fb57 	bl	800b5ac <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000f04:	f000 f9ae 	bl	8001264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f08:	2360      	movs	r3, #96	; 0x60
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f10:	2300      	movs	r3, #0
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	481a      	ldr	r0, [pc, #104]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000f2e:	f009 fe5f 	bl	800abf0 <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000f38:	f000 f994 	bl	8001264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f40:	2204      	movs	r2, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000f46:	f009 fe53 	bl	800abf0 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000f50:	f000 f988 	bl	8001264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4807      	ldr	r0, [pc, #28]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000f7c:	f00a fbb2 	bl	800b6e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000f86:	f000 f96d 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_TIM15_Init+0x11c>)
 8000f8c:	f003 f92c 	bl	80041e8 <HAL_TIM_MspPostInit>

}
 8000f90:	bf00      	nop
 8000f92:	3760      	adds	r7, #96	; 0x60
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	24000484 	.word	0x24000484
 8000f9c:	40014000 	.word	0x40014000

08000fa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fa6:	4a23      	ldr	r2, [pc, #140]	; (8001034 <MX_USART3_UART_Init+0x94>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000fea:	f00a fc39 	bl	800b860 <HAL_UART_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f000 f936 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_USART3_UART_Init+0x90>)
 8000ffc:	f00c fc80 	bl	800d900 <HAL_UARTEx_SetTxFifoThreshold>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001006:	f000 f92d 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4808      	ldr	r0, [pc, #32]	; (8001030 <MX_USART3_UART_Init+0x90>)
 800100e:	f00c fcb5 	bl	800d97c <HAL_UARTEx_SetRxFifoThreshold>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001018:	f000 f924 	bl	8001264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_USART3_UART_Init+0x90>)
 800101e:	f00c fc36 	bl	800d88e <HAL_UARTEx_DisableFifoMode>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001028:	f000 f91c 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	240004d0 	.word	0x240004d0
 8001034:	40004800 	.word	0x40004800

08001038 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_DMA_Init+0x4c>)
 8001040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <MX_DMA_Init+0x4c>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_DMA_Init+0x4c>)
 8001050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	200b      	movs	r0, #11
 8001062:	f003 fe12 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001066:	200b      	movs	r0, #11
 8001068:	f003 fe29 	bl	8004cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	200c      	movs	r0, #12
 8001072:	f003 fe0a 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001076:	200c      	movs	r0, #12
 8001078:	f003 fe21 	bl	8004cbe <HAL_NVIC_EnableIRQ>

}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58024400 	.word	0x58024400

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800109e:	4b6b      	ldr	r3, [pc, #428]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	4a69      	ldr	r2, [pc, #420]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010a6:	f043 0310 	orr.w	r3, r3, #16
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b63      	ldr	r3, [pc, #396]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	4a62      	ldr	r2, [pc, #392]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010cc:	4b5f      	ldr	r3, [pc, #380]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010da:	4b5c      	ldr	r3, [pc, #368]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a5a      	ldr	r2, [pc, #360]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b58      	ldr	r3, [pc, #352]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <MX_GPIO_Init+0x1c4>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	4a53      	ldr	r2, [pc, #332]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <MX_GPIO_Init+0x1c4>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b4d      	ldr	r3, [pc, #308]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <MX_GPIO_Init+0x1c4>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b45      	ldr	r3, [pc, #276]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a44      	ldr	r2, [pc, #272]	; (800124c <MX_GPIO_Init+0x1c4>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b41      	ldr	r3, [pc, #260]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	4a3c      	ldr	r2, [pc, #240]	; (800124c <MX_GPIO_Init+0x1c4>)
 800115a:	f043 0308 	orr.w	r3, r3, #8
 800115e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001162:	4b3a      	ldr	r3, [pc, #232]	; (800124c <MX_GPIO_Init+0x1c4>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001176:	4836      	ldr	r0, [pc, #216]	; (8001250 <MX_GPIO_Init+0x1c8>)
 8001178:	f006 fd9e 	bl	8007cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f242 0120 	movw	r1, #8224	; 0x2020
 8001182:	4834      	ldr	r0, [pc, #208]	; (8001254 <MX_GPIO_Init+0x1cc>)
 8001184:	f006 fd98 	bl	8007cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 800118e:	4832      	ldr	r0, [pc, #200]	; (8001258 <MX_GPIO_Init+0x1d0>)
 8001190:	f006 fd92 	bl	8007cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 800119a:	4830      	ldr	r0, [pc, #192]	; (800125c <MX_GPIO_Init+0x1d4>)
 800119c:	f006 fd8c 	bl	8007cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <MX_GPIO_Init+0x1d8>)
 80011a8:	f006 fd86 	bl	8007cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 80011ac:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4822      	ldr	r0, [pc, #136]	; (8001250 <MX_GPIO_Init+0x1c8>)
 80011c6:	f006 fbcf 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 80011ca:	f242 0320 	movw	r3, #8224	; 0x2020
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	481c      	ldr	r0, [pc, #112]	; (8001254 <MX_GPIO_Init+0x1cc>)
 80011e4:	f006 fbc0 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80011e8:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	4815      	ldr	r0, [pc, #84]	; (8001258 <MX_GPIO_Init+0x1d0>)
 8001202:	f006 fbb1 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 8001206:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	480f      	ldr	r0, [pc, #60]	; (800125c <MX_GPIO_Init+0x1d4>)
 8001220:	f006 fba2 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001224:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <MX_GPIO_Init+0x1d8>)
 800123e:	f006 fb93 	bl	8007968 <HAL_GPIO_Init>

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	58024400 	.word	0x58024400
 8001250:	58021000 	.word	0x58021000
 8001254:	58020800 	.word	0x58020800
 8001258:	58021400 	.word	0x58021400
 800125c:	58020400 	.word	0x58020400
 8001260:	58020c00 	.word	0x58020c00

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <main_function>:
#include "mecanum.h"
#include "debug.h"
#include "ros_main.h"


void main_function(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	ROS::setup();
 8001274:	f001 ff78 	bl	8003168 <_ZN3ROS5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <main_function+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <main_function+0x16>
 8001280:	f7ff fb9c 	bl	80009bc <_Z10debug_loopv>
 8001284:	e7f8      	b.n	8001278 <main_function+0x8>
		else ROS::loop();
 8001286:	f001 ff7f 	bl	8003188 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 800128a:	e7f5      	b.n	8001278 <main_function+0x8>
 800128c:	240002b8 	.word	0x240002b8

08001290 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ffd8 	bl	8001290 <_ZN8CAR_INFOC1Ev>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3318      	adds	r3, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffd3 	bl	8001290 <_ZN8CAR_INFOC1Ev>
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <_ZN7MecanumC1Ev+0x60>)
 80012f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	a309      	add	r3, pc, #36	; (adr r3, 8001320 <_ZN7MecanumC1Ev+0x50>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	a308      	add	r3, pc, #32	; (adr r3, 8001328 <_ZN7MecanumC1Ev+0x58>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 800130e:	f7ff f9b5 	bl	800067c <_Z13DC_motor_initv>
}
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	f3af 8000 	nop.w
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	4020cccc 	.word	0x4020cccc
 8001328:	39581062 	.word	0x39581062
 800132c:	400d48b4 	.word	0x400d48b4
 8001330:	40270000 	.word	0x40270000

08001334 <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f807 	bl	8001350 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f894 	bl	8001470 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZN7Mecanum15tf2_wheel_speedEv>:

// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	fr.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	ed93 6b02 	vldr	d6, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	ed93 7b00 	vldr	d7, [r3]
 8001364:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	ed93 5b04 	vldr	d5, [r3, #16]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800137a:	ee34 7b07 	vadd.f64	d7, d4, d7
 800137e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001382:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800138c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <_ZN7Mecanum15tf2_wheel_speedEv+0x10c>)
 8001392:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fl.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ed93 6b02 	vldr	d6, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	ed93 7b00 	vldr	d7, [r3]
 80013a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	ed93 5b04 	vldr	d5, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80013b8:	ee34 7b07 	vadd.f64	d7, d4, d7
 80013bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013c0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80013ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <_ZN7Mecanum15tf2_wheel_speedEv+0x110>)
 80013d0:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	ed93 6b02 	vldr	d6, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	ed93 7b00 	vldr	d7, [r3]
 80013e0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	ed93 5b04 	vldr	d5, [r3, #16]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80013f6:	ee34 7b07 	vadd.f64	d7, d4, d7
 80013fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013fe:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001408:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <_ZN7Mecanum15tf2_wheel_speedEv+0x114>)
 800140e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	ed93 6b02 	vldr	d6, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	ed93 7b00 	vldr	d7, [r3]
 800141e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	ed93 5b04 	vldr	d5, [r3, #16]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001434:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001438:	ee25 7b07 	vmul.f64	d7, d5, d7
 800143c:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001446:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <_ZN7Mecanum15tf2_wheel_speedEv+0x118>)
 800144c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	24000098 	.word	0x24000098
 8001460:	24000120 	.word	0x24000120
 8001464:	24000230 	.word	0x24000230
 8001468:	240001a8 	.word	0x240001a8
 800146c:	00000000 	.word	0x00000000

08001470 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <_ZN7Mecanum13tf2_car_speedEv+0xd0>)
 800147a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <_ZN7Mecanum13tf2_car_speedEv+0xd4>)
 8001480:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001484:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001488:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <_ZN7Mecanum13tf2_car_speedEv+0xd8>)
 800148a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800148e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <_ZN7Mecanum13tf2_car_speedEv+0xdc>)
 8001494:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001498:	ee36 7b07 	vadd.f64	d7, d6, d7
 800149c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001538 <_ZN7Mecanum13tf2_car_speedEv+0xc8>
 80014a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <_ZN7Mecanum13tf2_car_speedEv+0xd4>)
 80014ac:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <_ZN7Mecanum13tf2_car_speedEv+0xd0>)
 80014b2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <_ZN7Mecanum13tf2_car_speedEv+0xd8>)
 80014bc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <_ZN7Mecanum13tf2_car_speedEv+0xdc>)
 80014c6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014ce:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001538 <_ZN7Mecanum13tf2_car_speedEv+0xc8>
 80014d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80014e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ec:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80014f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014f4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001538 <_ZN7Mecanum13tf2_car_speedEv+0xc8>
 80014f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_ZN7Mecanum13tf2_car_speedEv+0xd4>)
 80014fe:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <_ZN7Mecanum13tf2_car_speedEv+0xd0>)
 8001504:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001508:	ee35 5b47 	vsub.f64	d5, d5, d7
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <_ZN7Mecanum13tf2_car_speedEv+0xd8>)
 800150e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001512:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <_ZN7Mecanum13tf2_car_speedEv+0xdc>)
 8001518:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800151c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001520:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
	...
 8001540:	24000120 	.word	0x24000120
 8001544:	24000098 	.word	0x24000098
 8001548:	24000230 	.word	0x24000230
 800154c:	240001a8 	.word	0x240001a8

08001550 <_Z41__static_initialization_and_destruction_0ii>:
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001566:	4293      	cmp	r3, r2
 8001568:	d102      	bne.n	8001570 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800156c:	f7ff feb0 	bl	80012d0 <_ZN7MecanumC1Ev>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000650 	.word	0x24000650

0800157c <_GLOBAL__sub_I_mecanum>:
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
 8001580:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff ffe3 	bl	8001550 <_Z41__static_initialization_and_destruction_0ii>
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <_ZN3ros3MsgC1Ev+0x1c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	0800e11c 	.word	0x0800e11c

080015d0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
      data()
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ffe8 	bl	80015b0 <_ZN3ros3MsgC1Ev>
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ffce 	bl	800158c <_ZN3ros4TimeC1Ev>
    {
    }
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	0800e104 	.word	0x0800e104

08001600 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	b2ca      	uxtb	r2, r1
 800161a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	0a19      	lsrs	r1, r3, #8
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	0c19      	lsrs	r1, r3, #16
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3302      	adds	r3, #2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	b2ca      	uxtb	r2, r1
 800163e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0e19      	lsrs	r1, r3, #24
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3303      	adds	r3, #3
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	b2ca      	uxtb	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3304      	adds	r3, #4
 8001656:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	0a19      	lsrs	r1, r3, #8
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	0c19      	lsrs	r1, r3, #16
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3302      	adds	r3, #2
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	0e19      	lsrs	r1, r3, #24
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3303      	adds	r3, #3
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3304      	adds	r3, #4
 80016a0:	60fb      	str	r3, [r7, #12]
      return offset;
 80016a2:	68fb      	ldr	r3, [r7, #12]
    }
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	440b      	add	r3, r1
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3302      	adds	r3, #2
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	440b      	add	r3, r1
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3303      	adds	r3, #3
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	440b      	add	r3, r1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	061b      	lsls	r3, r3, #24
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3304      	adds	r3, #4
 8001712:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	4413      	add	r3, r2
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	440b      	add	r3, r1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3302      	adds	r3, #2
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	440b      	add	r3, r1
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3303      	adds	r3, #3
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	440b      	add	r3, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3304      	adds	r3, #4
 8001768:	60fb      	str	r3, [r7, #12]
     return offset;
 800176a:	68fb      	ldr	r3, [r7, #12]
    }
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	0800de68 	.word	0x0800de68

08001794 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	0800de78 	.word	0x0800de78

080017b0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fef8 	bl	80015b0 <_ZN3ros3MsgC1Ev>
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	809a      	strh	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
    {
    }
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800e0ec 	.word	0x0800e0ec
 80017f4:	0800de9c 	.word	0x0800de9c

080017f8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	8899      	ldrh	r1, [r3, #4]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	889b      	ldrh	r3, [r3, #4]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b299      	uxth	r1, r3
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	3301      	adds	r3, #1
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	b2ca      	uxtb	r2, r1
 8001826:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	3302      	adds	r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fd6c 	bl	8000310 <strlen>
 8001838:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	4413      	add	r3, r2
 8001840:	69b9      	ldr	r1, [r7, #24]
 8001842:	4618      	mov	r0, r3
 8001844:	f001 fcce 	bl	80031e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3304      	adds	r3, #4
 800184c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	18d0      	adds	r0, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4619      	mov	r1, r3
 800185c:	f00c f960 	bl	800db20 <memcpy>
      offset += length_topic_name;
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4413      	add	r3, r2
 8001866:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fd4f 	bl	8000310 <strlen>
 8001872:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	4413      	add	r3, r2
 800187a:	6979      	ldr	r1, [r7, #20]
 800187c:	4618      	mov	r0, r3
 800187e:	f001 fcb1 	bl	80031e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	18d0      	adds	r0, r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4619      	mov	r1, r3
 8001896:	f00c f943 	bl	800db20 <memcpy>
      offset += length_message_type;
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fd32 	bl	8000310 <strlen>
 80018ac:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fc94 	bl	80031e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3304      	adds	r3, #4
 80018c0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	18d0      	adds	r0, r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4619      	mov	r1, r3
 80018d0:	f00c f926 	bl	800db20 <memcpy>
      offset += length_md5sum;
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4413      	add	r3, r2
 80018da:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80018e2:	68f9      	ldr	r1, [r7, #12]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	0a19      	lsrs	r1, r3, #8
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	b2ca      	uxtb	r2, r1
 80018fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	0c19      	lsrs	r1, r3, #16
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3302      	adds	r3, #2
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	b2ca      	uxtb	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	0e19      	lsrs	r1, r3, #24
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3303      	adds	r3, #3
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	4413      	add	r3, r2
 800191a:	b2ca      	uxtb	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	61fb      	str	r3, [r7, #28]
      return offset;
 8001924:	69fb      	ldr	r3, [r7, #28]
    }
 8001926:	4618      	mov	r0, r3
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800192e:	b580      	push	{r7, lr}
 8001930:	b08a      	sub	sp, #40	; 0x28
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	889b      	ldrh	r3, [r3, #4]
 800194e:	b21a      	sxth	r2, r3
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	3301      	adds	r3, #1
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	440b      	add	r3, r1
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21b      	sxth	r3, r3
 8001962:	b29a      	uxth	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	3302      	adds	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	441a      	add	r2, r3
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f001 fc50 	bl	8003220 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	3304      	adds	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	4413      	add	r3, r2
 8001990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001992:	429a      	cmp	r2, r3
 8001994:	d20c      	bcs.n	80019b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	441a      	add	r2, r3
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3b01      	subs	r3, #1
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	440b      	add	r3, r1
 80019a4:	7812      	ldrb	r2, [r2, #0]
 80019a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3301      	adds	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e7ec      	b.n	800198a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4413      	add	r3, r2
 80019b6:	3b01      	subs	r3, #1
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	441a      	add	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4413      	add	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	441a      	add	r2, r3
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fc1d 	bl	8003220 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3304      	adds	r3, #4
 80019ea:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	623b      	str	r3, [r7, #32]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4413      	add	r3, r2
 80019f6:	6a3a      	ldr	r2, [r7, #32]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d20c      	bcs.n	8001a16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	441a      	add	r2, r3
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	6839      	ldr	r1, [r7, #0]
 8001a08:	440b      	add	r3, r1
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	3301      	adds	r3, #1
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	e7ec      	b.n	80019f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	441a      	add	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4413      	add	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	441a      	add	r2, r3
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fbea 	bl	8003220 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3304      	adds	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d20c      	bcs.n	8001a7c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	441a      	add	r2, r3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	440b      	add	r3, r1
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e7ec      	b.n	8001a56 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	3b01      	subs	r3, #1
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	441a      	add	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	440a      	add	r2, r1
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	440b      	add	r3, r1
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	440b      	add	r3, r1
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	3303      	adds	r3, #3
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	440b      	add	r3, r1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	061b      	lsls	r3, r3, #24
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	3304      	adds	r3, #4
 8001af2:	61bb      	str	r3, [r7, #24]
     return offset;
 8001af4:	69bb      	ldr	r3, [r7, #24]
    }
 8001af6:	4618      	mov	r0, r3
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	0800dea0 	.word	0x0800dea0

08001b1c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	0800debc 	.word	0x0800debc

08001b38 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fd34 	bl	80015b0 <_ZN3ros3MsgC1Ev>
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	711a      	strb	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001b58:	609a      	str	r2, [r3, #8]
    {
    }
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	0800e0d4 	.word	0x0800e0d4
 8001b68:	0800de9c 	.word	0x0800de9c

08001b6c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	7912      	ldrb	r2, [r2, #4]
 8001b84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fbbd 	bl	8000310 <strlen>
 8001b96:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fb1f 	bl	80031e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	18d0      	adds	r0, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f00b ffb1 	bl	800db20 <memcpy>
      offset += length_msg;
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    }
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	4413      	add	r3, r2
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	3301      	adds	r3, #1
 8001bee:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fb0f 	bl	8003220 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	3304      	adds	r3, #4
 8001c06:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d20c      	bcs.n	8001c32 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	440b      	add	r3, r1
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e7ec      	b.n	8001c0c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	441a      	add	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
     return offset;
 8001c56:	693b      	ldr	r3, [r7, #16]
    }
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	0800dee0 	.word	0x0800dee0

08001c7c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	0800def4 	.word	0x0800def4

08001c98 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fc84 	bl	80015b0 <_ZN3ros3MsgC1Ev>
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61da      	str	r2, [r3, #28]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	0800e0bc 	.word	0x0800e0bc

08001ce0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b2ca      	uxtb	r2, r1
 8001cfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0a19      	lsrs	r1, r3, #8
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	b2ca      	uxtb	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0c19      	lsrs	r1, r3, #16
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	3302      	adds	r3, #2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b2ca      	uxtb	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	0e19      	lsrs	r1, r3, #24
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	3303      	adds	r3, #3
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b2ca      	uxtb	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	3304      	adds	r3, #4
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d22b      	bcs.n	8001d9e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001d54:	6939      	ldr	r1, [r7, #16]
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b2ca      	uxtb	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	0a19      	lsrs	r1, r3, #8
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	3301      	adds	r3, #1
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b2ca      	uxtb	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	0c19      	lsrs	r1, r3, #16
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	3302      	adds	r3, #2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	0e19      	lsrs	r1, r3, #24
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	3303      	adds	r3, #3
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2ca      	uxtb	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	3304      	adds	r3, #4
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	e7ce      	b.n	8001d3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6919      	ldr	r1, [r3, #16]
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2ca      	uxtb	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	0a19      	lsrs	r1, r3, #8
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	3301      	adds	r3, #1
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	b2ca      	uxtb	r2, r1
 8001dbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	0c19      	lsrs	r1, r3, #16
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2ca      	uxtb	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	0e19      	lsrs	r1, r3, #24
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	3303      	adds	r3, #3
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	3304      	adds	r3, #4
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d22b      	bcs.n	8001e4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	0a19      	lsrs	r1, r3, #8
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	3301      	adds	r3, #1
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b2ca      	uxtb	r2, r1
 8001e1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	0c19      	lsrs	r1, r3, #16
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	3302      	adds	r3, #2
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b2ca      	uxtb	r2, r1
 8001e2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0e19      	lsrs	r1, r3, #24
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3303      	adds	r3, #3
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2ca      	uxtb	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	3304      	adds	r3, #4
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	e7ce      	b.n	8001dec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69d9      	ldr	r1, [r3, #28]
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	0a19      	lsrs	r1, r3, #8
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	3301      	adds	r3, #1
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	0c19      	lsrs	r1, r3, #16
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3302      	adds	r3, #2
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b2ca      	uxtb	r2, r1
 8001e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	0e19      	lsrs	r1, r3, #24
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	3303      	adds	r3, #3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2ca      	uxtb	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	3304      	adds	r3, #4
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d228      	bcs.n	8001ef8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fa2c 	bl	8000310 <strlen>
 8001eb8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 f98e 	bl	80031e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	3304      	adds	r3, #4
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	18d0      	adds	r0, r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f00b fe1c 	bl	800db20 <memcpy>
      offset += length_stringsi;
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	4413      	add	r3, r2
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e7d1      	b.n	8001e9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001efa:	4618      	mov	r0, r3
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b08e      	sub	sp, #56	; 0x38
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	3302      	adds	r3, #2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	6a3a      	ldr	r2, [r7, #32]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f40:	3303      	adds	r3, #3
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	6a3a      	ldr	r2, [r7, #32]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f52:	3304      	adds	r3, #4
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	6a3a      	ldr	r2, [r7, #32]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d90a      	bls.n	8001f76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f00b fdee 	bl	800db4c <realloc>
 8001f70:	4602      	mov	r2, r0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a3a      	ldr	r2, [r7, #32]
 8001f7a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d236      	bcs.n	8001ff8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f92:	6839      	ldr	r1, [r7, #0]
 8001f94:	440a      	add	r2, r1
 8001f96:	7812      	ldrb	r2, [r2, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	440b      	add	r3, r1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	440b      	add	r3, r1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	6839      	ldr	r1, [r7, #0]
 8001fc8:	440b      	add	r3, r1
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	3304      	adds	r3, #4
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff6:	e7c3      	b.n	8001f80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	3301      	adds	r3, #1
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4413      	add	r3, r2
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	4313      	orrs	r3, r2
 8002012:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	3302      	adds	r3, #2
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	4313      	orrs	r3, r2
 8002024:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	3303      	adds	r3, #3
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	4313      	orrs	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	3304      	adds	r3, #4
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	d90a      	bls.n	800205e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4619      	mov	r1, r3
 8002052:	4610      	mov	r0, r2
 8002054:	f00b fd7a 	bl	800db4c <realloc>
 8002058:	4602      	mov	r2, r0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	429a      	cmp	r2, r3
 8002070:	d236      	bcs.n	80020e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800207a:	6839      	ldr	r1, [r7, #0]
 800207c:	440a      	add	r2, r1
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002088:	3301      	adds	r3, #1
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	440b      	add	r3, r1
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	3302      	adds	r3, #2
 800209c:	6839      	ldr	r1, [r7, #0]
 800209e:	440b      	add	r3, r1
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	041b      	lsls	r3, r3, #16
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	3303      	adds	r3, #3
 80020ae:	6839      	ldr	r1, [r7, #0]
 80020b0:	440b      	add	r3, r1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80020c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c2:	3304      	adds	r3, #4
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	3214      	adds	r2, #20
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	3301      	adds	r3, #1
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	e7c3      	b.n	8002068 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	3301      	adds	r3, #1
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	3302      	adds	r3, #2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800210e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002110:	3303      	adds	r3, #3
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	3304      	adds	r3, #4
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	429a      	cmp	r2, r3
 800212e:	d90a      	bls.n	8002146 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f00b fd06 	bl	800db4c <realloc>
 8002140:	4602      	mov	r2, r0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002156:	429a      	cmp	r2, r3
 8002158:	d23f      	bcs.n	80021da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	441a      	add	r2, r3
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f001 f85a 	bl	8003220 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	3304      	adds	r3, #4
 8002170:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	429a      	cmp	r2, r3
 8002180:	d20c      	bcs.n	800219c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	441a      	add	r2, r3
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	3b01      	subs	r3, #1
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	440b      	add	r3, r1
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	3301      	adds	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	e7ec      	b.n	8002176 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800219c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	3b01      	subs	r3, #1
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	3b01      	subs	r3, #1
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	441a      	add	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80021b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	3220      	adds	r2, #32
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	3301      	adds	r3, #1
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d8:	e7ba      	b.n	8002150 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80021da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80021dc:	4618      	mov	r0, r3
 80021de:	3738      	adds	r7, #56	; 0x38
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	0800e010 	.word	0x0800e010

08002200 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	0800df18 	.word	0x0800df18

0800221c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	611a      	str	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
  }
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d068      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a40      	ldr	r2, [pc, #256]	; (8002384 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d061      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d05a      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a3b      	ldr	r2, [pc, #236]	; (800238c <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d053      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a38      	ldr	r2, [pc, #224]	; (8002390 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04c      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a36      	ldr	r2, [pc, #216]	; (8002394 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d045      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a33      	ldr	r2, [pc, #204]	; (8002398 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d03e      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a31      	ldr	r2, [pc, #196]	; (800239c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d037      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a2e      	ldr	r2, [pc, #184]	; (80023a0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d030      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d029      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d022      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a27      	ldr	r2, [pc, #156]	; (80023ac <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d01b      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a24      	ldr	r2, [pc, #144]	; (80023b0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d014      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a22      	ldr	r2, [pc, #136]	; (80023b4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00d      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d006      	beq.n	800234c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d109      	bne.n	8002360 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	e008      	b.n	8002372 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800236e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40020010 	.word	0x40020010
 8002384:	40020028 	.word	0x40020028
 8002388:	40020040 	.word	0x40020040
 800238c:	40020058 	.word	0x40020058
 8002390:	40020070 	.word	0x40020070
 8002394:	40020088 	.word	0x40020088
 8002398:	400200a0 	.word	0x400200a0
 800239c:	400200b8 	.word	0x400200b8
 80023a0:	40020410 	.word	0x40020410
 80023a4:	40020428 	.word	0x40020428
 80023a8:	40020440 	.word	0x40020440
 80023ac:	40020458 	.word	0x40020458
 80023b0:	40020470 	.word	0x40020470
 80023b4:	40020488 	.word	0x40020488
 80023b8:	400204a0 	.word	0x400204a0
 80023bc:	400204b8 	.word	0x400204b8

080023c0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <_ZN13STM32HardwareC1Ev+0x34>)
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	240004d0 	.word	0x240004d0

080023f8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f804 	bl	800240e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3304      	adds	r3, #4
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	4619      	mov	r1, r3
 8002424:	f009 fafe 	bl	800ba24 <HAL_UART_Receive_DMA>
    }
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff0d 	bl	8002264 <_ZN13STM32Hardware10getRdmaIndEv>
 800244a:	4603      	mov	r3, r0
 800244c:	429c      	cmp	r4, r3
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d012      	beq.n	8002480 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002460:	1c59      	adds	r1, r3, #1
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	791b      	ldrb	r3, [r3, #4]
 800246e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002480:	68fb      	ldr	r3, [r7, #12]
    }
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}
	...

0800248c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249c:	2b20      	cmp	r3, #32
 800249e:	d108      	bne.n	80024b2 <_ZN13STM32Hardware5flushEv+0x26>
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <_ZN13STM32Hardware5flushEv+0xb4>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <_ZN13STM32Hardware5flushEv+0x26>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <_ZN13STM32Hardware5flushEv+0x28>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d03f      	beq.n	8002538 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <_ZN13STM32Hardware5flushEv+0xb4>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d031      	beq.n	8002532 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20a      	bcs.n	80024f4 <_ZN13STM32Hardware5flushEv+0x68>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	e006      	b.n	8002502 <_ZN13STM32Hardware5flushEv+0x76>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002500:	b29b      	uxth	r3, r3
 8002502:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800250e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	89fa      	ldrh	r2, [r7, #14]
 8002518:	4619      	mov	r1, r3
 800251a:	f009 f9f1 	bl	800b900 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002524:	89fb      	ldrh	r3, [r7, #14]
 8002526:	4413      	add	r3, r2
 8002528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002532:	4b03      	ldr	r3, [pc, #12]	; (8002540 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
      }
    }
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	24000698 	.word	0x24000698

08002544 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255a:	bfa8      	it	ge
 800255c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002560:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002568:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4293      	cmp	r3, r2
 8002570:	bf28      	it	cs
 8002572:	4613      	movcs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800257c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f00b fac9 	bl	800db20 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4413      	add	r3, r2
 8002598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d00b      	beq.n	80025c2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	18d1      	adds	r1, r2, r3
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	f00b faaf 	bl	800db20 <memcpy>
      }

      flush();
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f7ff ff62 	bl	800248c <_ZN13STM32Hardware5flushEv>
    }
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	f002 fa70 	bl	8004abc <HAL_GetTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe ffdc 	bl	80015b0 <_ZN3ros3MsgC1Ev>
 80025f8:	4a0e      	ldr	r2, [pc, #56]	; (8002634 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	0800e078 	.word	0x0800e078

08002638 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002638:	b480      	push	{r7}
 800263a:	b08b      	sub	sp, #44	; 0x2c
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800264c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	4401      	add	r1, r0
 800265a:	b2d3      	uxtb	r3, r2
 800265c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800265e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	0a02      	lsrs	r2, r0, #8
 800266c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002670:	0a0b      	lsrs	r3, r1, #8
 8002672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002674:	3101      	adds	r1, #1
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	4401      	add	r1, r0
 800267a:	b2d3      	uxtb	r3, r2
 800267c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800267e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	0c02      	lsrs	r2, r0, #16
 800268c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002690:	0c0b      	lsrs	r3, r1, #16
 8002692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002694:	3102      	adds	r1, #2
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	4401      	add	r1, r0
 800269a:	b2d3      	uxtb	r3, r2
 800269c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800269e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	0e02      	lsrs	r2, r0, #24
 80026ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026b0:	0e0b      	lsrs	r3, r1, #24
 80026b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b4:	3103      	adds	r1, #3
 80026b6:	6838      	ldr	r0, [r7, #0]
 80026b8:	4401      	add	r1, r0
 80026ba:	b2d3      	uxtb	r3, r2
 80026bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80026be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	000a      	movs	r2, r1
 80026cc:	2300      	movs	r3, #0
 80026ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d0:	3104      	adds	r1, #4
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	4401      	add	r1, r0
 80026d6:	b2d3      	uxtb	r3, r2
 80026d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80026da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	0a0a      	lsrs	r2, r1, #8
 80026e8:	2300      	movs	r3, #0
 80026ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ec:	3105      	adds	r1, #5
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	4401      	add	r1, r0
 80026f2:	b2d3      	uxtb	r3, r2
 80026f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80026f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	0c0a      	lsrs	r2, r1, #16
 8002704:	2300      	movs	r3, #0
 8002706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002708:	3106      	adds	r1, #6
 800270a:	6838      	ldr	r0, [r7, #0]
 800270c:	4401      	add	r1, r0
 800270e:	b2d3      	uxtb	r3, r2
 8002710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	0e0a      	lsrs	r2, r1, #24
 8002720:	2300      	movs	r3, #0
 8002722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002724:	3107      	adds	r1, #7
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	4401      	add	r1, r0
 800272a:	b2d3      	uxtb	r3, r2
 800272c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	3308      	adds	r3, #8
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800273a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800273e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	6838      	ldr	r0, [r7, #0]
 8002746:	4401      	add	r1, r0
 8002748:	b2d3      	uxtb	r3, r2
 800274a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800274c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	0a02      	lsrs	r2, r0, #8
 800275a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800275e:	0a0b      	lsrs	r3, r1, #8
 8002760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002762:	3101      	adds	r1, #1
 8002764:	6838      	ldr	r0, [r7, #0]
 8002766:	4401      	add	r1, r0
 8002768:	b2d3      	uxtb	r3, r2
 800276a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800276c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	0c02      	lsrs	r2, r0, #16
 800277a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800277e:	0c0b      	lsrs	r3, r1, #16
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	3102      	adds	r1, #2
 8002784:	6838      	ldr	r0, [r7, #0]
 8002786:	4401      	add	r1, r0
 8002788:	b2d3      	uxtb	r3, r2
 800278a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800278c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	0e02      	lsrs	r2, r0, #24
 800279a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800279e:	0e0b      	lsrs	r3, r1, #24
 80027a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a2:	3103      	adds	r1, #3
 80027a4:	6838      	ldr	r0, [r7, #0]
 80027a6:	4401      	add	r1, r0
 80027a8:	b2d3      	uxtb	r3, r2
 80027aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80027ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	000a      	movs	r2, r1
 80027ba:	2300      	movs	r3, #0
 80027bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027be:	3104      	adds	r1, #4
 80027c0:	6838      	ldr	r0, [r7, #0]
 80027c2:	4401      	add	r1, r0
 80027c4:	b2d3      	uxtb	r3, r2
 80027c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80027c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	0a0a      	lsrs	r2, r1, #8
 80027d6:	2300      	movs	r3, #0
 80027d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027da:	3105      	adds	r1, #5
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	4401      	add	r1, r0
 80027e0:	b2d3      	uxtb	r3, r2
 80027e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80027e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	0c0a      	lsrs	r2, r1, #16
 80027f2:	2300      	movs	r3, #0
 80027f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f6:	3106      	adds	r1, #6
 80027f8:	6838      	ldr	r0, [r7, #0]
 80027fa:	4401      	add	r1, r0
 80027fc:	b2d3      	uxtb	r3, r2
 80027fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002800:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	0e0a      	lsrs	r2, r1, #24
 800280e:	2300      	movs	r3, #0
 8002810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002812:	3107      	adds	r1, #7
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	4401      	add	r1, r0
 8002818:	b2d3      	uxtb	r3, r2
 800281a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3308      	adds	r3, #8
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002828:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800282c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002832:	6838      	ldr	r0, [r7, #0]
 8002834:	4401      	add	r1, r0
 8002836:	b2d3      	uxtb	r3, r2
 8002838:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800283a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	0a02      	lsrs	r2, r0, #8
 8002848:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800284c:	0a0b      	lsrs	r3, r1, #8
 800284e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002850:	3101      	adds	r1, #1
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	4401      	add	r1, r0
 8002856:	b2d3      	uxtb	r3, r2
 8002858:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800285a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	0c02      	lsrs	r2, r0, #16
 8002868:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800286c:	0c0b      	lsrs	r3, r1, #16
 800286e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002870:	3102      	adds	r1, #2
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	4401      	add	r1, r0
 8002876:	b2d3      	uxtb	r3, r2
 8002878:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800287a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	0e02      	lsrs	r2, r0, #24
 8002888:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800288c:	0e0b      	lsrs	r3, r1, #24
 800288e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002890:	3103      	adds	r1, #3
 8002892:	6838      	ldr	r0, [r7, #0]
 8002894:	4401      	add	r1, r0
 8002896:	b2d3      	uxtb	r3, r2
 8002898:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800289a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	000a      	movs	r2, r1
 80028a8:	2300      	movs	r3, #0
 80028aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ac:	3104      	adds	r1, #4
 80028ae:	6838      	ldr	r0, [r7, #0]
 80028b0:	4401      	add	r1, r0
 80028b2:	b2d3      	uxtb	r3, r2
 80028b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80028b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	0a0a      	lsrs	r2, r1, #8
 80028c4:	2300      	movs	r3, #0
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	3105      	adds	r1, #5
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	4401      	add	r1, r0
 80028ce:	b2d3      	uxtb	r3, r2
 80028d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80028d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	0c0a      	lsrs	r2, r1, #16
 80028e0:	2300      	movs	r3, #0
 80028e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e4:	3106      	adds	r1, #6
 80028e6:	6838      	ldr	r0, [r7, #0]
 80028e8:	4401      	add	r1, r0
 80028ea:	b2d3      	uxtb	r3, r2
 80028ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80028ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	0e0a      	lsrs	r2, r1, #24
 80028fc:	2300      	movs	r3, #0
 80028fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002900:	3107      	adds	r1, #7
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	4401      	add	r1, r0
 8002906:	b2d3      	uxtb	r3, r2
 8002908:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3308      	adds	r3, #8
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002912:	4618      	mov	r0, r3
 8002914:	372c      	adds	r7, #44	; 0x2c
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800291e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002922:	b0eb      	sub	sp, #428	; 0x1ac
 8002924:	af00      	add	r7, sp, #0
 8002926:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800292a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002940:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002944:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002948:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2200      	movs	r2, #0
 8002954:	461c      	mov	r4, r3
 8002956:	4615      	mov	r5, r2
 8002958:	ea40 0804 	orr.w	r8, r0, r4
 800295c:	ea41 0905 	orr.w	r9, r1, r5
 8002960:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	469a      	mov	sl, r3
 800297c:	4693      	mov	fp, r2
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800298a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800298e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002992:	ea40 0402 	orr.w	r4, r0, r2
 8002996:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800299a:	430b      	orrs	r3, r1
 800299c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029a0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80029a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b0:	1c9a      	adds	r2, r3, #2
 80029b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80029c2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80029d2:	464c      	mov	r4, r9
 80029d4:	0423      	lsls	r3, r4, #16
 80029d6:	4644      	mov	r4, r8
 80029d8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80029dc:	4644      	mov	r4, r8
 80029de:	0422      	lsls	r2, r4, #16
 80029e0:	ea40 0402 	orr.w	r4, r0, r2
 80029e4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80029e8:	430b      	orrs	r3, r1
 80029ea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80029ee:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80029f2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029f6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029fe:	1cda      	adds	r2, r3, #3
 8002a00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a04:	4413      	add	r3, r2
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002a10:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002a14:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002a18:	4623      	mov	r3, r4
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002a20:	4623      	mov	r3, r4
 8002a22:	061b      	lsls	r3, r3, #24
 8002a24:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a28:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a34:	462b      	mov	r3, r5
 8002a36:	430b      	orrs	r3, r1
 8002a38:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a3c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002a40:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a44:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002a5e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002a6e:	0023      	movs	r3, r4
 8002a70:	2200      	movs	r2, #0
 8002a72:	ea40 0402 	orr.w	r4, r0, r2
 8002a76:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a80:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002a84:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a88:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a90:	1d5a      	adds	r2, r3, #5
 8002a92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a96:	4413      	add	r3, r2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002aa2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002ab2:	0223      	lsls	r3, r4, #8
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	ea40 0402 	orr.w	r4, r0, r2
 8002aba:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002ac4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002ac8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002acc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ad0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ad4:	1d9a      	adds	r2, r3, #6
 8002ad6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ae6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002af6:	0423      	lsls	r3, r4, #16
 8002af8:	2200      	movs	r2, #0
 8002afa:	ea40 0402 	orr.w	r4, r0, r2
 8002afe:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002b02:	430b      	orrs	r3, r1
 8002b04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b08:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002b0c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b10:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b18:	1dda      	adds	r2, r3, #7
 8002b1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b1e:	4413      	add	r3, r2
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002b2a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002b3a:	0623      	lsls	r3, r4, #24
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	ea40 0402 	orr.w	r4, r0, r2
 8002b42:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002b46:	430b      	orrs	r3, r1
 8002b48:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b4c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002b50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002b54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b58:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b5c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002b60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b64:	3308      	adds	r3, #8
 8002b66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b76:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b7a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b82:	4413      	add	r3, r2
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002b8e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002b92:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002b96:	4623      	mov	r3, r4
 8002b98:	4303      	orrs	r3, r0
 8002b9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ba6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002baa:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bbc:	4413      	add	r3, r2
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002bc8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002bd8:	464c      	mov	r4, r9
 8002bda:	0223      	lsls	r3, r4, #8
 8002bdc:	4644      	mov	r4, r8
 8002bde:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002be2:	4644      	mov	r4, r8
 8002be4:	0222      	lsls	r2, r4, #8
 8002be6:	ea40 0402 	orr.w	r4, r0, r2
 8002bea:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002bf4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c04:	1c9a      	adds	r2, r3, #2
 8002c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002c26:	464c      	mov	r4, r9
 8002c28:	0423      	lsls	r3, r4, #16
 8002c2a:	4644      	mov	r4, r8
 8002c2c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002c30:	4644      	mov	r4, r8
 8002c32:	0422      	lsls	r2, r4, #16
 8002c34:	ea40 0402 	orr.w	r4, r0, r2
 8002c38:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c42:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002c46:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c4a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c52:	1cda      	adds	r2, r3, #3
 8002c54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c58:	4413      	add	r3, r2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c64:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c68:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c74:	4623      	mov	r3, r4
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c7c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002c80:	4623      	mov	r3, r4
 8002c82:	4303      	orrs	r3, r0
 8002c84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c88:	462b      	mov	r3, r5
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c90:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002c94:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c98:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ca6:	4413      	add	r3, r2
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cb2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002cc2:	0023      	movs	r3, r4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	ea40 0402 	orr.w	r4, r0, r2
 8002cca:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002cd4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002cd8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002cdc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ce0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ce4:	1d5a      	adds	r2, r3, #5
 8002ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cea:	4413      	add	r3, r2
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cf6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002d06:	0223      	lsls	r3, r4, #8
 8002d08:	2200      	movs	r2, #0
 8002d0a:	ea40 0402 	orr.w	r4, r0, r2
 8002d0e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002d12:	430b      	orrs	r3, r1
 8002d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d18:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d1c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d20:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d28:	1d9a      	adds	r2, r3, #6
 8002d2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002d4a:	0423      	lsls	r3, r4, #16
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	ea40 0402 	orr.w	r4, r0, r2
 8002d52:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002d56:	430b      	orrs	r3, r1
 8002d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d5c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002d60:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d64:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d6c:	1dda      	adds	r2, r3, #7
 8002d6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d72:	4413      	add	r3, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002d8e:	0623      	lsls	r3, r4, #24
 8002d90:	2200      	movs	r2, #0
 8002d92:	ea40 0402 	orr.w	r4, r0, r2
 8002d96:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002da0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002da4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002da8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002db0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002db4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db8:	3308      	adds	r3, #8
 8002dba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002dca:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dce:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002dd2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002de6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002dea:	4623      	mov	r3, r4
 8002dec:	4303      	orrs	r3, r0
 8002dee:	67bb      	str	r3, [r7, #120]	; 0x78
 8002df0:	462b      	mov	r3, r5
 8002df2:	430b      	orrs	r3, r1
 8002df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002df6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002dfa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dfe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e02:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2200      	movs	r2, #0
 8002e14:	673b      	str	r3, [r7, #112]	; 0x70
 8002e16:	677a      	str	r2, [r7, #116]	; 0x74
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e24:	464c      	mov	r4, r9
 8002e26:	0223      	lsls	r3, r4, #8
 8002e28:	4644      	mov	r4, r8
 8002e2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e2e:	4644      	mov	r4, r8
 8002e30:	0222      	lsls	r2, r4, #8
 8002e32:	ea40 0402 	orr.w	r4, r0, r2
 8002e36:	66bc      	str	r4, [r7, #104]	; 0x68
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e3c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002e40:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e44:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e52:	4413      	add	r3, r2
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2200      	movs	r2, #0
 8002e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e5c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e6a:	464c      	mov	r4, r9
 8002e6c:	0423      	lsls	r3, r4, #16
 8002e6e:	4644      	mov	r4, r8
 8002e70:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002e74:	4644      	mov	r4, r8
 8002e76:	0422      	lsls	r2, r4, #16
 8002e78:	ea40 0402 	orr.w	r4, r0, r2
 8002e7c:	65bc      	str	r4, [r7, #88]	; 0x58
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e82:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002e86:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e92:	1cda      	adds	r2, r3, #3
 8002e94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e98:	4413      	add	r3, r2
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	653b      	str	r3, [r7, #80]	; 0x50
 8002ea2:	657a      	str	r2, [r7, #84]	; 0x54
 8002ea4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002ea8:	4623      	mov	r3, r4
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eae:	4623      	mov	r3, r4
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eb4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002eb8:	4623      	mov	r3, r4
 8002eba:	4303      	orrs	r3, r0
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ebe:	462b      	mov	r3, r5
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ec8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ecc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ed0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ed4:	1d1a      	adds	r2, r3, #4
 8002ed6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002ef0:	0023      	movs	r3, r4
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	ea40 0402 	orr.w	r4, r0, r2
 8002ef8:	633c      	str	r4, [r7, #48]	; 0x30
 8002efa:	430b      	orrs	r3, r1
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002f02:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002f06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f0e:	1d5a      	adds	r2, r3, #5
 8002f10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f14:	4413      	add	r3, r2
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002f2a:	0223      	lsls	r3, r4, #8
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	ea40 0402 	orr.w	r4, r0, r2
 8002f32:	623c      	str	r4, [r7, #32]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
 8002f38:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f3c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f40:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f48:	3306      	adds	r3, #6
 8002f4a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	61fa      	str	r2, [r7, #28]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	69bc      	ldr	r4, [r7, #24]
 8002f64:	0423      	lsls	r3, r4, #16
 8002f66:	2200      	movs	r2, #0
 8002f68:	ea40 0402 	orr.w	r4, r0, r2
 8002f6c:	613c      	str	r4, [r7, #16]
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f76:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f7a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f82:	3307      	adds	r3, #7
 8002f84:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	60fa      	str	r2, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	68bc      	ldr	r4, [r7, #8]
 8002f9e:	0623      	lsls	r3, r4, #24
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	ea40 0402 	orr.w	r4, r0, r2
 8002fa6:	603c      	str	r4, [r7, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002fb0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002fb4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002fb8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002fbc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002fc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002fca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fda:	4770      	bx	lr

08002fdc <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	0800df3c 	.word	0x0800df3c

08002ff8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	0800df50 	.word	0x0800df50

08003014 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
      data(0)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fac6 	bl	80015b0 <_ZN3ros3MsgC1Ev>
 8003024:	4a05      	ldr	r2, [pc, #20]	; (800303c <_ZN8std_msgs4BoolC1Ev+0x28>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	711a      	strb	r2, [r3, #4]
    {
    }
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	0800e060 	.word	0x0800e060

08003040 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	791b      	ldrb	r3, [r3, #4]
 8003052:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4413      	add	r3, r2
 800305a:	7a3a      	ldrb	r2, [r7, #8]
 800305c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
      return offset;
 8003064:	68fb      	ldr	r3, [r7, #12]
    }
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003084:	7a3a      	ldrb	r2, [r7, #8]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	440b      	add	r3, r1
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	b2db      	uxtb	r3, r3
 8003092:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003094:	7a3a      	ldrb	r2, [r7, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3301      	adds	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
     return offset;
 80030a0:	68fb      	ldr	r3, [r7, #12]
    }
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	0800df74 	.word	0x0800df74

080030cc <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	0800df84 	.word	0x0800df84

080030e8 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);

ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
//ros::Publisher scara_pub("scara_fromSTM", &scara_state);

void ROS::scara_callback(const geometry_msgs::Point &msgs){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	scara.ARM_Goal.Px = msgs.x;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030f6:	490b      	ldr	r1, [pc, #44]	; (8003124 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 80030f8:	e9c1 2300 	strd	r2, r3, [r1]
	scara.ARM_Goal.Py = msgs.y;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003102:	4908      	ldr	r1, [pc, #32]	; (8003124 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003104:	e9c1 2302 	strd	r2, r3, [r1, #8]
	scara.ARM_Goal.Pz = msgs.z;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800310e:	4905      	ldr	r1, [pc, #20]	; (8003124 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003110:	e9c1 2304 	strd	r2, r3, [r1, #16]
	scara.run();
 8003114:	4803      	ldr	r0, [pc, #12]	; (8003124 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003116:	f000 fe95 	bl	8003e44 <_ZN5SCARA3runEv>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	24001088 	.word	0x24001088

08003128 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003136:	490b      	ldr	r1, [pc, #44]	; (8003164 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003138:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003144:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800314e:	4905      	ldr	r1, [pc, #20]	; (8003164 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003150:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003154:	4803      	ldr	r0, [pc, #12]	; (8003164 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003156:	f7fe f8ed 	bl	8001334 <_ZN7Mecanum3runEv>
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	24000650 	.word	0x24000650

08003168 <_ZN3ROS5setupEv>:
//	car_speed.z = mecanum.CAR_Now.Omega;
//	mecanum_pub.publish(&car_speed);
//}


void ROS::setup(void){
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	nh.initNode();
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <_ZN3ROS5setupEv+0x18>)
 800316e:	f000 f941 	bl	80033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 8003172:	4904      	ldr	r1, [pc, #16]	; (8003184 <_ZN3ROS5setupEv+0x1c>)
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <_ZN3ROS5setupEv+0x18>)
 8003176:	f000 f95a 	bl	800342e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>

//    nh.advertise(mecanum_pub);
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	2400069c 	.word	0x2400069c
 8003184:	24001000 	.word	0x24001000

08003188 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <_ZN3ROS4loopEv+0x10>)
 800318e:	f000 f979 	bl	8003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2400069c 	.word	0x2400069c

0800319c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80031a4:	4805      	ldr	r0, [pc, #20]	; (80031bc <HAL_UART_TxCpltCallback+0x20>)
 80031a6:	f000 fb46 	bl	8003836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f96d 	bl	800248c <_ZN13STM32Hardware5flushEv>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2400069c 	.word	0x2400069c

080031c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <HAL_UART_RxCpltCallback+0x20>)
 80031ca:	f000 fb34 	bl	8003836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f91c 	bl	800240e <_ZN13STM32Hardware10reset_rbufEv>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2400069c 	.word	0x2400069c

080031e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d80d      	bhi.n	8003214 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	fa22 f103 	lsr.w	r1, r2, r3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	b2ca      	uxtb	r2, r1
 800320a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e7ee      	b.n	80031f2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d811      	bhi.n	800325e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	440a      	add	r2, r1
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	4611      	mov	r1, r2
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	00d2      	lsls	r2, r2, #3
 800324c:	fa01 f202 	lsl.w	r2, r1, r2
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3301      	adds	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e7ea      	b.n	8003234 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800325e:	bf00      	nop
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	0800e0a8 	.word	0x0800e0a8

0800328c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff ffe8 	bl	800326c <_ZN3ros15NodeHandleBase_C1Ev>
 800329c:	4a3a      	ldr	r2, [pc, #232]	; (8003388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f88a 	bl	80023c0 <_ZN13STM32HardwareC1Ev>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fcec 	bl	8001c98 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b18      	cmp	r3, #24
 80032c8:	d80b      	bhi.n	80032e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e7f0      	b.n	80032c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	2b18      	cmp	r3, #24
 80032ea:	d80a      	bhi.n	8003302 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80032f4:	2100      	movs	r1, #0
 80032f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	3301      	adds	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e7f1      	b.n	80032e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330c:	d20a      	bcs.n	8003324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e7f0      	b.n	8003306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332e:	d20a      	bcs.n	8003346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4413      	add	r3, r2
 8003336:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3301      	adds	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	e7f0      	b.n	8003328 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	0800e04c 	.word	0x0800e04c

0800338c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	0800e090 	.word	0x0800e090

080033ac <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffe5 	bl	800338c <_ZN3ros11Subscriber_C1Ev>
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3310      	adds	r3, #16
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f90b 	bl	80025e8 <_ZN13geometry_msgs5PointC1Ev>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	609a      	str	r2, [r3, #8]
  };
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	0800e034 	.word	0x0800e034

080033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fff9 	bl	80023f8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b18      	cmp	r3, #24
 8003440:	dc19      	bgt.n	8003476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f202 2222 	addw	r2, r2, #546	; 0x222
 800344a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10d      	bne.n	800346e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f202 2222 	addw	r2, r2, #546	; 0x222
 800345c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	605a      	str	r2, [r3, #4]
        return true;
 800346a:	2301      	movs	r3, #1
 800346c:	e004      	b.n	8003478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3301      	adds	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e7e2      	b.n	800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003476:	2300      	movs	r3, #0
  }
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f89d 	bl	80025d0 <_ZN13STM32Hardware4timeEv>
 8003496:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d903      	bls.n	80034b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d903      	bls.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d014      	beq.n	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f876 	bl	80025d0 <_ZN13STM32Hardware4timeEv>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80034f0:	429a      	cmp	r2, r3
 80034f2:	bf8c      	ite	hi
 80034f4:	2301      	movhi	r3, #1
 80034f6:	2300      	movls	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80034fe:	f06f 0301 	mvn.w	r3, #1
 8003502:	e194      	b.n	800382e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe ff91 	bl	8002430 <_ZN13STM32Hardware4readEv>
 800350e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f2c0 8174 	blt.w	8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800352e:	2b07      	cmp	r3, #7
 8003530:	d11e      	bne.n	8003570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003538:	1c59      	adds	r1, r3, #1
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	b2d1      	uxtb	r1, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
 8003548:	460a      	mov	r2, r1
 800354a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1b4      	bne.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2208      	movs	r2, #8
 800356a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800356e:	e7af      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003576:	2b00      	cmp	r3, #0
 8003578:	d128      	bne.n	80035cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2bff      	cmp	r3, #255	; 0xff
 800357e:	d10d      	bne.n	800359c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f103 0214 	add.w	r2, r3, #20
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800359a:	e799      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff f815 	bl	80025d0 <_ZN13STM32Hardware4timeEv>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	bf8c      	ite	hi
 80035b4:	2301      	movhi	r3, #1
 80035b6:	2300      	movls	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d088      	beq.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80035c6:	f06f 0301 	mvn.w	r3, #1
 80035ca:	e130      	b.n	800382e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d118      	bne.n	8003608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2bfe      	cmp	r3, #254	; 0xfe
 80035da:	d107      	bne.n	80035ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035ea:	e771      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f af68 	bne.w	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f924 	bl	800384e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003606:	e763      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800360e:	2b02      	cmp	r3, #2
 8003610:	d113      	bne.n	800363a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003638:	e74a      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003640:	2b03      	cmp	r3, #3
 8003642:	d110      	bne.n	8003666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	441a      	add	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003664:	e734      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800366c:	2b04      	cmp	r3, #4
 800366e:	d116      	bne.n	800369e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003676:	425a      	negs	r2, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	bf58      	it	pl
 800367e:	4253      	negpl	r3, r2
 8003680:	2bff      	cmp	r3, #255	; 0xff
 8003682:	d107      	bne.n	8003694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003692:	e71d      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800369c:	e718      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d10f      	bne.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80036c6:	e703      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d117      	bne.n	8003702 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2207      	movs	r2, #7
 80036e8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f47f aeec 	bne.w	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2208      	movs	r2, #8
 80036fc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003700:	e6e6      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003708:	2b08      	cmp	r3, #8
 800370a:	f47f aee1 	bne.w	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800371c:	425a      	negs	r2, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	bf58      	it	pl
 8003724:	4253      	negpl	r3, r2
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	f47f aed2 	bne.w	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d110      	bne.n	8003758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f889 	bl	800384e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8a4 	bl	800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	e06a      	b.n	800382e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800375e:	2b0a      	cmp	r3, #10
 8003760:	d107      	bne.n	8003772 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f96c 	bl	8003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003770:	e6ae      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003778:	2b06      	cmp	r3, #6
 800377a:	d10e      	bne.n	800379a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe fbb9 	bl	8001f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003798:	e69a      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037a0:	2b0b      	cmp	r3, #11
 80037a2:	d104      	bne.n	80037ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80037ac:	e690      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037b4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f43f ae84 	beq.w	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037ce:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037e2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80037fa:	4611      	mov	r1, r2
 80037fc:	4798      	blx	r3
    while (true)
 80037fe:	e667      	b.n	80034d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003800:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00f      	beq.n	800382c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800381a:	4293      	cmp	r3, r2
 800381c:	d906      	bls.n	800382c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f815 	bl	800384e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800382c:	2300      	movs	r3, #0
  }
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
    return &hardware_;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
  }
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd feb8 	bl	80015d0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f107 020c 	add.w	r2, r7, #12
 800386a:	210a      	movs	r1, #10
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4618      	mov	r0, r3
 8003876:	f7fe feab 	bl	80025d0 <_ZN13STM32Hardware4timeEv>
 800387a:	4602      	mov	r2, r0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003882:	bf00      	nop
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800388a:	b590      	push	{r4, r7, lr}
 800388c:	b08b      	sub	sp, #44	; 0x2c
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	4618      	mov	r0, r3
 8003898:	f7fd ff8a 	bl	80017b0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800389c:	2300      	movs	r3, #0
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	2b18      	cmp	r3, #24
 80038a4:	dc63      	bgt.n	800396e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d056      	beq.n	8003966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	6859      	ldr	r1, [r3, #4]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4608      	mov	r0, r1
 8003906:	4798      	blx	r3
 8003908:	4603      	mov	r3, r0
 800390a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4608      	mov	r0, r1
 8003934:	4798      	blx	r3
 8003936:	4603      	mov	r3, r0
 8003938:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800393a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800393e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681c      	ldr	r4, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fc78 	bl	800224a <_ZN3ros9Publisher15getEndpointTypeEv>
 800395a:	4601      	mov	r1, r0
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	461a      	mov	r2, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	3301      	adds	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e798      	b.n	80038a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	2b18      	cmp	r3, #24
 8003976:	dc5f      	bgt.n	8003a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d053      	beq.n	8003a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	b29b      	uxth	r3, r3
 8003998:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4798      	blx	r3
 80039cc:	4603      	mov	r3, r0
 80039ce:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4608      	mov	r0, r1
 80039f0:	4798      	blx	r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80039f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039fa:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681c      	ldr	r4, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4798      	blx	r3
 8003a24:	4601      	mov	r1, r0
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	3301      	adds	r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	e79c      	b.n	8003972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003a40:	bf00      	nop
 8003a42:	372c      	adds	r7, #44	; 0x2c
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd90      	pop	{r4, r7, pc}

08003a48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003a52:	f107 0308 	add.w	r3, r7, #8
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fdba 	bl	80015d0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fdb5 	bl	80025d0 <_ZN13STM32Hardware4timeEv>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003a72:	f107 0308 	add.w	r3, r7, #8
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd fe19 	bl	80016b0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4915      	ldr	r1, [pc, #84]	; (8003ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a84:	fba1 1303 	umull	r1, r3, r1, r3
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a94:	fba3 0302 	umull	r0, r3, r3, r2
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	440b      	add	r3, r1
 8003aac:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003aae:	f107 0308 	add.w	r3, r7, #8
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8a6 	bl	8003c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fd85 	bl	80025d0 <_ZN13STM32Hardware4timeEv>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	10624dd3 	.word	0x10624dd3
 8003adc:	000f4240 	.word	0x000f4240

08003ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b63      	cmp	r3, #99	; 0x63
 8003af0:	dd09      	ble.n	8003b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003af8:	f083 0301 	eor.w	r3, r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e079      	b.n	8003bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003b12:	3207      	adds	r2, #7
 8003b14:	4611      	mov	r1, r2
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
 8003b1a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	22ff      	movs	r2, #255	; 0xff
 8003b20:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	22fe      	movs	r2, #254	; 0xfe
 8003b28:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003b52:	4413      	add	r3, r2
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	b21b      	sxth	r3, r3
 8003b6e:	121b      	asrs	r3, r3, #8
 8003b70:	b21b      	sxth	r3, r3
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b7e:	2305      	movs	r3, #5
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	3306      	adds	r3, #6
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	dc0d      	bgt.n	8003ba8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e7ec      	b.n	8003b82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3307      	adds	r3, #7
 8003bac:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	425a      	negs	r2, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	bf58      	it	pl
 8003bb8:	4253      	negpl	r3, r2
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	6179      	str	r1, [r7, #20]
 8003bc2:	43d2      	mvns	r2, r2
 8003bc4:	b2d1      	uxtb	r1, r2
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	460a      	mov	r2, r1
 8003bcc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd6:	dc0a      	bgt.n	8003bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1d18      	adds	r0, r3, #4
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fe fcad 	bl	8002544 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	e005      	b.n	8003bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003bee:	4905      	ldr	r1, [pc, #20]	; (8003c04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f849 	bl	8003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	0800dfa8 	.word	0x0800dfa8

08003c08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fcda 	bl	80025d0 <_ZN13STM32Hardware4timeEv>
 8003c1c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4915      	ldr	r1, [pc, #84]	; (8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c26:	fba1 1303 	umull	r1, r3, r1, r3
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c48:	fb00 f303 	mul.w	r3, r0, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	1aca      	subs	r2, r1, r3
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f7fc fcd8 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	10624dd3 	.word	0x10624dd3
 8003c80:	000f4240 	.word	0x000f4240
 8003c84:	3b9aca00 	.word	0x3b9aca00

08003c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	2103      	movs	r1, #3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f804 	bl	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	460b      	mov	r3, r1
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003cb2:	f107 0314 	add.w	r3, r7, #20
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd ff3e 	bl	8001b38 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	2107      	movs	r1, #7
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	4798      	blx	r3
  }
 8003cd4:	bf00      	nop
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <_Z41__static_initialization_and_destruction_0ii>:
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d11f      	bne.n	8003d2c <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d11a      	bne.n	8003d2c <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003cf6:	480f      	ldr	r0, [pc, #60]	; (8003d34 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003cf8:	f7ff fac8 	bl	800328c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool scara_state;
 8003cfc:	480e      	ldr	r0, [pc, #56]	; (8003d38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cfe:	f7ff f989 	bl	8003014 <_ZN8std_msgs4BoolC1Ev>
geometry_msgs::Point car_speed;
 8003d02:	480e      	ldr	r0, [pc, #56]	; (8003d3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d04:	f7fe fc70 	bl	80025e8 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003d0c:	490d      	ldr	r1, [pc, #52]	; (8003d44 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003d0e:	480e      	ldr	r0, [pc, #56]	; (8003d48 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003d10:	f7ff fb4c 	bl	80033ac <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8003d14:	2301      	movs	r3, #1
 8003d16:	4a0d      	ldr	r2, [pc, #52]	; (8003d4c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003d18:	490d      	ldr	r1, [pc, #52]	; (8003d50 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003d1a:	480e      	ldr	r0, [pc, #56]	; (8003d54 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003d1c:	f7ff fb46 	bl	80033ac <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003d20:	2300      	movs	r3, #0
 8003d22:	4a06      	ldr	r2, [pc, #24]	; (8003d3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003d24:	490c      	ldr	r1, [pc, #48]	; (8003d58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003d26:	480d      	ldr	r0, [pc, #52]	; (8003d5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003d28:	f7fe fa78 	bl	800221c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2400069c 	.word	0x2400069c
 8003d38:	24000fd8 	.word	0x24000fd8
 8003d3c:	24000fe0 	.word	0x24000fe0
 8003d40:	08003129 	.word	0x08003129
 8003d44:	0800dfe4 	.word	0x0800dfe4
 8003d48:	24001000 	.word	0x24001000
 8003d4c:	080030e9 	.word	0x080030e9
 8003d50:	0800dff4 	.word	0x0800dff4
 8003d54:	24001038 	.word	0x24001038
 8003d58:	0800e000 	.word	0x0800e000
 8003d5c:	24001070 	.word	0x24001070

08003d60 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3310      	adds	r3, #16
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe fdd4 	bl	800291e <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	3210      	adds	r2, #16
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4798      	blx	r3
  }
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3310      	adds	r3, #16
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff f914 	bl	8002fdc <_ZN13geometry_msgs5Point7getTypeEv>
 8003db4:	4603      	mov	r3, r0
  }
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3310      	adds	r3, #16
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f914 	bl	8002ff8 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003dd0:	4603      	mov	r3, r0
  }
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
    return configured_;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_GLOBAL__sub_I_nh>:
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	f7ff ff6d 	bl	8003cdc <_Z41__static_initialization_and_destruction_0ii>
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <_ZN8ARM_INFOC1Ev>:
	double Py;
	double Pz;

	// pub to ROS //
	bool is_finished = false;
} ARM_INFO;
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	761a      	strb	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <_ZN5SCARAC1Ev>:

class SCARA{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ffea 	bl	8003e04 <_ZN8ARM_INFOC1Ev>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3320      	adds	r3, #32
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ffe5 	bl	8003e04 <_ZN8ARM_INFOC1Ev>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN5SCARA3runEv>:
#include "scara.h"
#include "stepper.h"

SCARA scara;

void SCARA::run(void){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	SCARA::tf2_arm_angle();
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f804 	bl	8003e5a <_ZN5SCARA13tf2_arm_angleEv>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_ZN5SCARA13tf2_arm_angleEv>:


void SCARA::tf2_arm_angle(void){
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]


}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <_Z41__static_initialization_and_destruction_0ii>:
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d107      	bne.n	8003e90 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d102      	bne.n	8003e90 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA scara;
 8003e8a:	4803      	ldr	r0, [pc, #12]	; (8003e98 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003e8c:	f7ff ffc8 	bl	8003e20 <_ZN5SCARAC1Ev>
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	24001088 	.word	0x24001088

08003e9c <_GLOBAL__sub_I_scara>:
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f7ff ffe3 	bl	8003e70 <_Z41__static_initialization_and_destruction_0ii>
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <HAL_MspInit+0x3c>)
 8003eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <HAL_MspInit+0x3c>)
 8003eba:	f043 0302 	orr.w	r3, r3, #2
 8003ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_MspInit+0x3c>)
 8003ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	2005      	movs	r0, #5
 8003ed6:	f000 fed8 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003eda:	2005      	movs	r0, #5
 8003edc:	f000 feef 	bl	8004cbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400

08003eec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b090      	sub	sp, #64	; 0x40
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d14e      	bne.n	8003fac <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f0e:	4b77      	ldr	r3, [pc, #476]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f14:	4a75      	ldr	r2, [pc, #468]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f1e:	4b73      	ldr	r3, [pc, #460]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2c:	4b6f      	ldr	r3, [pc, #444]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f32:	4a6e      	ldr	r2, [pc, #440]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f3c:	4b6b      	ldr	r3, [pc, #428]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4a:	4b68      	ldr	r3, [pc, #416]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f50:	4a66      	ldr	r2, [pc, #408]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f52:	f043 0302 	orr.w	r3, r3, #2
 8003f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f5a:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	623b      	str	r3, [r7, #32]
 8003f66:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f76:	2300      	movs	r3, #0
 8003f78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f82:	4619      	mov	r1, r3
 8003f84:	485a      	ldr	r0, [pc, #360]	; (80040f0 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f86:	f003 fcef 	bl	8007968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f96:	2300      	movs	r3, #0
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4853      	ldr	r0, [pc, #332]	; (80040f4 <HAL_TIM_Encoder_MspInit+0x208>)
 8003fa6:	f003 fcdf 	bl	8007968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003faa:	e09b      	b.n	80040e4 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a51      	ldr	r2, [pc, #324]	; (80040f8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d12e      	bne.n	8004014 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fb6:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fbc:	4a4b      	ldr	r2, [pc, #300]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003fbe:	f043 0302 	orr.w	r3, r3, #2
 8003fc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fc6:	4b49      	ldr	r3, [pc, #292]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd4:	4b45      	ldr	r3, [pc, #276]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fda:	4a44      	ldr	r2, [pc, #272]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fe4:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8003fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ff2:	2330      	movs	r3, #48	; 0x30
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffe:	2300      	movs	r3, #0
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004002:	2302      	movs	r3, #2
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800400a:	4619      	mov	r1, r3
 800400c:	4839      	ldr	r0, [pc, #228]	; (80040f4 <HAL_TIM_Encoder_MspInit+0x208>)
 800400e:	f003 fcab 	bl	8007968 <HAL_GPIO_Init>
}
 8004012:	e067      	b.n	80040e4 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a38      	ldr	r2, [pc, #224]	; (80040fc <HAL_TIM_Encoder_MspInit+0x210>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d12f      	bne.n	800407e <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800401e:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8004020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004024:	4a31      	ldr	r2, [pc, #196]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800402e:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8004030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800403c:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 800403e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004042:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8004044:	f043 0308 	orr.w	r3, r3, #8
 8004048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800404c:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 800404e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800405a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004060:	2302      	movs	r3, #2
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800406c:	2302      	movs	r3, #2
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004074:	4619      	mov	r1, r3
 8004076:	4822      	ldr	r0, [pc, #136]	; (8004100 <HAL_TIM_Encoder_MspInit+0x214>)
 8004078:	f003 fc76 	bl	8007968 <HAL_GPIO_Init>
}
 800407c:	e032      	b.n	80040e4 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a20      	ldr	r2, [pc, #128]	; (8004104 <HAL_TIM_Encoder_MspInit+0x218>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d12d      	bne.n	80040e4 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 800408a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 8004090:	f043 0308 	orr.w	r3, r3, #8
 8004094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004098:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 800409a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 80040a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ac:	4a0f      	ldr	r2, [pc, #60]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <HAL_TIM_Encoder_MspInit+0x200>)
 80040b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040c4:	2303      	movs	r3, #3
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c8:	2302      	movs	r3, #2
 80040ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d0:	2300      	movs	r3, #0
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80040d4:	2302      	movs	r3, #2
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040dc:	4619      	mov	r1, r3
 80040de:	4804      	ldr	r0, [pc, #16]	; (80040f0 <HAL_TIM_Encoder_MspInit+0x204>)
 80040e0:	f003 fc42 	bl	8007968 <HAL_GPIO_Init>
}
 80040e4:	bf00      	nop
 80040e6:	3740      	adds	r7, #64	; 0x40
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	58024400 	.word	0x58024400
 80040f0:	58020000 	.word	0x58020000
 80040f4:	58020400 	.word	0x58020400
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	58020c00 	.word	0x58020c00
 8004104:	40000c00 	.word	0x40000c00

08004108 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_TIM_PWM_MspInit+0x84>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d117      	bne.n	800414a <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800411a:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <HAL_TIM_PWM_MspInit+0x88>)
 800411c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <HAL_TIM_PWM_MspInit+0x88>)
 8004122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004126:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_TIM_PWM_MspInit+0x88>)
 800412c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004138:	2200      	movs	r2, #0
 800413a:	2100      	movs	r1, #0
 800413c:	202b      	movs	r0, #43	; 0x2b
 800413e:	f000 fda4 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004142:	202b      	movs	r0, #43	; 0x2b
 8004144:	f000 fdbb 	bl	8004cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004148:	e01b      	b.n	8004182 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <HAL_TIM_PWM_MspInit+0x8c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d116      	bne.n	8004182 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004154:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <HAL_TIM_PWM_MspInit+0x88>)
 8004156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800415a:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <HAL_TIM_PWM_MspInit+0x88>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_TIM_PWM_MspInit+0x88>)
 8004166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2100      	movs	r1, #0
 8004176:	2074      	movs	r0, #116	; 0x74
 8004178:	f000 fd87 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800417c:	2074      	movs	r0, #116	; 0x74
 800417e:	f000 fd9e 	bl	8004cbe <HAL_NVIC_EnableIRQ>
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40001800 	.word	0x40001800
 8004190:	58024400 	.word	0x58024400
 8004194:	40014000 	.word	0x40014000

08004198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <HAL_TIM_Base_MspInit+0x48>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d116      	bne.n	80041d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <HAL_TIM_Base_MspInit+0x4c>)
 80041ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041b0:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <HAL_TIM_Base_MspInit+0x4c>)
 80041b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <HAL_TIM_Base_MspInit+0x4c>)
 80041bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80041c8:	2200      	movs	r2, #0
 80041ca:	2100      	movs	r1, #0
 80041cc:	202c      	movs	r0, #44	; 0x2c
 80041ce:	f000 fd5c 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80041d2:	202c      	movs	r0, #44	; 0x2c
 80041d4:	f000 fd73 	bl	8004cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80041d8:	bf00      	nop
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40001c00 	.word	0x40001c00
 80041e4:	58024400 	.word	0x58024400

080041e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <HAL_TIM_MspPostInit+0xb4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d120      	bne.n	800424c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800420a:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_TIM_MspPostInit+0xb8>)
 800420c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004210:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <HAL_TIM_MspPostInit+0xb8>)
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_TIM_MspPostInit+0xb8>)
 800421c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004228:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800422c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422e:	2302      	movs	r3, #2
 8004230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	2300      	movs	r3, #0
 8004238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800423a:	2302      	movs	r3, #2
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423e:	f107 0314 	add.w	r3, r7, #20
 8004242:	4619      	mov	r1, r3
 8004244:	4817      	ldr	r0, [pc, #92]	; (80042a4 <HAL_TIM_MspPostInit+0xbc>)
 8004246:	f003 fb8f 	bl	8007968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800424a:	e023      	b.n	8004294 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_TIM_MspPostInit+0xc0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d11e      	bne.n	8004294 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_TIM_MspPostInit+0xb8>)
 8004258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800425c:	4a10      	ldr	r2, [pc, #64]	; (80042a0 <HAL_TIM_MspPostInit+0xb8>)
 800425e:	f043 0310 	orr.w	r3, r3, #16
 8004262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_TIM_MspPostInit+0xb8>)
 8004268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004274:	2360      	movs	r3, #96	; 0x60
 8004276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004280:	2300      	movs	r3, #0
 8004282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004284:	2304      	movs	r3, #4
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4619      	mov	r1, r3
 800428e:	4807      	ldr	r0, [pc, #28]	; (80042ac <HAL_TIM_MspPostInit+0xc4>)
 8004290:	f003 fb6a 	bl	8007968 <HAL_GPIO_Init>
}
 8004294:	bf00      	nop
 8004296:	3728      	adds	r7, #40	; 0x28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40001800 	.word	0x40001800
 80042a0:	58024400 	.word	0x58024400
 80042a4:	58020400 	.word	0x58020400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	58021000 	.word	0x58021000

080042b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b0b6      	sub	sp, #216	; 0xd8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	60da      	str	r2, [r3, #12]
 80042c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042c8:	f107 0310 	add.w	r3, r7, #16
 80042cc:	22b4      	movs	r2, #180	; 0xb4
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f009 fc33 	bl	800db3c <memset>
  if(huart->Instance==USART3)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a57      	ldr	r2, [pc, #348]	; (8004438 <HAL_UART_MspInit+0x188>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	f040 80a7 	bne.w	8004430 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80042e2:	2302      	movs	r3, #2
 80042e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	4618      	mov	r0, r3
 80042f2:	f004 fc6f 	bl	8008bd4 <HAL_RCCEx_PeriphCLKConfig>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80042fc:	f7fc ffb2 	bl	8001264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004300:	4b4e      	ldr	r3, [pc, #312]	; (800443c <HAL_UART_MspInit+0x18c>)
 8004302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004306:	4a4d      	ldr	r2, [pc, #308]	; (800443c <HAL_UART_MspInit+0x18c>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004310:	4b4a      	ldr	r3, [pc, #296]	; (800443c <HAL_UART_MspInit+0x18c>)
 8004312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800431e:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_UART_MspInit+0x18c>)
 8004320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004324:	4a45      	ldr	r2, [pc, #276]	; (800443c <HAL_UART_MspInit+0x18c>)
 8004326:	f043 0302 	orr.w	r3, r3, #2
 800432a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800432e:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_UART_MspInit+0x18c>)
 8004330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800433c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004344:	2302      	movs	r3, #2
 8004346:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004356:	2307      	movs	r3, #7
 8004358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004360:	4619      	mov	r1, r3
 8004362:	4837      	ldr	r0, [pc, #220]	; (8004440 <HAL_UART_MspInit+0x190>)
 8004364:	f003 fb00 	bl	8007968 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8004368:	4b36      	ldr	r3, [pc, #216]	; (8004444 <HAL_UART_MspInit+0x194>)
 800436a:	4a37      	ldr	r2, [pc, #220]	; (8004448 <HAL_UART_MspInit+0x198>)
 800436c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800436e:	4b35      	ldr	r3, [pc, #212]	; (8004444 <HAL_UART_MspInit+0x194>)
 8004370:	222d      	movs	r2, #45	; 0x2d
 8004372:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004374:	4b33      	ldr	r3, [pc, #204]	; (8004444 <HAL_UART_MspInit+0x194>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800437a:	4b32      	ldr	r3, [pc, #200]	; (8004444 <HAL_UART_MspInit+0x194>)
 800437c:	2200      	movs	r2, #0
 800437e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004380:	4b30      	ldr	r3, [pc, #192]	; (8004444 <HAL_UART_MspInit+0x194>)
 8004382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004386:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004388:	4b2e      	ldr	r3, [pc, #184]	; (8004444 <HAL_UART_MspInit+0x194>)
 800438a:	2200      	movs	r2, #0
 800438c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800438e:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <HAL_UART_MspInit+0x194>)
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004394:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <HAL_UART_MspInit+0x194>)
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_UART_MspInit+0x194>)
 800439c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043a0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043a2:	4b28      	ldr	r3, [pc, #160]	; (8004444 <HAL_UART_MspInit+0x194>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043a8:	4826      	ldr	r0, [pc, #152]	; (8004444 <HAL_UART_MspInit+0x194>)
 80043aa:	f000 fca3 	bl	8004cf4 <HAL_DMA_Init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80043b4:	f7fc ff56 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a22      	ldr	r2, [pc, #136]	; (8004444 <HAL_UART_MspInit+0x194>)
 80043bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80043be:	4a21      	ldr	r2, [pc, #132]	; (8004444 <HAL_UART_MspInit+0x194>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043c6:	4a22      	ldr	r2, [pc, #136]	; (8004450 <HAL_UART_MspInit+0x1a0>)
 80043c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043cc:	222e      	movs	r2, #46	; 0x2e
 80043ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <HAL_UART_MspInit+0x19c>)
 80043f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043fc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_UART_MspInit+0x19c>)
 8004400:	2200      	movs	r2, #0
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004404:	4811      	ldr	r0, [pc, #68]	; (800444c <HAL_UART_MspInit+0x19c>)
 8004406:	f000 fc75 	bl	8004cf4 <HAL_DMA_Init>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8004410:	f7fc ff28 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0d      	ldr	r2, [pc, #52]	; (800444c <HAL_UART_MspInit+0x19c>)
 8004418:	679a      	str	r2, [r3, #120]	; 0x78
 800441a:	4a0c      	ldr	r2, [pc, #48]	; (800444c <HAL_UART_MspInit+0x19c>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	2100      	movs	r1, #0
 8004424:	2027      	movs	r0, #39	; 0x27
 8004426:	f000 fc30 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800442a:	2027      	movs	r0, #39	; 0x27
 800442c:	f000 fc47 	bl	8004cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004430:	bf00      	nop
 8004432:	37d8      	adds	r7, #216	; 0xd8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40004800 	.word	0x40004800
 800443c:	58024400 	.word	0x58024400
 8004440:	58020400 	.word	0x58020400
 8004444:	24000560 	.word	0x24000560
 8004448:	40020010 	.word	0x40020010
 800444c:	240005d8 	.word	0x240005d8
 8004450:	40020028 	.word	0x40020028

08004454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004458:	e7fe      	b.n	8004458 <NMI_Handler+0x4>

0800445a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800445a:	b480      	push	{r7}
 800445c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800445e:	e7fe      	b.n	800445e <HardFault_Handler+0x4>

08004460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004464:	e7fe      	b.n	8004464 <MemManage_Handler+0x4>

08004466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800446a:	e7fe      	b.n	800446a <BusFault_Handler+0x4>

0800446c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004470:	e7fe      	b.n	8004470 <UsageFault_Handler+0x4>

08004472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004472:	b480      	push	{r7}
 8004474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004476:	bf00      	nop
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004484:	bf00      	nop
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004492:	bf00      	nop
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a0:	f000 faf8 	bl	8004a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044bc:	4802      	ldr	r0, [pc, #8]	; (80044c8 <DMA1_Stream0_IRQHandler+0x10>)
 80044be:	f001 ff41 	bl	8006344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	24000560 	.word	0x24000560

080044cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80044d0:	4802      	ldr	r0, [pc, #8]	; (80044dc <DMA1_Stream1_IRQHandler+0x10>)
 80044d2:	f001 ff37 	bl	8006344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	240005d8 	.word	0x240005d8

080044e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80044e4:	4802      	ldr	r0, [pc, #8]	; (80044f0 <USART3_IRQHandler+0x10>)
 80044e6:	f007 faf3 	bl	800bad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	240004d0 	.word	0x240004d0

080044f4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80044fa:	f006 fa59 	bl	800a9b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	240003ec 	.word	0x240003ec

08004508 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800450e:	f006 fa4f 	bl	800a9b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	24000438 	.word	0x24000438

0800451c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <TIM15_IRQHandler+0x10>)
 8004522:	f006 fa45 	bl	800a9b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	24000484 	.word	0x24000484

08004530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
	return 1;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_kill>:

int _kill(int pid, int sig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800454a:	f009 fabf 	bl	800dacc <__errno>
 800454e:	4603      	mov	r3, r0
 8004550:	2216      	movs	r2, #22
 8004552:	601a      	str	r2, [r3, #0]
	return -1;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_exit>:

void _exit (int status)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004568:	f04f 31ff 	mov.w	r1, #4294967295
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ffe7 	bl	8004540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004572:	e7fe      	b.n	8004572 <_exit+0x12>

08004574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <_sbrk+0x5c>)
 800457e:	4b15      	ldr	r3, [pc, #84]	; (80045d4 <_sbrk+0x60>)
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004588:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <_sbrk+0x64>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <_sbrk+0x64>)
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <_sbrk+0x68>)
 8004594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <_sbrk+0x64>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d207      	bcs.n	80045b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045a4:	f009 fa92 	bl	800dacc <__errno>
 80045a8:	4603      	mov	r3, r0
 80045aa:	220c      	movs	r2, #12
 80045ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	e009      	b.n	80045c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045b4:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <_sbrk+0x64>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <_sbrk+0x64>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	4a05      	ldr	r2, [pc, #20]	; (80045d8 <_sbrk+0x64>)
 80045c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045c6:	68fb      	ldr	r3, [r7, #12]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	24050000 	.word	0x24050000
 80045d4:	00000400 	.word	0x00000400
 80045d8:	240010c8 	.word	0x240010c8
 80045dc:	240010e0 	.word	0x240010e0

080045e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045e4:	4b32      	ldr	r3, [pc, #200]	; (80046b0 <SystemInit+0xd0>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	4a31      	ldr	r2, [pc, #196]	; (80046b0 <SystemInit+0xd0>)
 80045ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <SystemInit+0xd4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	2b06      	cmp	r3, #6
 80045fe:	d807      	bhi.n	8004610 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <SystemInit+0xd4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 030f 	bic.w	r3, r3, #15
 8004608:	4a2a      	ldr	r2, [pc, #168]	; (80046b4 <SystemInit+0xd4>)
 800460a:	f043 0307 	orr.w	r3, r3, #7
 800460e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004610:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <SystemInit+0xd8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a28      	ldr	r2, [pc, #160]	; (80046b8 <SystemInit+0xd8>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800461c:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <SystemInit+0xd8>)
 800461e:	2200      	movs	r2, #0
 8004620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004622:	4b25      	ldr	r3, [pc, #148]	; (80046b8 <SystemInit+0xd8>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4924      	ldr	r1, [pc, #144]	; (80046b8 <SystemInit+0xd8>)
 8004628:	4b24      	ldr	r3, [pc, #144]	; (80046bc <SystemInit+0xdc>)
 800462a:	4013      	ands	r3, r2
 800462c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <SystemInit+0xd4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800463a:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <SystemInit+0xd4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 030f 	bic.w	r3, r3, #15
 8004642:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <SystemInit+0xd4>)
 8004644:	f043 0307 	orr.w	r3, r3, #7
 8004648:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <SystemInit+0xd8>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <SystemInit+0xd8>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <SystemInit+0xd8>)
 8004658:	2200      	movs	r2, #0
 800465a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800465c:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <SystemInit+0xd8>)
 800465e:	4a18      	ldr	r2, [pc, #96]	; (80046c0 <SystemInit+0xe0>)
 8004660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <SystemInit+0xd8>)
 8004664:	4a17      	ldr	r2, [pc, #92]	; (80046c4 <SystemInit+0xe4>)
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <SystemInit+0xd8>)
 800466a:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <SystemInit+0xe8>)
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <SystemInit+0xd8>)
 8004670:	2200      	movs	r2, #0
 8004672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <SystemInit+0xd8>)
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <SystemInit+0xe8>)
 8004678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <SystemInit+0xd8>)
 800467c:	2200      	movs	r2, #0
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <SystemInit+0xd8>)
 8004682:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <SystemInit+0xe8>)
 8004684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <SystemInit+0xd8>)
 8004688:	2200      	movs	r2, #0
 800468a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <SystemInit+0xd8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <SystemInit+0xd8>)
 8004692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <SystemInit+0xd8>)
 800469a:	2200      	movs	r2, #0
 800469c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <SystemInit+0xec>)
 80046a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80046a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80046a6:	bf00      	nop
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00
 80046b4:	52002000 	.word	0x52002000
 80046b8:	58024400 	.word	0x58024400
 80046bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80046c0:	02020200 	.word	0x02020200
 80046c4:	01ff0000 	.word	0x01ff0000
 80046c8:	01010280 	.word	0x01010280
 80046cc:	52004000 	.word	0x52004000

080046d0 <HAL_TIM_PeriodElapsedCallback>:
#define STEP_PIN_4 GPIO_PIN_9

//int ms=0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a90      	ldr	r2, [pc, #576]	; (8004920 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	f040 811a 	bne.w	8004918 <HAL_TIM_PeriodElapsedCallback+0x248>
//		ms++;
//		if(ms%100==0) ROS::pub_car_vel();


		/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 80046e4:	4b8f      	ldr	r3, [pc, #572]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	4b8e      	ldr	r3, [pc, #568]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80046ee:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fr.PIDControl();
 80046f2:	488d      	ldr	r0, [pc, #564]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80046f4:	f7fc f844 	bl	8000780 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 80046f8:	4b8a      	ldr	r3, [pc, #552]	; (8004924 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24
		if (fr.PID >= 0) {
 8004700:	4b89      	ldr	r3, [pc, #548]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004702:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004706:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800470a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470e:	db0b      	blt.n	8004728 <HAL_TIM_PeriodElapsedCallback+0x58>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 8004710:	2201      	movs	r2, #1
 8004712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004716:	4885      	ldr	r0, [pc, #532]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004718:	f003 face 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004722:	4882      	ldr	r0, [pc, #520]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004724:	f003 fac8 	bl	8007cb8 <HAL_GPIO_WritePin>
		}
		if (fr.PID < 0) {
 8004728:	4b7f      	ldr	r3, [pc, #508]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800472a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800472e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d513      	bpl.n	8004760 <HAL_TIM_PeriodElapsedCallback+0x90>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 8004738:	2200      	movs	r2, #0
 800473a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800473e:	487b      	ldr	r0, [pc, #492]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004740:	f003 faba 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 8004744:	2201      	movs	r2, #1
 8004746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800474a:	4878      	ldr	r0, [pc, #480]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800474c:	f003 fab4 	bl	8007cb8 <HAL_GPIO_WritePin>
			fr.PID = -fr.PID;
 8004750:	4b75      	ldr	r3, [pc, #468]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004752:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004756:	eeb1 7b47 	vneg.f64	d7, d7
 800475a:	4b73      	ldr	r3, [pc, #460]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800475c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, (int )fr.PID);
 8004760:	4b71      	ldr	r3, [pc, #452]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004762:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004766:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800476a:	4b71      	ldr	r3, [pc, #452]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	ee17 2a90 	vmov	r2, s15
 8004772:	639a      	str	r2, [r3, #56]	; 0x38

		/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 8004774:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b29a      	uxth	r2, r3
 800477c:	4b6e      	ldr	r3, [pc, #440]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800477e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fl.PIDControl();
 8004782:	486d      	ldr	r0, [pc, #436]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004784:	f7fb fffc 	bl	8000780 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8004788:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	625a      	str	r2, [r3, #36]	; 0x24
		if (fl.PID < 0) {
 8004790:	4b69      	ldr	r3, [pc, #420]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004792:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004796:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479e:	d50b      	bpl.n	80047b8 <HAL_TIM_PeriodElapsedCallback+0xe8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 80047a0:	2201      	movs	r2, #1
 80047a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047a6:	4865      	ldr	r0, [pc, #404]	; (800493c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80047a8:	f003 fa86 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 80047ac:	2200      	movs	r2, #0
 80047ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047b2:	4862      	ldr	r0, [pc, #392]	; (800493c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80047b4:	f003 fa80 	bl	8007cb8 <HAL_GPIO_WritePin>
		}
		if (fl.PID >= 0) {
 80047b8:	4b5f      	ldr	r3, [pc, #380]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047ba:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80047c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c6:	db13      	blt.n	80047f0 <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 80047c8:	2200      	movs	r2, #0
 80047ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ce:	485b      	ldr	r0, [pc, #364]	; (800493c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80047d0:	f003 fa72 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 80047d4:	2201      	movs	r2, #1
 80047d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047da:	4858      	ldr	r0, [pc, #352]	; (800493c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80047dc:	f003 fa6c 	bl	8007cb8 <HAL_GPIO_WritePin>
			fl.PID = -fl.PID;
 80047e0:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047e6:	eeb1 7b47 	vneg.f64	d7, d7
 80047ea:	4b53      	ldr	r3, [pc, #332]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047ec:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (int )fl.PID);
 80047f0:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80047f2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047fa:	4b4d      	ldr	r3, [pc, #308]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	ee17 2a90 	vmov	r2, s15
 8004802:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8004804:	4b4e      	ldr	r3, [pc, #312]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	b29a      	uxth	r2, r3
 800480c:	4b4d      	ldr	r3, [pc, #308]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800480e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		br.PIDControl();
 8004812:	484c      	ldr	r0, [pc, #304]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004814:	f7fb ffb4 	bl	8000780 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2200      	movs	r2, #0
 800481e:	625a      	str	r2, [r3, #36]	; 0x24
		if (br.PID < 0) {
 8004820:	4b48      	ldr	r3, [pc, #288]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004822:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004826:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800482a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482e:	d509      	bpl.n	8004844 <HAL_TIM_PeriodElapsedCallback+0x174>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8004830:	2201      	movs	r2, #1
 8004832:	2104      	movs	r1, #4
 8004834:	4844      	ldr	r0, [pc, #272]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004836:	f003 fa3f 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 800483a:	2200      	movs	r2, #0
 800483c:	2108      	movs	r1, #8
 800483e:	4842      	ldr	r0, [pc, #264]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004840:	f003 fa3a 	bl	8007cb8 <HAL_GPIO_WritePin>
		}
		if (br.PID >= 0) {
 8004844:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004846:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800484a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	db11      	blt.n	8004878 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 8004854:	2200      	movs	r2, #0
 8004856:	2104      	movs	r1, #4
 8004858:	483b      	ldr	r0, [pc, #236]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800485a:	f003 fa2d 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 800485e:	2201      	movs	r2, #1
 8004860:	2108      	movs	r1, #8
 8004862:	4839      	ldr	r0, [pc, #228]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004864:	f003 fa28 	bl	8007cb8 <HAL_GPIO_WritePin>
			br.PID = -br.PID;
 8004868:	4b36      	ldr	r3, [pc, #216]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800486a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800486e:	eeb1 7b47 	vneg.f64	d7, d7
 8004872:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004874:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (int )br.PID);
 8004878:	4b32      	ldr	r3, [pc, #200]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800487a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800487e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004882:	4b32      	ldr	r3, [pc, #200]	; (800494c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	ee17 2a90 	vmov	r2, s15
 800488a:	635a      	str	r2, [r3, #52]	; 0x34

		/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 800488c:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	b29a      	uxth	r2, r3
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004896:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		bl.PIDControl();
 800489a:	482e      	ldr	r0, [pc, #184]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800489c:	f7fb ff70 	bl	8000780 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 80048a0:	4b2b      	ldr	r3, [pc, #172]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2200      	movs	r2, #0
 80048a6:	625a      	str	r2, [r3, #36]	; 0x24
		if (bl.PID >= 0) {
 80048a8:	4b2a      	ldr	r3, [pc, #168]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80048aa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	db0a      	blt.n	80048ce <HAL_TIM_PeriodElapsedCallback+0x1fe>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 80048b8:	2201      	movs	r2, #1
 80048ba:	2110      	movs	r1, #16
 80048bc:	4822      	ldr	r0, [pc, #136]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048be:	f003 f9fb 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 80048c2:	2200      	movs	r2, #0
 80048c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048c8:	4823      	ldr	r0, [pc, #140]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80048ca:	f003 f9f5 	bl	8007cb8 <HAL_GPIO_WritePin>
		}
		if (bl.PID < 0) {
 80048ce:	4b21      	ldr	r3, [pc, #132]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80048d0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	d512      	bpl.n	8004904 <HAL_TIM_PeriodElapsedCallback+0x234>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 80048de:	2200      	movs	r2, #0
 80048e0:	2110      	movs	r1, #16
 80048e2:	4819      	ldr	r0, [pc, #100]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80048e4:	f003 f9e8 	bl	8007cb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 80048e8:	2201      	movs	r2, #1
 80048ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048ee:	481a      	ldr	r0, [pc, #104]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80048f0:	f003 f9e2 	bl	8007cb8 <HAL_GPIO_WritePin>
			bl.PID = -bl.PID;
 80048f4:	4b17      	ldr	r3, [pc, #92]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80048f6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048fa:	eeb1 7b47 	vneg.f64	d7, d7
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004900:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, (int )bl.PID);
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004906:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800490a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	ee17 2a90 	vmov	r2, s15
 8004916:	639a      	str	r2, [r3, #56]	; 0x38


	}

}
 8004918:	bf00      	nop
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40001c00 	.word	0x40001c00
 8004924:	240002bc 	.word	0x240002bc
 8004928:	24000098 	.word	0x24000098
 800492c:	58020c00 	.word	0x58020c00
 8004930:	240003ec 	.word	0x240003ec
 8004934:	240003a0 	.word	0x240003a0
 8004938:	24000120 	.word	0x24000120
 800493c:	58020400 	.word	0x58020400
 8004940:	24000308 	.word	0x24000308
 8004944:	240001a8 	.word	0x240001a8
 8004948:	58021000 	.word	0x58021000
 800494c:	24000484 	.word	0x24000484
 8004950:	24000354 	.word	0x24000354
 8004954:	24000230 	.word	0x24000230
 8004958:	58020800 	.word	0x58020800

0800495c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800495c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004994 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004960:	f7ff fe3e 	bl	80045e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004964:	480c      	ldr	r0, [pc, #48]	; (8004998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004966:	490d      	ldr	r1, [pc, #52]	; (800499c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004968:	4a0d      	ldr	r2, [pc, #52]	; (80049a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800496a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800496c:	e002      	b.n	8004974 <LoopCopyDataInit>

0800496e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800496e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004972:	3304      	adds	r3, #4

08004974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004978:	d3f9      	bcc.n	800496e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800497c:	4c0a      	ldr	r4, [pc, #40]	; (80049a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800497e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004980:	e001      	b.n	8004986 <LoopFillZerobss>

08004982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004984:	3204      	adds	r2, #4

08004986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004988:	d3fb      	bcc.n	8004982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800498a:	f009 f8a5 	bl	800dad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800498e:	f7fc f81c 	bl	80009ca <main>
  bx  lr
 8004992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004994:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004998:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800499c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80049a0:	0800e18c 	.word	0x0800e18c
  ldr r2, =_sbss
 80049a4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80049a8:	240010e0 	.word	0x240010e0

080049ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049ac:	e7fe      	b.n	80049ac <ADC3_IRQHandler>
	...

080049b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b6:	2003      	movs	r0, #3
 80049b8:	f000 f95c 	bl	8004c74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049bc:	f003 ff34 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_Init+0x68>)
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	4913      	ldr	r1, [pc, #76]	; (8004a1c <HAL_Init+0x6c>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
 80049d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <HAL_Init+0x68>)
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	4a0e      	ldr	r2, [pc, #56]	; (8004a1c <HAL_Init+0x6c>)
 80049e4:	5cd3      	ldrb	r3, [r2, r3]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <HAL_Init+0x70>)
 80049f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049f4:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <HAL_Init+0x74>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049fa:	200f      	movs	r0, #15
 80049fc:	f000 f814 	bl	8004a28 <HAL_InitTick>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e002      	b.n	8004a10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a0a:	f7ff fa4f 	bl	8003eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	0800e12c 	.word	0x0800e12c
 8004a20:	24000004 	.word	0x24000004
 8004a24:	24000000 	.word	0x24000000

08004a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a30:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <HAL_InitTick+0x60>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e021      	b.n	8004a80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004a3c:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <HAL_InitTick+0x64>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <HAL_InitTick+0x60>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4619      	mov	r1, r3
 8004a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f941 	bl	8004cda <HAL_SYSTICK_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e00e      	b.n	8004a80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d80a      	bhi.n	8004a7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	f000 f90b 	bl	8004c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a74:	4a06      	ldr	r2, [pc, #24]	; (8004a90 <HAL_InitTick+0x68>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	2400000c 	.word	0x2400000c
 8004a8c:	24000000 	.word	0x24000000
 8004a90:	24000008 	.word	0x24000008

08004a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_IncTick+0x20>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_IncTick+0x24>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <HAL_IncTick+0x24>)
 8004aa6:	6013      	str	r3, [r2, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	2400000c 	.word	0x2400000c
 8004ab8:	240010cc 	.word	0x240010cc

08004abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return uwTick;
 8004ac0:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <HAL_GetTick+0x14>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	240010cc 	.word	0x240010cc

08004ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <__NVIC_SetPriorityGrouping+0x40>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004af0:	4013      	ands	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <__NVIC_SetPriorityGrouping+0x44>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b02:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <__NVIC_SetPriorityGrouping+0x40>)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	60d3      	str	r3, [r2, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000ed00 	.word	0xe000ed00
 8004b18:	05fa0000 	.word	0x05fa0000

08004b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b20:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <__NVIC_GetPriorityGrouping+0x18>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	f003 0307 	and.w	r3, r3, #7
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	db0b      	blt.n	8004b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	4907      	ldr	r1, [pc, #28]	; (8004b70 <__NVIC_EnableIRQ+0x38>)
 8004b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2001      	movs	r0, #1
 8004b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000e100 	.word	0xe000e100

08004b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	6039      	str	r1, [r7, #0]
 8004b7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	db0a      	blt.n	8004b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	490c      	ldr	r1, [pc, #48]	; (8004bc0 <__NVIC_SetPriority+0x4c>)
 8004b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	440b      	add	r3, r1
 8004b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b9c:	e00a      	b.n	8004bb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4908      	ldr	r1, [pc, #32]	; (8004bc4 <__NVIC_SetPriority+0x50>)
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	3b04      	subs	r3, #4
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	761a      	strb	r2, [r3, #24]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000e100 	.word	0xe000e100
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	; 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f1c3 0307 	rsb	r3, r3, #7
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	bf28      	it	cs
 8004be6:	2304      	movcs	r3, #4
 8004be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2b06      	cmp	r3, #6
 8004bf0:	d902      	bls.n	8004bf8 <NVIC_EncodePriority+0x30>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3b03      	subs	r3, #3
 8004bf6:	e000      	b.n	8004bfa <NVIC_EncodePriority+0x32>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43da      	mvns	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c10:	f04f 31ff 	mov.w	r1, #4294967295
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	43d9      	mvns	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c20:	4313      	orrs	r3, r2
         );
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	; 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c40:	d301      	bcc.n	8004c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00f      	b.n	8004c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c46:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <SysTick_Config+0x40>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c4e:	210f      	movs	r1, #15
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	f7ff ff8e 	bl	8004b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <SysTick_Config+0x40>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c5e:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <SysTick_Config+0x40>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010

08004c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff29 	bl	8004ad4 <__NVIC_SetPriorityGrouping>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c98:	f7ff ff40 	bl	8004b1c <__NVIC_GetPriorityGrouping>
 8004c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	6978      	ldr	r0, [r7, #20]
 8004ca4:	f7ff ff90 	bl	8004bc8 <NVIC_EncodePriority>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff5f 	bl	8004b74 <__NVIC_SetPriority>
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff33 	bl	8004b38 <__NVIC_EnableIRQ>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff ffa4 	bl	8004c30 <SysTick_Config>
 8004ce8:	4603      	mov	r3, r0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004cfc:	f7ff fede 	bl	8004abc <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e314      	b.n	8005336 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a66      	ldr	r2, [pc, #408]	; (8004eac <HAL_DMA_Init+0x1b8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d04a      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a65      	ldr	r2, [pc, #404]	; (8004eb0 <HAL_DMA_Init+0x1bc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d045      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a63      	ldr	r2, [pc, #396]	; (8004eb4 <HAL_DMA_Init+0x1c0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d040      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a62      	ldr	r2, [pc, #392]	; (8004eb8 <HAL_DMA_Init+0x1c4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d03b      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a60      	ldr	r2, [pc, #384]	; (8004ebc <HAL_DMA_Init+0x1c8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d036      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a5f      	ldr	r2, [pc, #380]	; (8004ec0 <HAL_DMA_Init+0x1cc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d031      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a5d      	ldr	r2, [pc, #372]	; (8004ec4 <HAL_DMA_Init+0x1d0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d02c      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a5c      	ldr	r2, [pc, #368]	; (8004ec8 <HAL_DMA_Init+0x1d4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d027      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5a      	ldr	r2, [pc, #360]	; (8004ecc <HAL_DMA_Init+0x1d8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d022      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a59      	ldr	r2, [pc, #356]	; (8004ed0 <HAL_DMA_Init+0x1dc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d01d      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a57      	ldr	r2, [pc, #348]	; (8004ed4 <HAL_DMA_Init+0x1e0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d018      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a56      	ldr	r2, [pc, #344]	; (8004ed8 <HAL_DMA_Init+0x1e4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d013      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a54      	ldr	r2, [pc, #336]	; (8004edc <HAL_DMA_Init+0x1e8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00e      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a53      	ldr	r2, [pc, #332]	; (8004ee0 <HAL_DMA_Init+0x1ec>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a51      	ldr	r2, [pc, #324]	; (8004ee4 <HAL_DMA_Init+0x1f0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_DMA_Init+0xb8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a50      	ldr	r2, [pc, #320]	; (8004ee8 <HAL_DMA_Init+0x1f4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_DMA_Init+0xbc>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_Init+0xbe>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 813c 	beq.w	8005030 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a37      	ldr	r2, [pc, #220]	; (8004eac <HAL_DMA_Init+0x1b8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d04a      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a36      	ldr	r2, [pc, #216]	; (8004eb0 <HAL_DMA_Init+0x1bc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d045      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a34      	ldr	r2, [pc, #208]	; (8004eb4 <HAL_DMA_Init+0x1c0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d040      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a33      	ldr	r2, [pc, #204]	; (8004eb8 <HAL_DMA_Init+0x1c4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d03b      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a31      	ldr	r2, [pc, #196]	; (8004ebc <HAL_DMA_Init+0x1c8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d036      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_DMA_Init+0x1cc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d031      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2e      	ldr	r2, [pc, #184]	; (8004ec4 <HAL_DMA_Init+0x1d0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02c      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2d      	ldr	r2, [pc, #180]	; (8004ec8 <HAL_DMA_Init+0x1d4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d027      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a2b      	ldr	r2, [pc, #172]	; (8004ecc <HAL_DMA_Init+0x1d8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d022      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <HAL_DMA_Init+0x1dc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d01d      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <HAL_DMA_Init+0x1e0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d018      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <HAL_DMA_Init+0x1e4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d013      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a25      	ldr	r2, [pc, #148]	; (8004edc <HAL_DMA_Init+0x1e8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a24      	ldr	r2, [pc, #144]	; (8004ee0 <HAL_DMA_Init+0x1ec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d009      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <HAL_DMA_Init+0x1f0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_DMA_Init+0x174>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <HAL_DMA_Init+0x1f4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d108      	bne.n	8004e7a <HAL_DMA_Init+0x186>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e007      	b.n	8004e8a <HAL_DMA_Init+0x196>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0201 	bic.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e8a:	e02f      	b.n	8004eec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e8c:	f7ff fe16 	bl	8004abc <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d928      	bls.n	8004eec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e244      	b.n	8005336 <HAL_DMA_Init+0x642>
 8004eac:	40020010 	.word	0x40020010
 8004eb0:	40020028 	.word	0x40020028
 8004eb4:	40020040 	.word	0x40020040
 8004eb8:	40020058 	.word	0x40020058
 8004ebc:	40020070 	.word	0x40020070
 8004ec0:	40020088 	.word	0x40020088
 8004ec4:	400200a0 	.word	0x400200a0
 8004ec8:	400200b8 	.word	0x400200b8
 8004ecc:	40020410 	.word	0x40020410
 8004ed0:	40020428 	.word	0x40020428
 8004ed4:	40020440 	.word	0x40020440
 8004ed8:	40020458 	.word	0x40020458
 8004edc:	40020470 	.word	0x40020470
 8004ee0:	40020488 	.word	0x40020488
 8004ee4:	400204a0 	.word	0x400204a0
 8004ee8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1c8      	bne.n	8004e8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4b84      	ldr	r3, [pc, #528]	; (8005118 <HAL_DMA_Init+0x424>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d107      	bne.n	8004f50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b28      	cmp	r3, #40	; 0x28
 8004f56:	d903      	bls.n	8004f60 <HAL_DMA_Init+0x26c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f5e:	d91f      	bls.n	8004fa0 <HAL_DMA_Init+0x2ac>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b3e      	cmp	r3, #62	; 0x3e
 8004f66:	d903      	bls.n	8004f70 <HAL_DMA_Init+0x27c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b42      	cmp	r3, #66	; 0x42
 8004f6e:	d917      	bls.n	8004fa0 <HAL_DMA_Init+0x2ac>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b46      	cmp	r3, #70	; 0x46
 8004f76:	d903      	bls.n	8004f80 <HAL_DMA_Init+0x28c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b48      	cmp	r3, #72	; 0x48
 8004f7e:	d90f      	bls.n	8004fa0 <HAL_DMA_Init+0x2ac>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b4e      	cmp	r3, #78	; 0x4e
 8004f86:	d903      	bls.n	8004f90 <HAL_DMA_Init+0x29c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b52      	cmp	r3, #82	; 0x52
 8004f8e:	d907      	bls.n	8004fa0 <HAL_DMA_Init+0x2ac>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b73      	cmp	r3, #115	; 0x73
 8004f96:	d905      	bls.n	8004fa4 <HAL_DMA_Init+0x2b0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b77      	cmp	r3, #119	; 0x77
 8004f9e:	d801      	bhi.n	8004fa4 <HAL_DMA_Init+0x2b0>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_DMA_Init+0x2b2>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 0307 	bic.w	r3, r3, #7
 8004fc8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d117      	bne.n	800500c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f002 fb30 	bl	8007654 <DMA_CheckFifoParam>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e194      	b.n	8005336 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f002 fa6b 	bl	80074f0 <DMA_CalcBaseAndBitshift>
 800501a:	4603      	mov	r3, r0
 800501c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	223f      	movs	r2, #63	; 0x3f
 8005028:	409a      	lsls	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	609a      	str	r2, [r3, #8]
 800502e:	e0ca      	b.n	80051c6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a39      	ldr	r2, [pc, #228]	; (800511c <HAL_DMA_Init+0x428>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d022      	beq.n	8005080 <HAL_DMA_Init+0x38c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a38      	ldr	r2, [pc, #224]	; (8005120 <HAL_DMA_Init+0x42c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d01d      	beq.n	8005080 <HAL_DMA_Init+0x38c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a36      	ldr	r2, [pc, #216]	; (8005124 <HAL_DMA_Init+0x430>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_DMA_Init+0x38c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a35      	ldr	r2, [pc, #212]	; (8005128 <HAL_DMA_Init+0x434>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_DMA_Init+0x38c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a33      	ldr	r2, [pc, #204]	; (800512c <HAL_DMA_Init+0x438>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_DMA_Init+0x38c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a32      	ldr	r2, [pc, #200]	; (8005130 <HAL_DMA_Init+0x43c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_DMA_Init+0x38c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a30      	ldr	r2, [pc, #192]	; (8005134 <HAL_DMA_Init+0x440>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_DMA_Init+0x38c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a2f      	ldr	r2, [pc, #188]	; (8005138 <HAL_DMA_Init+0x444>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <HAL_DMA_Init+0x390>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_DMA_Init+0x392>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 8094 	beq.w	80051b4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a22      	ldr	r2, [pc, #136]	; (800511c <HAL_DMA_Init+0x428>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d021      	beq.n	80050da <HAL_DMA_Init+0x3e6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a21      	ldr	r2, [pc, #132]	; (8005120 <HAL_DMA_Init+0x42c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d01c      	beq.n	80050da <HAL_DMA_Init+0x3e6>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <HAL_DMA_Init+0x430>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d017      	beq.n	80050da <HAL_DMA_Init+0x3e6>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <HAL_DMA_Init+0x434>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d012      	beq.n	80050da <HAL_DMA_Init+0x3e6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_DMA_Init+0x438>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00d      	beq.n	80050da <HAL_DMA_Init+0x3e6>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_DMA_Init+0x43c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d008      	beq.n	80050da <HAL_DMA_Init+0x3e6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_DMA_Init+0x440>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <HAL_DMA_Init+0x3e6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	; (8005138 <HAL_DMA_Init+0x444>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_DMA_Init+0x448>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d01d      	beq.n	8005140 <HAL_DMA_Init+0x44c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d102      	bne.n	8005112 <HAL_DMA_Init+0x41e>
 800510c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005110:	e017      	b.n	8005142 <HAL_DMA_Init+0x44e>
 8005112:	2300      	movs	r3, #0
 8005114:	e015      	b.n	8005142 <HAL_DMA_Init+0x44e>
 8005116:	bf00      	nop
 8005118:	fe10803f 	.word	0xfe10803f
 800511c:	58025408 	.word	0x58025408
 8005120:	5802541c 	.word	0x5802541c
 8005124:	58025430 	.word	0x58025430
 8005128:	58025444 	.word	0x58025444
 800512c:	58025458 	.word	0x58025458
 8005130:	5802546c 	.word	0x5802546c
 8005134:	58025480 	.word	0x58025480
 8005138:	58025494 	.word	0x58025494
 800513c:	fffe000f 	.word	0xfffe000f
 8005140:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005160:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005170:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b6e      	ldr	r3, [pc, #440]	; (8005340 <HAL_DMA_Init+0x64c>)
 8005188:	4413      	add	r3, r2
 800518a:	4a6e      	ldr	r2, [pc, #440]	; (8005344 <HAL_DMA_Init+0x650>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	009a      	lsls	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f002 f9a9 	bl	80074f0 <DMA_CalcBaseAndBitshift>
 800519e:	4603      	mov	r3, r0
 80051a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2201      	movs	r2, #1
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	e008      	b.n	80051c6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2240      	movs	r2, #64	; 0x40
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2203      	movs	r2, #3
 80051be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0b7      	b.n	8005336 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a5f      	ldr	r2, [pc, #380]	; (8005348 <HAL_DMA_Init+0x654>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d072      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5d      	ldr	r2, [pc, #372]	; (800534c <HAL_DMA_Init+0x658>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d06d      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a5c      	ldr	r2, [pc, #368]	; (8005350 <HAL_DMA_Init+0x65c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d068      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a5a      	ldr	r2, [pc, #360]	; (8005354 <HAL_DMA_Init+0x660>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d063      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a59      	ldr	r2, [pc, #356]	; (8005358 <HAL_DMA_Init+0x664>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d05e      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a57      	ldr	r2, [pc, #348]	; (800535c <HAL_DMA_Init+0x668>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d059      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a56      	ldr	r2, [pc, #344]	; (8005360 <HAL_DMA_Init+0x66c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d054      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a54      	ldr	r2, [pc, #336]	; (8005364 <HAL_DMA_Init+0x670>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d04f      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a53      	ldr	r2, [pc, #332]	; (8005368 <HAL_DMA_Init+0x674>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04a      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a51      	ldr	r2, [pc, #324]	; (800536c <HAL_DMA_Init+0x678>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d045      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a50      	ldr	r2, [pc, #320]	; (8005370 <HAL_DMA_Init+0x67c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d040      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a4e      	ldr	r2, [pc, #312]	; (8005374 <HAL_DMA_Init+0x680>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d03b      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a4d      	ldr	r2, [pc, #308]	; (8005378 <HAL_DMA_Init+0x684>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d036      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a4b      	ldr	r2, [pc, #300]	; (800537c <HAL_DMA_Init+0x688>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d031      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a4a      	ldr	r2, [pc, #296]	; (8005380 <HAL_DMA_Init+0x68c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d02c      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a48      	ldr	r2, [pc, #288]	; (8005384 <HAL_DMA_Init+0x690>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d027      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a47      	ldr	r2, [pc, #284]	; (8005388 <HAL_DMA_Init+0x694>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a45      	ldr	r2, [pc, #276]	; (800538c <HAL_DMA_Init+0x698>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a44      	ldr	r2, [pc, #272]	; (8005390 <HAL_DMA_Init+0x69c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a42      	ldr	r2, [pc, #264]	; (8005394 <HAL_DMA_Init+0x6a0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a41      	ldr	r2, [pc, #260]	; (8005398 <HAL_DMA_Init+0x6a4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a3f      	ldr	r2, [pc, #252]	; (800539c <HAL_DMA_Init+0x6a8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3e      	ldr	r2, [pc, #248]	; (80053a0 <HAL_DMA_Init+0x6ac>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_DMA_Init+0x5c2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a3c      	ldr	r2, [pc, #240]	; (80053a4 <HAL_DMA_Init+0x6b0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d101      	bne.n	80052ba <HAL_DMA_Init+0x5c6>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <HAL_DMA_Init+0x5c8>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d032      	beq.n	8005326 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f002 fa43 	bl	800774c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b80      	cmp	r3, #128	; 0x80
 80052cc:	d102      	bne.n	80052d4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d010      	beq.n	8005314 <HAL_DMA_Init+0x620>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d80c      	bhi.n	8005314 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f002 fac0 	bl	8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	e008      	b.n	8005326 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	a7fdabf8 	.word	0xa7fdabf8
 8005344:	cccccccd 	.word	0xcccccccd
 8005348:	40020010 	.word	0x40020010
 800534c:	40020028 	.word	0x40020028
 8005350:	40020040 	.word	0x40020040
 8005354:	40020058 	.word	0x40020058
 8005358:	40020070 	.word	0x40020070
 800535c:	40020088 	.word	0x40020088
 8005360:	400200a0 	.word	0x400200a0
 8005364:	400200b8 	.word	0x400200b8
 8005368:	40020410 	.word	0x40020410
 800536c:	40020428 	.word	0x40020428
 8005370:	40020440 	.word	0x40020440
 8005374:	40020458 	.word	0x40020458
 8005378:	40020470 	.word	0x40020470
 800537c:	40020488 	.word	0x40020488
 8005380:	400204a0 	.word	0x400204a0
 8005384:	400204b8 	.word	0x400204b8
 8005388:	58025408 	.word	0x58025408
 800538c:	5802541c 	.word	0x5802541c
 8005390:	58025430 	.word	0x58025430
 8005394:	58025444 	.word	0x58025444
 8005398:	58025458 	.word	0x58025458
 800539c:	5802546c 	.word	0x5802546c
 80053a0:	58025480 	.word	0x58025480
 80053a4:	58025494 	.word	0x58025494

080053a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e226      	b.n	8005812 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_DMA_Start_IT+0x2a>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e21f      	b.n	8005812 <HAL_DMA_Start_IT+0x46a>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	f040 820a 	bne.w	80057fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a68      	ldr	r2, [pc, #416]	; (800559c <HAL_DMA_Start_IT+0x1f4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d04a      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a66      	ldr	r2, [pc, #408]	; (80055a0 <HAL_DMA_Start_IT+0x1f8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d045      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a65      	ldr	r2, [pc, #404]	; (80055a4 <HAL_DMA_Start_IT+0x1fc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d040      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a63      	ldr	r2, [pc, #396]	; (80055a8 <HAL_DMA_Start_IT+0x200>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d03b      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a62      	ldr	r2, [pc, #392]	; (80055ac <HAL_DMA_Start_IT+0x204>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d036      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a60      	ldr	r2, [pc, #384]	; (80055b0 <HAL_DMA_Start_IT+0x208>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d031      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a5f      	ldr	r2, [pc, #380]	; (80055b4 <HAL_DMA_Start_IT+0x20c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d02c      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5d      	ldr	r2, [pc, #372]	; (80055b8 <HAL_DMA_Start_IT+0x210>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d027      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a5c      	ldr	r2, [pc, #368]	; (80055bc <HAL_DMA_Start_IT+0x214>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d022      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a5a      	ldr	r2, [pc, #360]	; (80055c0 <HAL_DMA_Start_IT+0x218>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01d      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a59      	ldr	r2, [pc, #356]	; (80055c4 <HAL_DMA_Start_IT+0x21c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a57      	ldr	r2, [pc, #348]	; (80055c8 <HAL_DMA_Start_IT+0x220>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a56      	ldr	r2, [pc, #344]	; (80055cc <HAL_DMA_Start_IT+0x224>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a54      	ldr	r2, [pc, #336]	; (80055d0 <HAL_DMA_Start_IT+0x228>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a53      	ldr	r2, [pc, #332]	; (80055d4 <HAL_DMA_Start_IT+0x22c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_DMA_Start_IT+0xee>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a51      	ldr	r2, [pc, #324]	; (80055d8 <HAL_DMA_Start_IT+0x230>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <HAL_DMA_Start_IT+0x100>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e007      	b.n	80054b8 <HAL_DMA_Start_IT+0x110>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 fe6a 	bl	8007198 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a34      	ldr	r2, [pc, #208]	; (800559c <HAL_DMA_Start_IT+0x1f4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d04a      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a33      	ldr	r2, [pc, #204]	; (80055a0 <HAL_DMA_Start_IT+0x1f8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d045      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a31      	ldr	r2, [pc, #196]	; (80055a4 <HAL_DMA_Start_IT+0x1fc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d040      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a30      	ldr	r2, [pc, #192]	; (80055a8 <HAL_DMA_Start_IT+0x200>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d03b      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2e      	ldr	r2, [pc, #184]	; (80055ac <HAL_DMA_Start_IT+0x204>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d036      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2d      	ldr	r2, [pc, #180]	; (80055b0 <HAL_DMA_Start_IT+0x208>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d031      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_DMA_Start_IT+0x20c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d02c      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2a      	ldr	r2, [pc, #168]	; (80055b8 <HAL_DMA_Start_IT+0x210>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d027      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a28      	ldr	r2, [pc, #160]	; (80055bc <HAL_DMA_Start_IT+0x214>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d022      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <HAL_DMA_Start_IT+0x218>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d01d      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a25      	ldr	r2, [pc, #148]	; (80055c4 <HAL_DMA_Start_IT+0x21c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a24      	ldr	r2, [pc, #144]	; (80055c8 <HAL_DMA_Start_IT+0x220>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_DMA_Start_IT+0x224>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a21      	ldr	r2, [pc, #132]	; (80055d0 <HAL_DMA_Start_IT+0x228>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <HAL_DMA_Start_IT+0x22c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_DMA_Start_IT+0x1bc>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_DMA_Start_IT+0x230>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d101      	bne.n	8005568 <HAL_DMA_Start_IT+0x1c0>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <HAL_DMA_Start_IT+0x1c2>
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d036      	beq.n	80055dc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f023 021e 	bic.w	r2, r3, #30
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0216 	orr.w	r2, r2, #22
 8005580:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d03e      	beq.n	8005608 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0208 	orr.w	r2, r2, #8
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e035      	b.n	8005608 <HAL_DMA_Start_IT+0x260>
 800559c:	40020010 	.word	0x40020010
 80055a0:	40020028 	.word	0x40020028
 80055a4:	40020040 	.word	0x40020040
 80055a8:	40020058 	.word	0x40020058
 80055ac:	40020070 	.word	0x40020070
 80055b0:	40020088 	.word	0x40020088
 80055b4:	400200a0 	.word	0x400200a0
 80055b8:	400200b8 	.word	0x400200b8
 80055bc:	40020410 	.word	0x40020410
 80055c0:	40020428 	.word	0x40020428
 80055c4:	40020440 	.word	0x40020440
 80055c8:	40020458 	.word	0x40020458
 80055cc:	40020470 	.word	0x40020470
 80055d0:	40020488 	.word	0x40020488
 80055d4:	400204a0 	.word	0x400204a0
 80055d8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 020e 	bic.w	r2, r3, #14
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 020a 	orr.w	r2, r2, #10
 80055ee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0204 	orr.w	r2, r2, #4
 8005606:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a83      	ldr	r2, [pc, #524]	; (800581c <HAL_DMA_Start_IT+0x474>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d072      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a82      	ldr	r2, [pc, #520]	; (8005820 <HAL_DMA_Start_IT+0x478>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d06d      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a80      	ldr	r2, [pc, #512]	; (8005824 <HAL_DMA_Start_IT+0x47c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d068      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a7f      	ldr	r2, [pc, #508]	; (8005828 <HAL_DMA_Start_IT+0x480>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d063      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a7d      	ldr	r2, [pc, #500]	; (800582c <HAL_DMA_Start_IT+0x484>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d05e      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a7c      	ldr	r2, [pc, #496]	; (8005830 <HAL_DMA_Start_IT+0x488>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d059      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a7a      	ldr	r2, [pc, #488]	; (8005834 <HAL_DMA_Start_IT+0x48c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d054      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a79      	ldr	r2, [pc, #484]	; (8005838 <HAL_DMA_Start_IT+0x490>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d04f      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a77      	ldr	r2, [pc, #476]	; (800583c <HAL_DMA_Start_IT+0x494>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d04a      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a76      	ldr	r2, [pc, #472]	; (8005840 <HAL_DMA_Start_IT+0x498>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d045      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a74      	ldr	r2, [pc, #464]	; (8005844 <HAL_DMA_Start_IT+0x49c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d040      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a73      	ldr	r2, [pc, #460]	; (8005848 <HAL_DMA_Start_IT+0x4a0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d03b      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a71      	ldr	r2, [pc, #452]	; (800584c <HAL_DMA_Start_IT+0x4a4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d036      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a70      	ldr	r2, [pc, #448]	; (8005850 <HAL_DMA_Start_IT+0x4a8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d031      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6e      	ldr	r2, [pc, #440]	; (8005854 <HAL_DMA_Start_IT+0x4ac>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02c      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6d      	ldr	r2, [pc, #436]	; (8005858 <HAL_DMA_Start_IT+0x4b0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d027      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a6b      	ldr	r2, [pc, #428]	; (800585c <HAL_DMA_Start_IT+0x4b4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d022      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a6a      	ldr	r2, [pc, #424]	; (8005860 <HAL_DMA_Start_IT+0x4b8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d01d      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a68      	ldr	r2, [pc, #416]	; (8005864 <HAL_DMA_Start_IT+0x4bc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d018      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a67      	ldr	r2, [pc, #412]	; (8005868 <HAL_DMA_Start_IT+0x4c0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a65      	ldr	r2, [pc, #404]	; (800586c <HAL_DMA_Start_IT+0x4c4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00e      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a64      	ldr	r2, [pc, #400]	; (8005870 <HAL_DMA_Start_IT+0x4c8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d009      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a62      	ldr	r2, [pc, #392]	; (8005874 <HAL_DMA_Start_IT+0x4cc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_Start_IT+0x350>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a61      	ldr	r2, [pc, #388]	; (8005878 <HAL_DMA_Start_IT+0x4d0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d101      	bne.n	80056fc <HAL_DMA_Start_IT+0x354>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_DMA_Start_IT+0x356>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01a      	beq.n	8005738 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800571e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005736:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a37      	ldr	r2, [pc, #220]	; (800581c <HAL_DMA_Start_IT+0x474>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d04a      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a36      	ldr	r2, [pc, #216]	; (8005820 <HAL_DMA_Start_IT+0x478>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d045      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a34      	ldr	r2, [pc, #208]	; (8005824 <HAL_DMA_Start_IT+0x47c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d040      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a33      	ldr	r2, [pc, #204]	; (8005828 <HAL_DMA_Start_IT+0x480>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d03b      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a31      	ldr	r2, [pc, #196]	; (800582c <HAL_DMA_Start_IT+0x484>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d036      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a30      	ldr	r2, [pc, #192]	; (8005830 <HAL_DMA_Start_IT+0x488>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d031      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2e      	ldr	r2, [pc, #184]	; (8005834 <HAL_DMA_Start_IT+0x48c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02c      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2d      	ldr	r2, [pc, #180]	; (8005838 <HAL_DMA_Start_IT+0x490>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d027      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2b      	ldr	r2, [pc, #172]	; (800583c <HAL_DMA_Start_IT+0x494>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <HAL_DMA_Start_IT+0x498>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d01d      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <HAL_DMA_Start_IT+0x49c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <HAL_DMA_Start_IT+0x4a0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a25      	ldr	r2, [pc, #148]	; (800584c <HAL_DMA_Start_IT+0x4a4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a24      	ldr	r2, [pc, #144]	; (8005850 <HAL_DMA_Start_IT+0x4a8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <HAL_DMA_Start_IT+0x4ac>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_DMA_Start_IT+0x430>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <HAL_DMA_Start_IT+0x4b0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d108      	bne.n	80057ea <HAL_DMA_Start_IT+0x442>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	e012      	b.n	8005810 <HAL_DMA_Start_IT+0x468>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e009      	b.n	8005810 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005802:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005810:	7dfb      	ldrb	r3, [r7, #23]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40020010 	.word	0x40020010
 8005820:	40020028 	.word	0x40020028
 8005824:	40020040 	.word	0x40020040
 8005828:	40020058 	.word	0x40020058
 800582c:	40020070 	.word	0x40020070
 8005830:	40020088 	.word	0x40020088
 8005834:	400200a0 	.word	0x400200a0
 8005838:	400200b8 	.word	0x400200b8
 800583c:	40020410 	.word	0x40020410
 8005840:	40020428 	.word	0x40020428
 8005844:	40020440 	.word	0x40020440
 8005848:	40020458 	.word	0x40020458
 800584c:	40020470 	.word	0x40020470
 8005850:	40020488 	.word	0x40020488
 8005854:	400204a0 	.word	0x400204a0
 8005858:	400204b8 	.word	0x400204b8
 800585c:	58025408 	.word	0x58025408
 8005860:	5802541c 	.word	0x5802541c
 8005864:	58025430 	.word	0x58025430
 8005868:	58025444 	.word	0x58025444
 800586c:	58025458 	.word	0x58025458
 8005870:	5802546c 	.word	0x5802546c
 8005874:	58025480 	.word	0x58025480
 8005878:	58025494 	.word	0x58025494

0800587c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005884:	f7ff f91a 	bl	8004abc <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e2dc      	b.n	8005e4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d008      	beq.n	80058b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2280      	movs	r2, #128	; 0x80
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e2cd      	b.n	8005e4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a76      	ldr	r2, [pc, #472]	; (8005a90 <HAL_DMA_Abort+0x214>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d04a      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a74      	ldr	r2, [pc, #464]	; (8005a94 <HAL_DMA_Abort+0x218>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d045      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a73      	ldr	r2, [pc, #460]	; (8005a98 <HAL_DMA_Abort+0x21c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d040      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a71      	ldr	r2, [pc, #452]	; (8005a9c <HAL_DMA_Abort+0x220>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d03b      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a70      	ldr	r2, [pc, #448]	; (8005aa0 <HAL_DMA_Abort+0x224>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d036      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a6e      	ldr	r2, [pc, #440]	; (8005aa4 <HAL_DMA_Abort+0x228>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d031      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a6d      	ldr	r2, [pc, #436]	; (8005aa8 <HAL_DMA_Abort+0x22c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d02c      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a6b      	ldr	r2, [pc, #428]	; (8005aac <HAL_DMA_Abort+0x230>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d027      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a6a      	ldr	r2, [pc, #424]	; (8005ab0 <HAL_DMA_Abort+0x234>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d022      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a68      	ldr	r2, [pc, #416]	; (8005ab4 <HAL_DMA_Abort+0x238>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01d      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a67      	ldr	r2, [pc, #412]	; (8005ab8 <HAL_DMA_Abort+0x23c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d018      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a65      	ldr	r2, [pc, #404]	; (8005abc <HAL_DMA_Abort+0x240>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a64      	ldr	r2, [pc, #400]	; (8005ac0 <HAL_DMA_Abort+0x244>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a62      	ldr	r2, [pc, #392]	; (8005ac4 <HAL_DMA_Abort+0x248>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a61      	ldr	r2, [pc, #388]	; (8005ac8 <HAL_DMA_Abort+0x24c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_DMA_Abort+0xd6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a5f      	ldr	r2, [pc, #380]	; (8005acc <HAL_DMA_Abort+0x250>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_DMA_Abort+0xda>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_DMA_Abort+0xdc>
 8005956:	2300      	movs	r3, #0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d013      	beq.n	8005984 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 021e 	bic.w	r2, r2, #30
 800596a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695a      	ldr	r2, [r3, #20]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800597a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e00a      	b.n	800599a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 020e 	bic.w	r2, r2, #14
 8005992:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a3c      	ldr	r2, [pc, #240]	; (8005a90 <HAL_DMA_Abort+0x214>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d072      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a3a      	ldr	r2, [pc, #232]	; (8005a94 <HAL_DMA_Abort+0x218>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d06d      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a39      	ldr	r2, [pc, #228]	; (8005a98 <HAL_DMA_Abort+0x21c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d068      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a37      	ldr	r2, [pc, #220]	; (8005a9c <HAL_DMA_Abort+0x220>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d063      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a36      	ldr	r2, [pc, #216]	; (8005aa0 <HAL_DMA_Abort+0x224>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d05e      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a34      	ldr	r2, [pc, #208]	; (8005aa4 <HAL_DMA_Abort+0x228>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d059      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <HAL_DMA_Abort+0x22c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d054      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a31      	ldr	r2, [pc, #196]	; (8005aac <HAL_DMA_Abort+0x230>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d04f      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a30      	ldr	r2, [pc, #192]	; (8005ab0 <HAL_DMA_Abort+0x234>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04a      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2e      	ldr	r2, [pc, #184]	; (8005ab4 <HAL_DMA_Abort+0x238>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d045      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2d      	ldr	r2, [pc, #180]	; (8005ab8 <HAL_DMA_Abort+0x23c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d040      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2b      	ldr	r2, [pc, #172]	; (8005abc <HAL_DMA_Abort+0x240>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d03b      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <HAL_DMA_Abort+0x244>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d036      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a28      	ldr	r2, [pc, #160]	; (8005ac4 <HAL_DMA_Abort+0x248>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d031      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a27      	ldr	r2, [pc, #156]	; (8005ac8 <HAL_DMA_Abort+0x24c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d02c      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <HAL_DMA_Abort+0x250>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d027      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <HAL_DMA_Abort+0x254>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <HAL_DMA_Abort+0x258>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <HAL_DMA_Abort+0x25c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1f      	ldr	r2, [pc, #124]	; (8005adc <HAL_DMA_Abort+0x260>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_DMA_Abort+0x264>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <HAL_DMA_Abort+0x268>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <HAL_DMA_Abort+0x26c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_Abort+0x20e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a19      	ldr	r2, [pc, #100]	; (8005aec <HAL_DMA_Abort+0x270>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d132      	bne.n	8005af0 <HAL_DMA_Abort+0x274>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e031      	b.n	8005af2 <HAL_DMA_Abort+0x276>
 8005a8e:	bf00      	nop
 8005a90:	40020010 	.word	0x40020010
 8005a94:	40020028 	.word	0x40020028
 8005a98:	40020040 	.word	0x40020040
 8005a9c:	40020058 	.word	0x40020058
 8005aa0:	40020070 	.word	0x40020070
 8005aa4:	40020088 	.word	0x40020088
 8005aa8:	400200a0 	.word	0x400200a0
 8005aac:	400200b8 	.word	0x400200b8
 8005ab0:	40020410 	.word	0x40020410
 8005ab4:	40020428 	.word	0x40020428
 8005ab8:	40020440 	.word	0x40020440
 8005abc:	40020458 	.word	0x40020458
 8005ac0:	40020470 	.word	0x40020470
 8005ac4:	40020488 	.word	0x40020488
 8005ac8:	400204a0 	.word	0x400204a0
 8005acc:	400204b8 	.word	0x400204b8
 8005ad0:	58025408 	.word	0x58025408
 8005ad4:	5802541c 	.word	0x5802541c
 8005ad8:	58025430 	.word	0x58025430
 8005adc:	58025444 	.word	0x58025444
 8005ae0:	58025458 	.word	0x58025458
 8005ae4:	5802546c 	.word	0x5802546c
 8005ae8:	58025480 	.word	0x58025480
 8005aec:	58025494 	.word	0x58025494
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6d      	ldr	r2, [pc, #436]	; (8005cc0 <HAL_DMA_Abort+0x444>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d04a      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a6b      	ldr	r2, [pc, #428]	; (8005cc4 <HAL_DMA_Abort+0x448>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d045      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a6a      	ldr	r2, [pc, #424]	; (8005cc8 <HAL_DMA_Abort+0x44c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d040      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a68      	ldr	r2, [pc, #416]	; (8005ccc <HAL_DMA_Abort+0x450>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d03b      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a67      	ldr	r2, [pc, #412]	; (8005cd0 <HAL_DMA_Abort+0x454>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d036      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a65      	ldr	r2, [pc, #404]	; (8005cd4 <HAL_DMA_Abort+0x458>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d031      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a64      	ldr	r2, [pc, #400]	; (8005cd8 <HAL_DMA_Abort+0x45c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d02c      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a62      	ldr	r2, [pc, #392]	; (8005cdc <HAL_DMA_Abort+0x460>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d027      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a61      	ldr	r2, [pc, #388]	; (8005ce0 <HAL_DMA_Abort+0x464>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d022      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a5f      	ldr	r2, [pc, #380]	; (8005ce4 <HAL_DMA_Abort+0x468>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01d      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5e      	ldr	r2, [pc, #376]	; (8005ce8 <HAL_DMA_Abort+0x46c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5c      	ldr	r2, [pc, #368]	; (8005cec <HAL_DMA_Abort+0x470>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5b      	ldr	r2, [pc, #364]	; (8005cf0 <HAL_DMA_Abort+0x474>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00e      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a59      	ldr	r2, [pc, #356]	; (8005cf4 <HAL_DMA_Abort+0x478>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a58      	ldr	r2, [pc, #352]	; (8005cf8 <HAL_DMA_Abort+0x47c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_DMA_Abort+0x32a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a56      	ldr	r2, [pc, #344]	; (8005cfc <HAL_DMA_Abort+0x480>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <HAL_DMA_Abort+0x33c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	e007      	b.n	8005bc8 <HAL_DMA_Abort+0x34c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bc8:	e013      	b.n	8005bf2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bca:	f7fe ff77 	bl	8004abc <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d90c      	bls.n	8005bf2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2203      	movs	r2, #3
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e12d      	b.n	8005e4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <HAL_DMA_Abort+0x444>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2d      	ldr	r2, [pc, #180]	; (8005cc4 <HAL_DMA_Abort+0x448>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <HAL_DMA_Abort+0x44c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2a      	ldr	r2, [pc, #168]	; (8005ccc <HAL_DMA_Abort+0x450>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a29      	ldr	r2, [pc, #164]	; (8005cd0 <HAL_DMA_Abort+0x454>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a27      	ldr	r2, [pc, #156]	; (8005cd4 <HAL_DMA_Abort+0x458>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a26      	ldr	r2, [pc, #152]	; (8005cd8 <HAL_DMA_Abort+0x45c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a24      	ldr	r2, [pc, #144]	; (8005cdc <HAL_DMA_Abort+0x460>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <HAL_DMA_Abort+0x464>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a21      	ldr	r2, [pc, #132]	; (8005ce4 <HAL_DMA_Abort+0x468>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <HAL_DMA_Abort+0x46c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1e      	ldr	r2, [pc, #120]	; (8005cec <HAL_DMA_Abort+0x470>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_DMA_Abort+0x474>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_DMA_Abort+0x478>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_DMA_Abort+0x47c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMA_Abort+0x422>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_DMA_Abort+0x480>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d101      	bne.n	8005ca2 <HAL_DMA_Abort+0x426>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_DMA_Abort+0x428>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d02b      	beq.n	8005d00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	223f      	movs	r2, #63	; 0x3f
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	609a      	str	r2, [r3, #8]
 8005cbe:	e02a      	b.n	8005d16 <HAL_DMA_Abort+0x49a>
 8005cc0:	40020010 	.word	0x40020010
 8005cc4:	40020028 	.word	0x40020028
 8005cc8:	40020040 	.word	0x40020040
 8005ccc:	40020058 	.word	0x40020058
 8005cd0:	40020070 	.word	0x40020070
 8005cd4:	40020088 	.word	0x40020088
 8005cd8:	400200a0 	.word	0x400200a0
 8005cdc:	400200b8 	.word	0x400200b8
 8005ce0:	40020410 	.word	0x40020410
 8005ce4:	40020428 	.word	0x40020428
 8005ce8:	40020440 	.word	0x40020440
 8005cec:	40020458 	.word	0x40020458
 8005cf0:	40020470 	.word	0x40020470
 8005cf4:	40020488 	.word	0x40020488
 8005cf8:	400204a0 	.word	0x400204a0
 8005cfc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2201      	movs	r2, #1
 8005d10:	409a      	lsls	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4f      	ldr	r2, [pc, #316]	; (8005e58 <HAL_DMA_Abort+0x5dc>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d072      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a4d      	ldr	r2, [pc, #308]	; (8005e5c <HAL_DMA_Abort+0x5e0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d06d      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a4c      	ldr	r2, [pc, #304]	; (8005e60 <HAL_DMA_Abort+0x5e4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d068      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a4a      	ldr	r2, [pc, #296]	; (8005e64 <HAL_DMA_Abort+0x5e8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d063      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a49      	ldr	r2, [pc, #292]	; (8005e68 <HAL_DMA_Abort+0x5ec>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d05e      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a47      	ldr	r2, [pc, #284]	; (8005e6c <HAL_DMA_Abort+0x5f0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d059      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a46      	ldr	r2, [pc, #280]	; (8005e70 <HAL_DMA_Abort+0x5f4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d054      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a44      	ldr	r2, [pc, #272]	; (8005e74 <HAL_DMA_Abort+0x5f8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04f      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a43      	ldr	r2, [pc, #268]	; (8005e78 <HAL_DMA_Abort+0x5fc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d04a      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a41      	ldr	r2, [pc, #260]	; (8005e7c <HAL_DMA_Abort+0x600>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d045      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a40      	ldr	r2, [pc, #256]	; (8005e80 <HAL_DMA_Abort+0x604>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d040      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a3e      	ldr	r2, [pc, #248]	; (8005e84 <HAL_DMA_Abort+0x608>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d03b      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3d      	ldr	r2, [pc, #244]	; (8005e88 <HAL_DMA_Abort+0x60c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d036      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3b      	ldr	r2, [pc, #236]	; (8005e8c <HAL_DMA_Abort+0x610>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d031      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3a      	ldr	r2, [pc, #232]	; (8005e90 <HAL_DMA_Abort+0x614>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d02c      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a38      	ldr	r2, [pc, #224]	; (8005e94 <HAL_DMA_Abort+0x618>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d027      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <HAL_DMA_Abort+0x61c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d022      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a35      	ldr	r2, [pc, #212]	; (8005e9c <HAL_DMA_Abort+0x620>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01d      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <HAL_DMA_Abort+0x624>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d018      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a32      	ldr	r2, [pc, #200]	; (8005ea4 <HAL_DMA_Abort+0x628>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a31      	ldr	r2, [pc, #196]	; (8005ea8 <HAL_DMA_Abort+0x62c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00e      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <HAL_DMA_Abort+0x630>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d009      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2e      	ldr	r2, [pc, #184]	; (8005eb0 <HAL_DMA_Abort+0x634>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <HAL_DMA_Abort+0x58a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2c      	ldr	r2, [pc, #176]	; (8005eb4 <HAL_DMA_Abort+0x638>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d101      	bne.n	8005e0a <HAL_DMA_Abort+0x58e>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_DMA_Abort+0x590>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d015      	beq.n	8005e3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00c      	beq.n	8005e3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40020010 	.word	0x40020010
 8005e5c:	40020028 	.word	0x40020028
 8005e60:	40020040 	.word	0x40020040
 8005e64:	40020058 	.word	0x40020058
 8005e68:	40020070 	.word	0x40020070
 8005e6c:	40020088 	.word	0x40020088
 8005e70:	400200a0 	.word	0x400200a0
 8005e74:	400200b8 	.word	0x400200b8
 8005e78:	40020410 	.word	0x40020410
 8005e7c:	40020428 	.word	0x40020428
 8005e80:	40020440 	.word	0x40020440
 8005e84:	40020458 	.word	0x40020458
 8005e88:	40020470 	.word	0x40020470
 8005e8c:	40020488 	.word	0x40020488
 8005e90:	400204a0 	.word	0x400204a0
 8005e94:	400204b8 	.word	0x400204b8
 8005e98:	58025408 	.word	0x58025408
 8005e9c:	5802541c 	.word	0x5802541c
 8005ea0:	58025430 	.word	0x58025430
 8005ea4:	58025444 	.word	0x58025444
 8005ea8:	58025458 	.word	0x58025458
 8005eac:	5802546c 	.word	0x5802546c
 8005eb0:	58025480 	.word	0x58025480
 8005eb4:	58025494 	.word	0x58025494

08005eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e237      	b.n	800633a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2280      	movs	r2, #128	; 0x80
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e22c      	b.n	800633a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5c      	ldr	r2, [pc, #368]	; (8006058 <HAL_DMA_Abort_IT+0x1a0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d04a      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a5b      	ldr	r2, [pc, #364]	; (800605c <HAL_DMA_Abort_IT+0x1a4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d045      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a59      	ldr	r2, [pc, #356]	; (8006060 <HAL_DMA_Abort_IT+0x1a8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d040      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a58      	ldr	r2, [pc, #352]	; (8006064 <HAL_DMA_Abort_IT+0x1ac>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d03b      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a56      	ldr	r2, [pc, #344]	; (8006068 <HAL_DMA_Abort_IT+0x1b0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d036      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a55      	ldr	r2, [pc, #340]	; (800606c <HAL_DMA_Abort_IT+0x1b4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d031      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a53      	ldr	r2, [pc, #332]	; (8006070 <HAL_DMA_Abort_IT+0x1b8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02c      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a52      	ldr	r2, [pc, #328]	; (8006074 <HAL_DMA_Abort_IT+0x1bc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d027      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a50      	ldr	r2, [pc, #320]	; (8006078 <HAL_DMA_Abort_IT+0x1c0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a4f      	ldr	r2, [pc, #316]	; (800607c <HAL_DMA_Abort_IT+0x1c4>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d01d      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a4d      	ldr	r2, [pc, #308]	; (8006080 <HAL_DMA_Abort_IT+0x1c8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4c      	ldr	r2, [pc, #304]	; (8006084 <HAL_DMA_Abort_IT+0x1cc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a4a      	ldr	r2, [pc, #296]	; (8006088 <HAL_DMA_Abort_IT+0x1d0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a49      	ldr	r2, [pc, #292]	; (800608c <HAL_DMA_Abort_IT+0x1d4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a47      	ldr	r2, [pc, #284]	; (8006090 <HAL_DMA_Abort_IT+0x1d8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_Abort_IT+0xc8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	; (8006094 <HAL_DMA_Abort_IT+0x1dc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d101      	bne.n	8005f84 <HAL_DMA_Abort_IT+0xcc>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_DMA_Abort_IT+0xce>
 8005f84:	2300      	movs	r3, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 8086 	beq.w	8006098 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2f      	ldr	r2, [pc, #188]	; (8006058 <HAL_DMA_Abort_IT+0x1a0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d04a      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2e      	ldr	r2, [pc, #184]	; (800605c <HAL_DMA_Abort_IT+0x1a4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d045      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <HAL_DMA_Abort_IT+0x1a8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d040      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a2b      	ldr	r2, [pc, #172]	; (8006064 <HAL_DMA_Abort_IT+0x1ac>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d03b      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a29      	ldr	r2, [pc, #164]	; (8006068 <HAL_DMA_Abort_IT+0x1b0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d036      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a28      	ldr	r2, [pc, #160]	; (800606c <HAL_DMA_Abort_IT+0x1b4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d031      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a26      	ldr	r2, [pc, #152]	; (8006070 <HAL_DMA_Abort_IT+0x1b8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d02c      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a25      	ldr	r2, [pc, #148]	; (8006074 <HAL_DMA_Abort_IT+0x1bc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d027      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a23      	ldr	r2, [pc, #140]	; (8006078 <HAL_DMA_Abort_IT+0x1c0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d022      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a22      	ldr	r2, [pc, #136]	; (800607c <HAL_DMA_Abort_IT+0x1c4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01d      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <HAL_DMA_Abort_IT+0x1c8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d018      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <HAL_DMA_Abort_IT+0x1cc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <HAL_DMA_Abort_IT+0x1d0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d00e      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <HAL_DMA_Abort_IT+0x1d4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <HAL_DMA_Abort_IT+0x1d8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d004      	beq.n	8006034 <HAL_DMA_Abort_IT+0x17c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a19      	ldr	r2, [pc, #100]	; (8006094 <HAL_DMA_Abort_IT+0x1dc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <HAL_DMA_Abort_IT+0x18e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e178      	b.n	8006338 <HAL_DMA_Abort_IT+0x480>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e16f      	b.n	8006338 <HAL_DMA_Abort_IT+0x480>
 8006058:	40020010 	.word	0x40020010
 800605c:	40020028 	.word	0x40020028
 8006060:	40020040 	.word	0x40020040
 8006064:	40020058 	.word	0x40020058
 8006068:	40020070 	.word	0x40020070
 800606c:	40020088 	.word	0x40020088
 8006070:	400200a0 	.word	0x400200a0
 8006074:	400200b8 	.word	0x400200b8
 8006078:	40020410 	.word	0x40020410
 800607c:	40020428 	.word	0x40020428
 8006080:	40020440 	.word	0x40020440
 8006084:	40020458 	.word	0x40020458
 8006088:	40020470 	.word	0x40020470
 800608c:	40020488 	.word	0x40020488
 8006090:	400204a0 	.word	0x400204a0
 8006094:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 020e 	bic.w	r2, r2, #14
 80060a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a6c      	ldr	r2, [pc, #432]	; (8006260 <HAL_DMA_Abort_IT+0x3a8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d04a      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a6b      	ldr	r2, [pc, #428]	; (8006264 <HAL_DMA_Abort_IT+0x3ac>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d045      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a69      	ldr	r2, [pc, #420]	; (8006268 <HAL_DMA_Abort_IT+0x3b0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d040      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a68      	ldr	r2, [pc, #416]	; (800626c <HAL_DMA_Abort_IT+0x3b4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d03b      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a66      	ldr	r2, [pc, #408]	; (8006270 <HAL_DMA_Abort_IT+0x3b8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d036      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a65      	ldr	r2, [pc, #404]	; (8006274 <HAL_DMA_Abort_IT+0x3bc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d031      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a63      	ldr	r2, [pc, #396]	; (8006278 <HAL_DMA_Abort_IT+0x3c0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d02c      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a62      	ldr	r2, [pc, #392]	; (800627c <HAL_DMA_Abort_IT+0x3c4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d027      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a60      	ldr	r2, [pc, #384]	; (8006280 <HAL_DMA_Abort_IT+0x3c8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a5f      	ldr	r2, [pc, #380]	; (8006284 <HAL_DMA_Abort_IT+0x3cc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d01d      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a5d      	ldr	r2, [pc, #372]	; (8006288 <HAL_DMA_Abort_IT+0x3d0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a5c      	ldr	r2, [pc, #368]	; (800628c <HAL_DMA_Abort_IT+0x3d4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a5a      	ldr	r2, [pc, #360]	; (8006290 <HAL_DMA_Abort_IT+0x3d8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a59      	ldr	r2, [pc, #356]	; (8006294 <HAL_DMA_Abort_IT+0x3dc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a57      	ldr	r2, [pc, #348]	; (8006298 <HAL_DMA_Abort_IT+0x3e0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_DMA_Abort_IT+0x290>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a56      	ldr	r2, [pc, #344]	; (800629c <HAL_DMA_Abort_IT+0x3e4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d108      	bne.n	800615a <HAL_DMA_Abort_IT+0x2a2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	e007      	b.n	800616a <HAL_DMA_Abort_IT+0x2b2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3c      	ldr	r2, [pc, #240]	; (8006260 <HAL_DMA_Abort_IT+0x3a8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d072      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3a      	ldr	r2, [pc, #232]	; (8006264 <HAL_DMA_Abort_IT+0x3ac>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d06d      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_DMA_Abort_IT+0x3b0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d068      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a37      	ldr	r2, [pc, #220]	; (800626c <HAL_DMA_Abort_IT+0x3b4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d063      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a36      	ldr	r2, [pc, #216]	; (8006270 <HAL_DMA_Abort_IT+0x3b8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d05e      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a34      	ldr	r2, [pc, #208]	; (8006274 <HAL_DMA_Abort_IT+0x3bc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d059      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a33      	ldr	r2, [pc, #204]	; (8006278 <HAL_DMA_Abort_IT+0x3c0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d054      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a31      	ldr	r2, [pc, #196]	; (800627c <HAL_DMA_Abort_IT+0x3c4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d04f      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a30      	ldr	r2, [pc, #192]	; (8006280 <HAL_DMA_Abort_IT+0x3c8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d04a      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2e      	ldr	r2, [pc, #184]	; (8006284 <HAL_DMA_Abort_IT+0x3cc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d045      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	; (8006288 <HAL_DMA_Abort_IT+0x3d0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d040      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2b      	ldr	r2, [pc, #172]	; (800628c <HAL_DMA_Abort_IT+0x3d4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d03b      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <HAL_DMA_Abort_IT+0x3d8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d036      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <HAL_DMA_Abort_IT+0x3dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d031      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a27      	ldr	r2, [pc, #156]	; (8006298 <HAL_DMA_Abort_IT+0x3e0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d02c      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a25      	ldr	r2, [pc, #148]	; (800629c <HAL_DMA_Abort_IT+0x3e4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d027      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a24      	ldr	r2, [pc, #144]	; (80062a0 <HAL_DMA_Abort_IT+0x3e8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <HAL_DMA_Abort_IT+0x3ec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01d      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_DMA_Abort_IT+0x3f0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1f      	ldr	r2, [pc, #124]	; (80062ac <HAL_DMA_Abort_IT+0x3f4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <HAL_DMA_Abort_IT+0x3f8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <HAL_DMA_Abort_IT+0x3fc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1b      	ldr	r2, [pc, #108]	; (80062b8 <HAL_DMA_Abort_IT+0x400>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_DMA_Abort_IT+0x3a2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <HAL_DMA_Abort_IT+0x404>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d132      	bne.n	80062c0 <HAL_DMA_Abort_IT+0x408>
 800625a:	2301      	movs	r3, #1
 800625c:	e031      	b.n	80062c2 <HAL_DMA_Abort_IT+0x40a>
 800625e:	bf00      	nop
 8006260:	40020010 	.word	0x40020010
 8006264:	40020028 	.word	0x40020028
 8006268:	40020040 	.word	0x40020040
 800626c:	40020058 	.word	0x40020058
 8006270:	40020070 	.word	0x40020070
 8006274:	40020088 	.word	0x40020088
 8006278:	400200a0 	.word	0x400200a0
 800627c:	400200b8 	.word	0x400200b8
 8006280:	40020410 	.word	0x40020410
 8006284:	40020428 	.word	0x40020428
 8006288:	40020440 	.word	0x40020440
 800628c:	40020458 	.word	0x40020458
 8006290:	40020470 	.word	0x40020470
 8006294:	40020488 	.word	0x40020488
 8006298:	400204a0 	.word	0x400204a0
 800629c:	400204b8 	.word	0x400204b8
 80062a0:	58025408 	.word	0x58025408
 80062a4:	5802541c 	.word	0x5802541c
 80062a8:	58025430 	.word	0x58025430
 80062ac:	58025444 	.word	0x58025444
 80062b0:	58025458 	.word	0x58025458
 80062b4:	5802546c 	.word	0x5802546c
 80062b8:	58025480 	.word	0x58025480
 80062bc:	58025494 	.word	0x58025494
 80062c0:	2300      	movs	r3, #0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d028      	beq.n	8006318 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2201      	movs	r2, #1
 80062e6:	409a      	lsls	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800630c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006316:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop

08006344 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	; 0x28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006350:	4b67      	ldr	r3, [pc, #412]	; (80064f0 <HAL_DMA_IRQHandler+0x1ac>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a67      	ldr	r2, [pc, #412]	; (80064f4 <HAL_DMA_IRQHandler+0x1b0>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	0a9b      	lsrs	r3, r3, #10
 800635c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006362:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a5f      	ldr	r2, [pc, #380]	; (80064f8 <HAL_DMA_IRQHandler+0x1b4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d04a      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a5d      	ldr	r2, [pc, #372]	; (80064fc <HAL_DMA_IRQHandler+0x1b8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d045      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a5c      	ldr	r2, [pc, #368]	; (8006500 <HAL_DMA_IRQHandler+0x1bc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d040      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a5a      	ldr	r2, [pc, #360]	; (8006504 <HAL_DMA_IRQHandler+0x1c0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d03b      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a59      	ldr	r2, [pc, #356]	; (8006508 <HAL_DMA_IRQHandler+0x1c4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d036      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a57      	ldr	r2, [pc, #348]	; (800650c <HAL_DMA_IRQHandler+0x1c8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d031      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a56      	ldr	r2, [pc, #344]	; (8006510 <HAL_DMA_IRQHandler+0x1cc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d02c      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a54      	ldr	r2, [pc, #336]	; (8006514 <HAL_DMA_IRQHandler+0x1d0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d027      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a53      	ldr	r2, [pc, #332]	; (8006518 <HAL_DMA_IRQHandler+0x1d4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d022      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a51      	ldr	r2, [pc, #324]	; (800651c <HAL_DMA_IRQHandler+0x1d8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01d      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a50      	ldr	r2, [pc, #320]	; (8006520 <HAL_DMA_IRQHandler+0x1dc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d018      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a4e      	ldr	r2, [pc, #312]	; (8006524 <HAL_DMA_IRQHandler+0x1e0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d013      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a4d      	ldr	r2, [pc, #308]	; (8006528 <HAL_DMA_IRQHandler+0x1e4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00e      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a4b      	ldr	r2, [pc, #300]	; (800652c <HAL_DMA_IRQHandler+0x1e8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a4a      	ldr	r2, [pc, #296]	; (8006530 <HAL_DMA_IRQHandler+0x1ec>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_DMA_IRQHandler+0xd2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a48      	ldr	r2, [pc, #288]	; (8006534 <HAL_DMA_IRQHandler+0x1f0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d101      	bne.n	800641a <HAL_DMA_IRQHandler+0xd6>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <HAL_DMA_IRQHandler+0xd8>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 842b 	beq.w	8006c78 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2208      	movs	r2, #8
 800642c:	409a      	lsls	r2, r3
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4013      	ands	r3, r2
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80a2 	beq.w	800657c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2e      	ldr	r2, [pc, #184]	; (80064f8 <HAL_DMA_IRQHandler+0x1b4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d04a      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a2d      	ldr	r2, [pc, #180]	; (80064fc <HAL_DMA_IRQHandler+0x1b8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d045      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2b      	ldr	r2, [pc, #172]	; (8006500 <HAL_DMA_IRQHandler+0x1bc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d040      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2a      	ldr	r2, [pc, #168]	; (8006504 <HAL_DMA_IRQHandler+0x1c0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d03b      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a28      	ldr	r2, [pc, #160]	; (8006508 <HAL_DMA_IRQHandler+0x1c4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d036      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a27      	ldr	r2, [pc, #156]	; (800650c <HAL_DMA_IRQHandler+0x1c8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d031      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a25      	ldr	r2, [pc, #148]	; (8006510 <HAL_DMA_IRQHandler+0x1cc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d02c      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a24      	ldr	r2, [pc, #144]	; (8006514 <HAL_DMA_IRQHandler+0x1d0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d027      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a22      	ldr	r2, [pc, #136]	; (8006518 <HAL_DMA_IRQHandler+0x1d4>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d022      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_DMA_IRQHandler+0x1d8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d01d      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <HAL_DMA_IRQHandler+0x1dc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d018      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <HAL_DMA_IRQHandler+0x1e0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d013      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <HAL_DMA_IRQHandler+0x1e4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1b      	ldr	r2, [pc, #108]	; (800652c <HAL_DMA_IRQHandler+0x1e8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d009      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a19      	ldr	r2, [pc, #100]	; (8006530 <HAL_DMA_IRQHandler+0x1ec>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x194>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a18      	ldr	r2, [pc, #96]	; (8006534 <HAL_DMA_IRQHandler+0x1f0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d12f      	bne.n	8006538 <HAL_DMA_IRQHandler+0x1f4>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf14      	ite	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	2300      	moveq	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	e02e      	b.n	800654c <HAL_DMA_IRQHandler+0x208>
 80064ee:	bf00      	nop
 80064f0:	24000000 	.word	0x24000000
 80064f4:	1b4e81b5 	.word	0x1b4e81b5
 80064f8:	40020010 	.word	0x40020010
 80064fc:	40020028 	.word	0x40020028
 8006500:	40020040 	.word	0x40020040
 8006504:	40020058 	.word	0x40020058
 8006508:	40020070 	.word	0x40020070
 800650c:	40020088 	.word	0x40020088
 8006510:	400200a0 	.word	0x400200a0
 8006514:	400200b8 	.word	0x400200b8
 8006518:	40020410 	.word	0x40020410
 800651c:	40020428 	.word	0x40020428
 8006520:	40020440 	.word	0x40020440
 8006524:	40020458 	.word	0x40020458
 8006528:	40020470 	.word	0x40020470
 800652c:	40020488 	.word	0x40020488
 8006530:	400204a0 	.word	0x400204a0
 8006534:	400204b8 	.word	0x400204b8
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	bf14      	ite	ne
 8006546:	2301      	movne	r3, #1
 8006548:	2300      	moveq	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d015      	beq.n	800657c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0204 	bic.w	r2, r2, #4
 800655e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2208      	movs	r2, #8
 800656a:	409a      	lsls	r2, r3
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006574:	f043 0201 	orr.w	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	fa22 f303 	lsr.w	r3, r2, r3
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d06e      	beq.n	8006670 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a69      	ldr	r2, [pc, #420]	; (800673c <HAL_DMA_IRQHandler+0x3f8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d04a      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a67      	ldr	r2, [pc, #412]	; (8006740 <HAL_DMA_IRQHandler+0x3fc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d045      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a66      	ldr	r2, [pc, #408]	; (8006744 <HAL_DMA_IRQHandler+0x400>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d040      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a64      	ldr	r2, [pc, #400]	; (8006748 <HAL_DMA_IRQHandler+0x404>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d03b      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a63      	ldr	r2, [pc, #396]	; (800674c <HAL_DMA_IRQHandler+0x408>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d036      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a61      	ldr	r2, [pc, #388]	; (8006750 <HAL_DMA_IRQHandler+0x40c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d031      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a60      	ldr	r2, [pc, #384]	; (8006754 <HAL_DMA_IRQHandler+0x410>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d02c      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a5e      	ldr	r2, [pc, #376]	; (8006758 <HAL_DMA_IRQHandler+0x414>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d027      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a5d      	ldr	r2, [pc, #372]	; (800675c <HAL_DMA_IRQHandler+0x418>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d022      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a5b      	ldr	r2, [pc, #364]	; (8006760 <HAL_DMA_IRQHandler+0x41c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01d      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a5a      	ldr	r2, [pc, #360]	; (8006764 <HAL_DMA_IRQHandler+0x420>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d018      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a58      	ldr	r2, [pc, #352]	; (8006768 <HAL_DMA_IRQHandler+0x424>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a57      	ldr	r2, [pc, #348]	; (800676c <HAL_DMA_IRQHandler+0x428>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a55      	ldr	r2, [pc, #340]	; (8006770 <HAL_DMA_IRQHandler+0x42c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a54      	ldr	r2, [pc, #336]	; (8006774 <HAL_DMA_IRQHandler+0x430>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_DMA_IRQHandler+0x2ee>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a52      	ldr	r2, [pc, #328]	; (8006778 <HAL_DMA_IRQHandler+0x434>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d10a      	bne.n	8006648 <HAL_DMA_IRQHandler+0x304>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf14      	ite	ne
 8006640:	2301      	movne	r3, #1
 8006642:	2300      	moveq	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	e003      	b.n	8006650 <HAL_DMA_IRQHandler+0x30c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00d      	beq.n	8006670 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	2201      	movs	r2, #1
 800665e:	409a      	lsls	r2, r3
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006668:	f043 0202 	orr.w	r2, r3, #2
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2204      	movs	r2, #4
 800667a:	409a      	lsls	r2, r3
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 808f 	beq.w	80067a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a2c      	ldr	r2, [pc, #176]	; (800673c <HAL_DMA_IRQHandler+0x3f8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d04a      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a2a      	ldr	r2, [pc, #168]	; (8006740 <HAL_DMA_IRQHandler+0x3fc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d045      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a29      	ldr	r2, [pc, #164]	; (8006744 <HAL_DMA_IRQHandler+0x400>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d040      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a27      	ldr	r2, [pc, #156]	; (8006748 <HAL_DMA_IRQHandler+0x404>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d03b      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a26      	ldr	r2, [pc, #152]	; (800674c <HAL_DMA_IRQHandler+0x408>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d036      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a24      	ldr	r2, [pc, #144]	; (8006750 <HAL_DMA_IRQHandler+0x40c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d031      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a23      	ldr	r2, [pc, #140]	; (8006754 <HAL_DMA_IRQHandler+0x410>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d02c      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a21      	ldr	r2, [pc, #132]	; (8006758 <HAL_DMA_IRQHandler+0x414>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d027      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a20      	ldr	r2, [pc, #128]	; (800675c <HAL_DMA_IRQHandler+0x418>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d022      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <HAL_DMA_IRQHandler+0x41c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01d      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <HAL_DMA_IRQHandler+0x420>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d018      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <HAL_DMA_IRQHandler+0x424>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1a      	ldr	r2, [pc, #104]	; (800676c <HAL_DMA_IRQHandler+0x428>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00e      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a18      	ldr	r2, [pc, #96]	; (8006770 <HAL_DMA_IRQHandler+0x42c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a17      	ldr	r2, [pc, #92]	; (8006774 <HAL_DMA_IRQHandler+0x430>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d004      	beq.n	8006726 <HAL_DMA_IRQHandler+0x3e2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a15      	ldr	r2, [pc, #84]	; (8006778 <HAL_DMA_IRQHandler+0x434>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d12a      	bne.n	800677c <HAL_DMA_IRQHandler+0x438>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2300      	moveq	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e023      	b.n	8006784 <HAL_DMA_IRQHandler+0x440>
 800673c:	40020010 	.word	0x40020010
 8006740:	40020028 	.word	0x40020028
 8006744:	40020040 	.word	0x40020040
 8006748:	40020058 	.word	0x40020058
 800674c:	40020070 	.word	0x40020070
 8006750:	40020088 	.word	0x40020088
 8006754:	400200a0 	.word	0x400200a0
 8006758:	400200b8 	.word	0x400200b8
 800675c:	40020410 	.word	0x40020410
 8006760:	40020428 	.word	0x40020428
 8006764:	40020440 	.word	0x40020440
 8006768:	40020458 	.word	0x40020458
 800676c:	40020470 	.word	0x40020470
 8006770:	40020488 	.word	0x40020488
 8006774:	400204a0 	.word	0x400204a0
 8006778:	400204b8 	.word	0x400204b8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00d      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678c:	f003 031f 	and.w	r3, r3, #31
 8006790:	2204      	movs	r2, #4
 8006792:	409a      	lsls	r2, r3
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	f043 0204 	orr.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2210      	movs	r2, #16
 80067ae:	409a      	lsls	r2, r3
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80a6 	beq.w	8006906 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a85      	ldr	r2, [pc, #532]	; (80069d4 <HAL_DMA_IRQHandler+0x690>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d04a      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a83      	ldr	r2, [pc, #524]	; (80069d8 <HAL_DMA_IRQHandler+0x694>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d045      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a82      	ldr	r2, [pc, #520]	; (80069dc <HAL_DMA_IRQHandler+0x698>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d040      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a80      	ldr	r2, [pc, #512]	; (80069e0 <HAL_DMA_IRQHandler+0x69c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d03b      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a7f      	ldr	r2, [pc, #508]	; (80069e4 <HAL_DMA_IRQHandler+0x6a0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d036      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a7d      	ldr	r2, [pc, #500]	; (80069e8 <HAL_DMA_IRQHandler+0x6a4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d031      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a7c      	ldr	r2, [pc, #496]	; (80069ec <HAL_DMA_IRQHandler+0x6a8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d02c      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a7a      	ldr	r2, [pc, #488]	; (80069f0 <HAL_DMA_IRQHandler+0x6ac>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d027      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a79      	ldr	r2, [pc, #484]	; (80069f4 <HAL_DMA_IRQHandler+0x6b0>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d022      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a77      	ldr	r2, [pc, #476]	; (80069f8 <HAL_DMA_IRQHandler+0x6b4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01d      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a76      	ldr	r2, [pc, #472]	; (80069fc <HAL_DMA_IRQHandler+0x6b8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d018      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a74      	ldr	r2, [pc, #464]	; (8006a00 <HAL_DMA_IRQHandler+0x6bc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d013      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a73      	ldr	r2, [pc, #460]	; (8006a04 <HAL_DMA_IRQHandler+0x6c0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00e      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a71      	ldr	r2, [pc, #452]	; (8006a08 <HAL_DMA_IRQHandler+0x6c4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d009      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a70      	ldr	r2, [pc, #448]	; (8006a0c <HAL_DMA_IRQHandler+0x6c8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d004      	beq.n	800685a <HAL_DMA_IRQHandler+0x516>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a6e      	ldr	r2, [pc, #440]	; (8006a10 <HAL_DMA_IRQHandler+0x6cc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d10a      	bne.n	8006870 <HAL_DMA_IRQHandler+0x52c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b00      	cmp	r3, #0
 8006866:	bf14      	ite	ne
 8006868:	2301      	movne	r3, #1
 800686a:	2300      	moveq	r3, #0
 800686c:	b2db      	uxtb	r3, r3
 800686e:	e009      	b.n	8006884 <HAL_DMA_IRQHandler+0x540>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	bf14      	ite	ne
 800687e:	2301      	movne	r3, #1
 8006880:	2300      	moveq	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d03e      	beq.n	8006906 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	2210      	movs	r2, #16
 8006892:	409a      	lsls	r2, r3
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d018      	beq.n	80068d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d108      	bne.n	80068c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d024      	beq.n	8006906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	4798      	blx	r3
 80068c4:	e01f      	b.n	8006906 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01b      	beq.n	8006906 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
 80068d6:	e016      	b.n	8006906 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d107      	bne.n	80068f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0208 	bic.w	r2, r2, #8
 80068f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	2220      	movs	r2, #32
 8006910:	409a      	lsls	r2, r3
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4013      	ands	r3, r2
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8110 	beq.w	8006b3c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2c      	ldr	r2, [pc, #176]	; (80069d4 <HAL_DMA_IRQHandler+0x690>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d04a      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <HAL_DMA_IRQHandler+0x694>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d045      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a29      	ldr	r2, [pc, #164]	; (80069dc <HAL_DMA_IRQHandler+0x698>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d040      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <HAL_DMA_IRQHandler+0x69c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d03b      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <HAL_DMA_IRQHandler+0x6a0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d036      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a25      	ldr	r2, [pc, #148]	; (80069e8 <HAL_DMA_IRQHandler+0x6a4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d031      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a23      	ldr	r2, [pc, #140]	; (80069ec <HAL_DMA_IRQHandler+0x6a8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d02c      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a22      	ldr	r2, [pc, #136]	; (80069f0 <HAL_DMA_IRQHandler+0x6ac>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d027      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <HAL_DMA_IRQHandler+0x6b0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d022      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <HAL_DMA_IRQHandler+0x6b4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d01d      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1d      	ldr	r2, [pc, #116]	; (80069fc <HAL_DMA_IRQHandler+0x6b8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d018      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <HAL_DMA_IRQHandler+0x6bc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1a      	ldr	r2, [pc, #104]	; (8006a04 <HAL_DMA_IRQHandler+0x6c0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00e      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a19      	ldr	r2, [pc, #100]	; (8006a08 <HAL_DMA_IRQHandler+0x6c4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d009      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a17      	ldr	r2, [pc, #92]	; (8006a0c <HAL_DMA_IRQHandler+0x6c8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <HAL_DMA_IRQHandler+0x678>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <HAL_DMA_IRQHandler+0x6cc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d12b      	bne.n	8006a14 <HAL_DMA_IRQHandler+0x6d0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf14      	ite	ne
 80069ca:	2301      	movne	r3, #1
 80069cc:	2300      	moveq	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	e02a      	b.n	8006a28 <HAL_DMA_IRQHandler+0x6e4>
 80069d2:	bf00      	nop
 80069d4:	40020010 	.word	0x40020010
 80069d8:	40020028 	.word	0x40020028
 80069dc:	40020040 	.word	0x40020040
 80069e0:	40020058 	.word	0x40020058
 80069e4:	40020070 	.word	0x40020070
 80069e8:	40020088 	.word	0x40020088
 80069ec:	400200a0 	.word	0x400200a0
 80069f0:	400200b8 	.word	0x400200b8
 80069f4:	40020410 	.word	0x40020410
 80069f8:	40020428 	.word	0x40020428
 80069fc:	40020440 	.word	0x40020440
 8006a00:	40020458 	.word	0x40020458
 8006a04:	40020470 	.word	0x40020470
 8006a08:	40020488 	.word	0x40020488
 8006a0c:	400204a0 	.word	0x400204a0
 8006a10:	400204b8 	.word	0x400204b8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bf14      	ite	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	2300      	moveq	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8087 	beq.w	8006b3c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2220      	movs	r2, #32
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d139      	bne.n	8006abe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0216 	bic.w	r2, r2, #22
 8006a58:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a68:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d103      	bne.n	8006a7a <HAL_DMA_IRQHandler+0x736>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0208 	bic.w	r2, r2, #8
 8006a88:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	223f      	movs	r2, #63	; 0x3f
 8006a94:	409a      	lsls	r2, r3
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 834a 	beq.w	8007148 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
          }
          return;
 8006abc:	e344      	b.n	8007148 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d018      	beq.n	8006afe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d108      	bne.n	8006aec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d02c      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4798      	blx	r3
 8006aea:	e027      	b.n	8006b3c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d023      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
 8006afc:	e01e      	b.n	8006b3c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10f      	bne.n	8006b2c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0210 	bic.w	r2, r2, #16
 8006b1a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8306 	beq.w	8007152 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8088 	beq.w	8006c64 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a7a      	ldr	r2, [pc, #488]	; (8006d4c <HAL_DMA_IRQHandler+0xa08>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d04a      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a79      	ldr	r2, [pc, #484]	; (8006d50 <HAL_DMA_IRQHandler+0xa0c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d045      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a77      	ldr	r2, [pc, #476]	; (8006d54 <HAL_DMA_IRQHandler+0xa10>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d040      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a76      	ldr	r2, [pc, #472]	; (8006d58 <HAL_DMA_IRQHandler+0xa14>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d03b      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a74      	ldr	r2, [pc, #464]	; (8006d5c <HAL_DMA_IRQHandler+0xa18>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d036      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a73      	ldr	r2, [pc, #460]	; (8006d60 <HAL_DMA_IRQHandler+0xa1c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d031      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a71      	ldr	r2, [pc, #452]	; (8006d64 <HAL_DMA_IRQHandler+0xa20>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d02c      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a70      	ldr	r2, [pc, #448]	; (8006d68 <HAL_DMA_IRQHandler+0xa24>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d027      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a6e      	ldr	r2, [pc, #440]	; (8006d6c <HAL_DMA_IRQHandler+0xa28>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d022      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6d      	ldr	r2, [pc, #436]	; (8006d70 <HAL_DMA_IRQHandler+0xa2c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d01d      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a6b      	ldr	r2, [pc, #428]	; (8006d74 <HAL_DMA_IRQHandler+0xa30>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d018      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a6a      	ldr	r2, [pc, #424]	; (8006d78 <HAL_DMA_IRQHandler+0xa34>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a68      	ldr	r2, [pc, #416]	; (8006d7c <HAL_DMA_IRQHandler+0xa38>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00e      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a67      	ldr	r2, [pc, #412]	; (8006d80 <HAL_DMA_IRQHandler+0xa3c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d009      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a65      	ldr	r2, [pc, #404]	; (8006d84 <HAL_DMA_IRQHandler+0xa40>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <HAL_DMA_IRQHandler+0x8b8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a64      	ldr	r2, [pc, #400]	; (8006d88 <HAL_DMA_IRQHandler+0xa44>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <HAL_DMA_IRQHandler+0x8ca>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e007      	b.n	8006c1e <HAL_DMA_IRQHandler+0x8da>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d307      	bcc.n	8006c3a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f2      	bne.n	8006c1e <HAL_DMA_IRQHandler+0x8da>
 8006c38:	e000      	b.n	8006c3c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c3a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c52:	e003      	b.n	8006c5c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 8272 	beq.w	8007152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	e26c      	b.n	8007152 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a43      	ldr	r2, [pc, #268]	; (8006d8c <HAL_DMA_IRQHandler+0xa48>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d022      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x984>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a42      	ldr	r2, [pc, #264]	; (8006d90 <HAL_DMA_IRQHandler+0xa4c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x984>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a40      	ldr	r2, [pc, #256]	; (8006d94 <HAL_DMA_IRQHandler+0xa50>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x984>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a3f      	ldr	r2, [pc, #252]	; (8006d98 <HAL_DMA_IRQHandler+0xa54>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x984>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a3d      	ldr	r2, [pc, #244]	; (8006d9c <HAL_DMA_IRQHandler+0xa58>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x984>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a3c      	ldr	r2, [pc, #240]	; (8006da0 <HAL_DMA_IRQHandler+0xa5c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d009      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x984>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <HAL_DMA_IRQHandler+0xa60>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_DMA_IRQHandler+0x984>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a39      	ldr	r2, [pc, #228]	; (8006da8 <HAL_DMA_IRQHandler+0xa64>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d101      	bne.n	8006ccc <HAL_DMA_IRQHandler+0x988>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <HAL_DMA_IRQHandler+0x98a>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 823f 	beq.w	8007152 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	409a      	lsls	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80cd 	beq.w	8006e8c <HAL_DMA_IRQHandler+0xb48>
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80c7 	beq.w	8006e8c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	2204      	movs	r2, #4
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d049      	beq.n	8006dac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 8210 	beq.w	800714c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d34:	e20a      	b.n	800714c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 8206 	beq.w	800714c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d48:	e200      	b.n	800714c <HAL_DMA_IRQHandler+0xe08>
 8006d4a:	bf00      	nop
 8006d4c:	40020010 	.word	0x40020010
 8006d50:	40020028 	.word	0x40020028
 8006d54:	40020040 	.word	0x40020040
 8006d58:	40020058 	.word	0x40020058
 8006d5c:	40020070 	.word	0x40020070
 8006d60:	40020088 	.word	0x40020088
 8006d64:	400200a0 	.word	0x400200a0
 8006d68:	400200b8 	.word	0x400200b8
 8006d6c:	40020410 	.word	0x40020410
 8006d70:	40020428 	.word	0x40020428
 8006d74:	40020440 	.word	0x40020440
 8006d78:	40020458 	.word	0x40020458
 8006d7c:	40020470 	.word	0x40020470
 8006d80:	40020488 	.word	0x40020488
 8006d84:	400204a0 	.word	0x400204a0
 8006d88:	400204b8 	.word	0x400204b8
 8006d8c:	58025408 	.word	0x58025408
 8006d90:	5802541c 	.word	0x5802541c
 8006d94:	58025430 	.word	0x58025430
 8006d98:	58025444 	.word	0x58025444
 8006d9c:	58025458 	.word	0x58025458
 8006da0:	5802546c 	.word	0x5802546c
 8006da4:	58025480 	.word	0x58025480
 8006da8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d160      	bne.n	8006e78 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a7f      	ldr	r2, [pc, #508]	; (8006fb8 <HAL_DMA_IRQHandler+0xc74>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d04a      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a7d      	ldr	r2, [pc, #500]	; (8006fbc <HAL_DMA_IRQHandler+0xc78>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d045      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a7c      	ldr	r2, [pc, #496]	; (8006fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d040      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a7a      	ldr	r2, [pc, #488]	; (8006fc4 <HAL_DMA_IRQHandler+0xc80>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d03b      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a79      	ldr	r2, [pc, #484]	; (8006fc8 <HAL_DMA_IRQHandler+0xc84>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d036      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a77      	ldr	r2, [pc, #476]	; (8006fcc <HAL_DMA_IRQHandler+0xc88>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d031      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a76      	ldr	r2, [pc, #472]	; (8006fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d02c      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a74      	ldr	r2, [pc, #464]	; (8006fd4 <HAL_DMA_IRQHandler+0xc90>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d027      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a73      	ldr	r2, [pc, #460]	; (8006fd8 <HAL_DMA_IRQHandler+0xc94>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a71      	ldr	r2, [pc, #452]	; (8006fdc <HAL_DMA_IRQHandler+0xc98>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d01d      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a70      	ldr	r2, [pc, #448]	; (8006fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a6e      	ldr	r2, [pc, #440]	; (8006fe4 <HAL_DMA_IRQHandler+0xca0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a6d      	ldr	r2, [pc, #436]	; (8006fe8 <HAL_DMA_IRQHandler+0xca4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a6b      	ldr	r2, [pc, #428]	; (8006fec <HAL_DMA_IRQHandler+0xca8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a6a      	ldr	r2, [pc, #424]	; (8006ff0 <HAL_DMA_IRQHandler+0xcac>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_DMA_IRQHandler+0xb12>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a68      	ldr	r2, [pc, #416]	; (8006ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d108      	bne.n	8006e68 <HAL_DMA_IRQHandler+0xb24>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0208 	bic.w	r2, r2, #8
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e007      	b.n	8006e78 <HAL_DMA_IRQHandler+0xb34>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0204 	bic.w	r2, r2, #4
 8006e76:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8165 	beq.w	800714c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e8a:	e15f      	b.n	800714c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	2202      	movs	r2, #2
 8006e96:	409a      	lsls	r2, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80c5 	beq.w	800702c <HAL_DMA_IRQHandler+0xce8>
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80bf 	beq.w	800702c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	409a      	lsls	r2, r3
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d018      	beq.n	8006efa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 813a 	beq.w	8007150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee4:	e134      	b.n	8007150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8130 	beq.w	8007150 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ef8:	e12a      	b.n	8007150 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f040 8089 	bne.w	8007018 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2b      	ldr	r2, [pc, #172]	; (8006fb8 <HAL_DMA_IRQHandler+0xc74>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d04a      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <HAL_DMA_IRQHandler+0xc78>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d045      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <HAL_DMA_IRQHandler+0xc7c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d040      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a26      	ldr	r2, [pc, #152]	; (8006fc4 <HAL_DMA_IRQHandler+0xc80>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d03b      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a25      	ldr	r2, [pc, #148]	; (8006fc8 <HAL_DMA_IRQHandler+0xc84>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d036      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <HAL_DMA_IRQHandler+0xc88>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d031      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_DMA_IRQHandler+0xc8c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d02c      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <HAL_DMA_IRQHandler+0xc90>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d027      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_DMA_IRQHandler+0xc94>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d022      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_DMA_IRQHandler+0xc98>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01d      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_DMA_IRQHandler+0xc9c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d018      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <HAL_DMA_IRQHandler+0xca0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <HAL_DMA_IRQHandler+0xca4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00e      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a17      	ldr	r2, [pc, #92]	; (8006fec <HAL_DMA_IRQHandler+0xca8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d009      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <HAL_DMA_IRQHandler+0xcac>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xc62>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a14      	ldr	r2, [pc, #80]	; (8006ff4 <HAL_DMA_IRQHandler+0xcb0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d128      	bne.n	8006ff8 <HAL_DMA_IRQHandler+0xcb4>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0214 	bic.w	r2, r2, #20
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e027      	b.n	8007008 <HAL_DMA_IRQHandler+0xcc4>
 8006fb8:	40020010 	.word	0x40020010
 8006fbc:	40020028 	.word	0x40020028
 8006fc0:	40020040 	.word	0x40020040
 8006fc4:	40020058 	.word	0x40020058
 8006fc8:	40020070 	.word	0x40020070
 8006fcc:	40020088 	.word	0x40020088
 8006fd0:	400200a0 	.word	0x400200a0
 8006fd4:	400200b8 	.word	0x400200b8
 8006fd8:	40020410 	.word	0x40020410
 8006fdc:	40020428 	.word	0x40020428
 8006fe0:	40020440 	.word	0x40020440
 8006fe4:	40020458 	.word	0x40020458
 8006fe8:	40020470 	.word	0x40020470
 8006fec:	40020488 	.word	0x40020488
 8006ff0:	400204a0 	.word	0x400204a0
 8006ff4:	400204b8 	.word	0x400204b8
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 020a 	bic.w	r2, r2, #10
 8007006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8097 	beq.w	8007150 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800702a:	e091      	b.n	8007150 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2208      	movs	r2, #8
 8007036:	409a      	lsls	r2, r3
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4013      	ands	r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8088 	beq.w	8007152 <HAL_DMA_IRQHandler+0xe0e>
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8082 	beq.w	8007152 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a41      	ldr	r2, [pc, #260]	; (8007158 <HAL_DMA_IRQHandler+0xe14>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d04a      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a3f      	ldr	r2, [pc, #252]	; (800715c <HAL_DMA_IRQHandler+0xe18>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d045      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a3e      	ldr	r2, [pc, #248]	; (8007160 <HAL_DMA_IRQHandler+0xe1c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d040      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a3c      	ldr	r2, [pc, #240]	; (8007164 <HAL_DMA_IRQHandler+0xe20>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d03b      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a3b      	ldr	r2, [pc, #236]	; (8007168 <HAL_DMA_IRQHandler+0xe24>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d036      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a39      	ldr	r2, [pc, #228]	; (800716c <HAL_DMA_IRQHandler+0xe28>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d031      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a38      	ldr	r2, [pc, #224]	; (8007170 <HAL_DMA_IRQHandler+0xe2c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d02c      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a36      	ldr	r2, [pc, #216]	; (8007174 <HAL_DMA_IRQHandler+0xe30>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d027      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a35      	ldr	r2, [pc, #212]	; (8007178 <HAL_DMA_IRQHandler+0xe34>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d022      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a33      	ldr	r2, [pc, #204]	; (800717c <HAL_DMA_IRQHandler+0xe38>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01d      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a32      	ldr	r2, [pc, #200]	; (8007180 <HAL_DMA_IRQHandler+0xe3c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d018      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a30      	ldr	r2, [pc, #192]	; (8007184 <HAL_DMA_IRQHandler+0xe40>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d013      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2f      	ldr	r2, [pc, #188]	; (8007188 <HAL_DMA_IRQHandler+0xe44>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00e      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2d      	ldr	r2, [pc, #180]	; (800718c <HAL_DMA_IRQHandler+0xe48>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d009      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a2c      	ldr	r2, [pc, #176]	; (8007190 <HAL_DMA_IRQHandler+0xe4c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_DMA_IRQHandler+0xdaa>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <HAL_DMA_IRQHandler+0xe50>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d108      	bne.n	8007100 <HAL_DMA_IRQHandler+0xdbc>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 021c 	bic.w	r2, r2, #28
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	e007      	b.n	8007110 <HAL_DMA_IRQHandler+0xdcc>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 020e 	bic.w	r2, r2, #14
 800710e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	2201      	movs	r2, #1
 800711a:	409a      	lsls	r2, r3
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
 8007146:	e004      	b.n	8007152 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007148:	bf00      	nop
 800714a:	e002      	b.n	8007152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007150:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007152:	3728      	adds	r7, #40	; 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40020010 	.word	0x40020010
 800715c:	40020028 	.word	0x40020028
 8007160:	40020040 	.word	0x40020040
 8007164:	40020058 	.word	0x40020058
 8007168:	40020070 	.word	0x40020070
 800716c:	40020088 	.word	0x40020088
 8007170:	400200a0 	.word	0x400200a0
 8007174:	400200b8 	.word	0x400200b8
 8007178:	40020410 	.word	0x40020410
 800717c:	40020428 	.word	0x40020428
 8007180:	40020440 	.word	0x40020440
 8007184:	40020458 	.word	0x40020458
 8007188:	40020470 	.word	0x40020470
 800718c:	40020488 	.word	0x40020488
 8007190:	400204a0 	.word	0x400204a0
 8007194:	400204b8 	.word	0x400204b8

08007198 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a7f      	ldr	r2, [pc, #508]	; (80073b4 <DMA_SetConfig+0x21c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d072      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a7d      	ldr	r2, [pc, #500]	; (80073b8 <DMA_SetConfig+0x220>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d06d      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7c      	ldr	r2, [pc, #496]	; (80073bc <DMA_SetConfig+0x224>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d068      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a7a      	ldr	r2, [pc, #488]	; (80073c0 <DMA_SetConfig+0x228>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d063      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a79      	ldr	r2, [pc, #484]	; (80073c4 <DMA_SetConfig+0x22c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d05e      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a77      	ldr	r2, [pc, #476]	; (80073c8 <DMA_SetConfig+0x230>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d059      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a76      	ldr	r2, [pc, #472]	; (80073cc <DMA_SetConfig+0x234>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d054      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a74      	ldr	r2, [pc, #464]	; (80073d0 <DMA_SetConfig+0x238>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d04f      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a73      	ldr	r2, [pc, #460]	; (80073d4 <DMA_SetConfig+0x23c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d04a      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a71      	ldr	r2, [pc, #452]	; (80073d8 <DMA_SetConfig+0x240>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d045      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a70      	ldr	r2, [pc, #448]	; (80073dc <DMA_SetConfig+0x244>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d040      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a6e      	ldr	r2, [pc, #440]	; (80073e0 <DMA_SetConfig+0x248>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d03b      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a6d      	ldr	r2, [pc, #436]	; (80073e4 <DMA_SetConfig+0x24c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d036      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a6b      	ldr	r2, [pc, #428]	; (80073e8 <DMA_SetConfig+0x250>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d031      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a6a      	ldr	r2, [pc, #424]	; (80073ec <DMA_SetConfig+0x254>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d02c      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a68      	ldr	r2, [pc, #416]	; (80073f0 <DMA_SetConfig+0x258>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d027      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a67      	ldr	r2, [pc, #412]	; (80073f4 <DMA_SetConfig+0x25c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d022      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a65      	ldr	r2, [pc, #404]	; (80073f8 <DMA_SetConfig+0x260>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d01d      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a64      	ldr	r2, [pc, #400]	; (80073fc <DMA_SetConfig+0x264>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d018      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a62      	ldr	r2, [pc, #392]	; (8007400 <DMA_SetConfig+0x268>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d013      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a61      	ldr	r2, [pc, #388]	; (8007404 <DMA_SetConfig+0x26c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00e      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a5f      	ldr	r2, [pc, #380]	; (8007408 <DMA_SetConfig+0x270>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d009      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a5e      	ldr	r2, [pc, #376]	; (800740c <DMA_SetConfig+0x274>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d004      	beq.n	80072a2 <DMA_SetConfig+0x10a>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a5c      	ldr	r2, [pc, #368]	; (8007410 <DMA_SetConfig+0x278>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d101      	bne.n	80072a6 <DMA_SetConfig+0x10e>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <DMA_SetConfig+0x110>
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00d      	beq.n	80072c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a39      	ldr	r2, [pc, #228]	; (80073b4 <DMA_SetConfig+0x21c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d04a      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a38      	ldr	r2, [pc, #224]	; (80073b8 <DMA_SetConfig+0x220>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d045      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a36      	ldr	r2, [pc, #216]	; (80073bc <DMA_SetConfig+0x224>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d040      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a35      	ldr	r2, [pc, #212]	; (80073c0 <DMA_SetConfig+0x228>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d03b      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a33      	ldr	r2, [pc, #204]	; (80073c4 <DMA_SetConfig+0x22c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d036      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a32      	ldr	r2, [pc, #200]	; (80073c8 <DMA_SetConfig+0x230>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d031      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a30      	ldr	r2, [pc, #192]	; (80073cc <DMA_SetConfig+0x234>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d02c      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a2f      	ldr	r2, [pc, #188]	; (80073d0 <DMA_SetConfig+0x238>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d027      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2d      	ldr	r2, [pc, #180]	; (80073d4 <DMA_SetConfig+0x23c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d022      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2c      	ldr	r2, [pc, #176]	; (80073d8 <DMA_SetConfig+0x240>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d01d      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a2a      	ldr	r2, [pc, #168]	; (80073dc <DMA_SetConfig+0x244>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a29      	ldr	r2, [pc, #164]	; (80073e0 <DMA_SetConfig+0x248>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a27      	ldr	r2, [pc, #156]	; (80073e4 <DMA_SetConfig+0x24c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00e      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a26      	ldr	r2, [pc, #152]	; (80073e8 <DMA_SetConfig+0x250>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a24      	ldr	r2, [pc, #144]	; (80073ec <DMA_SetConfig+0x254>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <DMA_SetConfig+0x1d0>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <DMA_SetConfig+0x258>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d101      	bne.n	800736c <DMA_SetConfig+0x1d4>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <DMA_SetConfig+0x1d6>
 800736c:	2300      	movs	r3, #0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d059      	beq.n	8007426 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007376:	f003 031f 	and.w	r3, r3, #31
 800737a:	223f      	movs	r2, #63	; 0x3f
 800737c:	409a      	lsls	r2, r3
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007390:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d138      	bne.n	8007414 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073b2:	e086      	b.n	80074c2 <DMA_SetConfig+0x32a>
 80073b4:	40020010 	.word	0x40020010
 80073b8:	40020028 	.word	0x40020028
 80073bc:	40020040 	.word	0x40020040
 80073c0:	40020058 	.word	0x40020058
 80073c4:	40020070 	.word	0x40020070
 80073c8:	40020088 	.word	0x40020088
 80073cc:	400200a0 	.word	0x400200a0
 80073d0:	400200b8 	.word	0x400200b8
 80073d4:	40020410 	.word	0x40020410
 80073d8:	40020428 	.word	0x40020428
 80073dc:	40020440 	.word	0x40020440
 80073e0:	40020458 	.word	0x40020458
 80073e4:	40020470 	.word	0x40020470
 80073e8:	40020488 	.word	0x40020488
 80073ec:	400204a0 	.word	0x400204a0
 80073f0:	400204b8 	.word	0x400204b8
 80073f4:	58025408 	.word	0x58025408
 80073f8:	5802541c 	.word	0x5802541c
 80073fc:	58025430 	.word	0x58025430
 8007400:	58025444 	.word	0x58025444
 8007404:	58025458 	.word	0x58025458
 8007408:	5802546c 	.word	0x5802546c
 800740c:	58025480 	.word	0x58025480
 8007410:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	60da      	str	r2, [r3, #12]
}
 8007424:	e04d      	b.n	80074c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a29      	ldr	r2, [pc, #164]	; (80074d0 <DMA_SetConfig+0x338>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d022      	beq.n	8007476 <DMA_SetConfig+0x2de>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <DMA_SetConfig+0x33c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01d      	beq.n	8007476 <DMA_SetConfig+0x2de>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <DMA_SetConfig+0x340>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d018      	beq.n	8007476 <DMA_SetConfig+0x2de>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a24      	ldr	r2, [pc, #144]	; (80074dc <DMA_SetConfig+0x344>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <DMA_SetConfig+0x2de>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a23      	ldr	r2, [pc, #140]	; (80074e0 <DMA_SetConfig+0x348>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00e      	beq.n	8007476 <DMA_SetConfig+0x2de>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <DMA_SetConfig+0x34c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d009      	beq.n	8007476 <DMA_SetConfig+0x2de>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a20      	ldr	r2, [pc, #128]	; (80074e8 <DMA_SetConfig+0x350>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d004      	beq.n	8007476 <DMA_SetConfig+0x2de>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1e      	ldr	r2, [pc, #120]	; (80074ec <DMA_SetConfig+0x354>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d101      	bne.n	800747a <DMA_SetConfig+0x2e2>
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <DMA_SetConfig+0x2e4>
 800747a:	2300      	movs	r3, #0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d020      	beq.n	80074c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2201      	movs	r2, #1
 800748a:	409a      	lsls	r2, r3
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	d108      	bne.n	80074b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	60da      	str	r2, [r3, #12]
}
 80074b0:	e007      	b.n	80074c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	60da      	str	r2, [r3, #12]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	58025408 	.word	0x58025408
 80074d4:	5802541c 	.word	0x5802541c
 80074d8:	58025430 	.word	0x58025430
 80074dc:	58025444 	.word	0x58025444
 80074e0:	58025458 	.word	0x58025458
 80074e4:	5802546c 	.word	0x5802546c
 80074e8:	58025480 	.word	0x58025480
 80074ec:	58025494 	.word	0x58025494

080074f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a42      	ldr	r2, [pc, #264]	; (8007608 <DMA_CalcBaseAndBitshift+0x118>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d04a      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a41      	ldr	r2, [pc, #260]	; (800760c <DMA_CalcBaseAndBitshift+0x11c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d045      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a3f      	ldr	r2, [pc, #252]	; (8007610 <DMA_CalcBaseAndBitshift+0x120>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d040      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a3e      	ldr	r2, [pc, #248]	; (8007614 <DMA_CalcBaseAndBitshift+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d03b      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a3c      	ldr	r2, [pc, #240]	; (8007618 <DMA_CalcBaseAndBitshift+0x128>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d036      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a3b      	ldr	r2, [pc, #236]	; (800761c <DMA_CalcBaseAndBitshift+0x12c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d031      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a39      	ldr	r2, [pc, #228]	; (8007620 <DMA_CalcBaseAndBitshift+0x130>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d02c      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a38      	ldr	r2, [pc, #224]	; (8007624 <DMA_CalcBaseAndBitshift+0x134>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d027      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a36      	ldr	r2, [pc, #216]	; (8007628 <DMA_CalcBaseAndBitshift+0x138>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d022      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a35      	ldr	r2, [pc, #212]	; (800762c <DMA_CalcBaseAndBitshift+0x13c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d01d      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a33      	ldr	r2, [pc, #204]	; (8007630 <DMA_CalcBaseAndBitshift+0x140>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d018      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a32      	ldr	r2, [pc, #200]	; (8007634 <DMA_CalcBaseAndBitshift+0x144>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a30      	ldr	r2, [pc, #192]	; (8007638 <DMA_CalcBaseAndBitshift+0x148>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00e      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a2f      	ldr	r2, [pc, #188]	; (800763c <DMA_CalcBaseAndBitshift+0x14c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d009      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a2d      	ldr	r2, [pc, #180]	; (8007640 <DMA_CalcBaseAndBitshift+0x150>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d004      	beq.n	8007598 <DMA_CalcBaseAndBitshift+0xa8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a2c      	ldr	r2, [pc, #176]	; (8007644 <DMA_CalcBaseAndBitshift+0x154>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d101      	bne.n	800759c <DMA_CalcBaseAndBitshift+0xac>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <DMA_CalcBaseAndBitshift+0xae>
 800759c:	2300      	movs	r3, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d024      	beq.n	80075ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	3b10      	subs	r3, #16
 80075aa:	4a27      	ldr	r2, [pc, #156]	; (8007648 <DMA_CalcBaseAndBitshift+0x158>)
 80075ac:	fba2 2303 	umull	r2, r3, r2, r3
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	4a24      	ldr	r2, [pc, #144]	; (800764c <DMA_CalcBaseAndBitshift+0x15c>)
 80075bc:	5cd3      	ldrb	r3, [r2, r3]
 80075be:	461a      	mov	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d908      	bls.n	80075dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	4b1f      	ldr	r3, [pc, #124]	; (8007650 <DMA_CalcBaseAndBitshift+0x160>)
 80075d2:	4013      	ands	r3, r2
 80075d4:	1d1a      	adds	r2, r3, #4
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	659a      	str	r2, [r3, #88]	; 0x58
 80075da:	e00d      	b.n	80075f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <DMA_CalcBaseAndBitshift+0x160>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6593      	str	r3, [r2, #88]	; 0x58
 80075ea:	e005      	b.n	80075f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	40020010 	.word	0x40020010
 800760c:	40020028 	.word	0x40020028
 8007610:	40020040 	.word	0x40020040
 8007614:	40020058 	.word	0x40020058
 8007618:	40020070 	.word	0x40020070
 800761c:	40020088 	.word	0x40020088
 8007620:	400200a0 	.word	0x400200a0
 8007624:	400200b8 	.word	0x400200b8
 8007628:	40020410 	.word	0x40020410
 800762c:	40020428 	.word	0x40020428
 8007630:	40020440 	.word	0x40020440
 8007634:	40020458 	.word	0x40020458
 8007638:	40020470 	.word	0x40020470
 800763c:	40020488 	.word	0x40020488
 8007640:	400204a0 	.word	0x400204a0
 8007644:	400204b8 	.word	0x400204b8
 8007648:	aaaaaaab 	.word	0xaaaaaaab
 800764c:	0800e13c 	.word	0x0800e13c
 8007650:	fffffc00 	.word	0xfffffc00

08007654 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d120      	bne.n	80076aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	2b03      	cmp	r3, #3
 800766e:	d858      	bhi.n	8007722 <DMA_CheckFifoParam+0xce>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <DMA_CheckFifoParam+0x24>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007689 	.word	0x08007689
 800767c:	0800769b 	.word	0x0800769b
 8007680:	08007689 	.word	0x08007689
 8007684:	08007723 	.word	0x08007723
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d048      	beq.n	8007726 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007698:	e045      	b.n	8007726 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076a2:	d142      	bne.n	800772a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076a8:	e03f      	b.n	800772a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076b2:	d123      	bne.n	80076fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d838      	bhi.n	800772e <DMA_CheckFifoParam+0xda>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <DMA_CheckFifoParam+0x70>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076d5 	.word	0x080076d5
 80076c8:	080076db 	.word	0x080076db
 80076cc:	080076d5 	.word	0x080076d5
 80076d0:	080076ed 	.word	0x080076ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
        break;
 80076d8:	e030      	b.n	800773c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d025      	beq.n	8007732 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ea:	e022      	b.n	8007732 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076f4:	d11f      	bne.n	8007736 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076fa:	e01c      	b.n	8007736 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	2b02      	cmp	r3, #2
 8007702:	d902      	bls.n	800770a <DMA_CheckFifoParam+0xb6>
 8007704:	2b03      	cmp	r3, #3
 8007706:	d003      	beq.n	8007710 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007708:	e018      	b.n	800773c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
        break;
 800770e:	e015      	b.n	800773c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00e      	beq.n	800773a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
    break;
 8007720:	e00b      	b.n	800773a <DMA_CheckFifoParam+0xe6>
        break;
 8007722:	bf00      	nop
 8007724:	e00a      	b.n	800773c <DMA_CheckFifoParam+0xe8>
        break;
 8007726:	bf00      	nop
 8007728:	e008      	b.n	800773c <DMA_CheckFifoParam+0xe8>
        break;
 800772a:	bf00      	nop
 800772c:	e006      	b.n	800773c <DMA_CheckFifoParam+0xe8>
        break;
 800772e:	bf00      	nop
 8007730:	e004      	b.n	800773c <DMA_CheckFifoParam+0xe8>
        break;
 8007732:	bf00      	nop
 8007734:	e002      	b.n	800773c <DMA_CheckFifoParam+0xe8>
        break;
 8007736:	bf00      	nop
 8007738:	e000      	b.n	800773c <DMA_CheckFifoParam+0xe8>
    break;
 800773a:	bf00      	nop
    }
  }

  return status;
 800773c:	7bfb      	ldrb	r3, [r7, #15]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a38      	ldr	r2, [pc, #224]	; (8007840 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d022      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a36      	ldr	r2, [pc, #216]	; (8007844 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d01d      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a35      	ldr	r2, [pc, #212]	; (8007848 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d018      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a33      	ldr	r2, [pc, #204]	; (800784c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d013      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a32      	ldr	r2, [pc, #200]	; (8007850 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00e      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a30      	ldr	r2, [pc, #192]	; (8007854 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d009      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a2f      	ldr	r2, [pc, #188]	; (8007858 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d004      	beq.n	80077aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a2d      	ldr	r2, [pc, #180]	; (800785c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d101      	bne.n	80077ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077ae:	2300      	movs	r3, #0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01a      	beq.n	80077ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	3b08      	subs	r3, #8
 80077bc:	4a28      	ldr	r2, [pc, #160]	; (8007860 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077be:	fba2 2303 	umull	r2, r3, r2, r3
 80077c2:	091b      	lsrs	r3, r3, #4
 80077c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4b26      	ldr	r3, [pc, #152]	; (8007864 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a24      	ldr	r2, [pc, #144]	; (8007868 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80077d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80077e8:	e024      	b.n	8007834 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	3b10      	subs	r3, #16
 80077f2:	4a1e      	ldr	r2, [pc, #120]	; (800786c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	091b      	lsrs	r3, r3, #4
 80077fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d806      	bhi.n	8007812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4a1b      	ldr	r2, [pc, #108]	; (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d902      	bls.n	8007812 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3308      	adds	r3, #8
 8007810:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	4b18      	ldr	r3, [pc, #96]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a16      	ldr	r2, [pc, #88]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007824:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2201      	movs	r2, #1
 800782e:	409a      	lsls	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	58025408 	.word	0x58025408
 8007844:	5802541c 	.word	0x5802541c
 8007848:	58025430 	.word	0x58025430
 800784c:	58025444 	.word	0x58025444
 8007850:	58025458 	.word	0x58025458
 8007854:	5802546c 	.word	0x5802546c
 8007858:	58025480 	.word	0x58025480
 800785c:	58025494 	.word	0x58025494
 8007860:	cccccccd 	.word	0xcccccccd
 8007864:	16009600 	.word	0x16009600
 8007868:	58025880 	.word	0x58025880
 800786c:	aaaaaaab 	.word	0xaaaaaaab
 8007870:	400204b8 	.word	0x400204b8
 8007874:	4002040f 	.word	0x4002040f
 8007878:	10008200 	.word	0x10008200
 800787c:	40020880 	.word	0x40020880

08007880 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d04a      	beq.n	800792c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d847      	bhi.n	800792c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a25      	ldr	r2, [pc, #148]	; (8007938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a24      	ldr	r2, [pc, #144]	; (800793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d01d      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a22      	ldr	r2, [pc, #136]	; (8007940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a21      	ldr	r2, [pc, #132]	; (8007944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a1f      	ldr	r2, [pc, #124]	; (8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1e      	ldr	r2, [pc, #120]	; (800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1c      	ldr	r2, [pc, #112]	; (8007950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1b      	ldr	r2, [pc, #108]	; (8007954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d101      	bne.n	80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e000      	b.n	80078f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078f0:	2300      	movs	r3, #0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4b17      	ldr	r3, [pc, #92]	; (8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	461a      	mov	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a15      	ldr	r2, [pc, #84]	; (800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007908:	671a      	str	r2, [r3, #112]	; 0x70
 800790a:	e009      	b.n	8007920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4b14      	ldr	r3, [pc, #80]	; (8007960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007910:	4413      	add	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	461a      	mov	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a11      	ldr	r2, [pc, #68]	; (8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800791e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3b01      	subs	r3, #1
 8007924:	2201      	movs	r2, #1
 8007926:	409a      	lsls	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800792c:	bf00      	nop
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	58025408 	.word	0x58025408
 800793c:	5802541c 	.word	0x5802541c
 8007940:	58025430 	.word	0x58025430
 8007944:	58025444 	.word	0x58025444
 8007948:	58025458 	.word	0x58025458
 800794c:	5802546c 	.word	0x5802546c
 8007950:	58025480 	.word	0x58025480
 8007954:	58025494 	.word	0x58025494
 8007958:	1600963f 	.word	0x1600963f
 800795c:	58025940 	.word	0x58025940
 8007960:	1000823f 	.word	0x1000823f
 8007964:	40020940 	.word	0x40020940

08007968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	; 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007972:	2300      	movs	r3, #0
 8007974:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007976:	4b86      	ldr	r3, [pc, #536]	; (8007b90 <HAL_GPIO_Init+0x228>)
 8007978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800797a:	e18c      	b.n	8007c96 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	2101      	movs	r1, #1
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	fa01 f303 	lsl.w	r3, r1, r3
 8007988:	4013      	ands	r3, r2
 800798a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 817e 	beq.w	8007c90 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d005      	beq.n	80079ac <HAL_GPIO_Init+0x44>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d130      	bne.n	8007a0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	2203      	movs	r2, #3
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	43db      	mvns	r3, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079e2:	2201      	movs	r2, #1
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43db      	mvns	r3, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	4013      	ands	r3, r2
 80079f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	091b      	lsrs	r3, r3, #4
 80079f8:	f003 0201 	and.w	r2, r3, #1
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d017      	beq.n	8007a4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	2203      	movs	r2, #3
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d123      	bne.n	8007a9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	08da      	lsrs	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3208      	adds	r2, #8
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	220f      	movs	r2, #15
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43db      	mvns	r3, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4013      	ands	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	691a      	ldr	r2, [r3, #16]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	08da      	lsrs	r2, r3, #3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3208      	adds	r2, #8
 8007a98:	69b9      	ldr	r1, [r7, #24]
 8007a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	2203      	movs	r2, #3
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f003 0203 	and.w	r2, r3, #3
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80d8 	beq.w	8007c90 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae0:	4b2c      	ldr	r3, [pc, #176]	; (8007b94 <HAL_GPIO_Init+0x22c>)
 8007ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ae6:	4a2b      	ldr	r2, [pc, #172]	; (8007b94 <HAL_GPIO_Init+0x22c>)
 8007ae8:	f043 0302 	orr.w	r3, r3, #2
 8007aec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007af0:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <HAL_GPIO_Init+0x22c>)
 8007af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007afe:	4a26      	ldr	r2, [pc, #152]	; (8007b98 <HAL_GPIO_Init+0x230>)
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	089b      	lsrs	r3, r3, #2
 8007b04:	3302      	adds	r3, #2
 8007b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	220f      	movs	r2, #15
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <HAL_GPIO_Init+0x234>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d04a      	beq.n	8007bc0 <HAL_GPIO_Init+0x258>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ba0 <HAL_GPIO_Init+0x238>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d02b      	beq.n	8007b8a <HAL_GPIO_Init+0x222>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <HAL_GPIO_Init+0x23c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d025      	beq.n	8007b86 <HAL_GPIO_Init+0x21e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <HAL_GPIO_Init+0x240>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d01f      	beq.n	8007b82 <HAL_GPIO_Init+0x21a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <HAL_GPIO_Init+0x244>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d019      	beq.n	8007b7e <HAL_GPIO_Init+0x216>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <HAL_GPIO_Init+0x248>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d013      	beq.n	8007b7a <HAL_GPIO_Init+0x212>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a17      	ldr	r2, [pc, #92]	; (8007bb4 <HAL_GPIO_Init+0x24c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00d      	beq.n	8007b76 <HAL_GPIO_Init+0x20e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a16      	ldr	r2, [pc, #88]	; (8007bb8 <HAL_GPIO_Init+0x250>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d007      	beq.n	8007b72 <HAL_GPIO_Init+0x20a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a15      	ldr	r2, [pc, #84]	; (8007bbc <HAL_GPIO_Init+0x254>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d101      	bne.n	8007b6e <HAL_GPIO_Init+0x206>
 8007b6a:	2309      	movs	r3, #9
 8007b6c:	e029      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b6e:	230a      	movs	r3, #10
 8007b70:	e027      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b72:	2307      	movs	r3, #7
 8007b74:	e025      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b76:	2306      	movs	r3, #6
 8007b78:	e023      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b7a:	2305      	movs	r3, #5
 8007b7c:	e021      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b7e:	2304      	movs	r3, #4
 8007b80:	e01f      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b82:	2303      	movs	r3, #3
 8007b84:	e01d      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e01b      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e019      	b.n	8007bc2 <HAL_GPIO_Init+0x25a>
 8007b8e:	bf00      	nop
 8007b90:	58000080 	.word	0x58000080
 8007b94:	58024400 	.word	0x58024400
 8007b98:	58000400 	.word	0x58000400
 8007b9c:	58020000 	.word	0x58020000
 8007ba0:	58020400 	.word	0x58020400
 8007ba4:	58020800 	.word	0x58020800
 8007ba8:	58020c00 	.word	0x58020c00
 8007bac:	58021000 	.word	0x58021000
 8007bb0:	58021400 	.word	0x58021400
 8007bb4:	58021800 	.word	0x58021800
 8007bb8:	58021c00 	.word	0x58021c00
 8007bbc:	58022400 	.word	0x58022400
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	f002 0203 	and.w	r2, r2, #3
 8007bc8:	0092      	lsls	r2, r2, #2
 8007bca:	4093      	lsls	r3, r2
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bd2:	4938      	ldr	r1, [pc, #224]	; (8007cb4 <HAL_GPIO_Init+0x34c>)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	089b      	lsrs	r3, r3, #2
 8007bd8:	3302      	adds	r3, #2
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	43db      	mvns	r3, r3
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	43db      	mvns	r3, r3
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	43db      	mvns	r3, r3
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	4013      	ands	r3, r2
 8007c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	3301      	adds	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f47f ae6b 	bne.w	800797c <HAL_GPIO_Init+0x14>
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	3724      	adds	r7, #36	; 0x24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	58000400 	.word	0x58000400

08007cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	807b      	strh	r3, [r7, #2]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cc8:	787b      	ldrb	r3, [r7, #1]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cce:	887a      	ldrh	r2, [r7, #2]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007cd4:	e003      	b.n	8007cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007cd6:	887b      	ldrh	r3, [r7, #2]
 8007cd8:	041a      	lsls	r2, r3, #16
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	619a      	str	r2, [r3, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <HAL_PWREx_ConfigSupply+0x70>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d00a      	beq.n	8007d16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d00:	4b16      	ldr	r3, [pc, #88]	; (8007d5c <HAL_PWREx_ConfigSupply+0x70>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d001      	beq.n	8007d12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e01f      	b.n	8007d52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	e01d      	b.n	8007d52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <HAL_PWREx_ConfigSupply+0x70>)
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f023 0207 	bic.w	r2, r3, #7
 8007d1e:	490f      	ldr	r1, [pc, #60]	; (8007d5c <HAL_PWREx_ConfigSupply+0x70>)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d26:	f7fc fec9 	bl	8004abc <HAL_GetTick>
 8007d2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d2c:	e009      	b.n	8007d42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d2e:	f7fc fec5 	bl	8004abc <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d3c:	d901      	bls.n	8007d42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e007      	b.n	8007d52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d42:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <HAL_PWREx_ConfigSupply+0x70>)
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4e:	d1ee      	bne.n	8007d2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	58024800 	.word	0x58024800

08007d60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08c      	sub	sp, #48	; 0x30
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e39d      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8087 	beq.w	8007e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d80:	4b88      	ldr	r3, [pc, #544]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d8a:	4b86      	ldr	r3, [pc, #536]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d007      	beq.n	8007da6 <HAL_RCC_OscConfig+0x46>
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	2b18      	cmp	r3, #24
 8007d9a:	d110      	bne.n	8007dbe <HAL_RCC_OscConfig+0x5e>
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d10b      	bne.n	8007dbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007da6:	4b7f      	ldr	r3, [pc, #508]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d06c      	beq.n	8007e8c <HAL_RCC_OscConfig+0x12c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d168      	bne.n	8007e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e377      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc6:	d106      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x76>
 8007dc8:	4b76      	ldr	r3, [pc, #472]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a75      	ldr	r2, [pc, #468]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	e02e      	b.n	8007e34 <HAL_RCC_OscConfig+0xd4>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10c      	bne.n	8007df8 <HAL_RCC_OscConfig+0x98>
 8007dde:	4b71      	ldr	r3, [pc, #452]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a70      	ldr	r2, [pc, #448]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	4b6e      	ldr	r3, [pc, #440]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a6d      	ldr	r2, [pc, #436]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	e01d      	b.n	8007e34 <HAL_RCC_OscConfig+0xd4>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e00:	d10c      	bne.n	8007e1c <HAL_RCC_OscConfig+0xbc>
 8007e02:	4b68      	ldr	r3, [pc, #416]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a67      	ldr	r2, [pc, #412]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	4b65      	ldr	r3, [pc, #404]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a64      	ldr	r2, [pc, #400]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	e00b      	b.n	8007e34 <HAL_RCC_OscConfig+0xd4>
 8007e1c:	4b61      	ldr	r3, [pc, #388]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a60      	ldr	r2, [pc, #384]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	4b5e      	ldr	r3, [pc, #376]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a5d      	ldr	r2, [pc, #372]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d013      	beq.n	8007e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3c:	f7fc fe3e 	bl	8004abc <HAL_GetTick>
 8007e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e44:	f7fc fe3a 	bl	8004abc <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b64      	cmp	r3, #100	; 0x64
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e32b      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e56:	4b53      	ldr	r3, [pc, #332]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0xe4>
 8007e62:	e014      	b.n	8007e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e64:	f7fc fe2a 	bl	8004abc <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e6c:	f7fc fe26 	bl	8004abc <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b64      	cmp	r3, #100	; 0x64
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e317      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e7e:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1f0      	bne.n	8007e6c <HAL_RCC_OscConfig+0x10c>
 8007e8a:	e000      	b.n	8007e8e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 808c 	beq.w	8007fb4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e9c:	4b41      	ldr	r3, [pc, #260]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ea4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ea6:	4b3f      	ldr	r3, [pc, #252]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x162>
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	2b18      	cmp	r3, #24
 8007eb6:	d137      	bne.n	8007f28 <HAL_RCC_OscConfig+0x1c8>
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d132      	bne.n	8007f28 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ec2:	4b38      	ldr	r3, [pc, #224]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0304 	and.w	r3, r3, #4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_RCC_OscConfig+0x17a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e2e9      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007eda:	4b32      	ldr	r3, [pc, #200]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f023 0219 	bic.w	r2, r3, #25
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	492f      	ldr	r1, [pc, #188]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007eec:	f7fc fde6 	bl	8004abc <HAL_GetTick>
 8007ef0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ef4:	f7fc fde2 	bl	8004abc <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e2d3      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f06:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0f0      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f12:	4b24      	ldr	r3, [pc, #144]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	061b      	lsls	r3, r3, #24
 8007f20:	4920      	ldr	r1, [pc, #128]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f26:	e045      	b.n	8007fb4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d026      	beq.n	8007f7e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f30:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f023 0219 	bic.w	r2, r3, #25
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	4919      	ldr	r1, [pc, #100]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f42:	f7fc fdbb 	bl	8004abc <HAL_GetTick>
 8007f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f4a:	f7fc fdb7 	bl	8004abc <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e2a8      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f5c:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f68:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	061b      	lsls	r3, r3, #24
 8007f76:	490b      	ldr	r1, [pc, #44]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	604b      	str	r3, [r1, #4]
 8007f7c:	e01a      	b.n	8007fb4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a08      	ldr	r2, [pc, #32]	; (8007fa4 <HAL_RCC_OscConfig+0x244>)
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8a:	f7fc fd97 	bl	8004abc <HAL_GetTick>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f90:	e00a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f92:	f7fc fd93 	bl	8004abc <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d903      	bls.n	8007fa8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e284      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
 8007fa4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fa8:	4b96      	ldr	r3, [pc, #600]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1ee      	bne.n	8007f92 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d06a      	beq.n	8008096 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fc0:	4b90      	ldr	r3, [pc, #576]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fca:	4b8e      	ldr	r3, [pc, #568]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d007      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x286>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b18      	cmp	r3, #24
 8007fda:	d11b      	bne.n	8008014 <HAL_RCC_OscConfig+0x2b4>
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d116      	bne.n	8008014 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fe6:	4b87      	ldr	r3, [pc, #540]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <HAL_RCC_OscConfig+0x29e>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	2b80      	cmp	r3, #128	; 0x80
 8007ff8:	d001      	beq.n	8007ffe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e257      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ffe:	4b81      	ldr	r3, [pc, #516]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	061b      	lsls	r3, r3, #24
 800800c:	497d      	ldr	r1, [pc, #500]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800800e:	4313      	orrs	r3, r2
 8008010:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008012:	e040      	b.n	8008096 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d023      	beq.n	8008064 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800801c:	4b79      	ldr	r3, [pc, #484]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a78      	ldr	r2, [pc, #480]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008028:	f7fc fd48 	bl	8004abc <HAL_GetTick>
 800802c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008030:	f7fc fd44 	bl	8004abc <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e235      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008042:	4b70      	ldr	r3, [pc, #448]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f0      	beq.n	8008030 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800804e:	4b6d      	ldr	r3, [pc, #436]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	061b      	lsls	r3, r3, #24
 800805c:	4969      	ldr	r1, [pc, #420]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800805e:	4313      	orrs	r3, r2
 8008060:	60cb      	str	r3, [r1, #12]
 8008062:	e018      	b.n	8008096 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008064:	4b67      	ldr	r3, [pc, #412]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a66      	ldr	r2, [pc, #408]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800806a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc fd24 	bl	8004abc <HAL_GetTick>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008078:	f7fc fd20 	bl	8004abc <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e211      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800808a:	4b5e      	ldr	r3, [pc, #376]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0308 	and.w	r3, r3, #8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d036      	beq.n	8008110 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d019      	beq.n	80080de <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080aa:	4b56      	ldr	r3, [pc, #344]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80080ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ae:	4a55      	ldr	r2, [pc, #340]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b6:	f7fc fd01 	bl	8004abc <HAL_GetTick>
 80080ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080bc:	e008      	b.n	80080d0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080be:	f7fc fcfd 	bl	8004abc <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d901      	bls.n	80080d0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e1ee      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080d0:	4b4c      	ldr	r3, [pc, #304]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80080d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0f0      	beq.n	80080be <HAL_RCC_OscConfig+0x35e>
 80080dc:	e018      	b.n	8008110 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080de:	4b49      	ldr	r3, [pc, #292]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80080e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e2:	4a48      	ldr	r2, [pc, #288]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ea:	f7fc fce7 	bl	8004abc <HAL_GetTick>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080f2:	f7fc fce3 	bl	8004abc <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e1d4      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008104:	4b3f      	ldr	r3, [pc, #252]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f0      	bne.n	80080f2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d036      	beq.n	800818a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d019      	beq.n	8008158 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008124:	4b37      	ldr	r3, [pc, #220]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a36      	ldr	r2, [pc, #216]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800812a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800812e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008130:	f7fc fcc4 	bl	8004abc <HAL_GetTick>
 8008134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008138:	f7fc fcc0 	bl	8004abc <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e1b1      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800814a:	4b2e      	ldr	r3, [pc, #184]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0x3d8>
 8008156:	e018      	b.n	800818a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008158:	4b2a      	ldr	r3, [pc, #168]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a29      	ldr	r2, [pc, #164]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 800815e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008162:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008164:	f7fc fcaa 	bl	8004abc <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800816c:	f7fc fca6 	bl	8004abc <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e197      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800817e:	4b21      	ldr	r3, [pc, #132]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8086 	beq.w	80082a4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008198:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <HAL_RCC_OscConfig+0x4a8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1a      	ldr	r2, [pc, #104]	; (8008208 <HAL_RCC_OscConfig+0x4a8>)
 800819e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081a4:	f7fc fc8a 	bl	8004abc <HAL_GetTick>
 80081a8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081ac:	f7fc fc86 	bl	8004abc <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b64      	cmp	r3, #100	; 0x64
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e177      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <HAL_RCC_OscConfig+0x4a8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f0      	beq.n	80081ac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d106      	bne.n	80081e0 <HAL_RCC_OscConfig+0x480>
 80081d2:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	4a0b      	ldr	r2, [pc, #44]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80081d8:	f043 0301 	orr.w	r3, r3, #1
 80081dc:	6713      	str	r3, [r2, #112]	; 0x70
 80081de:	e032      	b.n	8008246 <HAL_RCC_OscConfig+0x4e6>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d111      	bne.n	800820c <HAL_RCC_OscConfig+0x4ac>
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80081ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ec:	4a05      	ldr	r2, [pc, #20]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80081ee:	f023 0301 	bic.w	r3, r3, #1
 80081f2:	6713      	str	r3, [r2, #112]	; 0x70
 80081f4:	4b03      	ldr	r3, [pc, #12]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80081f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f8:	4a02      	ldr	r2, [pc, #8]	; (8008204 <HAL_RCC_OscConfig+0x4a4>)
 80081fa:	f023 0304 	bic.w	r3, r3, #4
 80081fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008200:	e021      	b.n	8008246 <HAL_RCC_OscConfig+0x4e6>
 8008202:	bf00      	nop
 8008204:	58024400 	.word	0x58024400
 8008208:	58024800 	.word	0x58024800
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b05      	cmp	r3, #5
 8008212:	d10c      	bne.n	800822e <HAL_RCC_OscConfig+0x4ce>
 8008214:	4b83      	ldr	r3, [pc, #524]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008218:	4a82      	ldr	r2, [pc, #520]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800821a:	f043 0304 	orr.w	r3, r3, #4
 800821e:	6713      	str	r3, [r2, #112]	; 0x70
 8008220:	4b80      	ldr	r3, [pc, #512]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008224:	4a7f      	ldr	r2, [pc, #508]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008226:	f043 0301 	orr.w	r3, r3, #1
 800822a:	6713      	str	r3, [r2, #112]	; 0x70
 800822c:	e00b      	b.n	8008246 <HAL_RCC_OscConfig+0x4e6>
 800822e:	4b7d      	ldr	r3, [pc, #500]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	4a7c      	ldr	r2, [pc, #496]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	6713      	str	r3, [r2, #112]	; 0x70
 800823a:	4b7a      	ldr	r3, [pc, #488]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800823c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823e:	4a79      	ldr	r2, [pc, #484]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008240:	f023 0304 	bic.w	r3, r3, #4
 8008244:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d015      	beq.n	800827a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800824e:	f7fc fc35 	bl	8004abc <HAL_GetTick>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008254:	e00a      	b.n	800826c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008256:	f7fc fc31 	bl	8004abc <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	f241 3288 	movw	r2, #5000	; 0x1388
 8008264:	4293      	cmp	r3, r2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e120      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800826c:	4b6d      	ldr	r3, [pc, #436]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0ee      	beq.n	8008256 <HAL_RCC_OscConfig+0x4f6>
 8008278:	e014      	b.n	80082a4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800827a:	f7fc fc1f 	bl	8004abc <HAL_GetTick>
 800827e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008280:	e00a      	b.n	8008298 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008282:	f7fc fc1b 	bl	8004abc <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008290:	4293      	cmp	r3, r2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e10a      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008298:	4b62      	ldr	r3, [pc, #392]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1ee      	bne.n	8008282 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80ff 	beq.w	80084ac <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082ae:	4b5d      	ldr	r3, [pc, #372]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082b6:	2b18      	cmp	r3, #24
 80082b8:	f000 80ba 	beq.w	8008430 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	f040 8095 	bne.w	80083f0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c6:	4b57      	ldr	r3, [pc, #348]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a56      	ldr	r2, [pc, #344]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80082cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082d2:	f7fc fbf3 	bl	8004abc <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082d8:	e008      	b.n	80082ec <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082da:	f7fc fbef 	bl	8004abc <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e0e0      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ec:	4b4d      	ldr	r3, [pc, #308]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1f0      	bne.n	80082da <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082f8:	4b4a      	ldr	r3, [pc, #296]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80082fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fc:	4b4a      	ldr	r3, [pc, #296]	; (8008428 <HAL_RCC_OscConfig+0x6c8>)
 80082fe:	4013      	ands	r3, r2
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008308:	0112      	lsls	r2, r2, #4
 800830a:	430a      	orrs	r2, r1
 800830c:	4945      	ldr	r1, [pc, #276]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800830e:	4313      	orrs	r3, r2
 8008310:	628b      	str	r3, [r1, #40]	; 0x28
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	3b01      	subs	r3, #1
 8008318:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008320:	3b01      	subs	r3, #1
 8008322:	025b      	lsls	r3, r3, #9
 8008324:	b29b      	uxth	r3, r3
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	3b01      	subs	r3, #1
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008334:	431a      	orrs	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	3b01      	subs	r3, #1
 800833c:	061b      	lsls	r3, r3, #24
 800833e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008342:	4938      	ldr	r1, [pc, #224]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008344:	4313      	orrs	r3, r2
 8008346:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008348:	4b36      	ldr	r3, [pc, #216]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	4a35      	ldr	r2, [pc, #212]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008354:	4b33      	ldr	r3, [pc, #204]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008358:	4b34      	ldr	r3, [pc, #208]	; (800842c <HAL_RCC_OscConfig+0x6cc>)
 800835a:	4013      	ands	r3, r2
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008360:	00d2      	lsls	r2, r2, #3
 8008362:	4930      	ldr	r1, [pc, #192]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008364:	4313      	orrs	r3, r2
 8008366:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008368:	4b2e      	ldr	r3, [pc, #184]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	f023 020c 	bic.w	r2, r3, #12
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	492b      	ldr	r1, [pc, #172]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008376:	4313      	orrs	r3, r2
 8008378:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800837a:	4b2a      	ldr	r3, [pc, #168]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	f023 0202 	bic.w	r2, r3, #2
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008386:	4927      	ldr	r1, [pc, #156]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008388:	4313      	orrs	r3, r2
 800838a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800838c:	4b25      	ldr	r3, [pc, #148]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	4a24      	ldr	r2, [pc, #144]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008398:	4b22      	ldr	r3, [pc, #136]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	4a21      	ldr	r2, [pc, #132]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 800839e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083a4:	4b1f      	ldr	r3, [pc, #124]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a1e      	ldr	r2, [pc, #120]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80083b0:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	4a1b      	ldr	r2, [pc, #108]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083bc:	4b19      	ldr	r3, [pc, #100]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a18      	ldr	r2, [pc, #96]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c8:	f7fc fb78 	bl	8004abc <HAL_GetTick>
 80083cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083d0:	f7fc fb74 	bl	8004abc <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e065      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083e2:	4b10      	ldr	r3, [pc, #64]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0f0      	beq.n	80083d0 <HAL_RCC_OscConfig+0x670>
 80083ee:	e05d      	b.n	80084ac <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083f0:	4b0c      	ldr	r3, [pc, #48]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0b      	ldr	r2, [pc, #44]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 80083f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083fc:	f7fc fb5e 	bl	8004abc <HAL_GetTick>
 8008400:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008404:	f7fc fb5a 	bl	8004abc <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e04b      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008416:	4b03      	ldr	r3, [pc, #12]	; (8008424 <HAL_RCC_OscConfig+0x6c4>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f0      	bne.n	8008404 <HAL_RCC_OscConfig+0x6a4>
 8008422:	e043      	b.n	80084ac <HAL_RCC_OscConfig+0x74c>
 8008424:	58024400 	.word	0x58024400
 8008428:	fffffc0c 	.word	0xfffffc0c
 800842c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008430:	4b21      	ldr	r3, [pc, #132]	; (80084b8 <HAL_RCC_OscConfig+0x758>)
 8008432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008434:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008436:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <HAL_RCC_OscConfig+0x758>)
 8008438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	2b01      	cmp	r3, #1
 8008442:	d031      	beq.n	80084a8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f003 0203 	and.w	r2, r3, #3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800844e:	429a      	cmp	r2, r3
 8008450:	d12a      	bne.n	80084a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	091b      	lsrs	r3, r3, #4
 8008456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800845e:	429a      	cmp	r2, r3
 8008460:	d122      	bne.n	80084a8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800846e:	429a      	cmp	r2, r3
 8008470:	d11a      	bne.n	80084a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	0a5b      	lsrs	r3, r3, #9
 8008476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008480:	429a      	cmp	r2, r3
 8008482:	d111      	bne.n	80084a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008492:	429a      	cmp	r2, r3
 8008494:	d108      	bne.n	80084a8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	0e1b      	lsrs	r3, r3, #24
 800849a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d001      	beq.n	80084ac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3730      	adds	r7, #48	; 0x30
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	58024400 	.word	0x58024400

080084bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e19c      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084d0:	4b8a      	ldr	r3, [pc, #552]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 030f 	and.w	r3, r3, #15
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d910      	bls.n	8008500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084de:	4b87      	ldr	r3, [pc, #540]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f023 020f 	bic.w	r2, r3, #15
 80084e6:	4985      	ldr	r1, [pc, #532]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ee:	4b83      	ldr	r3, [pc, #524]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d001      	beq.n	8008500 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e184      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d010      	beq.n	800852e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691a      	ldr	r2, [r3, #16]
 8008510:	4b7b      	ldr	r3, [pc, #492]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008518:	429a      	cmp	r2, r3
 800851a:	d908      	bls.n	800852e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800851c:	4b78      	ldr	r3, [pc, #480]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	4975      	ldr	r1, [pc, #468]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800852a:	4313      	orrs	r3, r2
 800852c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d010      	beq.n	800855c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	695a      	ldr	r2, [r3, #20]
 800853e:	4b70      	ldr	r3, [pc, #448]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008546:	429a      	cmp	r2, r3
 8008548:	d908      	bls.n	800855c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800854a:	4b6d      	ldr	r3, [pc, #436]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	496a      	ldr	r1, [pc, #424]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 8008558:	4313      	orrs	r3, r2
 800855a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0310 	and.w	r3, r3, #16
 8008564:	2b00      	cmp	r3, #0
 8008566:	d010      	beq.n	800858a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	4b64      	ldr	r3, [pc, #400]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008574:	429a      	cmp	r2, r3
 8008576:	d908      	bls.n	800858a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008578:	4b61      	ldr	r3, [pc, #388]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	495e      	ldr	r1, [pc, #376]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 8008586:	4313      	orrs	r3, r2
 8008588:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d010      	beq.n	80085b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69da      	ldr	r2, [r3, #28]
 800859a:	4b59      	ldr	r3, [pc, #356]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d908      	bls.n	80085b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80085a6:	4b56      	ldr	r3, [pc, #344]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	4953      	ldr	r1, [pc, #332]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d010      	beq.n	80085e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	4b4d      	ldr	r3, [pc, #308]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d908      	bls.n	80085e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085d4:	4b4a      	ldr	r3, [pc, #296]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f023 020f 	bic.w	r2, r3, #15
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	4947      	ldr	r1, [pc, #284]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d055      	beq.n	800869e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085f2:	4b43      	ldr	r3, [pc, #268]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4940      	ldr	r1, [pc, #256]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 8008600:	4313      	orrs	r3, r2
 8008602:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d107      	bne.n	800861c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800860c:	4b3c      	ldr	r3, [pc, #240]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d121      	bne.n	800865c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e0f6      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	2b03      	cmp	r3, #3
 8008622:	d107      	bne.n	8008634 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008624:	4b36      	ldr	r3, [pc, #216]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d115      	bne.n	800865c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e0ea      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d107      	bne.n	800864c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800863c:	4b30      	ldr	r3, [pc, #192]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008644:	2b00      	cmp	r3, #0
 8008646:	d109      	bne.n	800865c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e0de      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800864c:	4b2c      	ldr	r3, [pc, #176]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e0d6      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800865c:	4b28      	ldr	r3, [pc, #160]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	f023 0207 	bic.w	r2, r3, #7
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	4925      	ldr	r1, [pc, #148]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800866a:	4313      	orrs	r3, r2
 800866c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800866e:	f7fc fa25 	bl	8004abc <HAL_GetTick>
 8008672:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008674:	e00a      	b.n	800868c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008676:	f7fc fa21 	bl	8004abc <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	f241 3288 	movw	r2, #5000	; 0x1388
 8008684:	4293      	cmp	r3, r2
 8008686:	d901      	bls.n	800868c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e0be      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800868c:	4b1c      	ldr	r3, [pc, #112]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	429a      	cmp	r2, r3
 800869c:	d1eb      	bne.n	8008676 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d010      	beq.n	80086cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68da      	ldr	r2, [r3, #12]
 80086ae:	4b14      	ldr	r3, [pc, #80]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d208      	bcs.n	80086cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086ba:	4b11      	ldr	r3, [pc, #68]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	f023 020f 	bic.w	r2, r3, #15
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	490e      	ldr	r1, [pc, #56]	; (8008700 <HAL_RCC_ClockConfig+0x244>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086cc:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d214      	bcs.n	8008704 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086da:	4b08      	ldr	r3, [pc, #32]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f023 020f 	bic.w	r2, r3, #15
 80086e2:	4906      	ldr	r1, [pc, #24]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ea:	4b04      	ldr	r3, [pc, #16]	; (80086fc <HAL_RCC_ClockConfig+0x240>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d005      	beq.n	8008704 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e086      	b.n	800880a <HAL_RCC_ClockConfig+0x34e>
 80086fc:	52002000 	.word	0x52002000
 8008700:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	4b3f      	ldr	r3, [pc, #252]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800871c:	429a      	cmp	r2, r3
 800871e:	d208      	bcs.n	8008732 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008720:	4b3c      	ldr	r3, [pc, #240]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	4939      	ldr	r1, [pc, #228]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 800872e:	4313      	orrs	r3, r2
 8008730:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d010      	beq.n	8008760 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695a      	ldr	r2, [r3, #20]
 8008742:	4b34      	ldr	r3, [pc, #208]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800874a:	429a      	cmp	r2, r3
 800874c:	d208      	bcs.n	8008760 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800874e:	4b31      	ldr	r3, [pc, #196]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	492e      	ldr	r1, [pc, #184]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 800875c:	4313      	orrs	r3, r2
 800875e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0310 	and.w	r3, r3, #16
 8008768:	2b00      	cmp	r3, #0
 800876a:	d010      	beq.n	800878e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699a      	ldr	r2, [r3, #24]
 8008770:	4b28      	ldr	r3, [pc, #160]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008778:	429a      	cmp	r2, r3
 800877a:	d208      	bcs.n	800878e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800877c:	4b25      	ldr	r3, [pc, #148]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	4922      	ldr	r1, [pc, #136]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 800878a:	4313      	orrs	r3, r2
 800878c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d010      	beq.n	80087bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69da      	ldr	r2, [r3, #28]
 800879e:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d208      	bcs.n	80087bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087aa:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	4917      	ldr	r1, [pc, #92]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80087bc:	f000 f834 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 80087c0:	4602      	mov	r2, r0
 80087c2:	4b14      	ldr	r3, [pc, #80]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	0a1b      	lsrs	r3, r3, #8
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	4912      	ldr	r1, [pc, #72]	; (8008818 <HAL_RCC_ClockConfig+0x35c>)
 80087ce:	5ccb      	ldrb	r3, [r1, r3]
 80087d0:	f003 031f 	and.w	r3, r3, #31
 80087d4:	fa22 f303 	lsr.w	r3, r2, r3
 80087d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <HAL_RCC_ClockConfig+0x358>)
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	4a0d      	ldr	r2, [pc, #52]	; (8008818 <HAL_RCC_ClockConfig+0x35c>)
 80087e4:	5cd3      	ldrb	r3, [r2, r3]
 80087e6:	f003 031f 	and.w	r3, r3, #31
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	4a0a      	ldr	r2, [pc, #40]	; (800881c <HAL_RCC_ClockConfig+0x360>)
 80087f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087f4:	4a0a      	ldr	r2, [pc, #40]	; (8008820 <HAL_RCC_ClockConfig+0x364>)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80087fa:	4b0a      	ldr	r3, [pc, #40]	; (8008824 <HAL_RCC_ClockConfig+0x368>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fc f912 	bl	8004a28 <HAL_InitTick>
 8008804:	4603      	mov	r3, r0
 8008806:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008808:	7bfb      	ldrb	r3, [r7, #15]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	58024400 	.word	0x58024400
 8008818:	0800e12c 	.word	0x0800e12c
 800881c:	24000004 	.word	0x24000004
 8008820:	24000000 	.word	0x24000000
 8008824:	24000008 	.word	0x24000008

08008828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008828:	b480      	push	{r7}
 800882a:	b089      	sub	sp, #36	; 0x24
 800882c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800882e:	4bb3      	ldr	r3, [pc, #716]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008836:	2b18      	cmp	r3, #24
 8008838:	f200 8155 	bhi.w	8008ae6 <HAL_RCC_GetSysClockFreq+0x2be>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <HAL_RCC_GetSysClockFreq+0x1c>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	080088a9 	.word	0x080088a9
 8008848:	08008ae7 	.word	0x08008ae7
 800884c:	08008ae7 	.word	0x08008ae7
 8008850:	08008ae7 	.word	0x08008ae7
 8008854:	08008ae7 	.word	0x08008ae7
 8008858:	08008ae7 	.word	0x08008ae7
 800885c:	08008ae7 	.word	0x08008ae7
 8008860:	08008ae7 	.word	0x08008ae7
 8008864:	080088cf 	.word	0x080088cf
 8008868:	08008ae7 	.word	0x08008ae7
 800886c:	08008ae7 	.word	0x08008ae7
 8008870:	08008ae7 	.word	0x08008ae7
 8008874:	08008ae7 	.word	0x08008ae7
 8008878:	08008ae7 	.word	0x08008ae7
 800887c:	08008ae7 	.word	0x08008ae7
 8008880:	08008ae7 	.word	0x08008ae7
 8008884:	080088d5 	.word	0x080088d5
 8008888:	08008ae7 	.word	0x08008ae7
 800888c:	08008ae7 	.word	0x08008ae7
 8008890:	08008ae7 	.word	0x08008ae7
 8008894:	08008ae7 	.word	0x08008ae7
 8008898:	08008ae7 	.word	0x08008ae7
 800889c:	08008ae7 	.word	0x08008ae7
 80088a0:	08008ae7 	.word	0x08008ae7
 80088a4:	080088db 	.word	0x080088db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088a8:	4b94      	ldr	r3, [pc, #592]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088b4:	4b91      	ldr	r3, [pc, #580]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	08db      	lsrs	r3, r3, #3
 80088ba:	f003 0303 	and.w	r3, r3, #3
 80088be:	4a90      	ldr	r2, [pc, #576]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088c0:	fa22 f303 	lsr.w	r3, r2, r3
 80088c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80088c6:	e111      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80088c8:	4b8d      	ldr	r3, [pc, #564]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088ca:	61bb      	str	r3, [r7, #24]
    break;
 80088cc:	e10e      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80088ce:	4b8d      	ldr	r3, [pc, #564]	; (8008b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088d0:	61bb      	str	r3, [r7, #24]
    break;
 80088d2:	e10b      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80088d4:	4b8c      	ldr	r3, [pc, #560]	; (8008b08 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80088d6:	61bb      	str	r3, [r7, #24]
    break;
 80088d8:	e108      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088da:	4b88      	ldr	r3, [pc, #544]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	f003 0303 	and.w	r3, r3, #3
 80088e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80088e4:	4b85      	ldr	r3, [pc, #532]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e8:	091b      	lsrs	r3, r3, #4
 80088ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088f0:	4b82      	ldr	r3, [pc, #520]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80088fa:	4b80      	ldr	r3, [pc, #512]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fe:	08db      	lsrs	r3, r3, #3
 8008900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 80e1 	beq.w	8008ae0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b02      	cmp	r3, #2
 8008922:	f000 8083 	beq.w	8008a2c <HAL_RCC_GetSysClockFreq+0x204>
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b02      	cmp	r3, #2
 800892a:	f200 80a1 	bhi.w	8008a70 <HAL_RCC_GetSysClockFreq+0x248>
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_RCC_GetSysClockFreq+0x114>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d056      	beq.n	80089e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800893a:	e099      	b.n	8008a70 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800893c:	4b6f      	ldr	r3, [pc, #444]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	d02d      	beq.n	80089a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008948:	4b6c      	ldr	r3, [pc, #432]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	4a6b      	ldr	r2, [pc, #428]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
 8008958:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008972:	4b62      	ldr	r3, [pc, #392]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897a:	ee07 3a90 	vmov	s15, r3
 800897e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008982:	ed97 6a02 	vldr	s12, [r7, #8]
 8008986:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 800898a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800898e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800899e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80089a2:	e087      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	ee07 3a90 	vmov	s15, r3
 80089aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008b10 <HAL_RCC_GetSysClockFreq+0x2e8>
 80089b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b6:	4b51      	ldr	r3, [pc, #324]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 80089ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089e6:	e065      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 80089f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fa:	4b40      	ldr	r3, [pc, #256]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2a:	e043      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008b18 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3e:	4b2f      	ldr	r3, [pc, #188]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6e:	e021      	b.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008b14 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a82:	4b1e      	ldr	r3, [pc, #120]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008b0c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ab2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008ab4:	4b11      	ldr	r3, [pc, #68]	; (8008afc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	0a5b      	lsrs	r3, r3, #9
 8008aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008abe:	3301      	adds	r3, #1
 8008ac0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	ee07 3a90 	vmov	s15, r3
 8008ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ad8:	ee17 3a90 	vmov	r3, s15
 8008adc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008ade:	e005      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61bb      	str	r3, [r7, #24]
    break;
 8008ae4:	e002      	b.n	8008aec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008ae6:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ae8:	61bb      	str	r3, [r7, #24]
    break;
 8008aea:	bf00      	nop
  }

  return sysclockfreq;
 8008aec:	69bb      	ldr	r3, [r7, #24]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3724      	adds	r7, #36	; 0x24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	58024400 	.word	0x58024400
 8008b00:	03d09000 	.word	0x03d09000
 8008b04:	003d0900 	.word	0x003d0900
 8008b08:	017d7840 	.word	0x017d7840
 8008b0c:	46000000 	.word	0x46000000
 8008b10:	4c742400 	.word	0x4c742400
 8008b14:	4a742400 	.word	0x4a742400
 8008b18:	4bbebc20 	.word	0x4bbebc20

08008b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b22:	f7ff fe81 	bl	8008828 <HAL_RCC_GetSysClockFreq>
 8008b26:	4602      	mov	r2, r0
 8008b28:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	0a1b      	lsrs	r3, r3, #8
 8008b2e:	f003 030f 	and.w	r3, r3, #15
 8008b32:	490f      	ldr	r1, [pc, #60]	; (8008b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b34:	5ccb      	ldrb	r3, [r1, r3]
 8008b36:	f003 031f 	and.w	r3, r3, #31
 8008b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <HAL_RCC_GetHCLKFreq+0x50>)
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b4a:	5cd3      	ldrb	r3, [r2, r3]
 8008b4c:	f003 031f 	and.w	r3, r3, #31
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	fa22 f303 	lsr.w	r3, r2, r3
 8008b56:	4a07      	ldr	r2, [pc, #28]	; (8008b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b5a:	4a07      	ldr	r2, [pc, #28]	; (8008b78 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b60:	4b04      	ldr	r3, [pc, #16]	; (8008b74 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b62:	681b      	ldr	r3, [r3, #0]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	58024400 	.word	0x58024400
 8008b70:	0800e12c 	.word	0x0800e12c
 8008b74:	24000004 	.word	0x24000004
 8008b78:	24000000 	.word	0x24000000

08008b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b80:	f7ff ffcc 	bl	8008b1c <HAL_RCC_GetHCLKFreq>
 8008b84:	4602      	mov	r2, r0
 8008b86:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	091b      	lsrs	r3, r3, #4
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	4904      	ldr	r1, [pc, #16]	; (8008ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b92:	5ccb      	ldrb	r3, [r1, r3]
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	58024400 	.word	0x58024400
 8008ba4:	0800e12c 	.word	0x0800e12c

08008ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bac:	f7ff ffb6 	bl	8008b1c <HAL_RCC_GetHCLKFreq>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	4b06      	ldr	r3, [pc, #24]	; (8008bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	4904      	ldr	r1, [pc, #16]	; (8008bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bbe:	5ccb      	ldrb	r3, [r1, r3]
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	0800e12c 	.word	0x0800e12c

08008bd4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bdc:	2300      	movs	r3, #0
 8008bde:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008be0:	2300      	movs	r3, #0
 8008be2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d03f      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bf8:	d02a      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008bfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bfe:	d824      	bhi.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c04:	d018      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c0a:	d81e      	bhi.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c14:	d007      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008c16:	e018      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c18:	4ba4      	ldr	r3, [pc, #656]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	4aa3      	ldr	r2, [pc, #652]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c24:	e015      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	2102      	movs	r1, #2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f001 f989 	bl	8009f44 <RCCEx_PLL2_Config>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c36:	e00c      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3324      	adds	r3, #36	; 0x24
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fa32 	bl	800a0a8 <RCCEx_PLL3_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c48:	e003      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c4e:	e000      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d109      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c58:	4b94      	ldr	r3, [pc, #592]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c64:	4991      	ldr	r1, [pc, #580]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	650b      	str	r3, [r1, #80]	; 0x50
 8008c6a:	e001      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d03d      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d826      	bhi.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008ca1 	.word	0x08008ca1
 8008c90:	08008caf 	.word	0x08008caf
 8008c94:	08008cc1 	.word	0x08008cc1
 8008c98:	08008cd9 	.word	0x08008cd9
 8008c9c:	08008cd9 	.word	0x08008cd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca0:	4b82      	ldr	r3, [pc, #520]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca4:	4a81      	ldr	r2, [pc, #516]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008caa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cac:	e015      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 f945 	bl	8009f44 <RCCEx_PLL2_Config>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cbe:	e00c      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3324      	adds	r3, #36	; 0x24
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 f9ee 	bl	800a0a8 <RCCEx_PLL3_Config>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cd0:	e003      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd6:	e000      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ce0:	4b72      	ldr	r3, [pc, #456]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce4:	f023 0207 	bic.w	r2, r3, #7
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cec:	496f      	ldr	r1, [pc, #444]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8008cf2:	e001      	b.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d051      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d0a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d0e:	d036      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d10:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d14:	d830      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d1a:	d032      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008d1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d20:	d82a      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d26:	d02e      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008d28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d2c:	d824      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d32:	d018      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d38:	d81e      	bhi.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d42:	d007      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008d44:	e018      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d46:	4b59      	ldr	r3, [pc, #356]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	4a58      	ldr	r2, [pc, #352]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d52:	e019      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 f8f2 	bl	8009f44 <RCCEx_PLL2_Config>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d64:	e010      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3324      	adds	r3, #36	; 0x24
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 f99b 	bl	800a0a8 <RCCEx_PLL3_Config>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d76:	e007      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d7c:	e004      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d7e:	bf00      	nop
 8008d80:	e002      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d82:	bf00      	nop
 8008d84:	e000      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10a      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d8e:	4b47      	ldr	r3, [pc, #284]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d9c:	4943      	ldr	r1, [pc, #268]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	658b      	str	r3, [r1, #88]	; 0x58
 8008da2:	e001      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da4:	7dfb      	ldrb	r3, [r7, #23]
 8008da6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d051      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008dbe:	d036      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008dc0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008dc4:	d830      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dca:	d032      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dd0:	d82a      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008dd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008dd6:	d02e      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ddc:	d824      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008de2:	d018      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008de4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008de8:	d81e      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008df2:	d007      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008df4:	e018      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df6:	4b2d      	ldr	r3, [pc, #180]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfa:	4a2c      	ldr	r2, [pc, #176]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e02:	e019      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3304      	adds	r3, #4
 8008e08:	2100      	movs	r1, #0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 f89a 	bl	8009f44 <RCCEx_PLL2_Config>
 8008e10:	4603      	mov	r3, r0
 8008e12:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e14:	e010      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3324      	adds	r3, #36	; 0x24
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f001 f943 	bl	800a0a8 <RCCEx_PLL3_Config>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e26:	e007      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e2c:	e004      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e002      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e3e:	4b1b      	ldr	r3, [pc, #108]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e42:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e4c:	4917      	ldr	r1, [pc, #92]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	658b      	str	r3, [r1, #88]	; 0x58
 8008e52:	e001      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d035      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e68:	2b30      	cmp	r3, #48	; 0x30
 8008e6a:	d01c      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e6c:	2b30      	cmp	r3, #48	; 0x30
 8008e6e:	d817      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	d00c      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008e74:	2b20      	cmp	r3, #32
 8008e76:	d813      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d019      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d10f      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e80:	4b0a      	ldr	r3, [pc, #40]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	4a09      	ldr	r2, [pc, #36]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008e8c:	e011      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3304      	adds	r3, #4
 8008e92:	2102      	movs	r1, #2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 f855 	bl	8009f44 <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008e9e:	e008      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea4:	e005      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008ea6:	bf00      	nop
 8008ea8:	e003      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008eaa:	bf00      	nop
 8008eac:	58024400 	.word	0x58024400
      break;
 8008eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d109      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008eb8:	4ba3      	ldr	r3, [pc, #652]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec4:	49a0      	ldr	r1, [pc, #640]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008eca:	e001      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d047      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ee4:	d030      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008eea:	d82a      	bhi.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008eec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ef0:	d02c      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ef6:	d824      	bhi.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008efc:	d018      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f02:	d81e      	bhi.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0c:	d007      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008f0e:	e018      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f10:	4b8d      	ldr	r3, [pc, #564]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	4a8c      	ldr	r2, [pc, #560]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f1c:	e017      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3304      	adds	r3, #4
 8008f22:	2100      	movs	r1, #0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 f80d 	bl	8009f44 <RCCEx_PLL2_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f2e:	e00e      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3324      	adds	r3, #36	; 0x24
 8008f34:	2100      	movs	r1, #0
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 f8b6 	bl	800a0a8 <RCCEx_PLL3_Config>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f40:	e005      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	75fb      	strb	r3, [r7, #23]
      break;
 8008f46:	e002      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f48:	bf00      	nop
 8008f4a:	e000      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d109      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f54:	4b7c      	ldr	r3, [pc, #496]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f58:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f60:	4979      	ldr	r1, [pc, #484]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	650b      	str	r3, [r1, #80]	; 0x50
 8008f66:	e001      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d049      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f80:	d02e      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f86:	d828      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f8c:	d02a      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008f8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f92:	d822      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f98:	d026      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008f9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f9e:	d81c      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fa4:	d010      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008faa:	d816      	bhi.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01d      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fb4:	d111      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	2101      	movs	r1, #1
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f000 ffc1 	bl	8009f44 <RCCEx_PLL2_Config>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008fc6:	e012      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3324      	adds	r3, #36	; 0x24
 8008fcc:	2101      	movs	r1, #1
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 f86a 	bl	800a0a8 <RCCEx_PLL3_Config>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008fd8:	e009      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008fde:	e006      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e004      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fe4:	bf00      	nop
 8008fe6:	e002      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fe8:	bf00      	nop
 8008fea:	e000      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d109      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ff4:	4b54      	ldr	r3, [pc, #336]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009000:	4951      	ldr	r1, [pc, #324]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009002:	4313      	orrs	r3, r2
 8009004:	650b      	str	r3, [r1, #80]	; 0x50
 8009006:	e001      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d04b      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800901e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009022:	d02e      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009028:	d828      	bhi.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800902a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902e:	d02a      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009034:	d822      	bhi.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009036:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800903a:	d026      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800903c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009040:	d81c      	bhi.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009046:	d010      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800904c:	d816      	bhi.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01d      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009056:	d111      	bne.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	2101      	movs	r1, #1
 800905e:	4618      	mov	r0, r3
 8009060:	f000 ff70 	bl	8009f44 <RCCEx_PLL2_Config>
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009068:	e012      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3324      	adds	r3, #36	; 0x24
 800906e:	2101      	movs	r1, #1
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f819 	bl	800a0a8 <RCCEx_PLL3_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800907a:	e009      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]
      break;
 8009080:	e006      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009082:	bf00      	nop
 8009084:	e004      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009086:	bf00      	nop
 8009088:	e002      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800908e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009096:	4b2c      	ldr	r3, [pc, #176]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090a4:	4928      	ldr	r1, [pc, #160]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	658b      	str	r3, [r1, #88]	; 0x58
 80090aa:	e001      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02f      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c4:	d00e      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80090c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ca:	d814      	bhi.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d015      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 80090d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d4:	d10f      	bne.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d6:	4b1c      	ldr	r3, [pc, #112]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	4a1b      	ldr	r2, [pc, #108]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80090e2:	e00c      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	2101      	movs	r1, #1
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 ff2a 	bl	8009f44 <RCCEx_PLL2_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80090f4:	e003      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	75fb      	strb	r3, [r7, #23]
      break;
 80090fa:	e000      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80090fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d109      	bne.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009104:	4b10      	ldr	r3, [pc, #64]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009108:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009110:	490d      	ldr	r1, [pc, #52]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009112:	4313      	orrs	r3, r2
 8009114:	650b      	str	r3, [r1, #80]	; 0x50
 8009116:	e001      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d034      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912c:	2b03      	cmp	r3, #3
 800912e:	d81d      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009130:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	08009173 	.word	0x08009173
 800913c:	0800914d 	.word	0x0800914d
 8009140:	0800915b 	.word	0x0800915b
 8009144:	08009173 	.word	0x08009173
 8009148:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800914c:	4bb1      	ldr	r3, [pc, #708]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	4ab0      	ldr	r2, [pc, #704]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009158:	e00c      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3304      	adds	r3, #4
 800915e:	2102      	movs	r1, #2
 8009160:	4618      	mov	r0, r3
 8009162:	f000 feef 	bl	8009f44 <RCCEx_PLL2_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800916a:	e003      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	75fb      	strb	r3, [r7, #23]
      break;
 8009170:	e000      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d109      	bne.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800917a:	4ba6      	ldr	r3, [pc, #664]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800917c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800917e:	f023 0203 	bic.w	r2, r3, #3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009186:	49a3      	ldr	r1, [pc, #652]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009188:	4313      	orrs	r3, r2
 800918a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800918c:	e001      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 8086 	beq.w	80092ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091a0:	4b9d      	ldr	r3, [pc, #628]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a9c      	ldr	r2, [pc, #624]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80091a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091ac:	f7fb fc86 	bl	8004abc <HAL_GetTick>
 80091b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091b2:	e009      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091b4:	f7fb fc82 	bl	8004abc <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	2b64      	cmp	r3, #100	; 0x64
 80091c0:	d902      	bls.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	75fb      	strb	r3, [r7, #23]
        break;
 80091c6:	e005      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091c8:	4b93      	ldr	r3, [pc, #588]	; (8009418 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d0ef      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d166      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80091da:	4b8e      	ldr	r3, [pc, #568]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091e4:	4053      	eors	r3, r2
 80091e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d013      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ee:	4b89      	ldr	r3, [pc, #548]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091f8:	4b86      	ldr	r3, [pc, #536]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fc:	4a85      	ldr	r2, [pc, #532]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009202:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009204:	4b83      	ldr	r3, [pc, #524]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009208:	4a82      	ldr	r2, [pc, #520]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800920a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800920e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009210:	4a80      	ldr	r2, [pc, #512]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800921c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009220:	d115      	bne.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009222:	f7fb fc4b 	bl	8004abc <HAL_GetTick>
 8009226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009228:	e00b      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800922a:	f7fb fc47 	bl	8004abc <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	f241 3288 	movw	r2, #5000	; 0x1388
 8009238:	4293      	cmp	r3, r2
 800923a:	d902      	bls.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	75fb      	strb	r3, [r7, #23]
            break;
 8009240:	e005      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009242:	4b74      	ldr	r3, [pc, #464]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0ed      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d126      	bne.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800925a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800925e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009262:	d10d      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009264:	4b6b      	ldr	r3, [pc, #428]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009272:	0919      	lsrs	r1, r3, #4
 8009274:	4b69      	ldr	r3, [pc, #420]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009276:	400b      	ands	r3, r1
 8009278:	4966      	ldr	r1, [pc, #408]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800927a:	4313      	orrs	r3, r2
 800927c:	610b      	str	r3, [r1, #16]
 800927e:	e005      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009280:	4b64      	ldr	r3, [pc, #400]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	4a63      	ldr	r2, [pc, #396]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009286:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800928a:	6113      	str	r3, [r2, #16]
 800928c:	4b61      	ldr	r3, [pc, #388]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800928e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800929a:	495e      	ldr	r1, [pc, #376]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800929c:	4313      	orrs	r3, r2
 800929e:	670b      	str	r3, [r1, #112]	; 0x70
 80092a0:	e004      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	75bb      	strb	r3, [r7, #22]
 80092a6:	e001      	b.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
 80092aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d07e      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092bc:	2b28      	cmp	r3, #40	; 0x28
 80092be:	d867      	bhi.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80092c0:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80092c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c6:	bf00      	nop
 80092c8:	08009397 	.word	0x08009397
 80092cc:	08009391 	.word	0x08009391
 80092d0:	08009391 	.word	0x08009391
 80092d4:	08009391 	.word	0x08009391
 80092d8:	08009391 	.word	0x08009391
 80092dc:	08009391 	.word	0x08009391
 80092e0:	08009391 	.word	0x08009391
 80092e4:	08009391 	.word	0x08009391
 80092e8:	0800936d 	.word	0x0800936d
 80092ec:	08009391 	.word	0x08009391
 80092f0:	08009391 	.word	0x08009391
 80092f4:	08009391 	.word	0x08009391
 80092f8:	08009391 	.word	0x08009391
 80092fc:	08009391 	.word	0x08009391
 8009300:	08009391 	.word	0x08009391
 8009304:	08009391 	.word	0x08009391
 8009308:	0800937f 	.word	0x0800937f
 800930c:	08009391 	.word	0x08009391
 8009310:	08009391 	.word	0x08009391
 8009314:	08009391 	.word	0x08009391
 8009318:	08009391 	.word	0x08009391
 800931c:	08009391 	.word	0x08009391
 8009320:	08009391 	.word	0x08009391
 8009324:	08009391 	.word	0x08009391
 8009328:	08009397 	.word	0x08009397
 800932c:	08009391 	.word	0x08009391
 8009330:	08009391 	.word	0x08009391
 8009334:	08009391 	.word	0x08009391
 8009338:	08009391 	.word	0x08009391
 800933c:	08009391 	.word	0x08009391
 8009340:	08009391 	.word	0x08009391
 8009344:	08009391 	.word	0x08009391
 8009348:	08009397 	.word	0x08009397
 800934c:	08009391 	.word	0x08009391
 8009350:	08009391 	.word	0x08009391
 8009354:	08009391 	.word	0x08009391
 8009358:	08009391 	.word	0x08009391
 800935c:	08009391 	.word	0x08009391
 8009360:	08009391 	.word	0x08009391
 8009364:	08009391 	.word	0x08009391
 8009368:	08009397 	.word	0x08009397
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3304      	adds	r3, #4
 8009370:	2101      	movs	r1, #1
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fde6 	bl	8009f44 <RCCEx_PLL2_Config>
 8009378:	4603      	mov	r3, r0
 800937a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800937c:	e00c      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3324      	adds	r3, #36	; 0x24
 8009382:	2101      	movs	r1, #1
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fe8f 	bl	800a0a8 <RCCEx_PLL3_Config>
 800938a:	4603      	mov	r3, r0
 800938c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800938e:	e003      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	75fb      	strb	r3, [r7, #23]
      break;
 8009394:	e000      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800939e:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093aa:	491a      	ldr	r1, [pc, #104]	; (8009414 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	654b      	str	r3, [r1, #84]	; 0x54
 80093b0:	e001      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d03e      	beq.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c6:	2b05      	cmp	r3, #5
 80093c8:	d820      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80093ca:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80093cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d0:	08009421 	.word	0x08009421
 80093d4:	080093e9 	.word	0x080093e9
 80093d8:	080093fb 	.word	0x080093fb
 80093dc:	08009421 	.word	0x08009421
 80093e0:	08009421 	.word	0x08009421
 80093e4:	08009421 	.word	0x08009421
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3304      	adds	r3, #4
 80093ec:	2101      	movs	r1, #1
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fda8 	bl	8009f44 <RCCEx_PLL2_Config>
 80093f4:	4603      	mov	r3, r0
 80093f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093f8:	e013      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3324      	adds	r3, #36	; 0x24
 80093fe:	2101      	movs	r1, #1
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fe51 	bl	800a0a8 <RCCEx_PLL3_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800940a:	e00a      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	75fb      	strb	r3, [r7, #23]
      break;
 8009410:	e007      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009412:	bf00      	nop
 8009414:	58024400 	.word	0x58024400
 8009418:	58024800 	.word	0x58024800
 800941c:	00ffffcf 	.word	0x00ffffcf
      break;
 8009420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009428:	4b9f      	ldr	r3, [pc, #636]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800942a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942c:	f023 0207 	bic.w	r2, r3, #7
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009434:	499c      	ldr	r1, [pc, #624]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009436:	4313      	orrs	r3, r2
 8009438:	654b      	str	r3, [r1, #84]	; 0x54
 800943a:	e001      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	2b00      	cmp	r3, #0
 800944a:	d039      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009452:	2b05      	cmp	r3, #5
 8009454:	d820      	bhi.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009456:	a201      	add	r2, pc, #4	; (adr r2, 800945c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945c:	0800949f 	.word	0x0800949f
 8009460:	08009475 	.word	0x08009475
 8009464:	08009487 	.word	0x08009487
 8009468:	0800949f 	.word	0x0800949f
 800946c:	0800949f 	.word	0x0800949f
 8009470:	0800949f 	.word	0x0800949f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3304      	adds	r3, #4
 8009478:	2101      	movs	r1, #1
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fd62 	bl	8009f44 <RCCEx_PLL2_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009484:	e00c      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3324      	adds	r3, #36	; 0x24
 800948a:	2101      	movs	r1, #1
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fe0b 	bl	800a0a8 <RCCEx_PLL3_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009496:	e003      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
      break;
 800949c:	e000      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800949e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094a6:	4b80      	ldr	r3, [pc, #512]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094aa:	f023 0207 	bic.w	r2, r3, #7
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b4:	497c      	ldr	r1, [pc, #496]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	658b      	str	r3, [r1, #88]	; 0x58
 80094ba:	e001      	b.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d04b      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094d6:	d02e      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80094d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094dc:	d828      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80094de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e2:	d02a      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80094e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e8:	d822      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80094ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094ee:	d026      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80094f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094f4:	d81c      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80094f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fa:	d010      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80094fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009500:	d816      	bhi.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d01d      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009506:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800950a:	d111      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3304      	adds	r3, #4
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fd16 	bl	8009f44 <RCCEx_PLL2_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800951c:	e012      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3324      	adds	r3, #36	; 0x24
 8009522:	2102      	movs	r1, #2
 8009524:	4618      	mov	r0, r3
 8009526:	f000 fdbf 	bl	800a0a8 <RCCEx_PLL3_Config>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800952e:	e009      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	75fb      	strb	r3, [r7, #23]
      break;
 8009534:	e006      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009536:	bf00      	nop
 8009538:	e004      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800953a:	bf00      	nop
 800953c:	e002      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800953e:	bf00      	nop
 8009540:	e000      	b.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800954a:	4b57      	ldr	r3, [pc, #348]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800954c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009558:	4953      	ldr	r1, [pc, #332]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800955a:	4313      	orrs	r3, r2
 800955c:	654b      	str	r3, [r1, #84]	; 0x54
 800955e:	e001      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	d04b      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009576:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800957a:	d02e      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800957c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009580:	d828      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009586:	d02a      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800958c:	d822      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800958e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009592:	d026      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009594:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009598:	d81c      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800959a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800959e:	d010      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80095a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095a4:	d816      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d01d      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80095aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ae:	d111      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3304      	adds	r3, #4
 80095b4:	2100      	movs	r1, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 fcc4 	bl	8009f44 <RCCEx_PLL2_Config>
 80095bc:	4603      	mov	r3, r0
 80095be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80095c0:	e012      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3324      	adds	r3, #36	; 0x24
 80095c6:	2102      	movs	r1, #2
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fd6d 	bl	800a0a8 <RCCEx_PLL3_Config>
 80095ce:	4603      	mov	r3, r0
 80095d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80095d2:	e009      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	75fb      	strb	r3, [r7, #23]
      break;
 80095d8:	e006      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80095da:	bf00      	nop
 80095dc:	e004      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80095de:	bf00      	nop
 80095e0:	e002      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80095e2:	bf00      	nop
 80095e4:	e000      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80095e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095ee:	4b2e      	ldr	r3, [pc, #184]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095fc:	492a      	ldr	r1, [pc, #168]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	658b      	str	r3, [r1, #88]	; 0x58
 8009602:	e001      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009610:	2b00      	cmp	r3, #0
 8009612:	d04d      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800961a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800961e:	d02e      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009620:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009624:	d828      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800962a:	d02a      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800962c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009630:	d822      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009632:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009636:	d026      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009638:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800963c:	d81c      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800963e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009642:	d010      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009648:	d816      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d01d      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800964e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009652:	d111      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3304      	adds	r3, #4
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fc72 	bl	8009f44 <RCCEx_PLL2_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009664:	e012      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3324      	adds	r3, #36	; 0x24
 800966a:	2102      	movs	r1, #2
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fd1b 	bl	800a0a8 <RCCEx_PLL3_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009676:	e009      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	75fb      	strb	r3, [r7, #23]
      break;
 800967c:	e006      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800967e:	bf00      	nop
 8009680:	e004      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009682:	bf00      	nop
 8009684:	e002      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800968a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10c      	bne.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009692:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096a0:	4901      	ldr	r1, [pc, #4]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	658b      	str	r3, [r1, #88]	; 0x58
 80096a6:	e003      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80096a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
 80096ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0308 	and.w	r3, r3, #8
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d018      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c4:	d10a      	bne.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3324      	adds	r3, #36	; 0x24
 80096ca:	2102      	movs	r1, #2
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 fceb 	bl	800a0a8 <RCCEx_PLL3_Config>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80096dc:	4b8a      	ldr	r3, [pc, #552]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e8:	4987      	ldr	r1, [pc, #540]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d01a      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009704:	d10a      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3324      	adds	r3, #36	; 0x24
 800970a:	2102      	movs	r1, #2
 800970c:	4618      	mov	r0, r3
 800970e:	f000 fccb 	bl	800a0a8 <RCCEx_PLL3_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800971c:	4b7a      	ldr	r3, [pc, #488]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800971e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800972a:	4977      	ldr	r1, [pc, #476]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800972c:	4313      	orrs	r3, r2
 800972e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d034      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009746:	d01d      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800974c:	d817      	bhi.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009756:	d009      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009758:	e011      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	3304      	adds	r3, #4
 800975e:	2100      	movs	r1, #0
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fbef 	bl	8009f44 <RCCEx_PLL2_Config>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800976a:	e00c      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3324      	adds	r3, #36	; 0x24
 8009770:	2102      	movs	r1, #2
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fc98 	bl	800a0a8 <RCCEx_PLL3_Config>
 8009778:	4603      	mov	r3, r0
 800977a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800977c:	e003      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	75fb      	strb	r3, [r7, #23]
      break;
 8009782:	e000      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10a      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800978c:	4b5e      	ldr	r3, [pc, #376]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800978e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800979a:	495b      	ldr	r1, [pc, #364]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800979c:	4313      	orrs	r3, r2
 800979e:	658b      	str	r3, [r1, #88]	; 0x58
 80097a0:	e001      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d033      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097bc:	d01c      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80097be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097c2:	d816      	bhi.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80097c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097c8:	d003      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80097ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ce:	d007      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80097d0:	e00f      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d2:	4b4d      	ldr	r3, [pc, #308]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	4a4c      	ldr	r2, [pc, #304]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80097de:	e00c      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3324      	adds	r3, #36	; 0x24
 80097e4:	2101      	movs	r1, #1
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fc5e 	bl	800a0a8 <RCCEx_PLL3_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80097f0:	e003      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	75fb      	strb	r3, [r7, #23]
      break;
 80097f6:	e000      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80097f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097fa:	7dfb      	ldrb	r3, [r7, #23]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009800:	4b41      	ldr	r3, [pc, #260]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800980e:	493e      	ldr	r1, [pc, #248]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009810:	4313      	orrs	r3, r2
 8009812:	654b      	str	r3, [r1, #84]	; 0x54
 8009814:	e001      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d029      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800982e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009832:	d007      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009834:	e00f      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009836:	4b34      	ldr	r3, [pc, #208]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983a:	4a33      	ldr	r2, [pc, #204]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800983c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009840:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009842:	e00b      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3304      	adds	r3, #4
 8009848:	2102      	movs	r1, #2
 800984a:	4618      	mov	r0, r3
 800984c:	f000 fb7a 	bl	8009f44 <RCCEx_PLL2_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009854:	e002      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	75fb      	strb	r3, [r7, #23]
      break;
 800985a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009862:	4b29      	ldr	r3, [pc, #164]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009866:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986e:	4926      	ldr	r1, [pc, #152]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009870:	4313      	orrs	r3, r2
 8009872:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009874:	e001      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009876:	7dfb      	ldrb	r3, [r7, #23]
 8009878:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3324      	adds	r3, #36	; 0x24
 800988a:	2102      	movs	r1, #2
 800988c:	4618      	mov	r0, r3
 800988e:	f000 fc0b 	bl	800a0a8 <RCCEx_PLL3_Config>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d033      	beq.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098b0:	d017      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80098b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098b6:	d811      	bhi.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80098b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098bc:	d013      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 80098be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c2:	d80b      	bhi.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d010      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80098c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098cc:	d106      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ce:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	4a0d      	ldr	r2, [pc, #52]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80098da:	e007      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]
      break;
 80098e0:	e004      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80098e2:	bf00      	nop
 80098e4:	e002      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80098e6:	bf00      	nop
 80098e8:	e000      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80098ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10c      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098fe:	4902      	ldr	r1, [pc, #8]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009900:	4313      	orrs	r3, r2
 8009902:	654b      	str	r3, [r1, #84]	; 0x54
 8009904:	e004      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009906:	bf00      	nop
 8009908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d008      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800991c:	4b29      	ldr	r3, [pc, #164]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800991e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009920:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009928:	4926      	ldr	r1, [pc, #152]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800992a:	4313      	orrs	r3, r2
 800992c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d008      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800993a:	4b22      	ldr	r3, [pc, #136]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800993c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009946:	491f      	ldr	r1, [pc, #124]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009948:	4313      	orrs	r3, r2
 800994a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00d      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009958:	4b1a      	ldr	r3, [pc, #104]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	4a19      	ldr	r2, [pc, #100]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800995e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009962:	6113      	str	r3, [r2, #16]
 8009964:	4b17      	ldr	r3, [pc, #92]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009966:	691a      	ldr	r2, [r3, #16]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800996e:	4915      	ldr	r1, [pc, #84]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009970:	4313      	orrs	r3, r2
 8009972:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	da08      	bge.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800997c:	4b11      	ldr	r3, [pc, #68]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800997e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009980:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009988:	490e      	ldr	r1, [pc, #56]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800998a:	4313      	orrs	r3, r2
 800998c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d009      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800999a:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800999c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a8:	4906      	ldr	r1, [pc, #24]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80099ae:	7dbb      	ldrb	r3, [r7, #22]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	e000      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	58024400 	.word	0x58024400

080099c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80099cc:	f7ff f8a6 	bl	8008b1c <HAL_RCC_GetHCLKFreq>
 80099d0:	4602      	mov	r2, r0
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	091b      	lsrs	r3, r3, #4
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	4904      	ldr	r1, [pc, #16]	; (80099f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099de:	5ccb      	ldrb	r3, [r1, r3]
 80099e0:	f003 031f 	and.w	r3, r3, #31
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	58024400 	.word	0x58024400
 80099f0:	0800e12c 	.word	0x0800e12c

080099f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b089      	sub	sp, #36	; 0x24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099fc:	4ba1      	ldr	r3, [pc, #644]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a00:	f003 0303 	and.w	r3, r3, #3
 8009a04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a06:	4b9f      	ldr	r3, [pc, #636]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	0b1b      	lsrs	r3, r3, #12
 8009a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a12:	4b9c      	ldr	r3, [pc, #624]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a16:	091b      	lsrs	r3, r3, #4
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a1e:	4b99      	ldr	r3, [pc, #612]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a22:	08db      	lsrs	r3, r3, #3
 8009a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	fb02 f303 	mul.w	r3, r2, r3
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 8111 	beq.w	8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	f000 8083 	beq.w	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	f200 80a1 	bhi.w	8009b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d056      	beq.n	8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a5e:	e099      	b.n	8009b94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a60:	4b88      	ldr	r3, [pc, #544]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d02d      	beq.n	8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a6c:	4b85      	ldr	r3, [pc, #532]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	08db      	lsrs	r3, r3, #3
 8009a72:	f003 0303 	and.w	r3, r3, #3
 8009a76:	4a84      	ldr	r2, [pc, #528]	; (8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a96:	4b7b      	ldr	r3, [pc, #492]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ac6:	e087      	b.n	8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ada:	4b6a      	ldr	r3, [pc, #424]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b0a:	e065      	b.n	8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b1e:	4b59      	ldr	r3, [pc, #356]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b4e:	e043      	b.n	8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	ee07 3a90 	vmov	s15, r3
 8009b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b62:	4b48      	ldr	r3, [pc, #288]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b92:	e021      	b.n	8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	ee07 3a90 	vmov	s15, r3
 8009b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba6:	4b37      	ldr	r3, [pc, #220]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009bd8:	4b2a      	ldr	r3, [pc, #168]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bdc:	0a5b      	lsrs	r3, r3, #9
 8009bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bfe:	ee17 2a90 	vmov	r2, s15
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c06:	4b1f      	ldr	r3, [pc, #124]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0a:	0c1b      	lsrs	r3, r3, #16
 8009c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c2c:	ee17 2a90 	vmov	r2, s15
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c34:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c38:	0e1b      	lsrs	r3, r3, #24
 8009c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c5a:	ee17 2a90 	vmov	r2, s15
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c62:	e008      	b.n	8009c76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	609a      	str	r2, [r3, #8]
}
 8009c76:	bf00      	nop
 8009c78:	3724      	adds	r7, #36	; 0x24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	58024400 	.word	0x58024400
 8009c88:	03d09000 	.word	0x03d09000
 8009c8c:	46000000 	.word	0x46000000
 8009c90:	4c742400 	.word	0x4c742400
 8009c94:	4a742400 	.word	0x4a742400
 8009c98:	4bbebc20 	.word	0x4bbebc20

08009c9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b089      	sub	sp, #36	; 0x24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ca4:	4ba1      	ldr	r3, [pc, #644]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca8:	f003 0303 	and.w	r3, r3, #3
 8009cac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009cae:	4b9f      	ldr	r3, [pc, #636]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	0d1b      	lsrs	r3, r3, #20
 8009cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009cba:	4b9c      	ldr	r3, [pc, #624]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	0a1b      	lsrs	r3, r3, #8
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009cc6:	4b99      	ldr	r3, [pc, #612]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cca:	08db      	lsrs	r3, r3, #3
 8009ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8111 	beq.w	8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	f000 8083 	beq.w	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	f200 80a1 	bhi.w	8009e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d056      	beq.n	8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d06:	e099      	b.n	8009e3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d08:	4b88      	ldr	r3, [pc, #544]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d02d      	beq.n	8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d14:	4b85      	ldr	r3, [pc, #532]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	08db      	lsrs	r3, r3, #3
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	4a84      	ldr	r2, [pc, #528]	; (8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d20:	fa22 f303 	lsr.w	r3, r2, r3
 8009d24:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3e:	4b7b      	ldr	r3, [pc, #492]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d6e:	e087      	b.n	8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b6a      	ldr	r3, [pc, #424]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009db2:	e065      	b.n	8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b59      	ldr	r3, [pc, #356]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009df6:	e043      	b.n	8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	ee07 3a90 	vmov	s15, r3
 8009dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0a:	4b48      	ldr	r3, [pc, #288]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e3a:	e021      	b.n	8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	ee07 3a90 	vmov	s15, r3
 8009e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e4e:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e80:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	0a5b      	lsrs	r3, r3, #9
 8009e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e8a:	ee07 3a90 	vmov	s15, r3
 8009e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ea6:	ee17 2a90 	vmov	r2, s15
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009eae:	4b1f      	ldr	r3, [pc, #124]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	0c1b      	lsrs	r3, r3, #16
 8009eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ec8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ed4:	ee17 2a90 	vmov	r2, s15
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009edc:	4b13      	ldr	r3, [pc, #76]	; (8009f2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee0:	0e1b      	lsrs	r3, r3, #24
 8009ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ee6:	ee07 3a90 	vmov	s15, r3
 8009eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f02:	ee17 2a90 	vmov	r2, s15
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f0a:	e008      	b.n	8009f1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	609a      	str	r2, [r3, #8]
}
 8009f1e:	bf00      	nop
 8009f20:	3724      	adds	r7, #36	; 0x24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	58024400 	.word	0x58024400
 8009f30:	03d09000 	.word	0x03d09000
 8009f34:	46000000 	.word	0x46000000
 8009f38:	4c742400 	.word	0x4c742400
 8009f3c:	4a742400 	.word	0x4a742400
 8009f40:	4bbebc20 	.word	0x4bbebc20

08009f44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f52:	4b53      	ldr	r3, [pc, #332]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	f003 0303 	and.w	r3, r3, #3
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	d101      	bne.n	8009f62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e099      	b.n	800a096 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f62:	4b4f      	ldr	r3, [pc, #316]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a4e      	ldr	r2, [pc, #312]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f6e:	f7fa fda5 	bl	8004abc <HAL_GetTick>
 8009f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f74:	e008      	b.n	8009f88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f76:	f7fa fda1 	bl	8004abc <HAL_GetTick>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d901      	bls.n	8009f88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f84:	2303      	movs	r3, #3
 8009f86:	e086      	b.n	800a096 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f88:	4b45      	ldr	r3, [pc, #276]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1f0      	bne.n	8009f76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f94:	4b42      	ldr	r3, [pc, #264]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	031b      	lsls	r3, r3, #12
 8009fa2:	493f      	ldr	r1, [pc, #252]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	628b      	str	r3, [r1, #40]	; 0x28
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	025b      	lsls	r3, r3, #9
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	041b      	lsls	r3, r3, #16
 8009fc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	061b      	lsls	r3, r3, #24
 8009fd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fd8:	4931      	ldr	r1, [pc, #196]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009fde:	4b30      	ldr	r3, [pc, #192]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	492d      	ldr	r1, [pc, #180]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	f023 0220 	bic.w	r2, r3, #32
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	4928      	ldr	r1, [pc, #160]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a002:	4b27      	ldr	r3, [pc, #156]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	4a26      	ldr	r2, [pc, #152]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a008:	f023 0310 	bic.w	r3, r3, #16
 800a00c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a00e:	4b24      	ldr	r3, [pc, #144]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a012:	4b24      	ldr	r3, [pc, #144]	; (800a0a4 <RCCEx_PLL2_Config+0x160>)
 800a014:	4013      	ands	r3, r2
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	69d2      	ldr	r2, [r2, #28]
 800a01a:	00d2      	lsls	r2, r2, #3
 800a01c:	4920      	ldr	r1, [pc, #128]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a022:	4b1f      	ldr	r3, [pc, #124]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a1e      	ldr	r2, [pc, #120]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a028:	f043 0310 	orr.w	r3, r3, #16
 800a02c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d106      	bne.n	800a042 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a034:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	4a19      	ldr	r2, [pc, #100]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a03a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a03e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a040:	e00f      	b.n	800a062 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d106      	bne.n	800a056 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a048:	4b15      	ldr	r3, [pc, #84]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04c:	4a14      	ldr	r2, [pc, #80]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a04e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a052:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a054:	e005      	b.n	800a062 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	4a11      	ldr	r2, [pc, #68]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a05c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a062:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a0e      	ldr	r2, [pc, #56]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a06c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a06e:	f7fa fd25 	bl	8004abc <HAL_GetTick>
 800a072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a074:	e008      	b.n	800a088 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a076:	f7fa fd21 	bl	8004abc <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	2b02      	cmp	r3, #2
 800a082:	d901      	bls.n	800a088 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e006      	b.n	800a096 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <RCCEx_PLL2_Config+0x15c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0f0      	beq.n	800a076 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	58024400 	.word	0x58024400
 800a0a4:	ffff0007 	.word	0xffff0007

0800a0a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0b6:	4b53      	ldr	r3, [pc, #332]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ba:	f003 0303 	and.w	r3, r3, #3
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d101      	bne.n	800a0c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e099      	b.n	800a1fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a0c6:	4b4f      	ldr	r3, [pc, #316]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a4e      	ldr	r2, [pc, #312]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a0cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0d2:	f7fa fcf3 	bl	8004abc <HAL_GetTick>
 800a0d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0d8:	e008      	b.n	800a0ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a0da:	f7fa fcef 	bl	8004abc <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d901      	bls.n	800a0ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e086      	b.n	800a1fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0ec:	4b45      	ldr	r3, [pc, #276]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f0      	bne.n	800a0da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a0f8:	4b42      	ldr	r3, [pc, #264]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	051b      	lsls	r3, r3, #20
 800a106:	493f      	ldr	r1, [pc, #252]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	628b      	str	r3, [r1, #40]	; 0x28
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	3b01      	subs	r3, #1
 800a112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	025b      	lsls	r3, r3, #9
 800a11e:	b29b      	uxth	r3, r3
 800a120:	431a      	orrs	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	3b01      	subs	r3, #1
 800a128:	041b      	lsls	r3, r3, #16
 800a12a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a12e:	431a      	orrs	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	3b01      	subs	r3, #1
 800a136:	061b      	lsls	r3, r3, #24
 800a138:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a13c:	4931      	ldr	r1, [pc, #196]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a142:	4b30      	ldr	r3, [pc, #192]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	492d      	ldr	r1, [pc, #180]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a150:	4313      	orrs	r3, r2
 800a152:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a154:	4b2b      	ldr	r3, [pc, #172]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a158:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	4928      	ldr	r1, [pc, #160]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a162:	4313      	orrs	r3, r2
 800a164:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a166:	4b27      	ldr	r3, [pc, #156]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16a:	4a26      	ldr	r2, [pc, #152]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a16c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a172:	4b24      	ldr	r3, [pc, #144]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a176:	4b24      	ldr	r3, [pc, #144]	; (800a208 <RCCEx_PLL3_Config+0x160>)
 800a178:	4013      	ands	r3, r2
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	69d2      	ldr	r2, [r2, #28]
 800a17e:	00d2      	lsls	r2, r2, #3
 800a180:	4920      	ldr	r1, [pc, #128]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a182:	4313      	orrs	r3, r2
 800a184:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a186:	4b1f      	ldr	r3, [pc, #124]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	4a1e      	ldr	r2, [pc, #120]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a18c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a198:	4b1a      	ldr	r3, [pc, #104]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	4a19      	ldr	r2, [pc, #100]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a19e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1a4:	e00f      	b.n	800a1c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d106      	bne.n	800a1ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1ac:	4b15      	ldr	r3, [pc, #84]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	4a14      	ldr	r2, [pc, #80]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a1b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1b8:	e005      	b.n	800a1c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	4a11      	ldr	r2, [pc, #68]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a1c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a0e      	ldr	r2, [pc, #56]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a1cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d2:	f7fa fc73 	bl	8004abc <HAL_GetTick>
 800a1d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1d8:	e008      	b.n	800a1ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a1da:	f7fa fc6f 	bl	8004abc <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d901      	bls.n	800a1ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e006      	b.n	800a1fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <RCCEx_PLL3_Config+0x15c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d0f0      	beq.n	800a1da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	58024400 	.word	0x58024400
 800a208:	ffff0007 	.word	0xffff0007

0800a20c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e049      	b.n	800a2b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7f9 ffb0 	bl	8004198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3304      	adds	r3, #4
 800a248:	4619      	mov	r1, r3
 800a24a:	4610      	mov	r0, r2
 800a24c:	f000 fe0c 	bl	800ae68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d001      	beq.n	800a2d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e05e      	b.n	800a392 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0201 	orr.w	r2, r2, #1
 800a2ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a2b      	ldr	r2, [pc, #172]	; (800a3a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d02c      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fe:	d027      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a27      	ldr	r2, [pc, #156]	; (800a3a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d022      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a26      	ldr	r2, [pc, #152]	; (800a3a8 <HAL_TIM_Base_Start_IT+0xec>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d01d      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a24      	ldr	r2, [pc, #144]	; (800a3ac <HAL_TIM_Base_Start_IT+0xf0>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d018      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a23      	ldr	r2, [pc, #140]	; (800a3b0 <HAL_TIM_Base_Start_IT+0xf4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d013      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a21      	ldr	r2, [pc, #132]	; (800a3b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00e      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a20      	ldr	r2, [pc, #128]	; (800a3b8 <HAL_TIM_Base_Start_IT+0xfc>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d009      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a1e      	ldr	r2, [pc, #120]	; (800a3bc <HAL_TIM_Base_Start_IT+0x100>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d004      	beq.n	800a350 <HAL_TIM_Base_Start_IT+0x94>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a1d      	ldr	r2, [pc, #116]	; (800a3c0 <HAL_TIM_Base_Start_IT+0x104>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d115      	bne.n	800a37c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689a      	ldr	r2, [r3, #8]
 800a356:	4b1b      	ldr	r3, [pc, #108]	; (800a3c4 <HAL_TIM_Base_Start_IT+0x108>)
 800a358:	4013      	ands	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b06      	cmp	r3, #6
 800a360:	d015      	beq.n	800a38e <HAL_TIM_Base_Start_IT+0xd2>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a368:	d011      	beq.n	800a38e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f042 0201 	orr.w	r2, r2, #1
 800a378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a37a:	e008      	b.n	800a38e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f042 0201 	orr.w	r2, r2, #1
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	e000      	b.n	800a390 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a38e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	40010000 	.word	0x40010000
 800a3a4:	40000400 	.word	0x40000400
 800a3a8:	40000800 	.word	0x40000800
 800a3ac:	40000c00 	.word	0x40000c00
 800a3b0:	40010400 	.word	0x40010400
 800a3b4:	40001800 	.word	0x40001800
 800a3b8:	40014000 	.word	0x40014000
 800a3bc:	4000e000 	.word	0x4000e000
 800a3c0:	4000e400 	.word	0x4000e400
 800a3c4:	00010007 	.word	0x00010007

0800a3c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e049      	b.n	800a46e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7f9 fe8a 	bl	8004108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	3304      	adds	r3, #4
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f000 fd2e 	bl	800ae68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d109      	bne.n	800a4a0 <HAL_TIM_PWM_Start_IT+0x28>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b01      	cmp	r3, #1
 800a496:	bf14      	ite	ne
 800a498:	2301      	movne	r3, #1
 800a49a:	2300      	moveq	r3, #0
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	e03c      	b.n	800a51a <HAL_TIM_PWM_Start_IT+0xa2>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2b04      	cmp	r3, #4
 800a4a4:	d109      	bne.n	800a4ba <HAL_TIM_PWM_Start_IT+0x42>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	bf14      	ite	ne
 800a4b2:	2301      	movne	r3, #1
 800a4b4:	2300      	moveq	r3, #0
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	e02f      	b.n	800a51a <HAL_TIM_PWM_Start_IT+0xa2>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	d109      	bne.n	800a4d4 <HAL_TIM_PWM_Start_IT+0x5c>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	bf14      	ite	ne
 800a4cc:	2301      	movne	r3, #1
 800a4ce:	2300      	moveq	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	e022      	b.n	800a51a <HAL_TIM_PWM_Start_IT+0xa2>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b0c      	cmp	r3, #12
 800a4d8:	d109      	bne.n	800a4ee <HAL_TIM_PWM_Start_IT+0x76>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	bf14      	ite	ne
 800a4e6:	2301      	movne	r3, #1
 800a4e8:	2300      	moveq	r3, #0
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	e015      	b.n	800a51a <HAL_TIM_PWM_Start_IT+0xa2>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b10      	cmp	r3, #16
 800a4f2:	d109      	bne.n	800a508 <HAL_TIM_PWM_Start_IT+0x90>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	bf14      	ite	ne
 800a500:	2301      	movne	r3, #1
 800a502:	2300      	moveq	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	e008      	b.n	800a51a <HAL_TIM_PWM_Start_IT+0xa2>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	bf14      	ite	ne
 800a514:	2301      	movne	r3, #1
 800a516:	2300      	moveq	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e0f6      	b.n	800a710 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d104      	bne.n	800a532 <HAL_TIM_PWM_Start_IT+0xba>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a530:	e023      	b.n	800a57a <HAL_TIM_PWM_Start_IT+0x102>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b04      	cmp	r3, #4
 800a536:	d104      	bne.n	800a542 <HAL_TIM_PWM_Start_IT+0xca>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a540:	e01b      	b.n	800a57a <HAL_TIM_PWM_Start_IT+0x102>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b08      	cmp	r3, #8
 800a546:	d104      	bne.n	800a552 <HAL_TIM_PWM_Start_IT+0xda>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a550:	e013      	b.n	800a57a <HAL_TIM_PWM_Start_IT+0x102>
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b0c      	cmp	r3, #12
 800a556:	d104      	bne.n	800a562 <HAL_TIM_PWM_Start_IT+0xea>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a560:	e00b      	b.n	800a57a <HAL_TIM_PWM_Start_IT+0x102>
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b10      	cmp	r3, #16
 800a566:	d104      	bne.n	800a572 <HAL_TIM_PWM_Start_IT+0xfa>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2202      	movs	r2, #2
 800a56c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a570:	e003      	b.n	800a57a <HAL_TIM_PWM_Start_IT+0x102>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2202      	movs	r2, #2
 800a576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b0c      	cmp	r3, #12
 800a57e:	d841      	bhi.n	800a604 <HAL_TIM_PWM_Start_IT+0x18c>
 800a580:	a201      	add	r2, pc, #4	; (adr r2, 800a588 <HAL_TIM_PWM_Start_IT+0x110>)
 800a582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a586:	bf00      	nop
 800a588:	0800a5bd 	.word	0x0800a5bd
 800a58c:	0800a605 	.word	0x0800a605
 800a590:	0800a605 	.word	0x0800a605
 800a594:	0800a605 	.word	0x0800a605
 800a598:	0800a5cf 	.word	0x0800a5cf
 800a59c:	0800a605 	.word	0x0800a605
 800a5a0:	0800a605 	.word	0x0800a605
 800a5a4:	0800a605 	.word	0x0800a605
 800a5a8:	0800a5e1 	.word	0x0800a5e1
 800a5ac:	0800a605 	.word	0x0800a605
 800a5b0:	0800a605 	.word	0x0800a605
 800a5b4:	0800a605 	.word	0x0800a605
 800a5b8:	0800a5f3 	.word	0x0800a5f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68da      	ldr	r2, [r3, #12]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0202 	orr.w	r2, r2, #2
 800a5ca:	60da      	str	r2, [r3, #12]
      break;
 800a5cc:	e01d      	b.n	800a60a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68da      	ldr	r2, [r3, #12]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f042 0204 	orr.w	r2, r2, #4
 800a5dc:	60da      	str	r2, [r3, #12]
      break;
 800a5de:	e014      	b.n	800a60a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68da      	ldr	r2, [r3, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f042 0208 	orr.w	r2, r2, #8
 800a5ee:	60da      	str	r2, [r3, #12]
      break;
 800a5f0:	e00b      	b.n	800a60a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f042 0210 	orr.w	r2, r2, #16
 800a600:	60da      	str	r2, [r3, #12]
      break;
 800a602:	e002      	b.n	800a60a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	73fb      	strb	r3, [r7, #15]
      break;
 800a608:	bf00      	nop
  }

  if (status == HAL_OK)
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d17e      	bne.n	800a70e <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2201      	movs	r2, #1
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 ffa1 	bl	800b560 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a3d      	ldr	r2, [pc, #244]	; (800a718 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d013      	beq.n	800a650 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a3b      	ldr	r2, [pc, #236]	; (800a71c <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00e      	beq.n	800a650 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a3a      	ldr	r2, [pc, #232]	; (800a720 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d009      	beq.n	800a650 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a38      	ldr	r2, [pc, #224]	; (800a724 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d004      	beq.n	800a650 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a37      	ldr	r2, [pc, #220]	; (800a728 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d101      	bne.n	800a654 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a650:	2301      	movs	r3, #1
 800a652:	e000      	b.n	800a656 <HAL_TIM_PWM_Start_IT+0x1de>
 800a654:	2300      	movs	r3, #0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d007      	beq.n	800a66a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a668:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a2a      	ldr	r2, [pc, #168]	; (800a718 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d02c      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a67c:	d027      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a2a      	ldr	r2, [pc, #168]	; (800a72c <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d022      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a28      	ldr	r2, [pc, #160]	; (800a730 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d01d      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a27      	ldr	r2, [pc, #156]	; (800a734 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d018      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1e      	ldr	r2, [pc, #120]	; (800a71c <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d013      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a23      	ldr	r2, [pc, #140]	; (800a738 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d00e      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a1a      	ldr	r2, [pc, #104]	; (800a720 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d009      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1f      	ldr	r2, [pc, #124]	; (800a73c <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d004      	beq.n	800a6ce <HAL_TIM_PWM_Start_IT+0x256>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a1d      	ldr	r2, [pc, #116]	; (800a740 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d115      	bne.n	800a6fa <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689a      	ldr	r2, [r3, #8]
 800a6d4:	4b1b      	ldr	r3, [pc, #108]	; (800a744 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b06      	cmp	r3, #6
 800a6de:	d015      	beq.n	800a70c <HAL_TIM_PWM_Start_IT+0x294>
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6e6:	d011      	beq.n	800a70c <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f042 0201 	orr.w	r2, r2, #1
 800a6f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6f8:	e008      	b.n	800a70c <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f042 0201 	orr.w	r2, r2, #1
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	e000      	b.n	800a70e <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a70c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	40010000 	.word	0x40010000
 800a71c:	40010400 	.word	0x40010400
 800a720:	40014000 	.word	0x40014000
 800a724:	40014400 	.word	0x40014400
 800a728:	40014800 	.word	0x40014800
 800a72c:	40000400 	.word	0x40000400
 800a730:	40000800 	.word	0x40000800
 800a734:	40000c00 	.word	0x40000c00
 800a738:	40001800 	.word	0x40001800
 800a73c:	4000e000 	.word	0x4000e000
 800a740:	4000e400 	.word	0x4000e400
 800a744:	00010007 	.word	0x00010007

0800a748 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e08f      	b.n	800a87c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d106      	bne.n	800a776 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7f9 fbbb 	bl	8003eec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2202      	movs	r2, #2
 800a77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6899      	ldr	r1, [r3, #8]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	4b3e      	ldr	r3, [pc, #248]	; (800a884 <HAL_TIM_Encoder_Init+0x13c>)
 800a78a:	400b      	ands	r3, r1
 800a78c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3304      	adds	r3, #4
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f000 fb65 	bl	800ae68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	4b31      	ldr	r3, [pc, #196]	; (800a888 <HAL_TIM_Encoder_Init+0x140>)
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	021b      	lsls	r3, r3, #8
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	4b2b      	ldr	r3, [pc, #172]	; (800a88c <HAL_TIM_Encoder_Init+0x144>)
 800a7de:	4013      	ands	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	4b2a      	ldr	r3, [pc, #168]	; (800a890 <HAL_TIM_Encoder_Init+0x148>)
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68da      	ldr	r2, [r3, #12]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	021b      	lsls	r3, r3, #8
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	011a      	lsls	r2, r3, #4
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	031b      	lsls	r3, r3, #12
 800a808:	4313      	orrs	r3, r2
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a816:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a81e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	011b      	lsls	r3, r3, #4
 800a82a:	4313      	orrs	r3, r2
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	fffebff8 	.word	0xfffebff8
 800a888:	fffffcfc 	.word	0xfffffcfc
 800a88c:	fffff3f3 	.word	0xfffff3f3
 800a890:	ffff0f0f 	.word	0xffff0f0f

0800a894 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d110      	bne.n	800a8e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d102      	bne.n	800a8d0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8ca:	7b7b      	ldrb	r3, [r7, #13]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d001      	beq.n	800a8d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e069      	b.n	800a9a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8e4:	e031      	b.n	800a94a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b04      	cmp	r3, #4
 800a8ea:	d110      	bne.n	800a90e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d102      	bne.n	800a8f8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a8f2:	7b3b      	ldrb	r3, [r7, #12]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d001      	beq.n	800a8fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e055      	b.n	800a9a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2202      	movs	r2, #2
 800a908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a90c:	e01d      	b.n	800a94a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d108      	bne.n	800a926 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d105      	bne.n	800a926 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a91a:	7b7b      	ldrb	r3, [r7, #13]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d102      	bne.n	800a926 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a920:	7b3b      	ldrb	r3, [r7, #12]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d001      	beq.n	800a92a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e03e      	b.n	800a9a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2202      	movs	r2, #2
 800a92e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2202      	movs	r2, #2
 800a936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2202      	movs	r2, #2
 800a946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <HAL_TIM_Encoder_Start+0xc4>
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	2b04      	cmp	r3, #4
 800a954:	d008      	beq.n	800a968 <HAL_TIM_Encoder_Start+0xd4>
 800a956:	e00f      	b.n	800a978 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2201      	movs	r2, #1
 800a95e:	2100      	movs	r1, #0
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fdfd 	bl	800b560 <TIM_CCxChannelCmd>
      break;
 800a966:	e016      	b.n	800a996 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2201      	movs	r2, #1
 800a96e:	2104      	movs	r1, #4
 800a970:	4618      	mov	r0, r3
 800a972:	f000 fdf5 	bl	800b560 <TIM_CCxChannelCmd>
      break;
 800a976:	e00e      	b.n	800a996 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2201      	movs	r2, #1
 800a97e:	2100      	movs	r1, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f000 fded 	bl	800b560 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2201      	movs	r2, #1
 800a98c:	2104      	movs	r1, #4
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 fde6 	bl	800b560 <TIM_CCxChannelCmd>
      break;
 800a994:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f042 0201 	orr.w	r2, r2, #1
 800a9a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	f003 0302 	and.w	r3, r3, #2
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d122      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d11b      	bne.n	800aa0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f06f 0202 	mvn.w	r2, #2
 800a9dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fa1a 	bl	800ae2c <HAL_TIM_IC_CaptureCallback>
 800a9f8:	e005      	b.n	800aa06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fa0c 	bl	800ae18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fa1d 	bl	800ae40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	f003 0304 	and.w	r3, r3, #4
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d122      	bne.n	800aa60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 0304 	and.w	r3, r3, #4
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d11b      	bne.n	800aa60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f06f 0204 	mvn.w	r2, #4
 800aa30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2202      	movs	r2, #2
 800aa36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f9f0 	bl	800ae2c <HAL_TIM_IC_CaptureCallback>
 800aa4c:	e005      	b.n	800aa5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f9e2 	bl	800ae18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f9f3 	bl	800ae40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f003 0308 	and.w	r3, r3, #8
 800aa6a:	2b08      	cmp	r3, #8
 800aa6c:	d122      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f003 0308 	and.w	r3, r3, #8
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d11b      	bne.n	800aab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f06f 0208 	mvn.w	r2, #8
 800aa84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2204      	movs	r2, #4
 800aa8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f9c6 	bl	800ae2c <HAL_TIM_IC_CaptureCallback>
 800aaa0:	e005      	b.n	800aaae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f9b8 	bl	800ae18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9c9 	bl	800ae40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	f003 0310 	and.w	r3, r3, #16
 800aabe:	2b10      	cmp	r3, #16
 800aac0:	d122      	bne.n	800ab08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f003 0310 	and.w	r3, r3, #16
 800aacc:	2b10      	cmp	r3, #16
 800aace:	d11b      	bne.n	800ab08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f06f 0210 	mvn.w	r2, #16
 800aad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2208      	movs	r2, #8
 800aade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f99c 	bl	800ae2c <HAL_TIM_IC_CaptureCallback>
 800aaf4:	e005      	b.n	800ab02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f98e 	bl	800ae18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f99f 	bl	800ae40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d10e      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d107      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f06f 0201 	mvn.w	r2, #1
 800ab2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7f9 fdce 	bl	80046d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3e:	2b80      	cmp	r3, #128	; 0x80
 800ab40:	d10e      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab4c:	2b80      	cmp	r3, #128	; 0x80
 800ab4e:	d107      	bne.n	800ab60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fe6c 	bl	800b838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab6e:	d10e      	bne.n	800ab8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab7a:	2b80      	cmp	r3, #128	; 0x80
 800ab7c:	d107      	bne.n	800ab8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fe5f 	bl	800b84c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab98:	2b40      	cmp	r3, #64	; 0x40
 800ab9a:	d10e      	bne.n	800abba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba6:	2b40      	cmp	r3, #64	; 0x40
 800aba8:	d107      	bne.n	800abba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800abb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f94d 	bl	800ae54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	f003 0320 	and.w	r3, r3, #32
 800abc4:	2b20      	cmp	r3, #32
 800abc6:	d10e      	bne.n	800abe6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	f003 0320 	and.w	r3, r3, #32
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	d107      	bne.n	800abe6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f06f 0220 	mvn.w	r2, #32
 800abde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fe1f 	bl	800b824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abfc:	2300      	movs	r3, #0
 800abfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d101      	bne.n	800ac0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	e0ff      	b.n	800ae0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b14      	cmp	r3, #20
 800ac1a:	f200 80f0 	bhi.w	800adfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac1e:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac79 	.word	0x0800ac79
 800ac28:	0800adff 	.word	0x0800adff
 800ac2c:	0800adff 	.word	0x0800adff
 800ac30:	0800adff 	.word	0x0800adff
 800ac34:	0800acb9 	.word	0x0800acb9
 800ac38:	0800adff 	.word	0x0800adff
 800ac3c:	0800adff 	.word	0x0800adff
 800ac40:	0800adff 	.word	0x0800adff
 800ac44:	0800acfb 	.word	0x0800acfb
 800ac48:	0800adff 	.word	0x0800adff
 800ac4c:	0800adff 	.word	0x0800adff
 800ac50:	0800adff 	.word	0x0800adff
 800ac54:	0800ad3b 	.word	0x0800ad3b
 800ac58:	0800adff 	.word	0x0800adff
 800ac5c:	0800adff 	.word	0x0800adff
 800ac60:	0800adff 	.word	0x0800adff
 800ac64:	0800ad7d 	.word	0x0800ad7d
 800ac68:	0800adff 	.word	0x0800adff
 800ac6c:	0800adff 	.word	0x0800adff
 800ac70:	0800adff 	.word	0x0800adff
 800ac74:	0800adbd 	.word	0x0800adbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68b9      	ldr	r1, [r7, #8]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 f998 	bl	800afb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	699a      	ldr	r2, [r3, #24]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f042 0208 	orr.w	r2, r2, #8
 800ac92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f022 0204 	bic.w	r2, r2, #4
 800aca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6999      	ldr	r1, [r3, #24]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	691a      	ldr	r2, [r3, #16]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	619a      	str	r2, [r3, #24]
      break;
 800acb6:	e0a5      	b.n	800ae04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68b9      	ldr	r1, [r7, #8]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 fa08 	bl	800b0d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	699a      	ldr	r2, [r3, #24]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	699a      	ldr	r2, [r3, #24]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ace2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	6999      	ldr	r1, [r3, #24]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	021a      	lsls	r2, r3, #8
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	430a      	orrs	r2, r1
 800acf6:	619a      	str	r2, [r3, #24]
      break;
 800acf8:	e084      	b.n	800ae04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68b9      	ldr	r1, [r7, #8]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fa71 	bl	800b1e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69da      	ldr	r2, [r3, #28]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0208 	orr.w	r2, r2, #8
 800ad14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	69da      	ldr	r2, [r3, #28]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f022 0204 	bic.w	r2, r2, #4
 800ad24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	69d9      	ldr	r1, [r3, #28]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	691a      	ldr	r2, [r3, #16]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	61da      	str	r2, [r3, #28]
      break;
 800ad38:	e064      	b.n	800ae04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 fad9 	bl	800b2f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	69da      	ldr	r2, [r3, #28]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	69da      	ldr	r2, [r3, #28]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	69d9      	ldr	r1, [r3, #28]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	021a      	lsls	r2, r3, #8
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	430a      	orrs	r2, r1
 800ad78:	61da      	str	r2, [r3, #28]
      break;
 800ad7a:	e043      	b.n	800ae04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68b9      	ldr	r1, [r7, #8]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fb22 	bl	800b3cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f042 0208 	orr.w	r2, r2, #8
 800ad96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f022 0204 	bic.w	r2, r2, #4
 800ada6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	691a      	ldr	r2, [r3, #16]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800adba:	e023      	b.n	800ae04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68b9      	ldr	r1, [r7, #8]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 fb66 	bl	800b494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800add6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ade6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	021a      	lsls	r2, r3, #8
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800adfc:	e002      	b.n	800ae04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	75fb      	strb	r3, [r7, #23]
      break;
 800ae02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop

0800ae18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae34:	bf00      	nop
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae5c:	bf00      	nop
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a44      	ldr	r2, [pc, #272]	; (800af8c <TIM_Base_SetConfig+0x124>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d013      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae86:	d00f      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a41      	ldr	r2, [pc, #260]	; (800af90 <TIM_Base_SetConfig+0x128>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d00b      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a40      	ldr	r2, [pc, #256]	; (800af94 <TIM_Base_SetConfig+0x12c>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d007      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a3f      	ldr	r2, [pc, #252]	; (800af98 <TIM_Base_SetConfig+0x130>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d003      	beq.n	800aea8 <TIM_Base_SetConfig+0x40>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a3e      	ldr	r2, [pc, #248]	; (800af9c <TIM_Base_SetConfig+0x134>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d108      	bne.n	800aeba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a33      	ldr	r2, [pc, #204]	; (800af8c <TIM_Base_SetConfig+0x124>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d027      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec8:	d023      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a30      	ldr	r2, [pc, #192]	; (800af90 <TIM_Base_SetConfig+0x128>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d01f      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a2f      	ldr	r2, [pc, #188]	; (800af94 <TIM_Base_SetConfig+0x12c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d01b      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a2e      	ldr	r2, [pc, #184]	; (800af98 <TIM_Base_SetConfig+0x130>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d017      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a2d      	ldr	r2, [pc, #180]	; (800af9c <TIM_Base_SetConfig+0x134>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d013      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a2c      	ldr	r2, [pc, #176]	; (800afa0 <TIM_Base_SetConfig+0x138>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d00f      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a2b      	ldr	r2, [pc, #172]	; (800afa4 <TIM_Base_SetConfig+0x13c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d00b      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a2a      	ldr	r2, [pc, #168]	; (800afa8 <TIM_Base_SetConfig+0x140>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d007      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a29      	ldr	r2, [pc, #164]	; (800afac <TIM_Base_SetConfig+0x144>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d003      	beq.n	800af12 <TIM_Base_SetConfig+0xaa>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a28      	ldr	r2, [pc, #160]	; (800afb0 <TIM_Base_SetConfig+0x148>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d108      	bne.n	800af24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a10      	ldr	r2, [pc, #64]	; (800af8c <TIM_Base_SetConfig+0x124>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d00f      	beq.n	800af70 <TIM_Base_SetConfig+0x108>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a12      	ldr	r2, [pc, #72]	; (800af9c <TIM_Base_SetConfig+0x134>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d00b      	beq.n	800af70 <TIM_Base_SetConfig+0x108>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a11      	ldr	r2, [pc, #68]	; (800afa0 <TIM_Base_SetConfig+0x138>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d007      	beq.n	800af70 <TIM_Base_SetConfig+0x108>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a10      	ldr	r2, [pc, #64]	; (800afa4 <TIM_Base_SetConfig+0x13c>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d003      	beq.n	800af70 <TIM_Base_SetConfig+0x108>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a0f      	ldr	r2, [pc, #60]	; (800afa8 <TIM_Base_SetConfig+0x140>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d103      	bne.n	800af78 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	691a      	ldr	r2, [r3, #16]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	615a      	str	r2, [r3, #20]
}
 800af7e:	bf00      	nop
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	40010000 	.word	0x40010000
 800af90:	40000400 	.word	0x40000400
 800af94:	40000800 	.word	0x40000800
 800af98:	40000c00 	.word	0x40000c00
 800af9c:	40010400 	.word	0x40010400
 800afa0:	40014000 	.word	0x40014000
 800afa4:	40014400 	.word	0x40014400
 800afa8:	40014800 	.word	0x40014800
 800afac:	4000e000 	.word	0x4000e000
 800afb0:	4000e400 	.word	0x4000e400

0800afb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b087      	sub	sp, #28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	f023 0201 	bic.w	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4b37      	ldr	r3, [pc, #220]	; (800b0bc <TIM_OC1_SetConfig+0x108>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f023 0303 	bic.w	r3, r3, #3
 800afea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f023 0302 	bic.w	r3, r3, #2
 800affc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	4313      	orrs	r3, r2
 800b006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a2d      	ldr	r2, [pc, #180]	; (800b0c0 <TIM_OC1_SetConfig+0x10c>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00f      	beq.n	800b030 <TIM_OC1_SetConfig+0x7c>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a2c      	ldr	r2, [pc, #176]	; (800b0c4 <TIM_OC1_SetConfig+0x110>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00b      	beq.n	800b030 <TIM_OC1_SetConfig+0x7c>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a2b      	ldr	r2, [pc, #172]	; (800b0c8 <TIM_OC1_SetConfig+0x114>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d007      	beq.n	800b030 <TIM_OC1_SetConfig+0x7c>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a2a      	ldr	r2, [pc, #168]	; (800b0cc <TIM_OC1_SetConfig+0x118>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d003      	beq.n	800b030 <TIM_OC1_SetConfig+0x7c>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a29      	ldr	r2, [pc, #164]	; (800b0d0 <TIM_OC1_SetConfig+0x11c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d10c      	bne.n	800b04a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	f023 0308 	bic.w	r3, r3, #8
 800b036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	4313      	orrs	r3, r2
 800b040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f023 0304 	bic.w	r3, r3, #4
 800b048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4a1c      	ldr	r2, [pc, #112]	; (800b0c0 <TIM_OC1_SetConfig+0x10c>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d00f      	beq.n	800b072 <TIM_OC1_SetConfig+0xbe>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a1b      	ldr	r2, [pc, #108]	; (800b0c4 <TIM_OC1_SetConfig+0x110>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d00b      	beq.n	800b072 <TIM_OC1_SetConfig+0xbe>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a1a      	ldr	r2, [pc, #104]	; (800b0c8 <TIM_OC1_SetConfig+0x114>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d007      	beq.n	800b072 <TIM_OC1_SetConfig+0xbe>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a19      	ldr	r2, [pc, #100]	; (800b0cc <TIM_OC1_SetConfig+0x118>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d003      	beq.n	800b072 <TIM_OC1_SetConfig+0xbe>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <TIM_OC1_SetConfig+0x11c>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d111      	bne.n	800b096 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	4313      	orrs	r3, r2
 800b08a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	4313      	orrs	r3, r2
 800b094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	621a      	str	r2, [r3, #32]
}
 800b0b0:	bf00      	nop
 800b0b2:	371c      	adds	r7, #28
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	fffeff8f 	.word	0xfffeff8f
 800b0c0:	40010000 	.word	0x40010000
 800b0c4:	40010400 	.word	0x40010400
 800b0c8:	40014000 	.word	0x40014000
 800b0cc:	40014400 	.word	0x40014400
 800b0d0:	40014800 	.word	0x40014800

0800b0d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f023 0210 	bic.w	r2, r3, #16
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4b34      	ldr	r3, [pc, #208]	; (800b1d0 <TIM_OC2_SetConfig+0xfc>)
 800b100:	4013      	ands	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f023 0320 	bic.w	r3, r3, #32
 800b11e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	4313      	orrs	r3, r2
 800b12a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a29      	ldr	r2, [pc, #164]	; (800b1d4 <TIM_OC2_SetConfig+0x100>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d003      	beq.n	800b13c <TIM_OC2_SetConfig+0x68>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a28      	ldr	r2, [pc, #160]	; (800b1d8 <TIM_OC2_SetConfig+0x104>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d10d      	bne.n	800b158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	011b      	lsls	r3, r3, #4
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a1e      	ldr	r2, [pc, #120]	; (800b1d4 <TIM_OC2_SetConfig+0x100>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d00f      	beq.n	800b180 <TIM_OC2_SetConfig+0xac>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a1d      	ldr	r2, [pc, #116]	; (800b1d8 <TIM_OC2_SetConfig+0x104>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d00b      	beq.n	800b180 <TIM_OC2_SetConfig+0xac>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a1c      	ldr	r2, [pc, #112]	; (800b1dc <TIM_OC2_SetConfig+0x108>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d007      	beq.n	800b180 <TIM_OC2_SetConfig+0xac>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a1b      	ldr	r2, [pc, #108]	; (800b1e0 <TIM_OC2_SetConfig+0x10c>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d003      	beq.n	800b180 <TIM_OC2_SetConfig+0xac>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a1a      	ldr	r2, [pc, #104]	; (800b1e4 <TIM_OC2_SetConfig+0x110>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d113      	bne.n	800b1a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b18e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	695b      	ldr	r3, [r3, #20]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	4313      	orrs	r3, r2
 800b19a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	697a      	ldr	r2, [r7, #20]
 800b1c0:	621a      	str	r2, [r3, #32]
}
 800b1c2:	bf00      	nop
 800b1c4:	371c      	adds	r7, #28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	feff8fff 	.word	0xfeff8fff
 800b1d4:	40010000 	.word	0x40010000
 800b1d8:	40010400 	.word	0x40010400
 800b1dc:	40014000 	.word	0x40014000
 800b1e0:	40014400 	.word	0x40014400
 800b1e4:	40014800 	.word	0x40014800

0800b1e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b087      	sub	sp, #28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	4b33      	ldr	r3, [pc, #204]	; (800b2e0 <TIM_OC3_SetConfig+0xf8>)
 800b214:	4013      	ands	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0303 	bic.w	r3, r3, #3
 800b21e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	021b      	lsls	r3, r3, #8
 800b238:	697a      	ldr	r2, [r7, #20]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a28      	ldr	r2, [pc, #160]	; (800b2e4 <TIM_OC3_SetConfig+0xfc>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d003      	beq.n	800b24e <TIM_OC3_SetConfig+0x66>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a27      	ldr	r2, [pc, #156]	; (800b2e8 <TIM_OC3_SetConfig+0x100>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d10d      	bne.n	800b26a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b254:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	021b      	lsls	r3, r3, #8
 800b25c:	697a      	ldr	r2, [r7, #20]
 800b25e:	4313      	orrs	r3, r2
 800b260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <TIM_OC3_SetConfig+0xfc>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d00f      	beq.n	800b292 <TIM_OC3_SetConfig+0xaa>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	4a1c      	ldr	r2, [pc, #112]	; (800b2e8 <TIM_OC3_SetConfig+0x100>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00b      	beq.n	800b292 <TIM_OC3_SetConfig+0xaa>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a1b      	ldr	r2, [pc, #108]	; (800b2ec <TIM_OC3_SetConfig+0x104>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d007      	beq.n	800b292 <TIM_OC3_SetConfig+0xaa>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a1a      	ldr	r2, [pc, #104]	; (800b2f0 <TIM_OC3_SetConfig+0x108>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d003      	beq.n	800b292 <TIM_OC3_SetConfig+0xaa>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a19      	ldr	r2, [pc, #100]	; (800b2f4 <TIM_OC3_SetConfig+0x10c>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d113      	bne.n	800b2ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	011b      	lsls	r3, r3, #4
 800b2a8:	693a      	ldr	r2, [r7, #16]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	621a      	str	r2, [r3, #32]
}
 800b2d4:	bf00      	nop
 800b2d6:	371c      	adds	r7, #28
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	fffeff8f 	.word	0xfffeff8f
 800b2e4:	40010000 	.word	0x40010000
 800b2e8:	40010400 	.word	0x40010400
 800b2ec:	40014000 	.word	0x40014000
 800b2f0:	40014400 	.word	0x40014400
 800b2f4:	40014800 	.word	0x40014800

0800b2f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	69db      	ldr	r3, [r3, #28]
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4b24      	ldr	r3, [pc, #144]	; (800b3b4 <TIM_OC4_SetConfig+0xbc>)
 800b324:	4013      	ands	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b32e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	021b      	lsls	r3, r3, #8
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	4313      	orrs	r3, r2
 800b33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	031b      	lsls	r3, r3, #12
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a19      	ldr	r2, [pc, #100]	; (800b3b8 <TIM_OC4_SetConfig+0xc0>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d00f      	beq.n	800b378 <TIM_OC4_SetConfig+0x80>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a18      	ldr	r2, [pc, #96]	; (800b3bc <TIM_OC4_SetConfig+0xc4>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d00b      	beq.n	800b378 <TIM_OC4_SetConfig+0x80>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a17      	ldr	r2, [pc, #92]	; (800b3c0 <TIM_OC4_SetConfig+0xc8>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d007      	beq.n	800b378 <TIM_OC4_SetConfig+0x80>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <TIM_OC4_SetConfig+0xcc>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d003      	beq.n	800b378 <TIM_OC4_SetConfig+0x80>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a15      	ldr	r2, [pc, #84]	; (800b3c8 <TIM_OC4_SetConfig+0xd0>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d109      	bne.n	800b38c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b37e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	019b      	lsls	r3, r3, #6
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	4313      	orrs	r3, r2
 800b38a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	621a      	str	r2, [r3, #32]
}
 800b3a6:	bf00      	nop
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	feff8fff 	.word	0xfeff8fff
 800b3b8:	40010000 	.word	0x40010000
 800b3bc:	40010400 	.word	0x40010400
 800b3c0:	40014000 	.word	0x40014000
 800b3c4:	40014400 	.word	0x40014400
 800b3c8:	40014800 	.word	0x40014800

0800b3cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4b21      	ldr	r3, [pc, #132]	; (800b47c <TIM_OC5_SetConfig+0xb0>)
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b40c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	041b      	lsls	r3, r3, #16
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	4313      	orrs	r3, r2
 800b418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a18      	ldr	r2, [pc, #96]	; (800b480 <TIM_OC5_SetConfig+0xb4>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d00f      	beq.n	800b442 <TIM_OC5_SetConfig+0x76>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a17      	ldr	r2, [pc, #92]	; (800b484 <TIM_OC5_SetConfig+0xb8>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d00b      	beq.n	800b442 <TIM_OC5_SetConfig+0x76>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a16      	ldr	r2, [pc, #88]	; (800b488 <TIM_OC5_SetConfig+0xbc>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d007      	beq.n	800b442 <TIM_OC5_SetConfig+0x76>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a15      	ldr	r2, [pc, #84]	; (800b48c <TIM_OC5_SetConfig+0xc0>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d003      	beq.n	800b442 <TIM_OC5_SetConfig+0x76>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a14      	ldr	r2, [pc, #80]	; (800b490 <TIM_OC5_SetConfig+0xc4>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d109      	bne.n	800b456 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	021b      	lsls	r3, r3, #8
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	4313      	orrs	r3, r2
 800b454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	621a      	str	r2, [r3, #32]
}
 800b470:	bf00      	nop
 800b472:	371c      	adds	r7, #28
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	fffeff8f 	.word	0xfffeff8f
 800b480:	40010000 	.word	0x40010000
 800b484:	40010400 	.word	0x40010400
 800b488:	40014000 	.word	0x40014000
 800b48c:	40014400 	.word	0x40014400
 800b490:	40014800 	.word	0x40014800

0800b494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b494:	b480      	push	{r7}
 800b496:	b087      	sub	sp, #28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a1b      	ldr	r3, [r3, #32]
 800b4ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4b22      	ldr	r3, [pc, #136]	; (800b548 <TIM_OC6_SetConfig+0xb4>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	051b      	lsls	r3, r3, #20
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a19      	ldr	r2, [pc, #100]	; (800b54c <TIM_OC6_SetConfig+0xb8>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00f      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a18      	ldr	r2, [pc, #96]	; (800b550 <TIM_OC6_SetConfig+0xbc>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d00b      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a17      	ldr	r2, [pc, #92]	; (800b554 <TIM_OC6_SetConfig+0xc0>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d007      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a16      	ldr	r2, [pc, #88]	; (800b558 <TIM_OC6_SetConfig+0xc4>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d003      	beq.n	800b50c <TIM_OC6_SetConfig+0x78>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a15      	ldr	r2, [pc, #84]	; (800b55c <TIM_OC6_SetConfig+0xc8>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d109      	bne.n	800b520 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b512:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	029b      	lsls	r3, r3, #10
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	621a      	str	r2, [r3, #32]
}
 800b53a:	bf00      	nop
 800b53c:	371c      	adds	r7, #28
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	feff8fff 	.word	0xfeff8fff
 800b54c:	40010000 	.word	0x40010000
 800b550:	40010400 	.word	0x40010400
 800b554:	40014000 	.word	0x40014000
 800b558:	40014400 	.word	0x40014400
 800b55c:	40014800 	.word	0x40014800

0800b560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f003 031f 	and.w	r3, r3, #31
 800b572:	2201      	movs	r2, #1
 800b574:	fa02 f303 	lsl.w	r3, r2, r3
 800b578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6a1a      	ldr	r2, [r3, #32]
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	43db      	mvns	r3, r3
 800b582:	401a      	ands	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6a1a      	ldr	r2, [r3, #32]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	f003 031f 	and.w	r3, r3, #31
 800b592:	6879      	ldr	r1, [r7, #4]
 800b594:	fa01 f303 	lsl.w	r3, r1, r3
 800b598:	431a      	orrs	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	621a      	str	r2, [r3, #32]
}
 800b59e:	bf00      	nop
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
	...

0800b5ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d101      	bne.n	800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	e077      	b.n	800b6b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a35      	ldr	r2, [pc, #212]	; (800b6c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d004      	beq.n	800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a34      	ldr	r2, [pc, #208]	; (800b6c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d108      	bne.n	800b60a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b5fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	4313      	orrs	r3, r2
 800b608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	4313      	orrs	r3, r2
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a25      	ldr	r2, [pc, #148]	; (800b6c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d02c      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b636:	d027      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a22      	ldr	r2, [pc, #136]	; (800b6c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d022      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a21      	ldr	r2, [pc, #132]	; (800b6cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d01d      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a1f      	ldr	r2, [pc, #124]	; (800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d018      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a1a      	ldr	r2, [pc, #104]	; (800b6c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d013      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a1b      	ldr	r2, [pc, #108]	; (800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d00e      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a1a      	ldr	r2, [pc, #104]	; (800b6d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d009      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a18      	ldr	r2, [pc, #96]	; (800b6dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d004      	beq.n	800b688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a17      	ldr	r2, [pc, #92]	; (800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d10c      	bne.n	800b6a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b68e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	4313      	orrs	r3, r2
 800b698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	40010000 	.word	0x40010000
 800b6c4:	40010400 	.word	0x40010400
 800b6c8:	40000400 	.word	0x40000400
 800b6cc:	40000800 	.word	0x40000800
 800b6d0:	40000c00 	.word	0x40000c00
 800b6d4:	40001800 	.word	0x40001800
 800b6d8:	40014000 	.word	0x40014000
 800b6dc:	4000e000 	.word	0x4000e000
 800b6e0:	4000e400 	.word	0x4000e400

0800b6e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d101      	bne.n	800b700 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	e087      	b.n	800b810 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	4313      	orrs	r3, r2
 800b722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	4313      	orrs	r3, r2
 800b730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	4313      	orrs	r3, r2
 800b75a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	041b      	lsls	r3, r3, #16
 800b776:	4313      	orrs	r3, r2
 800b778:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a27      	ldr	r2, [pc, #156]	; (800b81c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d004      	beq.n	800b78e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a25      	ldr	r2, [pc, #148]	; (800b820 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d106      	bne.n	800b79c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	4313      	orrs	r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a1e      	ldr	r2, [pc, #120]	; (800b81c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d004      	beq.n	800b7b0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a1d      	ldr	r2, [pc, #116]	; (800b820 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d126      	bne.n	800b7fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ba:	051b      	lsls	r3, r3, #20
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a0e      	ldr	r2, [pc, #56]	; (800b81c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d004      	beq.n	800b7f0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a0d      	ldr	r2, [pc, #52]	; (800b820 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d106      	bne.n	800b7fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	40010000 	.word	0x40010000
 800b820:	40010400 	.word	0x40010400

0800b824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b82c:	bf00      	nop
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d101      	bne.n	800b872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e042      	b.n	800b8f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d106      	bne.n	800b88a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7f8 fd13 	bl	80042b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2224      	movs	r2, #36	; 0x24
 800b88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 0201 	bic.w	r2, r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fcdc 	bl	800c260 <UART_SetConfig>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d101      	bne.n	800b8b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e022      	b.n	800b8f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f001 fb3c 	bl	800cf38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0201 	orr.w	r2, r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 fbc3 	bl	800d07c <UART_CheckIdleState>
 800b8f6:	4603      	mov	r3, r0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08a      	sub	sp, #40	; 0x28
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	4613      	mov	r3, r2
 800b90c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b914:	2b20      	cmp	r3, #32
 800b916:	d17a      	bne.n	800ba0e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <HAL_UART_Transmit_DMA+0x24>
 800b91e:	88fb      	ldrh	r3, [r7, #6]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e073      	b.n	800ba10 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d101      	bne.n	800b936 <HAL_UART_Transmit_DMA+0x36>
 800b932:	2302      	movs	r3, #2
 800b934:	e06c      	b.n	800ba10 <HAL_UART_Transmit_DMA+0x110>
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	88fa      	ldrh	r2, [r7, #6]
 800b948:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	88fa      	ldrh	r2, [r7, #6]
 800b950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2221      	movs	r2, #33	; 0x21
 800b960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d02c      	beq.n	800b9c6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b970:	4a29      	ldr	r2, [pc, #164]	; (800ba18 <HAL_UART_Transmit_DMA+0x118>)
 800b972:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b978:	4a28      	ldr	r2, [pc, #160]	; (800ba1c <HAL_UART_Transmit_DMA+0x11c>)
 800b97a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b980:	4a27      	ldr	r2, [pc, #156]	; (800ba20 <HAL_UART_Transmit_DMA+0x120>)
 800b982:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b988:	2200      	movs	r2, #0
 800b98a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b994:	4619      	mov	r1, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3328      	adds	r3, #40	; 0x28
 800b99c:	461a      	mov	r2, r3
 800b99e:	88fb      	ldrh	r3, [r7, #6]
 800b9a0:	f7f9 fd02 	bl	80053a8 <HAL_DMA_Start_IT>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00d      	beq.n	800b9c6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2210      	movs	r2, #16
 800b9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2220      	movs	r2, #32
 800b9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e024      	b.n	800ba10 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2240      	movs	r2, #64	; 0x40
 800b9cc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3308      	adds	r3, #8
 800b9dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f6:	623a      	str	r2, [r7, #32]
 800b9f8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fa:	69f9      	ldr	r1, [r7, #28]
 800b9fc:	6a3a      	ldr	r2, [r7, #32]
 800b9fe:	e841 2300 	strex	r3, r2, [r1]
 800ba02:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1e5      	bne.n	800b9d6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e000      	b.n	800ba10 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ba0e:	2302      	movs	r3, #2
  }
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3728      	adds	r7, #40	; 0x28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	0800d545 	.word	0x0800d545
 800ba1c:	0800d5db 	.word	0x0800d5db
 800ba20:	0800d751 	.word	0x0800d751

0800ba24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08a      	sub	sp, #40	; 0x28
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba38:	2b20      	cmp	r3, #32
 800ba3a:	d142      	bne.n	800bac2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <HAL_UART_Receive_DMA+0x24>
 800ba42:	88fb      	ldrh	r3, [r7, #6]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e03b      	b.n	800bac4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d101      	bne.n	800ba5a <HAL_UART_Receive_DMA+0x36>
 800ba56:	2302      	movs	r3, #2
 800ba58:	e034      	b.n	800bac4 <HAL_UART_Receive_DMA+0xa0>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a17      	ldr	r2, [pc, #92]	; (800bacc <HAL_UART_Receive_DMA+0xa8>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d01f      	beq.n	800bab2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d018      	beq.n	800bab2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	e853 3f00 	ldrex	r3, [r3]
 800ba8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba94:	627b      	str	r3, [r7, #36]	; 0x24
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	623b      	str	r3, [r7, #32]
 800baa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa2:	69f9      	ldr	r1, [r7, #28]
 800baa4:	6a3a      	ldr	r2, [r7, #32]
 800baa6:	e841 2300 	strex	r3, r2, [r1]
 800baaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1e6      	bne.n	800ba80 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bab2:	88fb      	ldrh	r3, [r7, #6]
 800bab4:	461a      	mov	r2, r3
 800bab6:	68b9      	ldr	r1, [r7, #8]
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f001 fbf3 	bl	800d2a4 <UART_Start_Receive_DMA>
 800babe:	4603      	mov	r3, r0
 800bac0:	e000      	b.n	800bac4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bac2:	2302      	movs	r3, #2
  }
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3728      	adds	r7, #40	; 0x28
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	58000c00 	.word	0x58000c00

0800bad0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b0ba      	sub	sp, #232	; 0xe8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800baf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bafa:	f640 030f 	movw	r3, #2063	; 0x80f
 800bafe:	4013      	ands	r3, r2
 800bb00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d11b      	bne.n	800bb44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb10:	f003 0320 	and.w	r3, r3, #32
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d015      	beq.n	800bb44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb1c:	f003 0320 	and.w	r3, r3, #32
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d105      	bne.n	800bb30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d009      	beq.n	800bb44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 835a 	beq.w	800c1ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	4798      	blx	r3
      }
      return;
 800bb42:	e354      	b.n	800c1ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 811f 	beq.w	800bd8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bb52:	4b8b      	ldr	r3, [pc, #556]	; (800bd80 <HAL_UART_IRQHandler+0x2b0>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d106      	bne.n	800bb68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bb5e:	4b89      	ldr	r3, [pc, #548]	; (800bd84 <HAL_UART_IRQHandler+0x2b4>)
 800bb60:	4013      	ands	r3, r2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 8112 	beq.w	800bd8c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d011      	beq.n	800bb98 <HAL_UART_IRQHandler+0xc8>
 800bb74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00b      	beq.n	800bb98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2201      	movs	r2, #1
 800bb86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb8e:	f043 0201 	orr.w	r2, r3, #1
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d011      	beq.n	800bbc8 <HAL_UART_IRQHandler+0xf8>
 800bba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bba8:	f003 0301 	and.w	r3, r3, #1
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00b      	beq.n	800bbc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbbe:	f043 0204 	orr.w	r2, r3, #4
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbcc:	f003 0304 	and.w	r3, r3, #4
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d011      	beq.n	800bbf8 <HAL_UART_IRQHandler+0x128>
 800bbd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00b      	beq.n	800bbf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2204      	movs	r2, #4
 800bbe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbee:	f043 0202 	orr.w	r2, r3, #2
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bbf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfc:	f003 0308 	and.w	r3, r3, #8
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d017      	beq.n	800bc34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc08:	f003 0320 	and.w	r3, r3, #32
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d105      	bne.n	800bc1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc14:	4b5a      	ldr	r3, [pc, #360]	; (800bd80 <HAL_UART_IRQHandler+0x2b0>)
 800bc16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2208      	movs	r2, #8
 800bc22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc2a:	f043 0208 	orr.w	r2, r3, #8
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d012      	beq.n	800bc66 <HAL_UART_IRQHandler+0x196>
 800bc40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00c      	beq.n	800bc66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc5c:	f043 0220 	orr.w	r2, r3, #32
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 82c0 	beq.w	800c1f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc76:	f003 0320 	and.w	r3, r3, #32
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d013      	beq.n	800bca6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc82:	f003 0320 	and.w	r3, r3, #32
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d105      	bne.n	800bc96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d007      	beq.n	800bca6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcba:	2b40      	cmp	r3, #64	; 0x40
 800bcbc:	d005      	beq.n	800bcca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bcbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d04f      	beq.n	800bd6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f001 fbd4 	bl	800d478 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcda:	2b40      	cmp	r3, #64	; 0x40
 800bcdc:	d141      	bne.n	800bd62 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3308      	adds	r3, #8
 800bce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bcf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3308      	adds	r3, #8
 800bd06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd1a:	e841 2300 	strex	r3, r2, [r1]
 800bd1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1d9      	bne.n	800bcde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d013      	beq.n	800bd5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd36:	4a14      	ldr	r2, [pc, #80]	; (800bd88 <HAL_UART_IRQHandler+0x2b8>)
 800bd38:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fa f8ba 	bl	8005eb8 <HAL_DMA_Abort_IT>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d017      	beq.n	800bd7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bd54:	4610      	mov	r0, r2
 800bd56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd58:	e00f      	b.n	800bd7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fa6a 	bl	800c234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd60:	e00b      	b.n	800bd7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fa66 	bl	800c234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd68:	e007      	b.n	800bd7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa62 	bl	800c234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bd78:	e23b      	b.n	800c1f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd7a:	bf00      	nop
    return;
 800bd7c:	e239      	b.n	800c1f2 <HAL_UART_IRQHandler+0x722>
 800bd7e:	bf00      	nop
 800bd80:	10000001 	.word	0x10000001
 800bd84:	04000120 	.word	0x04000120
 800bd88:	0800d7d1 	.word	0x0800d7d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	f040 81ce 	bne.w	800c132 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd9a:	f003 0310 	and.w	r3, r3, #16
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f000 81c7 	beq.w	800c132 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bda4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bda8:	f003 0310 	and.w	r3, r3, #16
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f000 81c0 	beq.w	800c132 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2210      	movs	r2, #16
 800bdb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdc4:	2b40      	cmp	r3, #64	; 0x40
 800bdc6:	f040 813b 	bne.w	800c040 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a8b      	ldr	r2, [pc, #556]	; (800c000 <HAL_UART_IRQHandler+0x530>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d059      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a89      	ldr	r2, [pc, #548]	; (800c004 <HAL_UART_IRQHandler+0x534>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d053      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a87      	ldr	r2, [pc, #540]	; (800c008 <HAL_UART_IRQHandler+0x538>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d04d      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a85      	ldr	r2, [pc, #532]	; (800c00c <HAL_UART_IRQHandler+0x53c>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d047      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a83      	ldr	r2, [pc, #524]	; (800c010 <HAL_UART_IRQHandler+0x540>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d041      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a81      	ldr	r2, [pc, #516]	; (800c014 <HAL_UART_IRQHandler+0x544>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d03b      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a7f      	ldr	r2, [pc, #508]	; (800c018 <HAL_UART_IRQHandler+0x548>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d035      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a7d      	ldr	r2, [pc, #500]	; (800c01c <HAL_UART_IRQHandler+0x54c>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d02f      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a7b      	ldr	r2, [pc, #492]	; (800c020 <HAL_UART_IRQHandler+0x550>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d029      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a79      	ldr	r2, [pc, #484]	; (800c024 <HAL_UART_IRQHandler+0x554>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d023      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a77      	ldr	r2, [pc, #476]	; (800c028 <HAL_UART_IRQHandler+0x558>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d01d      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a75      	ldr	r2, [pc, #468]	; (800c02c <HAL_UART_IRQHandler+0x55c>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d017      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a73      	ldr	r2, [pc, #460]	; (800c030 <HAL_UART_IRQHandler+0x560>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d011      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a71      	ldr	r2, [pc, #452]	; (800c034 <HAL_UART_IRQHandler+0x564>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d00b      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a6f      	ldr	r2, [pc, #444]	; (800c038 <HAL_UART_IRQHandler+0x568>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d005      	beq.n	800be8a <HAL_UART_IRQHandler+0x3ba>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a6d      	ldr	r2, [pc, #436]	; (800c03c <HAL_UART_IRQHandler+0x56c>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d105      	bne.n	800be96 <HAL_UART_IRQHandler+0x3c6>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	b29b      	uxth	r3, r3
 800be94:	e004      	b.n	800bea0 <HAL_UART_IRQHandler+0x3d0>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 81a4 	beq.w	800c1f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800beb4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800beb8:	429a      	cmp	r2, r3
 800beba:	f080 819c 	bcs.w	800c1f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bed2:	f000 8086 	beq.w	800bfe2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bee2:	e853 3f00 	ldrex	r3, [r3]
 800bee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800beea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800beee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf04:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf10:	e841 2300 	strex	r3, r2, [r1]
 800bf14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1da      	bne.n	800bed6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3308      	adds	r3, #8
 800bf26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf32:	f023 0301 	bic.w	r3, r3, #1
 800bf36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf50:	e841 2300 	strex	r3, r2, [r1]
 800bf54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1e1      	bne.n	800bf20 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3308      	adds	r3, #8
 800bf62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf66:	e853 3f00 	ldrex	r3, [r3]
 800bf6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf80:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf88:	e841 2300 	strex	r3, r2, [r1]
 800bf8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1e3      	bne.n	800bf5c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2220      	movs	r2, #32
 800bf98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfaa:	e853 3f00 	ldrex	r3, [r3]
 800bfae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfb2:	f023 0310 	bic.w	r3, r3, #16
 800bfb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfc4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e4      	bne.n	800bfa2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7f9 fc4d 	bl	800587c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f926 	bl	800c248 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bffc:	e0fb      	b.n	800c1f6 <HAL_UART_IRQHandler+0x726>
 800bffe:	bf00      	nop
 800c000:	40020010 	.word	0x40020010
 800c004:	40020028 	.word	0x40020028
 800c008:	40020040 	.word	0x40020040
 800c00c:	40020058 	.word	0x40020058
 800c010:	40020070 	.word	0x40020070
 800c014:	40020088 	.word	0x40020088
 800c018:	400200a0 	.word	0x400200a0
 800c01c:	400200b8 	.word	0x400200b8
 800c020:	40020410 	.word	0x40020410
 800c024:	40020428 	.word	0x40020428
 800c028:	40020440 	.word	0x40020440
 800c02c:	40020458 	.word	0x40020458
 800c030:	40020470 	.word	0x40020470
 800c034:	40020488 	.word	0x40020488
 800c038:	400204a0 	.word	0x400204a0
 800c03c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 80cc 	beq.w	800c1fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c062:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 80c7 	beq.w	800c1fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	461a      	mov	r2, r3
 800c08a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c08e:	647b      	str	r3, [r7, #68]	; 0x44
 800c090:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c094:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c096:	e841 2300 	strex	r3, r2, [r1]
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d1e4      	bne.n	800c06c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3308      	adds	r3, #8
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	e853 3f00 	ldrex	r3, [r3]
 800c0b0:	623b      	str	r3, [r7, #32]
   return(result);
 800c0b2:	6a3a      	ldr	r2, [r7, #32]
 800c0b4:	4b54      	ldr	r3, [pc, #336]	; (800c208 <HAL_UART_IRQHandler+0x738>)
 800c0b6:	4013      	ands	r3, r2
 800c0b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c0c6:	633a      	str	r2, [r7, #48]	; 0x30
 800c0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ce:	e841 2300 	strex	r3, r2, [r1]
 800c0d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1e3      	bne.n	800c0a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2220      	movs	r2, #32
 800c0de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f023 0310 	bic.w	r3, r3, #16
 800c102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	461a      	mov	r2, r3
 800c10c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c110:	61fb      	str	r3, [r7, #28]
 800c112:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c114:	69b9      	ldr	r1, [r7, #24]
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	e841 2300 	strex	r3, r2, [r1]
 800c11c:	617b      	str	r3, [r7, #20]
   return(result);
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1e4      	bne.n	800c0ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f88c 	bl	800c248 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c130:	e063      	b.n	800c1fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00e      	beq.n	800c15c <HAL_UART_IRQHandler+0x68c>
 800c13e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c146:	2b00      	cmp	r3, #0
 800c148:	d008      	beq.n	800c15c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c152:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 fb7c 	bl	800d852 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c15a:	e051      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c164:	2b00      	cmp	r3, #0
 800c166:	d014      	beq.n	800c192 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c16c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c170:	2b00      	cmp	r3, #0
 800c172:	d105      	bne.n	800c180 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d008      	beq.n	800c192 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c184:	2b00      	cmp	r3, #0
 800c186:	d03a      	beq.n	800c1fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	4798      	blx	r3
    }
    return;
 800c190:	e035      	b.n	800c1fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <HAL_UART_IRQHandler+0x6e2>
 800c19e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f001 fb26 	bl	800d7fc <UART_EndTransmit_IT>
    return;
 800c1b0:	e026      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d009      	beq.n	800c1d2 <HAL_UART_IRQHandler+0x702>
 800c1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f001 fb55 	bl	800d87a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1d0:	e016      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c1d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d010      	beq.n	800c200 <HAL_UART_IRQHandler+0x730>
 800c1de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	da0c      	bge.n	800c200 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f001 fb3d 	bl	800d866 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1ec:	e008      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
      return;
 800c1ee:	bf00      	nop
 800c1f0:	e006      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
    return;
 800c1f2:	bf00      	nop
 800c1f4:	e004      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
      return;
 800c1f6:	bf00      	nop
 800c1f8:	e002      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
      return;
 800c1fa:	bf00      	nop
 800c1fc:	e000      	b.n	800c200 <HAL_UART_IRQHandler+0x730>
    return;
 800c1fe:	bf00      	nop
  }
}
 800c200:	37e8      	adds	r7, #232	; 0xe8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	effffffe 	.word	0xeffffffe

0800c20c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c214:	bf00      	nop
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c254:	bf00      	nop
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c264:	b092      	sub	sp, #72	; 0x48
 800c266:	af00      	add	r7, sp, #0
 800c268:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	689a      	ldr	r2, [r3, #8]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	431a      	orrs	r2, r3
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	431a      	orrs	r2, r3
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	69db      	ldr	r3, [r3, #28]
 800c284:	4313      	orrs	r3, r2
 800c286:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	4bbe      	ldr	r3, [pc, #760]	; (800c588 <UART_SetConfig+0x328>)
 800c290:	4013      	ands	r3, r2
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	6812      	ldr	r2, [r2, #0]
 800c296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c298:	430b      	orrs	r3, r1
 800c29a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	68da      	ldr	r2, [r3, #12]
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	430a      	orrs	r2, r1
 800c2b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4ab3      	ldr	r2, [pc, #716]	; (800c58c <UART_SetConfig+0x32c>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d004      	beq.n	800c2cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	4baf      	ldr	r3, [pc, #700]	; (800c590 <UART_SetConfig+0x330>)
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	6812      	ldr	r2, [r2, #0]
 800c2da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e6:	f023 010f 	bic.w	r1, r3, #15
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4aa6      	ldr	r2, [pc, #664]	; (800c594 <UART_SetConfig+0x334>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d177      	bne.n	800c3f0 <UART_SetConfig+0x190>
 800c300:	4ba5      	ldr	r3, [pc, #660]	; (800c598 <UART_SetConfig+0x338>)
 800c302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c304:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c308:	2b28      	cmp	r3, #40	; 0x28
 800c30a:	d86d      	bhi.n	800c3e8 <UART_SetConfig+0x188>
 800c30c:	a201      	add	r2, pc, #4	; (adr r2, 800c314 <UART_SetConfig+0xb4>)
 800c30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c312:	bf00      	nop
 800c314:	0800c3b9 	.word	0x0800c3b9
 800c318:	0800c3e9 	.word	0x0800c3e9
 800c31c:	0800c3e9 	.word	0x0800c3e9
 800c320:	0800c3e9 	.word	0x0800c3e9
 800c324:	0800c3e9 	.word	0x0800c3e9
 800c328:	0800c3e9 	.word	0x0800c3e9
 800c32c:	0800c3e9 	.word	0x0800c3e9
 800c330:	0800c3e9 	.word	0x0800c3e9
 800c334:	0800c3c1 	.word	0x0800c3c1
 800c338:	0800c3e9 	.word	0x0800c3e9
 800c33c:	0800c3e9 	.word	0x0800c3e9
 800c340:	0800c3e9 	.word	0x0800c3e9
 800c344:	0800c3e9 	.word	0x0800c3e9
 800c348:	0800c3e9 	.word	0x0800c3e9
 800c34c:	0800c3e9 	.word	0x0800c3e9
 800c350:	0800c3e9 	.word	0x0800c3e9
 800c354:	0800c3c9 	.word	0x0800c3c9
 800c358:	0800c3e9 	.word	0x0800c3e9
 800c35c:	0800c3e9 	.word	0x0800c3e9
 800c360:	0800c3e9 	.word	0x0800c3e9
 800c364:	0800c3e9 	.word	0x0800c3e9
 800c368:	0800c3e9 	.word	0x0800c3e9
 800c36c:	0800c3e9 	.word	0x0800c3e9
 800c370:	0800c3e9 	.word	0x0800c3e9
 800c374:	0800c3d1 	.word	0x0800c3d1
 800c378:	0800c3e9 	.word	0x0800c3e9
 800c37c:	0800c3e9 	.word	0x0800c3e9
 800c380:	0800c3e9 	.word	0x0800c3e9
 800c384:	0800c3e9 	.word	0x0800c3e9
 800c388:	0800c3e9 	.word	0x0800c3e9
 800c38c:	0800c3e9 	.word	0x0800c3e9
 800c390:	0800c3e9 	.word	0x0800c3e9
 800c394:	0800c3d9 	.word	0x0800c3d9
 800c398:	0800c3e9 	.word	0x0800c3e9
 800c39c:	0800c3e9 	.word	0x0800c3e9
 800c3a0:	0800c3e9 	.word	0x0800c3e9
 800c3a4:	0800c3e9 	.word	0x0800c3e9
 800c3a8:	0800c3e9 	.word	0x0800c3e9
 800c3ac:	0800c3e9 	.word	0x0800c3e9
 800c3b0:	0800c3e9 	.word	0x0800c3e9
 800c3b4:	0800c3e1 	.word	0x0800c3e1
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3be:	e326      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c6:	e322      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c3c8:	2308      	movs	r3, #8
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ce:	e31e      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c3d0:	2310      	movs	r3, #16
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d6:	e31a      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c3d8:	2320      	movs	r3, #32
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3de:	e316      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c3e0:	2340      	movs	r3, #64	; 0x40
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e6:	e312      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c3e8:	2380      	movs	r3, #128	; 0x80
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ee:	e30e      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a69      	ldr	r2, [pc, #420]	; (800c59c <UART_SetConfig+0x33c>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d130      	bne.n	800c45c <UART_SetConfig+0x1fc>
 800c3fa:	4b67      	ldr	r3, [pc, #412]	; (800c598 <UART_SetConfig+0x338>)
 800c3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3fe:	f003 0307 	and.w	r3, r3, #7
 800c402:	2b05      	cmp	r3, #5
 800c404:	d826      	bhi.n	800c454 <UART_SetConfig+0x1f4>
 800c406:	a201      	add	r2, pc, #4	; (adr r2, 800c40c <UART_SetConfig+0x1ac>)
 800c408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40c:	0800c425 	.word	0x0800c425
 800c410:	0800c42d 	.word	0x0800c42d
 800c414:	0800c435 	.word	0x0800c435
 800c418:	0800c43d 	.word	0x0800c43d
 800c41c:	0800c445 	.word	0x0800c445
 800c420:	0800c44d 	.word	0x0800c44d
 800c424:	2300      	movs	r3, #0
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42a:	e2f0      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c42c:	2304      	movs	r3, #4
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c432:	e2ec      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c434:	2308      	movs	r3, #8
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e2e8      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c43c:	2310      	movs	r3, #16
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e2e4      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c444:	2320      	movs	r3, #32
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e2e0      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c44c:	2340      	movs	r3, #64	; 0x40
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e2dc      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c454:	2380      	movs	r3, #128	; 0x80
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e2d8      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a4f      	ldr	r2, [pc, #316]	; (800c5a0 <UART_SetConfig+0x340>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d130      	bne.n	800c4c8 <UART_SetConfig+0x268>
 800c466:	4b4c      	ldr	r3, [pc, #304]	; (800c598 <UART_SetConfig+0x338>)
 800c468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c46a:	f003 0307 	and.w	r3, r3, #7
 800c46e:	2b05      	cmp	r3, #5
 800c470:	d826      	bhi.n	800c4c0 <UART_SetConfig+0x260>
 800c472:	a201      	add	r2, pc, #4	; (adr r2, 800c478 <UART_SetConfig+0x218>)
 800c474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c478:	0800c491 	.word	0x0800c491
 800c47c:	0800c499 	.word	0x0800c499
 800c480:	0800c4a1 	.word	0x0800c4a1
 800c484:	0800c4a9 	.word	0x0800c4a9
 800c488:	0800c4b1 	.word	0x0800c4b1
 800c48c:	0800c4b9 	.word	0x0800c4b9
 800c490:	2300      	movs	r3, #0
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c496:	e2ba      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c498:	2304      	movs	r3, #4
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e2b6      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c4a0:	2308      	movs	r3, #8
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e2b2      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c4a8:	2310      	movs	r3, #16
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e2ae      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c4b0:	2320      	movs	r3, #32
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e2aa      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c4b8:	2340      	movs	r3, #64	; 0x40
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e2a6      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c4c0:	2380      	movs	r3, #128	; 0x80
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e2a2      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a35      	ldr	r2, [pc, #212]	; (800c5a4 <UART_SetConfig+0x344>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d130      	bne.n	800c534 <UART_SetConfig+0x2d4>
 800c4d2:	4b31      	ldr	r3, [pc, #196]	; (800c598 <UART_SetConfig+0x338>)
 800c4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	2b05      	cmp	r3, #5
 800c4dc:	d826      	bhi.n	800c52c <UART_SetConfig+0x2cc>
 800c4de:	a201      	add	r2, pc, #4	; (adr r2, 800c4e4 <UART_SetConfig+0x284>)
 800c4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e4:	0800c4fd 	.word	0x0800c4fd
 800c4e8:	0800c505 	.word	0x0800c505
 800c4ec:	0800c50d 	.word	0x0800c50d
 800c4f0:	0800c515 	.word	0x0800c515
 800c4f4:	0800c51d 	.word	0x0800c51d
 800c4f8:	0800c525 	.word	0x0800c525
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c502:	e284      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c504:	2304      	movs	r3, #4
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50a:	e280      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c50c:	2308      	movs	r3, #8
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c512:	e27c      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c514:	2310      	movs	r3, #16
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e278      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c51c:	2320      	movs	r3, #32
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e274      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c524:	2340      	movs	r3, #64	; 0x40
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e270      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c52c:	2380      	movs	r3, #128	; 0x80
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e26c      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a1b      	ldr	r2, [pc, #108]	; (800c5a8 <UART_SetConfig+0x348>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d142      	bne.n	800c5c4 <UART_SetConfig+0x364>
 800c53e:	4b16      	ldr	r3, [pc, #88]	; (800c598 <UART_SetConfig+0x338>)
 800c540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c542:	f003 0307 	and.w	r3, r3, #7
 800c546:	2b05      	cmp	r3, #5
 800c548:	d838      	bhi.n	800c5bc <UART_SetConfig+0x35c>
 800c54a:	a201      	add	r2, pc, #4	; (adr r2, 800c550 <UART_SetConfig+0x2f0>)
 800c54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c550:	0800c569 	.word	0x0800c569
 800c554:	0800c571 	.word	0x0800c571
 800c558:	0800c579 	.word	0x0800c579
 800c55c:	0800c581 	.word	0x0800c581
 800c560:	0800c5ad 	.word	0x0800c5ad
 800c564:	0800c5b5 	.word	0x0800c5b5
 800c568:	2300      	movs	r3, #0
 800c56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56e:	e24e      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c570:	2304      	movs	r3, #4
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c576:	e24a      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c578:	2308      	movs	r3, #8
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e246      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c580:	2310      	movs	r3, #16
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e242      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c588:	cfff69f3 	.word	0xcfff69f3
 800c58c:	58000c00 	.word	0x58000c00
 800c590:	11fff4ff 	.word	0x11fff4ff
 800c594:	40011000 	.word	0x40011000
 800c598:	58024400 	.word	0x58024400
 800c59c:	40004400 	.word	0x40004400
 800c5a0:	40004800 	.word	0x40004800
 800c5a4:	40004c00 	.word	0x40004c00
 800c5a8:	40005000 	.word	0x40005000
 800c5ac:	2320      	movs	r3, #32
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b2:	e22c      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c5b4:	2340      	movs	r3, #64	; 0x40
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ba:	e228      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c5bc:	2380      	movs	r3, #128	; 0x80
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c2:	e224      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4ab1      	ldr	r2, [pc, #708]	; (800c890 <UART_SetConfig+0x630>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d176      	bne.n	800c6bc <UART_SetConfig+0x45c>
 800c5ce:	4bb1      	ldr	r3, [pc, #708]	; (800c894 <UART_SetConfig+0x634>)
 800c5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5d6:	2b28      	cmp	r3, #40	; 0x28
 800c5d8:	d86c      	bhi.n	800c6b4 <UART_SetConfig+0x454>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <UART_SetConfig+0x380>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c685 	.word	0x0800c685
 800c5e4:	0800c6b5 	.word	0x0800c6b5
 800c5e8:	0800c6b5 	.word	0x0800c6b5
 800c5ec:	0800c6b5 	.word	0x0800c6b5
 800c5f0:	0800c6b5 	.word	0x0800c6b5
 800c5f4:	0800c6b5 	.word	0x0800c6b5
 800c5f8:	0800c6b5 	.word	0x0800c6b5
 800c5fc:	0800c6b5 	.word	0x0800c6b5
 800c600:	0800c68d 	.word	0x0800c68d
 800c604:	0800c6b5 	.word	0x0800c6b5
 800c608:	0800c6b5 	.word	0x0800c6b5
 800c60c:	0800c6b5 	.word	0x0800c6b5
 800c610:	0800c6b5 	.word	0x0800c6b5
 800c614:	0800c6b5 	.word	0x0800c6b5
 800c618:	0800c6b5 	.word	0x0800c6b5
 800c61c:	0800c6b5 	.word	0x0800c6b5
 800c620:	0800c695 	.word	0x0800c695
 800c624:	0800c6b5 	.word	0x0800c6b5
 800c628:	0800c6b5 	.word	0x0800c6b5
 800c62c:	0800c6b5 	.word	0x0800c6b5
 800c630:	0800c6b5 	.word	0x0800c6b5
 800c634:	0800c6b5 	.word	0x0800c6b5
 800c638:	0800c6b5 	.word	0x0800c6b5
 800c63c:	0800c6b5 	.word	0x0800c6b5
 800c640:	0800c69d 	.word	0x0800c69d
 800c644:	0800c6b5 	.word	0x0800c6b5
 800c648:	0800c6b5 	.word	0x0800c6b5
 800c64c:	0800c6b5 	.word	0x0800c6b5
 800c650:	0800c6b5 	.word	0x0800c6b5
 800c654:	0800c6b5 	.word	0x0800c6b5
 800c658:	0800c6b5 	.word	0x0800c6b5
 800c65c:	0800c6b5 	.word	0x0800c6b5
 800c660:	0800c6a5 	.word	0x0800c6a5
 800c664:	0800c6b5 	.word	0x0800c6b5
 800c668:	0800c6b5 	.word	0x0800c6b5
 800c66c:	0800c6b5 	.word	0x0800c6b5
 800c670:	0800c6b5 	.word	0x0800c6b5
 800c674:	0800c6b5 	.word	0x0800c6b5
 800c678:	0800c6b5 	.word	0x0800c6b5
 800c67c:	0800c6b5 	.word	0x0800c6b5
 800c680:	0800c6ad 	.word	0x0800c6ad
 800c684:	2301      	movs	r3, #1
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68a:	e1c0      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c68c:	2304      	movs	r3, #4
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e1bc      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c694:	2308      	movs	r3, #8
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e1b8      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c69c:	2310      	movs	r3, #16
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e1b4      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c6a4:	2320      	movs	r3, #32
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6aa:	e1b0      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c6ac:	2340      	movs	r3, #64	; 0x40
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6b2:	e1ac      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c6b4:	2380      	movs	r3, #128	; 0x80
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ba:	e1a8      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a75      	ldr	r2, [pc, #468]	; (800c898 <UART_SetConfig+0x638>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d130      	bne.n	800c728 <UART_SetConfig+0x4c8>
 800c6c6:	4b73      	ldr	r3, [pc, #460]	; (800c894 <UART_SetConfig+0x634>)
 800c6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	2b05      	cmp	r3, #5
 800c6d0:	d826      	bhi.n	800c720 <UART_SetConfig+0x4c0>
 800c6d2:	a201      	add	r2, pc, #4	; (adr r2, 800c6d8 <UART_SetConfig+0x478>)
 800c6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d8:	0800c6f1 	.word	0x0800c6f1
 800c6dc:	0800c6f9 	.word	0x0800c6f9
 800c6e0:	0800c701 	.word	0x0800c701
 800c6e4:	0800c709 	.word	0x0800c709
 800c6e8:	0800c711 	.word	0x0800c711
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e18a      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c6f8:	2304      	movs	r3, #4
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e186      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c700:	2308      	movs	r3, #8
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e182      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c708:	2310      	movs	r3, #16
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e17e      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c710:	2320      	movs	r3, #32
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e17a      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e176      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c720:	2380      	movs	r3, #128	; 0x80
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e172      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a5b      	ldr	r2, [pc, #364]	; (800c89c <UART_SetConfig+0x63c>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d130      	bne.n	800c794 <UART_SetConfig+0x534>
 800c732:	4b58      	ldr	r3, [pc, #352]	; (800c894 <UART_SetConfig+0x634>)
 800c734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c736:	f003 0307 	and.w	r3, r3, #7
 800c73a:	2b05      	cmp	r3, #5
 800c73c:	d826      	bhi.n	800c78c <UART_SetConfig+0x52c>
 800c73e:	a201      	add	r2, pc, #4	; (adr r2, 800c744 <UART_SetConfig+0x4e4>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c75d 	.word	0x0800c75d
 800c748:	0800c765 	.word	0x0800c765
 800c74c:	0800c76d 	.word	0x0800c76d
 800c750:	0800c775 	.word	0x0800c775
 800c754:	0800c77d 	.word	0x0800c77d
 800c758:	0800c785 	.word	0x0800c785
 800c75c:	2300      	movs	r3, #0
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e154      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c764:	2304      	movs	r3, #4
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e150      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c76c:	2308      	movs	r3, #8
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e14c      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c774:	2310      	movs	r3, #16
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e148      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c77c:	2320      	movs	r3, #32
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c782:	e144      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c784:	2340      	movs	r3, #64	; 0x40
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78a:	e140      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c78c:	2380      	movs	r3, #128	; 0x80
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e13c      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a41      	ldr	r2, [pc, #260]	; (800c8a0 <UART_SetConfig+0x640>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	f040 8082 	bne.w	800c8a4 <UART_SetConfig+0x644>
 800c7a0:	4b3c      	ldr	r3, [pc, #240]	; (800c894 <UART_SetConfig+0x634>)
 800c7a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7a8:	2b28      	cmp	r3, #40	; 0x28
 800c7aa:	d86d      	bhi.n	800c888 <UART_SetConfig+0x628>
 800c7ac:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <UART_SetConfig+0x554>)
 800c7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b2:	bf00      	nop
 800c7b4:	0800c859 	.word	0x0800c859
 800c7b8:	0800c889 	.word	0x0800c889
 800c7bc:	0800c889 	.word	0x0800c889
 800c7c0:	0800c889 	.word	0x0800c889
 800c7c4:	0800c889 	.word	0x0800c889
 800c7c8:	0800c889 	.word	0x0800c889
 800c7cc:	0800c889 	.word	0x0800c889
 800c7d0:	0800c889 	.word	0x0800c889
 800c7d4:	0800c861 	.word	0x0800c861
 800c7d8:	0800c889 	.word	0x0800c889
 800c7dc:	0800c889 	.word	0x0800c889
 800c7e0:	0800c889 	.word	0x0800c889
 800c7e4:	0800c889 	.word	0x0800c889
 800c7e8:	0800c889 	.word	0x0800c889
 800c7ec:	0800c889 	.word	0x0800c889
 800c7f0:	0800c889 	.word	0x0800c889
 800c7f4:	0800c869 	.word	0x0800c869
 800c7f8:	0800c889 	.word	0x0800c889
 800c7fc:	0800c889 	.word	0x0800c889
 800c800:	0800c889 	.word	0x0800c889
 800c804:	0800c889 	.word	0x0800c889
 800c808:	0800c889 	.word	0x0800c889
 800c80c:	0800c889 	.word	0x0800c889
 800c810:	0800c889 	.word	0x0800c889
 800c814:	0800c871 	.word	0x0800c871
 800c818:	0800c889 	.word	0x0800c889
 800c81c:	0800c889 	.word	0x0800c889
 800c820:	0800c889 	.word	0x0800c889
 800c824:	0800c889 	.word	0x0800c889
 800c828:	0800c889 	.word	0x0800c889
 800c82c:	0800c889 	.word	0x0800c889
 800c830:	0800c889 	.word	0x0800c889
 800c834:	0800c879 	.word	0x0800c879
 800c838:	0800c889 	.word	0x0800c889
 800c83c:	0800c889 	.word	0x0800c889
 800c840:	0800c889 	.word	0x0800c889
 800c844:	0800c889 	.word	0x0800c889
 800c848:	0800c889 	.word	0x0800c889
 800c84c:	0800c889 	.word	0x0800c889
 800c850:	0800c889 	.word	0x0800c889
 800c854:	0800c881 	.word	0x0800c881
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85e:	e0d6      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c860:	2304      	movs	r3, #4
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c866:	e0d2      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c868:	2308      	movs	r3, #8
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86e:	e0ce      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c870:	2310      	movs	r3, #16
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c876:	e0ca      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c878:	2320      	movs	r3, #32
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87e:	e0c6      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c880:	2340      	movs	r3, #64	; 0x40
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c886:	e0c2      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c888:	2380      	movs	r3, #128	; 0x80
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88e:	e0be      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c890:	40011400 	.word	0x40011400
 800c894:	58024400 	.word	0x58024400
 800c898:	40007800 	.word	0x40007800
 800c89c:	40007c00 	.word	0x40007c00
 800c8a0:	40011800 	.word	0x40011800
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4aad      	ldr	r2, [pc, #692]	; (800cb60 <UART_SetConfig+0x900>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d176      	bne.n	800c99c <UART_SetConfig+0x73c>
 800c8ae:	4bad      	ldr	r3, [pc, #692]	; (800cb64 <UART_SetConfig+0x904>)
 800c8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8b6:	2b28      	cmp	r3, #40	; 0x28
 800c8b8:	d86c      	bhi.n	800c994 <UART_SetConfig+0x734>
 800c8ba:	a201      	add	r2, pc, #4	; (adr r2, 800c8c0 <UART_SetConfig+0x660>)
 800c8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c0:	0800c965 	.word	0x0800c965
 800c8c4:	0800c995 	.word	0x0800c995
 800c8c8:	0800c995 	.word	0x0800c995
 800c8cc:	0800c995 	.word	0x0800c995
 800c8d0:	0800c995 	.word	0x0800c995
 800c8d4:	0800c995 	.word	0x0800c995
 800c8d8:	0800c995 	.word	0x0800c995
 800c8dc:	0800c995 	.word	0x0800c995
 800c8e0:	0800c96d 	.word	0x0800c96d
 800c8e4:	0800c995 	.word	0x0800c995
 800c8e8:	0800c995 	.word	0x0800c995
 800c8ec:	0800c995 	.word	0x0800c995
 800c8f0:	0800c995 	.word	0x0800c995
 800c8f4:	0800c995 	.word	0x0800c995
 800c8f8:	0800c995 	.word	0x0800c995
 800c8fc:	0800c995 	.word	0x0800c995
 800c900:	0800c975 	.word	0x0800c975
 800c904:	0800c995 	.word	0x0800c995
 800c908:	0800c995 	.word	0x0800c995
 800c90c:	0800c995 	.word	0x0800c995
 800c910:	0800c995 	.word	0x0800c995
 800c914:	0800c995 	.word	0x0800c995
 800c918:	0800c995 	.word	0x0800c995
 800c91c:	0800c995 	.word	0x0800c995
 800c920:	0800c97d 	.word	0x0800c97d
 800c924:	0800c995 	.word	0x0800c995
 800c928:	0800c995 	.word	0x0800c995
 800c92c:	0800c995 	.word	0x0800c995
 800c930:	0800c995 	.word	0x0800c995
 800c934:	0800c995 	.word	0x0800c995
 800c938:	0800c995 	.word	0x0800c995
 800c93c:	0800c995 	.word	0x0800c995
 800c940:	0800c985 	.word	0x0800c985
 800c944:	0800c995 	.word	0x0800c995
 800c948:	0800c995 	.word	0x0800c995
 800c94c:	0800c995 	.word	0x0800c995
 800c950:	0800c995 	.word	0x0800c995
 800c954:	0800c995 	.word	0x0800c995
 800c958:	0800c995 	.word	0x0800c995
 800c95c:	0800c995 	.word	0x0800c995
 800c960:	0800c98d 	.word	0x0800c98d
 800c964:	2301      	movs	r3, #1
 800c966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96a:	e050      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c972:	e04c      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97a:	e048      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c982:	e044      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c984:	2320      	movs	r3, #32
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98a:	e040      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c98c:	2340      	movs	r3, #64	; 0x40
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e03c      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99a:	e038      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a71      	ldr	r2, [pc, #452]	; (800cb68 <UART_SetConfig+0x908>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d130      	bne.n	800ca08 <UART_SetConfig+0x7a8>
 800c9a6:	4b6f      	ldr	r3, [pc, #444]	; (800cb64 <UART_SetConfig+0x904>)
 800c9a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9aa:	f003 0307 	and.w	r3, r3, #7
 800c9ae:	2b05      	cmp	r3, #5
 800c9b0:	d826      	bhi.n	800ca00 <UART_SetConfig+0x7a0>
 800c9b2:	a201      	add	r2, pc, #4	; (adr r2, 800c9b8 <UART_SetConfig+0x758>)
 800c9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b8:	0800c9d1 	.word	0x0800c9d1
 800c9bc:	0800c9d9 	.word	0x0800c9d9
 800c9c0:	0800c9e1 	.word	0x0800c9e1
 800c9c4:	0800c9e9 	.word	0x0800c9e9
 800c9c8:	0800c9f1 	.word	0x0800c9f1
 800c9cc:	0800c9f9 	.word	0x0800c9f9
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d6:	e01a      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c9d8:	2304      	movs	r3, #4
 800c9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9de:	e016      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c9e0:	2308      	movs	r3, #8
 800c9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e6:	e012      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c9e8:	2310      	movs	r3, #16
 800c9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ee:	e00e      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c9f0:	2320      	movs	r3, #32
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e00a      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800c9f8:	2340      	movs	r3, #64	; 0x40
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e006      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800ca00:	2380      	movs	r3, #128	; 0x80
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e002      	b.n	800ca0e <UART_SetConfig+0x7ae>
 800ca08:	2380      	movs	r3, #128	; 0x80
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a55      	ldr	r2, [pc, #340]	; (800cb68 <UART_SetConfig+0x908>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	f040 80f8 	bne.w	800cc0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca1e:	2b20      	cmp	r3, #32
 800ca20:	dc46      	bgt.n	800cab0 <UART_SetConfig+0x850>
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	db75      	blt.n	800cb12 <UART_SetConfig+0x8b2>
 800ca26:	3b02      	subs	r3, #2
 800ca28:	2b1e      	cmp	r3, #30
 800ca2a:	d872      	bhi.n	800cb12 <UART_SetConfig+0x8b2>
 800ca2c:	a201      	add	r2, pc, #4	; (adr r2, 800ca34 <UART_SetConfig+0x7d4>)
 800ca2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca32:	bf00      	nop
 800ca34:	0800cab7 	.word	0x0800cab7
 800ca38:	0800cb13 	.word	0x0800cb13
 800ca3c:	0800cabf 	.word	0x0800cabf
 800ca40:	0800cb13 	.word	0x0800cb13
 800ca44:	0800cb13 	.word	0x0800cb13
 800ca48:	0800cb13 	.word	0x0800cb13
 800ca4c:	0800cacf 	.word	0x0800cacf
 800ca50:	0800cb13 	.word	0x0800cb13
 800ca54:	0800cb13 	.word	0x0800cb13
 800ca58:	0800cb13 	.word	0x0800cb13
 800ca5c:	0800cb13 	.word	0x0800cb13
 800ca60:	0800cb13 	.word	0x0800cb13
 800ca64:	0800cb13 	.word	0x0800cb13
 800ca68:	0800cb13 	.word	0x0800cb13
 800ca6c:	0800cadf 	.word	0x0800cadf
 800ca70:	0800cb13 	.word	0x0800cb13
 800ca74:	0800cb13 	.word	0x0800cb13
 800ca78:	0800cb13 	.word	0x0800cb13
 800ca7c:	0800cb13 	.word	0x0800cb13
 800ca80:	0800cb13 	.word	0x0800cb13
 800ca84:	0800cb13 	.word	0x0800cb13
 800ca88:	0800cb13 	.word	0x0800cb13
 800ca8c:	0800cb13 	.word	0x0800cb13
 800ca90:	0800cb13 	.word	0x0800cb13
 800ca94:	0800cb13 	.word	0x0800cb13
 800ca98:	0800cb13 	.word	0x0800cb13
 800ca9c:	0800cb13 	.word	0x0800cb13
 800caa0:	0800cb13 	.word	0x0800cb13
 800caa4:	0800cb13 	.word	0x0800cb13
 800caa8:	0800cb13 	.word	0x0800cb13
 800caac:	0800cb05 	.word	0x0800cb05
 800cab0:	2b40      	cmp	r3, #64	; 0x40
 800cab2:	d02a      	beq.n	800cb0a <UART_SetConfig+0x8aa>
 800cab4:	e02d      	b.n	800cb12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cab6:	f7fc ff87 	bl	80099c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800caba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cabc:	e02f      	b.n	800cb1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cabe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fc ff96 	bl	80099f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cacc:	e027      	b.n	800cb1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cace:	f107 0318 	add.w	r3, r7, #24
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fd f8e2 	bl	8009c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cadc:	e01f      	b.n	800cb1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cade:	4b21      	ldr	r3, [pc, #132]	; (800cb64 <UART_SetConfig+0x904>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0320 	and.w	r3, r3, #32
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d009      	beq.n	800cafe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800caea:	4b1e      	ldr	r3, [pc, #120]	; (800cb64 <UART_SetConfig+0x904>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	08db      	lsrs	r3, r3, #3
 800caf0:	f003 0303 	and.w	r3, r3, #3
 800caf4:	4a1d      	ldr	r2, [pc, #116]	; (800cb6c <UART_SetConfig+0x90c>)
 800caf6:	fa22 f303 	lsr.w	r3, r2, r3
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cafc:	e00f      	b.n	800cb1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cafe:	4b1b      	ldr	r3, [pc, #108]	; (800cb6c <UART_SetConfig+0x90c>)
 800cb00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb02:	e00c      	b.n	800cb1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb04:	4b1a      	ldr	r3, [pc, #104]	; (800cb70 <UART_SetConfig+0x910>)
 800cb06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb08:	e009      	b.n	800cb1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb10:	e005      	b.n	800cb1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 81ee 	beq.w	800cf02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2a:	4a12      	ldr	r2, [pc, #72]	; (800cb74 <UART_SetConfig+0x914>)
 800cb2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb30:	461a      	mov	r2, r3
 800cb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb34:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	4413      	add	r3, r2
 800cb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d305      	bcc.n	800cb56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d910      	bls.n	800cb78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cb5c:	e1d1      	b.n	800cf02 <UART_SetConfig+0xca2>
 800cb5e:	bf00      	nop
 800cb60:	40011c00 	.word	0x40011c00
 800cb64:	58024400 	.word	0x58024400
 800cb68:	58000c00 	.word	0x58000c00
 800cb6c:	03d09000 	.word	0x03d09000
 800cb70:	003d0900 	.word	0x003d0900
 800cb74:	0800e144 	.word	0x0800e144
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	60bb      	str	r3, [r7, #8]
 800cb7e:	60fa      	str	r2, [r7, #12]
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb84:	4ac0      	ldr	r2, [pc, #768]	; (800ce88 <UART_SetConfig+0xc28>)
 800cb86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	607a      	str	r2, [r7, #4]
 800cb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb9a:	f7f3 fbc1 	bl	8000320 <__aeabi_uldivmod>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	4610      	mov	r0, r2
 800cba4:	4619      	mov	r1, r3
 800cba6:	f04f 0200 	mov.w	r2, #0
 800cbaa:	f04f 0300 	mov.w	r3, #0
 800cbae:	020b      	lsls	r3, r1, #8
 800cbb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbb4:	0202      	lsls	r2, r0, #8
 800cbb6:	6979      	ldr	r1, [r7, #20]
 800cbb8:	6849      	ldr	r1, [r1, #4]
 800cbba:	0849      	lsrs	r1, r1, #1
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	eb12 0804 	adds.w	r8, r2, r4
 800cbc6:	eb43 0905 	adc.w	r9, r3, r5
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	469a      	mov	sl, r3
 800cbd2:	4693      	mov	fp, r2
 800cbd4:	4652      	mov	r2, sl
 800cbd6:	465b      	mov	r3, fp
 800cbd8:	4640      	mov	r0, r8
 800cbda:	4649      	mov	r1, r9
 800cbdc:	f7f3 fba0 	bl	8000320 <__aeabi_uldivmod>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbee:	d308      	bcc.n	800cc02 <UART_SetConfig+0x9a2>
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbf6:	d204      	bcs.n	800cc02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbfe:	60da      	str	r2, [r3, #12]
 800cc00:	e17f      	b.n	800cf02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc08:	e17b      	b.n	800cf02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	69db      	ldr	r3, [r3, #28]
 800cc0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc12:	f040 80bd 	bne.w	800cd90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cc16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc1a:	2b20      	cmp	r3, #32
 800cc1c:	dc48      	bgt.n	800ccb0 <UART_SetConfig+0xa50>
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	db7b      	blt.n	800cd1a <UART_SetConfig+0xaba>
 800cc22:	2b20      	cmp	r3, #32
 800cc24:	d879      	bhi.n	800cd1a <UART_SetConfig+0xaba>
 800cc26:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <UART_SetConfig+0x9cc>)
 800cc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2c:	0800ccb7 	.word	0x0800ccb7
 800cc30:	0800ccbf 	.word	0x0800ccbf
 800cc34:	0800cd1b 	.word	0x0800cd1b
 800cc38:	0800cd1b 	.word	0x0800cd1b
 800cc3c:	0800ccc7 	.word	0x0800ccc7
 800cc40:	0800cd1b 	.word	0x0800cd1b
 800cc44:	0800cd1b 	.word	0x0800cd1b
 800cc48:	0800cd1b 	.word	0x0800cd1b
 800cc4c:	0800ccd7 	.word	0x0800ccd7
 800cc50:	0800cd1b 	.word	0x0800cd1b
 800cc54:	0800cd1b 	.word	0x0800cd1b
 800cc58:	0800cd1b 	.word	0x0800cd1b
 800cc5c:	0800cd1b 	.word	0x0800cd1b
 800cc60:	0800cd1b 	.word	0x0800cd1b
 800cc64:	0800cd1b 	.word	0x0800cd1b
 800cc68:	0800cd1b 	.word	0x0800cd1b
 800cc6c:	0800cce7 	.word	0x0800cce7
 800cc70:	0800cd1b 	.word	0x0800cd1b
 800cc74:	0800cd1b 	.word	0x0800cd1b
 800cc78:	0800cd1b 	.word	0x0800cd1b
 800cc7c:	0800cd1b 	.word	0x0800cd1b
 800cc80:	0800cd1b 	.word	0x0800cd1b
 800cc84:	0800cd1b 	.word	0x0800cd1b
 800cc88:	0800cd1b 	.word	0x0800cd1b
 800cc8c:	0800cd1b 	.word	0x0800cd1b
 800cc90:	0800cd1b 	.word	0x0800cd1b
 800cc94:	0800cd1b 	.word	0x0800cd1b
 800cc98:	0800cd1b 	.word	0x0800cd1b
 800cc9c:	0800cd1b 	.word	0x0800cd1b
 800cca0:	0800cd1b 	.word	0x0800cd1b
 800cca4:	0800cd1b 	.word	0x0800cd1b
 800cca8:	0800cd1b 	.word	0x0800cd1b
 800ccac:	0800cd0d 	.word	0x0800cd0d
 800ccb0:	2b40      	cmp	r3, #64	; 0x40
 800ccb2:	d02e      	beq.n	800cd12 <UART_SetConfig+0xab2>
 800ccb4:	e031      	b.n	800cd1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccb6:	f7fb ff61 	bl	8008b7c <HAL_RCC_GetPCLK1Freq>
 800ccba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccbc:	e033      	b.n	800cd26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccbe:	f7fb ff73 	bl	8008ba8 <HAL_RCC_GetPCLK2Freq>
 800ccc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ccc4:	e02f      	b.n	800cd26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7fc fe92 	bl	80099f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccd4:	e027      	b.n	800cd26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccd6:	f107 0318 	add.w	r3, r7, #24
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fc ffde 	bl	8009c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce4:	e01f      	b.n	800cd26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cce6:	4b69      	ldr	r3, [pc, #420]	; (800ce8c <UART_SetConfig+0xc2c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 0320 	and.w	r3, r3, #32
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d009      	beq.n	800cd06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ccf2:	4b66      	ldr	r3, [pc, #408]	; (800ce8c <UART_SetConfig+0xc2c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	08db      	lsrs	r3, r3, #3
 800ccf8:	f003 0303 	and.w	r3, r3, #3
 800ccfc:	4a64      	ldr	r2, [pc, #400]	; (800ce90 <UART_SetConfig+0xc30>)
 800ccfe:	fa22 f303 	lsr.w	r3, r2, r3
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd04:	e00f      	b.n	800cd26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cd06:	4b62      	ldr	r3, [pc, #392]	; (800ce90 <UART_SetConfig+0xc30>)
 800cd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0a:	e00c      	b.n	800cd26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd0c:	4b61      	ldr	r3, [pc, #388]	; (800ce94 <UART_SetConfig+0xc34>)
 800cd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd10:	e009      	b.n	800cd26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd18:	e005      	b.n	800cd26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 80ea 	beq.w	800cf02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd32:	4a55      	ldr	r2, [pc, #340]	; (800ce88 <UART_SetConfig+0xc28>)
 800cd34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd38:	461a      	mov	r2, r3
 800cd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd40:	005a      	lsls	r2, r3, #1
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	085b      	lsrs	r3, r3, #1
 800cd48:	441a      	add	r2, r3
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	2b0f      	cmp	r3, #15
 800cd58:	d916      	bls.n	800cd88 <UART_SetConfig+0xb28>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd60:	d212      	bcs.n	800cd88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	f023 030f 	bic.w	r3, r3, #15
 800cd6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	085b      	lsrs	r3, r3, #1
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cd84:	60da      	str	r2, [r3, #12]
 800cd86:	e0bc      	b.n	800cf02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cd8e:	e0b8      	b.n	800cf02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cd94:	2b20      	cmp	r3, #32
 800cd96:	dc4b      	bgt.n	800ce30 <UART_SetConfig+0xbd0>
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f2c0 8087 	blt.w	800ceac <UART_SetConfig+0xc4c>
 800cd9e:	2b20      	cmp	r3, #32
 800cda0:	f200 8084 	bhi.w	800ceac <UART_SetConfig+0xc4c>
 800cda4:	a201      	add	r2, pc, #4	; (adr r2, 800cdac <UART_SetConfig+0xb4c>)
 800cda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdaa:	bf00      	nop
 800cdac:	0800ce37 	.word	0x0800ce37
 800cdb0:	0800ce3f 	.word	0x0800ce3f
 800cdb4:	0800cead 	.word	0x0800cead
 800cdb8:	0800cead 	.word	0x0800cead
 800cdbc:	0800ce47 	.word	0x0800ce47
 800cdc0:	0800cead 	.word	0x0800cead
 800cdc4:	0800cead 	.word	0x0800cead
 800cdc8:	0800cead 	.word	0x0800cead
 800cdcc:	0800ce57 	.word	0x0800ce57
 800cdd0:	0800cead 	.word	0x0800cead
 800cdd4:	0800cead 	.word	0x0800cead
 800cdd8:	0800cead 	.word	0x0800cead
 800cddc:	0800cead 	.word	0x0800cead
 800cde0:	0800cead 	.word	0x0800cead
 800cde4:	0800cead 	.word	0x0800cead
 800cde8:	0800cead 	.word	0x0800cead
 800cdec:	0800ce67 	.word	0x0800ce67
 800cdf0:	0800cead 	.word	0x0800cead
 800cdf4:	0800cead 	.word	0x0800cead
 800cdf8:	0800cead 	.word	0x0800cead
 800cdfc:	0800cead 	.word	0x0800cead
 800ce00:	0800cead 	.word	0x0800cead
 800ce04:	0800cead 	.word	0x0800cead
 800ce08:	0800cead 	.word	0x0800cead
 800ce0c:	0800cead 	.word	0x0800cead
 800ce10:	0800cead 	.word	0x0800cead
 800ce14:	0800cead 	.word	0x0800cead
 800ce18:	0800cead 	.word	0x0800cead
 800ce1c:	0800cead 	.word	0x0800cead
 800ce20:	0800cead 	.word	0x0800cead
 800ce24:	0800cead 	.word	0x0800cead
 800ce28:	0800cead 	.word	0x0800cead
 800ce2c:	0800ce9f 	.word	0x0800ce9f
 800ce30:	2b40      	cmp	r3, #64	; 0x40
 800ce32:	d037      	beq.n	800cea4 <UART_SetConfig+0xc44>
 800ce34:	e03a      	b.n	800ceac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce36:	f7fb fea1 	bl	8008b7c <HAL_RCC_GetPCLK1Freq>
 800ce3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce3c:	e03c      	b.n	800ceb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce3e:	f7fb feb3 	bl	8008ba8 <HAL_RCC_GetPCLK2Freq>
 800ce42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce44:	e038      	b.n	800ceb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fc fdd2 	bl	80099f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce54:	e030      	b.n	800ceb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce56:	f107 0318 	add.w	r3, r7, #24
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fc ff1e 	bl	8009c9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce64:	e028      	b.n	800ceb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <UART_SetConfig+0xc2c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 0320 	and.w	r3, r3, #32
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d012      	beq.n	800ce98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce72:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <UART_SetConfig+0xc2c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	08db      	lsrs	r3, r3, #3
 800ce78:	f003 0303 	and.w	r3, r3, #3
 800ce7c:	4a04      	ldr	r2, [pc, #16]	; (800ce90 <UART_SetConfig+0xc30>)
 800ce7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce84:	e018      	b.n	800ceb8 <UART_SetConfig+0xc58>
 800ce86:	bf00      	nop
 800ce88:	0800e144 	.word	0x0800e144
 800ce8c:	58024400 	.word	0x58024400
 800ce90:	03d09000 	.word	0x03d09000
 800ce94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ce98:	4b24      	ldr	r3, [pc, #144]	; (800cf2c <UART_SetConfig+0xccc>)
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9c:	e00c      	b.n	800ceb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce9e:	4b24      	ldr	r3, [pc, #144]	; (800cf30 <UART_SetConfig+0xcd0>)
 800cea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea2:	e009      	b.n	800ceb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceaa:	e005      	b.n	800ceb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ceac:	2300      	movs	r3, #0
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ceb6:	bf00      	nop
    }

    if (pclk != 0U)
 800ceb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d021      	beq.n	800cf02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	4a1c      	ldr	r2, [pc, #112]	; (800cf34 <UART_SetConfig+0xcd4>)
 800cec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cec8:	461a      	mov	r2, r3
 800ceca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cecc:	fbb3 f2f2 	udiv	r2, r3, r2
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	085b      	lsrs	r3, r3, #1
 800ced6:	441a      	add	r2, r3
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cee0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	2b0f      	cmp	r3, #15
 800cee6:	d909      	bls.n	800cefc <UART_SetConfig+0xc9c>
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ceee:	d205      	bcs.n	800cefc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60da      	str	r2, [r3, #12]
 800cefa:	e002      	b.n	800cf02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2200      	movs	r2, #0
 800cf16:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cf1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3748      	adds	r7, #72	; 0x48
 800cf26:	46bd      	mov	sp, r7
 800cf28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf2c:	03d09000 	.word	0x03d09000
 800cf30:	003d0900 	.word	0x003d0900
 800cf34:	0800e144 	.word	0x0800e144

0800cf38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00a      	beq.n	800cf62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf66:	f003 0302 	and.w	r3, r3, #2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf88:	f003 0304 	and.w	r3, r3, #4
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfaa:	f003 0308 	and.w	r3, r3, #8
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfcc:	f003 0310 	and.w	r3, r3, #16
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00a      	beq.n	800cfea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	430a      	orrs	r2, r1
 800cfe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfee:	f003 0320 	and.w	r3, r3, #32
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00a      	beq.n	800d00c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	430a      	orrs	r2, r1
 800d00a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d014:	2b00      	cmp	r3, #0
 800d016:	d01a      	beq.n	800d04e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	430a      	orrs	r2, r1
 800d02c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d036:	d10a      	bne.n	800d04e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	430a      	orrs	r2, r1
 800d04c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00a      	beq.n	800d070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	430a      	orrs	r2, r1
 800d06e:	605a      	str	r2, [r3, #4]
  }
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af02      	add	r7, sp, #8
 800d082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d08c:	f7f7 fd16 	bl	8004abc <HAL_GetTick>
 800d090:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 0308 	and.w	r3, r3, #8
 800d09c:	2b08      	cmp	r3, #8
 800d09e:	d10e      	bne.n	800d0be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f82f 	bl	800d112 <UART_WaitOnFlagUntilTimeout>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d001      	beq.n	800d0be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e025      	b.n	800d10a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 0304 	and.w	r3, r3, #4
 800d0c8:	2b04      	cmp	r3, #4
 800d0ca:	d10e      	bne.n	800d0ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f819 	bl	800d112 <UART_WaitOnFlagUntilTimeout>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e00f      	b.n	800d10a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b09c      	sub	sp, #112	; 0x70
 800d116:	af00      	add	r7, sp, #0
 800d118:	60f8      	str	r0, [r7, #12]
 800d11a:	60b9      	str	r1, [r7, #8]
 800d11c:	603b      	str	r3, [r7, #0]
 800d11e:	4613      	mov	r3, r2
 800d120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d122:	e0a9      	b.n	800d278 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12a:	f000 80a5 	beq.w	800d278 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d12e:	f7f7 fcc5 	bl	8004abc <HAL_GetTick>
 800d132:	4602      	mov	r2, r0
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d302      	bcc.n	800d144 <UART_WaitOnFlagUntilTimeout+0x32>
 800d13e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d140:	2b00      	cmp	r3, #0
 800d142:	d140      	bne.n	800d1c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d14c:	e853 3f00 	ldrex	r3, [r3]
 800d150:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d158:	667b      	str	r3, [r7, #100]	; 0x64
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d162:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d164:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d168:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d16a:	e841 2300 	strex	r3, r2, [r1]
 800d16e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1e6      	bne.n	800d144 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3308      	adds	r3, #8
 800d17c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	f023 0301 	bic.w	r3, r3, #1
 800d18c:	663b      	str	r3, [r7, #96]	; 0x60
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3308      	adds	r3, #8
 800d194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d196:	64ba      	str	r2, [r7, #72]	; 0x48
 800d198:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d19c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d19e:	e841 2300 	strex	r3, r2, [r1]
 800d1a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d1a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1e5      	bne.n	800d176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2220      	movs	r2, #32
 800d1b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	e069      	b.n	800d29a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 0304 	and.w	r3, r3, #4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d051      	beq.n	800d278 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	69db      	ldr	r3, [r3, #28]
 800d1da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d1de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1e2:	d149      	bne.n	800d278 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f6:	e853 3f00 	ldrex	r3, [r3]
 800d1fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d202:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	461a      	mov	r2, r3
 800d20a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d20c:	637b      	str	r3, [r7, #52]	; 0x34
 800d20e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d214:	e841 2300 	strex	r3, r2, [r1]
 800d218:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1e6      	bne.n	800d1ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	3308      	adds	r3, #8
 800d226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	e853 3f00 	ldrex	r3, [r3]
 800d22e:	613b      	str	r3, [r7, #16]
   return(result);
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	f023 0301 	bic.w	r3, r3, #1
 800d236:	66bb      	str	r3, [r7, #104]	; 0x68
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3308      	adds	r3, #8
 800d23e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d240:	623a      	str	r2, [r7, #32]
 800d242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d244:	69f9      	ldr	r1, [r7, #28]
 800d246:	6a3a      	ldr	r2, [r7, #32]
 800d248:	e841 2300 	strex	r3, r2, [r1]
 800d24c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1e5      	bne.n	800d220 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2220      	movs	r2, #32
 800d258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2220      	movs	r2, #32
 800d260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2220      	movs	r2, #32
 800d268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d274:	2303      	movs	r3, #3
 800d276:	e010      	b.n	800d29a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	69da      	ldr	r2, [r3, #28]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	4013      	ands	r3, r2
 800d282:	68ba      	ldr	r2, [r7, #8]
 800d284:	429a      	cmp	r2, r3
 800d286:	bf0c      	ite	eq
 800d288:	2301      	moveq	r3, #1
 800d28a:	2300      	movne	r3, #0
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	461a      	mov	r2, r3
 800d290:	79fb      	ldrb	r3, [r7, #7]
 800d292:	429a      	cmp	r2, r3
 800d294:	f43f af46 	beq.w	800d124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3770      	adds	r7, #112	; 0x70
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
	...

0800d2a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b096      	sub	sp, #88	; 0x58
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	88fa      	ldrh	r2, [r7, #6]
 800d2bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2222      	movs	r2, #34	; 0x22
 800d2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d02c      	beq.n	800d332 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2dc:	4a42      	ldr	r2, [pc, #264]	; (800d3e8 <UART_Start_Receive_DMA+0x144>)
 800d2de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2e4:	4a41      	ldr	r2, [pc, #260]	; (800d3ec <UART_Start_Receive_DMA+0x148>)
 800d2e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2ec:	4a40      	ldr	r2, [pc, #256]	; (800d3f0 <UART_Start_Receive_DMA+0x14c>)
 800d2ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3324      	adds	r3, #36	; 0x24
 800d302:	4619      	mov	r1, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d308:	461a      	mov	r2, r3
 800d30a:	88fb      	ldrh	r3, [r7, #6]
 800d30c:	f7f8 f84c 	bl	80053a8 <HAL_DMA_Start_IT>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00d      	beq.n	800d332 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2210      	movs	r2, #16
 800d31a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2220      	movs	r2, #32
 800d32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e055      	b.n	800d3de <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d018      	beq.n	800d374 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34a:	e853 3f00 	ldrex	r3, [r3]
 800d34e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d356:	657b      	str	r3, [r7, #84]	; 0x54
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	461a      	mov	r2, r3
 800d35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d360:	64bb      	str	r3, [r7, #72]	; 0x48
 800d362:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d364:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d368:	e841 2300 	strex	r3, r2, [r1]
 800d36c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d36e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1e6      	bne.n	800d342 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3308      	adds	r3, #8
 800d37a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37e:	e853 3f00 	ldrex	r3, [r3]
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	f043 0301 	orr.w	r3, r3, #1
 800d38a:	653b      	str	r3, [r7, #80]	; 0x50
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3308      	adds	r3, #8
 800d392:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d394:	637a      	str	r2, [r7, #52]	; 0x34
 800d396:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d398:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d39a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d39c:	e841 2300 	strex	r3, r2, [r1]
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1e5      	bne.n	800d374 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	e853 3f00 	ldrex	r3, [r3]
 800d3b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	3308      	adds	r3, #8
 800d3c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3c8:	623a      	str	r2, [r7, #32]
 800d3ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3cc:	69f9      	ldr	r1, [r7, #28]
 800d3ce:	6a3a      	ldr	r2, [r7, #32]
 800d3d0:	e841 2300 	strex	r3, r2, [r1]
 800d3d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1e5      	bne.n	800d3a8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3758      	adds	r7, #88	; 0x58
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	0800d5f7 	.word	0x0800d5f7
 800d3ec:	0800d719 	.word	0x0800d719
 800d3f0:	0800d751 	.word	0x0800d751

0800d3f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b08f      	sub	sp, #60	; 0x3c
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d402:	6a3b      	ldr	r3, [r7, #32]
 800d404:	e853 3f00 	ldrex	r3, [r3]
 800d408:	61fb      	str	r3, [r7, #28]
   return(result);
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d410:	637b      	str	r3, [r7, #52]	; 0x34
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d41c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d422:	e841 2300 	strex	r3, r2, [r1]
 800d426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1e6      	bne.n	800d3fc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3308      	adds	r3, #8
 800d434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d444:	633b      	str	r3, [r7, #48]	; 0x30
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	3308      	adds	r3, #8
 800d44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d44e:	61ba      	str	r2, [r7, #24]
 800d450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d452:	6979      	ldr	r1, [r7, #20]
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	e841 2300 	strex	r3, r2, [r1]
 800d45a:	613b      	str	r3, [r7, #16]
   return(result);
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e5      	bne.n	800d42e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2220      	movs	r2, #32
 800d466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d46a:	bf00      	nop
 800d46c:	373c      	adds	r7, #60	; 0x3c
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
	...

0800d478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d478:	b480      	push	{r7}
 800d47a:	b095      	sub	sp, #84	; 0x54
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d494:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d49e:	643b      	str	r3, [r7, #64]	; 0x40
 800d4a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4a6:	e841 2300 	strex	r3, r2, [r1]
 800d4aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1e6      	bne.n	800d480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ba:	6a3b      	ldr	r3, [r7, #32]
 800d4bc:	e853 3f00 	ldrex	r3, [r3]
 800d4c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4c2:	69fa      	ldr	r2, [r7, #28]
 800d4c4:	4b1e      	ldr	r3, [pc, #120]	; (800d540 <UART_EndRxTransfer+0xc8>)
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d4d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4da:	e841 2300 	strex	r3, r2, [r1]
 800d4de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1e5      	bne.n	800d4b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d118      	bne.n	800d520 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	e853 3f00 	ldrex	r3, [r3]
 800d4fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f023 0310 	bic.w	r3, r3, #16
 800d502:	647b      	str	r3, [r7, #68]	; 0x44
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	461a      	mov	r2, r3
 800d50a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d50c:	61bb      	str	r3, [r7, #24]
 800d50e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d510:	6979      	ldr	r1, [r7, #20]
 800d512:	69ba      	ldr	r2, [r7, #24]
 800d514:	e841 2300 	strex	r3, r2, [r1]
 800d518:	613b      	str	r3, [r7, #16]
   return(result);
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1e6      	bne.n	800d4ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2220      	movs	r2, #32
 800d524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d534:	bf00      	nop
 800d536:	3754      	adds	r7, #84	; 0x54
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	effffffe 	.word	0xeffffffe

0800d544 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b090      	sub	sp, #64	; 0x40
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	69db      	ldr	r3, [r3, #28]
 800d556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d55a:	d037      	beq.n	800d5cc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d55e:	2200      	movs	r2, #0
 800d560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3308      	adds	r3, #8
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56e:	e853 3f00 	ldrex	r3, [r3]
 800d572:	623b      	str	r3, [r7, #32]
   return(result);
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d57a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3308      	adds	r3, #8
 800d582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d584:	633a      	str	r2, [r7, #48]	; 0x30
 800d586:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d58c:	e841 2300 	strex	r3, r2, [r1]
 800d590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1e5      	bne.n	800d564 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	e853 3f00 	ldrex	r3, [r3]
 800d5a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ac:	637b      	str	r3, [r7, #52]	; 0x34
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ba:	69b9      	ldr	r1, [r7, #24]
 800d5bc:	69fa      	ldr	r2, [r7, #28]
 800d5be:	e841 2300 	strex	r3, r2, [r1]
 800d5c2:	617b      	str	r3, [r7, #20]
   return(result);
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1e6      	bne.n	800d598 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d5ca:	e002      	b.n	800d5d2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d5cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5ce:	f7f5 fde5 	bl	800319c <HAL_UART_TxCpltCallback>
}
 800d5d2:	bf00      	nop
 800d5d4:	3740      	adds	r7, #64	; 0x40
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b084      	sub	sp, #16
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f7fe fe0f 	bl	800c20c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ee:	bf00      	nop
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b09c      	sub	sp, #112	; 0x70
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d602:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	69db      	ldr	r3, [r3, #28]
 800d608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d60c:	d071      	beq.n	800d6f2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d610:	2200      	movs	r2, #0
 800d612:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d61e:	e853 3f00 	ldrex	r3, [r3]
 800d622:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d62a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	461a      	mov	r2, r3
 800d632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d634:	65bb      	str	r3, [r7, #88]	; 0x58
 800d636:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d63a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d63c:	e841 2300 	strex	r3, r2, [r1]
 800d640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1e6      	bne.n	800d616 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	3308      	adds	r3, #8
 800d64e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65a:	f023 0301 	bic.w	r3, r3, #1
 800d65e:	667b      	str	r3, [r7, #100]	; 0x64
 800d660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3308      	adds	r3, #8
 800d666:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d668:	647a      	str	r2, [r7, #68]	; 0x44
 800d66a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d66e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d670:	e841 2300 	strex	r3, r2, [r1]
 800d674:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1e5      	bne.n	800d648 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3308      	adds	r3, #8
 800d682:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	e853 3f00 	ldrex	r3, [r3]
 800d68a:	623b      	str	r3, [r7, #32]
   return(result);
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d692:	663b      	str	r3, [r7, #96]	; 0x60
 800d694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3308      	adds	r3, #8
 800d69a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d69c:	633a      	str	r2, [r7, #48]	; 0x30
 800d69e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6a4:	e841 2300 	strex	r3, r2, [r1]
 800d6a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1e5      	bne.n	800d67c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b2:	2220      	movs	r2, #32
 800d6b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d118      	bne.n	800d6f2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	e853 3f00 	ldrex	r3, [r3]
 800d6cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f023 0310 	bic.w	r3, r3, #16
 800d6d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e2:	69b9      	ldr	r1, [r7, #24]
 800d6e4:	69fa      	ldr	r2, [r7, #28]
 800d6e6:	e841 2300 	strex	r3, r2, [r1]
 800d6ea:	617b      	str	r3, [r7, #20]
   return(result);
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1e6      	bne.n	800d6c0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d107      	bne.n	800d70a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d700:	4619      	mov	r1, r3
 800d702:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d704:	f7fe fda0 	bl	800c248 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d708:	e002      	b.n	800d710 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d70a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d70c:	f7f5 fd58 	bl	80031c0 <HAL_UART_RxCpltCallback>
}
 800d710:	bf00      	nop
 800d712:	3770      	adds	r7, #112	; 0x70
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d724:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d109      	bne.n	800d742 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d734:	085b      	lsrs	r3, r3, #1
 800d736:	b29b      	uxth	r3, r3
 800d738:	4619      	mov	r1, r3
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f7fe fd84 	bl	800c248 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d740:	e002      	b.n	800d748 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7fe fd6c 	bl	800c220 <HAL_UART_RxHalfCpltCallback>
}
 800d748:	bf00      	nop
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d764:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d76c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d778:	2b80      	cmp	r3, #128	; 0x80
 800d77a:	d109      	bne.n	800d790 <UART_DMAError+0x40>
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	2b21      	cmp	r3, #33	; 0x21
 800d780:	d106      	bne.n	800d790 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	2200      	movs	r2, #0
 800d786:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d78a:	6978      	ldr	r0, [r7, #20]
 800d78c:	f7ff fe32 	bl	800d3f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d790:	697b      	ldr	r3, [r7, #20]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d79a:	2b40      	cmp	r3, #64	; 0x40
 800d79c:	d109      	bne.n	800d7b2 <UART_DMAError+0x62>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2b22      	cmp	r3, #34	; 0x22
 800d7a2:	d106      	bne.n	800d7b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d7ac:	6978      	ldr	r0, [r7, #20]
 800d7ae:	f7ff fe63 	bl	800d478 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7b8:	f043 0210 	orr.w	r2, r3, #16
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7c2:	6978      	ldr	r0, [r7, #20]
 800d7c4:	f7fe fd36 	bl	800c234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7c8:	bf00      	nop
 800d7ca:	3718      	adds	r7, #24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7fe fd20 	bl	800c234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	e853 3f00 	ldrex	r3, [r3]
 800d810:	60bb      	str	r3, [r7, #8]
   return(result);
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d818:	61fb      	str	r3, [r7, #28]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	61bb      	str	r3, [r7, #24]
 800d824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d826:	6979      	ldr	r1, [r7, #20]
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	e841 2300 	strex	r3, r2, [r1]
 800d82e:	613b      	str	r3, [r7, #16]
   return(result);
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1e6      	bne.n	800d804 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2220      	movs	r2, #32
 800d83a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7f5 fca9 	bl	800319c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d84a:	bf00      	nop
 800d84c:	3720      	adds	r7, #32
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d852:	b480      	push	{r7}
 800d854:	b083      	sub	sp, #12
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d85a:	bf00      	nop
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d866:	b480      	push	{r7}
 800d868:	b083      	sub	sp, #12
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d86e:	bf00      	nop
 800d870:	370c      	adds	r7, #12
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr

0800d87a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d87a:	b480      	push	{r7}
 800d87c:	b083      	sub	sp, #12
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d882:	bf00      	nop
 800d884:	370c      	adds	r7, #12
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr

0800d88e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d88e:	b480      	push	{r7}
 800d890:	b085      	sub	sp, #20
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d101      	bne.n	800d8a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	e027      	b.n	800d8f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2224      	movs	r2, #36	; 0x24
 800d8b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f022 0201 	bic.w	r2, r2, #1
 800d8ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d8d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2220      	movs	r2, #32
 800d8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d910:	2b01      	cmp	r3, #1
 800d912:	d101      	bne.n	800d918 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d914:	2302      	movs	r3, #2
 800d916:	e02d      	b.n	800d974 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2224      	movs	r2, #36	; 0x24
 800d924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f022 0201 	bic.w	r2, r2, #1
 800d93e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	430a      	orrs	r2, r1
 800d952:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 f84f 	bl	800d9f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2220      	movs	r2, #32
 800d966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d101      	bne.n	800d994 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d990:	2302      	movs	r3, #2
 800d992:	e02d      	b.n	800d9f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2224      	movs	r2, #36	; 0x24
 800d9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	f022 0201 	bic.w	r2, r2, #1
 800d9ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	430a      	orrs	r2, r1
 800d9ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f811 	bl	800d9f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	68fa      	ldr	r2, [r7, #12]
 800d9dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2220      	movs	r2, #32
 800d9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da04:	2b00      	cmp	r3, #0
 800da06:	d108      	bne.n	800da1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da18:	e031      	b.n	800da7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da1a:	2310      	movs	r3, #16
 800da1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da1e:	2310      	movs	r3, #16
 800da20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	0e5b      	lsrs	r3, r3, #25
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 0307 	and.w	r3, r3, #7
 800da30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	0f5b      	lsrs	r3, r3, #29
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	f003 0307 	and.w	r3, r3, #7
 800da40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da42:	7bbb      	ldrb	r3, [r7, #14]
 800da44:	7b3a      	ldrb	r2, [r7, #12]
 800da46:	4911      	ldr	r1, [pc, #68]	; (800da8c <UARTEx_SetNbDataToProcess+0x94>)
 800da48:	5c8a      	ldrb	r2, [r1, r2]
 800da4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da4e:	7b3a      	ldrb	r2, [r7, #12]
 800da50:	490f      	ldr	r1, [pc, #60]	; (800da90 <UARTEx_SetNbDataToProcess+0x98>)
 800da52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da54:	fb93 f3f2 	sdiv	r3, r3, r2
 800da58:	b29a      	uxth	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	7b7a      	ldrb	r2, [r7, #13]
 800da64:	4909      	ldr	r1, [pc, #36]	; (800da8c <UARTEx_SetNbDataToProcess+0x94>)
 800da66:	5c8a      	ldrb	r2, [r1, r2]
 800da68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da6c:	7b7a      	ldrb	r2, [r7, #13]
 800da6e:	4908      	ldr	r1, [pc, #32]	; (800da90 <UARTEx_SetNbDataToProcess+0x98>)
 800da70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da72:	fb93 f3f2 	sdiv	r3, r3, r2
 800da76:	b29a      	uxth	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800da7e:	bf00      	nop
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	0800e15c 	.word	0x0800e15c
 800da90:	0800e164 	.word	0x0800e164

0800da94 <__cxa_pure_virtual>:
 800da94:	b508      	push	{r3, lr}
 800da96:	f000 f80d 	bl	800dab4 <_ZSt9terminatev>

0800da9a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800da9a:	b508      	push	{r3, lr}
 800da9c:	4780      	blx	r0
 800da9e:	f000 f80e 	bl	800dabe <abort>
	...

0800daa4 <_ZSt13get_terminatev>:
 800daa4:	4b02      	ldr	r3, [pc, #8]	; (800dab0 <_ZSt13get_terminatev+0xc>)
 800daa6:	6818      	ldr	r0, [r3, #0]
 800daa8:	f3bf 8f5b 	dmb	ish
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	24000010 	.word	0x24000010

0800dab4 <_ZSt9terminatev>:
 800dab4:	b508      	push	{r3, lr}
 800dab6:	f7ff fff5 	bl	800daa4 <_ZSt13get_terminatev>
 800daba:	f7ff ffee 	bl	800da9a <_ZN10__cxxabiv111__terminateEPFvvE>

0800dabe <abort>:
 800dabe:	b508      	push	{r3, lr}
 800dac0:	2006      	movs	r0, #6
 800dac2:	f000 f873 	bl	800dbac <raise>
 800dac6:	2001      	movs	r0, #1
 800dac8:	f7f6 fd4a 	bl	8004560 <_exit>

0800dacc <__errno>:
 800dacc:	4b01      	ldr	r3, [pc, #4]	; (800dad4 <__errno+0x8>)
 800dace:	6818      	ldr	r0, [r3, #0]
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	24000014 	.word	0x24000014

0800dad8 <__libc_init_array>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	4d0d      	ldr	r5, [pc, #52]	; (800db10 <__libc_init_array+0x38>)
 800dadc:	4c0d      	ldr	r4, [pc, #52]	; (800db14 <__libc_init_array+0x3c>)
 800dade:	1b64      	subs	r4, r4, r5
 800dae0:	10a4      	asrs	r4, r4, #2
 800dae2:	2600      	movs	r6, #0
 800dae4:	42a6      	cmp	r6, r4
 800dae6:	d109      	bne.n	800dafc <__libc_init_array+0x24>
 800dae8:	4d0b      	ldr	r5, [pc, #44]	; (800db18 <__libc_init_array+0x40>)
 800daea:	4c0c      	ldr	r4, [pc, #48]	; (800db1c <__libc_init_array+0x44>)
 800daec:	f000 f9b0 	bl	800de50 <_init>
 800daf0:	1b64      	subs	r4, r4, r5
 800daf2:	10a4      	asrs	r4, r4, #2
 800daf4:	2600      	movs	r6, #0
 800daf6:	42a6      	cmp	r6, r4
 800daf8:	d105      	bne.n	800db06 <__libc_init_array+0x2e>
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800db00:	4798      	blx	r3
 800db02:	3601      	adds	r6, #1
 800db04:	e7ee      	b.n	800dae4 <__libc_init_array+0xc>
 800db06:	f855 3b04 	ldr.w	r3, [r5], #4
 800db0a:	4798      	blx	r3
 800db0c:	3601      	adds	r6, #1
 800db0e:	e7f2      	b.n	800daf6 <__libc_init_array+0x1e>
 800db10:	0800e174 	.word	0x0800e174
 800db14:	0800e174 	.word	0x0800e174
 800db18:	0800e174 	.word	0x0800e174
 800db1c:	0800e188 	.word	0x0800e188

0800db20 <memcpy>:
 800db20:	440a      	add	r2, r1
 800db22:	4291      	cmp	r1, r2
 800db24:	f100 33ff 	add.w	r3, r0, #4294967295
 800db28:	d100      	bne.n	800db2c <memcpy+0xc>
 800db2a:	4770      	bx	lr
 800db2c:	b510      	push	{r4, lr}
 800db2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db36:	4291      	cmp	r1, r2
 800db38:	d1f9      	bne.n	800db2e <memcpy+0xe>
 800db3a:	bd10      	pop	{r4, pc}

0800db3c <memset>:
 800db3c:	4402      	add	r2, r0
 800db3e:	4603      	mov	r3, r0
 800db40:	4293      	cmp	r3, r2
 800db42:	d100      	bne.n	800db46 <memset+0xa>
 800db44:	4770      	bx	lr
 800db46:	f803 1b01 	strb.w	r1, [r3], #1
 800db4a:	e7f9      	b.n	800db40 <memset+0x4>

0800db4c <realloc>:
 800db4c:	4b02      	ldr	r3, [pc, #8]	; (800db58 <realloc+0xc>)
 800db4e:	460a      	mov	r2, r1
 800db50:	4601      	mov	r1, r0
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	f000 b8da 	b.w	800dd0c <_realloc_r>
 800db58:	24000014 	.word	0x24000014

0800db5c <_raise_r>:
 800db5c:	291f      	cmp	r1, #31
 800db5e:	b538      	push	{r3, r4, r5, lr}
 800db60:	4604      	mov	r4, r0
 800db62:	460d      	mov	r5, r1
 800db64:	d904      	bls.n	800db70 <_raise_r+0x14>
 800db66:	2316      	movs	r3, #22
 800db68:	6003      	str	r3, [r0, #0]
 800db6a:	f04f 30ff 	mov.w	r0, #4294967295
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db72:	b112      	cbz	r2, 800db7a <_raise_r+0x1e>
 800db74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db78:	b94b      	cbnz	r3, 800db8e <_raise_r+0x32>
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f830 	bl	800dbe0 <_getpid_r>
 800db80:	462a      	mov	r2, r5
 800db82:	4601      	mov	r1, r0
 800db84:	4620      	mov	r0, r4
 800db86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db8a:	f000 b817 	b.w	800dbbc <_kill_r>
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d00a      	beq.n	800dba8 <_raise_r+0x4c>
 800db92:	1c59      	adds	r1, r3, #1
 800db94:	d103      	bne.n	800db9e <_raise_r+0x42>
 800db96:	2316      	movs	r3, #22
 800db98:	6003      	str	r3, [r0, #0]
 800db9a:	2001      	movs	r0, #1
 800db9c:	e7e7      	b.n	800db6e <_raise_r+0x12>
 800db9e:	2400      	movs	r4, #0
 800dba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dba4:	4628      	mov	r0, r5
 800dba6:	4798      	blx	r3
 800dba8:	2000      	movs	r0, #0
 800dbaa:	e7e0      	b.n	800db6e <_raise_r+0x12>

0800dbac <raise>:
 800dbac:	4b02      	ldr	r3, [pc, #8]	; (800dbb8 <raise+0xc>)
 800dbae:	4601      	mov	r1, r0
 800dbb0:	6818      	ldr	r0, [r3, #0]
 800dbb2:	f7ff bfd3 	b.w	800db5c <_raise_r>
 800dbb6:	bf00      	nop
 800dbb8:	24000014 	.word	0x24000014

0800dbbc <_kill_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4d07      	ldr	r5, [pc, #28]	; (800dbdc <_kill_r+0x20>)
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	4608      	mov	r0, r1
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	602b      	str	r3, [r5, #0]
 800dbca:	f7f6 fcb9 	bl	8004540 <_kill>
 800dbce:	1c43      	adds	r3, r0, #1
 800dbd0:	d102      	bne.n	800dbd8 <_kill_r+0x1c>
 800dbd2:	682b      	ldr	r3, [r5, #0]
 800dbd4:	b103      	cbz	r3, 800dbd8 <_kill_r+0x1c>
 800dbd6:	6023      	str	r3, [r4, #0]
 800dbd8:	bd38      	pop	{r3, r4, r5, pc}
 800dbda:	bf00      	nop
 800dbdc:	240010d8 	.word	0x240010d8

0800dbe0 <_getpid_r>:
 800dbe0:	f7f6 bca6 	b.w	8004530 <_getpid>

0800dbe4 <sbrk_aligned>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	4e0e      	ldr	r6, [pc, #56]	; (800dc20 <sbrk_aligned+0x3c>)
 800dbe8:	460c      	mov	r4, r1
 800dbea:	6831      	ldr	r1, [r6, #0]
 800dbec:	4605      	mov	r5, r0
 800dbee:	b911      	cbnz	r1, 800dbf6 <sbrk_aligned+0x12>
 800dbf0:	f000 f8bc 	bl	800dd6c <_sbrk_r>
 800dbf4:	6030      	str	r0, [r6, #0]
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f000 f8b7 	bl	800dd6c <_sbrk_r>
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	d00a      	beq.n	800dc18 <sbrk_aligned+0x34>
 800dc02:	1cc4      	adds	r4, r0, #3
 800dc04:	f024 0403 	bic.w	r4, r4, #3
 800dc08:	42a0      	cmp	r0, r4
 800dc0a:	d007      	beq.n	800dc1c <sbrk_aligned+0x38>
 800dc0c:	1a21      	subs	r1, r4, r0
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f000 f8ac 	bl	800dd6c <_sbrk_r>
 800dc14:	3001      	adds	r0, #1
 800dc16:	d101      	bne.n	800dc1c <sbrk_aligned+0x38>
 800dc18:	f04f 34ff 	mov.w	r4, #4294967295
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	bd70      	pop	{r4, r5, r6, pc}
 800dc20:	240010d4 	.word	0x240010d4

0800dc24 <_malloc_r>:
 800dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc28:	1ccd      	adds	r5, r1, #3
 800dc2a:	f025 0503 	bic.w	r5, r5, #3
 800dc2e:	3508      	adds	r5, #8
 800dc30:	2d0c      	cmp	r5, #12
 800dc32:	bf38      	it	cc
 800dc34:	250c      	movcc	r5, #12
 800dc36:	2d00      	cmp	r5, #0
 800dc38:	4607      	mov	r7, r0
 800dc3a:	db01      	blt.n	800dc40 <_malloc_r+0x1c>
 800dc3c:	42a9      	cmp	r1, r5
 800dc3e:	d905      	bls.n	800dc4c <_malloc_r+0x28>
 800dc40:	230c      	movs	r3, #12
 800dc42:	603b      	str	r3, [r7, #0]
 800dc44:	2600      	movs	r6, #0
 800dc46:	4630      	mov	r0, r6
 800dc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc4c:	4e2e      	ldr	r6, [pc, #184]	; (800dd08 <_malloc_r+0xe4>)
 800dc4e:	f000 f89d 	bl	800dd8c <__malloc_lock>
 800dc52:	6833      	ldr	r3, [r6, #0]
 800dc54:	461c      	mov	r4, r3
 800dc56:	bb34      	cbnz	r4, 800dca6 <_malloc_r+0x82>
 800dc58:	4629      	mov	r1, r5
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	f7ff ffc2 	bl	800dbe4 <sbrk_aligned>
 800dc60:	1c43      	adds	r3, r0, #1
 800dc62:	4604      	mov	r4, r0
 800dc64:	d14d      	bne.n	800dd02 <_malloc_r+0xde>
 800dc66:	6834      	ldr	r4, [r6, #0]
 800dc68:	4626      	mov	r6, r4
 800dc6a:	2e00      	cmp	r6, #0
 800dc6c:	d140      	bne.n	800dcf0 <_malloc_r+0xcc>
 800dc6e:	6823      	ldr	r3, [r4, #0]
 800dc70:	4631      	mov	r1, r6
 800dc72:	4638      	mov	r0, r7
 800dc74:	eb04 0803 	add.w	r8, r4, r3
 800dc78:	f000 f878 	bl	800dd6c <_sbrk_r>
 800dc7c:	4580      	cmp	r8, r0
 800dc7e:	d13a      	bne.n	800dcf6 <_malloc_r+0xd2>
 800dc80:	6821      	ldr	r1, [r4, #0]
 800dc82:	3503      	adds	r5, #3
 800dc84:	1a6d      	subs	r5, r5, r1
 800dc86:	f025 0503 	bic.w	r5, r5, #3
 800dc8a:	3508      	adds	r5, #8
 800dc8c:	2d0c      	cmp	r5, #12
 800dc8e:	bf38      	it	cc
 800dc90:	250c      	movcc	r5, #12
 800dc92:	4629      	mov	r1, r5
 800dc94:	4638      	mov	r0, r7
 800dc96:	f7ff ffa5 	bl	800dbe4 <sbrk_aligned>
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	d02b      	beq.n	800dcf6 <_malloc_r+0xd2>
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	442b      	add	r3, r5
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	e00e      	b.n	800dcc4 <_malloc_r+0xa0>
 800dca6:	6822      	ldr	r2, [r4, #0]
 800dca8:	1b52      	subs	r2, r2, r5
 800dcaa:	d41e      	bmi.n	800dcea <_malloc_r+0xc6>
 800dcac:	2a0b      	cmp	r2, #11
 800dcae:	d916      	bls.n	800dcde <_malloc_r+0xba>
 800dcb0:	1961      	adds	r1, r4, r5
 800dcb2:	42a3      	cmp	r3, r4
 800dcb4:	6025      	str	r5, [r4, #0]
 800dcb6:	bf18      	it	ne
 800dcb8:	6059      	strne	r1, [r3, #4]
 800dcba:	6863      	ldr	r3, [r4, #4]
 800dcbc:	bf08      	it	eq
 800dcbe:	6031      	streq	r1, [r6, #0]
 800dcc0:	5162      	str	r2, [r4, r5]
 800dcc2:	604b      	str	r3, [r1, #4]
 800dcc4:	4638      	mov	r0, r7
 800dcc6:	f104 060b 	add.w	r6, r4, #11
 800dcca:	f000 f865 	bl	800dd98 <__malloc_unlock>
 800dcce:	f026 0607 	bic.w	r6, r6, #7
 800dcd2:	1d23      	adds	r3, r4, #4
 800dcd4:	1af2      	subs	r2, r6, r3
 800dcd6:	d0b6      	beq.n	800dc46 <_malloc_r+0x22>
 800dcd8:	1b9b      	subs	r3, r3, r6
 800dcda:	50a3      	str	r3, [r4, r2]
 800dcdc:	e7b3      	b.n	800dc46 <_malloc_r+0x22>
 800dcde:	6862      	ldr	r2, [r4, #4]
 800dce0:	42a3      	cmp	r3, r4
 800dce2:	bf0c      	ite	eq
 800dce4:	6032      	streq	r2, [r6, #0]
 800dce6:	605a      	strne	r2, [r3, #4]
 800dce8:	e7ec      	b.n	800dcc4 <_malloc_r+0xa0>
 800dcea:	4623      	mov	r3, r4
 800dcec:	6864      	ldr	r4, [r4, #4]
 800dcee:	e7b2      	b.n	800dc56 <_malloc_r+0x32>
 800dcf0:	4634      	mov	r4, r6
 800dcf2:	6876      	ldr	r6, [r6, #4]
 800dcf4:	e7b9      	b.n	800dc6a <_malloc_r+0x46>
 800dcf6:	230c      	movs	r3, #12
 800dcf8:	603b      	str	r3, [r7, #0]
 800dcfa:	4638      	mov	r0, r7
 800dcfc:	f000 f84c 	bl	800dd98 <__malloc_unlock>
 800dd00:	e7a1      	b.n	800dc46 <_malloc_r+0x22>
 800dd02:	6025      	str	r5, [r4, #0]
 800dd04:	e7de      	b.n	800dcc4 <_malloc_r+0xa0>
 800dd06:	bf00      	nop
 800dd08:	240010d0 	.word	0x240010d0

0800dd0c <_realloc_r>:
 800dd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd10:	4680      	mov	r8, r0
 800dd12:	4614      	mov	r4, r2
 800dd14:	460e      	mov	r6, r1
 800dd16:	b921      	cbnz	r1, 800dd22 <_realloc_r+0x16>
 800dd18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	f7ff bf81 	b.w	800dc24 <_malloc_r>
 800dd22:	b92a      	cbnz	r2, 800dd30 <_realloc_r+0x24>
 800dd24:	f000 f83e 	bl	800dda4 <_free_r>
 800dd28:	4625      	mov	r5, r4
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd30:	f000 f884 	bl	800de3c <_malloc_usable_size_r>
 800dd34:	4284      	cmp	r4, r0
 800dd36:	4607      	mov	r7, r0
 800dd38:	d802      	bhi.n	800dd40 <_realloc_r+0x34>
 800dd3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd3e:	d812      	bhi.n	800dd66 <_realloc_r+0x5a>
 800dd40:	4621      	mov	r1, r4
 800dd42:	4640      	mov	r0, r8
 800dd44:	f7ff ff6e 	bl	800dc24 <_malloc_r>
 800dd48:	4605      	mov	r5, r0
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d0ed      	beq.n	800dd2a <_realloc_r+0x1e>
 800dd4e:	42bc      	cmp	r4, r7
 800dd50:	4622      	mov	r2, r4
 800dd52:	4631      	mov	r1, r6
 800dd54:	bf28      	it	cs
 800dd56:	463a      	movcs	r2, r7
 800dd58:	f7ff fee2 	bl	800db20 <memcpy>
 800dd5c:	4631      	mov	r1, r6
 800dd5e:	4640      	mov	r0, r8
 800dd60:	f000 f820 	bl	800dda4 <_free_r>
 800dd64:	e7e1      	b.n	800dd2a <_realloc_r+0x1e>
 800dd66:	4635      	mov	r5, r6
 800dd68:	e7df      	b.n	800dd2a <_realloc_r+0x1e>
	...

0800dd6c <_sbrk_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d06      	ldr	r5, [pc, #24]	; (800dd88 <_sbrk_r+0x1c>)
 800dd70:	2300      	movs	r3, #0
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	602b      	str	r3, [r5, #0]
 800dd78:	f7f6 fbfc 	bl	8004574 <_sbrk>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_sbrk_r+0x1a>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_sbrk_r+0x1a>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	240010d8 	.word	0x240010d8

0800dd8c <__malloc_lock>:
 800dd8c:	4801      	ldr	r0, [pc, #4]	; (800dd94 <__malloc_lock+0x8>)
 800dd8e:	f000 b85d 	b.w	800de4c <__retarget_lock_acquire_recursive>
 800dd92:	bf00      	nop
 800dd94:	240010dc 	.word	0x240010dc

0800dd98 <__malloc_unlock>:
 800dd98:	4801      	ldr	r0, [pc, #4]	; (800dda0 <__malloc_unlock+0x8>)
 800dd9a:	f000 b858 	b.w	800de4e <__retarget_lock_release_recursive>
 800dd9e:	bf00      	nop
 800dda0:	240010dc 	.word	0x240010dc

0800dda4 <_free_r>:
 800dda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d044      	beq.n	800de34 <_free_r+0x90>
 800ddaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddae:	9001      	str	r0, [sp, #4]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f1a1 0404 	sub.w	r4, r1, #4
 800ddb6:	bfb8      	it	lt
 800ddb8:	18e4      	addlt	r4, r4, r3
 800ddba:	f7ff ffe7 	bl	800dd8c <__malloc_lock>
 800ddbe:	4a1e      	ldr	r2, [pc, #120]	; (800de38 <_free_r+0x94>)
 800ddc0:	9801      	ldr	r0, [sp, #4]
 800ddc2:	6813      	ldr	r3, [r2, #0]
 800ddc4:	b933      	cbnz	r3, 800ddd4 <_free_r+0x30>
 800ddc6:	6063      	str	r3, [r4, #4]
 800ddc8:	6014      	str	r4, [r2, #0]
 800ddca:	b003      	add	sp, #12
 800ddcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddd0:	f7ff bfe2 	b.w	800dd98 <__malloc_unlock>
 800ddd4:	42a3      	cmp	r3, r4
 800ddd6:	d908      	bls.n	800ddea <_free_r+0x46>
 800ddd8:	6825      	ldr	r5, [r4, #0]
 800ddda:	1961      	adds	r1, r4, r5
 800dddc:	428b      	cmp	r3, r1
 800ddde:	bf01      	itttt	eq
 800dde0:	6819      	ldreq	r1, [r3, #0]
 800dde2:	685b      	ldreq	r3, [r3, #4]
 800dde4:	1949      	addeq	r1, r1, r5
 800dde6:	6021      	streq	r1, [r4, #0]
 800dde8:	e7ed      	b.n	800ddc6 <_free_r+0x22>
 800ddea:	461a      	mov	r2, r3
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	b10b      	cbz	r3, 800ddf4 <_free_r+0x50>
 800ddf0:	42a3      	cmp	r3, r4
 800ddf2:	d9fa      	bls.n	800ddea <_free_r+0x46>
 800ddf4:	6811      	ldr	r1, [r2, #0]
 800ddf6:	1855      	adds	r5, r2, r1
 800ddf8:	42a5      	cmp	r5, r4
 800ddfa:	d10b      	bne.n	800de14 <_free_r+0x70>
 800ddfc:	6824      	ldr	r4, [r4, #0]
 800ddfe:	4421      	add	r1, r4
 800de00:	1854      	adds	r4, r2, r1
 800de02:	42a3      	cmp	r3, r4
 800de04:	6011      	str	r1, [r2, #0]
 800de06:	d1e0      	bne.n	800ddca <_free_r+0x26>
 800de08:	681c      	ldr	r4, [r3, #0]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	6053      	str	r3, [r2, #4]
 800de0e:	4421      	add	r1, r4
 800de10:	6011      	str	r1, [r2, #0]
 800de12:	e7da      	b.n	800ddca <_free_r+0x26>
 800de14:	d902      	bls.n	800de1c <_free_r+0x78>
 800de16:	230c      	movs	r3, #12
 800de18:	6003      	str	r3, [r0, #0]
 800de1a:	e7d6      	b.n	800ddca <_free_r+0x26>
 800de1c:	6825      	ldr	r5, [r4, #0]
 800de1e:	1961      	adds	r1, r4, r5
 800de20:	428b      	cmp	r3, r1
 800de22:	bf04      	itt	eq
 800de24:	6819      	ldreq	r1, [r3, #0]
 800de26:	685b      	ldreq	r3, [r3, #4]
 800de28:	6063      	str	r3, [r4, #4]
 800de2a:	bf04      	itt	eq
 800de2c:	1949      	addeq	r1, r1, r5
 800de2e:	6021      	streq	r1, [r4, #0]
 800de30:	6054      	str	r4, [r2, #4]
 800de32:	e7ca      	b.n	800ddca <_free_r+0x26>
 800de34:	b003      	add	sp, #12
 800de36:	bd30      	pop	{r4, r5, pc}
 800de38:	240010d0 	.word	0x240010d0

0800de3c <_malloc_usable_size_r>:
 800de3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de40:	1f18      	subs	r0, r3, #4
 800de42:	2b00      	cmp	r3, #0
 800de44:	bfbc      	itt	lt
 800de46:	580b      	ldrlt	r3, [r1, r0]
 800de48:	18c0      	addlt	r0, r0, r3
 800de4a:	4770      	bx	lr

0800de4c <__retarget_lock_acquire_recursive>:
 800de4c:	4770      	bx	lr

0800de4e <__retarget_lock_release_recursive>:
 800de4e:	4770      	bx	lr

0800de50 <_init>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	bf00      	nop
 800de54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de56:	bc08      	pop	{r3}
 800de58:	469e      	mov	lr, r3
 800de5a:	4770      	bx	lr

0800de5c <_fini>:
 800de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5e:	bf00      	nop
 800de60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de62:	bc08      	pop	{r3}
 800de64:	469e      	mov	lr, r3
 800de66:	4770      	bx	lr
