
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec3c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800ef0c  0800ef0c  0001ef0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f25c  0800f25c  0001f25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0800f264  0800f264  0001f264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f274  0800f274  0001f274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800f278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000018e4  24000080  0800f2f4  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001964  0800f2f4  00021964  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d995  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ceb  00000000  00000000  0004da3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001640  00000000  00000000  00052730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014a8  00000000  00000000  00053d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a19  00000000  00000000  00055218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020423  00000000  00000000  0008bc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015458f  00000000  00000000  000ac054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002005e3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000060f0  00000000  00000000  00200634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800eef4 	.word	0x0800eef4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800eef4 	.word	0x0800eef4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b974 	b.w	8000998 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468e      	mov	lr, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d14d      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d6:	428a      	cmp	r2, r1
 80006d8:	4694      	mov	ip, r2
 80006da:	d969      	bls.n	80007b0 <__udivmoddi4+0xe8>
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	b152      	cbz	r2, 80006f8 <__udivmoddi4+0x30>
 80006e2:	fa01 f302 	lsl.w	r3, r1, r2
 80006e6:	f1c2 0120 	rsb	r1, r2, #32
 80006ea:	fa20 f101 	lsr.w	r1, r0, r1
 80006ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f2:	ea41 0e03 	orr.w	lr, r1, r3
 80006f6:	4094      	lsls	r4, r2
 80006f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006fc:	0c21      	lsrs	r1, r4, #16
 80006fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000702:	fa1f f78c 	uxth.w	r7, ip
 8000706:	fb08 e316 	mls	r3, r8, r6, lr
 800070a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800070e:	fb06 f107 	mul.w	r1, r6, r7
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f106 30ff 	add.w	r0, r6, #4294967295
 800071e:	f080 811f 	bcs.w	8000960 <__udivmoddi4+0x298>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 811c 	bls.w	8000960 <__udivmoddi4+0x298>
 8000728:	3e02      	subs	r6, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	b2a4      	uxth	r4, r4
 8000730:	fbb3 f0f8 	udiv	r0, r3, r8
 8000734:	fb08 3310 	mls	r3, r8, r0, r3
 8000738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800073c:	fb00 f707 	mul.w	r7, r0, r7
 8000740:	42a7      	cmp	r7, r4
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x92>
 8000744:	eb1c 0404 	adds.w	r4, ip, r4
 8000748:	f100 33ff 	add.w	r3, r0, #4294967295
 800074c:	f080 810a 	bcs.w	8000964 <__udivmoddi4+0x29c>
 8000750:	42a7      	cmp	r7, r4
 8000752:	f240 8107 	bls.w	8000964 <__udivmoddi4+0x29c>
 8000756:	4464      	add	r4, ip
 8000758:	3802      	subs	r0, #2
 800075a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800075e:	1be4      	subs	r4, r4, r7
 8000760:	2600      	movs	r6, #0
 8000762:	b11d      	cbz	r5, 800076c <__udivmoddi4+0xa4>
 8000764:	40d4      	lsrs	r4, r2
 8000766:	2300      	movs	r3, #0
 8000768:	e9c5 4300 	strd	r4, r3, [r5]
 800076c:	4631      	mov	r1, r6
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0xc2>
 8000776:	2d00      	cmp	r5, #0
 8000778:	f000 80ef 	beq.w	800095a <__udivmoddi4+0x292>
 800077c:	2600      	movs	r6, #0
 800077e:	e9c5 0100 	strd	r0, r1, [r5]
 8000782:	4630      	mov	r0, r6
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	fab3 f683 	clz	r6, r3
 800078e:	2e00      	cmp	r6, #0
 8000790:	d14a      	bne.n	8000828 <__udivmoddi4+0x160>
 8000792:	428b      	cmp	r3, r1
 8000794:	d302      	bcc.n	800079c <__udivmoddi4+0xd4>
 8000796:	4282      	cmp	r2, r0
 8000798:	f200 80f9 	bhi.w	800098e <__udivmoddi4+0x2c6>
 800079c:	1a84      	subs	r4, r0, r2
 800079e:	eb61 0303 	sbc.w	r3, r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	469e      	mov	lr, r3
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d0e0      	beq.n	800076c <__udivmoddi4+0xa4>
 80007aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ae:	e7dd      	b.n	800076c <__udivmoddi4+0xa4>
 80007b0:	b902      	cbnz	r2, 80007b4 <__udivmoddi4+0xec>
 80007b2:	deff      	udf	#255	; 0xff
 80007b4:	fab2 f282 	clz	r2, r2
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	f040 8092 	bne.w	80008e2 <__udivmoddi4+0x21a>
 80007be:	eba1 010c 	sub.w	r1, r1, ip
 80007c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007c6:	fa1f fe8c 	uxth.w	lr, ip
 80007ca:	2601      	movs	r6, #1
 80007cc:	0c20      	lsrs	r0, r4, #16
 80007ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80007d2:	fb07 1113 	mls	r1, r7, r3, r1
 80007d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007da:	fb0e f003 	mul.w	r0, lr, r3
 80007de:	4288      	cmp	r0, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x12c>
 80007e2:	eb1c 0101 	adds.w	r1, ip, r1
 80007e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x12a>
 80007ec:	4288      	cmp	r0, r1
 80007ee:	f200 80cb 	bhi.w	8000988 <__udivmoddi4+0x2c0>
 80007f2:	4643      	mov	r3, r8
 80007f4:	1a09      	subs	r1, r1, r0
 80007f6:	b2a4      	uxth	r4, r4
 80007f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000800:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000804:	fb0e fe00 	mul.w	lr, lr, r0
 8000808:	45a6      	cmp	lr, r4
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x156>
 800080c:	eb1c 0404 	adds.w	r4, ip, r4
 8000810:	f100 31ff 	add.w	r1, r0, #4294967295
 8000814:	d202      	bcs.n	800081c <__udivmoddi4+0x154>
 8000816:	45a6      	cmp	lr, r4
 8000818:	f200 80bb 	bhi.w	8000992 <__udivmoddi4+0x2ca>
 800081c:	4608      	mov	r0, r1
 800081e:	eba4 040e 	sub.w	r4, r4, lr
 8000822:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000826:	e79c      	b.n	8000762 <__udivmoddi4+0x9a>
 8000828:	f1c6 0720 	rsb	r7, r6, #32
 800082c:	40b3      	lsls	r3, r6
 800082e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000832:	ea4c 0c03 	orr.w	ip, ip, r3
 8000836:	fa20 f407 	lsr.w	r4, r0, r7
 800083a:	fa01 f306 	lsl.w	r3, r1, r6
 800083e:	431c      	orrs	r4, r3
 8000840:	40f9      	lsrs	r1, r7
 8000842:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000846:	fa00 f306 	lsl.w	r3, r0, r6
 800084a:	fbb1 f8f9 	udiv	r8, r1, r9
 800084e:	0c20      	lsrs	r0, r4, #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fb09 1118 	mls	r1, r9, r8, r1
 8000858:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800085c:	fb08 f00e 	mul.w	r0, r8, lr
 8000860:	4288      	cmp	r0, r1
 8000862:	fa02 f206 	lsl.w	r2, r2, r6
 8000866:	d90b      	bls.n	8000880 <__udivmoddi4+0x1b8>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000870:	f080 8088 	bcs.w	8000984 <__udivmoddi4+0x2bc>
 8000874:	4288      	cmp	r0, r1
 8000876:	f240 8085 	bls.w	8000984 <__udivmoddi4+0x2bc>
 800087a:	f1a8 0802 	sub.w	r8, r8, #2
 800087e:	4461      	add	r1, ip
 8000880:	1a09      	subs	r1, r1, r0
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb1 f0f9 	udiv	r0, r1, r9
 8000888:	fb09 1110 	mls	r1, r9, r0, r1
 800088c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000890:	fb00 fe0e 	mul.w	lr, r0, lr
 8000894:	458e      	cmp	lr, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x1e2>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a0:	d26c      	bcs.n	800097c <__udivmoddi4+0x2b4>
 80008a2:	458e      	cmp	lr, r1
 80008a4:	d96a      	bls.n	800097c <__udivmoddi4+0x2b4>
 80008a6:	3802      	subs	r0, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ae:	fba0 9402 	umull	r9, r4, r0, r2
 80008b2:	eba1 010e 	sub.w	r1, r1, lr
 80008b6:	42a1      	cmp	r1, r4
 80008b8:	46c8      	mov	r8, r9
 80008ba:	46a6      	mov	lr, r4
 80008bc:	d356      	bcc.n	800096c <__udivmoddi4+0x2a4>
 80008be:	d053      	beq.n	8000968 <__udivmoddi4+0x2a0>
 80008c0:	b15d      	cbz	r5, 80008da <__udivmoddi4+0x212>
 80008c2:	ebb3 0208 	subs.w	r2, r3, r8
 80008c6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ca:	fa01 f707 	lsl.w	r7, r1, r7
 80008ce:	fa22 f306 	lsr.w	r3, r2, r6
 80008d2:	40f1      	lsrs	r1, r6
 80008d4:	431f      	orrs	r7, r3
 80008d6:	e9c5 7100 	strd	r7, r1, [r5]
 80008da:	2600      	movs	r6, #0
 80008dc:	4631      	mov	r1, r6
 80008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	40d8      	lsrs	r0, r3
 80008e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ec:	fa21 f303 	lsr.w	r3, r1, r3
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4301      	orrs	r1, r0
 80008f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f8:	fa1f fe8c 	uxth.w	lr, ip
 80008fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000900:	fb07 3610 	mls	r6, r7, r0, r3
 8000904:	0c0b      	lsrs	r3, r1, #16
 8000906:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800090a:	fb00 f60e 	mul.w	r6, r0, lr
 800090e:	429e      	cmp	r6, r3
 8000910:	fa04 f402 	lsl.w	r4, r4, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x260>
 8000916:	eb1c 0303 	adds.w	r3, ip, r3
 800091a:	f100 38ff 	add.w	r8, r0, #4294967295
 800091e:	d22f      	bcs.n	8000980 <__udivmoddi4+0x2b8>
 8000920:	429e      	cmp	r6, r3
 8000922:	d92d      	bls.n	8000980 <__udivmoddi4+0x2b8>
 8000924:	3802      	subs	r0, #2
 8000926:	4463      	add	r3, ip
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	b289      	uxth	r1, r1
 800092c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000930:	fb07 3316 	mls	r3, r7, r6, r3
 8000934:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000938:	fb06 f30e 	mul.w	r3, r6, lr
 800093c:	428b      	cmp	r3, r1
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x28a>
 8000940:	eb1c 0101 	adds.w	r1, ip, r1
 8000944:	f106 38ff 	add.w	r8, r6, #4294967295
 8000948:	d216      	bcs.n	8000978 <__udivmoddi4+0x2b0>
 800094a:	428b      	cmp	r3, r1
 800094c:	d914      	bls.n	8000978 <__udivmoddi4+0x2b0>
 800094e:	3e02      	subs	r6, #2
 8000950:	4461      	add	r1, ip
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000958:	e738      	b.n	80007cc <__udivmoddi4+0x104>
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e705      	b.n	800076c <__udivmoddi4+0xa4>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e3      	b.n	800072c <__udivmoddi4+0x64>
 8000964:	4618      	mov	r0, r3
 8000966:	e6f8      	b.n	800075a <__udivmoddi4+0x92>
 8000968:	454b      	cmp	r3, r9
 800096a:	d2a9      	bcs.n	80008c0 <__udivmoddi4+0x1f8>
 800096c:	ebb9 0802 	subs.w	r8, r9, r2
 8000970:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000974:	3801      	subs	r0, #1
 8000976:	e7a3      	b.n	80008c0 <__udivmoddi4+0x1f8>
 8000978:	4646      	mov	r6, r8
 800097a:	e7ea      	b.n	8000952 <__udivmoddi4+0x28a>
 800097c:	4620      	mov	r0, r4
 800097e:	e794      	b.n	80008aa <__udivmoddi4+0x1e2>
 8000980:	4640      	mov	r0, r8
 8000982:	e7d1      	b.n	8000928 <__udivmoddi4+0x260>
 8000984:	46d0      	mov	r8, sl
 8000986:	e77b      	b.n	8000880 <__udivmoddi4+0x1b8>
 8000988:	3b02      	subs	r3, #2
 800098a:	4461      	add	r1, ip
 800098c:	e732      	b.n	80007f4 <__udivmoddi4+0x12c>
 800098e:	4630      	mov	r0, r6
 8000990:	e709      	b.n	80007a6 <__udivmoddi4+0xde>
 8000992:	4464      	add	r4, ip
 8000994:	3802      	subs	r0, #2
 8000996:	e742      	b.n	800081e <__udivmoddi4+0x156>

08000998 <__aeabi_idiv0>:
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <_ZN3ros16normalizeSecNSecERmS0_>:
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	0a5a      	lsrs	r2, r3, #9
 80009ac:	490f      	ldr	r1, [pc, #60]	; (80009ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80009ae:	fba1 1202 	umull	r1, r2, r1, r2
 80009b2:	09d2      	lsrs	r2, r2, #7
 80009b4:	490e      	ldr	r1, [pc, #56]	; (80009f0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80009b6:	fb01 f202 	mul.w	r2, r1, r2
 80009ba:	1a9b      	subs	r3, r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	0a5b      	lsrs	r3, r3, #9
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	09db      	lsrs	r3, r3, #7
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	441a      	add	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	00044b83 	.word	0x00044b83
 80009f0:	3b9aca00 	.word	0x3b9aca00

080009f4 <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80009f8:	2100      	movs	r1, #0
 80009fa:	481b      	ldr	r0, [pc, #108]	; (8000a68 <_Z13DC_motor_initv+0x74>)
 80009fc:	f00a fe06 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000a00:	2104      	movs	r1, #4
 8000a02:	4819      	ldr	r0, [pc, #100]	; (8000a68 <_Z13DC_motor_initv+0x74>)
 8000a04:	f00a fe02 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4818      	ldr	r0, [pc, #96]	; (8000a6c <_Z13DC_motor_initv+0x78>)
 8000a0c:	f00a fdfe 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	4816      	ldr	r0, [pc, #88]	; (8000a6c <_Z13DC_motor_initv+0x78>)
 8000a14:	f00a fdfa 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4815      	ldr	r0, [pc, #84]	; (8000a70 <_Z13DC_motor_initv+0x7c>)
 8000a1c:	f00a fdf6 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	4813      	ldr	r0, [pc, #76]	; (8000a70 <_Z13DC_motor_initv+0x7c>)
 8000a24:	f00a fdf2 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <_Z13DC_motor_initv+0x80>)
 8000a2c:	f00a fdee 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <_Z13DC_motor_initv+0x80>)
 8000a34:	f00a fdea 	bl	800b60c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <_Z13DC_motor_initv+0x84>)
 8000a3a:	f00a fafb 	bl	800b034 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 8000a3e:	2104      	movs	r1, #4
 8000a40:	480e      	ldr	r0, [pc, #56]	; (8000a7c <_Z13DC_motor_initv+0x88>)
 8000a42:	f00a fbd5 	bl	800b1f0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000a46:	2100      	movs	r1, #0
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <_Z13DC_motor_initv+0x88>)
 8000a4a:	f00a fbd1 	bl	800b1f0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 8000a4e:	2104      	movs	r1, #4
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <_Z13DC_motor_initv+0x8c>)
 8000a52:	f00a fbcd 	bl	800b1f0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8000a56:	2100      	movs	r1, #0
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <_Z13DC_motor_initv+0x8c>)
 8000a5a:	f00a fbc9 	bl	800b1f0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_Base_Start_IT(&htim24);
 8000a5e:	4809      	ldr	r0, [pc, #36]	; (8000a84 <_Z13DC_motor_initv+0x90>)
 8000a60:	f00a fae8 	bl	800b034 <HAL_TIM_Base_Start_IT>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	24000280 	.word	0x24000280
 8000a6c:	24000364 	.word	0x24000364
 8000a70:	240002cc 	.word	0x240002cc
 8000a74:	24000318 	.word	0x24000318
 8000a78:	240003fc 	.word	0x240003fc
 8000a7c:	240003b0 	.word	0x240003b0
 8000a80:	24000448 	.word	0x24000448
 8000a84:	24000494 	.word	0x24000494

08000a88 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000a88:	b480      	push	{r7}
 8000a8a:	b08f      	sub	sp, #60	; 0x3c
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a90:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000a94:	ed87 1b08 	vstr	d1, [r7, #32]
 8000a98:	ed87 2b06 	vstr	d2, [r7, #24]
 8000a9c:	ed87 3b04 	vstr	d3, [r7, #16]
 8000aa0:	ed87 4b02 	vstr	d4, [r7, #8]
 8000aa4:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000aa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000aaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000aae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000ab2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ab4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ab8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 8000abc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ac2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000ac6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ac8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000acc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000ad0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ad6:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 8000ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ae0:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	373c      	adds	r7, #60	; 0x3c
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000b00:	ee07 3a90 	vmov	s15, r3
 8000b04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b08:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b0c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	ed93 7b00 	vldr	d7, [r3]
 8000b16:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	ed93 7b02 	vldr	d7, [r3, #8]
 8000b20:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000b2a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000b40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	ed93 6b06 	vldr	d6, [r3, #24]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	ed93 6b04 	vldr	d6, [r3, #16]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000b6c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	ed93 5b06 	vldr	d5, [r3, #24]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000b7c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b80:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	ed93 5b08 	vldr	d5, [r3, #32]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000b90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <_Z41__static_initialization_and_destruction_0ii>:
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d140      	bne.n	8000c4a <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d13b      	bne.n	8000c4a <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(1000,0.5,0, 0.001,512,20.8);
 8000bd2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000c58 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000bd6:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000c60 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000bda:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000c68 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000bde:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000c70 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000be2:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000be6:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8000c78 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000bea:	4827      	ldr	r0, [pc, #156]	; (8000c88 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8000bec:	f7ff ff4c 	bl	8000a88 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1000,0.5,0, 0.001,512,20.8);
 8000bf0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c58 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000bf4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000c60 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000bf8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000c68 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000bfc:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000c70 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c00:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c04:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8000c78 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000c08:	4820      	ldr	r0, [pc, #128]	; (8000c8c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8000c0a:	f7ff ff3d 	bl	8000a88 <_ZN8DC_motorC1Edddddd>
DC_motor br(1000,0.5,0, 0.001,512,13.2);
 8000c0e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000c12:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000c60 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c16:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000c68 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c1a:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8000c70 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c1e:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c22:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8000c78 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8000c28:	f7ff ff2e 	bl	8000a88 <_ZN8DC_motorC1Edddddd>
DC_motor bl(1000,0.5,0, 0.001,512,20.8);
 8000c2c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000c58 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000c30:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000c60 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c34:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000c68 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c38:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000c70 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c3c:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c40:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8000c78 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000c44:	4813      	ldr	r0, [pc, #76]	; (8000c94 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8000c46:	f7ff ff1f 	bl	8000a88 <_ZN8DC_motorC1Edddddd>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	f3af 8000 	nop.w
 8000c58:	cccccccd 	.word	0xcccccccd
 8000c5c:	4034cccc 	.word	0x4034cccc
 8000c60:	00000000 	.word	0x00000000
 8000c64:	40800000 	.word	0x40800000
 8000c68:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c6c:	3f50624d 	.word	0x3f50624d
	...
 8000c7c:	408f4000 	.word	0x408f4000
 8000c80:	66666666 	.word	0x66666666
 8000c84:	402a6666 	.word	0x402a6666
 8000c88:	240000a0 	.word	0x240000a0
 8000c8c:	24000110 	.word	0x24000110
 8000c90:	24000180 	.word	0x24000180
 8000c94:	240001f0 	.word	0x240001f0

08000c98 <_GLOBAL__sub_I_fr>:
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff ff89 	bl	8000bb8 <_Z41__static_initialization_and_destruction_0ii>
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_Z10debug_loopv>:

/** debug which function **/
bool mecanum_debug = true;


void debug_loop(){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <_Z10debug_loopv+0x14>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0fb      	beq.n	8000cac <_Z10debug_loopv+0x4>
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <_Z10debug_loopv+0x18>)
 8000cb6:	f000 fdd1 	bl	800185c <_ZN7Mecanum3runEv>
 8000cba:	e7f7      	b.n	8000cac <_Z10debug_loopv+0x4>
 8000cbc:	24000000 	.word	0x24000000
 8000cc0:	24000660 	.word	0x24000660

08000cc4 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>:

namespace INTAKE{
	double tilt, stretch, suck;
}

void INTAKE::trinary(double function, GPIO_TypeDef* a_port, int a_pin, GPIO_TypeDef* b_port, int b_pin){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	ed87 0b04 	vstr	d0, [r7, #16]
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
	if (function == 1) {
 8000cd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8000cda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cde:	eeb4 7b46 	vcmp.f64	d7, d6
 8000ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce6:	d10e      	bne.n	8000d06 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x42>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f007 fe9d 	bl	8008a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_SET);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f007 fe96 	bl	8008a30 <HAL_GPIO_WritePin>
	}
	else if (function == -1) {
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
	}
}
 8000d04:	e02c      	b.n	8000d60 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x9c>
	else if (function == 0) {
 8000d06:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	d10e      	bne.n	8000d32 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x6e>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f007 fe87 	bl	8008a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f007 fe80 	bl	8008a30 <HAL_GPIO_WritePin>
}
 8000d30:	e016      	b.n	8000d60 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x9c>
	else if (function == -1) {
 8000d32:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d36:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000d3a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d42:	d10d      	bne.n	8000d60 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x9c>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f007 fe6f 	bl	8008a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f007 fe68 	bl	8008a30 <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_ZN6INTAKE3runEv>:

void INTAKE::run(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	INTAKE::trinary(INTAKE::tilt, TILT_INA_PORT, TILT_INA_PIN, TILT_INB_PORT, TILT_INB_PIN);
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_ZN6INTAKE3runEv+0x4c>)
 8000d6e:	ed93 7b00 	vldr	d7, [r3]
 8000d72:	2304      	movs	r3, #4
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <_ZN6INTAKE3runEv+0x50>)
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <_ZN6INTAKE3runEv+0x54>)
 8000d7a:	eeb0 0b47 	vmov.f64	d0, d7
 8000d7e:	f7ff ffa1 	bl	8000cc4 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>
	INTAKE::trinary(INTAKE::stretch, STRETCH_INA_PORT, STRETCH_INA_PIN, STRETCH_INB_PORT, STRETCH_INB_PIN);
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <_ZN6INTAKE3runEv+0x58>)
 8000d84:	ed93 7b00 	vldr	d7, [r3]
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <_ZN6INTAKE3runEv+0x54>)
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <_ZN6INTAKE3runEv+0x5c>)
 8000d90:	eeb0 0b47 	vmov.f64	d0, d7
 8000d94:	f7ff ff96 	bl	8000cc4 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>
	INTAKE::trinary(INTAKE::suck, SUCK_INA_PORT, SUCK_INA_PIN, SUCK_INB_PORT, SUCK_INB_PIN);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <_ZN6INTAKE3runEv+0x60>)
 8000d9a:	ed93 7b00 	vldr	d7, [r3]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <_ZN6INTAKE3runEv+0x64>)
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <_ZN6INTAKE3runEv+0x64>)
 8000da6:	eeb0 0b47 	vmov.f64	d0, d7
 8000daa:	f7ff ff8b 	bl	8000cc4 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24000268 	.word	0x24000268
 8000db8:	58021400 	.word	0x58021400
 8000dbc:	58020400 	.word	0x58020400
 8000dc0:	24000270 	.word	0x24000270
 8000dc4:	58020800 	.word	0x58020800
 8000dc8:	24000278 	.word	0x24000278
 8000dcc:	58020000 	.word	0x58020000

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f004 fc90 	bl	80056f8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f81a 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 fba6 	bl	800152c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000de0:	f000 f886 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000de4:	f000 f8d8 	bl	8000f98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000de8:	f000 f92c 	bl	8001044 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dec:	f000 f980 	bl	80010f0 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000df0:	f000 f9d4 	bl	800119c <MX_TIM12_Init>
  MX_TIM13_Init();
 8000df4:	f000 fa22 	bl	800123c <MX_TIM13_Init>
  MX_TIM15_Init();
 8000df8:	f000 fa44 	bl	8001284 <MX_TIM15_Init>
  MX_DMA_Init();
 8000dfc:	f000 fb6e 	bl	80014dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e00:	f000 fb20 	bl	8001444 <MX_USART1_UART_Init>
  MX_TIM24_Init();
 8000e04:	f000 fad0 	bl	80013a8 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000e08:	f000 fcc2 	bl	8001790 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <main+0x3c>
	...

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09c      	sub	sp, #112	; 0x70
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	224c      	movs	r2, #76	; 0x4c
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f00d fede 	bl	800ebe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f00d fed8 	bl	800ebe0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e30:	2002      	movs	r0, #2
 8000e32:	f007 fe17 	bl	8008a64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <SystemClock_Config+0xdc>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e42:	4a2a      	ldr	r2, [pc, #168]	; (8000eec <SystemClock_Config+0xdc>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <SystemClock_Config+0xdc>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e56:	bf00      	nop
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <SystemClock_Config+0xdc>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e64:	d1f8      	bne.n	8000e58 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000e7c:	232a      	movs	r3, #42	; 0x2a
 8000e7e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f007 fe1b 	bl	8008ad8 <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ea8:	f000 fc6c 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	233f      	movs	r3, #63	; 0x3f
 8000eae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ebe:	2340      	movs	r3, #64	; 0x40
 8000ec0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ecc:	2340      	movs	r3, #64	; 0x40
 8000ece:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f008 f9ad 	bl	8009234 <HAL_RCC_ClockConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ee0:	f000 fc50 	bl	8001784 <Error_Handler>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3770      	adds	r7, #112	; 0x70
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58024800 	.word	0x58024800

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	2224      	movs	r2, #36	; 0x24
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00d fe6e 	bl	800ebe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f36:	2303      	movs	r3, #3
 8000f38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f62:	f00a faad 	bl	800b4c0 <HAL_TIM_Encoder_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000f6c:	f000 fc0a 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM2_Init+0xa4>)
 8000f7e:	f00b fb67 	bl	800c650 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f88:	f000 fbfc 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3730      	adds	r7, #48	; 0x30
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24000280 	.word	0x24000280

08000f98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2224      	movs	r2, #36	; 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00d fe1a 	bl	800ebe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_TIM3_Init+0xa4>)
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <MX_TIM3_Init+0xa8>)
 8000fba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_TIM3_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_TIM3_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_TIM3_Init+0xa4>)
 8000fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM3_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_TIM3_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_TIM3_Init+0xa4>)
 8001008:	f00a fa5a 	bl	800b4c0 <HAL_TIM_Encoder_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001012:	f000 fbb7 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_TIM3_Init+0xa4>)
 8001024:	f00b fb14 	bl	800c650 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800102e:	f000 fba9 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	; 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	240002cc 	.word	0x240002cc
 8001040:	40000400 	.word	0x40000400

08001044 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2224      	movs	r2, #36	; 0x24
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f00d fdc4 	bl	800ebe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_TIM4_Init+0xa4>)
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <MX_TIM4_Init+0xa8>)
 8001066:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_TIM4_Init+0xa4>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_TIM4_Init+0xa4>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_TIM4_Init+0xa4>)
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_TIM4_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_TIM4_Init+0xa4>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001088:	2303      	movs	r3, #3
 800108a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_TIM4_Init+0xa4>)
 80010b4:	f00a fa04 	bl	800b4c0 <HAL_TIM_Encoder_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010be:	f000 fb61 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_TIM4_Init+0xa4>)
 80010d0:	f00b fabe 	bl	800c650 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80010da:	f000 fb53 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3730      	adds	r7, #48	; 0x30
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	24000318 	.word	0x24000318
 80010ec:	40000800 	.word	0x40000800

080010f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	2224      	movs	r2, #36	; 0x24
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f00d fd6e 	bl	800ebe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_TIM5_Init+0xa4>)
 8001110:	4a21      	ldr	r2, [pc, #132]	; (8001198 <MX_TIM5_Init+0xa8>)
 8001112:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_TIM5_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_TIM5_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM5_Init+0xa4>)
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM5_Init+0xa4>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_TIM5_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001134:	2303      	movs	r3, #3
 8001136:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_TIM5_Init+0xa4>)
 8001160:	f00a f9ae 	bl	800b4c0 <HAL_TIM_Encoder_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800116a:	f000 fb0b 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_TIM5_Init+0xa4>)
 800117c:	f00b fa68 	bl	800c650 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001186:	f000 fafd 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	; 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24000364 	.word	0x24000364
 8001198:	40000c00 	.word	0x40000c00

0800119c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_TIM12_Init+0x98>)
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <MX_TIM12_Init+0x9c>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_TIM12_Init+0x98>)
 80011bc:	2253      	movs	r2, #83	; 0x53
 80011be:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_TIM12_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_TIM12_Init+0x98>)
 80011c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011cc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_TIM12_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_TIM12_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <MX_TIM12_Init+0x98>)
 80011dc:	f009 ffb0 	bl	800b140 <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011e6:	f000 facd 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_TIM12_Init+0x98>)
 8001202:	f00a fbb1 	bl	800b968 <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800120c:	f000 faba 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2204      	movs	r2, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM12_Init+0x98>)
 8001218:	f00a fba6 	bl	800b968 <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001222:	f000 faaf 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001226:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM12_Init+0x98>)
 8001228:	f003 fe26 	bl	8004e78 <HAL_TIM_MspPostInit>

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	240003b0 	.word	0x240003b0
 8001238:	40001800 	.word	0x40001800

0800123c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_TIM13_Init+0x40>)
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <MX_TIM13_Init+0x44>)
 8001244:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <MX_TIM13_Init+0x40>)
 8001248:	2253      	movs	r2, #83	; 0x53
 800124a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_TIM13_Init+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MX_TIM13_Init+0x40>)
 8001254:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001258:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_TIM13_Init+0x40>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_TIM13_Init+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_TIM13_Init+0x40>)
 8001268:	f009 fe8c 	bl	800af84 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001272:	f000 fa87 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	240003fc 	.word	0x240003fc
 8001280:	40001c00 	.word	0x40001c00

08001284 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b098      	sub	sp, #96	; 0x60
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2234      	movs	r2, #52	; 0x34
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00d fc95 	bl	800ebe0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012b8:	4a3a      	ldr	r2, [pc, #232]	; (80013a4 <MX_TIM15_Init+0x120>)
 80012ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 83;
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012be:	2253      	movs	r2, #83	; 0x53
 80012c0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ce:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80012e2:	482f      	ldr	r0, [pc, #188]	; (80013a0 <MX_TIM15_Init+0x11c>)
 80012e4:	f009 ff2c 	bl	800b140 <HAL_TIM_PWM_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 fa49 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80012fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012fe:	4619      	mov	r1, r3
 8001300:	4827      	ldr	r0, [pc, #156]	; (80013a0 <MX_TIM15_Init+0x11c>)
 8001302:	f00b f9a5 	bl	800c650 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 fa3a 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001310:	2360      	movs	r3, #96	; 0x60
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	481a      	ldr	r0, [pc, #104]	; (80013a0 <MX_TIM15_Init+0x11c>)
 8001336:	f00a fb17 	bl	800b968 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001340:	f000 fa20 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001344:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001348:	2204      	movs	r2, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM15_Init+0x11c>)
 800134e:	f00a fb0b 	bl	800b968 <HAL_TIM_PWM_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001358:	f000 fa14 	bl	8001784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001374:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM15_Init+0x11c>)
 8001384:	f00b fa00 	bl	800c788 <HAL_TIMEx_ConfigBreakDeadTime>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800138e:	f000 f9f9 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM15_Init+0x11c>)
 8001394:	f003 fd70 	bl	8004e78 <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3760      	adds	r7, #96	; 0x60
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	24000448 	.word	0x24000448
 80013a4:	40014000 	.word	0x40014000

080013a8 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_TIM24_Init+0x94>)
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <MX_TIM24_Init+0x98>)
 80013ca:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_TIM24_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_TIM24_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_TIM24_Init+0x94>)
 80013da:	f04f 32ff 	mov.w	r2, #4294967295
 80013de:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_TIM24_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_TIM24_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_TIM24_Init+0x94>)
 80013ee:	f009 fdc9 	bl	800af84 <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 80013f8:	f000 f9c4 	bl	8001784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_TIM24_Init+0x94>)
 800140a:	f00a fbc1 	bl	800bb90 <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 f9b6 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_TIM24_Init+0x94>)
 8001426:	f00b f913 	bl	800c650 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8001430:	f000 f9a8 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	24000494 	.word	0x24000494
 8001440:	4000e400 	.word	0x4000e400

08001444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <MX_USART1_UART_Init+0x94>)
 800144c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 800148e:	f00b fa39 	bl	800c904 <HAL_UART_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001498:	f000 f974 	bl	8001784 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 80014a0:	f00d fa80 	bl	800e9a4 <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014aa:	f000 f96b 	bl	8001784 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 80014b2:	f00d fab5 	bl	800ea20 <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014bc:	f000 f962 	bl	8001784 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USART1_UART_Init+0x90>)
 80014c2:	f00d fa36 	bl	800e932 <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 f95a 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	240004e0 	.word	0x240004e0
 80014d8:	40011000 	.word	0x40011000

080014dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_DMA_Init+0x4c>)
 80014e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014e8:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <MX_DMA_Init+0x4c>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_DMA_Init+0x4c>)
 80014f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	200b      	movs	r0, #11
 8001506:	f004 fa64 	bl	80059d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800150a:	200b      	movs	r0, #11
 800150c:	f004 fa7b 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	200c      	movs	r0, #12
 8001516:	f004 fa5c 	bl	80059d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800151a:	200c      	movs	r0, #12
 800151c:	f004 fa73 	bl	8005a06 <HAL_NVIC_EnableIRQ>

}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58024400 	.word	0x58024400

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <MX_GPIO_Init+0x238>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	4a86      	ldr	r2, [pc, #536]	; (8001764 <MX_GPIO_Init+0x238>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001552:	4b84      	ldr	r3, [pc, #528]	; (8001764 <MX_GPIO_Init+0x238>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001560:	4b80      	ldr	r3, [pc, #512]	; (8001764 <MX_GPIO_Init+0x238>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	4a7f      	ldr	r2, [pc, #508]	; (8001764 <MX_GPIO_Init+0x238>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001570:	4b7c      	ldr	r3, [pc, #496]	; (8001764 <MX_GPIO_Init+0x238>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800157e:	4b79      	ldr	r3, [pc, #484]	; (8001764 <MX_GPIO_Init+0x238>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	4a77      	ldr	r2, [pc, #476]	; (8001764 <MX_GPIO_Init+0x238>)
 8001586:	f043 0320 	orr.w	r3, r3, #32
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158e:	4b75      	ldr	r3, [pc, #468]	; (8001764 <MX_GPIO_Init+0x238>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	f003 0320 	and.w	r3, r3, #32
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159c:	4b71      	ldr	r3, [pc, #452]	; (8001764 <MX_GPIO_Init+0x238>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	4a70      	ldr	r2, [pc, #448]	; (8001764 <MX_GPIO_Init+0x238>)
 80015a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ac:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <MX_GPIO_Init+0x238>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <MX_GPIO_Init+0x238>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	4a68      	ldr	r2, [pc, #416]	; (8001764 <MX_GPIO_Init+0x238>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ca:	4b66      	ldr	r3, [pc, #408]	; (8001764 <MX_GPIO_Init+0x238>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b62      	ldr	r3, [pc, #392]	; (8001764 <MX_GPIO_Init+0x238>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	4a61      	ldr	r2, [pc, #388]	; (8001764 <MX_GPIO_Init+0x238>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <MX_GPIO_Init+0x238>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <MX_GPIO_Init+0x238>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a59      	ldr	r2, [pc, #356]	; (8001764 <MX_GPIO_Init+0x238>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b57      	ldr	r3, [pc, #348]	; (8001764 <MX_GPIO_Init+0x238>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <MX_GPIO_Init+0x238>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	4a52      	ldr	r2, [pc, #328]	; (8001764 <MX_GPIO_Init+0x238>)
 800161c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001624:	4b4f      	ldr	r3, [pc, #316]	; (8001764 <MX_GPIO_Init+0x238>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001638:	484b      	ldr	r0, [pc, #300]	; (8001768 <MX_GPIO_Init+0x23c>)
 800163a:	f007 f9f9 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f242 0130 	movw	r1, #8240	; 0x2030
 8001644:	4849      	ldr	r0, [pc, #292]	; (800176c <MX_GPIO_Init+0x240>)
 8001646:	f007 f9f3 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001650:	4847      	ldr	r0, [pc, #284]	; (8001770 <MX_GPIO_Init+0x244>)
 8001652:	f007 f9ed 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	21f0      	movs	r1, #240	; 0xf0
 800165a:	4846      	ldr	r0, [pc, #280]	; (8001774 <MX_GPIO_Init+0x248>)
 800165c:	f007 f9e8 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 514f 	mov.w	r1, #13248	; 0x33c0
 8001666:	4844      	ldr	r0, [pc, #272]	; (8001778 <MX_GPIO_Init+0x24c>)
 8001668:	f007 f9e2 	bl	8008a30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001672:	4842      	ldr	r0, [pc, #264]	; (800177c <MX_GPIO_Init+0x250>)
 8001674:	f007 f9dc 	bl	8008a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001678:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4835      	ldr	r0, [pc, #212]	; (8001768 <MX_GPIO_Init+0x23c>)
 8001692:	f007 f80d 	bl	80086b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 8001696:	f242 0330 	movw	r3, #8240	; 0x2030
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169c:	2301      	movs	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	482f      	ldr	r0, [pc, #188]	; (800176c <MX_GPIO_Init+0x240>)
 80016b0:	f006 fffe 	bl	80086b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80016b4:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4828      	ldr	r0, [pc, #160]	; (8001770 <MX_GPIO_Init+0x244>)
 80016ce:	f006 ffef 	bl	80086b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016d2:	2303      	movs	r3, #3
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	4821      	ldr	r0, [pc, #132]	; (800176c <MX_GPIO_Init+0x240>)
 80016e6:	f006 ffe3 	bl	80086b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016ea:	23f0      	movs	r3, #240	; 0xf0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	481c      	ldr	r0, [pc, #112]	; (8001774 <MX_GPIO_Init+0x248>)
 8001702:	f006 ffd5 	bl	80086b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7
 8001706:	f44f 534f 	mov.w	r3, #13248	; 0x33c0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171c:	4619      	mov	r1, r3
 800171e:	4816      	ldr	r0, [pc, #88]	; (8001778 <MX_GPIO_Init+0x24c>)
 8001720:	f006 ffc6 	bl	80086b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001724:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <MX_GPIO_Init+0x250>)
 800173e:	f006 ffb7 	bl	80086b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001742:	2378      	movs	r3, #120	; 0x78
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4619      	mov	r1, r3
 8001754:	480a      	ldr	r0, [pc, #40]	; (8001780 <MX_GPIO_Init+0x254>)
 8001756:	f006 ffab 	bl	80086b0 <HAL_GPIO_Init>

}
 800175a:	bf00      	nop
 800175c:	3738      	adds	r7, #56	; 0x38
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	58024400 	.word	0x58024400
 8001768:	58021000 	.word	0x58021000
 800176c:	58020800 	.word	0x58020800
 8001770:	58021400 	.word	0x58021400
 8001774:	58020000 	.word	0x58020000
 8001778:	58020400 	.word	0x58020400
 800177c:	58020c00 	.word	0x58020c00
 8001780:	58021800 	.word	0x58021800

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	ROS::setup();
 8001794:	f002 f97e 	bl	8003a94 <_ZN3ROS5setupEv>
	STM::setup();
 8001798:	f003 fd1c 	bl	80051d4 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <main_function+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <main_function+0x1a>
 80017a4:	f7ff fa80 	bl	8000ca8 <_Z10debug_loopv>
 80017a8:	e7f8      	b.n	800179c <main_function+0xc>
		else ROS::loop();
 80017aa:	f002 f989 	bl	8003ac0 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80017ae:	e7f5      	b.n	800179c <main_function+0xc>
 80017b0:	24000260 	.word	0x24000260

080017b4 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	e9c1 2300 	strd	r2, r3, [r1]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	0000      	movs	r0, r0
	...

080017f8 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffd6 	bl	80017b4 <_ZN8CAR_INFOC1Ev>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3318      	adds	r3, #24
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ffd1 	bl	80017b4 <_ZN8CAR_INFOC1Ev>
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <_ZN7MecanumC1Ev+0x60>)
 800181a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	a309      	add	r3, pc, #36	; (adr r3, 8001848 <_ZN7MecanumC1Ev+0x50>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	a308      	add	r3, pc, #32	; (adr r3, 8001850 <_ZN7MecanumC1Ev+0x58>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001836:	f7ff f8dd 	bl	80009f4 <_Z13DC_motor_initv>
}
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	cccccccd 	.word	0xcccccccd
 800184c:	4020cccc 	.word	0x4020cccc
 8001850:	39581062 	.word	0x39581062
 8001854:	400d48b4 	.word	0x400d48b4
 8001858:	40270000 	.word	0x40270000

0800185c <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f807 	bl	8001878 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f89a 	bl	80019a4 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZN7Mecanum15tf2_wheel_speedEv>:
// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	fl.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	ed93 6b02 	vldr	d6, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	ed93 7b00 	vldr	d7, [r3]
 800188c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	ed93 5b04 	vldr	d5, [r3, #16]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80018a2:	ee34 7b07 	vadd.f64	d7, d4, d7
 80018a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018ae:	eeb1 5b47 	vneg.f64	d5, d7
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80018b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <_ZN7Mecanum15tf2_wheel_speedEv+0x11c>)
 80018be:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fr.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	ed93 7b00 	vldr	d7, [r3]
 80018ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	ed93 5b04 	vldr	d5, [r3, #16]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80018e4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80018e8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018f0:	eeb1 5b47 	vneg.f64	d5, d7
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80018fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018fe:	4b26      	ldr	r3, [pc, #152]	; (8001998 <_ZN7Mecanum15tf2_wheel_speedEv+0x120>)
 8001900:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	ed93 6b02 	vldr	d6, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	ed93 7b00 	vldr	d7, [r3]
 8001910:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	ed93 5b04 	vldr	d5, [r3, #16]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001926:	ee34 7b07 	vadd.f64	d7, d4, d7
 800192a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800192e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001932:	eeb1 5b47 	vneg.f64	d5, d7
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800193c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <_ZN7Mecanum15tf2_wheel_speedEv+0x124>)
 8001942:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	ed93 6b02 	vldr	d6, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	ed93 7b00 	vldr	d7, [r3]
 8001952:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	ed93 5b04 	vldr	d5, [r3, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001968:	ee34 7b07 	vadd.f64	d7, d4, d7
 800196c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001970:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001974:	eeb1 5b47 	vneg.f64	d5, d7
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800197e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_ZN7Mecanum15tf2_wheel_speedEv+0x128>)
 8001984:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	24000110 	.word	0x24000110
 8001998:	240000a0 	.word	0x240000a0
 800199c:	240001f0 	.word	0x240001f0
 80019a0:	24000180 	.word	0x24000180

080019a4 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	CAR_Now.Vy = -(0.25)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80019b2:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 80019b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019ba:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 80019bc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 80019c2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80019c6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 80019cc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80019d0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80019d6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80019da:	ee35 7b07 	vadd.f64	d7, d5, d7
 80019de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Vx = -(0.25)*radius*(fl.rps_now - fr.rps_now - bl.rps_now + br.rps_now);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80019ee:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 80019f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 80019f8:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 80019fe:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a02:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001a08:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a0c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001a10:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001a12:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a16:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001a1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Omega = -(0.25)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a2a:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001a2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001a3e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a42:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001a46:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001a4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001a50:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001a56:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a5a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001a60:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a64:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001a6a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001a6e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001a72:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	24000110 	.word	0x24000110
 8001a8c:	240000a0 	.word	0x240000a0
 8001a90:	240001f0 	.word	0x240001f0
 8001a94:	24000180 	.word	0x24000180

08001a98 <_Z41__static_initialization_and_destruction_0ii>:
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d107      	bne.n	8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d102      	bne.n	8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 8001ab2:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001ab4:	f7ff fea0 	bl	80017f8 <_ZN7MecanumC1Ev>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	24000660 	.word	0x24000660

08001ac4 <_GLOBAL__sub_I_mecanum>:
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff ffe3 	bl	8001a98 <_Z41__static_initialization_and_destruction_0ii>
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZN7MYRESET7receiveEv>:

namespace MYRESET{
	int state;
}

void MYRESET::receive(void){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	/* first part*/
	if ( HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;
 8001ad8:	2108      	movs	r1, #8
 8001ada:	4817      	ldr	r0, [pc, #92]	; (8001b38 <_ZN7MYRESET7receiveEv+0x64>)
 8001adc:	f006 ff90 	bl	8008a00 <HAL_GPIO_ReadPin>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <_ZN7MYRESET7receiveEv+0x22>
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <_ZN7MYRESET7receiveEv+0x68>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

	/* second part*/
	if (HAL_GPIO_ReadPin(SECOND_PART_PORT, SECOND_PART_PIN) == 0) MYRESET::state=2;
 8001af6:	2101      	movs	r1, #1
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <_ZN7MYRESET7receiveEv+0x6c>)
 8001afa:	f006 ff81 	bl	8008a00 <HAL_GPIO_ReadPin>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <_ZN7MYRESET7receiveEv+0x40>
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <_ZN7MYRESET7receiveEv+0x68>)
 8001b10:	2202      	movs	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]

	/* third part*/
	if (HAL_GPIO_ReadPin(THIRD_PART_PORT, THIRD_PART_PIN) == 0) MYRESET::state=3;
 8001b14:	2102      	movs	r1, #2
 8001b16:	480a      	ldr	r0, [pc, #40]	; (8001b40 <_ZN7MYRESET7receiveEv+0x6c>)
 8001b18:	f006 ff72 	bl	8008a00 <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf0c      	ite	eq
 8001b22:	2301      	moveq	r3, #1
 8001b24:	2300      	movne	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <_ZN7MYRESET7receiveEv+0x5e>
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <_ZN7MYRESET7receiveEv+0x68>)
 8001b2e:	2203      	movs	r2, #3
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	58021400 	.word	0x58021400
 8001b3c:	240006c0 	.word	0x240006c0
 8001b40:	58020800 	.word	0x58020800

08001b44 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <_ZN3ros3MsgC1Ev+0x1c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	0800f20c 	.word	0x0800f20c

08001b88 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
      data()
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ffe8 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ffce 	bl	8001b44 <_ZN3ros4TimeC1Ev>
    {
    }
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800f1f4 	.word	0x0800f1f4

08001bb8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	b2ca      	uxtb	r2, r1
 8001bd2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0a19      	lsrs	r1, r3, #8
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	4413      	add	r3, r2
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0c19      	lsrs	r1, r3, #16
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3302      	adds	r3, #2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	b2ca      	uxtb	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	0e19      	lsrs	r1, r3, #24
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3303      	adds	r3, #3
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6899      	ldr	r1, [r3, #8]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0a19      	lsrs	r1, r3, #8
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	b2ca      	uxtb	r2, r1
 8001c2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	0c19      	lsrs	r1, r3, #16
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b2ca      	uxtb	r2, r1
 8001c40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0e19      	lsrs	r1, r3, #24
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3303      	adds	r3, #3
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3304      	adds	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    }
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	440b      	add	r3, r1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	440b      	add	r3, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	6839      	ldr	r1, [r7, #0]
 8001cba:	440b      	add	r3, r1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	440b      	add	r3, r1
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	440b      	add	r3, r1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	60fb      	str	r3, [r7, #12]
     return offset;
 8001d22:	68fb      	ldr	r3, [r7, #12]
    }
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	0800ef0c 	.word	0x0800ef0c

08001d4c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	0800ef1c 	.word	0x0800ef1c

08001d68 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fef8 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	809a      	strh	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a06      	ldr	r2, [pc, #24]	; (8001dac <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	615a      	str	r2, [r3, #20]
    {
    }
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	0800f1dc 	.word	0x0800f1dc
 8001dac:	0800ef40 	.word	0x0800ef40

08001db0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	8899      	ldrh	r1, [r3, #4]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2ca      	uxtb	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	889b      	ldrh	r3, [r3, #4]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3302      	adds	r3, #2
 8001de4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa90 	bl	8000310 <strlen>
 8001df0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	69b9      	ldr	r1, [r7, #24]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 fe8e 	bl	8003b1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	3304      	adds	r3, #4
 8001e04:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	18d0      	adds	r0, r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f00c fed6 	bl	800ebc4 <memcpy>
      offset += length_topic_name;
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fa73 	bl	8000310 <strlen>
 8001e2a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	6979      	ldr	r1, [r7, #20]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 fe71 	bl	8003b1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	18d0      	adds	r0, r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f00c feb9 	bl	800ebc4 <memcpy>
      offset += length_message_type;
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4413      	add	r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fa56 	bl	8000310 <strlen>
 8001e64:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	6939      	ldr	r1, [r7, #16]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f001 fe54 	bl	8003b1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3304      	adds	r3, #4
 8001e78:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	18d0      	adds	r0, r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4619      	mov	r1, r3
 8001e88:	f00c fe9c 	bl	800ebc4 <memcpy>
      offset += length_md5sum;
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e9a:	68f9      	ldr	r1, [r7, #12]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0a19      	lsrs	r1, r3, #8
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3301      	adds	r3, #1
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b2ca      	uxtb	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	0c19      	lsrs	r1, r3, #16
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	0e19      	lsrs	r1, r3, #24
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3303      	adds	r3, #3
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	b2ca      	uxtb	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	61fb      	str	r3, [r7, #28]
      return offset;
 8001edc:	69fb      	ldr	r3, [r7, #28]
    }
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b08a      	sub	sp, #40	; 0x28
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	440b      	add	r3, r1
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3302      	adds	r3, #2
 8001f24:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	441a      	add	r2, r3
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 fe10 	bl	8003b58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	4413      	add	r3, r2
 8001f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d20c      	bcs.n	8001f68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	441a      	add	r2, r3
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	440b      	add	r3, r1
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e7ec      	b.n	8001f42 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	441a      	add	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	441a      	add	r2, r3
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 fddd 	bl	8003b58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	6a3a      	ldr	r2, [r7, #32]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d20c      	bcs.n	8001fce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	441a      	add	r2, r3
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	e7ec      	b.n	8001fa8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	441a      	add	r2, r3
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fdaa 	bl	8003b58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	3304      	adds	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4413      	add	r3, r2
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	441a      	add	r2, r3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3b01      	subs	r3, #1
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	440b      	add	r3, r1
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e7ec      	b.n	800200e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	3b01      	subs	r3, #1
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4413      	add	r3, r2
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	3b01      	subs	r3, #1
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	441a      	add	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	6839      	ldr	r1, [r7, #0]
 8002062:	440a      	add	r2, r1
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	3301      	adds	r3, #1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	440b      	add	r3, r1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	4313      	orrs	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3302      	adds	r3, #2
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	440b      	add	r3, r1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	4313      	orrs	r3, r2
 800208c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	3303      	adds	r3, #3
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	440b      	add	r3, r1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	061b      	lsls	r3, r3, #24
 800209c:	4313      	orrs	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	3304      	adds	r3, #4
 80020aa:	61bb      	str	r3, [r7, #24]
     return offset;
 80020ac:	69bb      	ldr	r3, [r7, #24]
    }
 80020ae:	4618      	mov	r0, r3
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	0800ef44 	.word	0x0800ef44

080020d4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	0800ef60 	.word	0x0800ef60

080020f0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fd34 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	711a      	strb	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002110:	609a      	str	r2, [r3, #8]
    {
    }
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	0800f1c4 	.word	0x0800f1c4
 8002120:	0800ef40 	.word	0x0800ef40

08002124 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4413      	add	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	7912      	ldrb	r2, [r2, #4]
 800213c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f8e1 	bl	8000310 <strlen>
 800214e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	4618      	mov	r0, r3
 800215a:	f001 fcdf 	bl	8003b1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	18d0      	adds	r0, r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	4619      	mov	r1, r3
 8002172:	f00c fd27 	bl	800ebc4 <memcpy>
      offset += length_msg;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
      return offset;
 800217e:	68fb      	ldr	r3, [r7, #12]
    }
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3301      	adds	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	441a      	add	r2, r3
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fccf 	bl	8003b58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3304      	adds	r3, #4
 80021be:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4413      	add	r3, r2
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d20c      	bcs.n	80021ea <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	441a      	add	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3b01      	subs	r3, #1
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	440b      	add	r3, r1
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e7ec      	b.n	80021c4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	3b01      	subs	r3, #1
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	441a      	add	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
     return offset;
 800220e:	693b      	ldr	r3, [r7, #16]
    }
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	0800ef84 	.word	0x0800ef84

08002234 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	0800ef98 	.word	0x0800ef98

08002250 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fc84 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	0800f1ac 	.word	0x0800f1ac

08002298 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	b2ca      	uxtb	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0a19      	lsrs	r1, r3, #8
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	3301      	adds	r3, #1
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	b2ca      	uxtb	r2, r1
 80022c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c19      	lsrs	r1, r3, #16
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3302      	adds	r3, #2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2ca      	uxtb	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0e19      	lsrs	r1, r3, #24
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	3303      	adds	r3, #3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	3304      	adds	r3, #4
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d22b      	bcs.n	8002356 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800230c:	6939      	ldr	r1, [r7, #16]
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	4413      	add	r3, r2
 8002314:	b2ca      	uxtb	r2, r1
 8002316:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	0a19      	lsrs	r1, r3, #8
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	3301      	adds	r3, #1
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	0c19      	lsrs	r1, r3, #16
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	3302      	adds	r3, #2
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	0e19      	lsrs	r1, r3, #24
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	3303      	adds	r3, #3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3304      	adds	r3, #4
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	3301      	adds	r3, #1
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	e7ce      	b.n	80022f4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6919      	ldr	r1, [r3, #16]
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4413      	add	r3, r2
 8002360:	b2ca      	uxtb	r2, r1
 8002362:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	0a19      	lsrs	r1, r3, #8
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	4413      	add	r3, r2
 8002372:	b2ca      	uxtb	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	0c19      	lsrs	r1, r3, #16
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	3302      	adds	r3, #2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	0e19      	lsrs	r1, r3, #24
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	3303      	adds	r3, #3
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4413      	add	r3, r2
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3304      	adds	r3, #4
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d22b      	bcs.n	8002406 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2ca      	uxtb	r2, r1
 80023c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	0a19      	lsrs	r1, r3, #8
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3301      	adds	r3, #1
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	b2ca      	uxtb	r2, r1
 80023d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	0c19      	lsrs	r1, r3, #16
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3302      	adds	r3, #2
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	b2ca      	uxtb	r2, r1
 80023e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	0e19      	lsrs	r1, r3, #24
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	3303      	adds	r3, #3
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	b2ca      	uxtb	r2, r1
 80023f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3304      	adds	r3, #4
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3301      	adds	r3, #1
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e7ce      	b.n	80023a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69d9      	ldr	r1, [r3, #28]
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	0a19      	lsrs	r1, r3, #8
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	3301      	adds	r3, #1
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4413      	add	r3, r2
 8002422:	b2ca      	uxtb	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	0c19      	lsrs	r1, r3, #16
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3302      	adds	r3, #2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	0e19      	lsrs	r1, r3, #24
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	3303      	adds	r3, #3
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4413      	add	r3, r2
 8002446:	b2ca      	uxtb	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3304      	adds	r3, #4
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	d228      	bcs.n	80024b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ff50 	bl	8000310 <strlen>
 8002470:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	4413      	add	r3, r2
 8002478:	6979      	ldr	r1, [r7, #20]
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fb4e 	bl	8003b1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	3304      	adds	r3, #4
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	18d0      	adds	r0, r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4619      	mov	r1, r3
 800249c:	f00c fb92 	bl	800ebc4 <memcpy>
      offset += length_stringsi;
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	4413      	add	r3, r2
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e7d1      	b.n	8002454 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024b2:	4618      	mov	r0, r3
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08e      	sub	sp, #56	; 0x38
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80024d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d4:	3301      	adds	r3, #1
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	3302      	adds	r3, #2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	041b      	lsls	r3, r3, #16
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	3303      	adds	r3, #3
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	6a3a      	ldr	r2, [r7, #32]
 8002504:	4313      	orrs	r3, r2
 8002506:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250a:	3304      	adds	r3, #4
 800250c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	6a3a      	ldr	r2, [r7, #32]
 8002514:	429a      	cmp	r2, r3
 8002516:	d90a      	bls.n	800252e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f00c fb64 	bl	800ebf0 <realloc>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a3a      	ldr	r2, [r7, #32]
 8002532:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253e:	429a      	cmp	r2, r3
 8002540:	d236      	bcs.n	80025b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	440a      	add	r2, r1
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	3301      	adds	r3, #1
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	021b      	lsls	r3, r3, #8
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256a:	3302      	adds	r3, #2
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	440b      	add	r3, r1
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	3303      	adds	r3, #3
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	440b      	add	r3, r1
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	3304      	adds	r3, #4
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	3301      	adds	r3, #1
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
 80025ae:	e7c3      	b.n	8002538 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	3301      	adds	r3, #1
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	3302      	adds	r3, #2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	3303      	adds	r3, #3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	3304      	adds	r3, #4
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d90a      	bls.n	8002616 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f00c faf0 	bl	800ebf0 <realloc>
 8002610:	4602      	mov	r2, r0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002626:	429a      	cmp	r2, r3
 8002628:	d236      	bcs.n	8002698 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440a      	add	r2, r1
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	3301      	adds	r3, #1
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440b      	add	r3, r1
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	3302      	adds	r3, #2
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	440b      	add	r3, r1
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	3303      	adds	r3, #3
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440b      	add	r3, r1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	3304      	adds	r3, #4
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	3214      	adds	r2, #20
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	3301      	adds	r3, #1
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002696:	e7c3      	b.n	8002620 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	3301      	adds	r3, #1
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	3302      	adds	r3, #2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	3303      	adds	r3, #3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	3304      	adds	r3, #4
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d90a      	bls.n	80026fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f00c fa7c 	bl	800ebf0 <realloc>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800270e:	429a      	cmp	r2, r3
 8002710:	d23f      	bcs.n	8002792 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	441a      	add	r2, r3
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fa1a 	bl	8003b58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002726:	3304      	adds	r3, #4
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	429a      	cmp	r2, r3
 8002738:	d20c      	bcs.n	8002754 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	441a      	add	r2, r3
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	440b      	add	r3, r1
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	3301      	adds	r3, #1
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	e7ec      	b.n	800272e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	3b01      	subs	r3, #1
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	3b01      	subs	r3, #1
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	441a      	add	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4413      	add	r3, r2
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	3220      	adds	r2, #32
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	3301      	adds	r3, #1
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002790:	e7ba      	b.n	8002708 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002794:	4618      	mov	r0, r3
 8002796:	3738      	adds	r7, #56	; 0x38
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	0800f0e8 	.word	0x0800f0e8

080027b8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	0800efbc 	.word	0x0800efbc

080027d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	611a      	str	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68d8      	ldr	r0, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6891      	ldr	r1, [r2, #8]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4798      	blx	r3
 8002820:	4603      	mov	r3, r0
  };
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
  }
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a42      	ldr	r2, [pc, #264]	; (8002960 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d068      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a40      	ldr	r2, [pc, #256]	; (8002964 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d061      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3d      	ldr	r2, [pc, #244]	; (8002968 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d05a      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3b      	ldr	r2, [pc, #236]	; (800296c <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d053      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a38      	ldr	r2, [pc, #224]	; (8002970 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04c      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a36      	ldr	r2, [pc, #216]	; (8002974 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d045      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a33      	ldr	r2, [pc, #204]	; (8002978 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d03e      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a31      	ldr	r2, [pc, #196]	; (800297c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d037      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d030      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d029      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a29      	ldr	r2, [pc, #164]	; (8002988 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d022      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a27      	ldr	r2, [pc, #156]	; (800298c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d01b      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a24      	ldr	r2, [pc, #144]	; (8002990 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d014      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a22      	ldr	r2, [pc, #136]	; (8002994 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00d      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d006      	beq.n	800292c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d109      	bne.n	8002940 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	e008      	b.n	8002952 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800294e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40020010 	.word	0x40020010
 8002964:	40020028 	.word	0x40020028
 8002968:	40020040 	.word	0x40020040
 800296c:	40020058 	.word	0x40020058
 8002970:	40020070 	.word	0x40020070
 8002974:	40020088 	.word	0x40020088
 8002978:	400200a0 	.word	0x400200a0
 800297c:	400200b8 	.word	0x400200b8
 8002980:	40020410 	.word	0x40020410
 8002984:	40020428 	.word	0x40020428
 8002988:	40020440 	.word	0x40020440
 800298c:	40020458 	.word	0x40020458
 8002990:	40020470 	.word	0x40020470
 8002994:	40020488 	.word	0x40020488
 8002998:	400204a0 	.word	0x400204a0
 800299c:	400204b8 	.word	0x400204b8

080029a0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <_ZN13STM32HardwareC1Ev+0x34>)
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	240004e0 	.word	0x240004e0

080029d8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f804 	bl	80029ee <_ZN13STM32Hardware10reset_rbufEv>
    }
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a02:	4619      	mov	r1, r3
 8002a04:	f00a f860 	bl	800cac8 <HAL_UART_Receive_DMA>
    }
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff0d 	bl	8002844 <_ZN13STM32Hardware10getRdmaIndEv>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	429c      	cmp	r4, r3
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d012      	beq.n	8002a60 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002a40:	1c59      	adds	r1, r3, #1
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	791b      	ldrb	r3, [r3, #4]
 8002a4e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002a56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8002a60:	68fb      	ldr	r3, [r7, #12]
    }
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd90      	pop	{r4, r7, pc}
	...

08002a6c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d108      	bne.n	8002a92 <_ZN13STM32Hardware5flushEv+0x26>
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	f083 0301 	eor.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <_ZN13STM32Hardware5flushEv+0x26>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <_ZN13STM32Hardware5flushEv+0x28>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03f      	beq.n	8002b18 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d031      	beq.n	8002b12 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d20a      	bcs.n	8002ad4 <_ZN13STM32Hardware5flushEv+0x68>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	e006      	b.n	8002ae2 <_ZN13STM32Hardware5flushEv+0x76>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002aee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	89fa      	ldrh	r2, [r7, #14]
 8002af8:	4619      	mov	r1, r3
 8002afa:	f009 ff53 	bl	800c9a4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002b04:	89fb      	ldrh	r3, [r7, #14]
 8002b06:	4413      	add	r3, r2
 8002b08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 8002b12:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
      }
    }
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	240006c4 	.word	0x240006c4

08002b24 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	bfa8      	it	ge
 8002b3c:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002b40:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002b48:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	bf28      	it	cs
 8002b52:	4613      	movcs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002b5c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00c f82b 	bl	800ebc4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4413      	add	r3, r2
 8002b78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d00b      	beq.n	8002ba2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	18d1      	adds	r1, r2, r3
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f00c f811 	bl	800ebc4 <memcpy>
      }

      flush();
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7ff ff62 	bl	8002a6c <_ZN13STM32Hardware5flushEv>
    }
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	f002 fe24 	bl	8005804 <HAL_GetTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe ffc8 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	0800f168 	.word	0x0800f168

08002c18 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c18:	b480      	push	{r7}
 8002c1a:	b08b      	sub	sp, #44	; 0x2c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	4401      	add	r1, r0
 8002c3a:	b2d3      	uxtb	r3, r2
 8002c3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002c3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	0a02      	lsrs	r2, r0, #8
 8002c4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c50:	0a0b      	lsrs	r3, r1, #8
 8002c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c54:	3101      	adds	r1, #1
 8002c56:	6838      	ldr	r0, [r7, #0]
 8002c58:	4401      	add	r1, r0
 8002c5a:	b2d3      	uxtb	r3, r2
 8002c5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002c5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	0c02      	lsrs	r2, r0, #16
 8002c6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c70:	0c0b      	lsrs	r3, r1, #16
 8002c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c74:	3102      	adds	r1, #2
 8002c76:	6838      	ldr	r0, [r7, #0]
 8002c78:	4401      	add	r1, r0
 8002c7a:	b2d3      	uxtb	r3, r2
 8002c7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002c7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	0e02      	lsrs	r2, r0, #24
 8002c8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c90:	0e0b      	lsrs	r3, r1, #24
 8002c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c94:	3103      	adds	r1, #3
 8002c96:	6838      	ldr	r0, [r7, #0]
 8002c98:	4401      	add	r1, r0
 8002c9a:	b2d3      	uxtb	r3, r2
 8002c9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002c9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	000a      	movs	r2, r1
 8002cac:	2300      	movs	r3, #0
 8002cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb0:	3104      	adds	r1, #4
 8002cb2:	6838      	ldr	r0, [r7, #0]
 8002cb4:	4401      	add	r1, r0
 8002cb6:	b2d3      	uxtb	r3, r2
 8002cb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002cba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	0a0a      	lsrs	r2, r1, #8
 8002cc8:	2300      	movs	r3, #0
 8002cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ccc:	3105      	adds	r1, #5
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	4401      	add	r1, r0
 8002cd2:	b2d3      	uxtb	r3, r2
 8002cd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002cd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	0c0a      	lsrs	r2, r1, #16
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce8:	3106      	adds	r1, #6
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	4401      	add	r1, r0
 8002cee:	b2d3      	uxtb	r3, r2
 8002cf0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002cf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	0e0a      	lsrs	r2, r1, #24
 8002d00:	2300      	movs	r3, #0
 8002d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d04:	3107      	adds	r1, #7
 8002d06:	6838      	ldr	r0, [r7, #0]
 8002d08:	4401      	add	r1, r0
 8002d0a:	b2d3      	uxtb	r3, r2
 8002d0c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	3308      	adds	r3, #8
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002d1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d24:	6838      	ldr	r0, [r7, #0]
 8002d26:	4401      	add	r1, r0
 8002d28:	b2d3      	uxtb	r3, r2
 8002d2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002d2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	0a02      	lsrs	r2, r0, #8
 8002d3a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d3e:	0a0b      	lsrs	r3, r1, #8
 8002d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d42:	3101      	adds	r1, #1
 8002d44:	6838      	ldr	r0, [r7, #0]
 8002d46:	4401      	add	r1, r0
 8002d48:	b2d3      	uxtb	r3, r2
 8002d4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002d4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	0c02      	lsrs	r2, r0, #16
 8002d5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d5e:	0c0b      	lsrs	r3, r1, #16
 8002d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d62:	3102      	adds	r1, #2
 8002d64:	6838      	ldr	r0, [r7, #0]
 8002d66:	4401      	add	r1, r0
 8002d68:	b2d3      	uxtb	r3, r2
 8002d6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002d6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	0e02      	lsrs	r2, r0, #24
 8002d7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d7e:	0e0b      	lsrs	r3, r1, #24
 8002d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d82:	3103      	adds	r1, #3
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	4401      	add	r1, r0
 8002d88:	b2d3      	uxtb	r3, r2
 8002d8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002d8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	000a      	movs	r2, r1
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d9e:	3104      	adds	r1, #4
 8002da0:	6838      	ldr	r0, [r7, #0]
 8002da2:	4401      	add	r1, r0
 8002da4:	b2d3      	uxtb	r3, r2
 8002da6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002da8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	0a0a      	lsrs	r2, r1, #8
 8002db6:	2300      	movs	r3, #0
 8002db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dba:	3105      	adds	r1, #5
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	4401      	add	r1, r0
 8002dc0:	b2d3      	uxtb	r3, r2
 8002dc2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002dc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	0c0a      	lsrs	r2, r1, #16
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd6:	3106      	adds	r1, #6
 8002dd8:	6838      	ldr	r0, [r7, #0]
 8002dda:	4401      	add	r1, r0
 8002ddc:	b2d3      	uxtb	r3, r2
 8002dde:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002de0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	0e0a      	lsrs	r2, r1, #24
 8002dee:	2300      	movs	r3, #0
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	3107      	adds	r1, #7
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	4401      	add	r1, r0
 8002df8:	b2d3      	uxtb	r3, r2
 8002dfa:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	3308      	adds	r3, #8
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e08:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e12:	6838      	ldr	r0, [r7, #0]
 8002e14:	4401      	add	r1, r0
 8002e16:	b2d3      	uxtb	r3, r2
 8002e18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002e1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	0a02      	lsrs	r2, r0, #8
 8002e28:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e2c:	0a0b      	lsrs	r3, r1, #8
 8002e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e30:	3101      	adds	r1, #1
 8002e32:	6838      	ldr	r0, [r7, #0]
 8002e34:	4401      	add	r1, r0
 8002e36:	b2d3      	uxtb	r3, r2
 8002e38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	0c02      	lsrs	r2, r0, #16
 8002e48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e4c:	0c0b      	lsrs	r3, r1, #16
 8002e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e50:	3102      	adds	r1, #2
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	4401      	add	r1, r0
 8002e56:	b2d3      	uxtb	r3, r2
 8002e58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002e5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	0e02      	lsrs	r2, r0, #24
 8002e68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e6c:	0e0b      	lsrs	r3, r1, #24
 8002e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e70:	3103      	adds	r1, #3
 8002e72:	6838      	ldr	r0, [r7, #0]
 8002e74:	4401      	add	r1, r0
 8002e76:	b2d3      	uxtb	r3, r2
 8002e78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002e7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	000a      	movs	r2, r1
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8c:	3104      	adds	r1, #4
 8002e8e:	6838      	ldr	r0, [r7, #0]
 8002e90:	4401      	add	r1, r0
 8002e92:	b2d3      	uxtb	r3, r2
 8002e94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002e96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	0a0a      	lsrs	r2, r1, #8
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea8:	3105      	adds	r1, #5
 8002eaa:	6838      	ldr	r0, [r7, #0]
 8002eac:	4401      	add	r1, r0
 8002eae:	b2d3      	uxtb	r3, r2
 8002eb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	0c0a      	lsrs	r2, r1, #16
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec4:	3106      	adds	r1, #6
 8002ec6:	6838      	ldr	r0, [r7, #0]
 8002ec8:	4401      	add	r1, r0
 8002eca:	b2d3      	uxtb	r3, r2
 8002ecc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	0e0a      	lsrs	r2, r1, #24
 8002edc:	2300      	movs	r3, #0
 8002ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee0:	3107      	adds	r1, #7
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	4401      	add	r1, r0
 8002ee6:	b2d3      	uxtb	r3, r2
 8002ee8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	3308      	adds	r3, #8
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	372c      	adds	r7, #44	; 0x2c
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002efe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f02:	b0eb      	sub	sp, #428	; 0x1ac
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002f0a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f24:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002f28:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f2c:	4413      	add	r3, r2
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2200      	movs	r2, #0
 8002f34:	461c      	mov	r4, r3
 8002f36:	4615      	mov	r5, r2
 8002f38:	ea40 0804 	orr.w	r8, r0, r4
 8002f3c:	ea41 0905 	orr.w	r9, r1, r5
 8002f40:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f44:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	469a      	mov	sl, r3
 8002f5c:	4693      	mov	fp, r2
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002f6a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002f6e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002f72:	ea40 0402 	orr.w	r4, r0, r2
 8002f76:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002f80:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002f84:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f88:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f90:	1c9a      	adds	r2, r3, #2
 8002f92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f96:	4413      	add	r3, r2
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002fa2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002fb2:	464c      	mov	r4, r9
 8002fb4:	0423      	lsls	r3, r4, #16
 8002fb6:	4644      	mov	r4, r8
 8002fb8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002fbc:	4644      	mov	r4, r8
 8002fbe:	0422      	lsls	r2, r4, #16
 8002fc0:	ea40 0402 	orr.w	r4, r0, r2
 8002fc4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002fce:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002fd2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fd6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fde:	1cda      	adds	r2, r3, #3
 8002fe0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002ff0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002ff4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003000:	4623      	mov	r3, r4
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003008:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800300c:	4623      	mov	r3, r4
 800300e:	4303      	orrs	r3, r0
 8003010:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003014:	462b      	mov	r3, r5
 8003016:	430b      	orrs	r3, r1
 8003018:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800301c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003020:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003024:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003028:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2200      	movs	r2, #0
 800303a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800303e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800304e:	0023      	movs	r3, r4
 8003050:	2200      	movs	r2, #0
 8003052:	ea40 0402 	orr.w	r4, r0, r2
 8003056:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800305a:	430b      	orrs	r3, r1
 800305c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003060:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003064:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003068:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800306c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003070:	1d5a      	adds	r2, r3, #5
 8003072:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003082:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003092:	0223      	lsls	r3, r4, #8
 8003094:	2200      	movs	r2, #0
 8003096:	ea40 0402 	orr.w	r4, r0, r2
 800309a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800309e:	430b      	orrs	r3, r1
 80030a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80030a4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80030a8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030b4:	1d9a      	adds	r2, r3, #6
 80030b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030ba:	4413      	add	r3, r2
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030c6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80030d6:	0423      	lsls	r3, r4, #16
 80030d8:	2200      	movs	r2, #0
 80030da:	ea40 0402 	orr.w	r4, r0, r2
 80030de:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80030e2:	430b      	orrs	r3, r1
 80030e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80030e8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80030ec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80030f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030f8:	1dda      	adds	r2, r3, #7
 80030fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800310a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800311a:	0623      	lsls	r3, r4, #24
 800311c:	2200      	movs	r2, #0
 800311e:	ea40 0402 	orr.w	r4, r0, r2
 8003122:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003126:	430b      	orrs	r3, r1
 8003128:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800312c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003130:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003134:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003138:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800313c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003140:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003144:	3308      	adds	r3, #8
 8003146:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003156:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800315a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800315e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2200      	movs	r2, #0
 800316a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800316e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003172:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003176:	4623      	mov	r3, r4
 8003178:	4303      	orrs	r3, r0
 800317a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800317e:	462b      	mov	r3, r5
 8003180:	430b      	orrs	r3, r1
 8003182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003186:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800318a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800318e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003192:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800319c:	4413      	add	r3, r2
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80031a8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80031b8:	464c      	mov	r4, r9
 80031ba:	0223      	lsls	r3, r4, #8
 80031bc:	4644      	mov	r4, r8
 80031be:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031c2:	4644      	mov	r4, r8
 80031c4:	0222      	lsls	r2, r4, #8
 80031c6:	ea40 0402 	orr.w	r4, r0, r2
 80031ca:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80031ce:	430b      	orrs	r3, r1
 80031d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80031d4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80031d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031e4:	1c9a      	adds	r2, r3, #2
 80031e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003206:	464c      	mov	r4, r9
 8003208:	0423      	lsls	r3, r4, #16
 800320a:	4644      	mov	r4, r8
 800320c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003210:	4644      	mov	r4, r8
 8003212:	0422      	lsls	r2, r4, #16
 8003214:	ea40 0402 	orr.w	r4, r0, r2
 8003218:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800321c:	430b      	orrs	r3, r1
 800321e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003222:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003226:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800322a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800322e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003232:	1cda      	adds	r2, r3, #3
 8003234:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003238:	4413      	add	r3, r2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003244:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003248:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800324c:	4623      	mov	r3, r4
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003254:	4623      	mov	r3, r4
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800325c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003260:	4623      	mov	r3, r4
 8003262:	4303      	orrs	r3, r0
 8003264:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003268:	462b      	mov	r3, r5
 800326a:	430b      	orrs	r3, r1
 800326c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003270:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003274:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003278:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800327c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003280:	1d1a      	adds	r2, r3, #4
 8003282:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003292:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80032a2:	0023      	movs	r3, r4
 80032a4:	2200      	movs	r2, #0
 80032a6:	ea40 0402 	orr.w	r4, r0, r2
 80032aa:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80032ae:	430b      	orrs	r3, r1
 80032b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032b4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80032b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032c4:	1d5a      	adds	r2, r3, #5
 80032c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032d6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80032e6:	0223      	lsls	r3, r4, #8
 80032e8:	2200      	movs	r2, #0
 80032ea:	ea40 0402 	orr.w	r4, r0, r2
 80032ee:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80032f2:	430b      	orrs	r3, r1
 80032f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032f8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80032fc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003300:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003304:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003308:	1d9a      	adds	r2, r3, #6
 800330a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800331a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800332a:	0423      	lsls	r3, r4, #16
 800332c:	2200      	movs	r2, #0
 800332e:	ea40 0402 	orr.w	r4, r0, r2
 8003332:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003336:	430b      	orrs	r3, r1
 8003338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800333c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003340:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003344:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003348:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800334c:	1dda      	adds	r2, r3, #7
 800334e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2200      	movs	r2, #0
 800335a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800335e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800336e:	0623      	lsls	r3, r4, #24
 8003370:	2200      	movs	r2, #0
 8003372:	ea40 0402 	orr.w	r4, r0, r2
 8003376:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800337a:	430b      	orrs	r3, r1
 800337c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003380:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003384:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003388:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800338c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003390:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003394:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003398:	3308      	adds	r3, #8
 800339a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033aa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033ae:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80033b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033b6:	4413      	add	r3, r2
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033c2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80033c6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80033ca:	4623      	mov	r3, r4
 80033cc:	4303      	orrs	r3, r0
 80033ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80033d0:	462b      	mov	r3, r5
 80033d2:	430b      	orrs	r3, r1
 80033d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033d6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80033da:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033de:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033ec:	4413      	add	r3, r2
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2200      	movs	r2, #0
 80033f4:	673b      	str	r3, [r7, #112]	; 0x70
 80033f6:	677a      	str	r2, [r7, #116]	; 0x74
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003404:	464c      	mov	r4, r9
 8003406:	0223      	lsls	r3, r4, #8
 8003408:	4644      	mov	r4, r8
 800340a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800340e:	4644      	mov	r4, r8
 8003410:	0222      	lsls	r2, r4, #8
 8003412:	ea40 0402 	orr.w	r4, r0, r2
 8003416:	66bc      	str	r4, [r7, #104]	; 0x68
 8003418:	430b      	orrs	r3, r1
 800341a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800341c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003420:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003424:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003428:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2200      	movs	r2, #0
 800343a:	663b      	str	r3, [r7, #96]	; 0x60
 800343c:	667a      	str	r2, [r7, #100]	; 0x64
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800344a:	464c      	mov	r4, r9
 800344c:	0423      	lsls	r3, r4, #16
 800344e:	4644      	mov	r4, r8
 8003450:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003454:	4644      	mov	r4, r8
 8003456:	0422      	lsls	r2, r4, #16
 8003458:	ea40 0402 	orr.w	r4, r0, r2
 800345c:	65bc      	str	r4, [r7, #88]	; 0x58
 800345e:	430b      	orrs	r3, r1
 8003460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003462:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003466:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800346a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800346e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003472:	1cda      	adds	r2, r3, #3
 8003474:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003478:	4413      	add	r3, r2
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2200      	movs	r2, #0
 8003480:	653b      	str	r3, [r7, #80]	; 0x50
 8003482:	657a      	str	r2, [r7, #84]	; 0x54
 8003484:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003488:	4623      	mov	r3, r4
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800348e:	4623      	mov	r3, r4
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
 8003494:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003498:	4623      	mov	r3, r4
 800349a:	4303      	orrs	r3, r0
 800349c:	643b      	str	r3, [r7, #64]	; 0x40
 800349e:	462b      	mov	r3, r5
 80034a0:	430b      	orrs	r3, r1
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
 80034a4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80034a8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034ac:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034b4:	1d1a      	adds	r2, r3, #4
 80034b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2200      	movs	r2, #0
 80034c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80034d0:	0023      	movs	r3, r4
 80034d2:	2200      	movs	r2, #0
 80034d4:	ea40 0402 	orr.w	r4, r0, r2
 80034d8:	633c      	str	r4, [r7, #48]	; 0x30
 80034da:	430b      	orrs	r3, r1
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
 80034de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80034e2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034e6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034ee:	1d5a      	adds	r2, r3, #5
 80034f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034f4:	4413      	add	r3, r2
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2200      	movs	r2, #0
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800350a:	0223      	lsls	r3, r4, #8
 800350c:	2200      	movs	r2, #0
 800350e:	ea40 0402 	orr.w	r4, r0, r2
 8003512:	623c      	str	r4, [r7, #32]
 8003514:	430b      	orrs	r3, r1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800351c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003520:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003524:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003528:	3306      	adds	r3, #6
 800352a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2200      	movs	r2, #0
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	61fa      	str	r2, [r7, #28]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	69bc      	ldr	r4, [r7, #24]
 8003544:	0423      	lsls	r3, r4, #16
 8003546:	2200      	movs	r2, #0
 8003548:	ea40 0402 	orr.w	r4, r0, r2
 800354c:	613c      	str	r4, [r7, #16]
 800354e:	430b      	orrs	r3, r1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003556:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800355a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800355e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003562:	3307      	adds	r3, #7
 8003564:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003568:	4413      	add	r3, r2
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2200      	movs	r2, #0
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	60fa      	str	r2, [r7, #12]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	68bc      	ldr	r4, [r7, #8]
 800357e:	0623      	lsls	r3, r4, #24
 8003580:	2200      	movs	r2, #0
 8003582:	ea40 0402 	orr.w	r4, r0, r2
 8003586:	603c      	str	r4, [r7, #0]
 8003588:	430b      	orrs	r3, r1
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003590:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003594:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003598:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800359c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80035a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035a4:	3308      	adds	r3, #8
 80035a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80035aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80035ae:	4618      	mov	r0, r3
 80035b0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80035b4:	46bd      	mov	sp, r7
 80035b6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035ba:	4770      	bx	lr

080035bc <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	4b03      	ldr	r3, [pc, #12]	; (80035d4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	0800efe0 	.word	0x0800efe0

080035d8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	0800eff4 	.word	0x0800eff4

080035f4 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
      data(0)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fab2 	bl	8001b68 <_ZN3ros3MsgC1Ev>
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	0800f150 	.word	0x0800f150

08003628 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800363c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003644:	6979      	ldr	r1, [r7, #20]
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	4401      	add	r1, r0
 800364a:	b2d3      	uxtb	r3, r2
 800364c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800364e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	0a02      	lsrs	r2, r0, #8
 800365c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003660:	0a0b      	lsrs	r3, r1, #8
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	3101      	adds	r1, #1
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	4401      	add	r1, r0
 800366a:	b2d3      	uxtb	r3, r2
 800366c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800366e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	0c02      	lsrs	r2, r0, #16
 800367c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003680:	0c0b      	lsrs	r3, r1, #16
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	3102      	adds	r1, #2
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	4401      	add	r1, r0
 800368a:	b2d3      	uxtb	r3, r2
 800368c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800368e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	0e02      	lsrs	r2, r0, #24
 800369c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036a0:	0e0b      	lsrs	r3, r1, #24
 80036a2:	6979      	ldr	r1, [r7, #20]
 80036a4:	3103      	adds	r1, #3
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	4401      	add	r1, r0
 80036aa:	b2d3      	uxtb	r3, r2
 80036ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80036ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	000a      	movs	r2, r1
 80036bc:	2300      	movs	r3, #0
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	3104      	adds	r1, #4
 80036c2:	6838      	ldr	r0, [r7, #0]
 80036c4:	4401      	add	r1, r0
 80036c6:	b2d3      	uxtb	r3, r2
 80036c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80036ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	0a0a      	lsrs	r2, r1, #8
 80036d8:	2300      	movs	r3, #0
 80036da:	6979      	ldr	r1, [r7, #20]
 80036dc:	3105      	adds	r1, #5
 80036de:	6838      	ldr	r0, [r7, #0]
 80036e0:	4401      	add	r1, r0
 80036e2:	b2d3      	uxtb	r3, r2
 80036e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80036e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	0c0a      	lsrs	r2, r1, #16
 80036f4:	2300      	movs	r3, #0
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	3106      	adds	r1, #6
 80036fa:	6838      	ldr	r0, [r7, #0]
 80036fc:	4401      	add	r1, r0
 80036fe:	b2d3      	uxtb	r3, r2
 8003700:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003702:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	0e0a      	lsrs	r2, r1, #24
 8003710:	2300      	movs	r3, #0
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	3107      	adds	r1, #7
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	4401      	add	r1, r0
 800371a:	b2d3      	uxtb	r3, r2
 800371c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	3308      	adds	r3, #8
 8003722:	617b      	str	r3, [r7, #20]
      return offset;
 8003724:	697b      	ldr	r3, [r7, #20]
    }
 8003726:	4618      	mov	r0, r3
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003732:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003736:	b0a3      	sub	sp, #140	; 0x8c
 8003738:	af00      	add	r7, sp, #0
 800373a:	6778      	str	r0, [r7, #116]	; 0x74
 800373c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003750:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003754:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2200      	movs	r2, #0
 8003762:	461c      	mov	r4, r3
 8003764:	4615      	mov	r5, r2
 8003766:	ea40 0804 	orr.w	r8, r0, r4
 800376a:	ea41 0905 	orr.w	r9, r1, r5
 800376e:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003772:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800377e:	4413      	add	r3, r2
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2200      	movs	r2, #0
 8003786:	469a      	mov	sl, r3
 8003788:	4693      	mov	fp, r2
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003796:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800379a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800379e:	ea40 0402 	orr.w	r4, r0, r2
 80037a2:	66bc      	str	r4, [r7, #104]	; 0x68
 80037a4:	430b      	orrs	r3, r1
 80037a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80037ac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037bc:	4413      	add	r3, r2
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2200      	movs	r2, #0
 80037c4:	663b      	str	r3, [r7, #96]	; 0x60
 80037c6:	667a      	str	r2, [r7, #100]	; 0x64
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037d4:	464c      	mov	r4, r9
 80037d6:	0423      	lsls	r3, r4, #16
 80037d8:	4644      	mov	r4, r8
 80037da:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80037de:	4644      	mov	r4, r8
 80037e0:	0422      	lsls	r2, r4, #16
 80037e2:	ea40 0402 	orr.w	r4, r0, r2
 80037e6:	65bc      	str	r4, [r7, #88]	; 0x58
 80037e8:	430b      	orrs	r3, r1
 80037ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80037f0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037fc:	1cda      	adds	r2, r3, #3
 80037fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003800:	4413      	add	r3, r2
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2200      	movs	r2, #0
 8003808:	653b      	str	r3, [r7, #80]	; 0x50
 800380a:	657a      	str	r2, [r7, #84]	; 0x54
 800380c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003810:	4623      	mov	r3, r4
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003816:	4623      	mov	r3, r4
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	64bb      	str	r3, [r7, #72]	; 0x48
 800381c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003820:	4623      	mov	r3, r4
 8003822:	4303      	orrs	r3, r0
 8003824:	643b      	str	r3, [r7, #64]	; 0x40
 8003826:	462b      	mov	r3, r5
 8003828:	430b      	orrs	r3, r1
 800382a:	647b      	str	r3, [r7, #68]	; 0x44
 800382c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003830:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003834:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2200      	movs	r2, #0
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38
 800384a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003856:	0023      	movs	r3, r4
 8003858:	2200      	movs	r2, #0
 800385a:	ea40 0402 	orr.w	r4, r0, r2
 800385e:	633c      	str	r4, [r7, #48]	; 0x30
 8003860:	430b      	orrs	r3, r1
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
 8003864:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003868:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800386c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003874:	1d5a      	adds	r2, r3, #5
 8003876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003878:	4413      	add	r3, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2200      	movs	r2, #0
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
 8003882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800388e:	0223      	lsls	r3, r4, #8
 8003890:	2200      	movs	r2, #0
 8003892:	ea40 0402 	orr.w	r4, r0, r2
 8003896:	623c      	str	r4, [r7, #32]
 8003898:	430b      	orrs	r3, r1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80038a0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80038a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80038a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ac:	3306      	adds	r3, #6
 80038ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038b0:	4413      	add	r3, r2
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2200      	movs	r2, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	61fa      	str	r2, [r7, #28]
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	69bc      	ldr	r4, [r7, #24]
 80038c6:	0423      	lsls	r3, r4, #16
 80038c8:	2200      	movs	r2, #0
 80038ca:	ea40 0402 	orr.w	r4, r0, r2
 80038ce:	613c      	str	r4, [r7, #16]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80038d8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80038dc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80038e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038e4:	3307      	adds	r3, #7
 80038e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2200      	movs	r2, #0
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	60fa      	str	r2, [r7, #12]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	68bc      	ldr	r4, [r7, #8]
 80038fe:	0623      	lsls	r3, r4, #24
 8003900:	2200      	movs	r2, #0
 8003902:	ea40 0402 	orr.w	r4, r0, r2
 8003906:	603c      	str	r4, [r7, #0]
 8003908:	430b      	orrs	r3, r1
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003910:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003914:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003918:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800391a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800391e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003922:	3308      	adds	r3, #8
 8003924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 800392c:	4618      	mov	r0, r3
 800392e:	378c      	adds	r7, #140	; 0x8c
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003936:	4770      	bx	lr

08003938 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	0800f018 	.word	0x0800f018

08003954 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 800395e:	4618      	mov	r0, r3
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	0800f028 	.word	0x0800f028

08003970 <_ZN3ROS9pub_resetEv>:
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
ros::Publisher reset_pub("reset_fromSTM", &reset);
ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);

/** RESET **/
void ROS::pub_reset(void){
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	af00      	add	r7, sp, #0
	MYRESET::receive();
 8003974:	f7fe f8ae 	bl	8001ad4 <_ZN7MYRESET7receiveEv>
	reset.data = MYRESET::state;
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <_ZN3ROS9pub_resetEv+0x24>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	17da      	asrs	r2, r3, #31
 800397e:	461c      	mov	r4, r3
 8003980:	4615      	mov	r5, r2
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <_ZN3ROS9pub_resetEv+0x28>)
 8003984:	e9c3 4502 	strd	r4, r5, [r3, #8]
	reset_pub.publish(&reset);
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <_ZN3ROS9pub_resetEv+0x28>)
 800398a:	4804      	ldr	r0, [pc, #16]	; (800399c <_ZN3ROS9pub_resetEv+0x2c>)
 800398c:	f7fe ff39 	bl	8002802 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003990:	bf00      	nop
 8003992:	bdb0      	pop	{r4, r5, r7, pc}
 8003994:	240006c0 	.word	0x240006c0
 8003998:	24001858 	.word	0x24001858
 800399c:	24001914 	.word	0x24001914

080039a0 <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E>:


/** SCARA **/
void ROS::relay_callback(const std_msgs::Int64 &msgs){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	SCARA::relay = msgs.data;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fc fe43 	bl	800063c <__aeabi_l2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4904      	ldr	r1, [pc, #16]	; (80039cc <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E+0x2c>)
 80039bc:	e9c1 2300 	strd	r2, r3, [r1]
	SCARA::run();
 80039c0:	f001 f888 	bl	8004ad4 <_ZN5SCARA3runEv>
}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	24001940 	.word	0x24001940

080039d0 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE>:


/** INTAKE **/
void ROS::intake_callback(const geometry_msgs::Point &msgs){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	INTAKE::tilt = msgs.x;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039de:	490a      	ldr	r1, [pc, #40]	; (8003a08 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x38>)
 80039e0:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::stretch = msgs.y;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039ea:	4908      	ldr	r1, [pc, #32]	; (8003a0c <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x3c>)
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::suck = msgs.z;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80039f6:	4906      	ldr	r1, [pc, #24]	; (8003a10 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x40>)
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::run();
 80039fc:	f7fd f9b4 	bl	8000d68 <_ZN6INTAKE3runEv>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	24000268 	.word	0x24000268
 8003a0c:	24000270 	.word	0x24000270
 8003a10:	24000278 	.word	0x24000278

08003a14 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:
}



/** CHASSIS -- mecanum **/
void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a22:	490b      	ldr	r1, [pc, #44]	; (8003a50 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003a24:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a2e:	4908      	ldr	r1, [pc, #32]	; (8003a50 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003a30:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a3a:	4905      	ldr	r1, [pc, #20]	; (8003a50 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003a3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003a42:	f7fd ff0b 	bl	800185c <_ZN7Mecanum3runEv>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	24000660 	.word	0x24000660

08003a54 <_ZN3ROS11pub_car_velEv>:

void ROS::pub_car_vel(void){
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
	car_speed.x = mecanum.CAR_Now.Vx;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <_ZN3ROS11pub_car_velEv+0x34>)
 8003a5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a5e:	490b      	ldr	r1, [pc, #44]	; (8003a8c <_ZN3ROS11pub_car_velEv+0x38>)
 8003a60:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <_ZN3ROS11pub_car_velEv+0x34>)
 8003a66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a6a:	4908      	ldr	r1, [pc, #32]	; (8003a8c <_ZN3ROS11pub_car_velEv+0x38>)
 8003a6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <_ZN3ROS11pub_car_velEv+0x34>)
 8003a72:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003a76:	4905      	ldr	r1, [pc, #20]	; (8003a8c <_ZN3ROS11pub_car_velEv+0x38>)
 8003a78:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <_ZN3ROS11pub_car_velEv+0x38>)
 8003a7e:	4804      	ldr	r0, [pc, #16]	; (8003a90 <_ZN3ROS11pub_car_velEv+0x3c>)
 8003a80:	f7fe febf 	bl	8002802 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	24000660 	.word	0x24000660
 8003a8c:	24001828 	.word	0x24001828
 8003a90:	24001900 	.word	0x24001900

08003a94 <_ZN3ROS5setupEv>:


/** ROS setup and loop **/
void ROS::setup(void){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
	nh.initNode();
 8003a98:	4806      	ldr	r0, [pc, #24]	; (8003ab4 <_ZN3ROS5setupEv+0x20>)
 8003a9a:	f000 f981 	bl	8003da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 8003a9e:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <_ZN3ROS5setupEv+0x24>)
 8003aa0:	4804      	ldr	r0, [pc, #16]	; (8003ab4 <_ZN3ROS5setupEv+0x20>)
 8003aa2:	f000 f9a6 	bl	8003df2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.advertise(mecanum_pub);
 8003aa6:	4905      	ldr	r1, [pc, #20]	; (8003abc <_ZN3ROS5setupEv+0x28>)
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <_ZN3ROS5setupEv+0x20>)
 8003aaa:	f000 f9cd 	bl	8003e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	240006c8 	.word	0x240006c8
 8003ab8:	24001868 	.word	0x24001868
 8003abc:	24001900 	.word	0x24001900

08003ac0 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <_ZN3ROS4loopEv+0x10>)
 8003ac6:	f000 f9ef 	bl	8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	240006c8 	.word	0x240006c8

08003ad4 <HAL_UART_TxCpltCallback>:


/* UART Communication */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003adc:	4805      	ldr	r0, [pc, #20]	; (8003af4 <HAL_UART_TxCpltCallback+0x20>)
 8003ade:	f000 fc54 	bl	800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe ffc1 	bl	8002a6c <_ZN13STM32Hardware5flushEv>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	240006c8 	.word	0x240006c8

08003af8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003b00:	4805      	ldr	r0, [pc, #20]	; (8003b18 <HAL_UART_RxCpltCallback+0x20>)
 8003b02:	f000 fc42 	bl	800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe ff70 	bl	80029ee <_ZN13STM32Hardware10reset_rbufEv>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	240006c8 	.word	0x240006c8

08003b1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d80d      	bhi.n	8003b4c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	fa22 f103 	lsr.w	r1, r2, r3
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	b2ca      	uxtb	r2, r1
 8003b42:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3301      	adds	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e7ee      	b.n	8003b2a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d811      	bhi.n	8003b96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6839      	ldr	r1, [r7, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	00d2      	lsls	r2, r2, #3
 8003b84:	fa01 f202 	lsl.w	r2, r1, r2
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e7ea      	b.n	8003b6c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	0800f198 	.word	0x0800f198

08003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ffe8 	bl	8003ba4 <_ZN3ros15NodeHandleBase_C1Ev>
 8003bd4:	4a45      	ldr	r2, [pc, #276]	; (8003cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fede 	bl	80029a0 <_ZN13STM32HardwareC1Ev>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	f241 1314 	movw	r3, #4372	; 0x1114
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fb29 	bl	8002250 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b18      	cmp	r3, #24
 8003c06:	d80b      	bhi.n	8003c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e7f0      	b.n	8003c02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b18      	cmp	r3, #24
 8003c28:	d80a      	bhi.n	8003c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003c32:	2100      	movs	r1, #0
 8003c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e7f1      	b.n	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d20a      	bcs.n	8003c62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e7f0      	b.n	8003c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6c:	d20a      	bcs.n	8003c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4413      	add	r3, r2
 8003c74:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	e7f0      	b.n	8003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.floats_length = 0;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats = NULL;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    req_param_resp.ints_length = 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    spin_timeout_ = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	0800f13c 	.word	0x0800f13c

08003cf0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	0800f180 	.word	0x0800f180

08003d10 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ffe5 	bl	8003cf0 <_ZN3ros11Subscriber_C1Ev>
 8003d26:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3310      	adds	r3, #16
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe ff49 	bl	8002bc8 <_ZN13geometry_msgs5PointC1Ev>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
  };
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	0800f124 	.word	0x0800f124

08003d58 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ffc1 	bl	8003cf0 <_ZN3ros11Subscriber_C1Ev>
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3310      	adds	r3, #16
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fc3b 	bl	80035f4 <_ZN8std_msgs5Int64C1Ev>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	609a      	str	r2, [r3, #8]
  };
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	0800f10c 	.word	0x0800f10c

08003da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe fe13 	bl	80029d8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db8:	461a      	mov	r2, r3
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de2:	461a      	mov	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b18      	cmp	r3, #24
 8003e04:	dc19      	bgt.n	8003e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
        return true;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e004      	b.n	8003e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e7e2      	b.n	8003e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003e3a:	2300      	movs	r3, #0
  }
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b18      	cmp	r3, #24
 8003e5a:	dc1e      	bgt.n	8003e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d111      	bne.n	8003e92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	60da      	str	r2, [r3, #12]
        return true;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e004      	b.n	8003e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e7dd      	b.n	8003e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003e9a:	2300      	movs	r3, #0
  }
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fe7b 	bl	8002bb0 <_ZN13STM32Hardware4timeEv>
 8003eba:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d905      	bls.n	8003ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d906      	bls.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d014      	beq.n	8003f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fe49 	bl	8002bb0 <_ZN13STM32Hardware4timeEv>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	bf8c      	ite	hi
 8003f2e:	2301      	movhi	r3, #1
 8003f30:	2300      	movls	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 8003f38:	f06f 0301 	mvn.w	r3, #1
 8003f3c:	e221      	b.n	8004382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fd64 	bl	8002a10 <_ZN13STM32Hardware4readEv>
 8003f48:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f2c0 81fa 	blt.w	8004346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f58:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4413      	add	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f66:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003f74:	2b07      	cmp	r3, #7
 8003f76:	d12b      	bne.n	8003fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8003f8a:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	b2d1      	uxtb	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	460a      	mov	r2, r1
 8003f98:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1a4      	bne.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2308      	movs	r3, #8
 8003fca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003fce:	e79c      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d130      	bne.n	8004040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2bff      	cmp	r3, #255	; 0xff
 8003fe2:	d112      	bne.n	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003fee:	3301      	adds	r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ff6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004004:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8004008:	e77f      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fdce 	bl	8002bb0 <_ZN13STM32Hardware4timeEv>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	bf8c      	ite	hi
 8004022:	2301      	movhi	r3, #1
 8004024:	2300      	movls	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	f43f af6e 	beq.w	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 800403a:	f06f 0301 	mvn.w	r3, #1
 800403e:	e1a0      	b.n	8004382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004046:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800404a:	2b01      	cmp	r3, #1
 800404c:	d121      	bne.n	8004092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2bfe      	cmp	r3, #254	; 0xfe
 8004052:	d10b      	bne.n	800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800405a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800405e:	3301      	adds	r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004066:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800406a:	e74e      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004072:	461a      	mov	r2, r3
 8004074:	2300      	movs	r3, #0
 8004076:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004080:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	f47f af40 	bne.w	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f989 	bl	80043a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8004090:	e73b      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800409c:	2b02      	cmp	r3, #2
 800409e:	d120      	bne.n	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040c6:	3301      	adds	r3, #1
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040ce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80040e0:	e713      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d118      	bne.n	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	4413      	add	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004106:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004114:	3301      	adds	r3, #1
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800411c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004120:	e6f3      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800412c:	2b04      	cmp	r3, #4
 800412e:	d11f      	bne.n	8004170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004136:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800413a:	425a      	negs	r2, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	bf58      	it	pl
 8004142:	4253      	negpl	r3, r2
 8004144:	2bff      	cmp	r3, #255	; 0xff
 8004146:	d10b      	bne.n	8004160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004152:	3301      	adds	r3, #1
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800415a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800415e:	e6d4      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800416e:	e6cc      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004176:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800417a:	2b05      	cmp	r3, #5
 800417c:	d119      	bne.n	80041b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004184:	461a      	mov	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004196:	3301      	adds	r3, #1
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800419e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80041b0:	e6ab      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80041bc:	2b06      	cmp	r3, #6
 80041be:	d123      	bne.n	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	4413      	add	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e0:	461a      	mov	r2, r3
 80041e2:	2307      	movs	r3, #7
 80041e4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f47f ae89 	bne.w	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fe:	461a      	mov	r2, r3
 8004200:	2308      	movs	r3, #8
 8004202:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004206:	e680      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004212:	2b08      	cmp	r3, #8
 8004214:	f47f ae79 	bne.w	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	461a      	mov	r2, r3
 8004220:	2300      	movs	r3, #0
 8004222:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004230:	425a      	negs	r2, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	bf58      	it	pl
 8004238:	4253      	negpl	r3, r2
 800423a:	2bff      	cmp	r3, #255	; 0xff
 800423c:	f47f ae65 	bne.w	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f8a7 	bl	80043a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f8c2 	bl	80043de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004260:	461a      	mov	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	e082      	b.n	8004382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004286:	2b0a      	cmp	r3, #10
 8004288:	d107      	bne.n	800429a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f984 	bl	80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8004298:	e637      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d111      	bne.n	80042cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	f241 1314 	movw	r3, #4372	; 0x1114
 80042ae:	4413      	add	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe f8fe 	bl	80024ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80042ca:	e61e      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042d6:	2b0b      	cmp	r3, #11
 80042d8:	d106      	bne.n	80042e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80042e6:	e610      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042f2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80042fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f43f ae02 	beq.w	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004310:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800431a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004328:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004340:	4611      	mov	r1, r2
 8004342:	4798      	blx	r3
    while (true)
 8004344:	e5e1      	b.n	8003f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8004346:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d014      	beq.n	8004380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800435c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004368:	4293      	cmp	r3, r2
 800436a:	d909      	bls.n	8004380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f818 	bl	80043a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004378:	461a      	mov	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8004380:	2300      	movs	r3, #0
  }
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
  }
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80043aa:	f107 030c 	add.w	r3, r7, #12
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fd fbea 	bl	8001b88 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f107 020c 	add.w	r2, r7, #12
 80043be:	210a      	movs	r1, #10
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
    rt_time = hardware_.time();
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fbf1 	bl	8002bb0 <_ZN13STM32Hardware4timeEv>
 80043ce:	4602      	mov	r2, r0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b08b      	sub	sp, #44	; 0x2c
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd fcbc 	bl	8001d68 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	2b18      	cmp	r3, #24
 80043f8:	dc63      	bgt.n	80044c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d056      	beq.n	80044ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	b29b      	uxth	r3, r3
 800441e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4608      	mov	r0, r1
 800445a:	4798      	blx	r3
 800445c:	4603      	mov	r3, r0
 800445e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4608      	mov	r0, r1
 8004488:	4798      	blx	r3
 800448a:	4603      	mov	r3, r0
 800448c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800448e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004492:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681c      	ldr	r4, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe f9be 	bl	800282a <_ZN3ros9Publisher15getEndpointTypeEv>
 80044ae:	4601      	mov	r1, r0
 80044b0:	f107 030c 	add.w	r3, r7, #12
 80044b4:	461a      	mov	r2, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	3301      	adds	r3, #1
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
 80044c0:	e798      	b.n	80043f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2b18      	cmp	r3, #24
 80044ca:	dc5f      	bgt.n	800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80044d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d053      	beq.n	8004584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80044e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80044f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004506:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4608      	mov	r0, r1
 800451e:	4798      	blx	r3
 8004520:	4603      	mov	r3, r0
 8004522:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800452c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4608      	mov	r0, r1
 8004544:	4798      	blx	r3
 8004546:	4603      	mov	r3, r0
 8004548:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800454a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800454e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681c      	ldr	r4, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800455e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004566:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4608      	mov	r0, r1
 8004576:	4798      	blx	r3
 8004578:	4601      	mov	r1, r0
 800457a:	f107 030c 	add.w	r3, r7, #12
 800457e:	461a      	mov	r2, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	3301      	adds	r3, #1
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	e79c      	b.n	80044c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 8004598:	bf00      	nop
 800459a:	372c      	adds	r7, #44	; 0x2c
 800459c:	46bd      	mov	sp, r7
 800459e:	bd90      	pop	{r4, r7, pc}

080045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80045aa:	f107 0308 	add.w	r3, r7, #8
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd faea 	bl	8001b88 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe faf9 	bl	8002bb0 <_ZN13STM32Hardware4timeEv>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80045ca:	f107 0308 	add.w	r3, r7, #8
 80045ce:	6839      	ldr	r1, [r7, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fd fb49 	bl	8001c68 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4916      	ldr	r1, [pc, #88]	; (8004634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80045dc:	fba1 1303 	umull	r1, r3, r1, r3
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80045e6:	6939      	ldr	r1, [r7, #16]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80045ec:	fba3 0302 	umull	r0, r3, r3, r2
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045f6:	fb00 f303 	mul.w	r3, r0, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a0e      	ldr	r2, [pc, #56]	; (8004638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	440b      	add	r3, r1
 8004604:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8aa 	bl	8004768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fac9 	bl	8002bb0 <_ZN13STM32Hardware4timeEv>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004626:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 800462a:	bf00      	nop
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	10624dd3 	.word	0x10624dd3
 8004638:	000f4240 	.word	0x000f4240

0800463c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b63      	cmp	r3, #99	; 0x63
 800464c:	dd0b      	ble.n	8004666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004654:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004658:	f083 0301 	eor.w	r3, r3, #1
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004662:	2300      	movs	r3, #0
 8004664:	e079      	b.n	800475a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8004672:	3207      	adds	r2, #7
 8004674:	4611      	mov	r1, r2
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
 800467a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	22ff      	movs	r2, #255	; 0xff
 8004680:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	22fe      	movs	r2, #254	; 0xfe
 8004688:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	b29b      	uxth	r3, r3
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 80046b2:	4413      	add	r3, r2
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	b21b      	sxth	r3, r3
 80046ce:	121b      	asrs	r3, r3, #8
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80046de:	2305      	movs	r3, #5
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	3306      	adds	r3, #6
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dc0d      	bgt.n	8004708 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4413      	add	r3, r2
 80046f2:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	3301      	adds	r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e7ec      	b.n	80046e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3307      	adds	r3, #7
 800470c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	425a      	negs	r2, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	bf58      	it	pl
 8004718:	4253      	negpl	r3, r2
 800471a:	b2da      	uxtb	r2, r3
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	6179      	str	r1, [r7, #20]
 8004722:	43d2      	mvns	r2, r2
 8004724:	b2d1      	uxtb	r1, r2
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	460a      	mov	r2, r1
 800472c:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004736:	dc0a      	bgt.n	800474e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1d18      	adds	r0, r3, #4
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4619      	mov	r1, r3
 8004746:	f7fe f9ed 	bl	8002b24 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	e005      	b.n	800475a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800474e:	4905      	ldr	r1, [pc, #20]	; (8004764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f849 	bl	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	0800f04c 	.word	0x0800f04c

08004768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fa1a 	bl	8002bb0 <_ZN13STM32Hardware4timeEv>
 800477c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4915      	ldr	r1, [pc, #84]	; (80047dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004786:	fba1 1303 	umull	r1, r3, r1, r3
 800478a:	099b      	lsrs	r3, r3, #6
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	1e5a      	subs	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800479e:	fba3 0302 	umull	r0, r3, r3, r2
 80047a2:	099b      	lsrs	r3, r3, #6
 80047a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047a8:	fb00 f303 	mul.w	r3, r0, r3
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	1aca      	subs	r2, r1, r3
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80047b8:	4413      	add	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f7fc f8e4 	bl	800099c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	10624dd3 	.word	0x10624dd3
 80047e0:	000f4240 	.word	0x000f4240
 80047e4:	3b9aca00 	.word	0x3b9aca00

080047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	2103      	movs	r1, #3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f804 	bl	8004804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	460b      	mov	r3, r1
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004812:	f107 0314 	add.w	r3, r7, #20
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd fc6a 	bl	80020f0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800481c:	7afb      	ldrb	r3, [r7, #11]
 800481e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f107 0214 	add.w	r2, r7, #20
 800482e:	2107      	movs	r1, #7
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	4798      	blx	r3
  }
 8004834:	bf00      	nop
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_Z41__static_initialization_and_destruction_0ii>:
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d137      	bne.n	80048bc <_Z41__static_initialization_and_destruction_0ii+0x80>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004852:	4293      	cmp	r3, r2
 8004854:	d132      	bne.n	80048bc <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8004856:	481b      	ldr	r0, [pc, #108]	; (80048c4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004858:	f7ff f9b4 	bl	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point microswitch;
 800485c:	481a      	ldr	r0, [pc, #104]	; (80048c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800485e:	f7fe f9b3 	bl	8002bc8 <_ZN13geometry_msgs5PointC1Ev>
geometry_msgs::Point car_speed;
 8004862:	481a      	ldr	r0, [pc, #104]	; (80048cc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004864:	f7fe f9b0 	bl	8002bc8 <_ZN13geometry_msgs5PointC1Ev>
std_msgs::Int64 relay;
 8004868:	4819      	ldr	r0, [pc, #100]	; (80048d0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800486a:	f7fe fec3 	bl	80035f4 <_ZN8std_msgs5Int64C1Ev>
std_msgs::Int64 reset;
 800486e:	4819      	ldr	r0, [pc, #100]	; (80048d4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004870:	f7fe fec0 	bl	80035f4 <_ZN8std_msgs5Int64C1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8004874:	2301      	movs	r3, #1
 8004876:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004878:	4918      	ldr	r1, [pc, #96]	; (80048dc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800487a:	4819      	ldr	r0, [pc, #100]	; (80048e0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800487c:	f7ff fa48 	bl	8003d10 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> intake_sub("intake_toSTM", ROS::intake_callback);
 8004880:	2301      	movs	r3, #1
 8004882:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004884:	4918      	ldr	r1, [pc, #96]	; (80048e8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004886:	4819      	ldr	r0, [pc, #100]	; (80048ec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004888:	f7ff fa42 	bl	8003d10 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int64> relay_sub("relay_toSTM", ROS::relay_callback);
 800488c:	2301      	movs	r3, #1
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004890:	4918      	ldr	r1, [pc, #96]	; (80048f4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004892:	4819      	ldr	r0, [pc, #100]	; (80048f8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004894:	f7ff fa60 	bl	8003d58 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8004898:	2300      	movs	r3, #0
 800489a:	4a0c      	ldr	r2, [pc, #48]	; (80048cc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800489c:	4917      	ldr	r1, [pc, #92]	; (80048fc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800489e:	4818      	ldr	r0, [pc, #96]	; (8004900 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80048a0:	f7fd ff98 	bl	80027d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher reset_pub("reset_fromSTM", &reset);
 80048a4:	2300      	movs	r3, #0
 80048a6:	4a0b      	ldr	r2, [pc, #44]	; (80048d4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80048a8:	4916      	ldr	r1, [pc, #88]	; (8004904 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80048aa:	4817      	ldr	r0, [pc, #92]	; (8004908 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80048ac:	f7fd ff92 	bl	80027d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);
 80048b0:	2300      	movs	r3, #0
 80048b2:	4a05      	ldr	r2, [pc, #20]	; (80048c8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80048b4:	4915      	ldr	r1, [pc, #84]	; (800490c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80048b6:	4816      	ldr	r0, [pc, #88]	; (8004910 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80048b8:	f7fd ff8c 	bl	80027d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	240006c8 	.word	0x240006c8
 80048c8:	24001808 	.word	0x24001808
 80048cc:	24001828 	.word	0x24001828
 80048d0:	24001848 	.word	0x24001848
 80048d4:	24001858 	.word	0x24001858
 80048d8:	08003a15 	.word	0x08003a15
 80048dc:	0800f088 	.word	0x0800f088
 80048e0:	24001868 	.word	0x24001868
 80048e4:	080039d1 	.word	0x080039d1
 80048e8:	0800f098 	.word	0x0800f098
 80048ec:	240018a0 	.word	0x240018a0
 80048f0:	080039a1 	.word	0x080039a1
 80048f4:	0800f0a8 	.word	0x0800f0a8
 80048f8:	240018d8 	.word	0x240018d8
 80048fc:	0800f0b4 	.word	0x0800f0b4
 8004900:	24001900 	.word	0x24001900
 8004904:	0800f0c4 	.word	0x0800f0c4
 8004908:	24001914 	.word	0x24001914
 800490c:	0800f0d4 	.word	0x0800f0d4
 8004910:	24001928 	.word	0x24001928

08004914 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3310      	adds	r3, #16
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe ff04 	bl	8003732 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	3210      	adds	r2, #16
 8004932:	4610      	mov	r0, r2
 8004934:	4798      	blx	r3
  }
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3310      	adds	r3, #16
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe ffe8 	bl	8003938 <_ZN8std_msgs5Int647getTypeEv>
 8004968:	4603      	mov	r3, r0
  }
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3310      	adds	r3, #16
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe ffe8 	bl	8003954 <_ZN8std_msgs5Int646getMD5Ev>
 8004984:	4603      	mov	r3, r0
  }
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3310      	adds	r3, #16
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe faad 	bl	8002efe <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	3210      	adds	r2, #16
 80049ac:	4610      	mov	r0, r2
 80049ae:	4798      	blx	r3
  }
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3310      	adds	r3, #16
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fded 	bl	80035bc <_ZN13geometry_msgs5Point7getTypeEv>
 80049e2:	4603      	mov	r3, r0
  }
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3310      	adds	r3, #16
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fded 	bl	80035d8 <_ZN13geometry_msgs5Point6getMD5Ev>
 80049fe:	4603      	mov	r3, r0
  }
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
    return configured_;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a16:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <_GLOBAL__sub_I_nh>:
 8004a26:	b580      	push	{r7, lr}
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f7ff ff04 	bl	800483c <_Z41__static_initialization_and_destruction_0ii>
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t>:
namespace SCARA{
	double relay;
}

void SCARA::trinary(double function, GPIO_TypeDef* a_port,
		uint16_t a_pin, GPIO_TypeDef* b_port, uint16_t b_pin){ \
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	ed87 0b04 	vstr	d0, [r7, #16]
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	461a      	mov	r2, r3
 8004a46:	460b      	mov	r3, r1
 8004a48:	817b      	strh	r3, [r7, #10]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	813b      	strh	r3, [r7, #8]
	if (function == 1) {
 8004a4e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a52:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004a56:	eeb4 7b46 	vcmp.f64	d7, d6
 8004a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5e:	d10c      	bne.n	8004a7a <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x44>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8004a60:	897b      	ldrh	r3, [r7, #10]
 8004a62:	2200      	movs	r2, #0
 8004a64:	4619      	mov	r1, r3
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f003 ffe2 	bl	8008a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_SET);
 8004a6c:	893b      	ldrh	r3, [r7, #8]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f003 ffdc 	bl	8008a30 <HAL_GPIO_WritePin>
	}
	else if (function == -1) {
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
	}
}
 8004a78:	e028      	b.n	8004acc <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x96>
	else if (function == 0) {
 8004a7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8004a7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	d10c      	bne.n	8004aa2 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x6c>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8004a88:	897b      	ldrh	r3, [r7, #10]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f003 ffce 	bl	8008a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8004a94:	893b      	ldrh	r3, [r7, #8]
 8004a96:	2200      	movs	r2, #0
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f003 ffc8 	bl	8008a30 <HAL_GPIO_WritePin>
}
 8004aa0:	e014      	b.n	8004acc <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x96>
	else if (function == -1) {
 8004aa2:	ed97 7b04 	vldr	d7, [r7, #16]
 8004aa6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8004aaa:	eeb4 7b46 	vcmp.f64	d7, d6
 8004aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab2:	d10b      	bne.n	8004acc <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x96>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
 8004ab4:	897b      	ldrh	r3, [r7, #10]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	4619      	mov	r1, r3
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f003 ffb8 	bl	8008a30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8004ac0:	893b      	ldrh	r3, [r7, #8]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f003 ffb2 	bl	8008a30 <HAL_GPIO_WritePin>
}
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_ZN5SCARA3runEv>:


void SCARA::run(){
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	/* relay */
	SCARA::trinary(relay, RELAY_A_PORT, RELAY_A_PIN, RELAY_B_PORT, RELAY_B_PIN);
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <_ZN5SCARA3runEv+0x20>)
 8004ada:	ed93 7b00 	vldr	d7, [r3]
 8004ade:	2320      	movs	r3, #32
 8004ae0:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <_ZN5SCARA3runEv+0x24>)
 8004ae2:	2110      	movs	r1, #16
 8004ae4:	4804      	ldr	r0, [pc, #16]	; (8004af8 <_ZN5SCARA3runEv+0x24>)
 8004ae6:	eeb0 0b47 	vmov.f64	d0, d7
 8004aea:	f7ff ffa4 	bl	8004a36 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t>

	/* arm */

}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	24001940 	.word	0x24001940
 8004af8:	58020000 	.word	0x58020000

08004afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <HAL_MspInit+0x3c>)
 8004b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b08:	4a0b      	ldr	r2, [pc, #44]	; (8004b38 <HAL_MspInit+0x3c>)
 8004b0a:	f043 0302 	orr.w	r3, r3, #2
 8004b0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_MspInit+0x3c>)
 8004b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	607b      	str	r3, [r7, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004b20:	2200      	movs	r2, #0
 8004b22:	2100      	movs	r1, #0
 8004b24:	2005      	movs	r0, #5
 8004b26:	f000 ff54 	bl	80059d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004b2a:	2005      	movs	r0, #5
 8004b2c:	f000 ff6b 	bl	8005a06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	58024400 	.word	0x58024400

08004b3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b090      	sub	sp, #64	; 0x40
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d14e      	bne.n	8004bfc <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b5e:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b64:	4a75      	ldr	r2, [pc, #468]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b6e:	4b73      	ldr	r3, [pc, #460]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b82:	4a6e      	ldr	r2, [pc, #440]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b8c:	4b6b      	ldr	r3, [pc, #428]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9a:	4b68      	ldr	r3, [pc, #416]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba0:	4a66      	ldr	r2, [pc, #408]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004ba2:	f043 0302 	orr.w	r3, r3, #2
 8004ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004baa:	4b64      	ldr	r3, [pc, #400]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	485a      	ldr	r0, [pc, #360]	; (8004d40 <HAL_TIM_Encoder_MspInit+0x204>)
 8004bd6:	f003 fd6b 	bl	80086b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bda:	2308      	movs	r3, #8
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bde:	2302      	movs	r3, #2
 8004be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bea:	2301      	movs	r3, #1
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4853      	ldr	r0, [pc, #332]	; (8004d44 <HAL_TIM_Encoder_MspInit+0x208>)
 8004bf6:	f003 fd5b 	bl	80086b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004bfa:	e09b      	b.n	8004d34 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a51      	ldr	r2, [pc, #324]	; (8004d48 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d12e      	bne.n	8004c64 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c06:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c0c:	4a4b      	ldr	r2, [pc, #300]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c0e:	f043 0302 	orr.w	r3, r3, #2
 8004c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c16:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c24:	4b45      	ldr	r3, [pc, #276]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c2a:	4a44      	ldr	r2, [pc, #272]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c34:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c42:	2330      	movs	r3, #48	; 0x30
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c46:	2302      	movs	r3, #2
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c52:	2302      	movs	r3, #2
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4839      	ldr	r0, [pc, #228]	; (8004d44 <HAL_TIM_Encoder_MspInit+0x208>)
 8004c5e:	f003 fd27 	bl	80086b0 <HAL_GPIO_Init>
}
 8004c62:	e067      	b.n	8004d34 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a38      	ldr	r2, [pc, #224]	; (8004d4c <HAL_TIM_Encoder_MspInit+0x210>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d12f      	bne.n	8004cce <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c6e:	4b33      	ldr	r3, [pc, #204]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c74:	4a31      	ldr	r2, [pc, #196]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c76:	f043 0304 	orr.w	r3, r3, #4
 8004c7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c7e:	4b2f      	ldr	r3, [pc, #188]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c8c:	4b2b      	ldr	r3, [pc, #172]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c92:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c94:	f043 0308 	orr.w	r3, r3, #8
 8004c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c9c:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004caa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4822      	ldr	r0, [pc, #136]	; (8004d50 <HAL_TIM_Encoder_MspInit+0x214>)
 8004cc8:	f003 fcf2 	bl	80086b0 <HAL_GPIO_Init>
}
 8004ccc:	e032      	b.n	8004d34 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a20      	ldr	r2, [pc, #128]	; (8004d54 <HAL_TIM_Encoder_MspInit+0x218>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d12d      	bne.n	8004d34 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004cd8:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cde:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004ce0:	f043 0308 	orr.w	r3, r3, #8
 8004ce4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ce8:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cfc:	4a0f      	ldr	r2, [pc, #60]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d06:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_TIM_Encoder_MspInit+0x200>)
 8004d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d14:	2303      	movs	r3, #3
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d20:	2300      	movs	r3, #0
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004d24:	2302      	movs	r3, #2
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4804      	ldr	r0, [pc, #16]	; (8004d40 <HAL_TIM_Encoder_MspInit+0x204>)
 8004d30:	f003 fcbe 	bl	80086b0 <HAL_GPIO_Init>
}
 8004d34:	bf00      	nop
 8004d36:	3740      	adds	r7, #64	; 0x40
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	58020000 	.word	0x58020000
 8004d44:	58020400 	.word	0x58020400
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	58020c00 	.word	0x58020c00
 8004d54:	40000c00 	.word	0x40000c00

08004d58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_TIM_PWM_MspInit+0x84>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d117      	bne.n	8004d9a <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_TIM_PWM_MspInit+0x88>)
 8004d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d70:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIM_PWM_MspInit+0x88>)
 8004d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d7a:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_TIM_PWM_MspInit+0x88>)
 8004d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	202b      	movs	r0, #43	; 0x2b
 8004d8e:	f000 fe20 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004d92:	202b      	movs	r0, #43	; 0x2b
 8004d94:	f000 fe37 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004d98:	e01b      	b.n	8004dd2 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d116      	bne.n	8004dd2 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <HAL_TIM_PWM_MspInit+0x88>)
 8004da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004daa:	4a0d      	ldr	r2, [pc, #52]	; (8004de0 <HAL_TIM_PWM_MspInit+0x88>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <HAL_TIM_PWM_MspInit+0x88>)
 8004db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	2074      	movs	r0, #116	; 0x74
 8004dc8:	f000 fe03 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004dcc:	2074      	movs	r0, #116	; 0x74
 8004dce:	f000 fe1a 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 8004dd2:	bf00      	nop
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40001800 	.word	0x40001800
 8004de0:	58024400 	.word	0x58024400
 8004de4:	40014000 	.word	0x40014000

08004de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <HAL_TIM_Base_MspInit+0x84>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d117      	bne.n	8004e2a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_TIM_Base_MspInit+0x88>)
 8004dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_TIM_Base_MspInit+0x88>)
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e0a:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <HAL_TIM_Base_MspInit+0x88>)
 8004e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004e18:	2200      	movs	r2, #0
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	202c      	movs	r0, #44	; 0x2c
 8004e1e:	f000 fdd8 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004e22:	202c      	movs	r0, #44	; 0x2c
 8004e24:	f000 fdef 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004e28:	e01b      	b.n	8004e62 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM24)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a11      	ldr	r2, [pc, #68]	; (8004e74 <HAL_TIM_Base_MspInit+0x8c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d116      	bne.n	8004e62 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <HAL_TIM_Base_MspInit+0x88>)
 8004e36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <HAL_TIM_Base_MspInit+0x88>)
 8004e3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e40:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_TIM_Base_MspInit+0x88>)
 8004e46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2100      	movs	r1, #0
 8004e56:	20a2      	movs	r0, #162	; 0xa2
 8004e58:	f000 fdbb 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8004e5c:	20a2      	movs	r0, #162	; 0xa2
 8004e5e:	f000 fdd2 	bl	8005a06 <HAL_NVIC_EnableIRQ>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40001c00 	.word	0x40001c00
 8004e70:	58024400 	.word	0x58024400
 8004e74:	4000e400 	.word	0x4000e400

08004e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <HAL_TIM_MspPostInit+0xb4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d120      	bne.n	8004edc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e9a:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_TIM_MspPostInit+0xb8>)
 8004e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea0:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <HAL_TIM_MspPostInit+0xb8>)
 8004ea2:	f043 0302 	orr.w	r3, r3, #2
 8004ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004eaa:	4b21      	ldr	r3, [pc, #132]	; (8004f30 <HAL_TIM_MspPostInit+0xb8>)
 8004eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004eb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4817      	ldr	r0, [pc, #92]	; (8004f34 <HAL_TIM_MspPostInit+0xbc>)
 8004ed6:	f003 fbeb 	bl	80086b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004eda:	e023      	b.n	8004f24 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_TIM_MspPostInit+0xc0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d11e      	bne.n	8004f24 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <HAL_TIM_MspPostInit+0xb8>)
 8004ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eec:	4a10      	ldr	r2, [pc, #64]	; (8004f30 <HAL_TIM_MspPostInit+0xb8>)
 8004eee:	f043 0310 	orr.w	r3, r3, #16
 8004ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ef6:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <HAL_TIM_MspPostInit+0xb8>)
 8004ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004f04:	2360      	movs	r3, #96	; 0x60
 8004f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f10:	2300      	movs	r3, #0
 8004f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004f14:	2304      	movs	r3, #4
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4807      	ldr	r0, [pc, #28]	; (8004f3c <HAL_TIM_MspPostInit+0xc4>)
 8004f20:	f003 fbc6 	bl	80086b0 <HAL_GPIO_Init>
}
 8004f24:	bf00      	nop
 8004f26:	3728      	adds	r7, #40	; 0x28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	58024400 	.word	0x58024400
 8004f34:	58020400 	.word	0x58020400
 8004f38:	40014000 	.word	0x40014000
 8004f3c:	58021000 	.word	0x58021000

08004f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b0b6      	sub	sp, #216	; 0xd8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	60da      	str	r2, [r3, #12]
 8004f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f58:	f107 0310 	add.w	r3, r7, #16
 8004f5c:	22b4      	movs	r2, #180	; 0xb4
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f009 fe3d 	bl	800ebe0 <memset>
  if(huart->Instance==USART1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a57      	ldr	r2, [pc, #348]	; (80050c8 <HAL_UART_MspInit+0x188>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	f040 80a7 	bne.w	80050c0 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f004 fce3 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004f8c:	f7fc fbfa 	bl	8001784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f90:	4b4e      	ldr	r3, [pc, #312]	; (80050cc <HAL_UART_MspInit+0x18c>)
 8004f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f96:	4a4d      	ldr	r2, [pc, #308]	; (80050cc <HAL_UART_MspInit+0x18c>)
 8004f98:	f043 0310 	orr.w	r3, r3, #16
 8004f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fa0:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <HAL_UART_MspInit+0x18c>)
 8004fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fae:	4b47      	ldr	r3, [pc, #284]	; (80050cc <HAL_UART_MspInit+0x18c>)
 8004fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fb4:	4a45      	ldr	r2, [pc, #276]	; (80050cc <HAL_UART_MspInit+0x18c>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fbe:	4b43      	ldr	r3, [pc, #268]	; (80050cc <HAL_UART_MspInit+0x18c>)
 8004fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004fcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fe6:	2307      	movs	r3, #7
 8004fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4837      	ldr	r0, [pc, #220]	; (80050d0 <HAL_UART_MspInit+0x190>)
 8004ff4:	f003 fb5c 	bl	80086b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8004ffa:	4a37      	ldr	r2, [pc, #220]	; (80050d8 <HAL_UART_MspInit+0x198>)
 8004ffc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004ffe:	4b35      	ldr	r3, [pc, #212]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8005000:	2229      	movs	r2, #41	; 0x29
 8005002:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005004:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8005006:	2200      	movs	r2, #0
 8005008:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800500a:	4b32      	ldr	r3, [pc, #200]	; (80050d4 <HAL_UART_MspInit+0x194>)
 800500c:	2200      	movs	r2, #0
 800500e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005010:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8005012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005016:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005018:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_UART_MspInit+0x194>)
 800501a:	2200      	movs	r2, #0
 800501c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800501e:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8005020:	2200      	movs	r2, #0
 8005022:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8005026:	2200      	movs	r2, #0
 8005028:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <HAL_UART_MspInit+0x194>)
 800502c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005030:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005032:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8005034:	2200      	movs	r2, #0
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005038:	4826      	ldr	r0, [pc, #152]	; (80050d4 <HAL_UART_MspInit+0x194>)
 800503a:	f000 fcff 	bl	8005a3c <HAL_DMA_Init>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005044:	f7fc fb9e 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a22      	ldr	r2, [pc, #136]	; (80050d4 <HAL_UART_MspInit+0x194>)
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
 800504e:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <HAL_UART_MspInit+0x194>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8005054:	4b21      	ldr	r3, [pc, #132]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005056:	4a22      	ldr	r2, [pc, #136]	; (80050e0 <HAL_UART_MspInit+0x1a0>)
 8005058:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800505a:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_UART_MspInit+0x19c>)
 800505c:	222a      	movs	r2, #42	; 0x2a
 800505e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005060:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005062:	2240      	movs	r2, #64	; 0x40
 8005064:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005066:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005068:	2200      	movs	r2, #0
 800506a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_UART_MspInit+0x19c>)
 800506e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005072:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005076:	2200      	movs	r2, #0
 8005078:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <HAL_UART_MspInit+0x19c>)
 800507c:	2200      	movs	r2, #0
 800507e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005080:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005082:	2200      	movs	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005088:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800508c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005090:	2200      	movs	r2, #0
 8005092:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005094:	4811      	ldr	r0, [pc, #68]	; (80050dc <HAL_UART_MspInit+0x19c>)
 8005096:	f000 fcd1 	bl	8005a3c <HAL_DMA_Init>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80050a0:	f7fc fb70 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <HAL_UART_MspInit+0x19c>)
 80050a8:	679a      	str	r2, [r3, #120]	; 0x78
 80050aa:	4a0c      	ldr	r2, [pc, #48]	; (80050dc <HAL_UART_MspInit+0x19c>)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050b0:	2200      	movs	r2, #0
 80050b2:	2100      	movs	r1, #0
 80050b4:	2025      	movs	r0, #37	; 0x25
 80050b6:	f000 fc8c 	bl	80059d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050ba:	2025      	movs	r0, #37	; 0x25
 80050bc:	f000 fca3 	bl	8005a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80050c0:	bf00      	nop
 80050c2:	37d8      	adds	r7, #216	; 0xd8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40011000 	.word	0x40011000
 80050cc:	58024400 	.word	0x58024400
 80050d0:	58020000 	.word	0x58020000
 80050d4:	24000570 	.word	0x24000570
 80050d8:	40020010 	.word	0x40020010
 80050dc:	240005e8 	.word	0x240005e8
 80050e0:	40020028 	.word	0x40020028

080050e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050e8:	e7fe      	b.n	80050e8 <NMI_Handler+0x4>

080050ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050ee:	e7fe      	b.n	80050ee <HardFault_Handler+0x4>

080050f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050f4:	e7fe      	b.n	80050f4 <MemManage_Handler+0x4>

080050f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050fa:	e7fe      	b.n	80050fa <BusFault_Handler+0x4>

080050fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005100:	e7fe      	b.n	8005100 <UsageFault_Handler+0x4>

08005102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005102:	b480      	push	{r7}
 8005104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800511e:	b480      	push	{r7}
 8005120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005130:	f000 fb54 	bl	80057dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}

08005138 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800514c:	4802      	ldr	r0, [pc, #8]	; (8005158 <DMA1_Stream0_IRQHandler+0x10>)
 800514e:	f001 ff9d 	bl	800708c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	24000570 	.word	0x24000570

0800515c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005160:	4802      	ldr	r0, [pc, #8]	; (800516c <DMA1_Stream1_IRQHandler+0x10>)
 8005162:	f001 ff93 	bl	800708c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	240005e8 	.word	0x240005e8

08005170 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005174:	4802      	ldr	r0, [pc, #8]	; (8005180 <USART1_IRQHandler+0x10>)
 8005176:	f007 fcfd 	bl	800cb74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800517a:	bf00      	nop
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	240004e0 	.word	0x240004e0

08005184 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8005188:	4802      	ldr	r0, [pc, #8]	; (8005194 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800518a:	f006 facd 	bl	800b728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	240003b0 	.word	0x240003b0

08005198 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800519c:	4802      	ldr	r0, [pc, #8]	; (80051a8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800519e:	f006 fac3 	bl	800b728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80051a2:	bf00      	nop
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	240003fc 	.word	0x240003fc

080051ac <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80051b0:	4802      	ldr	r0, [pc, #8]	; (80051bc <TIM15_IRQHandler+0x10>)
 80051b2:	f006 fab9 	bl	800b728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80051b6:	bf00      	nop
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	24000448 	.word	0x24000448

080051c0 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 80051c4:	4802      	ldr	r0, [pc, #8]	; (80051d0 <TIM24_IRQHandler+0x10>)
 80051c6:	f006 faaf 	bl	800b728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	24000494 	.word	0x24000494

080051d4 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
	DC_motor_init();
 80051d8:	f7fb fc0c 	bl	80009f4 <_Z13DC_motor_initv>
}
 80051dc:	bf00      	nop
 80051de:	bd80      	pop	{r7, pc}

080051e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
	return 1;
 80051e4:	2301      	movs	r3, #1
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <_kill>:

int _kill(int pid, int sig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051fa:	f009 fcb9 	bl	800eb70 <__errno>
 80051fe:	4603      	mov	r3, r0
 8005200:	2216      	movs	r2, #22
 8005202:	601a      	str	r2, [r3, #0]
	return -1;
 8005204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_exit>:

void _exit (int status)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005218:	f04f 31ff 	mov.w	r1, #4294967295
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff ffe7 	bl	80051f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005222:	e7fe      	b.n	8005222 <_exit+0x12>

08005224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800522c:	4a14      	ldr	r2, [pc, #80]	; (8005280 <_sbrk+0x5c>)
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <_sbrk+0x60>)
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005238:	4b13      	ldr	r3, [pc, #76]	; (8005288 <_sbrk+0x64>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <_sbrk+0x64>)
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <_sbrk+0x68>)
 8005244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005246:	4b10      	ldr	r3, [pc, #64]	; (8005288 <_sbrk+0x64>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	429a      	cmp	r2, r3
 8005252:	d207      	bcs.n	8005264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005254:	f009 fc8c 	bl	800eb70 <__errno>
 8005258:	4603      	mov	r3, r0
 800525a:	220c      	movs	r2, #12
 800525c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	e009      	b.n	8005278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005264:	4b08      	ldr	r3, [pc, #32]	; (8005288 <_sbrk+0x64>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <_sbrk+0x64>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4413      	add	r3, r2
 8005272:	4a05      	ldr	r2, [pc, #20]	; (8005288 <_sbrk+0x64>)
 8005274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005276:	68fb      	ldr	r3, [r7, #12]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	24050000 	.word	0x24050000
 8005284:	00000400 	.word	0x00000400
 8005288:	24001948 	.word	0x24001948
 800528c:	24001968 	.word	0x24001968

08005290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005294:	4b32      	ldr	r3, [pc, #200]	; (8005360 <SystemInit+0xd0>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	4a31      	ldr	r2, [pc, #196]	; (8005360 <SystemInit+0xd0>)
 800529c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80052a4:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <SystemInit+0xd4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	2b06      	cmp	r3, #6
 80052ae:	d807      	bhi.n	80052c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <SystemInit+0xd4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f023 030f 	bic.w	r3, r3, #15
 80052b8:	4a2a      	ldr	r2, [pc, #168]	; (8005364 <SystemInit+0xd4>)
 80052ba:	f043 0307 	orr.w	r3, r3, #7
 80052be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80052c0:	4b29      	ldr	r3, [pc, #164]	; (8005368 <SystemInit+0xd8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a28      	ldr	r2, [pc, #160]	; (8005368 <SystemInit+0xd8>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <SystemInit+0xd8>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80052d2:	4b25      	ldr	r3, [pc, #148]	; (8005368 <SystemInit+0xd8>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4924      	ldr	r1, [pc, #144]	; (8005368 <SystemInit+0xd8>)
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <SystemInit+0xdc>)
 80052da:	4013      	ands	r3, r2
 80052dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80052de:	4b21      	ldr	r3, [pc, #132]	; (8005364 <SystemInit+0xd4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <SystemInit+0xd4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 030f 	bic.w	r3, r3, #15
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <SystemInit+0xd4>)
 80052f4:	f043 0307 	orr.w	r3, r3, #7
 80052f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <SystemInit+0xd8>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005300:	4b19      	ldr	r3, [pc, #100]	; (8005368 <SystemInit+0xd8>)
 8005302:	2200      	movs	r2, #0
 8005304:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <SystemInit+0xd8>)
 8005308:	2200      	movs	r2, #0
 800530a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800530c:	4b16      	ldr	r3, [pc, #88]	; (8005368 <SystemInit+0xd8>)
 800530e:	4a18      	ldr	r2, [pc, #96]	; (8005370 <SystemInit+0xe0>)
 8005310:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <SystemInit+0xd8>)
 8005314:	4a17      	ldr	r2, [pc, #92]	; (8005374 <SystemInit+0xe4>)
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <SystemInit+0xd8>)
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <SystemInit+0xe8>)
 800531c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <SystemInit+0xd8>)
 8005320:	2200      	movs	r2, #0
 8005322:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005324:	4b10      	ldr	r3, [pc, #64]	; (8005368 <SystemInit+0xd8>)
 8005326:	4a14      	ldr	r2, [pc, #80]	; (8005378 <SystemInit+0xe8>)
 8005328:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800532a:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <SystemInit+0xd8>)
 800532c:	2200      	movs	r2, #0
 800532e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005330:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <SystemInit+0xd8>)
 8005332:	4a11      	ldr	r2, [pc, #68]	; (8005378 <SystemInit+0xe8>)
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <SystemInit+0xd8>)
 8005338:	2200      	movs	r2, #0
 800533a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <SystemInit+0xd8>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a09      	ldr	r2, [pc, #36]	; (8005368 <SystemInit+0xd8>)
 8005342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005346:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <SystemInit+0xd8>)
 800534a:	2200      	movs	r2, #0
 800534c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <SystemInit+0xec>)
 8005350:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005354:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005356:	bf00      	nop
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00
 8005364:	52002000 	.word	0x52002000
 8005368:	58024400 	.word	0x58024400
 800536c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005370:	02020200 	.word	0x02020200
 8005374:	01ff0000 	.word	0x01ff0000
 8005378:	01010280 	.word	0x01010280
 800537c:	52004000 	.word	0x52004000

08005380 <HAL_TIM_PeriodElapsedCallback>:

void motor_standard(void);
void motor_matlab(int fr, int fl, int br, int bl);
void motor_debug(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a39      	ldr	r2, [pc, #228]	; (8005474 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d119      	bne.n	80053c6 <HAL_TIM_PeriodElapsedCallback+0x46>

	/* ROS publish */
		static int ms=0;
		ms++;
 8005392:	4b39      	ldr	r3, [pc, #228]	; (8005478 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a37      	ldr	r2, [pc, #220]	; (8005478 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800539a:	6013      	str	r3, [r2, #0]
		if(ms%10==0){
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	4b36      	ldr	r3, [pc, #216]	; (800547c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80053a2:	fb83 2301 	smull	r2, r3, r3, r1
 80053a6:	109a      	asrs	r2, r3, #2
 80053a8:	17cb      	asrs	r3, r1, #31
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	1aca      	subs	r2, r1, r3
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	d103      	bne.n	80053c2 <HAL_TIM_PeriodElapsedCallback+0x42>
			ROS::pub_car_vel();
 80053ba:	f7fe fb4b 	bl	8003a54 <_ZN3ROS11pub_car_velEv>
			ROS::pub_reset();
 80053be:	f7fe fad7 	bl	8003970 <_ZN3ROS9pub_resetEv>
		}

	/* STM control */
		motor_standard();
 80053c2:	f000 f869 	bl	8005498 <_Z14motor_standardv>
	}

	if (htim->Instance == TIM24) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2d      	ldr	r2, [pc, #180]	; (8005480 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d14d      	bne.n	800546c <HAL_TIM_PeriodElapsedCallback+0xec>
		/* microswitch */
		if (HAL_GPIO_ReadPin(TOUCH_A_PORT, TOUCH_A_PIN) == 0) {
 80053d0:	2140      	movs	r1, #64	; 0x40
 80053d2:	482c      	ldr	r0, [pc, #176]	; (8005484 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80053d4:	f003 fb14 	bl	8008a00 <HAL_GPIO_ReadPin>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d006      	beq.n	80053f6 <HAL_TIM_PeriodElapsedCallback+0x76>
			MICROSWITCH::touch_a = 1;
 80053e8:	4927      	ldr	r1, [pc, #156]	; (8005488 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	4b27      	ldr	r3, [pc, #156]	; (800548c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80053f0:	e9c1 2300 	strd	r2, r3, [r1]
 80053f4:	e006      	b.n	8005404 <HAL_TIM_PeriodElapsedCallback+0x84>
		} else MICROSWITCH::touch_a = 0;
 80053f6:	4924      	ldr	r1, [pc, #144]	; (8005488 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_B_PORT, TOUCH_B_PIN) == 0) {
 8005404:	2120      	movs	r1, #32
 8005406:	481f      	ldr	r0, [pc, #124]	; (8005484 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8005408:	f003 fafa 	bl	8008a00 <HAL_GPIO_ReadPin>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d006      	beq.n	800542a <HAL_TIM_PeriodElapsedCallback+0xaa>
			MICROSWITCH::touch_b = 1;
 800541c:	491c      	ldr	r1, [pc, #112]	; (8005490 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005424:	e9c1 2300 	strd	r2, r3, [r1]
 8005428:	e006      	b.n	8005438 <HAL_TIM_PeriodElapsedCallback+0xb8>
		} else MICROSWITCH::touch_b = 0;
 800542a:	4919      	ldr	r1, [pc, #100]	; (8005490 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_C_PORT, TOUCH_C_PIN) == 0) {
 8005438:	2110      	movs	r1, #16
 800543a:	4812      	ldr	r0, [pc, #72]	; (8005484 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800543c:	f003 fae0 	bl	8008a00 <HAL_GPIO_ReadPin>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <HAL_TIM_PeriodElapsedCallback+0xde>
			MICROSWITCH::touch_c = 1;
 8005450:	4910      	ldr	r1, [pc, #64]	; (8005494 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8005458:	e9c1 2300 	strd	r2, r3, [r1]
		} else MICROSWITCH::touch_c = 0;
	}
}
 800545c:	e006      	b.n	800546c <HAL_TIM_PeriodElapsedCallback+0xec>
		} else MICROSWITCH::touch_c = 0;
 800545e:	490d      	ldr	r1, [pc, #52]	; (8005494 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9c1 2300 	strd	r2, r3, [r1]
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40001c00 	.word	0x40001c00
 8005478:	2400194c 	.word	0x2400194c
 800547c:	66666667 	.word	0x66666667
 8005480:	4000e400 	.word	0x4000e400
 8005484:	58021800 	.word	0x58021800
 8005488:	240006a8 	.word	0x240006a8
 800548c:	3ff00000 	.word	0x3ff00000
 8005490:	240006b0 	.word	0x240006b0
 8005494:	240006b8 	.word	0x240006b8

08005498 <_Z14motor_standardv>:


void motor_standard(void){
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 800549c:	4b73      	ldr	r3, [pc, #460]	; (800566c <_Z14motor_standardv+0x1d4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	b21a      	sxth	r2, r3
 80054a4:	4b72      	ldr	r3, [pc, #456]	; (8005670 <_Z14motor_standardv+0x1d8>)
 80054a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 80054aa:	4871      	ldr	r0, [pc, #452]	; (8005670 <_Z14motor_standardv+0x1d8>)
 80054ac:	f7fb fb21 	bl	8000af2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 80054b0:	4b6e      	ldr	r3, [pc, #440]	; (800566c <_Z14motor_standardv+0x1d4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM < 0) {
 80054b8:	4b6d      	ldr	r3, [pc, #436]	; (8005670 <_Z14motor_standardv+0x1d8>)
 80054ba:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80054be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c6:	d50c      	bpl.n	80054e2 <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 80054c8:	2201      	movs	r2, #1
 80054ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ce:	4869      	ldr	r0, [pc, #420]	; (8005674 <_Z14motor_standardv+0x1dc>)
 80054d0:	f003 faae 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 80054d4:	2200      	movs	r2, #0
 80054d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054da:	4866      	ldr	r0, [pc, #408]	; (8005674 <_Z14motor_standardv+0x1dc>)
 80054dc:	f003 faa8 	bl	8008a30 <HAL_GPIO_WritePin>
 80054e0:	e00b      	b.n	80054fa <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 80054e2:	2200      	movs	r2, #0
 80054e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e8:	4862      	ldr	r0, [pc, #392]	; (8005674 <_Z14motor_standardv+0x1dc>)
 80054ea:	f003 faa1 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 80054ee:	2201      	movs	r2, #1
 80054f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054f4:	485f      	ldr	r0, [pc, #380]	; (8005674 <_Z14motor_standardv+0x1dc>)
 80054f6:	f003 fa9b 	bl	8008a30 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 80054fa:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <_Z14motor_standardv+0x1d8>)
 80054fc:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005500:	eeb0 7bc7 	vabs.f64	d7, d7
 8005504:	4b5c      	ldr	r3, [pc, #368]	; (8005678 <_Z14motor_standardv+0x1e0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800550c:	ee17 2a90 	vmov	r2, s15
 8005510:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 8005512:	4b5a      	ldr	r3, [pc, #360]	; (800567c <_Z14motor_standardv+0x1e4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	b21a      	sxth	r2, r3
 800551a:	4b59      	ldr	r3, [pc, #356]	; (8005680 <_Z14motor_standardv+0x1e8>)
 800551c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 8005520:	4857      	ldr	r0, [pc, #348]	; (8005680 <_Z14motor_standardv+0x1e8>)
 8005522:	f7fb fae6 	bl	8000af2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8005526:	4b55      	ldr	r3, [pc, #340]	; (800567c <_Z14motor_standardv+0x1e4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PWM > 0) {
 800552e:	4b54      	ldr	r3, [pc, #336]	; (8005680 <_Z14motor_standardv+0x1e8>)
 8005530:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005534:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553c:	dd0c      	ble.n	8005558 <_Z14motor_standardv+0xc0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 800553e:	2201      	movs	r2, #1
 8005540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005544:	484f      	ldr	r0, [pc, #316]	; (8005684 <_Z14motor_standardv+0x1ec>)
 8005546:	f003 fa73 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 800554a:	2200      	movs	r2, #0
 800554c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005550:	484c      	ldr	r0, [pc, #304]	; (8005684 <_Z14motor_standardv+0x1ec>)
 8005552:	f003 fa6d 	bl	8008a30 <HAL_GPIO_WritePin>
 8005556:	e00b      	b.n	8005570 <_Z14motor_standardv+0xd8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8005558:	2200      	movs	r2, #0
 800555a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800555e:	4849      	ldr	r0, [pc, #292]	; (8005684 <_Z14motor_standardv+0x1ec>)
 8005560:	f003 fa66 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8005564:	2201      	movs	r2, #1
 8005566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800556a:	4846      	ldr	r0, [pc, #280]	; (8005684 <_Z14motor_standardv+0x1ec>)
 800556c:	f003 fa60 	bl	8008a30 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, fabs(fl.PWM));
 8005570:	4b43      	ldr	r3, [pc, #268]	; (8005680 <_Z14motor_standardv+0x1e8>)
 8005572:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005576:	eeb0 7bc7 	vabs.f64	d7, d7
 800557a:	4b3f      	ldr	r3, [pc, #252]	; (8005678 <_Z14motor_standardv+0x1e0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005582:	ee17 2a90 	vmov	r2, s15
 8005586:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8005588:	4b3f      	ldr	r3, [pc, #252]	; (8005688 <_Z14motor_standardv+0x1f0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	b21a      	sxth	r2, r3
 8005590:	4b3e      	ldr	r3, [pc, #248]	; (800568c <_Z14motor_standardv+0x1f4>)
 8005592:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 8005596:	483d      	ldr	r0, [pc, #244]	; (800568c <_Z14motor_standardv+0x1f4>)
 8005598:	f7fb faab 	bl	8000af2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 800559c:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <_Z14motor_standardv+0x1f0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM > 0) {
 80055a4:	4b39      	ldr	r3, [pc, #228]	; (800568c <_Z14motor_standardv+0x1f4>)
 80055a6:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80055aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	dd0a      	ble.n	80055ca <_Z14motor_standardv+0x132>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 80055b4:	2201      	movs	r2, #1
 80055b6:	2104      	movs	r1, #4
 80055b8:	4835      	ldr	r0, [pc, #212]	; (8005690 <_Z14motor_standardv+0x1f8>)
 80055ba:	f003 fa39 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 80055be:	2200      	movs	r2, #0
 80055c0:	2108      	movs	r1, #8
 80055c2:	4833      	ldr	r0, [pc, #204]	; (8005690 <_Z14motor_standardv+0x1f8>)
 80055c4:	f003 fa34 	bl	8008a30 <HAL_GPIO_WritePin>
 80055c8:	e009      	b.n	80055de <_Z14motor_standardv+0x146>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2104      	movs	r1, #4
 80055ce:	4830      	ldr	r0, [pc, #192]	; (8005690 <_Z14motor_standardv+0x1f8>)
 80055d0:	f003 fa2e 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 80055d4:	2201      	movs	r2, #1
 80055d6:	2108      	movs	r1, #8
 80055d8:	482d      	ldr	r0, [pc, #180]	; (8005690 <_Z14motor_standardv+0x1f8>)
 80055da:	f003 fa29 	bl	8008a30 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 80055de:	4b2b      	ldr	r3, [pc, #172]	; (800568c <_Z14motor_standardv+0x1f4>)
 80055e0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80055e4:	eeb0 7bc7 	vabs.f64	d7, d7
 80055e8:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <_Z14motor_standardv+0x1fc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055f0:	ee17 2a90 	vmov	r2, s15
 80055f4:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 80055f6:	4b28      	ldr	r3, [pc, #160]	; (8005698 <_Z14motor_standardv+0x200>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	b21a      	sxth	r2, r3
 80055fe:	4b27      	ldr	r3, [pc, #156]	; (800569c <_Z14motor_standardv+0x204>)
 8005600:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 8005604:	4825      	ldr	r0, [pc, #148]	; (800569c <_Z14motor_standardv+0x204>)
 8005606:	f7fb fa74 	bl	8000af2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <_Z14motor_standardv+0x200>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM < 0) {
 8005612:	4b22      	ldr	r3, [pc, #136]	; (800569c <_Z14motor_standardv+0x204>)
 8005614:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005618:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005620:	d50b      	bpl.n	800563a <_Z14motor_standardv+0x1a2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8005622:	2201      	movs	r2, #1
 8005624:	2110      	movs	r1, #16
 8005626:	481a      	ldr	r0, [pc, #104]	; (8005690 <_Z14motor_standardv+0x1f8>)
 8005628:	f003 fa02 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 800562c:	2200      	movs	r2, #0
 800562e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005632:	481b      	ldr	r0, [pc, #108]	; (80056a0 <_Z14motor_standardv+0x208>)
 8005634:	f003 f9fc 	bl	8008a30 <HAL_GPIO_WritePin>
 8005638:	e00a      	b.n	8005650 <_Z14motor_standardv+0x1b8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 800563a:	2200      	movs	r2, #0
 800563c:	2110      	movs	r1, #16
 800563e:	4814      	ldr	r0, [pc, #80]	; (8005690 <_Z14motor_standardv+0x1f8>)
 8005640:	f003 f9f6 	bl	8008a30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8005644:	2201      	movs	r2, #1
 8005646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800564a:	4815      	ldr	r0, [pc, #84]	; (80056a0 <_Z14motor_standardv+0x208>)
 800564c:	f003 f9f0 	bl	8008a30 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 8005650:	4b12      	ldr	r3, [pc, #72]	; (800569c <_Z14motor_standardv+0x204>)
 8005652:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005656:	eeb0 7bc7 	vabs.f64	d7, d7
 800565a:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <_Z14motor_standardv+0x1fc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005662:	ee17 2a90 	vmov	r2, s15
 8005666:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005668:	bf00      	nop
 800566a:	bd80      	pop	{r7, pc}
 800566c:	24000280 	.word	0x24000280
 8005670:	240000a0 	.word	0x240000a0
 8005674:	58020c00 	.word	0x58020c00
 8005678:	240003b0 	.word	0x240003b0
 800567c:	24000364 	.word	0x24000364
 8005680:	24000110 	.word	0x24000110
 8005684:	58020400 	.word	0x58020400
 8005688:	240002cc 	.word	0x240002cc
 800568c:	24000180 	.word	0x24000180
 8005690:	58021000 	.word	0x58021000
 8005694:	24000448 	.word	0x24000448
 8005698:	24000318 	.word	0x24000318
 800569c:	240001f0 	.word	0x240001f0
 80056a0:	58020800 	.word	0x58020800

080056a4 <Reset_Handler>:
 80056a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056dc <LoopFillZerobss+0xe>
 80056a8:	f7ff fdf2 	bl	8005290 <SystemInit>
 80056ac:	480c      	ldr	r0, [pc, #48]	; (80056e0 <LoopFillZerobss+0x12>)
 80056ae:	490d      	ldr	r1, [pc, #52]	; (80056e4 <LoopFillZerobss+0x16>)
 80056b0:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <LoopFillZerobss+0x1a>)
 80056b2:	2300      	movs	r3, #0
 80056b4:	e002      	b.n	80056bc <LoopCopyDataInit>

080056b6 <CopyDataInit>:
 80056b6:	58d4      	ldr	r4, [r2, r3]
 80056b8:	50c4      	str	r4, [r0, r3]
 80056ba:	3304      	adds	r3, #4

080056bc <LoopCopyDataInit>:
 80056bc:	18c4      	adds	r4, r0, r3
 80056be:	428c      	cmp	r4, r1
 80056c0:	d3f9      	bcc.n	80056b6 <CopyDataInit>
 80056c2:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <LoopFillZerobss+0x1e>)
 80056c4:	4c0a      	ldr	r4, [pc, #40]	; (80056f0 <LoopFillZerobss+0x22>)
 80056c6:	2300      	movs	r3, #0
 80056c8:	e001      	b.n	80056ce <LoopFillZerobss>

080056ca <FillZerobss>:
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	3204      	adds	r2, #4

080056ce <LoopFillZerobss>:
 80056ce:	42a2      	cmp	r2, r4
 80056d0:	d3fb      	bcc.n	80056ca <FillZerobss>
 80056d2:	f009 fa53 	bl	800eb7c <__libc_init_array>
 80056d6:	f7fb fb7b 	bl	8000dd0 <main>
 80056da:	4770      	bx	lr
 80056dc:	24050000 	.word	0x24050000
 80056e0:	24000000 	.word	0x24000000
 80056e4:	2400007c 	.word	0x2400007c
 80056e8:	0800f278 	.word	0x0800f278
 80056ec:	24000080 	.word	0x24000080
 80056f0:	24001964 	.word	0x24001964

080056f4 <ADC3_IRQHandler>:
 80056f4:	e7fe      	b.n	80056f4 <ADC3_IRQHandler>
	...

080056f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056fe:	2003      	movs	r0, #3
 8005700:	f000 f95c 	bl	80059bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005704:	f003 ff4c 	bl	80095a0 <HAL_RCC_GetSysClockFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_Init+0x68>)
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	4913      	ldr	r1, [pc, #76]	; (8005764 <HAL_Init+0x6c>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005722:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <HAL_Init+0x68>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	4a0e      	ldr	r2, [pc, #56]	; (8005764 <HAL_Init+0x6c>)
 800572c:	5cd3      	ldrb	r3, [r2, r3]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	4a0b      	ldr	r2, [pc, #44]	; (8005768 <HAL_Init+0x70>)
 800573a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800573c:	4a0b      	ldr	r2, [pc, #44]	; (800576c <HAL_Init+0x74>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005742:	200f      	movs	r0, #15
 8005744:	f000 f814 	bl	8005770 <HAL_InitTick>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e002      	b.n	8005758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005752:	f7ff f9d3 	bl	8004afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	58024400 	.word	0x58024400
 8005764:	0800f21c 	.word	0x0800f21c
 8005768:	24000008 	.word	0x24000008
 800576c:	24000004 	.word	0x24000004

08005770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <HAL_InitTick+0x60>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e021      	b.n	80057c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005784:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <HAL_InitTick+0x64>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <HAL_InitTick+0x60>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	4619      	mov	r1, r3
 800578e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005792:	fbb3 f3f1 	udiv	r3, r3, r1
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f941 	bl	8005a22 <HAL_SYSTICK_Config>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e00e      	b.n	80057c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b0f      	cmp	r3, #15
 80057ae:	d80a      	bhi.n	80057c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057b0:	2200      	movs	r2, #0
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	f000 f90b 	bl	80059d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057bc:	4a06      	ldr	r2, [pc, #24]	; (80057d8 <HAL_InitTick+0x68>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	24000010 	.word	0x24000010
 80057d4:	24000004 	.word	0x24000004
 80057d8:	2400000c 	.word	0x2400000c

080057dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_IncTick+0x20>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_IncTick+0x24>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4413      	add	r3, r2
 80057ec:	4a04      	ldr	r2, [pc, #16]	; (8005800 <HAL_IncTick+0x24>)
 80057ee:	6013      	str	r3, [r2, #0]
}
 80057f0:	bf00      	nop
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	24000010 	.word	0x24000010
 8005800:	24001950 	.word	0x24001950

08005804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  return uwTick;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <HAL_GetTick+0x14>)
 800580a:	681b      	ldr	r3, [r3, #0]
}
 800580c:	4618      	mov	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	24001950 	.word	0x24001950

0800581c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <__NVIC_SetPriorityGrouping+0x40>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005838:	4013      	ands	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <__NVIC_SetPriorityGrouping+0x44>)
 8005846:	4313      	orrs	r3, r2
 8005848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584a:	4a04      	ldr	r2, [pc, #16]	; (800585c <__NVIC_SetPriorityGrouping+0x40>)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	60d3      	str	r3, [r2, #12]
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000ed00 	.word	0xe000ed00
 8005860:	05fa0000 	.word	0x05fa0000

08005864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <__NVIC_GetPriorityGrouping+0x18>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	f003 0307 	and.w	r3, r3, #7
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800588a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	db0b      	blt.n	80058aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005892:	88fb      	ldrh	r3, [r7, #6]
 8005894:	f003 021f 	and.w	r2, r3, #31
 8005898:	4907      	ldr	r1, [pc, #28]	; (80058b8 <__NVIC_EnableIRQ+0x38>)
 800589a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2001      	movs	r0, #1
 80058a2:	fa00 f202 	lsl.w	r2, r0, r2
 80058a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	e000e100 	.word	0xe000e100

080058bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	db0a      	blt.n	80058e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	490c      	ldr	r1, [pc, #48]	; (8005908 <__NVIC_SetPriority+0x4c>)
 80058d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	440b      	add	r3, r1
 80058e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e4:	e00a      	b.n	80058fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4908      	ldr	r1, [pc, #32]	; (800590c <__NVIC_SetPriority+0x50>)
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	3b04      	subs	r3, #4
 80058f4:	0112      	lsls	r2, r2, #4
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	440b      	add	r3, r1
 80058fa:	761a      	strb	r2, [r3, #24]
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000e100 	.word	0xe000e100
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f1c3 0307 	rsb	r3, r3, #7
 800592a:	2b04      	cmp	r3, #4
 800592c:	bf28      	it	cs
 800592e:	2304      	movcs	r3, #4
 8005930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3304      	adds	r3, #4
 8005936:	2b06      	cmp	r3, #6
 8005938:	d902      	bls.n	8005940 <NVIC_EncodePriority+0x30>
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3b03      	subs	r3, #3
 800593e:	e000      	b.n	8005942 <NVIC_EncodePriority+0x32>
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	401a      	ands	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005958:	f04f 31ff 	mov.w	r1, #4294967295
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	43d9      	mvns	r1, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005968:	4313      	orrs	r3, r2
         );
}
 800596a:	4618      	mov	r0, r3
 800596c:	3724      	adds	r7, #36	; 0x24
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3b01      	subs	r3, #1
 8005984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005988:	d301      	bcc.n	800598e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800598a:	2301      	movs	r3, #1
 800598c:	e00f      	b.n	80059ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800598e:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <SysTick_Config+0x40>)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3b01      	subs	r3, #1
 8005994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005996:	210f      	movs	r1, #15
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	f7ff ff8e 	bl	80058bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <SysTick_Config+0x40>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059a6:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <SysTick_Config+0x40>)
 80059a8:	2207      	movs	r2, #7
 80059aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3708      	adds	r7, #8
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	e000e010 	.word	0xe000e010

080059bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff ff29 	bl	800581c <__NVIC_SetPriorityGrouping>
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	4603      	mov	r3, r0
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059e0:	f7ff ff40 	bl	8005864 <__NVIC_GetPriorityGrouping>
 80059e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f7ff ff90 	bl	8005910 <NVIC_EncodePriority>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff5f 	bl	80058bc <__NVIC_SetPriority>
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff33 	bl	8005880 <__NVIC_EnableIRQ>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ffa4 	bl	8005978 <SysTick_Config>
 8005a30:	4603      	mov	r3, r0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005a44:	f7ff fede 	bl	8005804 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e314      	b.n	800607e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a66      	ldr	r2, [pc, #408]	; (8005bf4 <HAL_DMA_Init+0x1b8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d04a      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a65      	ldr	r2, [pc, #404]	; (8005bf8 <HAL_DMA_Init+0x1bc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d045      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a63      	ldr	r2, [pc, #396]	; (8005bfc <HAL_DMA_Init+0x1c0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d040      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a62      	ldr	r2, [pc, #392]	; (8005c00 <HAL_DMA_Init+0x1c4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d03b      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a60      	ldr	r2, [pc, #384]	; (8005c04 <HAL_DMA_Init+0x1c8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d036      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5f      	ldr	r2, [pc, #380]	; (8005c08 <HAL_DMA_Init+0x1cc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d031      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5d      	ldr	r2, [pc, #372]	; (8005c0c <HAL_DMA_Init+0x1d0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d02c      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a5c      	ldr	r2, [pc, #368]	; (8005c10 <HAL_DMA_Init+0x1d4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d027      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a5a      	ldr	r2, [pc, #360]	; (8005c14 <HAL_DMA_Init+0x1d8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d022      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a59      	ldr	r2, [pc, #356]	; (8005c18 <HAL_DMA_Init+0x1dc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d01d      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a57      	ldr	r2, [pc, #348]	; (8005c1c <HAL_DMA_Init+0x1e0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d018      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a56      	ldr	r2, [pc, #344]	; (8005c20 <HAL_DMA_Init+0x1e4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d013      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a54      	ldr	r2, [pc, #336]	; (8005c24 <HAL_DMA_Init+0x1e8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00e      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a53      	ldr	r2, [pc, #332]	; (8005c28 <HAL_DMA_Init+0x1ec>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d009      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a51      	ldr	r2, [pc, #324]	; (8005c2c <HAL_DMA_Init+0x1f0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d004      	beq.n	8005af4 <HAL_DMA_Init+0xb8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a50      	ldr	r2, [pc, #320]	; (8005c30 <HAL_DMA_Init+0x1f4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d101      	bne.n	8005af8 <HAL_DMA_Init+0xbc>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <HAL_DMA_Init+0xbe>
 8005af8:	2300      	movs	r3, #0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 813c 	beq.w	8005d78 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a37      	ldr	r2, [pc, #220]	; (8005bf4 <HAL_DMA_Init+0x1b8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d04a      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a36      	ldr	r2, [pc, #216]	; (8005bf8 <HAL_DMA_Init+0x1bc>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d045      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a34      	ldr	r2, [pc, #208]	; (8005bfc <HAL_DMA_Init+0x1c0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d040      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <HAL_DMA_Init+0x1c4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d03b      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a31      	ldr	r2, [pc, #196]	; (8005c04 <HAL_DMA_Init+0x1c8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d036      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <HAL_DMA_Init+0x1cc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d031      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2e      	ldr	r2, [pc, #184]	; (8005c0c <HAL_DMA_Init+0x1d0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d02c      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2d      	ldr	r2, [pc, #180]	; (8005c10 <HAL_DMA_Init+0x1d4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d027      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a2b      	ldr	r2, [pc, #172]	; (8005c14 <HAL_DMA_Init+0x1d8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d022      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2a      	ldr	r2, [pc, #168]	; (8005c18 <HAL_DMA_Init+0x1dc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d01d      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a28      	ldr	r2, [pc, #160]	; (8005c1c <HAL_DMA_Init+0x1e0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <HAL_DMA_Init+0x1e4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a25      	ldr	r2, [pc, #148]	; (8005c24 <HAL_DMA_Init+0x1e8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a24      	ldr	r2, [pc, #144]	; (8005c28 <HAL_DMA_Init+0x1ec>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a22      	ldr	r2, [pc, #136]	; (8005c2c <HAL_DMA_Init+0x1f0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_DMA_Init+0x174>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a21      	ldr	r2, [pc, #132]	; (8005c30 <HAL_DMA_Init+0x1f4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <HAL_DMA_Init+0x186>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	e007      	b.n	8005bd2 <HAL_DMA_Init+0x196>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bd2:	e02f      	b.n	8005c34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bd4:	f7ff fe16 	bl	8005804 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d928      	bls.n	8005c34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2203      	movs	r2, #3
 8005bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e244      	b.n	800607e <HAL_DMA_Init+0x642>
 8005bf4:	40020010 	.word	0x40020010
 8005bf8:	40020028 	.word	0x40020028
 8005bfc:	40020040 	.word	0x40020040
 8005c00:	40020058 	.word	0x40020058
 8005c04:	40020070 	.word	0x40020070
 8005c08:	40020088 	.word	0x40020088
 8005c0c:	400200a0 	.word	0x400200a0
 8005c10:	400200b8 	.word	0x400200b8
 8005c14:	40020410 	.word	0x40020410
 8005c18:	40020428 	.word	0x40020428
 8005c1c:	40020440 	.word	0x40020440
 8005c20:	40020458 	.word	0x40020458
 8005c24:	40020470 	.word	0x40020470
 8005c28:	40020488 	.word	0x40020488
 8005c2c:	400204a0 	.word	0x400204a0
 8005c30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1c8      	bne.n	8005bd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4b84      	ldr	r3, [pc, #528]	; (8005e60 <HAL_DMA_Init+0x424>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005c5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d107      	bne.n	8005c98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	4313      	orrs	r3, r2
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b28      	cmp	r3, #40	; 0x28
 8005c9e:	d903      	bls.n	8005ca8 <HAL_DMA_Init+0x26c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ca6:	d91f      	bls.n	8005ce8 <HAL_DMA_Init+0x2ac>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2b3e      	cmp	r3, #62	; 0x3e
 8005cae:	d903      	bls.n	8005cb8 <HAL_DMA_Init+0x27c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b42      	cmp	r3, #66	; 0x42
 8005cb6:	d917      	bls.n	8005ce8 <HAL_DMA_Init+0x2ac>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b46      	cmp	r3, #70	; 0x46
 8005cbe:	d903      	bls.n	8005cc8 <HAL_DMA_Init+0x28c>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b48      	cmp	r3, #72	; 0x48
 8005cc6:	d90f      	bls.n	8005ce8 <HAL_DMA_Init+0x2ac>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b4e      	cmp	r3, #78	; 0x4e
 8005cce:	d903      	bls.n	8005cd8 <HAL_DMA_Init+0x29c>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b52      	cmp	r3, #82	; 0x52
 8005cd6:	d907      	bls.n	8005ce8 <HAL_DMA_Init+0x2ac>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2b73      	cmp	r3, #115	; 0x73
 8005cde:	d905      	bls.n	8005cec <HAL_DMA_Init+0x2b0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b77      	cmp	r3, #119	; 0x77
 8005ce6:	d801      	bhi.n	8005cec <HAL_DMA_Init+0x2b0>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <HAL_DMA_Init+0x2b2>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cf8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 0307 	bic.w	r3, r3, #7
 8005d10:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d117      	bne.n	8005d54 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00e      	beq.n	8005d54 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fb30 	bl	800839c <DMA_CheckFifoParam>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2240      	movs	r2, #64	; 0x40
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e194      	b.n	800607e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f002 fa6b 	bl	8008238 <DMA_CalcBaseAndBitshift>
 8005d62:	4603      	mov	r3, r0
 8005d64:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	223f      	movs	r2, #63	; 0x3f
 8005d70:	409a      	lsls	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	609a      	str	r2, [r3, #8]
 8005d76:	e0ca      	b.n	8005f0e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a39      	ldr	r2, [pc, #228]	; (8005e64 <HAL_DMA_Init+0x428>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_DMA_Init+0x38c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a38      	ldr	r2, [pc, #224]	; (8005e68 <HAL_DMA_Init+0x42c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_DMA_Init+0x38c>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a36      	ldr	r2, [pc, #216]	; (8005e6c <HAL_DMA_Init+0x430>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_DMA_Init+0x38c>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a35      	ldr	r2, [pc, #212]	; (8005e70 <HAL_DMA_Init+0x434>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_DMA_Init+0x38c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a33      	ldr	r2, [pc, #204]	; (8005e74 <HAL_DMA_Init+0x438>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_DMA_Init+0x38c>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a32      	ldr	r2, [pc, #200]	; (8005e78 <HAL_DMA_Init+0x43c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_DMA_Init+0x38c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a30      	ldr	r2, [pc, #192]	; (8005e7c <HAL_DMA_Init+0x440>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_DMA_Init+0x38c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2f      	ldr	r2, [pc, #188]	; (8005e80 <HAL_DMA_Init+0x444>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d101      	bne.n	8005dcc <HAL_DMA_Init+0x390>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e000      	b.n	8005dce <HAL_DMA_Init+0x392>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8094 	beq.w	8005efc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a22      	ldr	r2, [pc, #136]	; (8005e64 <HAL_DMA_Init+0x428>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d021      	beq.n	8005e22 <HAL_DMA_Init+0x3e6>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a21      	ldr	r2, [pc, #132]	; (8005e68 <HAL_DMA_Init+0x42c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01c      	beq.n	8005e22 <HAL_DMA_Init+0x3e6>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1f      	ldr	r2, [pc, #124]	; (8005e6c <HAL_DMA_Init+0x430>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d017      	beq.n	8005e22 <HAL_DMA_Init+0x3e6>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <HAL_DMA_Init+0x434>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d012      	beq.n	8005e22 <HAL_DMA_Init+0x3e6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <HAL_DMA_Init+0x438>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00d      	beq.n	8005e22 <HAL_DMA_Init+0x3e6>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	; (8005e78 <HAL_DMA_Init+0x43c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d008      	beq.n	8005e22 <HAL_DMA_Init+0x3e6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <HAL_DMA_Init+0x440>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <HAL_DMA_Init+0x3e6>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <HAL_DMA_Init+0x444>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <HAL_DMA_Init+0x448>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	2b40      	cmp	r3, #64	; 0x40
 8005e4a:	d01d      	beq.n	8005e88 <HAL_DMA_Init+0x44c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b80      	cmp	r3, #128	; 0x80
 8005e52:	d102      	bne.n	8005e5a <HAL_DMA_Init+0x41e>
 8005e54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e58:	e017      	b.n	8005e8a <HAL_DMA_Init+0x44e>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e015      	b.n	8005e8a <HAL_DMA_Init+0x44e>
 8005e5e:	bf00      	nop
 8005e60:	fe10803f 	.word	0xfe10803f
 8005e64:	58025408 	.word	0x58025408
 8005e68:	5802541c 	.word	0x5802541c
 8005e6c:	58025430 	.word	0x58025430
 8005e70:	58025444 	.word	0x58025444
 8005e74:	58025458 	.word	0x58025458
 8005e78:	5802546c 	.word	0x5802546c
 8005e7c:	58025480 	.word	0x58025480
 8005e80:	58025494 	.word	0x58025494
 8005e84:	fffe000f 	.word	0xfffe000f
 8005e88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68d2      	ldr	r2, [r2, #12]
 8005e8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005eb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4b6e      	ldr	r3, [pc, #440]	; (8006088 <HAL_DMA_Init+0x64c>)
 8005ed0:	4413      	add	r3, r2
 8005ed2:	4a6e      	ldr	r2, [pc, #440]	; (800608c <HAL_DMA_Init+0x650>)
 8005ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	009a      	lsls	r2, r3, #2
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f002 f9a9 	bl	8008238 <DMA_CalcBaseAndBitshift>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	f003 031f 	and.w	r3, r3, #31
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	e008      	b.n	8005f0e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2203      	movs	r2, #3
 8005f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e0b7      	b.n	800607e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a5f      	ldr	r2, [pc, #380]	; (8006090 <HAL_DMA_Init+0x654>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d072      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a5d      	ldr	r2, [pc, #372]	; (8006094 <HAL_DMA_Init+0x658>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d06d      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a5c      	ldr	r2, [pc, #368]	; (8006098 <HAL_DMA_Init+0x65c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d068      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a5a      	ldr	r2, [pc, #360]	; (800609c <HAL_DMA_Init+0x660>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d063      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a59      	ldr	r2, [pc, #356]	; (80060a0 <HAL_DMA_Init+0x664>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d05e      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a57      	ldr	r2, [pc, #348]	; (80060a4 <HAL_DMA_Init+0x668>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d059      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a56      	ldr	r2, [pc, #344]	; (80060a8 <HAL_DMA_Init+0x66c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d054      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a54      	ldr	r2, [pc, #336]	; (80060ac <HAL_DMA_Init+0x670>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d04f      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a53      	ldr	r2, [pc, #332]	; (80060b0 <HAL_DMA_Init+0x674>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d04a      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a51      	ldr	r2, [pc, #324]	; (80060b4 <HAL_DMA_Init+0x678>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d045      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a50      	ldr	r2, [pc, #320]	; (80060b8 <HAL_DMA_Init+0x67c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d040      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a4e      	ldr	r2, [pc, #312]	; (80060bc <HAL_DMA_Init+0x680>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d03b      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a4d      	ldr	r2, [pc, #308]	; (80060c0 <HAL_DMA_Init+0x684>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d036      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a4b      	ldr	r2, [pc, #300]	; (80060c4 <HAL_DMA_Init+0x688>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d031      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a4a      	ldr	r2, [pc, #296]	; (80060c8 <HAL_DMA_Init+0x68c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d02c      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a48      	ldr	r2, [pc, #288]	; (80060cc <HAL_DMA_Init+0x690>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d027      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a47      	ldr	r2, [pc, #284]	; (80060d0 <HAL_DMA_Init+0x694>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d022      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a45      	ldr	r2, [pc, #276]	; (80060d4 <HAL_DMA_Init+0x698>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01d      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a44      	ldr	r2, [pc, #272]	; (80060d8 <HAL_DMA_Init+0x69c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d018      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a42      	ldr	r2, [pc, #264]	; (80060dc <HAL_DMA_Init+0x6a0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a41      	ldr	r2, [pc, #260]	; (80060e0 <HAL_DMA_Init+0x6a4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a3f      	ldr	r2, [pc, #252]	; (80060e4 <HAL_DMA_Init+0x6a8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a3e      	ldr	r2, [pc, #248]	; (80060e8 <HAL_DMA_Init+0x6ac>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_DMA_Init+0x5c2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <HAL_DMA_Init+0x6b0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d101      	bne.n	8006002 <HAL_DMA_Init+0x5c6>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <HAL_DMA_Init+0x5c8>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d032      	beq.n	800606e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f002 fa43 	bl	8008494 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d102      	bne.n	800601c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006030:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d010      	beq.n	800605c <HAL_DMA_Init+0x620>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b08      	cmp	r3, #8
 8006040:	d80c      	bhi.n	800605c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f002 fac0 	bl	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	e008      	b.n	800606e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	a7fdabf8 	.word	0xa7fdabf8
 800608c:	cccccccd 	.word	0xcccccccd
 8006090:	40020010 	.word	0x40020010
 8006094:	40020028 	.word	0x40020028
 8006098:	40020040 	.word	0x40020040
 800609c:	40020058 	.word	0x40020058
 80060a0:	40020070 	.word	0x40020070
 80060a4:	40020088 	.word	0x40020088
 80060a8:	400200a0 	.word	0x400200a0
 80060ac:	400200b8 	.word	0x400200b8
 80060b0:	40020410 	.word	0x40020410
 80060b4:	40020428 	.word	0x40020428
 80060b8:	40020440 	.word	0x40020440
 80060bc:	40020458 	.word	0x40020458
 80060c0:	40020470 	.word	0x40020470
 80060c4:	40020488 	.word	0x40020488
 80060c8:	400204a0 	.word	0x400204a0
 80060cc:	400204b8 	.word	0x400204b8
 80060d0:	58025408 	.word	0x58025408
 80060d4:	5802541c 	.word	0x5802541c
 80060d8:	58025430 	.word	0x58025430
 80060dc:	58025444 	.word	0x58025444
 80060e0:	58025458 	.word	0x58025458
 80060e4:	5802546c 	.word	0x5802546c
 80060e8:	58025480 	.word	0x58025480
 80060ec:	58025494 	.word	0x58025494

080060f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e226      	b.n	800655a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_DMA_Start_IT+0x2a>
 8006116:	2302      	movs	r3, #2
 8006118:	e21f      	b.n	800655a <HAL_DMA_Start_IT+0x46a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	f040 820a 	bne.w	8006544 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a68      	ldr	r2, [pc, #416]	; (80062e4 <HAL_DMA_Start_IT+0x1f4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d04a      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a66      	ldr	r2, [pc, #408]	; (80062e8 <HAL_DMA_Start_IT+0x1f8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d045      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a65      	ldr	r2, [pc, #404]	; (80062ec <HAL_DMA_Start_IT+0x1fc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d040      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a63      	ldr	r2, [pc, #396]	; (80062f0 <HAL_DMA_Start_IT+0x200>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d03b      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a62      	ldr	r2, [pc, #392]	; (80062f4 <HAL_DMA_Start_IT+0x204>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d036      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a60      	ldr	r2, [pc, #384]	; (80062f8 <HAL_DMA_Start_IT+0x208>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d031      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a5f      	ldr	r2, [pc, #380]	; (80062fc <HAL_DMA_Start_IT+0x20c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d02c      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a5d      	ldr	r2, [pc, #372]	; (8006300 <HAL_DMA_Start_IT+0x210>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d027      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a5c      	ldr	r2, [pc, #368]	; (8006304 <HAL_DMA_Start_IT+0x214>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d022      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a5a      	ldr	r2, [pc, #360]	; (8006308 <HAL_DMA_Start_IT+0x218>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01d      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a59      	ldr	r2, [pc, #356]	; (800630c <HAL_DMA_Start_IT+0x21c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d018      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a57      	ldr	r2, [pc, #348]	; (8006310 <HAL_DMA_Start_IT+0x220>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d013      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a56      	ldr	r2, [pc, #344]	; (8006314 <HAL_DMA_Start_IT+0x224>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00e      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a54      	ldr	r2, [pc, #336]	; (8006318 <HAL_DMA_Start_IT+0x228>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d009      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a53      	ldr	r2, [pc, #332]	; (800631c <HAL_DMA_Start_IT+0x22c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <HAL_DMA_Start_IT+0xee>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a51      	ldr	r2, [pc, #324]	; (8006320 <HAL_DMA_Start_IT+0x230>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d108      	bne.n	80061f0 <HAL_DMA_Start_IT+0x100>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e007      	b.n	8006200 <HAL_DMA_Start_IT+0x110>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 fe6a 	bl	8007ee0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a34      	ldr	r2, [pc, #208]	; (80062e4 <HAL_DMA_Start_IT+0x1f4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d04a      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a33      	ldr	r2, [pc, #204]	; (80062e8 <HAL_DMA_Start_IT+0x1f8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d045      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a31      	ldr	r2, [pc, #196]	; (80062ec <HAL_DMA_Start_IT+0x1fc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d040      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a30      	ldr	r2, [pc, #192]	; (80062f0 <HAL_DMA_Start_IT+0x200>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d03b      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <HAL_DMA_Start_IT+0x204>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d036      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2d      	ldr	r2, [pc, #180]	; (80062f8 <HAL_DMA_Start_IT+0x208>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d031      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <HAL_DMA_Start_IT+0x20c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d02c      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <HAL_DMA_Start_IT+0x210>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d027      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a28      	ldr	r2, [pc, #160]	; (8006304 <HAL_DMA_Start_IT+0x214>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d022      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a27      	ldr	r2, [pc, #156]	; (8006308 <HAL_DMA_Start_IT+0x218>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d01d      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <HAL_DMA_Start_IT+0x21c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d018      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a24      	ldr	r2, [pc, #144]	; (8006310 <HAL_DMA_Start_IT+0x220>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a22      	ldr	r2, [pc, #136]	; (8006314 <HAL_DMA_Start_IT+0x224>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00e      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a21      	ldr	r2, [pc, #132]	; (8006318 <HAL_DMA_Start_IT+0x228>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1f      	ldr	r2, [pc, #124]	; (800631c <HAL_DMA_Start_IT+0x22c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d004      	beq.n	80062ac <HAL_DMA_Start_IT+0x1bc>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <HAL_DMA_Start_IT+0x230>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d101      	bne.n	80062b0 <HAL_DMA_Start_IT+0x1c0>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_DMA_Start_IT+0x1c2>
 80062b0:	2300      	movs	r3, #0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d036      	beq.n	8006324 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f023 021e 	bic.w	r2, r3, #30
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0216 	orr.w	r2, r2, #22
 80062c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d03e      	beq.n	8006350 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0208 	orr.w	r2, r2, #8
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e035      	b.n	8006350 <HAL_DMA_Start_IT+0x260>
 80062e4:	40020010 	.word	0x40020010
 80062e8:	40020028 	.word	0x40020028
 80062ec:	40020040 	.word	0x40020040
 80062f0:	40020058 	.word	0x40020058
 80062f4:	40020070 	.word	0x40020070
 80062f8:	40020088 	.word	0x40020088
 80062fc:	400200a0 	.word	0x400200a0
 8006300:	400200b8 	.word	0x400200b8
 8006304:	40020410 	.word	0x40020410
 8006308:	40020428 	.word	0x40020428
 800630c:	40020440 	.word	0x40020440
 8006310:	40020458 	.word	0x40020458
 8006314:	40020470 	.word	0x40020470
 8006318:	40020488 	.word	0x40020488
 800631c:	400204a0 	.word	0x400204a0
 8006320:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f023 020e 	bic.w	r2, r3, #14
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 020a 	orr.w	r2, r2, #10
 8006336:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0204 	orr.w	r2, r2, #4
 800634e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	; (8006564 <HAL_DMA_Start_IT+0x474>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d072      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a82      	ldr	r2, [pc, #520]	; (8006568 <HAL_DMA_Start_IT+0x478>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d06d      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a80      	ldr	r2, [pc, #512]	; (800656c <HAL_DMA_Start_IT+0x47c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d068      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a7f      	ldr	r2, [pc, #508]	; (8006570 <HAL_DMA_Start_IT+0x480>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d063      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7d      	ldr	r2, [pc, #500]	; (8006574 <HAL_DMA_Start_IT+0x484>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d05e      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7c      	ldr	r2, [pc, #496]	; (8006578 <HAL_DMA_Start_IT+0x488>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d059      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a7a      	ldr	r2, [pc, #488]	; (800657c <HAL_DMA_Start_IT+0x48c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d054      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a79      	ldr	r2, [pc, #484]	; (8006580 <HAL_DMA_Start_IT+0x490>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d04f      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a77      	ldr	r2, [pc, #476]	; (8006584 <HAL_DMA_Start_IT+0x494>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a76      	ldr	r2, [pc, #472]	; (8006588 <HAL_DMA_Start_IT+0x498>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a74      	ldr	r2, [pc, #464]	; (800658c <HAL_DMA_Start_IT+0x49c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a73      	ldr	r2, [pc, #460]	; (8006590 <HAL_DMA_Start_IT+0x4a0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a71      	ldr	r2, [pc, #452]	; (8006594 <HAL_DMA_Start_IT+0x4a4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a70      	ldr	r2, [pc, #448]	; (8006598 <HAL_DMA_Start_IT+0x4a8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6e      	ldr	r2, [pc, #440]	; (800659c <HAL_DMA_Start_IT+0x4ac>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6d      	ldr	r2, [pc, #436]	; (80065a0 <HAL_DMA_Start_IT+0x4b0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a6b      	ldr	r2, [pc, #428]	; (80065a4 <HAL_DMA_Start_IT+0x4b4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a6a      	ldr	r2, [pc, #424]	; (80065a8 <HAL_DMA_Start_IT+0x4b8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a68      	ldr	r2, [pc, #416]	; (80065ac <HAL_DMA_Start_IT+0x4bc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a67      	ldr	r2, [pc, #412]	; (80065b0 <HAL_DMA_Start_IT+0x4c0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a65      	ldr	r2, [pc, #404]	; (80065b4 <HAL_DMA_Start_IT+0x4c4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <HAL_DMA_Start_IT+0x4c8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a62      	ldr	r2, [pc, #392]	; (80065bc <HAL_DMA_Start_IT+0x4cc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_DMA_Start_IT+0x350>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a61      	ldr	r2, [pc, #388]	; (80065c0 <HAL_DMA_Start_IT+0x4d0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d101      	bne.n	8006444 <HAL_DMA_Start_IT+0x354>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <HAL_DMA_Start_IT+0x356>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01a      	beq.n	8006480 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006466:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800647e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a37      	ldr	r2, [pc, #220]	; (8006564 <HAL_DMA_Start_IT+0x474>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d04a      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a36      	ldr	r2, [pc, #216]	; (8006568 <HAL_DMA_Start_IT+0x478>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d045      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a34      	ldr	r2, [pc, #208]	; (800656c <HAL_DMA_Start_IT+0x47c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d040      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a33      	ldr	r2, [pc, #204]	; (8006570 <HAL_DMA_Start_IT+0x480>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d03b      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a31      	ldr	r2, [pc, #196]	; (8006574 <HAL_DMA_Start_IT+0x484>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d036      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a30      	ldr	r2, [pc, #192]	; (8006578 <HAL_DMA_Start_IT+0x488>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d031      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2e      	ldr	r2, [pc, #184]	; (800657c <HAL_DMA_Start_IT+0x48c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d02c      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a2d      	ldr	r2, [pc, #180]	; (8006580 <HAL_DMA_Start_IT+0x490>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d027      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2b      	ldr	r2, [pc, #172]	; (8006584 <HAL_DMA_Start_IT+0x494>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d022      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <HAL_DMA_Start_IT+0x498>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d01d      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a28      	ldr	r2, [pc, #160]	; (800658c <HAL_DMA_Start_IT+0x49c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a27      	ldr	r2, [pc, #156]	; (8006590 <HAL_DMA_Start_IT+0x4a0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a25      	ldr	r2, [pc, #148]	; (8006594 <HAL_DMA_Start_IT+0x4a4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a24      	ldr	r2, [pc, #144]	; (8006598 <HAL_DMA_Start_IT+0x4a8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <HAL_DMA_Start_IT+0x4ac>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_DMA_Start_IT+0x430>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_DMA_Start_IT+0x4b0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d108      	bne.n	8006532 <HAL_DMA_Start_IT+0x442>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e012      	b.n	8006558 <HAL_DMA_Start_IT+0x468>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0201 	orr.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	e009      	b.n	8006558 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800654a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40020010 	.word	0x40020010
 8006568:	40020028 	.word	0x40020028
 800656c:	40020040 	.word	0x40020040
 8006570:	40020058 	.word	0x40020058
 8006574:	40020070 	.word	0x40020070
 8006578:	40020088 	.word	0x40020088
 800657c:	400200a0 	.word	0x400200a0
 8006580:	400200b8 	.word	0x400200b8
 8006584:	40020410 	.word	0x40020410
 8006588:	40020428 	.word	0x40020428
 800658c:	40020440 	.word	0x40020440
 8006590:	40020458 	.word	0x40020458
 8006594:	40020470 	.word	0x40020470
 8006598:	40020488 	.word	0x40020488
 800659c:	400204a0 	.word	0x400204a0
 80065a0:	400204b8 	.word	0x400204b8
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494

080065c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80065cc:	f7ff f91a 	bl	8005804 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e2dc      	b.n	8006b96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d008      	beq.n	80065fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2280      	movs	r2, #128	; 0x80
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e2cd      	b.n	8006b96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a76      	ldr	r2, [pc, #472]	; (80067d8 <HAL_DMA_Abort+0x214>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04a      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a74      	ldr	r2, [pc, #464]	; (80067dc <HAL_DMA_Abort+0x218>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d045      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a73      	ldr	r2, [pc, #460]	; (80067e0 <HAL_DMA_Abort+0x21c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d040      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a71      	ldr	r2, [pc, #452]	; (80067e4 <HAL_DMA_Abort+0x220>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d03b      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a70      	ldr	r2, [pc, #448]	; (80067e8 <HAL_DMA_Abort+0x224>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d036      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6e      	ldr	r2, [pc, #440]	; (80067ec <HAL_DMA_Abort+0x228>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d031      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6d      	ldr	r2, [pc, #436]	; (80067f0 <HAL_DMA_Abort+0x22c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d02c      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6b      	ldr	r2, [pc, #428]	; (80067f4 <HAL_DMA_Abort+0x230>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d027      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6a      	ldr	r2, [pc, #424]	; (80067f8 <HAL_DMA_Abort+0x234>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a68      	ldr	r2, [pc, #416]	; (80067fc <HAL_DMA_Abort+0x238>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01d      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a67      	ldr	r2, [pc, #412]	; (8006800 <HAL_DMA_Abort+0x23c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a65      	ldr	r2, [pc, #404]	; (8006804 <HAL_DMA_Abort+0x240>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a64      	ldr	r2, [pc, #400]	; (8006808 <HAL_DMA_Abort+0x244>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a62      	ldr	r2, [pc, #392]	; (800680c <HAL_DMA_Abort+0x248>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a61      	ldr	r2, [pc, #388]	; (8006810 <HAL_DMA_Abort+0x24c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_DMA_Abort+0xd6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5f      	ldr	r2, [pc, #380]	; (8006814 <HAL_DMA_Abort+0x250>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d101      	bne.n	800669e <HAL_DMA_Abort+0xda>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_DMA_Abort+0xdc>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d013      	beq.n	80066cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 021e 	bic.w	r2, r2, #30
 80066b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e00a      	b.n	80066e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 020e 	bic.w	r2, r2, #14
 80066da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a3c      	ldr	r2, [pc, #240]	; (80067d8 <HAL_DMA_Abort+0x214>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d072      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a3a      	ldr	r2, [pc, #232]	; (80067dc <HAL_DMA_Abort+0x218>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d06d      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a39      	ldr	r2, [pc, #228]	; (80067e0 <HAL_DMA_Abort+0x21c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d068      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a37      	ldr	r2, [pc, #220]	; (80067e4 <HAL_DMA_Abort+0x220>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d063      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a36      	ldr	r2, [pc, #216]	; (80067e8 <HAL_DMA_Abort+0x224>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d05e      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a34      	ldr	r2, [pc, #208]	; (80067ec <HAL_DMA_Abort+0x228>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d059      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a33      	ldr	r2, [pc, #204]	; (80067f0 <HAL_DMA_Abort+0x22c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d054      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a31      	ldr	r2, [pc, #196]	; (80067f4 <HAL_DMA_Abort+0x230>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d04f      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a30      	ldr	r2, [pc, #192]	; (80067f8 <HAL_DMA_Abort+0x234>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d04a      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <HAL_DMA_Abort+0x238>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d045      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2d      	ldr	r2, [pc, #180]	; (8006800 <HAL_DMA_Abort+0x23c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d040      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2b      	ldr	r2, [pc, #172]	; (8006804 <HAL_DMA_Abort+0x240>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d03b      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2a      	ldr	r2, [pc, #168]	; (8006808 <HAL_DMA_Abort+0x244>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d036      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a28      	ldr	r2, [pc, #160]	; (800680c <HAL_DMA_Abort+0x248>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d031      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a27      	ldr	r2, [pc, #156]	; (8006810 <HAL_DMA_Abort+0x24c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d02c      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a25      	ldr	r2, [pc, #148]	; (8006814 <HAL_DMA_Abort+0x250>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a24      	ldr	r2, [pc, #144]	; (8006818 <HAL_DMA_Abort+0x254>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a22      	ldr	r2, [pc, #136]	; (800681c <HAL_DMA_Abort+0x258>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d01d      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a21      	ldr	r2, [pc, #132]	; (8006820 <HAL_DMA_Abort+0x25c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1f      	ldr	r2, [pc, #124]	; (8006824 <HAL_DMA_Abort+0x260>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	; (8006828 <HAL_DMA_Abort+0x264>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HAL_DMA_Abort+0x268>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	; (8006830 <HAL_DMA_Abort+0x26c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_DMA_Abort+0x20e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a19      	ldr	r2, [pc, #100]	; (8006834 <HAL_DMA_Abort+0x270>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d132      	bne.n	8006838 <HAL_DMA_Abort+0x274>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e031      	b.n	800683a <HAL_DMA_Abort+0x276>
 80067d6:	bf00      	nop
 80067d8:	40020010 	.word	0x40020010
 80067dc:	40020028 	.word	0x40020028
 80067e0:	40020040 	.word	0x40020040
 80067e4:	40020058 	.word	0x40020058
 80067e8:	40020070 	.word	0x40020070
 80067ec:	40020088 	.word	0x40020088
 80067f0:	400200a0 	.word	0x400200a0
 80067f4:	400200b8 	.word	0x400200b8
 80067f8:	40020410 	.word	0x40020410
 80067fc:	40020428 	.word	0x40020428
 8006800:	40020440 	.word	0x40020440
 8006804:	40020458 	.word	0x40020458
 8006808:	40020470 	.word	0x40020470
 800680c:	40020488 	.word	0x40020488
 8006810:	400204a0 	.word	0x400204a0
 8006814:	400204b8 	.word	0x400204b8
 8006818:	58025408 	.word	0x58025408
 800681c:	5802541c 	.word	0x5802541c
 8006820:	58025430 	.word	0x58025430
 8006824:	58025444 	.word	0x58025444
 8006828:	58025458 	.word	0x58025458
 800682c:	5802546c 	.word	0x5802546c
 8006830:	58025480 	.word	0x58025480
 8006834:	58025494 	.word	0x58025494
 8006838:	2300      	movs	r3, #0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800684c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a6d      	ldr	r2, [pc, #436]	; (8006a08 <HAL_DMA_Abort+0x444>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a6b      	ldr	r2, [pc, #428]	; (8006a0c <HAL_DMA_Abort+0x448>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a6a      	ldr	r2, [pc, #424]	; (8006a10 <HAL_DMA_Abort+0x44c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a68      	ldr	r2, [pc, #416]	; (8006a14 <HAL_DMA_Abort+0x450>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a67      	ldr	r2, [pc, #412]	; (8006a18 <HAL_DMA_Abort+0x454>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a65      	ldr	r2, [pc, #404]	; (8006a1c <HAL_DMA_Abort+0x458>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a64      	ldr	r2, [pc, #400]	; (8006a20 <HAL_DMA_Abort+0x45c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a62      	ldr	r2, [pc, #392]	; (8006a24 <HAL_DMA_Abort+0x460>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a61      	ldr	r2, [pc, #388]	; (8006a28 <HAL_DMA_Abort+0x464>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a5f      	ldr	r2, [pc, #380]	; (8006a2c <HAL_DMA_Abort+0x468>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a5e      	ldr	r2, [pc, #376]	; (8006a30 <HAL_DMA_Abort+0x46c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a5c      	ldr	r2, [pc, #368]	; (8006a34 <HAL_DMA_Abort+0x470>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a5b      	ldr	r2, [pc, #364]	; (8006a38 <HAL_DMA_Abort+0x474>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a59      	ldr	r2, [pc, #356]	; (8006a3c <HAL_DMA_Abort+0x478>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a58      	ldr	r2, [pc, #352]	; (8006a40 <HAL_DMA_Abort+0x47c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_Abort+0x32a>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a56      	ldr	r2, [pc, #344]	; (8006a44 <HAL_DMA_Abort+0x480>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d108      	bne.n	8006900 <HAL_DMA_Abort+0x33c>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0201 	bic.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e007      	b.n	8006910 <HAL_DMA_Abort+0x34c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006910:	e013      	b.n	800693a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006912:	f7fe ff77 	bl	8005804 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b05      	cmp	r3, #5
 800691e:	d90c      	bls.n	800693a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e12d      	b.n	8006b96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2f      	ldr	r2, [pc, #188]	; (8006a08 <HAL_DMA_Abort+0x444>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d04a      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <HAL_DMA_Abort+0x448>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d045      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <HAL_DMA_Abort+0x44c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d040      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <HAL_DMA_Abort+0x450>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d03b      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <HAL_DMA_Abort+0x454>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d036      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <HAL_DMA_Abort+0x458>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d031      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a26      	ldr	r2, [pc, #152]	; (8006a20 <HAL_DMA_Abort+0x45c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d02c      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a24      	ldr	r2, [pc, #144]	; (8006a24 <HAL_DMA_Abort+0x460>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d027      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a23      	ldr	r2, [pc, #140]	; (8006a28 <HAL_DMA_Abort+0x464>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <HAL_DMA_Abort+0x468>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d01d      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a20      	ldr	r2, [pc, #128]	; (8006a30 <HAL_DMA_Abort+0x46c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_DMA_Abort+0x470>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1d      	ldr	r2, [pc, #116]	; (8006a38 <HAL_DMA_Abort+0x474>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <HAL_DMA_Abort+0x478>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1a      	ldr	r2, [pc, #104]	; (8006a40 <HAL_DMA_Abort+0x47c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_DMA_Abort+0x422>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <HAL_DMA_Abort+0x480>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d101      	bne.n	80069ea <HAL_DMA_Abort+0x426>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <HAL_DMA_Abort+0x428>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d02b      	beq.n	8006a48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	223f      	movs	r2, #63	; 0x3f
 8006a00:	409a      	lsls	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	609a      	str	r2, [r3, #8]
 8006a06:	e02a      	b.n	8006a5e <HAL_DMA_Abort+0x49a>
 8006a08:	40020010 	.word	0x40020010
 8006a0c:	40020028 	.word	0x40020028
 8006a10:	40020040 	.word	0x40020040
 8006a14:	40020058 	.word	0x40020058
 8006a18:	40020070 	.word	0x40020070
 8006a1c:	40020088 	.word	0x40020088
 8006a20:	400200a0 	.word	0x400200a0
 8006a24:	400200b8 	.word	0x400200b8
 8006a28:	40020410 	.word	0x40020410
 8006a2c:	40020428 	.word	0x40020428
 8006a30:	40020440 	.word	0x40020440
 8006a34:	40020458 	.word	0x40020458
 8006a38:	40020470 	.word	0x40020470
 8006a3c:	40020488 	.word	0x40020488
 8006a40:	400204a0 	.word	0x400204a0
 8006a44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2201      	movs	r2, #1
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a4f      	ldr	r2, [pc, #316]	; (8006ba0 <HAL_DMA_Abort+0x5dc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d072      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a4d      	ldr	r2, [pc, #308]	; (8006ba4 <HAL_DMA_Abort+0x5e0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d06d      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a4c      	ldr	r2, [pc, #304]	; (8006ba8 <HAL_DMA_Abort+0x5e4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d068      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a4a      	ldr	r2, [pc, #296]	; (8006bac <HAL_DMA_Abort+0x5e8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d063      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a49      	ldr	r2, [pc, #292]	; (8006bb0 <HAL_DMA_Abort+0x5ec>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d05e      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a47      	ldr	r2, [pc, #284]	; (8006bb4 <HAL_DMA_Abort+0x5f0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d059      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a46      	ldr	r2, [pc, #280]	; (8006bb8 <HAL_DMA_Abort+0x5f4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d054      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a44      	ldr	r2, [pc, #272]	; (8006bbc <HAL_DMA_Abort+0x5f8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d04f      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a43      	ldr	r2, [pc, #268]	; (8006bc0 <HAL_DMA_Abort+0x5fc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d04a      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a41      	ldr	r2, [pc, #260]	; (8006bc4 <HAL_DMA_Abort+0x600>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d045      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a40      	ldr	r2, [pc, #256]	; (8006bc8 <HAL_DMA_Abort+0x604>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d040      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a3e      	ldr	r2, [pc, #248]	; (8006bcc <HAL_DMA_Abort+0x608>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d03b      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a3d      	ldr	r2, [pc, #244]	; (8006bd0 <HAL_DMA_Abort+0x60c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d036      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a3b      	ldr	r2, [pc, #236]	; (8006bd4 <HAL_DMA_Abort+0x610>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d031      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3a      	ldr	r2, [pc, #232]	; (8006bd8 <HAL_DMA_Abort+0x614>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d02c      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a38      	ldr	r2, [pc, #224]	; (8006bdc <HAL_DMA_Abort+0x618>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d027      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a37      	ldr	r2, [pc, #220]	; (8006be0 <HAL_DMA_Abort+0x61c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a35      	ldr	r2, [pc, #212]	; (8006be4 <HAL_DMA_Abort+0x620>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a34      	ldr	r2, [pc, #208]	; (8006be8 <HAL_DMA_Abort+0x624>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a32      	ldr	r2, [pc, #200]	; (8006bec <HAL_DMA_Abort+0x628>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a31      	ldr	r2, [pc, #196]	; (8006bf0 <HAL_DMA_Abort+0x62c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a2f      	ldr	r2, [pc, #188]	; (8006bf4 <HAL_DMA_Abort+0x630>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2e      	ldr	r2, [pc, #184]	; (8006bf8 <HAL_DMA_Abort+0x634>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_DMA_Abort+0x58a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <HAL_DMA_Abort+0x638>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d101      	bne.n	8006b52 <HAL_DMA_Abort+0x58e>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <HAL_DMA_Abort+0x590>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d015      	beq.n	8006b84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	40020040 	.word	0x40020040
 8006bac:	40020058 	.word	0x40020058
 8006bb0:	40020070 	.word	0x40020070
 8006bb4:	40020088 	.word	0x40020088
 8006bb8:	400200a0 	.word	0x400200a0
 8006bbc:	400200b8 	.word	0x400200b8
 8006bc0:	40020410 	.word	0x40020410
 8006bc4:	40020428 	.word	0x40020428
 8006bc8:	40020440 	.word	0x40020440
 8006bcc:	40020458 	.word	0x40020458
 8006bd0:	40020470 	.word	0x40020470
 8006bd4:	40020488 	.word	0x40020488
 8006bd8:	400204a0 	.word	0x400204a0
 8006bdc:	400204b8 	.word	0x400204b8
 8006be0:	58025408 	.word	0x58025408
 8006be4:	5802541c 	.word	0x5802541c
 8006be8:	58025430 	.word	0x58025430
 8006bec:	58025444 	.word	0x58025444
 8006bf0:	58025458 	.word	0x58025458
 8006bf4:	5802546c 	.word	0x5802546c
 8006bf8:	58025480 	.word	0x58025480
 8006bfc:	58025494 	.word	0x58025494

08006c00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e237      	b.n	8007082 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d004      	beq.n	8006c28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2280      	movs	r2, #128	; 0x80
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e22c      	b.n	8007082 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a5c      	ldr	r2, [pc, #368]	; (8006da0 <HAL_DMA_Abort_IT+0x1a0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d04a      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5b      	ldr	r2, [pc, #364]	; (8006da4 <HAL_DMA_Abort_IT+0x1a4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d045      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a59      	ldr	r2, [pc, #356]	; (8006da8 <HAL_DMA_Abort_IT+0x1a8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d040      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a58      	ldr	r2, [pc, #352]	; (8006dac <HAL_DMA_Abort_IT+0x1ac>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d03b      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a56      	ldr	r2, [pc, #344]	; (8006db0 <HAL_DMA_Abort_IT+0x1b0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d036      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a55      	ldr	r2, [pc, #340]	; (8006db4 <HAL_DMA_Abort_IT+0x1b4>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d031      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a53      	ldr	r2, [pc, #332]	; (8006db8 <HAL_DMA_Abort_IT+0x1b8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d02c      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a52      	ldr	r2, [pc, #328]	; (8006dbc <HAL_DMA_Abort_IT+0x1bc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d027      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a50      	ldr	r2, [pc, #320]	; (8006dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d022      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a4f      	ldr	r2, [pc, #316]	; (8006dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d01d      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a4d      	ldr	r2, [pc, #308]	; (8006dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d018      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a4c      	ldr	r2, [pc, #304]	; (8006dcc <HAL_DMA_Abort_IT+0x1cc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d013      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a4a      	ldr	r2, [pc, #296]	; (8006dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00e      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a49      	ldr	r2, [pc, #292]	; (8006dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d009      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a47      	ldr	r2, [pc, #284]	; (8006dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d004      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0xc8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a46      	ldr	r2, [pc, #280]	; (8006ddc <HAL_DMA_Abort_IT+0x1dc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d101      	bne.n	8006ccc <HAL_DMA_Abort_IT+0xcc>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <HAL_DMA_Abort_IT+0xce>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8086 	beq.w	8006de0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a2f      	ldr	r2, [pc, #188]	; (8006da0 <HAL_DMA_Abort_IT+0x1a0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d04a      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a2e      	ldr	r2, [pc, #184]	; (8006da4 <HAL_DMA_Abort_IT+0x1a4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d045      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <HAL_DMA_Abort_IT+0x1a8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d040      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a2b      	ldr	r2, [pc, #172]	; (8006dac <HAL_DMA_Abort_IT+0x1ac>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d03b      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a29      	ldr	r2, [pc, #164]	; (8006db0 <HAL_DMA_Abort_IT+0x1b0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d036      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a28      	ldr	r2, [pc, #160]	; (8006db4 <HAL_DMA_Abort_IT+0x1b4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d031      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a26      	ldr	r2, [pc, #152]	; (8006db8 <HAL_DMA_Abort_IT+0x1b8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02c      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a25      	ldr	r2, [pc, #148]	; (8006dbc <HAL_DMA_Abort_IT+0x1bc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d027      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a23      	ldr	r2, [pc, #140]	; (8006dc0 <HAL_DMA_Abort_IT+0x1c0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d022      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a22      	ldr	r2, [pc, #136]	; (8006dc4 <HAL_DMA_Abort_IT+0x1c4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d01d      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <HAL_DMA_Abort_IT+0x1c8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <HAL_DMA_Abort_IT+0x1cc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1d      	ldr	r2, [pc, #116]	; (8006dd0 <HAL_DMA_Abort_IT+0x1d0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <HAL_DMA_Abort_IT+0x1d4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1a      	ldr	r2, [pc, #104]	; (8006dd8 <HAL_DMA_Abort_IT+0x1d8>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <HAL_DMA_Abort_IT+0x17c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <HAL_DMA_Abort_IT+0x1dc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <HAL_DMA_Abort_IT+0x18e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e178      	b.n	8007080 <HAL_DMA_Abort_IT+0x480>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e16f      	b.n	8007080 <HAL_DMA_Abort_IT+0x480>
 8006da0:	40020010 	.word	0x40020010
 8006da4:	40020028 	.word	0x40020028
 8006da8:	40020040 	.word	0x40020040
 8006dac:	40020058 	.word	0x40020058
 8006db0:	40020070 	.word	0x40020070
 8006db4:	40020088 	.word	0x40020088
 8006db8:	400200a0 	.word	0x400200a0
 8006dbc:	400200b8 	.word	0x400200b8
 8006dc0:	40020410 	.word	0x40020410
 8006dc4:	40020428 	.word	0x40020428
 8006dc8:	40020440 	.word	0x40020440
 8006dcc:	40020458 	.word	0x40020458
 8006dd0:	40020470 	.word	0x40020470
 8006dd4:	40020488 	.word	0x40020488
 8006dd8:	400204a0 	.word	0x400204a0
 8006ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 020e 	bic.w	r2, r2, #14
 8006dee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a6c      	ldr	r2, [pc, #432]	; (8006fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d04a      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6b      	ldr	r2, [pc, #428]	; (8006fac <HAL_DMA_Abort_IT+0x3ac>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d045      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a69      	ldr	r2, [pc, #420]	; (8006fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d040      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a68      	ldr	r2, [pc, #416]	; (8006fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d03b      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a66      	ldr	r2, [pc, #408]	; (8006fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d036      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a65      	ldr	r2, [pc, #404]	; (8006fbc <HAL_DMA_Abort_IT+0x3bc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d031      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a63      	ldr	r2, [pc, #396]	; (8006fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d02c      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a62      	ldr	r2, [pc, #392]	; (8006fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d027      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a60      	ldr	r2, [pc, #384]	; (8006fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d022      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a5f      	ldr	r2, [pc, #380]	; (8006fcc <HAL_DMA_Abort_IT+0x3cc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d01d      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a5d      	ldr	r2, [pc, #372]	; (8006fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d018      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a5c      	ldr	r2, [pc, #368]	; (8006fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d013      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5a      	ldr	r2, [pc, #360]	; (8006fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a59      	ldr	r2, [pc, #356]	; (8006fdc <HAL_DMA_Abort_IT+0x3dc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a57      	ldr	r2, [pc, #348]	; (8006fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_DMA_Abort_IT+0x290>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a56      	ldr	r2, [pc, #344]	; (8006fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d108      	bne.n	8006ea2 <HAL_DMA_Abort_IT+0x2a2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e007      	b.n	8006eb2 <HAL_DMA_Abort_IT+0x2b2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a3c      	ldr	r2, [pc, #240]	; (8006fa8 <HAL_DMA_Abort_IT+0x3a8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d072      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a3a      	ldr	r2, [pc, #232]	; (8006fac <HAL_DMA_Abort_IT+0x3ac>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d06d      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a39      	ldr	r2, [pc, #228]	; (8006fb0 <HAL_DMA_Abort_IT+0x3b0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d068      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a37      	ldr	r2, [pc, #220]	; (8006fb4 <HAL_DMA_Abort_IT+0x3b4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d063      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a36      	ldr	r2, [pc, #216]	; (8006fb8 <HAL_DMA_Abort_IT+0x3b8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d05e      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a34      	ldr	r2, [pc, #208]	; (8006fbc <HAL_DMA_Abort_IT+0x3bc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d059      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a33      	ldr	r2, [pc, #204]	; (8006fc0 <HAL_DMA_Abort_IT+0x3c0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d054      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a31      	ldr	r2, [pc, #196]	; (8006fc4 <HAL_DMA_Abort_IT+0x3c4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d04f      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a30      	ldr	r2, [pc, #192]	; (8006fc8 <HAL_DMA_Abort_IT+0x3c8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2e      	ldr	r2, [pc, #184]	; (8006fcc <HAL_DMA_Abort_IT+0x3cc>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a2d      	ldr	r2, [pc, #180]	; (8006fd0 <HAL_DMA_Abort_IT+0x3d0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2b      	ldr	r2, [pc, #172]	; (8006fd4 <HAL_DMA_Abort_IT+0x3d4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <HAL_DMA_Abort_IT+0x3d8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a28      	ldr	r2, [pc, #160]	; (8006fdc <HAL_DMA_Abort_IT+0x3dc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a27      	ldr	r2, [pc, #156]	; (8006fe0 <HAL_DMA_Abort_IT+0x3e0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a25      	ldr	r2, [pc, #148]	; (8006fe4 <HAL_DMA_Abort_IT+0x3e4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a24      	ldr	r2, [pc, #144]	; (8006fe8 <HAL_DMA_Abort_IT+0x3e8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a22      	ldr	r2, [pc, #136]	; (8006fec <HAL_DMA_Abort_IT+0x3ec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a21      	ldr	r2, [pc, #132]	; (8006ff0 <HAL_DMA_Abort_IT+0x3f0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1f      	ldr	r2, [pc, #124]	; (8006ff4 <HAL_DMA_Abort_IT+0x3f4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <HAL_DMA_Abort_IT+0x3f8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	; (8006ffc <HAL_DMA_Abort_IT+0x3fc>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <HAL_DMA_Abort_IT+0x400>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x3a2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a19      	ldr	r2, [pc, #100]	; (8007004 <HAL_DMA_Abort_IT+0x404>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d132      	bne.n	8007008 <HAL_DMA_Abort_IT+0x408>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e031      	b.n	800700a <HAL_DMA_Abort_IT+0x40a>
 8006fa6:	bf00      	nop
 8006fa8:	40020010 	.word	0x40020010
 8006fac:	40020028 	.word	0x40020028
 8006fb0:	40020040 	.word	0x40020040
 8006fb4:	40020058 	.word	0x40020058
 8006fb8:	40020070 	.word	0x40020070
 8006fbc:	40020088 	.word	0x40020088
 8006fc0:	400200a0 	.word	0x400200a0
 8006fc4:	400200b8 	.word	0x400200b8
 8006fc8:	40020410 	.word	0x40020410
 8006fcc:	40020428 	.word	0x40020428
 8006fd0:	40020440 	.word	0x40020440
 8006fd4:	40020458 	.word	0x40020458
 8006fd8:	40020470 	.word	0x40020470
 8006fdc:	40020488 	.word	0x40020488
 8006fe0:	400204a0 	.word	0x400204a0
 8006fe4:	400204b8 	.word	0x400204b8
 8006fe8:	58025408 	.word	0x58025408
 8006fec:	5802541c 	.word	0x5802541c
 8006ff0:	58025430 	.word	0x58025430
 8006ff4:	58025444 	.word	0x58025444
 8006ff8:	58025458 	.word	0x58025458
 8006ffc:	5802546c 	.word	0x5802546c
 8007000:	58025480 	.word	0x58025480
 8007004:	58025494 	.word	0x58025494
 8007008:	2300      	movs	r3, #0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d028      	beq.n	8007060 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800701c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007022:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007028:	f003 031f 	and.w	r3, r3, #31
 800702c:	2201      	movs	r2, #1
 800702e:	409a      	lsls	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800703c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007054:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800705e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop

0800708c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007098:	4b67      	ldr	r3, [pc, #412]	; (8007238 <HAL_DMA_IRQHandler+0x1ac>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a67      	ldr	r2, [pc, #412]	; (800723c <HAL_DMA_IRQHandler+0x1b0>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	0a9b      	lsrs	r3, r3, #10
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a5f      	ldr	r2, [pc, #380]	; (8007240 <HAL_DMA_IRQHandler+0x1b4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d04a      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a5d      	ldr	r2, [pc, #372]	; (8007244 <HAL_DMA_IRQHandler+0x1b8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d045      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a5c      	ldr	r2, [pc, #368]	; (8007248 <HAL_DMA_IRQHandler+0x1bc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d040      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a5a      	ldr	r2, [pc, #360]	; (800724c <HAL_DMA_IRQHandler+0x1c0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d03b      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a59      	ldr	r2, [pc, #356]	; (8007250 <HAL_DMA_IRQHandler+0x1c4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d036      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a57      	ldr	r2, [pc, #348]	; (8007254 <HAL_DMA_IRQHandler+0x1c8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d031      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a56      	ldr	r2, [pc, #344]	; (8007258 <HAL_DMA_IRQHandler+0x1cc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d02c      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a54      	ldr	r2, [pc, #336]	; (800725c <HAL_DMA_IRQHandler+0x1d0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d027      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a53      	ldr	r2, [pc, #332]	; (8007260 <HAL_DMA_IRQHandler+0x1d4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d022      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a51      	ldr	r2, [pc, #324]	; (8007264 <HAL_DMA_IRQHandler+0x1d8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01d      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a50      	ldr	r2, [pc, #320]	; (8007268 <HAL_DMA_IRQHandler+0x1dc>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d018      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a4e      	ldr	r2, [pc, #312]	; (800726c <HAL_DMA_IRQHandler+0x1e0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d013      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a4d      	ldr	r2, [pc, #308]	; (8007270 <HAL_DMA_IRQHandler+0x1e4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00e      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a4b      	ldr	r2, [pc, #300]	; (8007274 <HAL_DMA_IRQHandler+0x1e8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d009      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a4a      	ldr	r2, [pc, #296]	; (8007278 <HAL_DMA_IRQHandler+0x1ec>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d004      	beq.n	800715e <HAL_DMA_IRQHandler+0xd2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a48      	ldr	r2, [pc, #288]	; (800727c <HAL_DMA_IRQHandler+0x1f0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d101      	bne.n	8007162 <HAL_DMA_IRQHandler+0xd6>
 800715e:	2301      	movs	r3, #1
 8007160:	e000      	b.n	8007164 <HAL_DMA_IRQHandler+0xd8>
 8007162:	2300      	movs	r3, #0
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 842b 	beq.w	80079c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2208      	movs	r2, #8
 8007174:	409a      	lsls	r2, r3
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	4013      	ands	r3, r2
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80a2 	beq.w	80072c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a2e      	ldr	r2, [pc, #184]	; (8007240 <HAL_DMA_IRQHandler+0x1b4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d04a      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a2d      	ldr	r2, [pc, #180]	; (8007244 <HAL_DMA_IRQHandler+0x1b8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d045      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a2b      	ldr	r2, [pc, #172]	; (8007248 <HAL_DMA_IRQHandler+0x1bc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d040      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a2a      	ldr	r2, [pc, #168]	; (800724c <HAL_DMA_IRQHandler+0x1c0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d03b      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a28      	ldr	r2, [pc, #160]	; (8007250 <HAL_DMA_IRQHandler+0x1c4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d036      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a27      	ldr	r2, [pc, #156]	; (8007254 <HAL_DMA_IRQHandler+0x1c8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d031      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a25      	ldr	r2, [pc, #148]	; (8007258 <HAL_DMA_IRQHandler+0x1cc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d02c      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a24      	ldr	r2, [pc, #144]	; (800725c <HAL_DMA_IRQHandler+0x1d0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d027      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a22      	ldr	r2, [pc, #136]	; (8007260 <HAL_DMA_IRQHandler+0x1d4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d022      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a21      	ldr	r2, [pc, #132]	; (8007264 <HAL_DMA_IRQHandler+0x1d8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d01d      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1f      	ldr	r2, [pc, #124]	; (8007268 <HAL_DMA_IRQHandler+0x1dc>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d018      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a1e      	ldr	r2, [pc, #120]	; (800726c <HAL_DMA_IRQHandler+0x1e0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d013      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1c      	ldr	r2, [pc, #112]	; (8007270 <HAL_DMA_IRQHandler+0x1e4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00e      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1b      	ldr	r2, [pc, #108]	; (8007274 <HAL_DMA_IRQHandler+0x1e8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d009      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <HAL_DMA_IRQHandler+0x1ec>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d004      	beq.n	8007220 <HAL_DMA_IRQHandler+0x194>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a18      	ldr	r2, [pc, #96]	; (800727c <HAL_DMA_IRQHandler+0x1f0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d12f      	bne.n	8007280 <HAL_DMA_IRQHandler+0x1f4>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	bf14      	ite	ne
 800722e:	2301      	movne	r3, #1
 8007230:	2300      	moveq	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e02e      	b.n	8007294 <HAL_DMA_IRQHandler+0x208>
 8007236:	bf00      	nop
 8007238:	24000004 	.word	0x24000004
 800723c:	1b4e81b5 	.word	0x1b4e81b5
 8007240:	40020010 	.word	0x40020010
 8007244:	40020028 	.word	0x40020028
 8007248:	40020040 	.word	0x40020040
 800724c:	40020058 	.word	0x40020058
 8007250:	40020070 	.word	0x40020070
 8007254:	40020088 	.word	0x40020088
 8007258:	400200a0 	.word	0x400200a0
 800725c:	400200b8 	.word	0x400200b8
 8007260:	40020410 	.word	0x40020410
 8007264:	40020428 	.word	0x40020428
 8007268:	40020440 	.word	0x40020440
 800726c:	40020458 	.word	0x40020458
 8007270:	40020470 	.word	0x40020470
 8007274:	40020488 	.word	0x40020488
 8007278:	400204a0 	.word	0x400204a0
 800727c:	400204b8 	.word	0x400204b8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	bf14      	ite	ne
 800728e:	2301      	movne	r3, #1
 8007290:	2300      	moveq	r3, #0
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d015      	beq.n	80072c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0204 	bic.w	r2, r2, #4
 80072a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2208      	movs	r2, #8
 80072b2:	409a      	lsls	r2, r3
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072bc:	f043 0201 	orr.w	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	fa22 f303 	lsr.w	r3, r2, r3
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d06e      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a69      	ldr	r2, [pc, #420]	; (8007484 <HAL_DMA_IRQHandler+0x3f8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d04a      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a67      	ldr	r2, [pc, #412]	; (8007488 <HAL_DMA_IRQHandler+0x3fc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d045      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a66      	ldr	r2, [pc, #408]	; (800748c <HAL_DMA_IRQHandler+0x400>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d040      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a64      	ldr	r2, [pc, #400]	; (8007490 <HAL_DMA_IRQHandler+0x404>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d03b      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a63      	ldr	r2, [pc, #396]	; (8007494 <HAL_DMA_IRQHandler+0x408>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d036      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a61      	ldr	r2, [pc, #388]	; (8007498 <HAL_DMA_IRQHandler+0x40c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d031      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a60      	ldr	r2, [pc, #384]	; (800749c <HAL_DMA_IRQHandler+0x410>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d02c      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a5e      	ldr	r2, [pc, #376]	; (80074a0 <HAL_DMA_IRQHandler+0x414>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d027      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a5d      	ldr	r2, [pc, #372]	; (80074a4 <HAL_DMA_IRQHandler+0x418>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d022      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a5b      	ldr	r2, [pc, #364]	; (80074a8 <HAL_DMA_IRQHandler+0x41c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01d      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a5a      	ldr	r2, [pc, #360]	; (80074ac <HAL_DMA_IRQHandler+0x420>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a58      	ldr	r2, [pc, #352]	; (80074b0 <HAL_DMA_IRQHandler+0x424>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a57      	ldr	r2, [pc, #348]	; (80074b4 <HAL_DMA_IRQHandler+0x428>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a55      	ldr	r2, [pc, #340]	; (80074b8 <HAL_DMA_IRQHandler+0x42c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a54      	ldr	r2, [pc, #336]	; (80074bc <HAL_DMA_IRQHandler+0x430>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_DMA_IRQHandler+0x2ee>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a52      	ldr	r2, [pc, #328]	; (80074c0 <HAL_DMA_IRQHandler+0x434>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d10a      	bne.n	8007390 <HAL_DMA_IRQHandler+0x304>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf14      	ite	ne
 8007388:	2301      	movne	r3, #1
 800738a:	2300      	moveq	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	e003      	b.n	8007398 <HAL_DMA_IRQHandler+0x30c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2300      	movs	r3, #0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00d      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2201      	movs	r2, #1
 80073a6:	409a      	lsls	r2, r3
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b0:	f043 0202 	orr.w	r2, r3, #2
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2204      	movs	r2, #4
 80073c2:	409a      	lsls	r2, r3
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	4013      	ands	r3, r2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 808f 	beq.w	80074ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2c      	ldr	r2, [pc, #176]	; (8007484 <HAL_DMA_IRQHandler+0x3f8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d04a      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <HAL_DMA_IRQHandler+0x3fc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d045      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a29      	ldr	r2, [pc, #164]	; (800748c <HAL_DMA_IRQHandler+0x400>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d040      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a27      	ldr	r2, [pc, #156]	; (8007490 <HAL_DMA_IRQHandler+0x404>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d03b      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a26      	ldr	r2, [pc, #152]	; (8007494 <HAL_DMA_IRQHandler+0x408>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d036      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a24      	ldr	r2, [pc, #144]	; (8007498 <HAL_DMA_IRQHandler+0x40c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d031      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a23      	ldr	r2, [pc, #140]	; (800749c <HAL_DMA_IRQHandler+0x410>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d02c      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <HAL_DMA_IRQHandler+0x414>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d027      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <HAL_DMA_IRQHandler+0x418>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d022      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <HAL_DMA_IRQHandler+0x41c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01d      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1d      	ldr	r2, [pc, #116]	; (80074ac <HAL_DMA_IRQHandler+0x420>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d018      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1b      	ldr	r2, [pc, #108]	; (80074b0 <HAL_DMA_IRQHandler+0x424>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1a      	ldr	r2, [pc, #104]	; (80074b4 <HAL_DMA_IRQHandler+0x428>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00e      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a18      	ldr	r2, [pc, #96]	; (80074b8 <HAL_DMA_IRQHandler+0x42c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d009      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a17      	ldr	r2, [pc, #92]	; (80074bc <HAL_DMA_IRQHandler+0x430>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d004      	beq.n	800746e <HAL_DMA_IRQHandler+0x3e2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <HAL_DMA_IRQHandler+0x434>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d12a      	bne.n	80074c4 <HAL_DMA_IRQHandler+0x438>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	bf14      	ite	ne
 800747c:	2301      	movne	r3, #1
 800747e:	2300      	moveq	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	e023      	b.n	80074cc <HAL_DMA_IRQHandler+0x440>
 8007484:	40020010 	.word	0x40020010
 8007488:	40020028 	.word	0x40020028
 800748c:	40020040 	.word	0x40020040
 8007490:	40020058 	.word	0x40020058
 8007494:	40020070 	.word	0x40020070
 8007498:	40020088 	.word	0x40020088
 800749c:	400200a0 	.word	0x400200a0
 80074a0:	400200b8 	.word	0x400200b8
 80074a4:	40020410 	.word	0x40020410
 80074a8:	40020428 	.word	0x40020428
 80074ac:	40020440 	.word	0x40020440
 80074b0:	40020458 	.word	0x40020458
 80074b4:	40020470 	.word	0x40020470
 80074b8:	40020488 	.word	0x40020488
 80074bc:	400204a0 	.word	0x400204a0
 80074c0:	400204b8 	.word	0x400204b8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00d      	beq.n	80074ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2204      	movs	r2, #4
 80074da:	409a      	lsls	r2, r3
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e4:	f043 0204 	orr.w	r2, r3, #4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	2210      	movs	r2, #16
 80074f6:	409a      	lsls	r2, r3
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80a6 	beq.w	800764e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a85      	ldr	r2, [pc, #532]	; (800771c <HAL_DMA_IRQHandler+0x690>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d04a      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a83      	ldr	r2, [pc, #524]	; (8007720 <HAL_DMA_IRQHandler+0x694>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d045      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a82      	ldr	r2, [pc, #520]	; (8007724 <HAL_DMA_IRQHandler+0x698>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d040      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a80      	ldr	r2, [pc, #512]	; (8007728 <HAL_DMA_IRQHandler+0x69c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d03b      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a7f      	ldr	r2, [pc, #508]	; (800772c <HAL_DMA_IRQHandler+0x6a0>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d036      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a7d      	ldr	r2, [pc, #500]	; (8007730 <HAL_DMA_IRQHandler+0x6a4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d031      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a7c      	ldr	r2, [pc, #496]	; (8007734 <HAL_DMA_IRQHandler+0x6a8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d02c      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a7a      	ldr	r2, [pc, #488]	; (8007738 <HAL_DMA_IRQHandler+0x6ac>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d027      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a79      	ldr	r2, [pc, #484]	; (800773c <HAL_DMA_IRQHandler+0x6b0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d022      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a77      	ldr	r2, [pc, #476]	; (8007740 <HAL_DMA_IRQHandler+0x6b4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01d      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a76      	ldr	r2, [pc, #472]	; (8007744 <HAL_DMA_IRQHandler+0x6b8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d018      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a74      	ldr	r2, [pc, #464]	; (8007748 <HAL_DMA_IRQHandler+0x6bc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d013      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a73      	ldr	r2, [pc, #460]	; (800774c <HAL_DMA_IRQHandler+0x6c0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d00e      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a71      	ldr	r2, [pc, #452]	; (8007750 <HAL_DMA_IRQHandler+0x6c4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d009      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a70      	ldr	r2, [pc, #448]	; (8007754 <HAL_DMA_IRQHandler+0x6c8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x516>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a6e      	ldr	r2, [pc, #440]	; (8007758 <HAL_DMA_IRQHandler+0x6cc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d10a      	bne.n	80075b8 <HAL_DMA_IRQHandler+0x52c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	e009      	b.n	80075cc <HAL_DMA_IRQHandler+0x540>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d03e      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2210      	movs	r2, #16
 80075da:	409a      	lsls	r2, r3
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d018      	beq.n	8007620 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d024      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	4798      	blx	r3
 800760c:	e01f      	b.n	800764e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01b      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
 800761e:	e016      	b.n	800764e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0208 	bic.w	r2, r2, #8
 800763c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007652:	f003 031f 	and.w	r3, r3, #31
 8007656:	2220      	movs	r2, #32
 8007658:	409a      	lsls	r2, r3
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	4013      	ands	r3, r2
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 8110 	beq.w	8007884 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2c      	ldr	r2, [pc, #176]	; (800771c <HAL_DMA_IRQHandler+0x690>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d04a      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2b      	ldr	r2, [pc, #172]	; (8007720 <HAL_DMA_IRQHandler+0x694>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d045      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a29      	ldr	r2, [pc, #164]	; (8007724 <HAL_DMA_IRQHandler+0x698>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d040      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a28      	ldr	r2, [pc, #160]	; (8007728 <HAL_DMA_IRQHandler+0x69c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d03b      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a26      	ldr	r2, [pc, #152]	; (800772c <HAL_DMA_IRQHandler+0x6a0>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d036      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a25      	ldr	r2, [pc, #148]	; (8007730 <HAL_DMA_IRQHandler+0x6a4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d031      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a23      	ldr	r2, [pc, #140]	; (8007734 <HAL_DMA_IRQHandler+0x6a8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d02c      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a22      	ldr	r2, [pc, #136]	; (8007738 <HAL_DMA_IRQHandler+0x6ac>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d027      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a20      	ldr	r2, [pc, #128]	; (800773c <HAL_DMA_IRQHandler+0x6b0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d022      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <HAL_DMA_IRQHandler+0x6b4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d01d      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1d      	ldr	r2, [pc, #116]	; (8007744 <HAL_DMA_IRQHandler+0x6b8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d018      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <HAL_DMA_IRQHandler+0x6bc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a1a      	ldr	r2, [pc, #104]	; (800774c <HAL_DMA_IRQHandler+0x6c0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00e      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a19      	ldr	r2, [pc, #100]	; (8007750 <HAL_DMA_IRQHandler+0x6c4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d009      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a17      	ldr	r2, [pc, #92]	; (8007754 <HAL_DMA_IRQHandler+0x6c8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d004      	beq.n	8007704 <HAL_DMA_IRQHandler+0x678>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a16      	ldr	r2, [pc, #88]	; (8007758 <HAL_DMA_IRQHandler+0x6cc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d12b      	bne.n	800775c <HAL_DMA_IRQHandler+0x6d0>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	2b00      	cmp	r3, #0
 8007710:	bf14      	ite	ne
 8007712:	2301      	movne	r3, #1
 8007714:	2300      	moveq	r3, #0
 8007716:	b2db      	uxtb	r3, r3
 8007718:	e02a      	b.n	8007770 <HAL_DMA_IRQHandler+0x6e4>
 800771a:	bf00      	nop
 800771c:	40020010 	.word	0x40020010
 8007720:	40020028 	.word	0x40020028
 8007724:	40020040 	.word	0x40020040
 8007728:	40020058 	.word	0x40020058
 800772c:	40020070 	.word	0x40020070
 8007730:	40020088 	.word	0x40020088
 8007734:	400200a0 	.word	0x400200a0
 8007738:	400200b8 	.word	0x400200b8
 800773c:	40020410 	.word	0x40020410
 8007740:	40020428 	.word	0x40020428
 8007744:	40020440 	.word	0x40020440
 8007748:	40020458 	.word	0x40020458
 800774c:	40020470 	.word	0x40020470
 8007750:	40020488 	.word	0x40020488
 8007754:	400204a0 	.word	0x400204a0
 8007758:	400204b8 	.word	0x400204b8
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0302 	and.w	r3, r3, #2
 8007766:	2b00      	cmp	r3, #0
 8007768:	bf14      	ite	ne
 800776a:	2301      	movne	r3, #1
 800776c:	2300      	moveq	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 8087 	beq.w	8007884 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777a:	f003 031f 	and.w	r3, r3, #31
 800777e:	2220      	movs	r2, #32
 8007780:	409a      	lsls	r2, r3
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b04      	cmp	r3, #4
 8007790:	d139      	bne.n	8007806 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0216 	bic.w	r2, r2, #22
 80077a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_DMA_IRQHandler+0x736>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0208 	bic.w	r2, r2, #8
 80077d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	223f      	movs	r2, #63	; 0x3f
 80077dc:	409a      	lsls	r2, r3
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 834a 	beq.w	8007e90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
          }
          return;
 8007804:	e344      	b.n	8007e90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d018      	beq.n	8007846 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d108      	bne.n	8007834 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007826:	2b00      	cmp	r3, #0
 8007828:	d02c      	beq.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
 8007832:	e027      	b.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d023      	beq.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
 8007844:	e01e      	b.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10f      	bne.n	8007874 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0210 	bic.w	r2, r2, #16
 8007862:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8306 	beq.w	8007e9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 8088 	beq.w	80079ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2204      	movs	r2, #4
 80078a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a7a      	ldr	r2, [pc, #488]	; (8007a94 <HAL_DMA_IRQHandler+0xa08>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d04a      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a79      	ldr	r2, [pc, #484]	; (8007a98 <HAL_DMA_IRQHandler+0xa0c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d045      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a77      	ldr	r2, [pc, #476]	; (8007a9c <HAL_DMA_IRQHandler+0xa10>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d040      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a76      	ldr	r2, [pc, #472]	; (8007aa0 <HAL_DMA_IRQHandler+0xa14>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d03b      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a74      	ldr	r2, [pc, #464]	; (8007aa4 <HAL_DMA_IRQHandler+0xa18>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d036      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a73      	ldr	r2, [pc, #460]	; (8007aa8 <HAL_DMA_IRQHandler+0xa1c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d031      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a71      	ldr	r2, [pc, #452]	; (8007aac <HAL_DMA_IRQHandler+0xa20>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d02c      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a70      	ldr	r2, [pc, #448]	; (8007ab0 <HAL_DMA_IRQHandler+0xa24>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d027      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a6e      	ldr	r2, [pc, #440]	; (8007ab4 <HAL_DMA_IRQHandler+0xa28>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d022      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a6d      	ldr	r2, [pc, #436]	; (8007ab8 <HAL_DMA_IRQHandler+0xa2c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d01d      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a6b      	ldr	r2, [pc, #428]	; (8007abc <HAL_DMA_IRQHandler+0xa30>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d018      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a6a      	ldr	r2, [pc, #424]	; (8007ac0 <HAL_DMA_IRQHandler+0xa34>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d013      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a68      	ldr	r2, [pc, #416]	; (8007ac4 <HAL_DMA_IRQHandler+0xa38>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00e      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a67      	ldr	r2, [pc, #412]	; (8007ac8 <HAL_DMA_IRQHandler+0xa3c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d009      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a65      	ldr	r2, [pc, #404]	; (8007acc <HAL_DMA_IRQHandler+0xa40>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <HAL_DMA_IRQHandler+0x8b8>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a64      	ldr	r2, [pc, #400]	; (8007ad0 <HAL_DMA_IRQHandler+0xa44>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d108      	bne.n	8007956 <HAL_DMA_IRQHandler+0x8ca>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e007      	b.n	8007966 <HAL_DMA_IRQHandler+0x8da>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0201 	bic.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796e:	429a      	cmp	r2, r3
 8007970:	d307      	bcc.n	8007982 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f2      	bne.n	8007966 <HAL_DMA_IRQHandler+0x8da>
 8007980:	e000      	b.n	8007984 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007982:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2203      	movs	r2, #3
 8007996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800799a:	e003      	b.n	80079a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8272 	beq.w	8007e9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	e26c      	b.n	8007e9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a43      	ldr	r2, [pc, #268]	; (8007ad4 <HAL_DMA_IRQHandler+0xa48>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d022      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x984>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a42      	ldr	r2, [pc, #264]	; (8007ad8 <HAL_DMA_IRQHandler+0xa4c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d01d      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x984>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a40      	ldr	r2, [pc, #256]	; (8007adc <HAL_DMA_IRQHandler+0xa50>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d018      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x984>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a3f      	ldr	r2, [pc, #252]	; (8007ae0 <HAL_DMA_IRQHandler+0xa54>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d013      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x984>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a3d      	ldr	r2, [pc, #244]	; (8007ae4 <HAL_DMA_IRQHandler+0xa58>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d00e      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x984>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a3c      	ldr	r2, [pc, #240]	; (8007ae8 <HAL_DMA_IRQHandler+0xa5c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d009      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x984>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a3a      	ldr	r2, [pc, #232]	; (8007aec <HAL_DMA_IRQHandler+0xa60>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <HAL_DMA_IRQHandler+0x984>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a39      	ldr	r2, [pc, #228]	; (8007af0 <HAL_DMA_IRQHandler+0xa64>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d101      	bne.n	8007a14 <HAL_DMA_IRQHandler+0x988>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <HAL_DMA_IRQHandler+0x98a>
 8007a14:	2300      	movs	r3, #0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 823f 	beq.w	8007e9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	409a      	lsls	r2, r3
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4013      	ands	r3, r2
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 80cd 	beq.w	8007bd4 <HAL_DMA_IRQHandler+0xb48>
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 80c7 	beq.w	8007bd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2204      	movs	r2, #4
 8007a50:	409a      	lsls	r2, r3
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d049      	beq.n	8007af4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d109      	bne.n	8007a7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 8210 	beq.w	8007e94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a7c:	e20a      	b.n	8007e94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8206 	beq.w	8007e94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a90:	e200      	b.n	8007e94 <HAL_DMA_IRQHandler+0xe08>
 8007a92:	bf00      	nop
 8007a94:	40020010 	.word	0x40020010
 8007a98:	40020028 	.word	0x40020028
 8007a9c:	40020040 	.word	0x40020040
 8007aa0:	40020058 	.word	0x40020058
 8007aa4:	40020070 	.word	0x40020070
 8007aa8:	40020088 	.word	0x40020088
 8007aac:	400200a0 	.word	0x400200a0
 8007ab0:	400200b8 	.word	0x400200b8
 8007ab4:	40020410 	.word	0x40020410
 8007ab8:	40020428 	.word	0x40020428
 8007abc:	40020440 	.word	0x40020440
 8007ac0:	40020458 	.word	0x40020458
 8007ac4:	40020470 	.word	0x40020470
 8007ac8:	40020488 	.word	0x40020488
 8007acc:	400204a0 	.word	0x400204a0
 8007ad0:	400204b8 	.word	0x400204b8
 8007ad4:	58025408 	.word	0x58025408
 8007ad8:	5802541c 	.word	0x5802541c
 8007adc:	58025430 	.word	0x58025430
 8007ae0:	58025444 	.word	0x58025444
 8007ae4:	58025458 	.word	0x58025458
 8007ae8:	5802546c 	.word	0x5802546c
 8007aec:	58025480 	.word	0x58025480
 8007af0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d160      	bne.n	8007bc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a7f      	ldr	r2, [pc, #508]	; (8007d00 <HAL_DMA_IRQHandler+0xc74>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d04a      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a7d      	ldr	r2, [pc, #500]	; (8007d04 <HAL_DMA_IRQHandler+0xc78>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d045      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a7c      	ldr	r2, [pc, #496]	; (8007d08 <HAL_DMA_IRQHandler+0xc7c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d040      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a7a      	ldr	r2, [pc, #488]	; (8007d0c <HAL_DMA_IRQHandler+0xc80>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d03b      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a79      	ldr	r2, [pc, #484]	; (8007d10 <HAL_DMA_IRQHandler+0xc84>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d036      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a77      	ldr	r2, [pc, #476]	; (8007d14 <HAL_DMA_IRQHandler+0xc88>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d031      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a76      	ldr	r2, [pc, #472]	; (8007d18 <HAL_DMA_IRQHandler+0xc8c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d02c      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a74      	ldr	r2, [pc, #464]	; (8007d1c <HAL_DMA_IRQHandler+0xc90>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d027      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a73      	ldr	r2, [pc, #460]	; (8007d20 <HAL_DMA_IRQHandler+0xc94>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d022      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a71      	ldr	r2, [pc, #452]	; (8007d24 <HAL_DMA_IRQHandler+0xc98>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d01d      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a70      	ldr	r2, [pc, #448]	; (8007d28 <HAL_DMA_IRQHandler+0xc9c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d018      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a6e      	ldr	r2, [pc, #440]	; (8007d2c <HAL_DMA_IRQHandler+0xca0>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d013      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a6d      	ldr	r2, [pc, #436]	; (8007d30 <HAL_DMA_IRQHandler+0xca4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00e      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a6b      	ldr	r2, [pc, #428]	; (8007d34 <HAL_DMA_IRQHandler+0xca8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d009      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a6a      	ldr	r2, [pc, #424]	; (8007d38 <HAL_DMA_IRQHandler+0xcac>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d004      	beq.n	8007b9e <HAL_DMA_IRQHandler+0xb12>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a68      	ldr	r2, [pc, #416]	; (8007d3c <HAL_DMA_IRQHandler+0xcb0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d108      	bne.n	8007bb0 <HAL_DMA_IRQHandler+0xb24>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0208 	bic.w	r2, r2, #8
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e007      	b.n	8007bc0 <HAL_DMA_IRQHandler+0xb34>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0204 	bic.w	r2, r2, #4
 8007bbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8165 	beq.w	8007e94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bd2:	e15f      	b.n	8007e94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	2202      	movs	r2, #2
 8007bde:	409a      	lsls	r2, r3
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80c5 	beq.w	8007d74 <HAL_DMA_IRQHandler+0xce8>
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 80bf 	beq.w	8007d74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2202      	movs	r2, #2
 8007c00:	409a      	lsls	r2, r3
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d018      	beq.n	8007c42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d109      	bne.n	8007c2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 813a 	beq.w	8007e98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c2c:	e134      	b.n	8007e98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 8130 	beq.w	8007e98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c40:	e12a      	b.n	8007e98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f040 8089 	bne.w	8007d60 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a2b      	ldr	r2, [pc, #172]	; (8007d00 <HAL_DMA_IRQHandler+0xc74>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d04a      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a29      	ldr	r2, [pc, #164]	; (8007d04 <HAL_DMA_IRQHandler+0xc78>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d045      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a28      	ldr	r2, [pc, #160]	; (8007d08 <HAL_DMA_IRQHandler+0xc7c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d040      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a26      	ldr	r2, [pc, #152]	; (8007d0c <HAL_DMA_IRQHandler+0xc80>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d03b      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a25      	ldr	r2, [pc, #148]	; (8007d10 <HAL_DMA_IRQHandler+0xc84>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d036      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a23      	ldr	r2, [pc, #140]	; (8007d14 <HAL_DMA_IRQHandler+0xc88>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d031      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a22      	ldr	r2, [pc, #136]	; (8007d18 <HAL_DMA_IRQHandler+0xc8c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d02c      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a20      	ldr	r2, [pc, #128]	; (8007d1c <HAL_DMA_IRQHandler+0xc90>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d027      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1f      	ldr	r2, [pc, #124]	; (8007d20 <HAL_DMA_IRQHandler+0xc94>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d022      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <HAL_DMA_IRQHandler+0xc98>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d01d      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a1c      	ldr	r2, [pc, #112]	; (8007d28 <HAL_DMA_IRQHandler+0xc9c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d018      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1a      	ldr	r2, [pc, #104]	; (8007d2c <HAL_DMA_IRQHandler+0xca0>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a19      	ldr	r2, [pc, #100]	; (8007d30 <HAL_DMA_IRQHandler+0xca4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a17      	ldr	r2, [pc, #92]	; (8007d34 <HAL_DMA_IRQHandler+0xca8>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a16      	ldr	r2, [pc, #88]	; (8007d38 <HAL_DMA_IRQHandler+0xcac>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_DMA_IRQHandler+0xc62>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <HAL_DMA_IRQHandler+0xcb0>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d128      	bne.n	8007d40 <HAL_DMA_IRQHandler+0xcb4>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0214 	bic.w	r2, r2, #20
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	e027      	b.n	8007d50 <HAL_DMA_IRQHandler+0xcc4>
 8007d00:	40020010 	.word	0x40020010
 8007d04:	40020028 	.word	0x40020028
 8007d08:	40020040 	.word	0x40020040
 8007d0c:	40020058 	.word	0x40020058
 8007d10:	40020070 	.word	0x40020070
 8007d14:	40020088 	.word	0x40020088
 8007d18:	400200a0 	.word	0x400200a0
 8007d1c:	400200b8 	.word	0x400200b8
 8007d20:	40020410 	.word	0x40020410
 8007d24:	40020428 	.word	0x40020428
 8007d28:	40020440 	.word	0x40020440
 8007d2c:	40020458 	.word	0x40020458
 8007d30:	40020470 	.word	0x40020470
 8007d34:	40020488 	.word	0x40020488
 8007d38:	400204a0 	.word	0x400204a0
 8007d3c:	400204b8 	.word	0x400204b8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 020a 	bic.w	r2, r2, #10
 8007d4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8097 	beq.w	8007e98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d72:	e091      	b.n	8007e98 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	409a      	lsls	r2, r3
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8088 	beq.w	8007e9a <HAL_DMA_IRQHandler+0xe0e>
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f003 0308 	and.w	r3, r3, #8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 8082 	beq.w	8007e9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a41      	ldr	r2, [pc, #260]	; (8007ea0 <HAL_DMA_IRQHandler+0xe14>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d04a      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a3f      	ldr	r2, [pc, #252]	; (8007ea4 <HAL_DMA_IRQHandler+0xe18>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d045      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a3e      	ldr	r2, [pc, #248]	; (8007ea8 <HAL_DMA_IRQHandler+0xe1c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d040      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a3c      	ldr	r2, [pc, #240]	; (8007eac <HAL_DMA_IRQHandler+0xe20>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d03b      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a3b      	ldr	r2, [pc, #236]	; (8007eb0 <HAL_DMA_IRQHandler+0xe24>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d036      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a39      	ldr	r2, [pc, #228]	; (8007eb4 <HAL_DMA_IRQHandler+0xe28>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d031      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a38      	ldr	r2, [pc, #224]	; (8007eb8 <HAL_DMA_IRQHandler+0xe2c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d02c      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a36      	ldr	r2, [pc, #216]	; (8007ebc <HAL_DMA_IRQHandler+0xe30>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d027      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a35      	ldr	r2, [pc, #212]	; (8007ec0 <HAL_DMA_IRQHandler+0xe34>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d022      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a33      	ldr	r2, [pc, #204]	; (8007ec4 <HAL_DMA_IRQHandler+0xe38>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d01d      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a32      	ldr	r2, [pc, #200]	; (8007ec8 <HAL_DMA_IRQHandler+0xe3c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d018      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a30      	ldr	r2, [pc, #192]	; (8007ecc <HAL_DMA_IRQHandler+0xe40>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a2f      	ldr	r2, [pc, #188]	; (8007ed0 <HAL_DMA_IRQHandler+0xe44>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00e      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ed4 <HAL_DMA_IRQHandler+0xe48>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d009      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a2c      	ldr	r2, [pc, #176]	; (8007ed8 <HAL_DMA_IRQHandler+0xe4c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d004      	beq.n	8007e36 <HAL_DMA_IRQHandler+0xdaa>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a2a      	ldr	r2, [pc, #168]	; (8007edc <HAL_DMA_IRQHandler+0xe50>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d108      	bne.n	8007e48 <HAL_DMA_IRQHandler+0xdbc>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 021c 	bic.w	r2, r2, #28
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	e007      	b.n	8007e58 <HAL_DMA_IRQHandler+0xdcc>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 020e 	bic.w	r2, r2, #14
 8007e56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2201      	movs	r2, #1
 8007e62:	409a      	lsls	r2, r3
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	4798      	blx	r3
 8007e8e:	e004      	b.n	8007e9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e90:	bf00      	nop
 8007e92:	e002      	b.n	8007e9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e9a:	3728      	adds	r7, #40	; 0x28
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	40020010 	.word	0x40020010
 8007ea4:	40020028 	.word	0x40020028
 8007ea8:	40020040 	.word	0x40020040
 8007eac:	40020058 	.word	0x40020058
 8007eb0:	40020070 	.word	0x40020070
 8007eb4:	40020088 	.word	0x40020088
 8007eb8:	400200a0 	.word	0x400200a0
 8007ebc:	400200b8 	.word	0x400200b8
 8007ec0:	40020410 	.word	0x40020410
 8007ec4:	40020428 	.word	0x40020428
 8007ec8:	40020440 	.word	0x40020440
 8007ecc:	40020458 	.word	0x40020458
 8007ed0:	40020470 	.word	0x40020470
 8007ed4:	40020488 	.word	0x40020488
 8007ed8:	400204a0 	.word	0x400204a0
 8007edc:	400204b8 	.word	0x400204b8

08007ee0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a7f      	ldr	r2, [pc, #508]	; (80080fc <DMA_SetConfig+0x21c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d072      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a7d      	ldr	r2, [pc, #500]	; (8008100 <DMA_SetConfig+0x220>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d06d      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a7c      	ldr	r2, [pc, #496]	; (8008104 <DMA_SetConfig+0x224>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d068      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a7a      	ldr	r2, [pc, #488]	; (8008108 <DMA_SetConfig+0x228>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d063      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a79      	ldr	r2, [pc, #484]	; (800810c <DMA_SetConfig+0x22c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d05e      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a77      	ldr	r2, [pc, #476]	; (8008110 <DMA_SetConfig+0x230>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d059      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a76      	ldr	r2, [pc, #472]	; (8008114 <DMA_SetConfig+0x234>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d054      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a74      	ldr	r2, [pc, #464]	; (8008118 <DMA_SetConfig+0x238>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d04f      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a73      	ldr	r2, [pc, #460]	; (800811c <DMA_SetConfig+0x23c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d04a      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a71      	ldr	r2, [pc, #452]	; (8008120 <DMA_SetConfig+0x240>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d045      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a70      	ldr	r2, [pc, #448]	; (8008124 <DMA_SetConfig+0x244>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d040      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a6e      	ldr	r2, [pc, #440]	; (8008128 <DMA_SetConfig+0x248>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d03b      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a6d      	ldr	r2, [pc, #436]	; (800812c <DMA_SetConfig+0x24c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d036      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a6b      	ldr	r2, [pc, #428]	; (8008130 <DMA_SetConfig+0x250>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d031      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a6a      	ldr	r2, [pc, #424]	; (8008134 <DMA_SetConfig+0x254>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d02c      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a68      	ldr	r2, [pc, #416]	; (8008138 <DMA_SetConfig+0x258>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d027      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a67      	ldr	r2, [pc, #412]	; (800813c <DMA_SetConfig+0x25c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d022      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a65      	ldr	r2, [pc, #404]	; (8008140 <DMA_SetConfig+0x260>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01d      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a64      	ldr	r2, [pc, #400]	; (8008144 <DMA_SetConfig+0x264>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d018      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a62      	ldr	r2, [pc, #392]	; (8008148 <DMA_SetConfig+0x268>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d013      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a61      	ldr	r2, [pc, #388]	; (800814c <DMA_SetConfig+0x26c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00e      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a5f      	ldr	r2, [pc, #380]	; (8008150 <DMA_SetConfig+0x270>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d009      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a5e      	ldr	r2, [pc, #376]	; (8008154 <DMA_SetConfig+0x274>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d004      	beq.n	8007fea <DMA_SetConfig+0x10a>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a5c      	ldr	r2, [pc, #368]	; (8008158 <DMA_SetConfig+0x278>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d101      	bne.n	8007fee <DMA_SetConfig+0x10e>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <DMA_SetConfig+0x110>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00d      	beq.n	8008010 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ffc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d004      	beq.n	8008010 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800800e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a39      	ldr	r2, [pc, #228]	; (80080fc <DMA_SetConfig+0x21c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d04a      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a38      	ldr	r2, [pc, #224]	; (8008100 <DMA_SetConfig+0x220>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d045      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a36      	ldr	r2, [pc, #216]	; (8008104 <DMA_SetConfig+0x224>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d040      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a35      	ldr	r2, [pc, #212]	; (8008108 <DMA_SetConfig+0x228>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d03b      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a33      	ldr	r2, [pc, #204]	; (800810c <DMA_SetConfig+0x22c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d036      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a32      	ldr	r2, [pc, #200]	; (8008110 <DMA_SetConfig+0x230>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d031      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a30      	ldr	r2, [pc, #192]	; (8008114 <DMA_SetConfig+0x234>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d02c      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a2f      	ldr	r2, [pc, #188]	; (8008118 <DMA_SetConfig+0x238>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d027      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a2d      	ldr	r2, [pc, #180]	; (800811c <DMA_SetConfig+0x23c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d022      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a2c      	ldr	r2, [pc, #176]	; (8008120 <DMA_SetConfig+0x240>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d01d      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a2a      	ldr	r2, [pc, #168]	; (8008124 <DMA_SetConfig+0x244>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d018      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a29      	ldr	r2, [pc, #164]	; (8008128 <DMA_SetConfig+0x248>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d013      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a27      	ldr	r2, [pc, #156]	; (800812c <DMA_SetConfig+0x24c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00e      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a26      	ldr	r2, [pc, #152]	; (8008130 <DMA_SetConfig+0x250>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d009      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a24      	ldr	r2, [pc, #144]	; (8008134 <DMA_SetConfig+0x254>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d004      	beq.n	80080b0 <DMA_SetConfig+0x1d0>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a23      	ldr	r2, [pc, #140]	; (8008138 <DMA_SetConfig+0x258>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d101      	bne.n	80080b4 <DMA_SetConfig+0x1d4>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e000      	b.n	80080b6 <DMA_SetConfig+0x1d6>
 80080b4:	2300      	movs	r3, #0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d059      	beq.n	800816e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080be:	f003 031f 	and.w	r3, r3, #31
 80080c2:	223f      	movs	r2, #63	; 0x3f
 80080c4:	409a      	lsls	r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80080d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d138      	bne.n	800815c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080fa:	e086      	b.n	800820a <DMA_SetConfig+0x32a>
 80080fc:	40020010 	.word	0x40020010
 8008100:	40020028 	.word	0x40020028
 8008104:	40020040 	.word	0x40020040
 8008108:	40020058 	.word	0x40020058
 800810c:	40020070 	.word	0x40020070
 8008110:	40020088 	.word	0x40020088
 8008114:	400200a0 	.word	0x400200a0
 8008118:	400200b8 	.word	0x400200b8
 800811c:	40020410 	.word	0x40020410
 8008120:	40020428 	.word	0x40020428
 8008124:	40020440 	.word	0x40020440
 8008128:	40020458 	.word	0x40020458
 800812c:	40020470 	.word	0x40020470
 8008130:	40020488 	.word	0x40020488
 8008134:	400204a0 	.word	0x400204a0
 8008138:	400204b8 	.word	0x400204b8
 800813c:	58025408 	.word	0x58025408
 8008140:	5802541c 	.word	0x5802541c
 8008144:	58025430 	.word	0x58025430
 8008148:	58025444 	.word	0x58025444
 800814c:	58025458 	.word	0x58025458
 8008150:	5802546c 	.word	0x5802546c
 8008154:	58025480 	.word	0x58025480
 8008158:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	60da      	str	r2, [r3, #12]
}
 800816c:	e04d      	b.n	800820a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a29      	ldr	r2, [pc, #164]	; (8008218 <DMA_SetConfig+0x338>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d022      	beq.n	80081be <DMA_SetConfig+0x2de>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a27      	ldr	r2, [pc, #156]	; (800821c <DMA_SetConfig+0x33c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d01d      	beq.n	80081be <DMA_SetConfig+0x2de>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a26      	ldr	r2, [pc, #152]	; (8008220 <DMA_SetConfig+0x340>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d018      	beq.n	80081be <DMA_SetConfig+0x2de>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a24      	ldr	r2, [pc, #144]	; (8008224 <DMA_SetConfig+0x344>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d013      	beq.n	80081be <DMA_SetConfig+0x2de>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a23      	ldr	r2, [pc, #140]	; (8008228 <DMA_SetConfig+0x348>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00e      	beq.n	80081be <DMA_SetConfig+0x2de>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a21      	ldr	r2, [pc, #132]	; (800822c <DMA_SetConfig+0x34c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d009      	beq.n	80081be <DMA_SetConfig+0x2de>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a20      	ldr	r2, [pc, #128]	; (8008230 <DMA_SetConfig+0x350>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d004      	beq.n	80081be <DMA_SetConfig+0x2de>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <DMA_SetConfig+0x354>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d101      	bne.n	80081c2 <DMA_SetConfig+0x2e2>
 80081be:	2301      	movs	r3, #1
 80081c0:	e000      	b.n	80081c4 <DMA_SetConfig+0x2e4>
 80081c2:	2300      	movs	r3, #0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d020      	beq.n	800820a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081cc:	f003 031f 	and.w	r3, r3, #31
 80081d0:	2201      	movs	r2, #1
 80081d2:	409a      	lsls	r2, r3
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b40      	cmp	r3, #64	; 0x40
 80081e6:	d108      	bne.n	80081fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	60da      	str	r2, [r3, #12]
}
 80081f8:	e007      	b.n	800820a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	60da      	str	r2, [r3, #12]
}
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	58025408 	.word	0x58025408
 800821c:	5802541c 	.word	0x5802541c
 8008220:	58025430 	.word	0x58025430
 8008224:	58025444 	.word	0x58025444
 8008228:	58025458 	.word	0x58025458
 800822c:	5802546c 	.word	0x5802546c
 8008230:	58025480 	.word	0x58025480
 8008234:	58025494 	.word	0x58025494

08008238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a42      	ldr	r2, [pc, #264]	; (8008350 <DMA_CalcBaseAndBitshift+0x118>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d04a      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a41      	ldr	r2, [pc, #260]	; (8008354 <DMA_CalcBaseAndBitshift+0x11c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d045      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a3f      	ldr	r2, [pc, #252]	; (8008358 <DMA_CalcBaseAndBitshift+0x120>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d040      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a3e      	ldr	r2, [pc, #248]	; (800835c <DMA_CalcBaseAndBitshift+0x124>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d03b      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a3c      	ldr	r2, [pc, #240]	; (8008360 <DMA_CalcBaseAndBitshift+0x128>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d036      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a3b      	ldr	r2, [pc, #236]	; (8008364 <DMA_CalcBaseAndBitshift+0x12c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d031      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a39      	ldr	r2, [pc, #228]	; (8008368 <DMA_CalcBaseAndBitshift+0x130>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d02c      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a38      	ldr	r2, [pc, #224]	; (800836c <DMA_CalcBaseAndBitshift+0x134>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d027      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a36      	ldr	r2, [pc, #216]	; (8008370 <DMA_CalcBaseAndBitshift+0x138>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d022      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a35      	ldr	r2, [pc, #212]	; (8008374 <DMA_CalcBaseAndBitshift+0x13c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d01d      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a33      	ldr	r2, [pc, #204]	; (8008378 <DMA_CalcBaseAndBitshift+0x140>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d018      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a32      	ldr	r2, [pc, #200]	; (800837c <DMA_CalcBaseAndBitshift+0x144>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d013      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a30      	ldr	r2, [pc, #192]	; (8008380 <DMA_CalcBaseAndBitshift+0x148>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00e      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a2f      	ldr	r2, [pc, #188]	; (8008384 <DMA_CalcBaseAndBitshift+0x14c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d009      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2d      	ldr	r2, [pc, #180]	; (8008388 <DMA_CalcBaseAndBitshift+0x150>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d004      	beq.n	80082e0 <DMA_CalcBaseAndBitshift+0xa8>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a2c      	ldr	r2, [pc, #176]	; (800838c <DMA_CalcBaseAndBitshift+0x154>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d101      	bne.n	80082e4 <DMA_CalcBaseAndBitshift+0xac>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <DMA_CalcBaseAndBitshift+0xae>
 80082e4:	2300      	movs	r3, #0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d024      	beq.n	8008334 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	3b10      	subs	r3, #16
 80082f2:	4a27      	ldr	r2, [pc, #156]	; (8008390 <DMA_CalcBaseAndBitshift+0x158>)
 80082f4:	fba2 2303 	umull	r2, r3, r2, r3
 80082f8:	091b      	lsrs	r3, r3, #4
 80082fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	4a24      	ldr	r2, [pc, #144]	; (8008394 <DMA_CalcBaseAndBitshift+0x15c>)
 8008304:	5cd3      	ldrb	r3, [r2, r3]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b03      	cmp	r3, #3
 8008310:	d908      	bls.n	8008324 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	4b1f      	ldr	r3, [pc, #124]	; (8008398 <DMA_CalcBaseAndBitshift+0x160>)
 800831a:	4013      	ands	r3, r2
 800831c:	1d1a      	adds	r2, r3, #4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	659a      	str	r2, [r3, #88]	; 0x58
 8008322:	e00d      	b.n	8008340 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	461a      	mov	r2, r3
 800832a:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <DMA_CalcBaseAndBitshift+0x160>)
 800832c:	4013      	ands	r3, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	6593      	str	r3, [r2, #88]	; 0x58
 8008332:	e005      	b.n	8008340 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	40020010 	.word	0x40020010
 8008354:	40020028 	.word	0x40020028
 8008358:	40020040 	.word	0x40020040
 800835c:	40020058 	.word	0x40020058
 8008360:	40020070 	.word	0x40020070
 8008364:	40020088 	.word	0x40020088
 8008368:	400200a0 	.word	0x400200a0
 800836c:	400200b8 	.word	0x400200b8
 8008370:	40020410 	.word	0x40020410
 8008374:	40020428 	.word	0x40020428
 8008378:	40020440 	.word	0x40020440
 800837c:	40020458 	.word	0x40020458
 8008380:	40020470 	.word	0x40020470
 8008384:	40020488 	.word	0x40020488
 8008388:	400204a0 	.word	0x400204a0
 800838c:	400204b8 	.word	0x400204b8
 8008390:	aaaaaaab 	.word	0xaaaaaaab
 8008394:	0800f22c 	.word	0x0800f22c
 8008398:	fffffc00 	.word	0xfffffc00

0800839c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d120      	bne.n	80083f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d858      	bhi.n	800846a <DMA_CheckFifoParam+0xce>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <DMA_CheckFifoParam+0x24>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083d1 	.word	0x080083d1
 80083c4:	080083e3 	.word	0x080083e3
 80083c8:	080083d1 	.word	0x080083d1
 80083cc:	0800846b 	.word	0x0800846b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d048      	beq.n	800846e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083e0:	e045      	b.n	800846e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083ea:	d142      	bne.n	8008472 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083f0:	e03f      	b.n	8008472 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083fa:	d123      	bne.n	8008444 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	2b03      	cmp	r3, #3
 8008402:	d838      	bhi.n	8008476 <DMA_CheckFifoParam+0xda>
 8008404:	a201      	add	r2, pc, #4	; (adr r2, 800840c <DMA_CheckFifoParam+0x70>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	0800841d 	.word	0x0800841d
 8008410:	08008423 	.word	0x08008423
 8008414:	0800841d 	.word	0x0800841d
 8008418:	08008435 	.word	0x08008435
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]
        break;
 8008420:	e030      	b.n	8008484 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d025      	beq.n	800847a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008432:	e022      	b.n	800847a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800843c:	d11f      	bne.n	800847e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008442:	e01c      	b.n	800847e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	2b02      	cmp	r3, #2
 800844a:	d902      	bls.n	8008452 <DMA_CheckFifoParam+0xb6>
 800844c:	2b03      	cmp	r3, #3
 800844e:	d003      	beq.n	8008458 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008450:	e018      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	73fb      	strb	r3, [r7, #15]
        break;
 8008456:	e015      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00e      	beq.n	8008482 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
    break;
 8008468:	e00b      	b.n	8008482 <DMA_CheckFifoParam+0xe6>
        break;
 800846a:	bf00      	nop
 800846c:	e00a      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
        break;
 800846e:	bf00      	nop
 8008470:	e008      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
        break;
 8008472:	bf00      	nop
 8008474:	e006      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
        break;
 8008476:	bf00      	nop
 8008478:	e004      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
        break;
 800847a:	bf00      	nop
 800847c:	e002      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
        break;
 800847e:	bf00      	nop
 8008480:	e000      	b.n	8008484 <DMA_CheckFifoParam+0xe8>
    break;
 8008482:	bf00      	nop
    }
  }

  return status;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop

08008494 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a38      	ldr	r2, [pc, #224]	; (8008588 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d022      	beq.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a36      	ldr	r2, [pc, #216]	; (800858c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d01d      	beq.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a35      	ldr	r2, [pc, #212]	; (8008590 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d018      	beq.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a33      	ldr	r2, [pc, #204]	; (8008594 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a32      	ldr	r2, [pc, #200]	; (8008598 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00e      	beq.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a30      	ldr	r2, [pc, #192]	; (800859c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d009      	beq.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a2f      	ldr	r2, [pc, #188]	; (80085a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a2d      	ldr	r2, [pc, #180]	; (80085a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d101      	bne.n	80084f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80084f6:	2300      	movs	r3, #0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01a      	beq.n	8008532 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	3b08      	subs	r3, #8
 8008504:	4a28      	ldr	r2, [pc, #160]	; (80085a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008506:	fba2 2303 	umull	r2, r3, r2, r3
 800850a:	091b      	lsrs	r3, r3, #4
 800850c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4b26      	ldr	r3, [pc, #152]	; (80085ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	461a      	mov	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a24      	ldr	r2, [pc, #144]	; (80085b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008520:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f003 031f 	and.w	r3, r3, #31
 8008528:	2201      	movs	r2, #1
 800852a:	409a      	lsls	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008530:	e024      	b.n	800857c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	3b10      	subs	r3, #16
 800853a:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800853c:	fba2 2303 	umull	r2, r3, r2, r3
 8008540:	091b      	lsrs	r3, r3, #4
 8008542:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4a1c      	ldr	r2, [pc, #112]	; (80085b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d806      	bhi.n	800855a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	4a1b      	ldr	r2, [pc, #108]	; (80085bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d902      	bls.n	800855a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3308      	adds	r3, #8
 8008558:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a16      	ldr	r2, [pc, #88]	; (80085c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800856c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f003 031f 	and.w	r3, r3, #31
 8008574:	2201      	movs	r2, #1
 8008576:	409a      	lsls	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	58025408 	.word	0x58025408
 800858c:	5802541c 	.word	0x5802541c
 8008590:	58025430 	.word	0x58025430
 8008594:	58025444 	.word	0x58025444
 8008598:	58025458 	.word	0x58025458
 800859c:	5802546c 	.word	0x5802546c
 80085a0:	58025480 	.word	0x58025480
 80085a4:	58025494 	.word	0x58025494
 80085a8:	cccccccd 	.word	0xcccccccd
 80085ac:	16009600 	.word	0x16009600
 80085b0:	58025880 	.word	0x58025880
 80085b4:	aaaaaaab 	.word	0xaaaaaaab
 80085b8:	400204b8 	.word	0x400204b8
 80085bc:	4002040f 	.word	0x4002040f
 80085c0:	10008200 	.word	0x10008200
 80085c4:	40020880 	.word	0x40020880

080085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d04a      	beq.n	8008674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d847      	bhi.n	8008674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a25      	ldr	r2, [pc, #148]	; (8008680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d022      	beq.n	8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a24      	ldr	r2, [pc, #144]	; (8008684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d01d      	beq.n	8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a22      	ldr	r2, [pc, #136]	; (8008688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d018      	beq.n	8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a21      	ldr	r2, [pc, #132]	; (800868c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d013      	beq.n	8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a1f      	ldr	r2, [pc, #124]	; (8008690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00e      	beq.n	8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a1e      	ldr	r2, [pc, #120]	; (8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d009      	beq.n	8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a1c      	ldr	r2, [pc, #112]	; (8008698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d004      	beq.n	8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a1b      	ldr	r2, [pc, #108]	; (800869c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d101      	bne.n	8008638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008638:	2300      	movs	r3, #0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00a      	beq.n	8008654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a15      	ldr	r2, [pc, #84]	; (80086a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008650:	671a      	str	r2, [r3, #112]	; 0x70
 8008652:	e009      	b.n	8008668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	461a      	mov	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a11      	ldr	r2, [pc, #68]	; (80086ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008666:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3b01      	subs	r3, #1
 800866c:	2201      	movs	r2, #1
 800866e:	409a      	lsls	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	58025408 	.word	0x58025408
 8008684:	5802541c 	.word	0x5802541c
 8008688:	58025430 	.word	0x58025430
 800868c:	58025444 	.word	0x58025444
 8008690:	58025458 	.word	0x58025458
 8008694:	5802546c 	.word	0x5802546c
 8008698:	58025480 	.word	0x58025480
 800869c:	58025494 	.word	0x58025494
 80086a0:	1600963f 	.word	0x1600963f
 80086a4:	58025940 	.word	0x58025940
 80086a8:	1000823f 	.word	0x1000823f
 80086ac:	40020940 	.word	0x40020940

080086b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b089      	sub	sp, #36	; 0x24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80086be:	4b86      	ldr	r3, [pc, #536]	; (80088d8 <HAL_GPIO_Init+0x228>)
 80086c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086c2:	e18c      	b.n	80089de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	2101      	movs	r1, #1
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	fa01 f303 	lsl.w	r3, r1, r3
 80086d0:	4013      	ands	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 817e 	beq.w	80089d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d005      	beq.n	80086f4 <HAL_GPIO_Init+0x44>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d130      	bne.n	8008756 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	2203      	movs	r2, #3
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	43db      	mvns	r3, r3
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	4013      	ands	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	4313      	orrs	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800872a:	2201      	movs	r2, #1
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	43db      	mvns	r3, r3
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4013      	ands	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	091b      	lsrs	r3, r3, #4
 8008740:	f003 0201 	and.w	r2, r3, #1
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	fa02 f303 	lsl.w	r3, r2, r3
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	4313      	orrs	r3, r2
 800874e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b03      	cmp	r3, #3
 8008760:	d017      	beq.n	8008792 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	2203      	movs	r2, #3
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	43db      	mvns	r3, r3
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	4013      	ands	r3, r2
 8008778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	689a      	ldr	r2, [r3, #8]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	fa02 f303 	lsl.w	r3, r2, r3
 8008786:	69ba      	ldr	r2, [r7, #24]
 8008788:	4313      	orrs	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d123      	bne.n	80087e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	08da      	lsrs	r2, r3, #3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	3208      	adds	r2, #8
 80087a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	220f      	movs	r2, #15
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	43db      	mvns	r3, r3
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	4013      	ands	r3, r2
 80087c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f003 0307 	and.w	r3, r3, #7
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	08da      	lsrs	r2, r3, #3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3208      	adds	r2, #8
 80087e0:	69b9      	ldr	r1, [r7, #24]
 80087e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	005b      	lsls	r3, r3, #1
 80087f0:	2203      	movs	r2, #3
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	43db      	mvns	r3, r3
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	4013      	ands	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f003 0203 	and.w	r2, r3, #3
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	fa02 f303 	lsl.w	r3, r2, r3
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	4313      	orrs	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 80d8 	beq.w	80089d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008828:	4b2c      	ldr	r3, [pc, #176]	; (80088dc <HAL_GPIO_Init+0x22c>)
 800882a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800882e:	4a2b      	ldr	r2, [pc, #172]	; (80088dc <HAL_GPIO_Init+0x22c>)
 8008830:	f043 0302 	orr.w	r3, r3, #2
 8008834:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008838:	4b28      	ldr	r3, [pc, #160]	; (80088dc <HAL_GPIO_Init+0x22c>)
 800883a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	60fb      	str	r3, [r7, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008846:	4a26      	ldr	r2, [pc, #152]	; (80088e0 <HAL_GPIO_Init+0x230>)
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	3302      	adds	r3, #2
 800884e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	220f      	movs	r2, #15
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
 8008862:	43db      	mvns	r3, r3
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	4013      	ands	r3, r2
 8008868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1d      	ldr	r2, [pc, #116]	; (80088e4 <HAL_GPIO_Init+0x234>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d04a      	beq.n	8008908 <HAL_GPIO_Init+0x258>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <HAL_GPIO_Init+0x238>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d02b      	beq.n	80088d2 <HAL_GPIO_Init+0x222>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1b      	ldr	r2, [pc, #108]	; (80088ec <HAL_GPIO_Init+0x23c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d025      	beq.n	80088ce <HAL_GPIO_Init+0x21e>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1a      	ldr	r2, [pc, #104]	; (80088f0 <HAL_GPIO_Init+0x240>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01f      	beq.n	80088ca <HAL_GPIO_Init+0x21a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <HAL_GPIO_Init+0x244>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d019      	beq.n	80088c6 <HAL_GPIO_Init+0x216>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a18      	ldr	r2, [pc, #96]	; (80088f8 <HAL_GPIO_Init+0x248>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <HAL_GPIO_Init+0x212>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a17      	ldr	r2, [pc, #92]	; (80088fc <HAL_GPIO_Init+0x24c>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00d      	beq.n	80088be <HAL_GPIO_Init+0x20e>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a16      	ldr	r2, [pc, #88]	; (8008900 <HAL_GPIO_Init+0x250>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d007      	beq.n	80088ba <HAL_GPIO_Init+0x20a>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a15      	ldr	r2, [pc, #84]	; (8008904 <HAL_GPIO_Init+0x254>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d101      	bne.n	80088b6 <HAL_GPIO_Init+0x206>
 80088b2:	2309      	movs	r3, #9
 80088b4:	e029      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088b6:	230a      	movs	r3, #10
 80088b8:	e027      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088ba:	2307      	movs	r3, #7
 80088bc:	e025      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088be:	2306      	movs	r3, #6
 80088c0:	e023      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088c2:	2305      	movs	r3, #5
 80088c4:	e021      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088c6:	2304      	movs	r3, #4
 80088c8:	e01f      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088ca:	2303      	movs	r3, #3
 80088cc:	e01d      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e01b      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e019      	b.n	800890a <HAL_GPIO_Init+0x25a>
 80088d6:	bf00      	nop
 80088d8:	58000080 	.word	0x58000080
 80088dc:	58024400 	.word	0x58024400
 80088e0:	58000400 	.word	0x58000400
 80088e4:	58020000 	.word	0x58020000
 80088e8:	58020400 	.word	0x58020400
 80088ec:	58020800 	.word	0x58020800
 80088f0:	58020c00 	.word	0x58020c00
 80088f4:	58021000 	.word	0x58021000
 80088f8:	58021400 	.word	0x58021400
 80088fc:	58021800 	.word	0x58021800
 8008900:	58021c00 	.word	0x58021c00
 8008904:	58022400 	.word	0x58022400
 8008908:	2300      	movs	r3, #0
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	f002 0203 	and.w	r2, r2, #3
 8008910:	0092      	lsls	r2, r2, #2
 8008912:	4093      	lsls	r3, r2
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	4313      	orrs	r3, r2
 8008918:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800891a:	4938      	ldr	r1, [pc, #224]	; (80089fc <HAL_GPIO_Init+0x34c>)
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	089b      	lsrs	r3, r3, #2
 8008920:	3302      	adds	r3, #2
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	43db      	mvns	r3, r3
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	4013      	ands	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800894e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	43db      	mvns	r3, r3
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	4013      	ands	r3, r2
 8008966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800897c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	43db      	mvns	r3, r3
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	4013      	ands	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	43db      	mvns	r3, r3
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	4013      	ands	r3, r2
 80089bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3301      	adds	r3, #1
 80089dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f47f ae6b 	bne.w	80086c4 <HAL_GPIO_Init+0x14>
  }
}
 80089ee:	bf00      	nop
 80089f0:	bf00      	nop
 80089f2:	3724      	adds	r7, #36	; 0x24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	58000400 	.word	0x58000400

08008a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	887b      	ldrh	r3, [r7, #2]
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	e001      	b.n	8008a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	807b      	strh	r3, [r7, #2]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a40:	787b      	ldrb	r3, [r7, #1]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a46:	887a      	ldrh	r2, [r7, #2]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a4c:	e003      	b.n	8008a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a4e:	887b      	ldrh	r3, [r7, #2]
 8008a50:	041a      	lsls	r2, r3, #16
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	619a      	str	r2, [r3, #24]
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a6c:	4b19      	ldr	r3, [pc, #100]	; (8008ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f003 0304 	and.w	r3, r3, #4
 8008a74:	2b04      	cmp	r3, #4
 8008a76:	d00a      	beq.n	8008a8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a78:	4b16      	ldr	r3, [pc, #88]	; (8008ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0307 	and.w	r3, r3, #7
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d001      	beq.n	8008a8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e01f      	b.n	8008aca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e01d      	b.n	8008aca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f023 0207 	bic.w	r2, r3, #7
 8008a96:	490f      	ldr	r1, [pc, #60]	; (8008ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008a9e:	f7fc feb1 	bl	8005804 <HAL_GetTick>
 8008aa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008aa4:	e009      	b.n	8008aba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008aa6:	f7fc fead 	bl	8005804 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ab4:	d901      	bls.n	8008aba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e007      	b.n	8008aca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008aba:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <HAL_PWREx_ConfigSupply+0x70>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac6:	d1ee      	bne.n	8008aa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	58024800 	.word	0x58024800

08008ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08c      	sub	sp, #48	; 0x30
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e39d      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8087 	beq.w	8008c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008af8:	4b88      	ldr	r3, [pc, #544]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b02:	4b86      	ldr	r3, [pc, #536]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	2b10      	cmp	r3, #16
 8008b0c:	d007      	beq.n	8008b1e <HAL_RCC_OscConfig+0x46>
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	2b18      	cmp	r3, #24
 8008b12:	d110      	bne.n	8008b36 <HAL_RCC_OscConfig+0x5e>
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d10b      	bne.n	8008b36 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b1e:	4b7f      	ldr	r3, [pc, #508]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d06c      	beq.n	8008c04 <HAL_RCC_OscConfig+0x12c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d168      	bne.n	8008c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e377      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3e:	d106      	bne.n	8008b4e <HAL_RCC_OscConfig+0x76>
 8008b40:	4b76      	ldr	r3, [pc, #472]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a75      	ldr	r2, [pc, #468]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	e02e      	b.n	8008bac <HAL_RCC_OscConfig+0xd4>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10c      	bne.n	8008b70 <HAL_RCC_OscConfig+0x98>
 8008b56:	4b71      	ldr	r3, [pc, #452]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a70      	ldr	r2, [pc, #448]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	4b6e      	ldr	r3, [pc, #440]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a6d      	ldr	r2, [pc, #436]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	e01d      	b.n	8008bac <HAL_RCC_OscConfig+0xd4>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b78:	d10c      	bne.n	8008b94 <HAL_RCC_OscConfig+0xbc>
 8008b7a:	4b68      	ldr	r3, [pc, #416]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a67      	ldr	r2, [pc, #412]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	4b65      	ldr	r3, [pc, #404]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a64      	ldr	r2, [pc, #400]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	e00b      	b.n	8008bac <HAL_RCC_OscConfig+0xd4>
 8008b94:	4b61      	ldr	r3, [pc, #388]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a60      	ldr	r2, [pc, #384]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	4b5e      	ldr	r3, [pc, #376]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a5d      	ldr	r2, [pc, #372]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d013      	beq.n	8008bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb4:	f7fc fe26 	bl	8005804 <HAL_GetTick>
 8008bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bbc:	f7fc fe22 	bl	8005804 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b64      	cmp	r3, #100	; 0x64
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e32b      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bce:	4b53      	ldr	r3, [pc, #332]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f0      	beq.n	8008bbc <HAL_RCC_OscConfig+0xe4>
 8008bda:	e014      	b.n	8008c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bdc:	f7fc fe12 	bl	8005804 <HAL_GetTick>
 8008be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008be4:	f7fc fe0e 	bl	8005804 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	2b64      	cmp	r3, #100	; 0x64
 8008bf0:	d901      	bls.n	8008bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e317      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bf6:	4b49      	ldr	r3, [pc, #292]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f0      	bne.n	8008be4 <HAL_RCC_OscConfig+0x10c>
 8008c02:	e000      	b.n	8008c06 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 808c 	beq.w	8008d2c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c14:	4b41      	ldr	r3, [pc, #260]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c1e:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c22:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <HAL_RCC_OscConfig+0x162>
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	2b18      	cmp	r3, #24
 8008c2e:	d137      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x1c8>
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d132      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c3a:	4b38      	ldr	r3, [pc, #224]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <HAL_RCC_OscConfig+0x17a>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e2e9      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c52:	4b32      	ldr	r3, [pc, #200]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f023 0219 	bic.w	r2, r3, #25
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	492f      	ldr	r1, [pc, #188]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c64:	f7fc fdce 	bl	8005804 <HAL_GetTick>
 8008c68:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c6a:	e008      	b.n	8008c7e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c6c:	f7fc fdca 	bl	8005804 <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d901      	bls.n	8008c7e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e2d3      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c7e:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0304 	and.w	r3, r3, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0f0      	beq.n	8008c6c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c8a:	4b24      	ldr	r3, [pc, #144]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	061b      	lsls	r3, r3, #24
 8008c98:	4920      	ldr	r1, [pc, #128]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c9e:	e045      	b.n	8008d2c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d026      	beq.n	8008cf6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ca8:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f023 0219 	bic.w	r2, r3, #25
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	4919      	ldr	r1, [pc, #100]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cba:	f7fc fda3 	bl	8005804 <HAL_GetTick>
 8008cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cc0:	e008      	b.n	8008cd4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cc2:	f7fc fd9f 	bl	8005804 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d901      	bls.n	8008cd4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008cd0:	2303      	movs	r3, #3
 8008cd2:	e2a8      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cd4:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0f0      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ce0:	4b0e      	ldr	r3, [pc, #56]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	061b      	lsls	r3, r3, #24
 8008cee:	490b      	ldr	r1, [pc, #44]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	604b      	str	r3, [r1, #4]
 8008cf4:	e01a      	b.n	8008d2c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <HAL_RCC_OscConfig+0x244>)
 8008cfc:	f023 0301 	bic.w	r3, r3, #1
 8008d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d02:	f7fc fd7f 	bl	8005804 <HAL_GetTick>
 8008d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d08:	e00a      	b.n	8008d20 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d0a:	f7fc fd7b 	bl	8005804 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d903      	bls.n	8008d20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e284      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
 8008d1c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d20:	4b96      	ldr	r3, [pc, #600]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1ee      	bne.n	8008d0a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d06a      	beq.n	8008e0e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d38:	4b90      	ldr	r3, [pc, #576]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d40:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d42:	4b8e      	ldr	r3, [pc, #568]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d46:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d007      	beq.n	8008d5e <HAL_RCC_OscConfig+0x286>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b18      	cmp	r3, #24
 8008d52:	d11b      	bne.n	8008d8c <HAL_RCC_OscConfig+0x2b4>
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d116      	bne.n	8008d8c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d5e:	4b87      	ldr	r3, [pc, #540]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <HAL_RCC_OscConfig+0x29e>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	2b80      	cmp	r3, #128	; 0x80
 8008d70:	d001      	beq.n	8008d76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e257      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d76:	4b81      	ldr	r3, [pc, #516]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	061b      	lsls	r3, r3, #24
 8008d84:	497d      	ldr	r1, [pc, #500]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d8a:	e040      	b.n	8008e0e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d023      	beq.n	8008ddc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d94:	4b79      	ldr	r3, [pc, #484]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a78      	ldr	r2, [pc, #480]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da0:	f7fc fd30 	bl	8005804 <HAL_GetTick>
 8008da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008da6:	e008      	b.n	8008dba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008da8:	f7fc fd2c 	bl	8005804 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e235      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dba:	4b70      	ldr	r3, [pc, #448]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0f0      	beq.n	8008da8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008dc6:	4b6d      	ldr	r3, [pc, #436]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	061b      	lsls	r3, r3, #24
 8008dd4:	4969      	ldr	r1, [pc, #420]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60cb      	str	r3, [r1, #12]
 8008dda:	e018      	b.n	8008e0e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ddc:	4b67      	ldr	r3, [pc, #412]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a66      	ldr	r2, [pc, #408]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7fc fd0c 	bl	8005804 <HAL_GetTick>
 8008dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008df0:	f7fc fd08 	bl	8005804 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e211      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e02:	4b5e      	ldr	r3, [pc, #376]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1f0      	bne.n	8008df0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d036      	beq.n	8008e88 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d019      	beq.n	8008e56 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e22:	4b56      	ldr	r3, [pc, #344]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e26:	4a55      	ldr	r2, [pc, #340]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e28:	f043 0301 	orr.w	r3, r3, #1
 8008e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2e:	f7fc fce9 	bl	8005804 <HAL_GetTick>
 8008e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e34:	e008      	b.n	8008e48 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e36:	f7fc fce5 	bl	8005804 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d901      	bls.n	8008e48 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e1ee      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e48:	4b4c      	ldr	r3, [pc, #304]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d0f0      	beq.n	8008e36 <HAL_RCC_OscConfig+0x35e>
 8008e54:	e018      	b.n	8008e88 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e56:	4b49      	ldr	r3, [pc, #292]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5a:	4a48      	ldr	r2, [pc, #288]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e5c:	f023 0301 	bic.w	r3, r3, #1
 8008e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e62:	f7fc fccf 	bl	8005804 <HAL_GetTick>
 8008e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e68:	e008      	b.n	8008e7c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e6a:	f7fc fccb 	bl	8005804 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d901      	bls.n	8008e7c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e1d4      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e7c:	4b3f      	ldr	r3, [pc, #252]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1f0      	bne.n	8008e6a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d036      	beq.n	8008f02 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d019      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e9c:	4b37      	ldr	r3, [pc, #220]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a36      	ldr	r2, [pc, #216]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008ea2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ea6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ea8:	f7fc fcac 	bl	8005804 <HAL_GetTick>
 8008eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008eb0:	f7fc fca8 	bl	8005804 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e1b1      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ec2:	4b2e      	ldr	r3, [pc, #184]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0f0      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x3d8>
 8008ece:	e018      	b.n	8008f02 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ed0:	4b2a      	ldr	r3, [pc, #168]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a29      	ldr	r2, [pc, #164]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008edc:	f7fc fc92 	bl	8005804 <HAL_GetTick>
 8008ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ee2:	e008      	b.n	8008ef6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008ee4:	f7fc fc8e 	bl	8005804 <HAL_GetTick>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d901      	bls.n	8008ef6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e197      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ef6:	4b21      	ldr	r3, [pc, #132]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1f0      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8086 	beq.w	800901c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f10:	4b1b      	ldr	r3, [pc, #108]	; (8008f80 <HAL_RCC_OscConfig+0x4a8>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a1a      	ldr	r2, [pc, #104]	; (8008f80 <HAL_RCC_OscConfig+0x4a8>)
 8008f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f1c:	f7fc fc72 	bl	8005804 <HAL_GetTick>
 8008f20:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f22:	e008      	b.n	8008f36 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f24:	f7fc fc6e 	bl	8005804 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b64      	cmp	r3, #100	; 0x64
 8008f30:	d901      	bls.n	8008f36 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e177      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f36:	4b12      	ldr	r3, [pc, #72]	; (8008f80 <HAL_RCC_OscConfig+0x4a8>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0f0      	beq.n	8008f24 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d106      	bne.n	8008f58 <HAL_RCC_OscConfig+0x480>
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4e:	4a0b      	ldr	r2, [pc, #44]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008f50:	f043 0301 	orr.w	r3, r3, #1
 8008f54:	6713      	str	r3, [r2, #112]	; 0x70
 8008f56:	e032      	b.n	8008fbe <HAL_RCC_OscConfig+0x4e6>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d111      	bne.n	8008f84 <HAL_RCC_OscConfig+0x4ac>
 8008f60:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f64:	4a05      	ldr	r2, [pc, #20]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f6c:	4b03      	ldr	r3, [pc, #12]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f70:	4a02      	ldr	r2, [pc, #8]	; (8008f7c <HAL_RCC_OscConfig+0x4a4>)
 8008f72:	f023 0304 	bic.w	r3, r3, #4
 8008f76:	6713      	str	r3, [r2, #112]	; 0x70
 8008f78:	e021      	b.n	8008fbe <HAL_RCC_OscConfig+0x4e6>
 8008f7a:	bf00      	nop
 8008f7c:	58024400 	.word	0x58024400
 8008f80:	58024800 	.word	0x58024800
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	2b05      	cmp	r3, #5
 8008f8a:	d10c      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x4ce>
 8008f8c:	4b83      	ldr	r3, [pc, #524]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f90:	4a82      	ldr	r2, [pc, #520]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008f92:	f043 0304 	orr.w	r3, r3, #4
 8008f96:	6713      	str	r3, [r2, #112]	; 0x70
 8008f98:	4b80      	ldr	r3, [pc, #512]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9c:	4a7f      	ldr	r2, [pc, #508]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8008fa4:	e00b      	b.n	8008fbe <HAL_RCC_OscConfig+0x4e6>
 8008fa6:	4b7d      	ldr	r3, [pc, #500]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008faa:	4a7c      	ldr	r2, [pc, #496]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008fac:	f023 0301 	bic.w	r3, r3, #1
 8008fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8008fb2:	4b7a      	ldr	r3, [pc, #488]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb6:	4a79      	ldr	r2, [pc, #484]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008fb8:	f023 0304 	bic.w	r3, r3, #4
 8008fbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d015      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc6:	f7fc fc1d 	bl	8005804 <HAL_GetTick>
 8008fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fcc:	e00a      	b.n	8008fe4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fce:	f7fc fc19 	bl	8005804 <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d901      	bls.n	8008fe4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e120      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fe4:	4b6d      	ldr	r3, [pc, #436]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8008fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe8:	f003 0302 	and.w	r3, r3, #2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0ee      	beq.n	8008fce <HAL_RCC_OscConfig+0x4f6>
 8008ff0:	e014      	b.n	800901c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff2:	f7fc fc07 	bl	8005804 <HAL_GetTick>
 8008ff6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ff8:	e00a      	b.n	8009010 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ffa:	f7fc fc03 	bl	8005804 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	f241 3288 	movw	r2, #5000	; 0x1388
 8009008:	4293      	cmp	r3, r2
 800900a:	d901      	bls.n	8009010 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e10a      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009010:	4b62      	ldr	r3, [pc, #392]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1ee      	bne.n	8008ffa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80ff 	beq.w	8009224 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009026:	4b5d      	ldr	r3, [pc, #372]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800902e:	2b18      	cmp	r3, #24
 8009030:	f000 80ba 	beq.w	80091a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b02      	cmp	r3, #2
 800903a:	f040 8095 	bne.w	8009168 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800903e:	4b57      	ldr	r3, [pc, #348]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a56      	ldr	r2, [pc, #344]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904a:	f7fc fbdb 	bl	8005804 <HAL_GetTick>
 800904e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009050:	e008      	b.n	8009064 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009052:	f7fc fbd7 	bl	8005804 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	2b02      	cmp	r3, #2
 800905e:	d901      	bls.n	8009064 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e0e0      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009064:	4b4d      	ldr	r3, [pc, #308]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1f0      	bne.n	8009052 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009070:	4b4a      	ldr	r3, [pc, #296]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009074:	4b4a      	ldr	r3, [pc, #296]	; (80091a0 <HAL_RCC_OscConfig+0x6c8>)
 8009076:	4013      	ands	r3, r2
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009080:	0112      	lsls	r2, r2, #4
 8009082:	430a      	orrs	r2, r1
 8009084:	4945      	ldr	r1, [pc, #276]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009086:	4313      	orrs	r3, r2
 8009088:	628b      	str	r3, [r1, #40]	; 0x28
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	3b01      	subs	r3, #1
 8009090:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009098:	3b01      	subs	r3, #1
 800909a:	025b      	lsls	r3, r3, #9
 800909c:	b29b      	uxth	r3, r3
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	3b01      	subs	r3, #1
 80090a6:	041b      	lsls	r3, r3, #16
 80090a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	3b01      	subs	r3, #1
 80090b4:	061b      	lsls	r3, r3, #24
 80090b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090ba:	4938      	ldr	r1, [pc, #224]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80090c0:	4b36      	ldr	r3, [pc, #216]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	4a35      	ldr	r2, [pc, #212]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090c6:	f023 0301 	bic.w	r3, r3, #1
 80090ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090cc:	4b33      	ldr	r3, [pc, #204]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d0:	4b34      	ldr	r3, [pc, #208]	; (80091a4 <HAL_RCC_OscConfig+0x6cc>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090d8:	00d2      	lsls	r2, r2, #3
 80090da:	4930      	ldr	r1, [pc, #192]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090dc:	4313      	orrs	r3, r2
 80090de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090e0:	4b2e      	ldr	r3, [pc, #184]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	f023 020c 	bic.w	r2, r3, #12
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	492b      	ldr	r1, [pc, #172]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090f2:	4b2a      	ldr	r3, [pc, #168]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	f023 0202 	bic.w	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fe:	4927      	ldr	r1, [pc, #156]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009100:	4313      	orrs	r3, r2
 8009102:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009104:	4b25      	ldr	r3, [pc, #148]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4a24      	ldr	r2, [pc, #144]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800910a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800910e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009110:	4b22      	ldr	r3, [pc, #136]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009114:	4a21      	ldr	r2, [pc, #132]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800911a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800911c:	4b1f      	ldr	r3, [pc, #124]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	4a1e      	ldr	r2, [pc, #120]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009128:	4b1c      	ldr	r3, [pc, #112]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	4a1b      	ldr	r2, [pc, #108]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800912e:	f043 0301 	orr.w	r3, r3, #1
 8009132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009134:	4b19      	ldr	r3, [pc, #100]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a18      	ldr	r2, [pc, #96]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800913a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800913e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009140:	f7fc fb60 	bl	8005804 <HAL_GetTick>
 8009144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009148:	f7fc fb5c 	bl	8005804 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e065      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800915a:	4b10      	ldr	r3, [pc, #64]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0f0      	beq.n	8009148 <HAL_RCC_OscConfig+0x670>
 8009166:	e05d      	b.n	8009224 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009168:	4b0c      	ldr	r3, [pc, #48]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a0b      	ldr	r2, [pc, #44]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 800916e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009174:	f7fc fb46 	bl	8005804 <HAL_GetTick>
 8009178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800917a:	e008      	b.n	800918e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800917c:	f7fc fb42 	bl	8005804 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e04b      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800918e:	4b03      	ldr	r3, [pc, #12]	; (800919c <HAL_RCC_OscConfig+0x6c4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1f0      	bne.n	800917c <HAL_RCC_OscConfig+0x6a4>
 800919a:	e043      	b.n	8009224 <HAL_RCC_OscConfig+0x74c>
 800919c:	58024400 	.word	0x58024400
 80091a0:	fffffc0c 	.word	0xfffffc0c
 80091a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80091a8:	4b21      	ldr	r3, [pc, #132]	; (8009230 <HAL_RCC_OscConfig+0x758>)
 80091aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80091ae:	4b20      	ldr	r3, [pc, #128]	; (8009230 <HAL_RCC_OscConfig+0x758>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d031      	beq.n	8009220 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f003 0203 	and.w	r2, r3, #3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d12a      	bne.n	8009220 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	091b      	lsrs	r3, r3, #4
 80091ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d122      	bne.n	8009220 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d11a      	bne.n	8009220 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	0a5b      	lsrs	r3, r3, #9
 80091ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d111      	bne.n	8009220 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	0c1b      	lsrs	r3, r3, #16
 8009200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800920a:	429a      	cmp	r2, r3
 800920c:	d108      	bne.n	8009220 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	0e1b      	lsrs	r3, r3, #24
 8009212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800921c:	429a      	cmp	r2, r3
 800921e:	d001      	beq.n	8009224 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3730      	adds	r7, #48	; 0x30
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400

08009234 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e19c      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009248:	4b8a      	ldr	r3, [pc, #552]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 030f 	and.w	r3, r3, #15
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	429a      	cmp	r2, r3
 8009254:	d910      	bls.n	8009278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009256:	4b87      	ldr	r3, [pc, #540]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f023 020f 	bic.w	r2, r3, #15
 800925e:	4985      	ldr	r1, [pc, #532]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	4313      	orrs	r3, r2
 8009264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009266:	4b83      	ldr	r3, [pc, #524]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 030f 	and.w	r3, r3, #15
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d001      	beq.n	8009278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e184      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0304 	and.w	r3, r3, #4
 8009280:	2b00      	cmp	r3, #0
 8009282:	d010      	beq.n	80092a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	4b7b      	ldr	r3, [pc, #492]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009290:	429a      	cmp	r2, r3
 8009292:	d908      	bls.n	80092a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009294:	4b78      	ldr	r3, [pc, #480]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	4975      	ldr	r1, [pc, #468]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0308 	and.w	r3, r3, #8
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d010      	beq.n	80092d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	695a      	ldr	r2, [r3, #20]
 80092b6:	4b70      	ldr	r3, [pc, #448]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092be:	429a      	cmp	r2, r3
 80092c0:	d908      	bls.n	80092d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092c2:	4b6d      	ldr	r3, [pc, #436]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	496a      	ldr	r1, [pc, #424]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d010      	beq.n	8009302 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	4b64      	ldr	r3, [pc, #400]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d908      	bls.n	8009302 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80092f0:	4b61      	ldr	r3, [pc, #388]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	495e      	ldr	r1, [pc, #376]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0320 	and.w	r3, r3, #32
 800930a:	2b00      	cmp	r3, #0
 800930c:	d010      	beq.n	8009330 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	69da      	ldr	r2, [r3, #28]
 8009312:	4b59      	ldr	r3, [pc, #356]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800931a:	429a      	cmp	r2, r3
 800931c:	d908      	bls.n	8009330 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800931e:	4b56      	ldr	r3, [pc, #344]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	4953      	ldr	r1, [pc, #332]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 800932c:	4313      	orrs	r3, r2
 800932e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d010      	beq.n	800935e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	4b4d      	ldr	r3, [pc, #308]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	429a      	cmp	r2, r3
 800934a:	d908      	bls.n	800935e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800934c:	4b4a      	ldr	r3, [pc, #296]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	f023 020f 	bic.w	r2, r3, #15
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	4947      	ldr	r1, [pc, #284]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 800935a:	4313      	orrs	r3, r2
 800935c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d055      	beq.n	8009416 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800936a:	4b43      	ldr	r3, [pc, #268]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	4940      	ldr	r1, [pc, #256]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009378:	4313      	orrs	r3, r2
 800937a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d107      	bne.n	8009394 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009384:	4b3c      	ldr	r3, [pc, #240]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d121      	bne.n	80093d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e0f6      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d107      	bne.n	80093ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800939c:	4b36      	ldr	r3, [pc, #216]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d115      	bne.n	80093d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e0ea      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d107      	bne.n	80093c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093b4:	4b30      	ldr	r3, [pc, #192]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d109      	bne.n	80093d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e0de      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093c4:	4b2c      	ldr	r3, [pc, #176]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e0d6      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093d4:	4b28      	ldr	r3, [pc, #160]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	f023 0207 	bic.w	r2, r3, #7
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4925      	ldr	r1, [pc, #148]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e6:	f7fc fa0d 	bl	8005804 <HAL_GetTick>
 80093ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ec:	e00a      	b.n	8009404 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093ee:	f7fc fa09 	bl	8005804 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d901      	bls.n	8009404 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e0be      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009404:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	429a      	cmp	r2, r3
 8009414:	d1eb      	bne.n	80093ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0302 	and.w	r3, r3, #2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d010      	beq.n	8009444 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	f003 030f 	and.w	r3, r3, #15
 800942e:	429a      	cmp	r2, r3
 8009430:	d208      	bcs.n	8009444 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009432:	4b11      	ldr	r3, [pc, #68]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	f023 020f 	bic.w	r2, r3, #15
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	490e      	ldr	r1, [pc, #56]	; (8009478 <HAL_RCC_ClockConfig+0x244>)
 8009440:	4313      	orrs	r3, r2
 8009442:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009444:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 030f 	and.w	r3, r3, #15
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d214      	bcs.n	800947c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009452:	4b08      	ldr	r3, [pc, #32]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f023 020f 	bic.w	r2, r3, #15
 800945a:	4906      	ldr	r1, [pc, #24]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	4313      	orrs	r3, r2
 8009460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009462:	4b04      	ldr	r3, [pc, #16]	; (8009474 <HAL_RCC_ClockConfig+0x240>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 030f 	and.w	r3, r3, #15
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d005      	beq.n	800947c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e086      	b.n	8009582 <HAL_RCC_ClockConfig+0x34e>
 8009474:	52002000 	.word	0x52002000
 8009478:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d010      	beq.n	80094aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691a      	ldr	r2, [r3, #16]
 800948c:	4b3f      	ldr	r3, [pc, #252]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009494:	429a      	cmp	r2, r3
 8009496:	d208      	bcs.n	80094aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009498:	4b3c      	ldr	r3, [pc, #240]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	4939      	ldr	r1, [pc, #228]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d010      	beq.n	80094d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	695a      	ldr	r2, [r3, #20]
 80094ba:	4b34      	ldr	r3, [pc, #208]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d208      	bcs.n	80094d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094c6:	4b31      	ldr	r3, [pc, #196]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	492e      	ldr	r1, [pc, #184]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d010      	beq.n	8009506 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	4b28      	ldr	r3, [pc, #160]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d208      	bcs.n	8009506 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094f4:	4b25      	ldr	r3, [pc, #148]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	4922      	ldr	r1, [pc, #136]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 8009502:	4313      	orrs	r3, r2
 8009504:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d010      	beq.n	8009534 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	69da      	ldr	r2, [r3, #28]
 8009516:	4b1d      	ldr	r3, [pc, #116]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800951e:	429a      	cmp	r2, r3
 8009520:	d208      	bcs.n	8009534 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009522:	4b1a      	ldr	r3, [pc, #104]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	4917      	ldr	r1, [pc, #92]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 8009530:	4313      	orrs	r3, r2
 8009532:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009534:	f000 f834 	bl	80095a0 <HAL_RCC_GetSysClockFreq>
 8009538:	4602      	mov	r2, r0
 800953a:	4b14      	ldr	r3, [pc, #80]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	f003 030f 	and.w	r3, r3, #15
 8009544:	4912      	ldr	r1, [pc, #72]	; (8009590 <HAL_RCC_ClockConfig+0x35c>)
 8009546:	5ccb      	ldrb	r3, [r1, r3]
 8009548:	f003 031f 	and.w	r3, r3, #31
 800954c:	fa22 f303 	lsr.w	r3, r2, r3
 8009550:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009552:	4b0e      	ldr	r3, [pc, #56]	; (800958c <HAL_RCC_ClockConfig+0x358>)
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	f003 030f 	and.w	r3, r3, #15
 800955a:	4a0d      	ldr	r2, [pc, #52]	; (8009590 <HAL_RCC_ClockConfig+0x35c>)
 800955c:	5cd3      	ldrb	r3, [r2, r3]
 800955e:	f003 031f 	and.w	r3, r3, #31
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	fa22 f303 	lsr.w	r3, r2, r3
 8009568:	4a0a      	ldr	r2, [pc, #40]	; (8009594 <HAL_RCC_ClockConfig+0x360>)
 800956a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800956c:	4a0a      	ldr	r2, [pc, #40]	; (8009598 <HAL_RCC_ClockConfig+0x364>)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009572:	4b0a      	ldr	r3, [pc, #40]	; (800959c <HAL_RCC_ClockConfig+0x368>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f7fc f8fa 	bl	8005770 <HAL_InitTick>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009580:	7bfb      	ldrb	r3, [r7, #15]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	58024400 	.word	0x58024400
 8009590:	0800f21c 	.word	0x0800f21c
 8009594:	24000008 	.word	0x24000008
 8009598:	24000004 	.word	0x24000004
 800959c:	2400000c 	.word	0x2400000c

080095a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b089      	sub	sp, #36	; 0x24
 80095a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095a6:	4bb3      	ldr	r3, [pc, #716]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095ae:	2b18      	cmp	r3, #24
 80095b0:	f200 8155 	bhi.w	800985e <HAL_RCC_GetSysClockFreq+0x2be>
 80095b4:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80095b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ba:	bf00      	nop
 80095bc:	08009621 	.word	0x08009621
 80095c0:	0800985f 	.word	0x0800985f
 80095c4:	0800985f 	.word	0x0800985f
 80095c8:	0800985f 	.word	0x0800985f
 80095cc:	0800985f 	.word	0x0800985f
 80095d0:	0800985f 	.word	0x0800985f
 80095d4:	0800985f 	.word	0x0800985f
 80095d8:	0800985f 	.word	0x0800985f
 80095dc:	08009647 	.word	0x08009647
 80095e0:	0800985f 	.word	0x0800985f
 80095e4:	0800985f 	.word	0x0800985f
 80095e8:	0800985f 	.word	0x0800985f
 80095ec:	0800985f 	.word	0x0800985f
 80095f0:	0800985f 	.word	0x0800985f
 80095f4:	0800985f 	.word	0x0800985f
 80095f8:	0800985f 	.word	0x0800985f
 80095fc:	0800964d 	.word	0x0800964d
 8009600:	0800985f 	.word	0x0800985f
 8009604:	0800985f 	.word	0x0800985f
 8009608:	0800985f 	.word	0x0800985f
 800960c:	0800985f 	.word	0x0800985f
 8009610:	0800985f 	.word	0x0800985f
 8009614:	0800985f 	.word	0x0800985f
 8009618:	0800985f 	.word	0x0800985f
 800961c:	08009653 	.word	0x08009653
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009620:	4b94      	ldr	r3, [pc, #592]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d009      	beq.n	8009640 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800962c:	4b91      	ldr	r3, [pc, #580]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	08db      	lsrs	r3, r3, #3
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	4a90      	ldr	r2, [pc, #576]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009638:	fa22 f303 	lsr.w	r3, r2, r3
 800963c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800963e:	e111      	b.n	8009864 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009640:	4b8d      	ldr	r3, [pc, #564]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009642:	61bb      	str	r3, [r7, #24]
    break;
 8009644:	e10e      	b.n	8009864 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009646:	4b8d      	ldr	r3, [pc, #564]	; (800987c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009648:	61bb      	str	r3, [r7, #24]
    break;
 800964a:	e10b      	b.n	8009864 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800964c:	4b8c      	ldr	r3, [pc, #560]	; (8009880 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800964e:	61bb      	str	r3, [r7, #24]
    break;
 8009650:	e108      	b.n	8009864 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009652:	4b88      	ldr	r3, [pc, #544]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800965c:	4b85      	ldr	r3, [pc, #532]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009666:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009668:	4b82      	ldr	r3, [pc, #520]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009672:	4b80      	ldr	r3, [pc, #512]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	08db      	lsrs	r3, r3, #3
 8009678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	fb02 f303 	mul.w	r3, r2, r3
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	f000 80e1 	beq.w	8009858 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b02      	cmp	r3, #2
 800969a:	f000 8083 	beq.w	80097a4 <HAL_RCC_GetSysClockFreq+0x204>
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	f200 80a1 	bhi.w	80097e8 <HAL_RCC_GetSysClockFreq+0x248>
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <HAL_RCC_GetSysClockFreq+0x114>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d056      	beq.n	8009760 <HAL_RCC_GetSysClockFreq+0x1c0>
 80096b2:	e099      	b.n	80097e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096b4:	4b6f      	ldr	r3, [pc, #444]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d02d      	beq.n	800971c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096c0:	4b6c      	ldr	r3, [pc, #432]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	08db      	lsrs	r3, r3, #3
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	4a6b      	ldr	r2, [pc, #428]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
 80096d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	ee07 3a90 	vmov	s15, r3
 80096d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b62      	ldr	r3, [pc, #392]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80096fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009884 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800971a:	e087      	b.n	800982c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009888 <HAL_RCC_GetSysClockFreq+0x2e8>
 800972a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972e:	4b51      	ldr	r3, [pc, #324]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009742:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009884 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800975e:	e065      	b.n	800982c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800988c <HAL_RCC_GetSysClockFreq+0x2ec>
 800976e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009772:	4b40      	ldr	r3, [pc, #256]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009782:	ed97 6a02 	vldr	s12, [r7, #8]
 8009786:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009884 <HAL_RCC_GetSysClockFreq+0x2e4>
 800978a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800978e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097a2:	e043      	b.n	800982c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009890 <HAL_RCC_GetSysClockFreq+0x2f0>
 80097b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097b6:	4b2f      	ldr	r3, [pc, #188]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80097ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009884 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097e6:	e021      	b.n	800982c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	ee07 3a90 	vmov	s15, r3
 80097ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800988c <HAL_RCC_GetSysClockFreq+0x2ec>
 80097f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097fa:	4b1e      	ldr	r3, [pc, #120]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009802:	ee07 3a90 	vmov	s15, r3
 8009806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980a:	ed97 6a02 	vldr	s12, [r7, #8]
 800980e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009884 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800981a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800981e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800982a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800982c:	4b11      	ldr	r3, [pc, #68]	; (8009874 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800982e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009830:	0a5b      	lsrs	r3, r3, #9
 8009832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009836:	3301      	adds	r3, #1
 8009838:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	ee07 3a90 	vmov	s15, r3
 8009840:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009844:	edd7 6a07 	vldr	s13, [r7, #28]
 8009848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800984c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009850:	ee17 3a90 	vmov	r3, s15
 8009854:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009856:	e005      	b.n	8009864 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	61bb      	str	r3, [r7, #24]
    break;
 800985c:	e002      	b.n	8009864 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800985e:	4b07      	ldr	r3, [pc, #28]	; (800987c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009860:	61bb      	str	r3, [r7, #24]
    break;
 8009862:	bf00      	nop
  }

  return sysclockfreq;
 8009864:	69bb      	ldr	r3, [r7, #24]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3724      	adds	r7, #36	; 0x24
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	58024400 	.word	0x58024400
 8009878:	03d09000 	.word	0x03d09000
 800987c:	003d0900 	.word	0x003d0900
 8009880:	007a1200 	.word	0x007a1200
 8009884:	46000000 	.word	0x46000000
 8009888:	4c742400 	.word	0x4c742400
 800988c:	4a742400 	.word	0x4a742400
 8009890:	4af42400 	.word	0x4af42400

08009894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800989a:	f7ff fe81 	bl	80095a0 <HAL_RCC_GetSysClockFreq>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b10      	ldr	r3, [pc, #64]	; (80098e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	0a1b      	lsrs	r3, r3, #8
 80098a6:	f003 030f 	and.w	r3, r3, #15
 80098aa:	490f      	ldr	r1, [pc, #60]	; (80098e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80098ac:	5ccb      	ldrb	r3, [r1, r3]
 80098ae:	f003 031f 	and.w	r3, r3, #31
 80098b2:	fa22 f303 	lsr.w	r3, r2, r3
 80098b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098b8:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	4a09      	ldr	r2, [pc, #36]	; (80098e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80098c2:	5cd3      	ldrb	r3, [r2, r3]
 80098c4:	f003 031f 	and.w	r3, r3, #31
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	fa22 f303 	lsr.w	r3, r2, r3
 80098ce:	4a07      	ldr	r2, [pc, #28]	; (80098ec <HAL_RCC_GetHCLKFreq+0x58>)
 80098d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098d2:	4a07      	ldr	r2, [pc, #28]	; (80098f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <HAL_RCC_GetHCLKFreq+0x58>)
 80098da:	681b      	ldr	r3, [r3, #0]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	58024400 	.word	0x58024400
 80098e8:	0800f21c 	.word	0x0800f21c
 80098ec:	24000008 	.word	0x24000008
 80098f0:	24000004 	.word	0x24000004

080098f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80098f8:	f7ff ffcc 	bl	8009894 <HAL_RCC_GetHCLKFreq>
 80098fc:	4602      	mov	r2, r0
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	091b      	lsrs	r3, r3, #4
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	4904      	ldr	r1, [pc, #16]	; (800991c <HAL_RCC_GetPCLK1Freq+0x28>)
 800990a:	5ccb      	ldrb	r3, [r1, r3]
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009914:	4618      	mov	r0, r3
 8009916:	bd80      	pop	{r7, pc}
 8009918:	58024400 	.word	0x58024400
 800991c:	0800f21c 	.word	0x0800f21c

08009920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009924:	f7ff ffb6 	bl	8009894 <HAL_RCC_GetHCLKFreq>
 8009928:	4602      	mov	r2, r0
 800992a:	4b06      	ldr	r3, [pc, #24]	; (8009944 <HAL_RCC_GetPCLK2Freq+0x24>)
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	f003 0307 	and.w	r3, r3, #7
 8009934:	4904      	ldr	r1, [pc, #16]	; (8009948 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009936:	5ccb      	ldrb	r3, [r1, r3]
 8009938:	f003 031f 	and.w	r3, r3, #31
 800993c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009940:	4618      	mov	r0, r3
 8009942:	bd80      	pop	{r7, pc}
 8009944:	58024400 	.word	0x58024400
 8009948:	0800f21c 	.word	0x0800f21c

0800994c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009954:	2300      	movs	r3, #0
 8009956:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009958:	2300      	movs	r3, #0
 800995a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d03f      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800996c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009970:	d02a      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009972:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009976:	d824      	bhi.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800997c:	d018      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800997e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009982:	d81e      	bhi.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800998c:	d007      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800998e:	e018      	b.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009990:	4ba4      	ldr	r3, [pc, #656]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	4aa3      	ldr	r2, [pc, #652]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800999c:	e015      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3304      	adds	r3, #4
 80099a2:	2102      	movs	r1, #2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f001 f989 	bl	800acbc <RCCEx_PLL2_Config>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099ae:	e00c      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3324      	adds	r3, #36	; 0x24
 80099b4:	2102      	movs	r1, #2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 fa32 	bl	800ae20 <RCCEx_PLL3_Config>
 80099bc:	4603      	mov	r3, r0
 80099be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099c0:	e003      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	75fb      	strb	r3, [r7, #23]
      break;
 80099c6:	e000      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80099c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d109      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80099d0:	4b94      	ldr	r3, [pc, #592]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099dc:	4991      	ldr	r1, [pc, #580]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	650b      	str	r3, [r1, #80]	; 0x50
 80099e2:	e001      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d03d      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d826      	bhi.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80099fc:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80099fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a02:	bf00      	nop
 8009a04:	08009a19 	.word	0x08009a19
 8009a08:	08009a27 	.word	0x08009a27
 8009a0c:	08009a39 	.word	0x08009a39
 8009a10:	08009a51 	.word	0x08009a51
 8009a14:	08009a51 	.word	0x08009a51
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a18:	4b82      	ldr	r3, [pc, #520]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	4a81      	ldr	r2, [pc, #516]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a24:	e015      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f001 f945 	bl	800acbc <RCCEx_PLL2_Config>
 8009a32:	4603      	mov	r3, r0
 8009a34:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a36:	e00c      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3324      	adds	r3, #36	; 0x24
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 f9ee 	bl	800ae20 <RCCEx_PLL3_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a48:	e003      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4e:	e000      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d109      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a58:	4b72      	ldr	r3, [pc, #456]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a5c:	f023 0207 	bic.w	r2, r3, #7
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a64:	496f      	ldr	r1, [pc, #444]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	650b      	str	r3, [r1, #80]	; 0x50
 8009a6a:	e001      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d051      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a82:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009a86:	d036      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009a88:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009a8c:	d830      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a92:	d032      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a98:	d82a      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a9e:	d02e      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009aa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009aa4:	d824      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aaa:	d018      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab0:	d81e      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009aba:	d007      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009abc:	e018      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009abe:	4b59      	ldr	r3, [pc, #356]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	4a58      	ldr	r2, [pc, #352]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009aca:	e019      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 f8f2 	bl	800acbc <RCCEx_PLL2_Config>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009adc:	e010      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3324      	adds	r3, #36	; 0x24
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 f99b 	bl	800ae20 <RCCEx_PLL3_Config>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009aee:	e007      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	75fb      	strb	r3, [r7, #23]
      break;
 8009af4:	e004      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009af6:	bf00      	nop
 8009af8:	e002      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009afa:	bf00      	nop
 8009afc:	e000      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b06:	4b47      	ldr	r3, [pc, #284]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b14:	4943      	ldr	r1, [pc, #268]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	658b      	str	r3, [r1, #88]	; 0x58
 8009b1a:	e001      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d051      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b32:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009b36:	d036      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009b38:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009b3c:	d830      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b42:	d032      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b48:	d82a      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b4e:	d02e      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009b50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b54:	d824      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b5a:	d018      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b60:	d81e      	bhi.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009b66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b6a:	d007      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009b6c:	e018      	b.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b6e:	4b2d      	ldr	r3, [pc, #180]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b72:	4a2c      	ldr	r2, [pc, #176]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b7a:	e019      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 f89a 	bl	800acbc <RCCEx_PLL2_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009b8c:	e010      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3324      	adds	r3, #36	; 0x24
 8009b92:	2100      	movs	r1, #0
 8009b94:	4618      	mov	r0, r3
 8009b96:	f001 f943 	bl	800ae20 <RCCEx_PLL3_Config>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b9e:	e007      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba4:	e004      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bb6:	4b1b      	ldr	r3, [pc, #108]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009bc4:	4917      	ldr	r1, [pc, #92]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	658b      	str	r3, [r1, #88]	; 0x58
 8009bca:	e001      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d035      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be0:	2b30      	cmp	r3, #48	; 0x30
 8009be2:	d01c      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009be4:	2b30      	cmp	r3, #48	; 0x30
 8009be6:	d817      	bhi.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009be8:	2b20      	cmp	r3, #32
 8009bea:	d00c      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009bec:	2b20      	cmp	r3, #32
 8009bee:	d813      	bhi.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d019      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d10f      	bne.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf8:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfc:	4a09      	ldr	r2, [pc, #36]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009c04:	e011      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3304      	adds	r3, #4
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f001 f855 	bl	800acbc <RCCEx_PLL2_Config>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009c16:	e008      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1c:	e005      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009c1e:	bf00      	nop
 8009c20:	e003      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009c22:	bf00      	nop
 8009c24:	58024400 	.word	0x58024400
      break;
 8009c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d109      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009c30:	4ba3      	ldr	r3, [pc, #652]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c3c:	49a0      	ldr	r1, [pc, #640]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c42:	e001      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d047      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5c:	d030      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c62:	d82a      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c68:	d02c      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009c6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c6e:	d824      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c74:	d018      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7a:	d81e      	bhi.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c84:	d007      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009c86:	e018      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c88:	4b8d      	ldr	r3, [pc, #564]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8c:	4a8c      	ldr	r2, [pc, #560]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c94:	e017      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 f80d 	bl	800acbc <RCCEx_PLL2_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ca6:	e00e      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3324      	adds	r3, #36	; 0x24
 8009cac:	2100      	movs	r1, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 f8b6 	bl	800ae20 <RCCEx_PLL3_Config>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009cb8:	e005      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cbe:	e002      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009cc0:	bf00      	nop
 8009cc2:	e000      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d109      	bne.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ccc:	4b7c      	ldr	r3, [pc, #496]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd8:	4979      	ldr	r1, [pc, #484]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	650b      	str	r3, [r1, #80]	; 0x50
 8009cde:	e001      	b.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d049      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cf8:	d02e      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cfe:	d828      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d04:	d02a      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009d06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d0a:	d822      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d10:	d026      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009d12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d16:	d81c      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d1c:	d010      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d22:	d816      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01d      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d2c:	d111      	bne.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3304      	adds	r3, #4
 8009d32:	2101      	movs	r1, #1
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 ffc1 	bl	800acbc <RCCEx_PLL2_Config>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d3e:	e012      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3324      	adds	r3, #36	; 0x24
 8009d44:	2101      	movs	r1, #1
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f86a 	bl	800ae20 <RCCEx_PLL3_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d50:	e009      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	75fb      	strb	r3, [r7, #23]
      break;
 8009d56:	e006      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d58:	bf00      	nop
 8009d5a:	e004      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d5c:	bf00      	nop
 8009d5e:	e002      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d60:	bf00      	nop
 8009d62:	e000      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d109      	bne.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d6c:	4b54      	ldr	r3, [pc, #336]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d78:	4951      	ldr	r1, [pc, #324]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	650b      	str	r3, [r1, #80]	; 0x50
 8009d7e:	e001      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d04b      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d9a:	d02e      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009da0:	d828      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da6:	d02a      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dac:	d822      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009db2:	d026      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009db8:	d81c      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dbe:	d010      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dc4:	d816      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01d      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dce:	d111      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 ff70 	bl	800acbc <RCCEx_PLL2_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009de0:	e012      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3324      	adds	r3, #36	; 0x24
 8009de6:	2101      	movs	r1, #1
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 f819 	bl	800ae20 <RCCEx_PLL3_Config>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009df2:	e009      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	75fb      	strb	r3, [r7, #23]
      break;
 8009df8:	e006      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009dfa:	bf00      	nop
 8009dfc:	e004      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009dfe:	bf00      	nop
 8009e00:	e002      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e02:	bf00      	nop
 8009e04:	e000      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e0e:	4b2c      	ldr	r3, [pc, #176]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e1c:	4928      	ldr	r1, [pc, #160]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	658b      	str	r3, [r1, #88]	; 0x58
 8009e22:	e001      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d02f      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e3c:	d00e      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e42:	d814      	bhi.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d015      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e4c:	d10f      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	4a1b      	ldr	r2, [pc, #108]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e5a:	e00c      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	2101      	movs	r1, #1
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 ff2a 	bl	800acbc <RCCEx_PLL2_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e6c:	e003      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	75fb      	strb	r3, [r7, #23]
      break;
 8009e72:	e000      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d109      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e7c:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e88:	490d      	ldr	r1, [pc, #52]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8009e8e:	e001      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d034      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d81d      	bhi.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009ea8:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eae:	bf00      	nop
 8009eb0:	08009eeb 	.word	0x08009eeb
 8009eb4:	08009ec5 	.word	0x08009ec5
 8009eb8:	08009ed3 	.word	0x08009ed3
 8009ebc:	08009eeb 	.word	0x08009eeb
 8009ec0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec4:	4bb1      	ldr	r3, [pc, #708]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec8:	4ab0      	ldr	r2, [pc, #704]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ed0:	e00c      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	2102      	movs	r1, #2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 feef 	bl	800acbc <RCCEx_PLL2_Config>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ee2:	e003      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee8:	e000      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ef2:	4ba6      	ldr	r3, [pc, #664]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ef6:	f023 0203 	bic.w	r2, r3, #3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efe:	49a3      	ldr	r1, [pc, #652]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f00:	4313      	orrs	r3, r2
 8009f02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f04:	e001      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 8086 	beq.w	800a024 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f18:	4b9d      	ldr	r3, [pc, #628]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a9c      	ldr	r2, [pc, #624]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f24:	f7fb fc6e 	bl	8005804 <HAL_GetTick>
 8009f28:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f2a:	e009      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f2c:	f7fb fc6a 	bl	8005804 <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b64      	cmp	r3, #100	; 0x64
 8009f38:	d902      	bls.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	75fb      	strb	r3, [r7, #23]
        break;
 8009f3e:	e005      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f40:	4b93      	ldr	r3, [pc, #588]	; (800a190 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d0ef      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d166      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f52:	4b8e      	ldr	r3, [pc, #568]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f5c:	4053      	eors	r3, r2
 8009f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d013      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f66:	4b89      	ldr	r3, [pc, #548]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f70:	4b86      	ldr	r3, [pc, #536]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f74:	4a85      	ldr	r2, [pc, #532]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f7a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f7c:	4b83      	ldr	r3, [pc, #524]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f80:	4a82      	ldr	r2, [pc, #520]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f88:	4a80      	ldr	r2, [pc, #512]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f98:	d115      	bne.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9a:	f7fb fc33 	bl	8005804 <HAL_GetTick>
 8009f9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fa0:	e00b      	b.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fa2:	f7fb fc2f 	bl	8005804 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d902      	bls.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	75fb      	strb	r3, [r7, #23]
            break;
 8009fb8:	e005      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fba:	4b74      	ldr	r3, [pc, #464]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0ed      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d126      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fda:	d10d      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009fdc:	4b6b      	ldr	r3, [pc, #428]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009fea:	0919      	lsrs	r1, r3, #4
 8009fec:	4b69      	ldr	r3, [pc, #420]	; (800a194 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009fee:	400b      	ands	r3, r1
 8009ff0:	4966      	ldr	r1, [pc, #408]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	610b      	str	r3, [r1, #16]
 8009ff6:	e005      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009ff8:	4b64      	ldr	r3, [pc, #400]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	4a63      	ldr	r2, [pc, #396]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ffe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a002:	6113      	str	r3, [r2, #16]
 800a004:	4b61      	ldr	r3, [pc, #388]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a00e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a012:	495e      	ldr	r1, [pc, #376]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a014:	4313      	orrs	r3, r2
 800a016:	670b      	str	r3, [r1, #112]	; 0x70
 800a018:	e004      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	75bb      	strb	r3, [r7, #22]
 800a01e:	e001      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d07e      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a034:	2b28      	cmp	r3, #40	; 0x28
 800a036:	d867      	bhi.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a038:	a201      	add	r2, pc, #4	; (adr r2, 800a040 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03e:	bf00      	nop
 800a040:	0800a10f 	.word	0x0800a10f
 800a044:	0800a109 	.word	0x0800a109
 800a048:	0800a109 	.word	0x0800a109
 800a04c:	0800a109 	.word	0x0800a109
 800a050:	0800a109 	.word	0x0800a109
 800a054:	0800a109 	.word	0x0800a109
 800a058:	0800a109 	.word	0x0800a109
 800a05c:	0800a109 	.word	0x0800a109
 800a060:	0800a0e5 	.word	0x0800a0e5
 800a064:	0800a109 	.word	0x0800a109
 800a068:	0800a109 	.word	0x0800a109
 800a06c:	0800a109 	.word	0x0800a109
 800a070:	0800a109 	.word	0x0800a109
 800a074:	0800a109 	.word	0x0800a109
 800a078:	0800a109 	.word	0x0800a109
 800a07c:	0800a109 	.word	0x0800a109
 800a080:	0800a0f7 	.word	0x0800a0f7
 800a084:	0800a109 	.word	0x0800a109
 800a088:	0800a109 	.word	0x0800a109
 800a08c:	0800a109 	.word	0x0800a109
 800a090:	0800a109 	.word	0x0800a109
 800a094:	0800a109 	.word	0x0800a109
 800a098:	0800a109 	.word	0x0800a109
 800a09c:	0800a109 	.word	0x0800a109
 800a0a0:	0800a10f 	.word	0x0800a10f
 800a0a4:	0800a109 	.word	0x0800a109
 800a0a8:	0800a109 	.word	0x0800a109
 800a0ac:	0800a109 	.word	0x0800a109
 800a0b0:	0800a109 	.word	0x0800a109
 800a0b4:	0800a109 	.word	0x0800a109
 800a0b8:	0800a109 	.word	0x0800a109
 800a0bc:	0800a109 	.word	0x0800a109
 800a0c0:	0800a10f 	.word	0x0800a10f
 800a0c4:	0800a109 	.word	0x0800a109
 800a0c8:	0800a109 	.word	0x0800a109
 800a0cc:	0800a109 	.word	0x0800a109
 800a0d0:	0800a109 	.word	0x0800a109
 800a0d4:	0800a109 	.word	0x0800a109
 800a0d8:	0800a109 	.word	0x0800a109
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	0800a10f 	.word	0x0800a10f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fde6 	bl	800acbc <RCCEx_PLL2_Config>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a0f4:	e00c      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3324      	adds	r3, #36	; 0x24
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 fe8f 	bl	800ae20 <RCCEx_PLL3_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a106:	e003      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	75fb      	strb	r3, [r7, #23]
      break;
 800a10c:	e000      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a10e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d109      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a116:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a122:	491a      	ldr	r1, [pc, #104]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a124:	4313      	orrs	r3, r2
 800a126:	654b      	str	r3, [r1, #84]	; 0x54
 800a128:	e001      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b00      	cmp	r3, #0
 800a138:	d03e      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13e:	2b05      	cmp	r3, #5
 800a140:	d820      	bhi.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a142:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a199 	.word	0x0800a199
 800a14c:	0800a161 	.word	0x0800a161
 800a150:	0800a173 	.word	0x0800a173
 800a154:	0800a199 	.word	0x0800a199
 800a158:	0800a199 	.word	0x0800a199
 800a15c:	0800a199 	.word	0x0800a199
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	2101      	movs	r1, #1
 800a166:	4618      	mov	r0, r3
 800a168:	f000 fda8 	bl	800acbc <RCCEx_PLL2_Config>
 800a16c:	4603      	mov	r3, r0
 800a16e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a170:	e013      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3324      	adds	r3, #36	; 0x24
 800a176:	2101      	movs	r1, #1
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 fe51 	bl	800ae20 <RCCEx_PLL3_Config>
 800a17e:	4603      	mov	r3, r0
 800a180:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a182:	e00a      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	75fb      	strb	r3, [r7, #23]
      break;
 800a188:	e007      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a18a:	bf00      	nop
 800a18c:	58024400 	.word	0x58024400
 800a190:	58024800 	.word	0x58024800
 800a194:	00ffffcf 	.word	0x00ffffcf
      break;
 800a198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d109      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1a0:	4b9f      	ldr	r3, [pc, #636]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a4:	f023 0207 	bic.w	r2, r3, #7
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ac:	499c      	ldr	r1, [pc, #624]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	654b      	str	r3, [r1, #84]	; 0x54
 800a1b2:	e001      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d039      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ca:	2b05      	cmp	r3, #5
 800a1cc:	d820      	bhi.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a1ce:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a217 	.word	0x0800a217
 800a1d8:	0800a1ed 	.word	0x0800a1ed
 800a1dc:	0800a1ff 	.word	0x0800a1ff
 800a1e0:	0800a217 	.word	0x0800a217
 800a1e4:	0800a217 	.word	0x0800a217
 800a1e8:	0800a217 	.word	0x0800a217
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fd62 	bl	800acbc <RCCEx_PLL2_Config>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a1fc:	e00c      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	3324      	adds	r3, #36	; 0x24
 800a202:	2101      	movs	r1, #1
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fe0b 	bl	800ae20 <RCCEx_PLL3_Config>
 800a20a:	4603      	mov	r3, r0
 800a20c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a20e:	e003      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	75fb      	strb	r3, [r7, #23]
      break;
 800a214:	e000      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a216:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10a      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a21e:	4b80      	ldr	r3, [pc, #512]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a222:	f023 0207 	bic.w	r2, r3, #7
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a22c:	497c      	ldr	r1, [pc, #496]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	658b      	str	r3, [r1, #88]	; 0x58
 800a232:	e001      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b00      	cmp	r3, #0
 800a242:	d04b      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a24e:	d02e      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a254:	d828      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25a:	d02a      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a260:	d822      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a262:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a266:	d026      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a268:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a26c:	d81c      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a272:	d010      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a278:	d816      	bhi.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d01d      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a27e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a282:	d111      	bne.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3304      	adds	r3, #4
 800a288:	2100      	movs	r1, #0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f000 fd16 	bl	800acbc <RCCEx_PLL2_Config>
 800a290:	4603      	mov	r3, r0
 800a292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a294:	e012      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3324      	adds	r3, #36	; 0x24
 800a29a:	2102      	movs	r1, #2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fdbf 	bl	800ae20 <RCCEx_PLL3_Config>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a2a6:	e009      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ac:	e006      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2ae:	bf00      	nop
 800a2b0:	e004      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2b2:	bf00      	nop
 800a2b4:	e002      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2b6:	bf00      	nop
 800a2b8:	e000      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a2ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2c2:	4b57      	ldr	r3, [pc, #348]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d0:	4953      	ldr	r1, [pc, #332]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	654b      	str	r3, [r1, #84]	; 0x54
 800a2d6:	e001      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d04b      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2f2:	d02e      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a2f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2f8:	d828      	bhi.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fe:	d02a      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a304:	d822      	bhi.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a306:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a30a:	d026      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a30c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a310:	d81c      	bhi.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a316:	d010      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31c:	d816      	bhi.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d01d      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a326:	d111      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	3304      	adds	r3, #4
 800a32c:	2100      	movs	r1, #0
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fcc4 	bl	800acbc <RCCEx_PLL2_Config>
 800a334:	4603      	mov	r3, r0
 800a336:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a338:	e012      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3324      	adds	r3, #36	; 0x24
 800a33e:	2102      	movs	r1, #2
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fd6d 	bl	800ae20 <RCCEx_PLL3_Config>
 800a346:	4603      	mov	r3, r0
 800a348:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a34a:	e009      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	75fb      	strb	r3, [r7, #23]
      break;
 800a350:	e006      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a352:	bf00      	nop
 800a354:	e004      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a356:	bf00      	nop
 800a358:	e002      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a35a:	bf00      	nop
 800a35c:	e000      	b.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a35e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a366:	4b2e      	ldr	r3, [pc, #184]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a36a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a374:	492a      	ldr	r1, [pc, #168]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a376:	4313      	orrs	r3, r2
 800a378:	658b      	str	r3, [r1, #88]	; 0x58
 800a37a:	e001      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37c:	7dfb      	ldrb	r3, [r7, #23]
 800a37e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d04d      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a392:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a396:	d02e      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a398:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a39c:	d828      	bhi.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a39e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3a2:	d02a      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a3a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3a8:	d822      	bhi.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3ae:	d026      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a3b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3b4:	d81c      	bhi.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3ba:	d010      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a3bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c0:	d816      	bhi.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01d      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a3c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ca:	d111      	bne.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fc72 	bl	800acbc <RCCEx_PLL2_Config>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a3dc:	e012      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3324      	adds	r3, #36	; 0x24
 800a3e2:	2102      	movs	r1, #2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fd1b 	bl	800ae20 <RCCEx_PLL3_Config>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a3ee:	e009      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3f4:	e006      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3f6:	bf00      	nop
 800a3f8:	e004      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3fa:	bf00      	nop
 800a3fc:	e002      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a3fe:	bf00      	nop
 800a400:	e000      	b.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a402:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10c      	bne.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a40c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a40e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a418:	4901      	ldr	r1, [pc, #4]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a41a:	4313      	orrs	r3, r2
 800a41c:	658b      	str	r3, [r1, #88]	; 0x58
 800a41e:	e003      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0308 	and.w	r3, r3, #8
 800a430:	2b00      	cmp	r3, #0
 800a432:	d018      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a43c:	d10a      	bne.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3324      	adds	r3, #36	; 0x24
 800a442:	2102      	movs	r1, #2
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fceb 	bl	800ae20 <RCCEx_PLL3_Config>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a454:	4b8a      	ldr	r3, [pc, #552]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a460:	4987      	ldr	r1, [pc, #540]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a462:	4313      	orrs	r3, r2
 800a464:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0310 	and.w	r3, r3, #16
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d01a      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a47c:	d10a      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3324      	adds	r3, #36	; 0x24
 800a482:	2102      	movs	r1, #2
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fccb 	bl	800ae20 <RCCEx_PLL3_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a494:	4b7a      	ldr	r3, [pc, #488]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a2:	4977      	ldr	r1, [pc, #476]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d034      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4be:	d01d      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a4c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4c4:	d817      	bhi.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ce:	d009      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4d0:	e011      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fbef 	bl	800acbc <RCCEx_PLL2_Config>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a4e2:	e00c      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3324      	adds	r3, #36	; 0x24
 800a4e8:	2102      	movs	r1, #2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fc98 	bl	800ae20 <RCCEx_PLL3_Config>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a4f4:	e003      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4fa:	e000      	b.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a4fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a504:	4b5e      	ldr	r3, [pc, #376]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a512:	495b      	ldr	r1, [pc, #364]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a514:	4313      	orrs	r3, r2
 800a516:	658b      	str	r3, [r1, #88]	; 0x58
 800a518:	e001      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d033      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a534:	d01c      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a53a:	d816      	bhi.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a53c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a540:	d003      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a546:	d007      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a548:	e00f      	b.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a54a:	4b4d      	ldr	r3, [pc, #308]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54e:	4a4c      	ldr	r2, [pc, #304]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a556:	e00c      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3324      	adds	r3, #36	; 0x24
 800a55c:	2101      	movs	r1, #1
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fc5e 	bl	800ae20 <RCCEx_PLL3_Config>
 800a564:	4603      	mov	r3, r0
 800a566:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a568:	e003      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	75fb      	strb	r3, [r7, #23]
      break;
 800a56e:	e000      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a570:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a572:	7dfb      	ldrb	r3, [r7, #23]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10a      	bne.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a578:	4b41      	ldr	r3, [pc, #260]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a586:	493e      	ldr	r1, [pc, #248]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	654b      	str	r3, [r1, #84]	; 0x54
 800a58c:	e001      	b.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d029      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a5a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5aa:	d007      	beq.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a5ac:	e00f      	b.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5ae:	4b34      	ldr	r3, [pc, #208]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b2:	4a33      	ldr	r2, [pc, #204]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5ba:	e00b      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	2102      	movs	r1, #2
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 fb7a 	bl	800acbc <RCCEx_PLL2_Config>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5cc:	e002      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d109      	bne.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5da:	4b29      	ldr	r3, [pc, #164]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e6:	4926      	ldr	r1, [pc, #152]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a5ec:	e001      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	3324      	adds	r3, #36	; 0x24
 800a602:	2102      	movs	r1, #2
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fc0b 	bl	800ae20 <RCCEx_PLL3_Config>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d033      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a628:	d017      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a62a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a62e:	d811      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a634:	d013      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a63a:	d80b      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d010      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a644:	d106      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a646:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	4a0d      	ldr	r2, [pc, #52]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a64c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a652:	e007      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	75fb      	strb	r3, [r7, #23]
      break;
 800a658:	e004      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a65a:	bf00      	nop
 800a65c:	e002      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a65e:	bf00      	nop
 800a660:	e000      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a662:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a664:	7dfb      	ldrb	r3, [r7, #23]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10c      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a676:	4902      	ldr	r1, [pc, #8]	; (800a680 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	654b      	str	r3, [r1, #84]	; 0x54
 800a67c:	e004      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a67e:	bf00      	nop
 800a680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d008      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a694:	4b29      	ldr	r3, [pc, #164]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a698:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a0:	4926      	ldr	r1, [pc, #152]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d008      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6b2:	4b22      	ldr	r3, [pc, #136]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6be:	491f      	ldr	r1, [pc, #124]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00d      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6d0:	4b1a      	ldr	r3, [pc, #104]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	4a19      	ldr	r2, [pc, #100]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6da:	6113      	str	r3, [r2, #16]
 800a6dc:	4b17      	ldr	r3, [pc, #92]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6de:	691a      	ldr	r2, [r3, #16]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6e6:	4915      	ldr	r1, [pc, #84]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da08      	bge.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a6f4:	4b11      	ldr	r3, [pc, #68]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a6f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a700:	490e      	ldr	r1, [pc, #56]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a702:	4313      	orrs	r3, r2
 800a704:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d009      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a712:	4b0a      	ldr	r3, [pc, #40]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a720:	4906      	ldr	r1, [pc, #24]	; (800a73c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a722:	4313      	orrs	r3, r2
 800a724:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a726:	7dbb      	ldrb	r3, [r7, #22]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	e000      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	58024400 	.word	0x58024400

0800a740 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a744:	f7ff f8a6 	bl	8009894 <HAL_RCC_GetHCLKFreq>
 800a748:	4602      	mov	r2, r0
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	091b      	lsrs	r3, r3, #4
 800a750:	f003 0307 	and.w	r3, r3, #7
 800a754:	4904      	ldr	r1, [pc, #16]	; (800a768 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a756:	5ccb      	ldrb	r3, [r1, r3]
 800a758:	f003 031f 	and.w	r3, r3, #31
 800a75c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a760:	4618      	mov	r0, r3
 800a762:	bd80      	pop	{r7, pc}
 800a764:	58024400 	.word	0x58024400
 800a768:	0800f21c 	.word	0x0800f21c

0800a76c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b089      	sub	sp, #36	; 0x24
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a774:	4ba1      	ldr	r3, [pc, #644]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a778:	f003 0303 	and.w	r3, r3, #3
 800a77c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a77e:	4b9f      	ldr	r3, [pc, #636]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	0b1b      	lsrs	r3, r3, #12
 800a784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a788:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a78a:	4b9c      	ldr	r3, [pc, #624]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	091b      	lsrs	r3, r3, #4
 800a790:	f003 0301 	and.w	r3, r3, #1
 800a794:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a796:	4b99      	ldr	r3, [pc, #612]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79a:	08db      	lsrs	r3, r3, #3
 800a79c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	fb02 f303 	mul.w	r3, r2, r3
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8111 	beq.w	800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	f000 8083 	beq.w	800a8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	f200 80a1 	bhi.w	800a90c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d056      	beq.n	800a884 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a7d6:	e099      	b.n	800a90c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7d8:	4b88      	ldr	r3, [pc, #544]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0320 	and.w	r3, r3, #32
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d02d      	beq.n	800a840 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7e4:	4b85      	ldr	r3, [pc, #532]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	08db      	lsrs	r3, r3, #3
 800a7ea:	f003 0303 	and.w	r3, r3, #3
 800a7ee:	4a84      	ldr	r2, [pc, #528]	; (800aa00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a7f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	ee07 3a90 	vmov	s15, r3
 800a7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80e:	4b7b      	ldr	r3, [pc, #492]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a816:	ee07 3a90 	vmov	s15, r3
 800a81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a822:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a83e:	e087      	b.n	800a950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	ee07 3a90 	vmov	s15, r3
 800a846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aa08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a852:	4b6a      	ldr	r3, [pc, #424]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85a:	ee07 3a90 	vmov	s15, r3
 800a85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a862:	ed97 6a03 	vldr	s12, [r7, #12]
 800a866:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a87e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a882:	e065      	b.n	800a950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	ee07 3a90 	vmov	s15, r3
 800a88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a88e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a896:	4b59      	ldr	r3, [pc, #356]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8c6:	e043      	b.n	800a950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8da:	4b48      	ldr	r3, [pc, #288]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a90a:	e021      	b.n	800a950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a916:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aa0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91e:	4b37      	ldr	r3, [pc, #220]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a932:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aa04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a94a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a94e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a950:	4b2a      	ldr	r3, [pc, #168]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a954:	0a5b      	lsrs	r3, r3, #9
 800a956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a96a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a96e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a976:	ee17 2a90 	vmov	r2, s15
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a97e:	4b1f      	ldr	r3, [pc, #124]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	0c1b      	lsrs	r3, r3, #16
 800a984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a988:	ee07 3a90 	vmov	s15, r3
 800a98c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a994:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a998:	edd7 6a07 	vldr	s13, [r7, #28]
 800a99c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9a4:	ee17 2a90 	vmov	r2, s15
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a9ac:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b0:	0e1b      	lsrs	r3, r3, #24
 800a9b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a9c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9d2:	ee17 2a90 	vmov	r2, s15
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a9da:	e008      	b.n	800a9ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	609a      	str	r2, [r3, #8]
}
 800a9ee:	bf00      	nop
 800a9f0:	3724      	adds	r7, #36	; 0x24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	58024400 	.word	0x58024400
 800aa00:	03d09000 	.word	0x03d09000
 800aa04:	46000000 	.word	0x46000000
 800aa08:	4c742400 	.word	0x4c742400
 800aa0c:	4a742400 	.word	0x4a742400
 800aa10:	4af42400 	.word	0x4af42400

0800aa14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b089      	sub	sp, #36	; 0x24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa1c:	4ba1      	ldr	r3, [pc, #644]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800aa26:	4b9f      	ldr	r3, [pc, #636]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2a:	0d1b      	lsrs	r3, r3, #20
 800aa2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa32:	4b9c      	ldr	r3, [pc, #624]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa36:	0a1b      	lsrs	r3, r3, #8
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aa3e:	4b99      	ldr	r3, [pc, #612]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa42:	08db      	lsrs	r3, r3, #3
 800aa44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	fb02 f303 	mul.w	r3, r2, r3
 800aa4e:	ee07 3a90 	vmov	s15, r3
 800aa52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 8111 	beq.w	800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	f000 8083 	beq.w	800ab70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	f200 80a1 	bhi.w	800abb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d056      	beq.n	800ab2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa7e:	e099      	b.n	800abb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa80:	4b88      	ldr	r3, [pc, #544]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0320 	and.w	r3, r3, #32
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d02d      	beq.n	800aae8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa8c:	4b85      	ldr	r3, [pc, #532]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	08db      	lsrs	r3, r3, #3
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	4a84      	ldr	r2, [pc, #528]	; (800aca8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa98:	fa22 f303 	lsr.w	r3, r2, r3
 800aa9c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	ee07 3a90 	vmov	s15, r3
 800aaa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab6:	4b7b      	ldr	r3, [pc, #492]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800acac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aae6:	e087      	b.n	800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafa:	4b6a      	ldr	r3, [pc, #424]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800acac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2a:	e065      	b.n	800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	ee07 3a90 	vmov	s15, r3
 800ab32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3e:	4b59      	ldr	r3, [pc, #356]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab52:	eddf 5a56 	vldr	s11, [pc, #344]	; 800acac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab6e:	e043      	b.n	800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab82:	4b48      	ldr	r3, [pc, #288]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8a:	ee07 3a90 	vmov	s15, r3
 800ab8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab96:	eddf 5a45 	vldr	s11, [pc, #276]	; 800acac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abb2:	e021      	b.n	800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	ee07 3a90 	vmov	s15, r3
 800abba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800abc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abc6:	4b37      	ldr	r3, [pc, #220]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abda:	eddf 5a34 	vldr	s11, [pc, #208]	; 800acac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800abf8:	4b2a      	ldr	r3, [pc, #168]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	0a5b      	lsrs	r3, r3, #9
 800abfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac02:	ee07 3a90 	vmov	s15, r3
 800ac06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1e:	ee17 2a90 	vmov	r2, s15
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ac26:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	0c1b      	lsrs	r3, r3, #16
 800ac2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac30:	ee07 3a90 	vmov	s15, r3
 800ac34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac4c:	ee17 2a90 	vmov	r2, s15
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ac54:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac58:	0e1b      	lsrs	r3, r3, #24
 800ac5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac7a:	ee17 2a90 	vmov	r2, s15
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac82:	e008      	b.n	800ac96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	609a      	str	r2, [r3, #8]
}
 800ac96:	bf00      	nop
 800ac98:	3724      	adds	r7, #36	; 0x24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	58024400 	.word	0x58024400
 800aca8:	03d09000 	.word	0x03d09000
 800acac:	46000000 	.word	0x46000000
 800acb0:	4c742400 	.word	0x4c742400
 800acb4:	4a742400 	.word	0x4a742400
 800acb8:	4af42400 	.word	0x4af42400

0800acbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800acca:	4b53      	ldr	r3, [pc, #332]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d101      	bne.n	800acda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e099      	b.n	800ae0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800acda:	4b4f      	ldr	r3, [pc, #316]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a4e      	ldr	r2, [pc, #312]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ace0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ace4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace6:	f7fa fd8d 	bl	8005804 <HAL_GetTick>
 800acea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acec:	e008      	b.n	800ad00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800acee:	f7fa fd89 	bl	8005804 <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d901      	bls.n	800ad00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e086      	b.n	800ae0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad00:	4b45      	ldr	r3, [pc, #276]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1f0      	bne.n	800acee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ad0c:	4b42      	ldr	r3, [pc, #264]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	031b      	lsls	r3, r3, #12
 800ad1a:	493f      	ldr	r1, [pc, #252]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	628b      	str	r3, [r1, #40]	; 0x28
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	025b      	lsls	r3, r3, #9
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	041b      	lsls	r3, r3, #16
 800ad3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad42:	431a      	orrs	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	061b      	lsls	r3, r3, #24
 800ad4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad50:	4931      	ldr	r1, [pc, #196]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad56:	4b30      	ldr	r3, [pc, #192]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	492d      	ldr	r1, [pc, #180]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad64:	4313      	orrs	r3, r2
 800ad66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad68:	4b2b      	ldr	r3, [pc, #172]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	f023 0220 	bic.w	r2, r3, #32
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	4928      	ldr	r1, [pc, #160]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad76:	4313      	orrs	r3, r2
 800ad78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad7a:	4b27      	ldr	r3, [pc, #156]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	4a26      	ldr	r2, [pc, #152]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad80:	f023 0310 	bic.w	r3, r3, #16
 800ad84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad86:	4b24      	ldr	r3, [pc, #144]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad8a:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <RCCEx_PLL2_Config+0x160>)
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	69d2      	ldr	r2, [r2, #28]
 800ad92:	00d2      	lsls	r2, r2, #3
 800ad94:	4920      	ldr	r1, [pc, #128]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad9a:	4b1f      	ldr	r3, [pc, #124]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	4a1e      	ldr	r2, [pc, #120]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ada0:	f043 0310 	orr.w	r3, r3, #16
 800ada4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800adac:	4b1a      	ldr	r3, [pc, #104]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	4a19      	ldr	r2, [pc, #100]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800adb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adb8:	e00f      	b.n	800adda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d106      	bne.n	800adce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800adc0:	4b15      	ldr	r3, [pc, #84]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800adc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adcc:	e005      	b.n	800adda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800adce:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add2:	4a11      	ldr	r2, [pc, #68]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800add4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800add8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800adda:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a0e      	ldr	r2, [pc, #56]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ade0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ade4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ade6:	f7fa fd0d 	bl	8005804 <HAL_GetTick>
 800adea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adec:	e008      	b.n	800ae00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800adee:	f7fa fd09 	bl	8005804 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d901      	bls.n	800ae00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e006      	b.n	800ae0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <RCCEx_PLL2_Config+0x15c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0f0      	beq.n	800adee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	58024400 	.word	0x58024400
 800ae1c:	ffff0007 	.word	0xffff0007

0800ae20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae2e:	4b53      	ldr	r3, [pc, #332]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800ae30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d101      	bne.n	800ae3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e099      	b.n	800af72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ae3e:	4b4f      	ldr	r3, [pc, #316]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a4e      	ldr	r2, [pc, #312]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800ae44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae4a:	f7fa fcdb 	bl	8005804 <HAL_GetTick>
 800ae4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae50:	e008      	b.n	800ae64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ae52:	f7fa fcd7 	bl	8005804 <HAL_GetTick>
 800ae56:	4602      	mov	r2, r0
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d901      	bls.n	800ae64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e086      	b.n	800af72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae64:	4b45      	ldr	r3, [pc, #276]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1f0      	bne.n	800ae52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae70:	4b42      	ldr	r3, [pc, #264]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	051b      	lsls	r3, r3, #20
 800ae7e:	493f      	ldr	r1, [pc, #252]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800ae80:	4313      	orrs	r3, r2
 800ae82:	628b      	str	r3, [r1, #40]	; 0x28
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689b      	ldr	r3, [r3, #8]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	025b      	lsls	r3, r3, #9
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	041b      	lsls	r3, r3, #16
 800aea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aea6:	431a      	orrs	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	061b      	lsls	r3, r3, #24
 800aeb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aeb4:	4931      	ldr	r1, [pc, #196]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aeba:	4b30      	ldr	r3, [pc, #192]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	492d      	ldr	r1, [pc, #180]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aecc:	4b2b      	ldr	r3, [pc, #172]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	4928      	ldr	r1, [pc, #160]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aede:	4b27      	ldr	r3, [pc, #156]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee2:	4a26      	ldr	r2, [pc, #152]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aeea:	4b24      	ldr	r3, [pc, #144]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aeec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeee:	4b24      	ldr	r3, [pc, #144]	; (800af80 <RCCEx_PLL3_Config+0x160>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	69d2      	ldr	r2, [r2, #28]
 800aef6:	00d2      	lsls	r2, r2, #3
 800aef8:	4920      	ldr	r1, [pc, #128]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aefe:	4b1f      	ldr	r3, [pc, #124]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	4a1e      	ldr	r2, [pc, #120]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d106      	bne.n	800af1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800af10:	4b1a      	ldr	r3, [pc, #104]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af14:	4a19      	ldr	r2, [pc, #100]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af1c:	e00f      	b.n	800af3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d106      	bne.n	800af32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800af24:	4b15      	ldr	r3, [pc, #84]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a14      	ldr	r2, [pc, #80]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800af2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af30:	e005      	b.n	800af3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800af32:	4b12      	ldr	r3, [pc, #72]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af36:	4a11      	ldr	r2, [pc, #68]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800af3e:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a0e      	ldr	r2, [pc, #56]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af4a:	f7fa fc5b 	bl	8005804 <HAL_GetTick>
 800af4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af50:	e008      	b.n	800af64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800af52:	f7fa fc57 	bl	8005804 <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d901      	bls.n	800af64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e006      	b.n	800af72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af64:	4b05      	ldr	r3, [pc, #20]	; (800af7c <RCCEx_PLL3_Config+0x15c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0f0      	beq.n	800af52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af70:	7bfb      	ldrb	r3, [r7, #15]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	58024400 	.word	0x58024400
 800af80:	ffff0007 	.word	0xffff0007

0800af84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e049      	b.n	800b02a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7f9 ff1c 	bl	8004de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4619      	mov	r1, r3
 800afc2:	4610      	mov	r0, r2
 800afc4:	f000 ff04 	bl	800bdd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
	...

0800b034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b01      	cmp	r3, #1
 800b046:	d001      	beq.n	800b04c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e05e      	b.n	800b10a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2202      	movs	r2, #2
 800b050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68da      	ldr	r2, [r3, #12]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a2b      	ldr	r2, [pc, #172]	; (800b118 <HAL_TIM_Base_Start_IT+0xe4>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d02c      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b076:	d027      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a27      	ldr	r2, [pc, #156]	; (800b11c <HAL_TIM_Base_Start_IT+0xe8>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d022      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a26      	ldr	r2, [pc, #152]	; (800b120 <HAL_TIM_Base_Start_IT+0xec>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d01d      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a24      	ldr	r2, [pc, #144]	; (800b124 <HAL_TIM_Base_Start_IT+0xf0>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d018      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a23      	ldr	r2, [pc, #140]	; (800b128 <HAL_TIM_Base_Start_IT+0xf4>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d013      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a21      	ldr	r2, [pc, #132]	; (800b12c <HAL_TIM_Base_Start_IT+0xf8>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d00e      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a20      	ldr	r2, [pc, #128]	; (800b130 <HAL_TIM_Base_Start_IT+0xfc>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d009      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a1e      	ldr	r2, [pc, #120]	; (800b134 <HAL_TIM_Base_Start_IT+0x100>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d004      	beq.n	800b0c8 <HAL_TIM_Base_Start_IT+0x94>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a1d      	ldr	r2, [pc, #116]	; (800b138 <HAL_TIM_Base_Start_IT+0x104>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d115      	bne.n	800b0f4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689a      	ldr	r2, [r3, #8]
 800b0ce:	4b1b      	ldr	r3, [pc, #108]	; (800b13c <HAL_TIM_Base_Start_IT+0x108>)
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2b06      	cmp	r3, #6
 800b0d8:	d015      	beq.n	800b106 <HAL_TIM_Base_Start_IT+0xd2>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e0:	d011      	beq.n	800b106 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f042 0201 	orr.w	r2, r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f2:	e008      	b.n	800b106 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f042 0201 	orr.w	r2, r2, #1
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	e000      	b.n	800b108 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	40010000 	.word	0x40010000
 800b11c:	40000400 	.word	0x40000400
 800b120:	40000800 	.word	0x40000800
 800b124:	40000c00 	.word	0x40000c00
 800b128:	40010400 	.word	0x40010400
 800b12c:	40001800 	.word	0x40001800
 800b130:	40014000 	.word	0x40014000
 800b134:	4000e000 	.word	0x4000e000
 800b138:	4000e400 	.word	0x4000e400
 800b13c:	00010007 	.word	0x00010007

0800b140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e049      	b.n	800b1e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7f9 fdf6 	bl	8004d58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4619      	mov	r1, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	f000 fe26 	bl	800bdd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d109      	bne.n	800b218 <HAL_TIM_PWM_Start_IT+0x28>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	bf14      	ite	ne
 800b210:	2301      	movne	r3, #1
 800b212:	2300      	moveq	r3, #0
 800b214:	b2db      	uxtb	r3, r3
 800b216:	e03c      	b.n	800b292 <HAL_TIM_PWM_Start_IT+0xa2>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d109      	bne.n	800b232 <HAL_TIM_PWM_Start_IT+0x42>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b01      	cmp	r3, #1
 800b228:	bf14      	ite	ne
 800b22a:	2301      	movne	r3, #1
 800b22c:	2300      	moveq	r3, #0
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	e02f      	b.n	800b292 <HAL_TIM_PWM_Start_IT+0xa2>
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b08      	cmp	r3, #8
 800b236:	d109      	bne.n	800b24c <HAL_TIM_PWM_Start_IT+0x5c>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b01      	cmp	r3, #1
 800b242:	bf14      	ite	ne
 800b244:	2301      	movne	r3, #1
 800b246:	2300      	moveq	r3, #0
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	e022      	b.n	800b292 <HAL_TIM_PWM_Start_IT+0xa2>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b0c      	cmp	r3, #12
 800b250:	d109      	bne.n	800b266 <HAL_TIM_PWM_Start_IT+0x76>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	bf14      	ite	ne
 800b25e:	2301      	movne	r3, #1
 800b260:	2300      	moveq	r3, #0
 800b262:	b2db      	uxtb	r3, r3
 800b264:	e015      	b.n	800b292 <HAL_TIM_PWM_Start_IT+0xa2>
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	2b10      	cmp	r3, #16
 800b26a:	d109      	bne.n	800b280 <HAL_TIM_PWM_Start_IT+0x90>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b01      	cmp	r3, #1
 800b276:	bf14      	ite	ne
 800b278:	2301      	movne	r3, #1
 800b27a:	2300      	moveq	r3, #0
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	e008      	b.n	800b292 <HAL_TIM_PWM_Start_IT+0xa2>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b01      	cmp	r3, #1
 800b28a:	bf14      	ite	ne
 800b28c:	2301      	movne	r3, #1
 800b28e:	2300      	moveq	r3, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e0f6      	b.n	800b488 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d104      	bne.n	800b2aa <HAL_TIM_PWM_Start_IT+0xba>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2a8:	e023      	b.n	800b2f2 <HAL_TIM_PWM_Start_IT+0x102>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d104      	bne.n	800b2ba <HAL_TIM_PWM_Start_IT+0xca>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2b8:	e01b      	b.n	800b2f2 <HAL_TIM_PWM_Start_IT+0x102>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b08      	cmp	r3, #8
 800b2be:	d104      	bne.n	800b2ca <HAL_TIM_PWM_Start_IT+0xda>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2c8:	e013      	b.n	800b2f2 <HAL_TIM_PWM_Start_IT+0x102>
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b0c      	cmp	r3, #12
 800b2ce:	d104      	bne.n	800b2da <HAL_TIM_PWM_Start_IT+0xea>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2d8:	e00b      	b.n	800b2f2 <HAL_TIM_PWM_Start_IT+0x102>
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b10      	cmp	r3, #16
 800b2de:	d104      	bne.n	800b2ea <HAL_TIM_PWM_Start_IT+0xfa>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2e8:	e003      	b.n	800b2f2 <HAL_TIM_PWM_Start_IT+0x102>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b0c      	cmp	r3, #12
 800b2f6:	d841      	bhi.n	800b37c <HAL_TIM_PWM_Start_IT+0x18c>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <HAL_TIM_PWM_Start_IT+0x110>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b335 	.word	0x0800b335
 800b304:	0800b37d 	.word	0x0800b37d
 800b308:	0800b37d 	.word	0x0800b37d
 800b30c:	0800b37d 	.word	0x0800b37d
 800b310:	0800b347 	.word	0x0800b347
 800b314:	0800b37d 	.word	0x0800b37d
 800b318:	0800b37d 	.word	0x0800b37d
 800b31c:	0800b37d 	.word	0x0800b37d
 800b320:	0800b359 	.word	0x0800b359
 800b324:	0800b37d 	.word	0x0800b37d
 800b328:	0800b37d 	.word	0x0800b37d
 800b32c:	0800b37d 	.word	0x0800b37d
 800b330:	0800b36b 	.word	0x0800b36b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68da      	ldr	r2, [r3, #12]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f042 0202 	orr.w	r2, r2, #2
 800b342:	60da      	str	r2, [r3, #12]
      break;
 800b344:	e01d      	b.n	800b382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f042 0204 	orr.w	r2, r2, #4
 800b354:	60da      	str	r2, [r3, #12]
      break;
 800b356:	e014      	b.n	800b382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68da      	ldr	r2, [r3, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f042 0208 	orr.w	r2, r2, #8
 800b366:	60da      	str	r2, [r3, #12]
      break;
 800b368:	e00b      	b.n	800b382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68da      	ldr	r2, [r3, #12]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f042 0210 	orr.w	r2, r2, #16
 800b378:	60da      	str	r2, [r3, #12]
      break;
 800b37a:	e002      	b.n	800b382 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	73fb      	strb	r3, [r7, #15]
      break;
 800b380:	bf00      	nop
  }

  if (status == HAL_OK)
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d17e      	bne.n	800b486 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2201      	movs	r2, #1
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	f001 f937 	bl	800c604 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a3d      	ldr	r2, [pc, #244]	; (800b490 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d013      	beq.n	800b3c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a3b      	ldr	r2, [pc, #236]	; (800b494 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d00e      	beq.n	800b3c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a3a      	ldr	r2, [pc, #232]	; (800b498 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d009      	beq.n	800b3c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a38      	ldr	r2, [pc, #224]	; (800b49c <HAL_TIM_PWM_Start_IT+0x2ac>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d004      	beq.n	800b3c8 <HAL_TIM_PWM_Start_IT+0x1d8>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a37      	ldr	r2, [pc, #220]	; (800b4a0 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d101      	bne.n	800b3cc <HAL_TIM_PWM_Start_IT+0x1dc>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e000      	b.n	800b3ce <HAL_TIM_PWM_Start_IT+0x1de>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d007      	beq.n	800b3e2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a2a      	ldr	r2, [pc, #168]	; (800b490 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d02c      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f4:	d027      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a2a      	ldr	r2, [pc, #168]	; (800b4a4 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d022      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a28      	ldr	r2, [pc, #160]	; (800b4a8 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d01d      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a27      	ldr	r2, [pc, #156]	; (800b4ac <HAL_TIM_PWM_Start_IT+0x2bc>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d018      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a1e      	ldr	r2, [pc, #120]	; (800b494 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d013      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a23      	ldr	r2, [pc, #140]	; (800b4b0 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d00e      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a1a      	ldr	r2, [pc, #104]	; (800b498 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d009      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a1f      	ldr	r2, [pc, #124]	; (800b4b4 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d004      	beq.n	800b446 <HAL_TIM_PWM_Start_IT+0x256>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a1d      	ldr	r2, [pc, #116]	; (800b4b8 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d115      	bne.n	800b472 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	689a      	ldr	r2, [r3, #8]
 800b44c:	4b1b      	ldr	r3, [pc, #108]	; (800b4bc <HAL_TIM_PWM_Start_IT+0x2cc>)
 800b44e:	4013      	ands	r3, r2
 800b450:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b06      	cmp	r3, #6
 800b456:	d015      	beq.n	800b484 <HAL_TIM_PWM_Start_IT+0x294>
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b45e:	d011      	beq.n	800b484 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f042 0201 	orr.w	r2, r2, #1
 800b46e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b470:	e008      	b.n	800b484 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0201 	orr.w	r2, r2, #1
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	e000      	b.n	800b486 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b484:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b486:	7bfb      	ldrb	r3, [r7, #15]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	40010000 	.word	0x40010000
 800b494:	40010400 	.word	0x40010400
 800b498:	40014000 	.word	0x40014000
 800b49c:	40014400 	.word	0x40014400
 800b4a0:	40014800 	.word	0x40014800
 800b4a4:	40000400 	.word	0x40000400
 800b4a8:	40000800 	.word	0x40000800
 800b4ac:	40000c00 	.word	0x40000c00
 800b4b0:	40001800 	.word	0x40001800
 800b4b4:	4000e000 	.word	0x4000e000
 800b4b8:	4000e400 	.word	0x4000e400
 800b4bc:	00010007 	.word	0x00010007

0800b4c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e08f      	b.n	800b5f4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d106      	bne.n	800b4ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7f9 fb27 	bl	8004b3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6899      	ldr	r1, [r3, #8]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	4b3e      	ldr	r3, [pc, #248]	; (800b5fc <HAL_TIM_Encoder_Init+0x13c>)
 800b502:	400b      	ands	r3, r1
 800b504:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	3304      	adds	r3, #4
 800b50e:	4619      	mov	r1, r3
 800b510:	4610      	mov	r0, r2
 800b512:	f000 fc5d 	bl	800bdd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	697a      	ldr	r2, [r7, #20]
 800b534:	4313      	orrs	r3, r2
 800b536:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	4b31      	ldr	r3, [pc, #196]	; (800b600 <HAL_TIM_Encoder_Init+0x140>)
 800b53c:	4013      	ands	r3, r2
 800b53e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	689a      	ldr	r2, [r3, #8]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	021b      	lsls	r3, r3, #8
 800b54a:	4313      	orrs	r3, r2
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	4313      	orrs	r3, r2
 800b550:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	4b2b      	ldr	r3, [pc, #172]	; (800b604 <HAL_TIM_Encoder_Init+0x144>)
 800b556:	4013      	ands	r3, r2
 800b558:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b55a:	693a      	ldr	r2, [r7, #16]
 800b55c:	4b2a      	ldr	r3, [pc, #168]	; (800b608 <HAL_TIM_Encoder_Init+0x148>)
 800b55e:	4013      	ands	r3, r2
 800b560:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	68da      	ldr	r2, [r3, #12]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	69db      	ldr	r3, [r3, #28]
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	4313      	orrs	r3, r2
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4313      	orrs	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	011a      	lsls	r2, r3, #4
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	031b      	lsls	r3, r3, #12
 800b580:	4313      	orrs	r3, r2
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	4313      	orrs	r3, r2
 800b586:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b58e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	fffebff8 	.word	0xfffebff8
 800b600:	fffffcfc 	.word	0xfffffcfc
 800b604:	fffff3f3 	.word	0xfffff3f3
 800b608:	ffff0f0f 	.word	0xffff0f0f

0800b60c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b61c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b624:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b62c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b634:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d110      	bne.n	800b65e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d102      	bne.n	800b648 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b642:	7b7b      	ldrb	r3, [r7, #13]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d001      	beq.n	800b64c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b648:	2301      	movs	r3, #1
 800b64a:	e069      	b.n	800b720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b65c:	e031      	b.n	800b6c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b04      	cmp	r3, #4
 800b662:	d110      	bne.n	800b686 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d102      	bne.n	800b670 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b66a:	7b3b      	ldrb	r3, [r7, #12]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d001      	beq.n	800b674 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e055      	b.n	800b720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2202      	movs	r2, #2
 800b680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b684:	e01d      	b.n	800b6c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d108      	bne.n	800b69e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b68c:	7bbb      	ldrb	r3, [r7, #14]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d105      	bne.n	800b69e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b692:	7b7b      	ldrb	r3, [r7, #13]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d102      	bne.n	800b69e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b698:	7b3b      	ldrb	r3, [r7, #12]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d001      	beq.n	800b6a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e03e      	b.n	800b720 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2202      	movs	r2, #2
 800b6be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <HAL_TIM_Encoder_Start+0xc4>
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b04      	cmp	r3, #4
 800b6cc:	d008      	beq.n	800b6e0 <HAL_TIM_Encoder_Start+0xd4>
 800b6ce:	e00f      	b.n	800b6f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 ff93 	bl	800c604 <TIM_CCxChannelCmd>
      break;
 800b6de:	e016      	b.n	800b70e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	2104      	movs	r1, #4
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 ff8b 	bl	800c604 <TIM_CCxChannelCmd>
      break;
 800b6ee:	e00e      	b.n	800b70e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 ff83 	bl	800c604 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2201      	movs	r2, #1
 800b704:	2104      	movs	r1, #4
 800b706:	4618      	mov	r0, r3
 800b708:	f000 ff7c 	bl	800c604 <TIM_CCxChannelCmd>
      break;
 800b70c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f042 0201 	orr.w	r2, r2, #1
 800b71c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d122      	bne.n	800b784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d11b      	bne.n	800b784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f06f 0202 	mvn.w	r2, #2
 800b754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	f003 0303 	and.w	r3, r3, #3
 800b766:	2b00      	cmp	r3, #0
 800b768:	d003      	beq.n	800b772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fb12 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b770:	e005      	b.n	800b77e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fb04 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fb15 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	f003 0304 	and.w	r3, r3, #4
 800b78e:	2b04      	cmp	r3, #4
 800b790:	d122      	bne.n	800b7d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f003 0304 	and.w	r3, r3, #4
 800b79c:	2b04      	cmp	r3, #4
 800b79e:	d11b      	bne.n	800b7d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f06f 0204 	mvn.w	r2, #4
 800b7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d003      	beq.n	800b7c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fae8 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b7c4:	e005      	b.n	800b7d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fada 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 faeb 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	f003 0308 	and.w	r3, r3, #8
 800b7e2:	2b08      	cmp	r3, #8
 800b7e4:	d122      	bne.n	800b82c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	f003 0308 	and.w	r3, r3, #8
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d11b      	bne.n	800b82c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f06f 0208 	mvn.w	r2, #8
 800b7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2204      	movs	r2, #4
 800b802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fabe 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b818:	e005      	b.n	800b826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 fab0 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fac1 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	f003 0310 	and.w	r3, r3, #16
 800b836:	2b10      	cmp	r3, #16
 800b838:	d122      	bne.n	800b880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	f003 0310 	and.w	r3, r3, #16
 800b844:	2b10      	cmp	r3, #16
 800b846:	d11b      	bne.n	800b880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f06f 0210 	mvn.w	r2, #16
 800b850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2208      	movs	r2, #8
 800b856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	69db      	ldr	r3, [r3, #28]
 800b85e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa94 	bl	800bd94 <HAL_TIM_IC_CaptureCallback>
 800b86c:	e005      	b.n	800b87a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa86 	bl	800bd80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fa97 	bl	800bda8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d10e      	bne.n	800b8ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d107      	bne.n	800b8ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f06f 0201 	mvn.w	r2, #1
 800b8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7f9 fd6a 	bl	8005380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	691b      	ldr	r3, [r3, #16]
 800b8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b6:	2b80      	cmp	r3, #128	; 0x80
 800b8b8:	d10e      	bne.n	800b8d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8c4:	2b80      	cmp	r3, #128	; 0x80
 800b8c6:	d107      	bne.n	800b8d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f001 f802 	bl	800c8dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e6:	d10e      	bne.n	800b906 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8f2:	2b80      	cmp	r3, #128	; 0x80
 800b8f4:	d107      	bne.n	800b906 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b8fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fff5 	bl	800c8f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b910:	2b40      	cmp	r3, #64	; 0x40
 800b912:	d10e      	bne.n	800b932 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91e:	2b40      	cmp	r3, #64	; 0x40
 800b920:	d107      	bne.n	800b932 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b92a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fa45 	bl	800bdbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	f003 0320 	and.w	r3, r3, #32
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d10e      	bne.n	800b95e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	f003 0320 	and.w	r3, r3, #32
 800b94a:	2b20      	cmp	r3, #32
 800b94c:	d107      	bne.n	800b95e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f06f 0220 	mvn.w	r2, #32
 800b956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 ffb5 	bl	800c8c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d101      	bne.n	800b986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b982:	2302      	movs	r3, #2
 800b984:	e0ff      	b.n	800bb86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b14      	cmp	r3, #20
 800b992:	f200 80f0 	bhi.w	800bb76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b996:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99c:	0800b9f1 	.word	0x0800b9f1
 800b9a0:	0800bb77 	.word	0x0800bb77
 800b9a4:	0800bb77 	.word	0x0800bb77
 800b9a8:	0800bb77 	.word	0x0800bb77
 800b9ac:	0800ba31 	.word	0x0800ba31
 800b9b0:	0800bb77 	.word	0x0800bb77
 800b9b4:	0800bb77 	.word	0x0800bb77
 800b9b8:	0800bb77 	.word	0x0800bb77
 800b9bc:	0800ba73 	.word	0x0800ba73
 800b9c0:	0800bb77 	.word	0x0800bb77
 800b9c4:	0800bb77 	.word	0x0800bb77
 800b9c8:	0800bb77 	.word	0x0800bb77
 800b9cc:	0800bab3 	.word	0x0800bab3
 800b9d0:	0800bb77 	.word	0x0800bb77
 800b9d4:	0800bb77 	.word	0x0800bb77
 800b9d8:	0800bb77 	.word	0x0800bb77
 800b9dc:	0800baf5 	.word	0x0800baf5
 800b9e0:	0800bb77 	.word	0x0800bb77
 800b9e4:	0800bb77 	.word	0x0800bb77
 800b9e8:	0800bb77 	.word	0x0800bb77
 800b9ec:	0800bb35 	.word	0x0800bb35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68b9      	ldr	r1, [r7, #8]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 fa90 	bl	800bf1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	699a      	ldr	r2, [r3, #24]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f042 0208 	orr.w	r2, r2, #8
 800ba0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	699a      	ldr	r2, [r3, #24]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f022 0204 	bic.w	r2, r2, #4
 800ba1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6999      	ldr	r1, [r3, #24]
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	691a      	ldr	r2, [r3, #16]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	619a      	str	r2, [r3, #24]
      break;
 800ba2e:	e0a5      	b.n	800bb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68b9      	ldr	r1, [r7, #8]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fb00 	bl	800c03c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	699a      	ldr	r2, [r3, #24]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	699a      	ldr	r2, [r3, #24]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6999      	ldr	r1, [r3, #24]
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	021a      	lsls	r2, r3, #8
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	619a      	str	r2, [r3, #24]
      break;
 800ba70:	e084      	b.n	800bb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68b9      	ldr	r1, [r7, #8]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f000 fb69 	bl	800c150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	69da      	ldr	r2, [r3, #28]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f042 0208 	orr.w	r2, r2, #8
 800ba8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	69da      	ldr	r2, [r3, #28]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 0204 	bic.w	r2, r2, #4
 800ba9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	69d9      	ldr	r1, [r3, #28]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	430a      	orrs	r2, r1
 800baae:	61da      	str	r2, [r3, #28]
      break;
 800bab0:	e064      	b.n	800bb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68b9      	ldr	r1, [r7, #8]
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fbd1 	bl	800c260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	69da      	ldr	r2, [r3, #28]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bacc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	69da      	ldr	r2, [r3, #28]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800badc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	69d9      	ldr	r1, [r3, #28]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	021a      	lsls	r2, r3, #8
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	430a      	orrs	r2, r1
 800baf0:	61da      	str	r2, [r3, #28]
      break;
 800baf2:	e043      	b.n	800bb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68b9      	ldr	r1, [r7, #8]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 fc1a 	bl	800c334 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0208 	orr.w	r2, r2, #8
 800bb0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f022 0204 	bic.w	r2, r2, #4
 800bb1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	430a      	orrs	r2, r1
 800bb30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bb32:	e023      	b.n	800bb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68b9      	ldr	r1, [r7, #8]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fc5e 	bl	800c3fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	021a      	lsls	r2, r3, #8
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bb74:	e002      	b.n	800bb7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	75fb      	strb	r3, [r7, #23]
      break;
 800bb7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop

0800bb90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d101      	bne.n	800bbac <HAL_TIM_ConfigClockSource+0x1c>
 800bba8:	2302      	movs	r3, #2
 800bbaa:	e0dc      	b.n	800bd66 <HAL_TIM_ConfigClockSource+0x1d6>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	4b6a      	ldr	r3, [pc, #424]	; (800bd70 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bbc8:	4013      	ands	r3, r2
 800bbca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68ba      	ldr	r2, [r7, #8]
 800bbda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a64      	ldr	r2, [pc, #400]	; (800bd74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	f000 80a9 	beq.w	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bbe8:	4a62      	ldr	r2, [pc, #392]	; (800bd74 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	f200 80ae 	bhi.w	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bbf0:	4a61      	ldr	r2, [pc, #388]	; (800bd78 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	f000 80a1 	beq.w	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bbf8:	4a5f      	ldr	r2, [pc, #380]	; (800bd78 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	f200 80a6 	bhi.w	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc00:	4a5e      	ldr	r2, [pc, #376]	; (800bd7c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	f000 8099 	beq.w	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc08:	4a5c      	ldr	r2, [pc, #368]	; (800bd7c <HAL_TIM_ConfigClockSource+0x1ec>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	f200 809e 	bhi.w	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bc14:	f000 8091 	beq.w	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bc1c:	f200 8096 	bhi.w	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc24:	f000 8089 	beq.w	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc2c:	f200 808e 	bhi.w	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc34:	d03e      	beq.n	800bcb4 <HAL_TIM_ConfigClockSource+0x124>
 800bc36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc3a:	f200 8087 	bhi.w	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc42:	f000 8086 	beq.w	800bd52 <HAL_TIM_ConfigClockSource+0x1c2>
 800bc46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc4a:	d87f      	bhi.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc4c:	2b70      	cmp	r3, #112	; 0x70
 800bc4e:	d01a      	beq.n	800bc86 <HAL_TIM_ConfigClockSource+0xf6>
 800bc50:	2b70      	cmp	r3, #112	; 0x70
 800bc52:	d87b      	bhi.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc54:	2b60      	cmp	r3, #96	; 0x60
 800bc56:	d050      	beq.n	800bcfa <HAL_TIM_ConfigClockSource+0x16a>
 800bc58:	2b60      	cmp	r3, #96	; 0x60
 800bc5a:	d877      	bhi.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc5c:	2b50      	cmp	r3, #80	; 0x50
 800bc5e:	d03c      	beq.n	800bcda <HAL_TIM_ConfigClockSource+0x14a>
 800bc60:	2b50      	cmp	r3, #80	; 0x50
 800bc62:	d873      	bhi.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc64:	2b40      	cmp	r3, #64	; 0x40
 800bc66:	d058      	beq.n	800bd1a <HAL_TIM_ConfigClockSource+0x18a>
 800bc68:	2b40      	cmp	r3, #64	; 0x40
 800bc6a:	d86f      	bhi.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc6c:	2b30      	cmp	r3, #48	; 0x30
 800bc6e:	d064      	beq.n	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc70:	2b30      	cmp	r3, #48	; 0x30
 800bc72:	d86b      	bhi.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc74:	2b20      	cmp	r3, #32
 800bc76:	d060      	beq.n	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc78:	2b20      	cmp	r3, #32
 800bc7a:	d867      	bhi.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d05c      	beq.n	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc80:	2b10      	cmp	r3, #16
 800bc82:	d05a      	beq.n	800bd3a <HAL_TIM_ConfigClockSource+0x1aa>
 800bc84:	e062      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	6899      	ldr	r1, [r3, #8]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f000 fc95 	bl	800c5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bca8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	609a      	str	r2, [r3, #8]
      break;
 800bcb2:	e04f      	b.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	6899      	ldr	r1, [r3, #8]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f000 fc7e 	bl	800c5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcd6:	609a      	str	r2, [r3, #8]
      break;
 800bcd8:	e03c      	b.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	6859      	ldr	r1, [r3, #4]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	461a      	mov	r2, r3
 800bce8:	f000 fbee 	bl	800c4c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2150      	movs	r1, #80	; 0x50
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fc48 	bl	800c588 <TIM_ITRx_SetConfig>
      break;
 800bcf8:	e02c      	b.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	6859      	ldr	r1, [r3, #4]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	461a      	mov	r2, r3
 800bd08:	f000 fc0d 	bl	800c526 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2160      	movs	r1, #96	; 0x60
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 fc38 	bl	800c588 <TIM_ITRx_SetConfig>
      break;
 800bd18:	e01c      	b.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	6859      	ldr	r1, [r3, #4]
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	461a      	mov	r2, r3
 800bd28:	f000 fbce 	bl	800c4c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2140      	movs	r1, #64	; 0x40
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 fc28 	bl	800c588 <TIM_ITRx_SetConfig>
      break;
 800bd38:	e00c      	b.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4619      	mov	r1, r3
 800bd44:	4610      	mov	r0, r2
 800bd46:	f000 fc1f 	bl	800c588 <TIM_ITRx_SetConfig>
      break;
 800bd4a:	e003      	b.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd50:	e000      	b.n	800bd54 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bd52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	ffceff88 	.word	0xffceff88
 800bd74:	00100040 	.word	0x00100040
 800bd78:	00100030 	.word	0x00100030
 800bd7c:	00100020 	.word	0x00100020

0800bd80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a44      	ldr	r2, [pc, #272]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d013      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdee:	d00f      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a41      	ldr	r2, [pc, #260]	; (800bef8 <TIM_Base_SetConfig+0x128>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d00b      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a40      	ldr	r2, [pc, #256]	; (800befc <TIM_Base_SetConfig+0x12c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d007      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a3f      	ldr	r2, [pc, #252]	; (800bf00 <TIM_Base_SetConfig+0x130>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d003      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a3e      	ldr	r2, [pc, #248]	; (800bf04 <TIM_Base_SetConfig+0x134>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d108      	bne.n	800be22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a33      	ldr	r2, [pc, #204]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d027      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be30:	d023      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a30      	ldr	r2, [pc, #192]	; (800bef8 <TIM_Base_SetConfig+0x128>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d01f      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a2f      	ldr	r2, [pc, #188]	; (800befc <TIM_Base_SetConfig+0x12c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d01b      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a2e      	ldr	r2, [pc, #184]	; (800bf00 <TIM_Base_SetConfig+0x130>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d017      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a2d      	ldr	r2, [pc, #180]	; (800bf04 <TIM_Base_SetConfig+0x134>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d013      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a2c      	ldr	r2, [pc, #176]	; (800bf08 <TIM_Base_SetConfig+0x138>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d00f      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a2b      	ldr	r2, [pc, #172]	; (800bf0c <TIM_Base_SetConfig+0x13c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d00b      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a2a      	ldr	r2, [pc, #168]	; (800bf10 <TIM_Base_SetConfig+0x140>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d007      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a29      	ldr	r2, [pc, #164]	; (800bf14 <TIM_Base_SetConfig+0x144>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d003      	beq.n	800be7a <TIM_Base_SetConfig+0xaa>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a28      	ldr	r2, [pc, #160]	; (800bf18 <TIM_Base_SetConfig+0x148>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d108      	bne.n	800be8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	4313      	orrs	r3, r2
 800be8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	4313      	orrs	r3, r2
 800be98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	689a      	ldr	r2, [r3, #8]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a10      	ldr	r2, [pc, #64]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00f      	beq.n	800bed8 <TIM_Base_SetConfig+0x108>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a12      	ldr	r2, [pc, #72]	; (800bf04 <TIM_Base_SetConfig+0x134>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d00b      	beq.n	800bed8 <TIM_Base_SetConfig+0x108>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a11      	ldr	r2, [pc, #68]	; (800bf08 <TIM_Base_SetConfig+0x138>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d007      	beq.n	800bed8 <TIM_Base_SetConfig+0x108>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a10      	ldr	r2, [pc, #64]	; (800bf0c <TIM_Base_SetConfig+0x13c>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d003      	beq.n	800bed8 <TIM_Base_SetConfig+0x108>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a0f      	ldr	r2, [pc, #60]	; (800bf10 <TIM_Base_SetConfig+0x140>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d103      	bne.n	800bee0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	691a      	ldr	r2, [r3, #16]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	615a      	str	r2, [r3, #20]
}
 800bee6:	bf00      	nop
 800bee8:	3714      	adds	r7, #20
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	40010000 	.word	0x40010000
 800bef8:	40000400 	.word	0x40000400
 800befc:	40000800 	.word	0x40000800
 800bf00:	40000c00 	.word	0x40000c00
 800bf04:	40010400 	.word	0x40010400
 800bf08:	40014000 	.word	0x40014000
 800bf0c:	40014400 	.word	0x40014400
 800bf10:	40014800 	.word	0x40014800
 800bf14:	4000e000 	.word	0x4000e000
 800bf18:	4000e400 	.word	0x4000e400

0800bf1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	f023 0201 	bic.w	r2, r3, #1
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	4b37      	ldr	r3, [pc, #220]	; (800c024 <TIM_OC1_SetConfig+0x108>)
 800bf48:	4013      	ands	r3, r2
 800bf4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f023 0302 	bic.w	r3, r3, #2
 800bf64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a2d      	ldr	r2, [pc, #180]	; (800c028 <TIM_OC1_SetConfig+0x10c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d00f      	beq.n	800bf98 <TIM_OC1_SetConfig+0x7c>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a2c      	ldr	r2, [pc, #176]	; (800c02c <TIM_OC1_SetConfig+0x110>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00b      	beq.n	800bf98 <TIM_OC1_SetConfig+0x7c>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a2b      	ldr	r2, [pc, #172]	; (800c030 <TIM_OC1_SetConfig+0x114>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d007      	beq.n	800bf98 <TIM_OC1_SetConfig+0x7c>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a2a      	ldr	r2, [pc, #168]	; (800c034 <TIM_OC1_SetConfig+0x118>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d003      	beq.n	800bf98 <TIM_OC1_SetConfig+0x7c>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a29      	ldr	r2, [pc, #164]	; (800c038 <TIM_OC1_SetConfig+0x11c>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d10c      	bne.n	800bfb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f023 0308 	bic.w	r3, r3, #8
 800bf9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	f023 0304 	bic.w	r3, r3, #4
 800bfb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a1c      	ldr	r2, [pc, #112]	; (800c028 <TIM_OC1_SetConfig+0x10c>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d00f      	beq.n	800bfda <TIM_OC1_SetConfig+0xbe>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a1b      	ldr	r2, [pc, #108]	; (800c02c <TIM_OC1_SetConfig+0x110>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d00b      	beq.n	800bfda <TIM_OC1_SetConfig+0xbe>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a1a      	ldr	r2, [pc, #104]	; (800c030 <TIM_OC1_SetConfig+0x114>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d007      	beq.n	800bfda <TIM_OC1_SetConfig+0xbe>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a19      	ldr	r2, [pc, #100]	; (800c034 <TIM_OC1_SetConfig+0x118>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d003      	beq.n	800bfda <TIM_OC1_SetConfig+0xbe>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a18      	ldr	r2, [pc, #96]	; (800c038 <TIM_OC1_SetConfig+0x11c>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d111      	bne.n	800bffe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	697a      	ldr	r2, [r7, #20]
 800c016:	621a      	str	r2, [r3, #32]
}
 800c018:	bf00      	nop
 800c01a:	371c      	adds	r7, #28
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	fffeff8f 	.word	0xfffeff8f
 800c028:	40010000 	.word	0x40010000
 800c02c:	40010400 	.word	0x40010400
 800c030:	40014000 	.word	0x40014000
 800c034:	40014400 	.word	0x40014400
 800c038:	40014800 	.word	0x40014800

0800c03c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	f023 0210 	bic.w	r2, r3, #16
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	4b34      	ldr	r3, [pc, #208]	; (800c138 <TIM_OC2_SetConfig+0xfc>)
 800c068:	4013      	ands	r3, r2
 800c06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	021b      	lsls	r3, r3, #8
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	f023 0320 	bic.w	r3, r3, #32
 800c086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	011b      	lsls	r3, r3, #4
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	4313      	orrs	r3, r2
 800c092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a29      	ldr	r2, [pc, #164]	; (800c13c <TIM_OC2_SetConfig+0x100>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d003      	beq.n	800c0a4 <TIM_OC2_SetConfig+0x68>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4a28      	ldr	r2, [pc, #160]	; (800c140 <TIM_OC2_SetConfig+0x104>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d10d      	bne.n	800c0c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	011b      	lsls	r3, r3, #4
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a1e      	ldr	r2, [pc, #120]	; (800c13c <TIM_OC2_SetConfig+0x100>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d00f      	beq.n	800c0e8 <TIM_OC2_SetConfig+0xac>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a1d      	ldr	r2, [pc, #116]	; (800c140 <TIM_OC2_SetConfig+0x104>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d00b      	beq.n	800c0e8 <TIM_OC2_SetConfig+0xac>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4a1c      	ldr	r2, [pc, #112]	; (800c144 <TIM_OC2_SetConfig+0x108>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d007      	beq.n	800c0e8 <TIM_OC2_SetConfig+0xac>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a1b      	ldr	r2, [pc, #108]	; (800c148 <TIM_OC2_SetConfig+0x10c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d003      	beq.n	800c0e8 <TIM_OC2_SetConfig+0xac>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a1a      	ldr	r2, [pc, #104]	; (800c14c <TIM_OC2_SetConfig+0x110>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d113      	bne.n	800c110 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	695b      	ldr	r3, [r3, #20]
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	4313      	orrs	r3, r2
 800c102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	621a      	str	r2, [r3, #32]
}
 800c12a:	bf00      	nop
 800c12c:	371c      	adds	r7, #28
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	feff8fff 	.word	0xfeff8fff
 800c13c:	40010000 	.word	0x40010000
 800c140:	40010400 	.word	0x40010400
 800c144:	40014000 	.word	0x40014000
 800c148:	40014400 	.word	0x40014400
 800c14c:	40014800 	.word	0x40014800

0800c150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
 800c16a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4b33      	ldr	r3, [pc, #204]	; (800c248 <TIM_OC3_SetConfig+0xf8>)
 800c17c:	4013      	ands	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f023 0303 	bic.w	r3, r3, #3
 800c186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	4313      	orrs	r3, r2
 800c190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	021b      	lsls	r3, r3, #8
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a28      	ldr	r2, [pc, #160]	; (800c24c <TIM_OC3_SetConfig+0xfc>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d003      	beq.n	800c1b6 <TIM_OC3_SetConfig+0x66>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a27      	ldr	r2, [pc, #156]	; (800c250 <TIM_OC3_SetConfig+0x100>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d10d      	bne.n	800c1d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	021b      	lsls	r3, r3, #8
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	4a1d      	ldr	r2, [pc, #116]	; (800c24c <TIM_OC3_SetConfig+0xfc>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d00f      	beq.n	800c1fa <TIM_OC3_SetConfig+0xaa>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	4a1c      	ldr	r2, [pc, #112]	; (800c250 <TIM_OC3_SetConfig+0x100>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d00b      	beq.n	800c1fa <TIM_OC3_SetConfig+0xaa>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4a1b      	ldr	r2, [pc, #108]	; (800c254 <TIM_OC3_SetConfig+0x104>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d007      	beq.n	800c1fa <TIM_OC3_SetConfig+0xaa>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	4a1a      	ldr	r2, [pc, #104]	; (800c258 <TIM_OC3_SetConfig+0x108>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d003      	beq.n	800c1fa <TIM_OC3_SetConfig+0xaa>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a19      	ldr	r2, [pc, #100]	; (800c25c <TIM_OC3_SetConfig+0x10c>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d113      	bne.n	800c222 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	011b      	lsls	r3, r3, #4
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	4313      	orrs	r3, r2
 800c214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	699b      	ldr	r3, [r3, #24]
 800c21a:	011b      	lsls	r3, r3, #4
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	4313      	orrs	r3, r2
 800c220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	621a      	str	r2, [r3, #32]
}
 800c23c:	bf00      	nop
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	fffeff8f 	.word	0xfffeff8f
 800c24c:	40010000 	.word	0x40010000
 800c250:	40010400 	.word	0x40010400
 800c254:	40014000 	.word	0x40014000
 800c258:	40014400 	.word	0x40014400
 800c25c:	40014800 	.word	0x40014800

0800c260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c260:	b480      	push	{r7}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4b24      	ldr	r3, [pc, #144]	; (800c31c <TIM_OC4_SetConfig+0xbc>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	031b      	lsls	r3, r3, #12
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a19      	ldr	r2, [pc, #100]	; (800c320 <TIM_OC4_SetConfig+0xc0>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d00f      	beq.n	800c2e0 <TIM_OC4_SetConfig+0x80>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a18      	ldr	r2, [pc, #96]	; (800c324 <TIM_OC4_SetConfig+0xc4>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d00b      	beq.n	800c2e0 <TIM_OC4_SetConfig+0x80>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a17      	ldr	r2, [pc, #92]	; (800c328 <TIM_OC4_SetConfig+0xc8>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d007      	beq.n	800c2e0 <TIM_OC4_SetConfig+0x80>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a16      	ldr	r2, [pc, #88]	; (800c32c <TIM_OC4_SetConfig+0xcc>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d003      	beq.n	800c2e0 <TIM_OC4_SetConfig+0x80>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a15      	ldr	r2, [pc, #84]	; (800c330 <TIM_OC4_SetConfig+0xd0>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d109      	bne.n	800c2f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	695b      	ldr	r3, [r3, #20]
 800c2ec:	019b      	lsls	r3, r3, #6
 800c2ee:	697a      	ldr	r2, [r7, #20]
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	685a      	ldr	r2, [r3, #4]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	621a      	str	r2, [r3, #32]
}
 800c30e:	bf00      	nop
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	feff8fff 	.word	0xfeff8fff
 800c320:	40010000 	.word	0x40010000
 800c324:	40010400 	.word	0x40010400
 800c328:	40014000 	.word	0x40014000
 800c32c:	40014400 	.word	0x40014400
 800c330:	40014800 	.word	0x40014800

0800c334 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c334:	b480      	push	{r7}
 800c336:	b087      	sub	sp, #28
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4b21      	ldr	r3, [pc, #132]	; (800c3e4 <TIM_OC5_SetConfig+0xb0>)
 800c360:	4013      	ands	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c374:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	041b      	lsls	r3, r3, #16
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	4313      	orrs	r3, r2
 800c380:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a18      	ldr	r2, [pc, #96]	; (800c3e8 <TIM_OC5_SetConfig+0xb4>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d00f      	beq.n	800c3aa <TIM_OC5_SetConfig+0x76>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4a17      	ldr	r2, [pc, #92]	; (800c3ec <TIM_OC5_SetConfig+0xb8>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d00b      	beq.n	800c3aa <TIM_OC5_SetConfig+0x76>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a16      	ldr	r2, [pc, #88]	; (800c3f0 <TIM_OC5_SetConfig+0xbc>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d007      	beq.n	800c3aa <TIM_OC5_SetConfig+0x76>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a15      	ldr	r2, [pc, #84]	; (800c3f4 <TIM_OC5_SetConfig+0xc0>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d003      	beq.n	800c3aa <TIM_OC5_SetConfig+0x76>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a14      	ldr	r2, [pc, #80]	; (800c3f8 <TIM_OC5_SetConfig+0xc4>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d109      	bne.n	800c3be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	695b      	ldr	r3, [r3, #20]
 800c3b6:	021b      	lsls	r3, r3, #8
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	621a      	str	r2, [r3, #32]
}
 800c3d8:	bf00      	nop
 800c3da:	371c      	adds	r7, #28
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	fffeff8f 	.word	0xfffeff8f
 800c3e8:	40010000 	.word	0x40010000
 800c3ec:	40010400 	.word	0x40010400
 800c3f0:	40014000 	.word	0x40014000
 800c3f4:	40014400 	.word	0x40014400
 800c3f8:	40014800 	.word	0x40014800

0800c3fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b087      	sub	sp, #28
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	4b22      	ldr	r3, [pc, #136]	; (800c4b0 <TIM_OC6_SetConfig+0xb4>)
 800c428:	4013      	ands	r3, r2
 800c42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	021b      	lsls	r3, r3, #8
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	4313      	orrs	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c43e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	051b      	lsls	r3, r3, #20
 800c446:	693a      	ldr	r2, [r7, #16]
 800c448:	4313      	orrs	r3, r2
 800c44a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a19      	ldr	r2, [pc, #100]	; (800c4b4 <TIM_OC6_SetConfig+0xb8>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d00f      	beq.n	800c474 <TIM_OC6_SetConfig+0x78>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a18      	ldr	r2, [pc, #96]	; (800c4b8 <TIM_OC6_SetConfig+0xbc>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d00b      	beq.n	800c474 <TIM_OC6_SetConfig+0x78>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a17      	ldr	r2, [pc, #92]	; (800c4bc <TIM_OC6_SetConfig+0xc0>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d007      	beq.n	800c474 <TIM_OC6_SetConfig+0x78>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4a16      	ldr	r2, [pc, #88]	; (800c4c0 <TIM_OC6_SetConfig+0xc4>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d003      	beq.n	800c474 <TIM_OC6_SetConfig+0x78>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4a15      	ldr	r2, [pc, #84]	; (800c4c4 <TIM_OC6_SetConfig+0xc8>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d109      	bne.n	800c488 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c47a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	695b      	ldr	r3, [r3, #20]
 800c480:	029b      	lsls	r3, r3, #10
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	4313      	orrs	r3, r2
 800c486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	685a      	ldr	r2, [r3, #4]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	621a      	str	r2, [r3, #32]
}
 800c4a2:	bf00      	nop
 800c4a4:	371c      	adds	r7, #28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	feff8fff 	.word	0xfeff8fff
 800c4b4:	40010000 	.word	0x40010000
 800c4b8:	40010400 	.word	0x40010400
 800c4bc:	40014000 	.word	0x40014000
 800c4c0:	40014400 	.word	0x40014400
 800c4c4:	40014800 	.word	0x40014800

0800c4c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6a1b      	ldr	r3, [r3, #32]
 800c4d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	f023 0201 	bic.w	r2, r3, #1
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	011b      	lsls	r3, r3, #4
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f023 030a 	bic.w	r3, r3, #10
 800c504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c506:	697a      	ldr	r2, [r7, #20]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	621a      	str	r2, [r3, #32]
}
 800c51a:	bf00      	nop
 800c51c:	371c      	adds	r7, #28
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c526:	b480      	push	{r7}
 800c528:	b087      	sub	sp, #28
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	f023 0210 	bic.w	r2, r3, #16
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	699b      	ldr	r3, [r3, #24]
 800c542:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	031b      	lsls	r3, r3, #12
 800c556:	697a      	ldr	r2, [r7, #20]
 800c558:	4313      	orrs	r3, r2
 800c55a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c562:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	697a      	ldr	r2, [r7, #20]
 800c572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	621a      	str	r2, [r3, #32]
}
 800c57a:	bf00      	nop
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
	...

0800c588 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <TIM_ITRx_SetConfig+0x38>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	f043 0307 	orr.w	r3, r3, #7
 800c5aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	609a      	str	r2, [r3, #8]
}
 800c5b2:	bf00      	nop
 800c5b4:	3714      	adds	r7, #20
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	ffcfff8f 	.word	0xffcfff8f

0800c5c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	021a      	lsls	r2, r3, #8
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	697a      	ldr	r2, [r7, #20]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	609a      	str	r2, [r3, #8]
}
 800c5f8:	bf00      	nop
 800c5fa:	371c      	adds	r7, #28
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c604:	b480      	push	{r7}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	f003 031f 	and.w	r3, r3, #31
 800c616:	2201      	movs	r2, #1
 800c618:	fa02 f303 	lsl.w	r3, r2, r3
 800c61c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6a1a      	ldr	r2, [r3, #32]
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	43db      	mvns	r3, r3
 800c626:	401a      	ands	r2, r3
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6a1a      	ldr	r2, [r3, #32]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	f003 031f 	and.w	r3, r3, #31
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	fa01 f303 	lsl.w	r3, r1, r3
 800c63c:	431a      	orrs	r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	621a      	str	r2, [r3, #32]
}
 800c642:	bf00      	nop
 800c644:	371c      	adds	r7, #28
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
	...

0800c650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c660:	2b01      	cmp	r3, #1
 800c662:	d101      	bne.n	800c668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c664:	2302      	movs	r3, #2
 800c666:	e077      	b.n	800c758 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	685b      	ldr	r3, [r3, #4]
 800c67e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	689b      	ldr	r3, [r3, #8]
 800c686:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a35      	ldr	r2, [pc, #212]	; (800c764 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d004      	beq.n	800c69c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a34      	ldr	r2, [pc, #208]	; (800c768 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d108      	bne.n	800c6ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c6a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a25      	ldr	r2, [pc, #148]	; (800c764 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d02c      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6da:	d027      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a22      	ldr	r2, [pc, #136]	; (800c76c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d022      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a21      	ldr	r2, [pc, #132]	; (800c770 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d01d      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a1f      	ldr	r2, [pc, #124]	; (800c774 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d018      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a1a      	ldr	r2, [pc, #104]	; (800c768 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d013      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a1b      	ldr	r2, [pc, #108]	; (800c778 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d00e      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a1a      	ldr	r2, [pc, #104]	; (800c77c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d009      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a18      	ldr	r2, [pc, #96]	; (800c780 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d004      	beq.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a17      	ldr	r2, [pc, #92]	; (800c784 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d10c      	bne.n	800c746 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	40010000 	.word	0x40010000
 800c768:	40010400 	.word	0x40010400
 800c76c:	40000400 	.word	0x40000400
 800c770:	40000800 	.word	0x40000800
 800c774:	40000c00 	.word	0x40000c00
 800c778:	40001800 	.word	0x40001800
 800c77c:	40014000 	.word	0x40014000
 800c780:	4000e000 	.word	0x4000e000
 800c784:	4000e400 	.word	0x4000e400

0800c788 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c792:	2300      	movs	r3, #0
 800c794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d101      	bne.n	800c7a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c7a0:	2302      	movs	r3, #2
 800c7a2:	e087      	b.n	800c8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	4313      	orrs	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	699b      	ldr	r3, [r3, #24]
 800c818:	041b      	lsls	r3, r3, #16
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a27      	ldr	r2, [pc, #156]	; (800c8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d004      	beq.n	800c832 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a25      	ldr	r2, [pc, #148]	; (800c8c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d106      	bne.n	800c840 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	69db      	ldr	r3, [r3, #28]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a1e      	ldr	r2, [pc, #120]	; (800c8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d004      	beq.n	800c854 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a1d      	ldr	r2, [pc, #116]	; (800c8c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d126      	bne.n	800c8a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85e:	051b      	lsls	r3, r3, #20
 800c860:	4313      	orrs	r3, r2
 800c862:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	4313      	orrs	r3, r2
 800c870:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87c:	4313      	orrs	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a0e      	ldr	r2, [pc, #56]	; (800c8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d004      	beq.n	800c894 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a0d      	ldr	r2, [pc, #52]	; (800c8c4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d106      	bne.n	800c8a2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	40010000 	.word	0x40010000
 800c8c4:	40010400 	.word	0x40010400

0800c8c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e042      	b.n	800c99c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d106      	bne.n	800c92e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7f8 fb09 	bl	8004f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2224      	movs	r2, #36	; 0x24
 800c932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f022 0201 	bic.w	r2, r2, #1
 800c944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 fcdc 	bl	800d304 <UART_SetConfig>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d101      	bne.n	800c956 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e022      	b.n	800c99c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d002      	beq.n	800c964 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f001 fb3c 	bl	800dfdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	689a      	ldr	r2, [r3, #8]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f042 0201 	orr.w	r2, r2, #1
 800c992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f001 fbc3 	bl	800e120 <UART_CheckIdleState>
 800c99a:	4603      	mov	r3, r0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08a      	sub	sp, #40	; 0x28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9b8:	2b20      	cmp	r3, #32
 800c9ba:	d17a      	bne.n	800cab2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <HAL_UART_Transmit_DMA+0x24>
 800c9c2:	88fb      	ldrh	r3, [r7, #6]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e073      	b.n	800cab4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d101      	bne.n	800c9da <HAL_UART_Transmit_DMA+0x36>
 800c9d6:	2302      	movs	r3, #2
 800c9d8:	e06c      	b.n	800cab4 <HAL_UART_Transmit_DMA+0x110>
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	88fa      	ldrh	r2, [r7, #6]
 800c9ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	88fa      	ldrh	r2, [r7, #6]
 800c9f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2221      	movs	r2, #33	; 0x21
 800ca04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d02c      	beq.n	800ca6a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca14:	4a29      	ldr	r2, [pc, #164]	; (800cabc <HAL_UART_Transmit_DMA+0x118>)
 800ca16:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca1c:	4a28      	ldr	r2, [pc, #160]	; (800cac0 <HAL_UART_Transmit_DMA+0x11c>)
 800ca1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca24:	4a27      	ldr	r2, [pc, #156]	; (800cac4 <HAL_UART_Transmit_DMA+0x120>)
 800ca26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca38:	4619      	mov	r1, r3
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	3328      	adds	r3, #40	; 0x28
 800ca40:	461a      	mov	r2, r3
 800ca42:	88fb      	ldrh	r3, [r7, #6]
 800ca44:	f7f9 fb54 	bl	80060f0 <HAL_DMA_Start_IT>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00d      	beq.n	800ca6a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2210      	movs	r2, #16
 800ca52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2220      	movs	r2, #32
 800ca62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e024      	b.n	800cab4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2240      	movs	r2, #64	; 0x40
 800ca70:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3308      	adds	r3, #8
 800ca80:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	e853 3f00 	ldrex	r3, [r3]
 800ca88:	613b      	str	r3, [r7, #16]
   return(result);
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3308      	adds	r3, #8
 800ca98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca9a:	623a      	str	r2, [r7, #32]
 800ca9c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9e:	69f9      	ldr	r1, [r7, #28]
 800caa0:	6a3a      	ldr	r2, [r7, #32]
 800caa2:	e841 2300 	strex	r3, r2, [r1]
 800caa6:	61bb      	str	r3, [r7, #24]
   return(result);
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1e5      	bne.n	800ca7a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	e000      	b.n	800cab4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cab2:	2302      	movs	r3, #2
  }
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3728      	adds	r7, #40	; 0x28
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	0800e5e9 	.word	0x0800e5e9
 800cac0:	0800e67f 	.word	0x0800e67f
 800cac4:	0800e7f5 	.word	0x0800e7f5

0800cac8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b08a      	sub	sp, #40	; 0x28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	4613      	mov	r3, r2
 800cad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cadc:	2b20      	cmp	r3, #32
 800cade:	d142      	bne.n	800cb66 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <HAL_UART_Receive_DMA+0x24>
 800cae6:	88fb      	ldrh	r3, [r7, #6]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d101      	bne.n	800caf0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800caec:	2301      	movs	r3, #1
 800caee:	e03b      	b.n	800cb68 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d101      	bne.n	800cafe <HAL_UART_Receive_DMA+0x36>
 800cafa:	2302      	movs	r3, #2
 800cafc:	e034      	b.n	800cb68 <HAL_UART_Receive_DMA+0xa0>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a17      	ldr	r2, [pc, #92]	; (800cb70 <HAL_UART_Receive_DMA+0xa8>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d01f      	beq.n	800cb56 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d018      	beq.n	800cb56 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	e853 3f00 	ldrex	r3, [r3]
 800cb30:	613b      	str	r3, [r7, #16]
   return(result);
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	623b      	str	r3, [r7, #32]
 800cb44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb46:	69f9      	ldr	r1, [r7, #28]
 800cb48:	6a3a      	ldr	r2, [r7, #32]
 800cb4a:	e841 2300 	strex	r3, r2, [r1]
 800cb4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1e6      	bne.n	800cb24 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb56:	88fb      	ldrh	r3, [r7, #6]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	68b9      	ldr	r1, [r7, #8]
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f001 fbf3 	bl	800e348 <UART_Start_Receive_DMA>
 800cb62:	4603      	mov	r3, r0
 800cb64:	e000      	b.n	800cb68 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cb66:	2302      	movs	r3, #2
  }
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3728      	adds	r7, #40	; 0x28
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	58000c00 	.word	0x58000c00

0800cb74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b0ba      	sub	sp, #232	; 0xe8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	69db      	ldr	r3, [r3, #28]
 800cb82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cb9e:	f640 030f 	movw	r3, #2063	; 0x80f
 800cba2:	4013      	ands	r3, r2
 800cba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d11b      	bne.n	800cbe8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbb4:	f003 0320 	and.w	r3, r3, #32
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d015      	beq.n	800cbe8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbc0:	f003 0320 	and.w	r3, r3, #32
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d105      	bne.n	800cbd4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d009      	beq.n	800cbe8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f000 835a 	beq.w	800d292 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	4798      	blx	r3
      }
      return;
 800cbe6:	e354      	b.n	800d292 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cbe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 811f 	beq.w	800ce30 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cbf2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cbf6:	4b8b      	ldr	r3, [pc, #556]	; (800ce24 <HAL_UART_IRQHandler+0x2b0>)
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d106      	bne.n	800cc0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cbfe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cc02:	4b89      	ldr	r3, [pc, #548]	; (800ce28 <HAL_UART_IRQHandler+0x2b4>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f000 8112 	beq.w	800ce30 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc10:	f003 0301 	and.w	r3, r3, #1
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d011      	beq.n	800cc3c <HAL_UART_IRQHandler+0xc8>
 800cc18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc32:	f043 0201 	orr.w	r2, r3, #1
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc40:	f003 0302 	and.w	r3, r3, #2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d011      	beq.n	800cc6c <HAL_UART_IRQHandler+0xf8>
 800cc48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00b      	beq.n	800cc6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2202      	movs	r2, #2
 800cc5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc62:	f043 0204 	orr.w	r2, r3, #4
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc70:	f003 0304 	and.w	r3, r3, #4
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d011      	beq.n	800cc9c <HAL_UART_IRQHandler+0x128>
 800cc78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d00b      	beq.n	800cc9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2204      	movs	r2, #4
 800cc8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc92:	f043 0202 	orr.w	r2, r3, #2
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cca0:	f003 0308 	and.w	r3, r3, #8
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d017      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ccac:	f003 0320 	and.w	r3, r3, #32
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d105      	bne.n	800ccc0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ccb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ccb8:	4b5a      	ldr	r3, [pc, #360]	; (800ce24 <HAL_UART_IRQHandler+0x2b0>)
 800ccba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2208      	movs	r2, #8
 800ccc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccce:	f043 0208 	orr.w	r2, r3, #8
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d012      	beq.n	800cd0a <HAL_UART_IRQHandler+0x196>
 800cce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00c      	beq.n	800cd0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd00:	f043 0220 	orr.w	r2, r3, #32
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 82c0 	beq.w	800d296 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd1a:	f003 0320 	and.w	r3, r3, #32
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d013      	beq.n	800cd4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd26:	f003 0320 	and.w	r3, r3, #32
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d105      	bne.n	800cd3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d007      	beq.n	800cd4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5e:	2b40      	cmp	r3, #64	; 0x40
 800cd60:	d005      	beq.n	800cd6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d04f      	beq.n	800ce0e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f001 fbd4 	bl	800e51c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd7e:	2b40      	cmp	r3, #64	; 0x40
 800cd80:	d141      	bne.n	800ce06 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3308      	adds	r3, #8
 800cd88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cd98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cda0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	3308      	adds	r3, #8
 800cdaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cdae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cdb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cdba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cdbe:	e841 2300 	strex	r3, r2, [r1]
 800cdc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cdc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1d9      	bne.n	800cd82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d013      	beq.n	800cdfe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdda:	4a14      	ldr	r2, [pc, #80]	; (800ce2c <HAL_UART_IRQHandler+0x2b8>)
 800cddc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f9 ff0c 	bl	8006c00 <HAL_DMA_Abort_IT>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d017      	beq.n	800ce1e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdfc:	e00f      	b.n	800ce1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 fa6a 	bl	800d2d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce04:	e00b      	b.n	800ce1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fa66 	bl	800d2d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce0c:	e007      	b.n	800ce1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 fa62 	bl	800d2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ce1c:	e23b      	b.n	800d296 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce1e:	bf00      	nop
    return;
 800ce20:	e239      	b.n	800d296 <HAL_UART_IRQHandler+0x722>
 800ce22:	bf00      	nop
 800ce24:	10000001 	.word	0x10000001
 800ce28:	04000120 	.word	0x04000120
 800ce2c:	0800e875 	.word	0x0800e875

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	f040 81ce 	bne.w	800d1d6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce3e:	f003 0310 	and.w	r3, r3, #16
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f000 81c7 	beq.w	800d1d6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce4c:	f003 0310 	and.w	r3, r3, #16
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 81c0 	beq.w	800d1d6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2210      	movs	r2, #16
 800ce5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce68:	2b40      	cmp	r3, #64	; 0x40
 800ce6a:	f040 813b 	bne.w	800d0e4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a8b      	ldr	r2, [pc, #556]	; (800d0a4 <HAL_UART_IRQHandler+0x530>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d059      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a89      	ldr	r2, [pc, #548]	; (800d0a8 <HAL_UART_IRQHandler+0x534>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d053      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a87      	ldr	r2, [pc, #540]	; (800d0ac <HAL_UART_IRQHandler+0x538>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d04d      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a85      	ldr	r2, [pc, #532]	; (800d0b0 <HAL_UART_IRQHandler+0x53c>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d047      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a83      	ldr	r2, [pc, #524]	; (800d0b4 <HAL_UART_IRQHandler+0x540>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d041      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a81      	ldr	r2, [pc, #516]	; (800d0b8 <HAL_UART_IRQHandler+0x544>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d03b      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a7f      	ldr	r2, [pc, #508]	; (800d0bc <HAL_UART_IRQHandler+0x548>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d035      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a7d      	ldr	r2, [pc, #500]	; (800d0c0 <HAL_UART_IRQHandler+0x54c>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d02f      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a7b      	ldr	r2, [pc, #492]	; (800d0c4 <HAL_UART_IRQHandler+0x550>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d029      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a79      	ldr	r2, [pc, #484]	; (800d0c8 <HAL_UART_IRQHandler+0x554>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d023      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a77      	ldr	r2, [pc, #476]	; (800d0cc <HAL_UART_IRQHandler+0x558>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d01d      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a75      	ldr	r2, [pc, #468]	; (800d0d0 <HAL_UART_IRQHandler+0x55c>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d017      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a73      	ldr	r2, [pc, #460]	; (800d0d4 <HAL_UART_IRQHandler+0x560>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d011      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a71      	ldr	r2, [pc, #452]	; (800d0d8 <HAL_UART_IRQHandler+0x564>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d00b      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a6f      	ldr	r2, [pc, #444]	; (800d0dc <HAL_UART_IRQHandler+0x568>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d005      	beq.n	800cf2e <HAL_UART_IRQHandler+0x3ba>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a6d      	ldr	r2, [pc, #436]	; (800d0e0 <HAL_UART_IRQHandler+0x56c>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d105      	bne.n	800cf3a <HAL_UART_IRQHandler+0x3c6>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	e004      	b.n	800cf44 <HAL_UART_IRQHandler+0x3d0>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cf48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 81a4 	beq.w	800d29a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	f080 819c 	bcs.w	800d29a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf70:	69db      	ldr	r3, [r3, #28]
 800cf72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf76:	f000 8086 	beq.w	800d086 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cf86:	e853 3f00 	ldrex	r3, [r3]
 800cf8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cf8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cf92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cfa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cfa8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cfb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cfb4:	e841 2300 	strex	r3, r2, [r1]
 800cfb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cfbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1da      	bne.n	800cf7a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	3308      	adds	r3, #8
 800cfca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfce:	e853 3f00 	ldrex	r3, [r3]
 800cfd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cfd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfd6:	f023 0301 	bic.w	r3, r3, #1
 800cfda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cfe8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cfec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cff0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cff4:	e841 2300 	strex	r3, r2, [r1]
 800cff8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1e1      	bne.n	800cfc4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3308      	adds	r3, #8
 800d006:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d00a:	e853 3f00 	ldrex	r3, [r3]
 800d00e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3308      	adds	r3, #8
 800d020:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d024:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d028:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d02a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d02c:	e841 2300 	strex	r3, r2, [r1]
 800d030:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1e3      	bne.n	800d000 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2220      	movs	r2, #32
 800d03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d04e:	e853 3f00 	ldrex	r3, [r3]
 800d052:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d056:	f023 0310 	bic.w	r3, r3, #16
 800d05a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d068:	65bb      	str	r3, [r7, #88]	; 0x58
 800d06a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d06e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d070:	e841 2300 	strex	r3, r2, [r1]
 800d074:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1e4      	bne.n	800d046 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d080:	4618      	mov	r0, r3
 800d082:	f7f9 fa9f 	bl	80065c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d092:	b29b      	uxth	r3, r3
 800d094:	1ad3      	subs	r3, r2, r3
 800d096:	b29b      	uxth	r3, r3
 800d098:	4619      	mov	r1, r3
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f926 	bl	800d2ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0a0:	e0fb      	b.n	800d29a <HAL_UART_IRQHandler+0x726>
 800d0a2:	bf00      	nop
 800d0a4:	40020010 	.word	0x40020010
 800d0a8:	40020028 	.word	0x40020028
 800d0ac:	40020040 	.word	0x40020040
 800d0b0:	40020058 	.word	0x40020058
 800d0b4:	40020070 	.word	0x40020070
 800d0b8:	40020088 	.word	0x40020088
 800d0bc:	400200a0 	.word	0x400200a0
 800d0c0:	400200b8 	.word	0x400200b8
 800d0c4:	40020410 	.word	0x40020410
 800d0c8:	40020428 	.word	0x40020428
 800d0cc:	40020440 	.word	0x40020440
 800d0d0:	40020458 	.word	0x40020458
 800d0d4:	40020470 	.word	0x40020470
 800d0d8:	40020488 	.word	0x40020488
 800d0dc:	400204a0 	.word	0x400204a0
 800d0e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	2b00      	cmp	r3, #0
 800d102:	f000 80cc 	beq.w	800d29e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 80c7 	beq.w	800d29e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d118:	e853 3f00 	ldrex	r3, [r3]
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	461a      	mov	r2, r3
 800d12e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d132:	647b      	str	r3, [r7, #68]	; 0x44
 800d134:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d136:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d13a:	e841 2300 	strex	r3, r2, [r1]
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1e4      	bne.n	800d110 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	3308      	adds	r3, #8
 800d14c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d150:	e853 3f00 	ldrex	r3, [r3]
 800d154:	623b      	str	r3, [r7, #32]
   return(result);
 800d156:	6a3a      	ldr	r2, [r7, #32]
 800d158:	4b54      	ldr	r3, [pc, #336]	; (800d2ac <HAL_UART_IRQHandler+0x738>)
 800d15a:	4013      	ands	r3, r2
 800d15c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	3308      	adds	r3, #8
 800d166:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d16a:	633a      	str	r2, [r7, #48]	; 0x30
 800d16c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d172:	e841 2300 	strex	r3, r2, [r1]
 800d176:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1e3      	bne.n	800d146 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2220      	movs	r2, #32
 800d182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2200      	movs	r2, #0
 800d18a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	e853 3f00 	ldrex	r3, [r3]
 800d19e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f023 0310 	bic.w	r3, r3, #16
 800d1a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d1b4:	61fb      	str	r3, [r7, #28]
 800d1b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b8:	69b9      	ldr	r1, [r7, #24]
 800d1ba:	69fa      	ldr	r2, [r7, #28]
 800d1bc:	e841 2300 	strex	r3, r2, [r1]
 800d1c0:	617b      	str	r3, [r7, #20]
   return(result);
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1e4      	bne.n	800d192 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d1c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 f88c 	bl	800d2ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d1d4:	e063      	b.n	800d29e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00e      	beq.n	800d200 <HAL_UART_IRQHandler+0x68c>
 800d1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d008      	beq.n	800d200 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d1f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f001 fb7c 	bl	800e8f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1fe:	e051      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d014      	beq.n	800d236 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d214:	2b00      	cmp	r3, #0
 800d216:	d105      	bne.n	800d224 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d21c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d220:	2b00      	cmp	r3, #0
 800d222:	d008      	beq.n	800d236 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d03a      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	4798      	blx	r3
    }
    return;
 800d234:	e035      	b.n	800d2a2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d009      	beq.n	800d256 <HAL_UART_IRQHandler+0x6e2>
 800d242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d003      	beq.n	800d256 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f001 fb26 	bl	800e8a0 <UART_EndTransmit_IT>
    return;
 800d254:	e026      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d25a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d009      	beq.n	800d276 <HAL_UART_IRQHandler+0x702>
 800d262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d266:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d003      	beq.n	800d276 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f001 fb55 	bl	800e91e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d274:	e016      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d27a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d010      	beq.n	800d2a4 <HAL_UART_IRQHandler+0x730>
 800d282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d286:	2b00      	cmp	r3, #0
 800d288:	da0c      	bge.n	800d2a4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f001 fb3d 	bl	800e90a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d290:	e008      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
      return;
 800d292:	bf00      	nop
 800d294:	e006      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
    return;
 800d296:	bf00      	nop
 800d298:	e004      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
      return;
 800d29a:	bf00      	nop
 800d29c:	e002      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
      return;
 800d29e:	bf00      	nop
 800d2a0:	e000      	b.n	800d2a4 <HAL_UART_IRQHandler+0x730>
    return;
 800d2a2:	bf00      	nop
  }
}
 800d2a4:	37e8      	adds	r7, #232	; 0xe8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	effffffe 	.word	0xeffffffe

0800d2b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d2e0:	bf00      	nop
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d308:	b092      	sub	sp, #72	; 0x48
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	689a      	ldr	r2, [r3, #8]
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	691b      	ldr	r3, [r3, #16]
 800d31c:	431a      	orrs	r2, r3
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	431a      	orrs	r2, r3
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	4313      	orrs	r3, r2
 800d32a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	4bbe      	ldr	r3, [pc, #760]	; (800d62c <UART_SetConfig+0x328>)
 800d334:	4013      	ands	r3, r2
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	6812      	ldr	r2, [r2, #0]
 800d33a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d33c:	430b      	orrs	r3, r1
 800d33e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	68da      	ldr	r2, [r3, #12]
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	430a      	orrs	r2, r1
 800d354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4ab3      	ldr	r2, [pc, #716]	; (800d630 <UART_SetConfig+0x32c>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d004      	beq.n	800d370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d36c:	4313      	orrs	r3, r2
 800d36e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	689a      	ldr	r2, [r3, #8]
 800d376:	4baf      	ldr	r3, [pc, #700]	; (800d634 <UART_SetConfig+0x330>)
 800d378:	4013      	ands	r3, r2
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	6812      	ldr	r2, [r2, #0]
 800d37e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d380:	430b      	orrs	r3, r1
 800d382:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38a:	f023 010f 	bic.w	r1, r3, #15
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	430a      	orrs	r2, r1
 800d398:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4aa6      	ldr	r2, [pc, #664]	; (800d638 <UART_SetConfig+0x334>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d177      	bne.n	800d494 <UART_SetConfig+0x190>
 800d3a4:	4ba5      	ldr	r3, [pc, #660]	; (800d63c <UART_SetConfig+0x338>)
 800d3a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d3ac:	2b28      	cmp	r3, #40	; 0x28
 800d3ae:	d86d      	bhi.n	800d48c <UART_SetConfig+0x188>
 800d3b0:	a201      	add	r2, pc, #4	; (adr r2, 800d3b8 <UART_SetConfig+0xb4>)
 800d3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b6:	bf00      	nop
 800d3b8:	0800d45d 	.word	0x0800d45d
 800d3bc:	0800d48d 	.word	0x0800d48d
 800d3c0:	0800d48d 	.word	0x0800d48d
 800d3c4:	0800d48d 	.word	0x0800d48d
 800d3c8:	0800d48d 	.word	0x0800d48d
 800d3cc:	0800d48d 	.word	0x0800d48d
 800d3d0:	0800d48d 	.word	0x0800d48d
 800d3d4:	0800d48d 	.word	0x0800d48d
 800d3d8:	0800d465 	.word	0x0800d465
 800d3dc:	0800d48d 	.word	0x0800d48d
 800d3e0:	0800d48d 	.word	0x0800d48d
 800d3e4:	0800d48d 	.word	0x0800d48d
 800d3e8:	0800d48d 	.word	0x0800d48d
 800d3ec:	0800d48d 	.word	0x0800d48d
 800d3f0:	0800d48d 	.word	0x0800d48d
 800d3f4:	0800d48d 	.word	0x0800d48d
 800d3f8:	0800d46d 	.word	0x0800d46d
 800d3fc:	0800d48d 	.word	0x0800d48d
 800d400:	0800d48d 	.word	0x0800d48d
 800d404:	0800d48d 	.word	0x0800d48d
 800d408:	0800d48d 	.word	0x0800d48d
 800d40c:	0800d48d 	.word	0x0800d48d
 800d410:	0800d48d 	.word	0x0800d48d
 800d414:	0800d48d 	.word	0x0800d48d
 800d418:	0800d475 	.word	0x0800d475
 800d41c:	0800d48d 	.word	0x0800d48d
 800d420:	0800d48d 	.word	0x0800d48d
 800d424:	0800d48d 	.word	0x0800d48d
 800d428:	0800d48d 	.word	0x0800d48d
 800d42c:	0800d48d 	.word	0x0800d48d
 800d430:	0800d48d 	.word	0x0800d48d
 800d434:	0800d48d 	.word	0x0800d48d
 800d438:	0800d47d 	.word	0x0800d47d
 800d43c:	0800d48d 	.word	0x0800d48d
 800d440:	0800d48d 	.word	0x0800d48d
 800d444:	0800d48d 	.word	0x0800d48d
 800d448:	0800d48d 	.word	0x0800d48d
 800d44c:	0800d48d 	.word	0x0800d48d
 800d450:	0800d48d 	.word	0x0800d48d
 800d454:	0800d48d 	.word	0x0800d48d
 800d458:	0800d485 	.word	0x0800d485
 800d45c:	2301      	movs	r3, #1
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e326      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d464:	2304      	movs	r3, #4
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46a:	e322      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d46c:	2308      	movs	r3, #8
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d472:	e31e      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d474:	2310      	movs	r3, #16
 800d476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47a:	e31a      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d47c:	2320      	movs	r3, #32
 800d47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d482:	e316      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d484:	2340      	movs	r3, #64	; 0x40
 800d486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d48a:	e312      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d48c:	2380      	movs	r3, #128	; 0x80
 800d48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d492:	e30e      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a69      	ldr	r2, [pc, #420]	; (800d640 <UART_SetConfig+0x33c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d130      	bne.n	800d500 <UART_SetConfig+0x1fc>
 800d49e:	4b67      	ldr	r3, [pc, #412]	; (800d63c <UART_SetConfig+0x338>)
 800d4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4a2:	f003 0307 	and.w	r3, r3, #7
 800d4a6:	2b05      	cmp	r3, #5
 800d4a8:	d826      	bhi.n	800d4f8 <UART_SetConfig+0x1f4>
 800d4aa:	a201      	add	r2, pc, #4	; (adr r2, 800d4b0 <UART_SetConfig+0x1ac>)
 800d4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b0:	0800d4c9 	.word	0x0800d4c9
 800d4b4:	0800d4d1 	.word	0x0800d4d1
 800d4b8:	0800d4d9 	.word	0x0800d4d9
 800d4bc:	0800d4e1 	.word	0x0800d4e1
 800d4c0:	0800d4e9 	.word	0x0800d4e9
 800d4c4:	0800d4f1 	.word	0x0800d4f1
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ce:	e2f0      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d4d0:	2304      	movs	r3, #4
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d6:	e2ec      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d4d8:	2308      	movs	r3, #8
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4de:	e2e8      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d4e0:	2310      	movs	r3, #16
 800d4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4e6:	e2e4      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d4e8:	2320      	movs	r3, #32
 800d4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ee:	e2e0      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d4f0:	2340      	movs	r3, #64	; 0x40
 800d4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4f6:	e2dc      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d4f8:	2380      	movs	r3, #128	; 0x80
 800d4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4fe:	e2d8      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a4f      	ldr	r2, [pc, #316]	; (800d644 <UART_SetConfig+0x340>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d130      	bne.n	800d56c <UART_SetConfig+0x268>
 800d50a:	4b4c      	ldr	r3, [pc, #304]	; (800d63c <UART_SetConfig+0x338>)
 800d50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d50e:	f003 0307 	and.w	r3, r3, #7
 800d512:	2b05      	cmp	r3, #5
 800d514:	d826      	bhi.n	800d564 <UART_SetConfig+0x260>
 800d516:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <UART_SetConfig+0x218>)
 800d518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51c:	0800d535 	.word	0x0800d535
 800d520:	0800d53d 	.word	0x0800d53d
 800d524:	0800d545 	.word	0x0800d545
 800d528:	0800d54d 	.word	0x0800d54d
 800d52c:	0800d555 	.word	0x0800d555
 800d530:	0800d55d 	.word	0x0800d55d
 800d534:	2300      	movs	r3, #0
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53a:	e2ba      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d53c:	2304      	movs	r3, #4
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d542:	e2b6      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d544:	2308      	movs	r3, #8
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d54a:	e2b2      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d54c:	2310      	movs	r3, #16
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d552:	e2ae      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d554:	2320      	movs	r3, #32
 800d556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d55a:	e2aa      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d55c:	2340      	movs	r3, #64	; 0x40
 800d55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d562:	e2a6      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d564:	2380      	movs	r3, #128	; 0x80
 800d566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d56a:	e2a2      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a35      	ldr	r2, [pc, #212]	; (800d648 <UART_SetConfig+0x344>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d130      	bne.n	800d5d8 <UART_SetConfig+0x2d4>
 800d576:	4b31      	ldr	r3, [pc, #196]	; (800d63c <UART_SetConfig+0x338>)
 800d578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d57a:	f003 0307 	and.w	r3, r3, #7
 800d57e:	2b05      	cmp	r3, #5
 800d580:	d826      	bhi.n	800d5d0 <UART_SetConfig+0x2cc>
 800d582:	a201      	add	r2, pc, #4	; (adr r2, 800d588 <UART_SetConfig+0x284>)
 800d584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d588:	0800d5a1 	.word	0x0800d5a1
 800d58c:	0800d5a9 	.word	0x0800d5a9
 800d590:	0800d5b1 	.word	0x0800d5b1
 800d594:	0800d5b9 	.word	0x0800d5b9
 800d598:	0800d5c1 	.word	0x0800d5c1
 800d59c:	0800d5c9 	.word	0x0800d5c9
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a6:	e284      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d5a8:	2304      	movs	r3, #4
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ae:	e280      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d5b0:	2308      	movs	r3, #8
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b6:	e27c      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d5b8:	2310      	movs	r3, #16
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5be:	e278      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d5c0:	2320      	movs	r3, #32
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5c6:	e274      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d5c8:	2340      	movs	r3, #64	; 0x40
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ce:	e270      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d5d0:	2380      	movs	r3, #128	; 0x80
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5d6:	e26c      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a1b      	ldr	r2, [pc, #108]	; (800d64c <UART_SetConfig+0x348>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d142      	bne.n	800d668 <UART_SetConfig+0x364>
 800d5e2:	4b16      	ldr	r3, [pc, #88]	; (800d63c <UART_SetConfig+0x338>)
 800d5e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5e6:	f003 0307 	and.w	r3, r3, #7
 800d5ea:	2b05      	cmp	r3, #5
 800d5ec:	d838      	bhi.n	800d660 <UART_SetConfig+0x35c>
 800d5ee:	a201      	add	r2, pc, #4	; (adr r2, 800d5f4 <UART_SetConfig+0x2f0>)
 800d5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f4:	0800d60d 	.word	0x0800d60d
 800d5f8:	0800d615 	.word	0x0800d615
 800d5fc:	0800d61d 	.word	0x0800d61d
 800d600:	0800d625 	.word	0x0800d625
 800d604:	0800d651 	.word	0x0800d651
 800d608:	0800d659 	.word	0x0800d659
 800d60c:	2300      	movs	r3, #0
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d612:	e24e      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d614:	2304      	movs	r3, #4
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61a:	e24a      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d61c:	2308      	movs	r3, #8
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d622:	e246      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d624:	2310      	movs	r3, #16
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d62a:	e242      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d62c:	cfff69f3 	.word	0xcfff69f3
 800d630:	58000c00 	.word	0x58000c00
 800d634:	11fff4ff 	.word	0x11fff4ff
 800d638:	40011000 	.word	0x40011000
 800d63c:	58024400 	.word	0x58024400
 800d640:	40004400 	.word	0x40004400
 800d644:	40004800 	.word	0x40004800
 800d648:	40004c00 	.word	0x40004c00
 800d64c:	40005000 	.word	0x40005000
 800d650:	2320      	movs	r3, #32
 800d652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d656:	e22c      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d658:	2340      	movs	r3, #64	; 0x40
 800d65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65e:	e228      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d660:	2380      	movs	r3, #128	; 0x80
 800d662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d666:	e224      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4ab1      	ldr	r2, [pc, #708]	; (800d934 <UART_SetConfig+0x630>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d176      	bne.n	800d760 <UART_SetConfig+0x45c>
 800d672:	4bb1      	ldr	r3, [pc, #708]	; (800d938 <UART_SetConfig+0x634>)
 800d674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d67a:	2b28      	cmp	r3, #40	; 0x28
 800d67c:	d86c      	bhi.n	800d758 <UART_SetConfig+0x454>
 800d67e:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <UART_SetConfig+0x380>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d729 	.word	0x0800d729
 800d688:	0800d759 	.word	0x0800d759
 800d68c:	0800d759 	.word	0x0800d759
 800d690:	0800d759 	.word	0x0800d759
 800d694:	0800d759 	.word	0x0800d759
 800d698:	0800d759 	.word	0x0800d759
 800d69c:	0800d759 	.word	0x0800d759
 800d6a0:	0800d759 	.word	0x0800d759
 800d6a4:	0800d731 	.word	0x0800d731
 800d6a8:	0800d759 	.word	0x0800d759
 800d6ac:	0800d759 	.word	0x0800d759
 800d6b0:	0800d759 	.word	0x0800d759
 800d6b4:	0800d759 	.word	0x0800d759
 800d6b8:	0800d759 	.word	0x0800d759
 800d6bc:	0800d759 	.word	0x0800d759
 800d6c0:	0800d759 	.word	0x0800d759
 800d6c4:	0800d739 	.word	0x0800d739
 800d6c8:	0800d759 	.word	0x0800d759
 800d6cc:	0800d759 	.word	0x0800d759
 800d6d0:	0800d759 	.word	0x0800d759
 800d6d4:	0800d759 	.word	0x0800d759
 800d6d8:	0800d759 	.word	0x0800d759
 800d6dc:	0800d759 	.word	0x0800d759
 800d6e0:	0800d759 	.word	0x0800d759
 800d6e4:	0800d741 	.word	0x0800d741
 800d6e8:	0800d759 	.word	0x0800d759
 800d6ec:	0800d759 	.word	0x0800d759
 800d6f0:	0800d759 	.word	0x0800d759
 800d6f4:	0800d759 	.word	0x0800d759
 800d6f8:	0800d759 	.word	0x0800d759
 800d6fc:	0800d759 	.word	0x0800d759
 800d700:	0800d759 	.word	0x0800d759
 800d704:	0800d749 	.word	0x0800d749
 800d708:	0800d759 	.word	0x0800d759
 800d70c:	0800d759 	.word	0x0800d759
 800d710:	0800d759 	.word	0x0800d759
 800d714:	0800d759 	.word	0x0800d759
 800d718:	0800d759 	.word	0x0800d759
 800d71c:	0800d759 	.word	0x0800d759
 800d720:	0800d759 	.word	0x0800d759
 800d724:	0800d751 	.word	0x0800d751
 800d728:	2301      	movs	r3, #1
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e1c0      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d730:	2304      	movs	r3, #4
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e1bc      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d738:	2308      	movs	r3, #8
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73e:	e1b8      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d740:	2310      	movs	r3, #16
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d746:	e1b4      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d748:	2320      	movs	r3, #32
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e1b0      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d750:	2340      	movs	r3, #64	; 0x40
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d756:	e1ac      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d758:	2380      	movs	r3, #128	; 0x80
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75e:	e1a8      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a75      	ldr	r2, [pc, #468]	; (800d93c <UART_SetConfig+0x638>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d130      	bne.n	800d7cc <UART_SetConfig+0x4c8>
 800d76a:	4b73      	ldr	r3, [pc, #460]	; (800d938 <UART_SetConfig+0x634>)
 800d76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76e:	f003 0307 	and.w	r3, r3, #7
 800d772:	2b05      	cmp	r3, #5
 800d774:	d826      	bhi.n	800d7c4 <UART_SetConfig+0x4c0>
 800d776:	a201      	add	r2, pc, #4	; (adr r2, 800d77c <UART_SetConfig+0x478>)
 800d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77c:	0800d795 	.word	0x0800d795
 800d780:	0800d79d 	.word	0x0800d79d
 800d784:	0800d7a5 	.word	0x0800d7a5
 800d788:	0800d7ad 	.word	0x0800d7ad
 800d78c:	0800d7b5 	.word	0x0800d7b5
 800d790:	0800d7bd 	.word	0x0800d7bd
 800d794:	2300      	movs	r3, #0
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e18a      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d79c:	2304      	movs	r3, #4
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e186      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d7a4:	2308      	movs	r3, #8
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7aa:	e182      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e17e      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d7b4:	2320      	movs	r3, #32
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e17a      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d7bc:	2340      	movs	r3, #64	; 0x40
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c2:	e176      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d7c4:	2380      	movs	r3, #128	; 0x80
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ca:	e172      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a5b      	ldr	r2, [pc, #364]	; (800d940 <UART_SetConfig+0x63c>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d130      	bne.n	800d838 <UART_SetConfig+0x534>
 800d7d6:	4b58      	ldr	r3, [pc, #352]	; (800d938 <UART_SetConfig+0x634>)
 800d7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7da:	f003 0307 	and.w	r3, r3, #7
 800d7de:	2b05      	cmp	r3, #5
 800d7e0:	d826      	bhi.n	800d830 <UART_SetConfig+0x52c>
 800d7e2:	a201      	add	r2, pc, #4	; (adr r2, 800d7e8 <UART_SetConfig+0x4e4>)
 800d7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e8:	0800d801 	.word	0x0800d801
 800d7ec:	0800d809 	.word	0x0800d809
 800d7f0:	0800d811 	.word	0x0800d811
 800d7f4:	0800d819 	.word	0x0800d819
 800d7f8:	0800d821 	.word	0x0800d821
 800d7fc:	0800d829 	.word	0x0800d829
 800d800:	2300      	movs	r3, #0
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e154      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d808:	2304      	movs	r3, #4
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80e:	e150      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d810:	2308      	movs	r3, #8
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d816:	e14c      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d818:	2310      	movs	r3, #16
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81e:	e148      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d820:	2320      	movs	r3, #32
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d826:	e144      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d828:	2340      	movs	r3, #64	; 0x40
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82e:	e140      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d830:	2380      	movs	r3, #128	; 0x80
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d836:	e13c      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a41      	ldr	r2, [pc, #260]	; (800d944 <UART_SetConfig+0x640>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	f040 8082 	bne.w	800d948 <UART_SetConfig+0x644>
 800d844:	4b3c      	ldr	r3, [pc, #240]	; (800d938 <UART_SetConfig+0x634>)
 800d846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d84c:	2b28      	cmp	r3, #40	; 0x28
 800d84e:	d86d      	bhi.n	800d92c <UART_SetConfig+0x628>
 800d850:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <UART_SetConfig+0x554>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d8fd 	.word	0x0800d8fd
 800d85c:	0800d92d 	.word	0x0800d92d
 800d860:	0800d92d 	.word	0x0800d92d
 800d864:	0800d92d 	.word	0x0800d92d
 800d868:	0800d92d 	.word	0x0800d92d
 800d86c:	0800d92d 	.word	0x0800d92d
 800d870:	0800d92d 	.word	0x0800d92d
 800d874:	0800d92d 	.word	0x0800d92d
 800d878:	0800d905 	.word	0x0800d905
 800d87c:	0800d92d 	.word	0x0800d92d
 800d880:	0800d92d 	.word	0x0800d92d
 800d884:	0800d92d 	.word	0x0800d92d
 800d888:	0800d92d 	.word	0x0800d92d
 800d88c:	0800d92d 	.word	0x0800d92d
 800d890:	0800d92d 	.word	0x0800d92d
 800d894:	0800d92d 	.word	0x0800d92d
 800d898:	0800d90d 	.word	0x0800d90d
 800d89c:	0800d92d 	.word	0x0800d92d
 800d8a0:	0800d92d 	.word	0x0800d92d
 800d8a4:	0800d92d 	.word	0x0800d92d
 800d8a8:	0800d92d 	.word	0x0800d92d
 800d8ac:	0800d92d 	.word	0x0800d92d
 800d8b0:	0800d92d 	.word	0x0800d92d
 800d8b4:	0800d92d 	.word	0x0800d92d
 800d8b8:	0800d915 	.word	0x0800d915
 800d8bc:	0800d92d 	.word	0x0800d92d
 800d8c0:	0800d92d 	.word	0x0800d92d
 800d8c4:	0800d92d 	.word	0x0800d92d
 800d8c8:	0800d92d 	.word	0x0800d92d
 800d8cc:	0800d92d 	.word	0x0800d92d
 800d8d0:	0800d92d 	.word	0x0800d92d
 800d8d4:	0800d92d 	.word	0x0800d92d
 800d8d8:	0800d91d 	.word	0x0800d91d
 800d8dc:	0800d92d 	.word	0x0800d92d
 800d8e0:	0800d92d 	.word	0x0800d92d
 800d8e4:	0800d92d 	.word	0x0800d92d
 800d8e8:	0800d92d 	.word	0x0800d92d
 800d8ec:	0800d92d 	.word	0x0800d92d
 800d8f0:	0800d92d 	.word	0x0800d92d
 800d8f4:	0800d92d 	.word	0x0800d92d
 800d8f8:	0800d925 	.word	0x0800d925
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e0d6      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d904:	2304      	movs	r3, #4
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e0d2      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d90c:	2308      	movs	r3, #8
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d912:	e0ce      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d914:	2310      	movs	r3, #16
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91a:	e0ca      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d91c:	2320      	movs	r3, #32
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d922:	e0c6      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d924:	2340      	movs	r3, #64	; 0x40
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92a:	e0c2      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d92c:	2380      	movs	r3, #128	; 0x80
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d932:	e0be      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800d934:	40011400 	.word	0x40011400
 800d938:	58024400 	.word	0x58024400
 800d93c:	40007800 	.word	0x40007800
 800d940:	40007c00 	.word	0x40007c00
 800d944:	40011800 	.word	0x40011800
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4aad      	ldr	r2, [pc, #692]	; (800dc04 <UART_SetConfig+0x900>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d176      	bne.n	800da40 <UART_SetConfig+0x73c>
 800d952:	4bad      	ldr	r3, [pc, #692]	; (800dc08 <UART_SetConfig+0x904>)
 800d954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d95a:	2b28      	cmp	r3, #40	; 0x28
 800d95c:	d86c      	bhi.n	800da38 <UART_SetConfig+0x734>
 800d95e:	a201      	add	r2, pc, #4	; (adr r2, 800d964 <UART_SetConfig+0x660>)
 800d960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d964:	0800da09 	.word	0x0800da09
 800d968:	0800da39 	.word	0x0800da39
 800d96c:	0800da39 	.word	0x0800da39
 800d970:	0800da39 	.word	0x0800da39
 800d974:	0800da39 	.word	0x0800da39
 800d978:	0800da39 	.word	0x0800da39
 800d97c:	0800da39 	.word	0x0800da39
 800d980:	0800da39 	.word	0x0800da39
 800d984:	0800da11 	.word	0x0800da11
 800d988:	0800da39 	.word	0x0800da39
 800d98c:	0800da39 	.word	0x0800da39
 800d990:	0800da39 	.word	0x0800da39
 800d994:	0800da39 	.word	0x0800da39
 800d998:	0800da39 	.word	0x0800da39
 800d99c:	0800da39 	.word	0x0800da39
 800d9a0:	0800da39 	.word	0x0800da39
 800d9a4:	0800da19 	.word	0x0800da19
 800d9a8:	0800da39 	.word	0x0800da39
 800d9ac:	0800da39 	.word	0x0800da39
 800d9b0:	0800da39 	.word	0x0800da39
 800d9b4:	0800da39 	.word	0x0800da39
 800d9b8:	0800da39 	.word	0x0800da39
 800d9bc:	0800da39 	.word	0x0800da39
 800d9c0:	0800da39 	.word	0x0800da39
 800d9c4:	0800da21 	.word	0x0800da21
 800d9c8:	0800da39 	.word	0x0800da39
 800d9cc:	0800da39 	.word	0x0800da39
 800d9d0:	0800da39 	.word	0x0800da39
 800d9d4:	0800da39 	.word	0x0800da39
 800d9d8:	0800da39 	.word	0x0800da39
 800d9dc:	0800da39 	.word	0x0800da39
 800d9e0:	0800da39 	.word	0x0800da39
 800d9e4:	0800da29 	.word	0x0800da29
 800d9e8:	0800da39 	.word	0x0800da39
 800d9ec:	0800da39 	.word	0x0800da39
 800d9f0:	0800da39 	.word	0x0800da39
 800d9f4:	0800da39 	.word	0x0800da39
 800d9f8:	0800da39 	.word	0x0800da39
 800d9fc:	0800da39 	.word	0x0800da39
 800da00:	0800da39 	.word	0x0800da39
 800da04:	0800da31 	.word	0x0800da31
 800da08:	2301      	movs	r3, #1
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e050      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da10:	2304      	movs	r3, #4
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e04c      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da18:	2308      	movs	r3, #8
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1e:	e048      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da20:	2310      	movs	r3, #16
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da26:	e044      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da28:	2320      	movs	r3, #32
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2e:	e040      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da30:	2340      	movs	r3, #64	; 0x40
 800da32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da36:	e03c      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da38:	2380      	movs	r3, #128	; 0x80
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3e:	e038      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a71      	ldr	r2, [pc, #452]	; (800dc0c <UART_SetConfig+0x908>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d130      	bne.n	800daac <UART_SetConfig+0x7a8>
 800da4a:	4b6f      	ldr	r3, [pc, #444]	; (800dc08 <UART_SetConfig+0x904>)
 800da4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da4e:	f003 0307 	and.w	r3, r3, #7
 800da52:	2b05      	cmp	r3, #5
 800da54:	d826      	bhi.n	800daa4 <UART_SetConfig+0x7a0>
 800da56:	a201      	add	r2, pc, #4	; (adr r2, 800da5c <UART_SetConfig+0x758>)
 800da58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5c:	0800da75 	.word	0x0800da75
 800da60:	0800da7d 	.word	0x0800da7d
 800da64:	0800da85 	.word	0x0800da85
 800da68:	0800da8d 	.word	0x0800da8d
 800da6c:	0800da95 	.word	0x0800da95
 800da70:	0800da9d 	.word	0x0800da9d
 800da74:	2302      	movs	r3, #2
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7a:	e01a      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da7c:	2304      	movs	r3, #4
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e016      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da84:	2308      	movs	r3, #8
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8a:	e012      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da8c:	2310      	movs	r3, #16
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da92:	e00e      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da94:	2320      	movs	r3, #32
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9a:	e00a      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800da9c:	2340      	movs	r3, #64	; 0x40
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa2:	e006      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800daa4:	2380      	movs	r3, #128	; 0x80
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daaa:	e002      	b.n	800dab2 <UART_SetConfig+0x7ae>
 800daac:	2380      	movs	r3, #128	; 0x80
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a55      	ldr	r2, [pc, #340]	; (800dc0c <UART_SetConfig+0x908>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	f040 80f8 	bne.w	800dcae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dabe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dac2:	2b20      	cmp	r3, #32
 800dac4:	dc46      	bgt.n	800db54 <UART_SetConfig+0x850>
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	db75      	blt.n	800dbb6 <UART_SetConfig+0x8b2>
 800daca:	3b02      	subs	r3, #2
 800dacc:	2b1e      	cmp	r3, #30
 800dace:	d872      	bhi.n	800dbb6 <UART_SetConfig+0x8b2>
 800dad0:	a201      	add	r2, pc, #4	; (adr r2, 800dad8 <UART_SetConfig+0x7d4>)
 800dad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad6:	bf00      	nop
 800dad8:	0800db5b 	.word	0x0800db5b
 800dadc:	0800dbb7 	.word	0x0800dbb7
 800dae0:	0800db63 	.word	0x0800db63
 800dae4:	0800dbb7 	.word	0x0800dbb7
 800dae8:	0800dbb7 	.word	0x0800dbb7
 800daec:	0800dbb7 	.word	0x0800dbb7
 800daf0:	0800db73 	.word	0x0800db73
 800daf4:	0800dbb7 	.word	0x0800dbb7
 800daf8:	0800dbb7 	.word	0x0800dbb7
 800dafc:	0800dbb7 	.word	0x0800dbb7
 800db00:	0800dbb7 	.word	0x0800dbb7
 800db04:	0800dbb7 	.word	0x0800dbb7
 800db08:	0800dbb7 	.word	0x0800dbb7
 800db0c:	0800dbb7 	.word	0x0800dbb7
 800db10:	0800db83 	.word	0x0800db83
 800db14:	0800dbb7 	.word	0x0800dbb7
 800db18:	0800dbb7 	.word	0x0800dbb7
 800db1c:	0800dbb7 	.word	0x0800dbb7
 800db20:	0800dbb7 	.word	0x0800dbb7
 800db24:	0800dbb7 	.word	0x0800dbb7
 800db28:	0800dbb7 	.word	0x0800dbb7
 800db2c:	0800dbb7 	.word	0x0800dbb7
 800db30:	0800dbb7 	.word	0x0800dbb7
 800db34:	0800dbb7 	.word	0x0800dbb7
 800db38:	0800dbb7 	.word	0x0800dbb7
 800db3c:	0800dbb7 	.word	0x0800dbb7
 800db40:	0800dbb7 	.word	0x0800dbb7
 800db44:	0800dbb7 	.word	0x0800dbb7
 800db48:	0800dbb7 	.word	0x0800dbb7
 800db4c:	0800dbb7 	.word	0x0800dbb7
 800db50:	0800dba9 	.word	0x0800dba9
 800db54:	2b40      	cmp	r3, #64	; 0x40
 800db56:	d02a      	beq.n	800dbae <UART_SetConfig+0x8aa>
 800db58:	e02d      	b.n	800dbb6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db5a:	f7fc fdf1 	bl	800a740 <HAL_RCCEx_GetD3PCLK1Freq>
 800db5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db60:	e02f      	b.n	800dbc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db66:	4618      	mov	r0, r3
 800db68:	f7fc fe00 	bl	800a76c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db70:	e027      	b.n	800dbc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db72:	f107 0318 	add.w	r3, r7, #24
 800db76:	4618      	mov	r0, r3
 800db78:	f7fc ff4c 	bl	800aa14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db80:	e01f      	b.n	800dbc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db82:	4b21      	ldr	r3, [pc, #132]	; (800dc08 <UART_SetConfig+0x904>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f003 0320 	and.w	r3, r3, #32
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d009      	beq.n	800dba2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db8e:	4b1e      	ldr	r3, [pc, #120]	; (800dc08 <UART_SetConfig+0x904>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	08db      	lsrs	r3, r3, #3
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	4a1d      	ldr	r2, [pc, #116]	; (800dc10 <UART_SetConfig+0x90c>)
 800db9a:	fa22 f303 	lsr.w	r3, r2, r3
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dba0:	e00f      	b.n	800dbc2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dba2:	4b1b      	ldr	r3, [pc, #108]	; (800dc10 <UART_SetConfig+0x90c>)
 800dba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dba6:	e00c      	b.n	800dbc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dba8:	4b1a      	ldr	r3, [pc, #104]	; (800dc14 <UART_SetConfig+0x910>)
 800dbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbac:	e009      	b.n	800dbc2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbb4:	e005      	b.n	800dbc2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dbba:	2301      	movs	r3, #1
 800dbbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dbc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f000 81ee 	beq.w	800dfa6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbce:	4a12      	ldr	r2, [pc, #72]	; (800dc18 <UART_SetConfig+0x914>)
 800dbd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbdc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	685a      	ldr	r2, [r3, #4]
 800dbe2:	4613      	mov	r3, r2
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	4413      	add	r3, r2
 800dbe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d305      	bcc.n	800dbfa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d910      	bls.n	800dc1c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc00:	e1d1      	b.n	800dfa6 <UART_SetConfig+0xca2>
 800dc02:	bf00      	nop
 800dc04:	40011c00 	.word	0x40011c00
 800dc08:	58024400 	.word	0x58024400
 800dc0c:	58000c00 	.word	0x58000c00
 800dc10:	03d09000 	.word	0x03d09000
 800dc14:	003d0900 	.word	0x003d0900
 800dc18:	0800f234 	.word	0x0800f234
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc1e:	2200      	movs	r2, #0
 800dc20:	60bb      	str	r3, [r7, #8]
 800dc22:	60fa      	str	r2, [r7, #12]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	4ac0      	ldr	r2, [pc, #768]	; (800df2c <UART_SetConfig+0xc28>)
 800dc2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	2200      	movs	r2, #0
 800dc32:	603b      	str	r3, [r7, #0]
 800dc34:	607a      	str	r2, [r7, #4]
 800dc36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc3e:	f7f2 fd2b 	bl	8000698 <__aeabi_uldivmod>
 800dc42:	4602      	mov	r2, r0
 800dc44:	460b      	mov	r3, r1
 800dc46:	4610      	mov	r0, r2
 800dc48:	4619      	mov	r1, r3
 800dc4a:	f04f 0200 	mov.w	r2, #0
 800dc4e:	f04f 0300 	mov.w	r3, #0
 800dc52:	020b      	lsls	r3, r1, #8
 800dc54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc58:	0202      	lsls	r2, r0, #8
 800dc5a:	6979      	ldr	r1, [r7, #20]
 800dc5c:	6849      	ldr	r1, [r1, #4]
 800dc5e:	0849      	lsrs	r1, r1, #1
 800dc60:	2000      	movs	r0, #0
 800dc62:	460c      	mov	r4, r1
 800dc64:	4605      	mov	r5, r0
 800dc66:	eb12 0804 	adds.w	r8, r2, r4
 800dc6a:	eb43 0905 	adc.w	r9, r3, r5
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	2200      	movs	r2, #0
 800dc74:	469a      	mov	sl, r3
 800dc76:	4693      	mov	fp, r2
 800dc78:	4652      	mov	r2, sl
 800dc7a:	465b      	mov	r3, fp
 800dc7c:	4640      	mov	r0, r8
 800dc7e:	4649      	mov	r1, r9
 800dc80:	f7f2 fd0a 	bl	8000698 <__aeabi_uldivmod>
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	4613      	mov	r3, r2
 800dc8a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc92:	d308      	bcc.n	800dca6 <UART_SetConfig+0x9a2>
 800dc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc9a:	d204      	bcs.n	800dca6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dca2:	60da      	str	r2, [r3, #12]
 800dca4:	e17f      	b.n	800dfa6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dcac:	e17b      	b.n	800dfa6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	69db      	ldr	r3, [r3, #28]
 800dcb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcb6:	f040 80bd 	bne.w	800de34 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dcba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcbe:	2b20      	cmp	r3, #32
 800dcc0:	dc48      	bgt.n	800dd54 <UART_SetConfig+0xa50>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	db7b      	blt.n	800ddbe <UART_SetConfig+0xaba>
 800dcc6:	2b20      	cmp	r3, #32
 800dcc8:	d879      	bhi.n	800ddbe <UART_SetConfig+0xaba>
 800dcca:	a201      	add	r2, pc, #4	; (adr r2, 800dcd0 <UART_SetConfig+0x9cc>)
 800dccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd0:	0800dd5b 	.word	0x0800dd5b
 800dcd4:	0800dd63 	.word	0x0800dd63
 800dcd8:	0800ddbf 	.word	0x0800ddbf
 800dcdc:	0800ddbf 	.word	0x0800ddbf
 800dce0:	0800dd6b 	.word	0x0800dd6b
 800dce4:	0800ddbf 	.word	0x0800ddbf
 800dce8:	0800ddbf 	.word	0x0800ddbf
 800dcec:	0800ddbf 	.word	0x0800ddbf
 800dcf0:	0800dd7b 	.word	0x0800dd7b
 800dcf4:	0800ddbf 	.word	0x0800ddbf
 800dcf8:	0800ddbf 	.word	0x0800ddbf
 800dcfc:	0800ddbf 	.word	0x0800ddbf
 800dd00:	0800ddbf 	.word	0x0800ddbf
 800dd04:	0800ddbf 	.word	0x0800ddbf
 800dd08:	0800ddbf 	.word	0x0800ddbf
 800dd0c:	0800ddbf 	.word	0x0800ddbf
 800dd10:	0800dd8b 	.word	0x0800dd8b
 800dd14:	0800ddbf 	.word	0x0800ddbf
 800dd18:	0800ddbf 	.word	0x0800ddbf
 800dd1c:	0800ddbf 	.word	0x0800ddbf
 800dd20:	0800ddbf 	.word	0x0800ddbf
 800dd24:	0800ddbf 	.word	0x0800ddbf
 800dd28:	0800ddbf 	.word	0x0800ddbf
 800dd2c:	0800ddbf 	.word	0x0800ddbf
 800dd30:	0800ddbf 	.word	0x0800ddbf
 800dd34:	0800ddbf 	.word	0x0800ddbf
 800dd38:	0800ddbf 	.word	0x0800ddbf
 800dd3c:	0800ddbf 	.word	0x0800ddbf
 800dd40:	0800ddbf 	.word	0x0800ddbf
 800dd44:	0800ddbf 	.word	0x0800ddbf
 800dd48:	0800ddbf 	.word	0x0800ddbf
 800dd4c:	0800ddbf 	.word	0x0800ddbf
 800dd50:	0800ddb1 	.word	0x0800ddb1
 800dd54:	2b40      	cmp	r3, #64	; 0x40
 800dd56:	d02e      	beq.n	800ddb6 <UART_SetConfig+0xab2>
 800dd58:	e031      	b.n	800ddbe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd5a:	f7fb fdcb 	bl	80098f4 <HAL_RCC_GetPCLK1Freq>
 800dd5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd60:	e033      	b.n	800ddca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd62:	f7fb fddd 	bl	8009920 <HAL_RCC_GetPCLK2Freq>
 800dd66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd68:	e02f      	b.n	800ddca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fc fcfc 	bl	800a76c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd78:	e027      	b.n	800ddca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd7a:	f107 0318 	add.w	r3, r7, #24
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fc fe48 	bl	800aa14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd88:	e01f      	b.n	800ddca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd8a:	4b69      	ldr	r3, [pc, #420]	; (800df30 <UART_SetConfig+0xc2c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f003 0320 	and.w	r3, r3, #32
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d009      	beq.n	800ddaa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd96:	4b66      	ldr	r3, [pc, #408]	; (800df30 <UART_SetConfig+0xc2c>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	08db      	lsrs	r3, r3, #3
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	4a64      	ldr	r2, [pc, #400]	; (800df34 <UART_SetConfig+0xc30>)
 800dda2:	fa22 f303 	lsr.w	r3, r2, r3
 800dda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dda8:	e00f      	b.n	800ddca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ddaa:	4b62      	ldr	r3, [pc, #392]	; (800df34 <UART_SetConfig+0xc30>)
 800ddac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddae:	e00c      	b.n	800ddca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ddb0:	4b61      	ldr	r3, [pc, #388]	; (800df38 <UART_SetConfig+0xc34>)
 800ddb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddb4:	e009      	b.n	800ddca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddbc:	e005      	b.n	800ddca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ddc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f000 80ea 	beq.w	800dfa6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd6:	4a55      	ldr	r2, [pc, #340]	; (800df2c <UART_SetConfig+0xc28>)
 800ddd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dddc:	461a      	mov	r2, r3
 800ddde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dde4:	005a      	lsls	r2, r3, #1
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	085b      	lsrs	r3, r3, #1
 800ddec:	441a      	add	r2, r3
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfa:	2b0f      	cmp	r3, #15
 800ddfc:	d916      	bls.n	800de2c <UART_SetConfig+0xb28>
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de04:	d212      	bcs.n	800de2c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de08:	b29b      	uxth	r3, r3
 800de0a:	f023 030f 	bic.w	r3, r3, #15
 800de0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	085b      	lsrs	r3, r3, #1
 800de14:	b29b      	uxth	r3, r3
 800de16:	f003 0307 	and.w	r3, r3, #7
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800de1e:	4313      	orrs	r3, r2
 800de20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800de28:	60da      	str	r2, [r3, #12]
 800de2a:	e0bc      	b.n	800dfa6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800de2c:	2301      	movs	r3, #1
 800de2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de32:	e0b8      	b.n	800dfa6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de38:	2b20      	cmp	r3, #32
 800de3a:	dc4b      	bgt.n	800ded4 <UART_SetConfig+0xbd0>
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f2c0 8087 	blt.w	800df50 <UART_SetConfig+0xc4c>
 800de42:	2b20      	cmp	r3, #32
 800de44:	f200 8084 	bhi.w	800df50 <UART_SetConfig+0xc4c>
 800de48:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <UART_SetConfig+0xb4c>)
 800de4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4e:	bf00      	nop
 800de50:	0800dedb 	.word	0x0800dedb
 800de54:	0800dee3 	.word	0x0800dee3
 800de58:	0800df51 	.word	0x0800df51
 800de5c:	0800df51 	.word	0x0800df51
 800de60:	0800deeb 	.word	0x0800deeb
 800de64:	0800df51 	.word	0x0800df51
 800de68:	0800df51 	.word	0x0800df51
 800de6c:	0800df51 	.word	0x0800df51
 800de70:	0800defb 	.word	0x0800defb
 800de74:	0800df51 	.word	0x0800df51
 800de78:	0800df51 	.word	0x0800df51
 800de7c:	0800df51 	.word	0x0800df51
 800de80:	0800df51 	.word	0x0800df51
 800de84:	0800df51 	.word	0x0800df51
 800de88:	0800df51 	.word	0x0800df51
 800de8c:	0800df51 	.word	0x0800df51
 800de90:	0800df0b 	.word	0x0800df0b
 800de94:	0800df51 	.word	0x0800df51
 800de98:	0800df51 	.word	0x0800df51
 800de9c:	0800df51 	.word	0x0800df51
 800dea0:	0800df51 	.word	0x0800df51
 800dea4:	0800df51 	.word	0x0800df51
 800dea8:	0800df51 	.word	0x0800df51
 800deac:	0800df51 	.word	0x0800df51
 800deb0:	0800df51 	.word	0x0800df51
 800deb4:	0800df51 	.word	0x0800df51
 800deb8:	0800df51 	.word	0x0800df51
 800debc:	0800df51 	.word	0x0800df51
 800dec0:	0800df51 	.word	0x0800df51
 800dec4:	0800df51 	.word	0x0800df51
 800dec8:	0800df51 	.word	0x0800df51
 800decc:	0800df51 	.word	0x0800df51
 800ded0:	0800df43 	.word	0x0800df43
 800ded4:	2b40      	cmp	r3, #64	; 0x40
 800ded6:	d037      	beq.n	800df48 <UART_SetConfig+0xc44>
 800ded8:	e03a      	b.n	800df50 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800deda:	f7fb fd0b 	bl	80098f4 <HAL_RCC_GetPCLK1Freq>
 800dede:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dee0:	e03c      	b.n	800df5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dee2:	f7fb fd1d 	bl	8009920 <HAL_RCC_GetPCLK2Freq>
 800dee6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dee8:	e038      	b.n	800df5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deee:	4618      	mov	r0, r3
 800def0:	f7fc fc3c 	bl	800a76c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def8:	e030      	b.n	800df5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800defa:	f107 0318 	add.w	r3, r7, #24
 800defe:	4618      	mov	r0, r3
 800df00:	f7fc fd88 	bl	800aa14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df08:	e028      	b.n	800df5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df0a:	4b09      	ldr	r3, [pc, #36]	; (800df30 <UART_SetConfig+0xc2c>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f003 0320 	and.w	r3, r3, #32
 800df12:	2b00      	cmp	r3, #0
 800df14:	d012      	beq.n	800df3c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df16:	4b06      	ldr	r3, [pc, #24]	; (800df30 <UART_SetConfig+0xc2c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	08db      	lsrs	r3, r3, #3
 800df1c:	f003 0303 	and.w	r3, r3, #3
 800df20:	4a04      	ldr	r2, [pc, #16]	; (800df34 <UART_SetConfig+0xc30>)
 800df22:	fa22 f303 	lsr.w	r3, r2, r3
 800df26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df28:	e018      	b.n	800df5c <UART_SetConfig+0xc58>
 800df2a:	bf00      	nop
 800df2c:	0800f234 	.word	0x0800f234
 800df30:	58024400 	.word	0x58024400
 800df34:	03d09000 	.word	0x03d09000
 800df38:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800df3c:	4b24      	ldr	r3, [pc, #144]	; (800dfd0 <UART_SetConfig+0xccc>)
 800df3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df40:	e00c      	b.n	800df5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df42:	4b24      	ldr	r3, [pc, #144]	; (800dfd4 <UART_SetConfig+0xcd0>)
 800df44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df46:	e009      	b.n	800df5c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df4e:	e005      	b.n	800df5c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800df50:	2300      	movs	r3, #0
 800df52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df54:	2301      	movs	r3, #1
 800df56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df5a:	bf00      	nop
    }

    if (pclk != 0U)
 800df5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d021      	beq.n	800dfa6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df66:	4a1c      	ldr	r2, [pc, #112]	; (800dfd8 <UART_SetConfig+0xcd4>)
 800df68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df6c:	461a      	mov	r2, r3
 800df6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df70:	fbb3 f2f2 	udiv	r2, r3, r2
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	085b      	lsrs	r3, r3, #1
 800df7a:	441a      	add	r2, r3
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	fbb2 f3f3 	udiv	r3, r2, r3
 800df84:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	2b0f      	cmp	r3, #15
 800df8a:	d909      	bls.n	800dfa0 <UART_SetConfig+0xc9c>
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df92:	d205      	bcs.n	800dfa0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df96:	b29a      	uxth	r2, r3
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	60da      	str	r2, [r3, #12]
 800df9e:	e002      	b.n	800dfa6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dfc2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3748      	adds	r7, #72	; 0x48
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfd0:	03d09000 	.word	0x03d09000
 800dfd4:	003d0900 	.word	0x003d0900
 800dfd8:	0800f234 	.word	0x0800f234

0800dfdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe8:	f003 0301 	and.w	r3, r3, #1
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00a      	beq.n	800e006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	430a      	orrs	r2, r1
 800e004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00a:	f003 0302 	and.w	r3, r3, #2
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00a      	beq.n	800e028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	430a      	orrs	r2, r1
 800e026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02c:	f003 0304 	and.w	r3, r3, #4
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00a      	beq.n	800e04a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	430a      	orrs	r2, r1
 800e048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e04e:	f003 0308 	and.w	r3, r3, #8
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00a      	beq.n	800e06c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	430a      	orrs	r2, r1
 800e06a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e070:	f003 0310 	and.w	r3, r3, #16
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00a      	beq.n	800e08e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	689b      	ldr	r3, [r3, #8]
 800e07e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	430a      	orrs	r2, r1
 800e08c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e092:	f003 0320 	and.w	r3, r3, #32
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00a      	beq.n	800e0b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	430a      	orrs	r2, r1
 800e0ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01a      	beq.n	800e0f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	430a      	orrs	r2, r1
 800e0d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0da:	d10a      	bne.n	800e0f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	430a      	orrs	r2, r1
 800e0f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00a      	beq.n	800e114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	430a      	orrs	r2, r1
 800e112:	605a      	str	r2, [r3, #4]
  }
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af02      	add	r7, sp, #8
 800e126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e130:	f7f7 fb68 	bl	8005804 <HAL_GetTick>
 800e134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f003 0308 	and.w	r3, r3, #8
 800e140:	2b08      	cmp	r3, #8
 800e142:	d10e      	bne.n	800e162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2200      	movs	r2, #0
 800e14e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f82f 	bl	800e1b6 <UART_WaitOnFlagUntilTimeout>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e15e:	2303      	movs	r3, #3
 800e160:	e025      	b.n	800e1ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f003 0304 	and.w	r3, r3, #4
 800e16c:	2b04      	cmp	r3, #4
 800e16e:	d10e      	bne.n	800e18e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2200      	movs	r2, #0
 800e17a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f819 	bl	800e1b6 <UART_WaitOnFlagUntilTimeout>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e18a:	2303      	movs	r3, #3
 800e18c:	e00f      	b.n	800e1ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2220      	movs	r2, #32
 800e192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2220      	movs	r2, #32
 800e19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b09c      	sub	sp, #112	; 0x70
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	60f8      	str	r0, [r7, #12]
 800e1be:	60b9      	str	r1, [r7, #8]
 800e1c0:	603b      	str	r3, [r7, #0]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1c6:	e0a9      	b.n	800e31c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ce:	f000 80a5 	beq.w	800e31c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1d2:	f7f7 fb17 	bl	8005804 <HAL_GetTick>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d302      	bcc.n	800e1e8 <UART_WaitOnFlagUntilTimeout+0x32>
 800e1e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d140      	bne.n	800e26a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f0:	e853 3f00 	ldrex	r3, [r3]
 800e1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1fc:	667b      	str	r3, [r7, #100]	; 0x64
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e206:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e208:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e20c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e20e:	e841 2300 	strex	r3, r2, [r1]
 800e212:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e6      	bne.n	800e1e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3308      	adds	r3, #8
 800e220:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e224:	e853 3f00 	ldrex	r3, [r3]
 800e228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22c:	f023 0301 	bic.w	r3, r3, #1
 800e230:	663b      	str	r3, [r7, #96]	; 0x60
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3308      	adds	r3, #8
 800e238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e23a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e23c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e242:	e841 2300 	strex	r3, r2, [r1]
 800e246:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1e5      	bne.n	800e21a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2220      	movs	r2, #32
 800e252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2220      	movs	r2, #32
 800e25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e266:	2303      	movs	r3, #3
 800e268:	e069      	b.n	800e33e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 0304 	and.w	r3, r3, #4
 800e274:	2b00      	cmp	r3, #0
 800e276:	d051      	beq.n	800e31c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	69db      	ldr	r3, [r3, #28]
 800e27e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e286:	d149      	bne.n	800e31c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e290:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29a:	e853 3f00 	ldrex	r3, [r3]
 800e29e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e2a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2b0:	637b      	str	r3, [r7, #52]	; 0x34
 800e2b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2b8:	e841 2300 	strex	r3, r2, [r1]
 800e2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d1e6      	bne.n	800e292 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	3308      	adds	r3, #8
 800e2ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	e853 3f00 	ldrex	r3, [r3]
 800e2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f023 0301 	bic.w	r3, r3, #1
 800e2da:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2e4:	623a      	str	r2, [r7, #32]
 800e2e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e8:	69f9      	ldr	r1, [r7, #28]
 800e2ea:	6a3a      	ldr	r2, [r7, #32]
 800e2ec:	e841 2300 	strex	r3, r2, [r1]
 800e2f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1e5      	bne.n	800e2c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2220      	movs	r2, #32
 800e2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2220      	movs	r2, #32
 800e304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2220      	movs	r2, #32
 800e30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2200      	movs	r2, #0
 800e314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e318:	2303      	movs	r3, #3
 800e31a:	e010      	b.n	800e33e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	69da      	ldr	r2, [r3, #28]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	4013      	ands	r3, r2
 800e326:	68ba      	ldr	r2, [r7, #8]
 800e328:	429a      	cmp	r2, r3
 800e32a:	bf0c      	ite	eq
 800e32c:	2301      	moveq	r3, #1
 800e32e:	2300      	movne	r3, #0
 800e330:	b2db      	uxtb	r3, r3
 800e332:	461a      	mov	r2, r3
 800e334:	79fb      	ldrb	r3, [r7, #7]
 800e336:	429a      	cmp	r2, r3
 800e338:	f43f af46 	beq.w	800e1c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3770      	adds	r7, #112	; 0x70
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
	...

0800e348 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b096      	sub	sp, #88	; 0x58
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	4613      	mov	r3, r2
 800e354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	88fa      	ldrh	r2, [r7, #6]
 800e360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2222      	movs	r2, #34	; 0x22
 800e370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d02c      	beq.n	800e3d6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e380:	4a42      	ldr	r2, [pc, #264]	; (800e48c <UART_Start_Receive_DMA+0x144>)
 800e382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e388:	4a41      	ldr	r2, [pc, #260]	; (800e490 <UART_Start_Receive_DMA+0x148>)
 800e38a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e390:	4a40      	ldr	r2, [pc, #256]	; (800e494 <UART_Start_Receive_DMA+0x14c>)
 800e392:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e398:	2200      	movs	r2, #0
 800e39a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	3324      	adds	r3, #36	; 0x24
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	88fb      	ldrh	r3, [r7, #6]
 800e3b0:	f7f7 fe9e 	bl	80060f0 <HAL_DMA_Start_IT>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00d      	beq.n	800e3d6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2210      	movs	r2, #16
 800e3be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2220      	movs	r2, #32
 800e3ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e055      	b.n	800e482 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d018      	beq.n	800e418 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ee:	e853 3f00 	ldrex	r3, [r3]
 800e3f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3fa:	657b      	str	r3, [r7, #84]	; 0x54
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	461a      	mov	r2, r3
 800e402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e404:	64bb      	str	r3, [r7, #72]	; 0x48
 800e406:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e40a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e40c:	e841 2300 	strex	r3, r2, [r1]
 800e410:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1e6      	bne.n	800e3e6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3308      	adds	r3, #8
 800e41e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	f043 0301 	orr.w	r3, r3, #1
 800e42e:	653b      	str	r3, [r7, #80]	; 0x50
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3308      	adds	r3, #8
 800e436:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e438:	637a      	str	r2, [r7, #52]	; 0x34
 800e43a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e43e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e5      	bne.n	800e418 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3308      	adds	r3, #8
 800e452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	613b      	str	r3, [r7, #16]
   return(result);
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e462:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3308      	adds	r3, #8
 800e46a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e46c:	623a      	str	r2, [r7, #32]
 800e46e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	69f9      	ldr	r1, [r7, #28]
 800e472:	6a3a      	ldr	r2, [r7, #32]
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	61bb      	str	r3, [r7, #24]
   return(result);
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e5      	bne.n	800e44c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3758      	adds	r7, #88	; 0x58
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	0800e69b 	.word	0x0800e69b
 800e490:	0800e7bd 	.word	0x0800e7bd
 800e494:	0800e7f5 	.word	0x0800e7f5

0800e498 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e498:	b480      	push	{r7}
 800e49a:	b08f      	sub	sp, #60	; 0x3c
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e4b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e6      	bne.n	800e4a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	3308      	adds	r3, #8
 800e4d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	e853 3f00 	ldrex	r3, [r3]
 800e4e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e4e8:	633b      	str	r3, [r7, #48]	; 0x30
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4f2:	61ba      	str	r2, [r7, #24]
 800e4f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4f6:	6979      	ldr	r1, [r7, #20]
 800e4f8:	69ba      	ldr	r2, [r7, #24]
 800e4fa:	e841 2300 	strex	r3, r2, [r1]
 800e4fe:	613b      	str	r3, [r7, #16]
   return(result);
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1e5      	bne.n	800e4d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2220      	movs	r2, #32
 800e50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e50e:	bf00      	nop
 800e510:	373c      	adds	r7, #60	; 0x3c
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
	...

0800e51c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b095      	sub	sp, #84	; 0x54
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e538:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e542:	643b      	str	r3, [r7, #64]	; 0x40
 800e544:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e54a:	e841 2300 	strex	r3, r2, [r1]
 800e54e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1e6      	bne.n	800e524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3308      	adds	r3, #8
 800e55c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55e:	6a3b      	ldr	r3, [r7, #32]
 800e560:	e853 3f00 	ldrex	r3, [r3]
 800e564:	61fb      	str	r3, [r7, #28]
   return(result);
 800e566:	69fa      	ldr	r2, [r7, #28]
 800e568:	4b1e      	ldr	r3, [pc, #120]	; (800e5e4 <UART_EndRxTransfer+0xc8>)
 800e56a:	4013      	ands	r3, r2
 800e56c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3308      	adds	r3, #8
 800e574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e576:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e57e:	e841 2300 	strex	r3, r2, [r1]
 800e582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1e5      	bne.n	800e556 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d118      	bne.n	800e5c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	e853 3f00 	ldrex	r3, [r3]
 800e59e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	f023 0310 	bic.w	r3, r3, #16
 800e5a6:	647b      	str	r3, [r7, #68]	; 0x44
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5b0:	61bb      	str	r3, [r7, #24]
 800e5b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b4:	6979      	ldr	r1, [r7, #20]
 800e5b6:	69ba      	ldr	r2, [r7, #24]
 800e5b8:	e841 2300 	strex	r3, r2, [r1]
 800e5bc:	613b      	str	r3, [r7, #16]
   return(result);
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1e6      	bne.n	800e592 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2220      	movs	r2, #32
 800e5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e5d8:	bf00      	nop
 800e5da:	3754      	adds	r7, #84	; 0x54
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr
 800e5e4:	effffffe 	.word	0xeffffffe

0800e5e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b090      	sub	sp, #64	; 0x40
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5fe:	d037      	beq.n	800e670 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e602:	2200      	movs	r2, #0
 800e604:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3308      	adds	r3, #8
 800e60e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	e853 3f00 	ldrex	r3, [r3]
 800e616:	623b      	str	r3, [r7, #32]
   return(result);
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e61e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	3308      	adds	r3, #8
 800e626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e628:	633a      	str	r2, [r7, #48]	; 0x30
 800e62a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e630:	e841 2300 	strex	r3, r2, [r1]
 800e634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1e5      	bne.n	800e608 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	e853 3f00 	ldrex	r3, [r3]
 800e648:	60fb      	str	r3, [r7, #12]
   return(result);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e650:	637b      	str	r3, [r7, #52]	; 0x34
 800e652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	461a      	mov	r2, r3
 800e658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65a:	61fb      	str	r3, [r7, #28]
 800e65c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65e:	69b9      	ldr	r1, [r7, #24]
 800e660:	69fa      	ldr	r2, [r7, #28]
 800e662:	e841 2300 	strex	r3, r2, [r1]
 800e666:	617b      	str	r3, [r7, #20]
   return(result);
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1e6      	bne.n	800e63c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e66e:	e002      	b.n	800e676 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e670:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e672:	f7f5 fa2f 	bl	8003ad4 <HAL_UART_TxCpltCallback>
}
 800e676:	bf00      	nop
 800e678:	3740      	adds	r7, #64	; 0x40
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b084      	sub	sp, #16
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e68a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f7fe fe0f 	bl	800d2b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e692:	bf00      	nop
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b09c      	sub	sp, #112	; 0x70
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	69db      	ldr	r3, [r3, #28]
 800e6ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6b0:	d071      	beq.n	800e796 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e6b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c2:	e853 3f00 	ldrex	r3, [r3]
 800e6c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e6c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e6da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6e0:	e841 2300 	strex	r3, r2, [r1]
 800e6e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d1e6      	bne.n	800e6ba <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	3308      	adds	r3, #8
 800e6f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	e853 3f00 	ldrex	r3, [r3]
 800e6fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6fe:	f023 0301 	bic.w	r3, r3, #1
 800e702:	667b      	str	r3, [r7, #100]	; 0x64
 800e704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3308      	adds	r3, #8
 800e70a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e70c:	647a      	str	r2, [r7, #68]	; 0x44
 800e70e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e714:	e841 2300 	strex	r3, r2, [r1]
 800e718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1e5      	bne.n	800e6ec <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3308      	adds	r3, #8
 800e726:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	e853 3f00 	ldrex	r3, [r3]
 800e72e:	623b      	str	r3, [r7, #32]
   return(result);
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e736:	663b      	str	r3, [r7, #96]	; 0x60
 800e738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3308      	adds	r3, #8
 800e73e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e740:	633a      	str	r2, [r7, #48]	; 0x30
 800e742:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e748:	e841 2300 	strex	r3, r2, [r1]
 800e74c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	2b00      	cmp	r3, #0
 800e752:	d1e5      	bne.n	800e720 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e756:	2220      	movs	r2, #32
 800e758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e75c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e760:	2b01      	cmp	r3, #1
 800e762:	d118      	bne.n	800e796 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	e853 3f00 	ldrex	r3, [r3]
 800e770:	60fb      	str	r3, [r7, #12]
   return(result);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f023 0310 	bic.w	r3, r3, #16
 800e778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	461a      	mov	r2, r3
 800e780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e782:	61fb      	str	r3, [r7, #28]
 800e784:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e786:	69b9      	ldr	r1, [r7, #24]
 800e788:	69fa      	ldr	r2, [r7, #28]
 800e78a:	e841 2300 	strex	r3, r2, [r1]
 800e78e:	617b      	str	r3, [r7, #20]
   return(result);
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d1e6      	bne.n	800e764 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d107      	bne.n	800e7ae <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7a8:	f7fe fda0 	bl	800d2ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7ac:	e002      	b.n	800e7b4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e7ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7b0:	f7f5 f9a2 	bl	8003af8 <HAL_UART_RxCpltCallback>
}
 800e7b4:	bf00      	nop
 800e7b6:	3770      	adds	r7, #112	; 0x70
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7c8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d109      	bne.n	800e7e6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7d8:	085b      	lsrs	r3, r3, #1
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	4619      	mov	r1, r3
 800e7de:	68f8      	ldr	r0, [r7, #12]
 800e7e0:	f7fe fd84 	bl	800d2ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e7e4:	e002      	b.n	800e7ec <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f7fe fd6c 	bl	800d2c4 <HAL_UART_RxHalfCpltCallback>
}
 800e7ec:	bf00      	nop
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e800:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e808:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e810:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e81c:	2b80      	cmp	r3, #128	; 0x80
 800e81e:	d109      	bne.n	800e834 <UART_DMAError+0x40>
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	2b21      	cmp	r3, #33	; 0x21
 800e824:	d106      	bne.n	800e834 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2200      	movs	r2, #0
 800e82a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e82e:	6978      	ldr	r0, [r7, #20]
 800e830:	f7ff fe32 	bl	800e498 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	689b      	ldr	r3, [r3, #8]
 800e83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e83e:	2b40      	cmp	r3, #64	; 0x40
 800e840:	d109      	bne.n	800e856 <UART_DMAError+0x62>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b22      	cmp	r3, #34	; 0x22
 800e846:	d106      	bne.n	800e856 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e850:	6978      	ldr	r0, [r7, #20]
 800e852:	f7ff fe63 	bl	800e51c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e85c:	f043 0210 	orr.w	r2, r3, #16
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e866:	6978      	ldr	r0, [r7, #20]
 800e868:	f7fe fd36 	bl	800d2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e86c:	bf00      	nop
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	2200      	movs	r2, #0
 800e886:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f7fe fd20 	bl	800d2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e898:	bf00      	nop
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b088      	sub	sp, #32
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	e853 3f00 	ldrex	r3, [r3]
 800e8b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8bc:	61fb      	str	r3, [r7, #28]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	61bb      	str	r3, [r7, #24]
 800e8c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ca:	6979      	ldr	r1, [r7, #20]
 800e8cc:	69ba      	ldr	r2, [r7, #24]
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	613b      	str	r3, [r7, #16]
   return(result);
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e6      	bne.n	800e8a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2220      	movs	r2, #32
 800e8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7f5 f8f3 	bl	8003ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e8ee:	bf00      	nop
 800e8f0:	3720      	adds	r7, #32
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b083      	sub	sp, #12
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e8fe:	bf00      	nop
 800e900:	370c      	adds	r7, #12
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr

0800e90a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e912:	bf00      	nop
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e91e:	b480      	push	{r7}
 800e920:	b083      	sub	sp, #12
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e926:	bf00      	nop
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e932:	b480      	push	{r7}
 800e934:	b085      	sub	sp, #20
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e940:	2b01      	cmp	r3, #1
 800e942:	d101      	bne.n	800e948 <HAL_UARTEx_DisableFifoMode+0x16>
 800e944:	2302      	movs	r3, #2
 800e946:	e027      	b.n	800e998 <HAL_UARTEx_DisableFifoMode+0x66>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2224      	movs	r2, #36	; 0x24
 800e954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f022 0201 	bic.w	r2, r2, #1
 800e96e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e976:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2220      	movs	r2, #32
 800e98a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3714      	adds	r7, #20
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d101      	bne.n	800e9bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	e02d      	b.n	800ea18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2224      	movs	r2, #36	; 0x24
 800e9c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f022 0201 	bic.w	r2, r2, #1
 800e9e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	430a      	orrs	r2, r1
 800e9f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 f84f 	bl	800ea9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2220      	movs	r2, #32
 800ea0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d101      	bne.n	800ea38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ea34:	2302      	movs	r3, #2
 800ea36:	e02d      	b.n	800ea94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2224      	movs	r2, #36	; 0x24
 800ea44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f022 0201 	bic.w	r2, r2, #1
 800ea5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	430a      	orrs	r2, r1
 800ea72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f811 	bl	800ea9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2220      	movs	r2, #32
 800ea86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b085      	sub	sp, #20
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d108      	bne.n	800eabe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2201      	movs	r2, #1
 800eab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2201      	movs	r2, #1
 800eab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eabc:	e031      	b.n	800eb22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eabe:	2310      	movs	r3, #16
 800eac0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eac2:	2310      	movs	r3, #16
 800eac4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	0e5b      	lsrs	r3, r3, #25
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	f003 0307 	and.w	r3, r3, #7
 800ead4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	689b      	ldr	r3, [r3, #8]
 800eadc:	0f5b      	lsrs	r3, r3, #29
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	f003 0307 	and.w	r3, r3, #7
 800eae4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
 800eae8:	7b3a      	ldrb	r2, [r7, #12]
 800eaea:	4911      	ldr	r1, [pc, #68]	; (800eb30 <UARTEx_SetNbDataToProcess+0x94>)
 800eaec:	5c8a      	ldrb	r2, [r1, r2]
 800eaee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eaf2:	7b3a      	ldrb	r2, [r7, #12]
 800eaf4:	490f      	ldr	r1, [pc, #60]	; (800eb34 <UARTEx_SetNbDataToProcess+0x98>)
 800eaf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eaf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb04:	7bfb      	ldrb	r3, [r7, #15]
 800eb06:	7b7a      	ldrb	r2, [r7, #13]
 800eb08:	4909      	ldr	r1, [pc, #36]	; (800eb30 <UARTEx_SetNbDataToProcess+0x94>)
 800eb0a:	5c8a      	ldrb	r2, [r1, r2]
 800eb0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eb10:	7b7a      	ldrb	r2, [r7, #13]
 800eb12:	4908      	ldr	r1, [pc, #32]	; (800eb34 <UARTEx_SetNbDataToProcess+0x98>)
 800eb14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eb16:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb1a:	b29a      	uxth	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800eb22:	bf00      	nop
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	0800f24c 	.word	0x0800f24c
 800eb34:	0800f254 	.word	0x0800f254

0800eb38 <__cxa_pure_virtual>:
 800eb38:	b508      	push	{r3, lr}
 800eb3a:	f000 f80d 	bl	800eb58 <_ZSt9terminatev>

0800eb3e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eb3e:	b508      	push	{r3, lr}
 800eb40:	4780      	blx	r0
 800eb42:	f000 f80e 	bl	800eb62 <abort>
	...

0800eb48 <_ZSt13get_terminatev>:
 800eb48:	4b02      	ldr	r3, [pc, #8]	; (800eb54 <_ZSt13get_terminatev+0xc>)
 800eb4a:	6818      	ldr	r0, [r3, #0]
 800eb4c:	f3bf 8f5b 	dmb	ish
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	24000014 	.word	0x24000014

0800eb58 <_ZSt9terminatev>:
 800eb58:	b508      	push	{r3, lr}
 800eb5a:	f7ff fff5 	bl	800eb48 <_ZSt13get_terminatev>
 800eb5e:	f7ff ffee 	bl	800eb3e <_ZN10__cxxabiv111__terminateEPFvvE>

0800eb62 <abort>:
 800eb62:	b508      	push	{r3, lr}
 800eb64:	2006      	movs	r0, #6
 800eb66:	f000 f873 	bl	800ec50 <raise>
 800eb6a:	2001      	movs	r0, #1
 800eb6c:	f7f6 fb50 	bl	8005210 <_exit>

0800eb70 <__errno>:
 800eb70:	4b01      	ldr	r3, [pc, #4]	; (800eb78 <__errno+0x8>)
 800eb72:	6818      	ldr	r0, [r3, #0]
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	24000018 	.word	0x24000018

0800eb7c <__libc_init_array>:
 800eb7c:	b570      	push	{r4, r5, r6, lr}
 800eb7e:	4d0d      	ldr	r5, [pc, #52]	; (800ebb4 <__libc_init_array+0x38>)
 800eb80:	4c0d      	ldr	r4, [pc, #52]	; (800ebb8 <__libc_init_array+0x3c>)
 800eb82:	1b64      	subs	r4, r4, r5
 800eb84:	10a4      	asrs	r4, r4, #2
 800eb86:	2600      	movs	r6, #0
 800eb88:	42a6      	cmp	r6, r4
 800eb8a:	d109      	bne.n	800eba0 <__libc_init_array+0x24>
 800eb8c:	4d0b      	ldr	r5, [pc, #44]	; (800ebbc <__libc_init_array+0x40>)
 800eb8e:	4c0c      	ldr	r4, [pc, #48]	; (800ebc0 <__libc_init_array+0x44>)
 800eb90:	f000 f9b0 	bl	800eef4 <_init>
 800eb94:	1b64      	subs	r4, r4, r5
 800eb96:	10a4      	asrs	r4, r4, #2
 800eb98:	2600      	movs	r6, #0
 800eb9a:	42a6      	cmp	r6, r4
 800eb9c:	d105      	bne.n	800ebaa <__libc_init_array+0x2e>
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eba4:	4798      	blx	r3
 800eba6:	3601      	adds	r6, #1
 800eba8:	e7ee      	b.n	800eb88 <__libc_init_array+0xc>
 800ebaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebae:	4798      	blx	r3
 800ebb0:	3601      	adds	r6, #1
 800ebb2:	e7f2      	b.n	800eb9a <__libc_init_array+0x1e>
 800ebb4:	0800f264 	.word	0x0800f264
 800ebb8:	0800f264 	.word	0x0800f264
 800ebbc:	0800f264 	.word	0x0800f264
 800ebc0:	0800f274 	.word	0x0800f274

0800ebc4 <memcpy>:
 800ebc4:	440a      	add	r2, r1
 800ebc6:	4291      	cmp	r1, r2
 800ebc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebcc:	d100      	bne.n	800ebd0 <memcpy+0xc>
 800ebce:	4770      	bx	lr
 800ebd0:	b510      	push	{r4, lr}
 800ebd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebda:	4291      	cmp	r1, r2
 800ebdc:	d1f9      	bne.n	800ebd2 <memcpy+0xe>
 800ebde:	bd10      	pop	{r4, pc}

0800ebe0 <memset>:
 800ebe0:	4402      	add	r2, r0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d100      	bne.n	800ebea <memset+0xa>
 800ebe8:	4770      	bx	lr
 800ebea:	f803 1b01 	strb.w	r1, [r3], #1
 800ebee:	e7f9      	b.n	800ebe4 <memset+0x4>

0800ebf0 <realloc>:
 800ebf0:	4b02      	ldr	r3, [pc, #8]	; (800ebfc <realloc+0xc>)
 800ebf2:	460a      	mov	r2, r1
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	6818      	ldr	r0, [r3, #0]
 800ebf8:	f000 b8da 	b.w	800edb0 <_realloc_r>
 800ebfc:	24000018 	.word	0x24000018

0800ec00 <_raise_r>:
 800ec00:	291f      	cmp	r1, #31
 800ec02:	b538      	push	{r3, r4, r5, lr}
 800ec04:	4604      	mov	r4, r0
 800ec06:	460d      	mov	r5, r1
 800ec08:	d904      	bls.n	800ec14 <_raise_r+0x14>
 800ec0a:	2316      	movs	r3, #22
 800ec0c:	6003      	str	r3, [r0, #0]
 800ec0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec16:	b112      	cbz	r2, 800ec1e <_raise_r+0x1e>
 800ec18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec1c:	b94b      	cbnz	r3, 800ec32 <_raise_r+0x32>
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f000 f830 	bl	800ec84 <_getpid_r>
 800ec24:	462a      	mov	r2, r5
 800ec26:	4601      	mov	r1, r0
 800ec28:	4620      	mov	r0, r4
 800ec2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec2e:	f000 b817 	b.w	800ec60 <_kill_r>
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d00a      	beq.n	800ec4c <_raise_r+0x4c>
 800ec36:	1c59      	adds	r1, r3, #1
 800ec38:	d103      	bne.n	800ec42 <_raise_r+0x42>
 800ec3a:	2316      	movs	r3, #22
 800ec3c:	6003      	str	r3, [r0, #0]
 800ec3e:	2001      	movs	r0, #1
 800ec40:	e7e7      	b.n	800ec12 <_raise_r+0x12>
 800ec42:	2400      	movs	r4, #0
 800ec44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec48:	4628      	mov	r0, r5
 800ec4a:	4798      	blx	r3
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	e7e0      	b.n	800ec12 <_raise_r+0x12>

0800ec50 <raise>:
 800ec50:	4b02      	ldr	r3, [pc, #8]	; (800ec5c <raise+0xc>)
 800ec52:	4601      	mov	r1, r0
 800ec54:	6818      	ldr	r0, [r3, #0]
 800ec56:	f7ff bfd3 	b.w	800ec00 <_raise_r>
 800ec5a:	bf00      	nop
 800ec5c:	24000018 	.word	0x24000018

0800ec60 <_kill_r>:
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	4d07      	ldr	r5, [pc, #28]	; (800ec80 <_kill_r+0x20>)
 800ec64:	2300      	movs	r3, #0
 800ec66:	4604      	mov	r4, r0
 800ec68:	4608      	mov	r0, r1
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	602b      	str	r3, [r5, #0]
 800ec6e:	f7f6 fabf 	bl	80051f0 <_kill>
 800ec72:	1c43      	adds	r3, r0, #1
 800ec74:	d102      	bne.n	800ec7c <_kill_r+0x1c>
 800ec76:	682b      	ldr	r3, [r5, #0]
 800ec78:	b103      	cbz	r3, 800ec7c <_kill_r+0x1c>
 800ec7a:	6023      	str	r3, [r4, #0]
 800ec7c:	bd38      	pop	{r3, r4, r5, pc}
 800ec7e:	bf00      	nop
 800ec80:	2400195c 	.word	0x2400195c

0800ec84 <_getpid_r>:
 800ec84:	f7f6 baac 	b.w	80051e0 <_getpid>

0800ec88 <sbrk_aligned>:
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	4e0e      	ldr	r6, [pc, #56]	; (800ecc4 <sbrk_aligned+0x3c>)
 800ec8c:	460c      	mov	r4, r1
 800ec8e:	6831      	ldr	r1, [r6, #0]
 800ec90:	4605      	mov	r5, r0
 800ec92:	b911      	cbnz	r1, 800ec9a <sbrk_aligned+0x12>
 800ec94:	f000 f8bc 	bl	800ee10 <_sbrk_r>
 800ec98:	6030      	str	r0, [r6, #0]
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	f000 f8b7 	bl	800ee10 <_sbrk_r>
 800eca2:	1c43      	adds	r3, r0, #1
 800eca4:	d00a      	beq.n	800ecbc <sbrk_aligned+0x34>
 800eca6:	1cc4      	adds	r4, r0, #3
 800eca8:	f024 0403 	bic.w	r4, r4, #3
 800ecac:	42a0      	cmp	r0, r4
 800ecae:	d007      	beq.n	800ecc0 <sbrk_aligned+0x38>
 800ecb0:	1a21      	subs	r1, r4, r0
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f000 f8ac 	bl	800ee10 <_sbrk_r>
 800ecb8:	3001      	adds	r0, #1
 800ecba:	d101      	bne.n	800ecc0 <sbrk_aligned+0x38>
 800ecbc:	f04f 34ff 	mov.w	r4, #4294967295
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}
 800ecc4:	24001958 	.word	0x24001958

0800ecc8 <_malloc_r>:
 800ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eccc:	1ccd      	adds	r5, r1, #3
 800ecce:	f025 0503 	bic.w	r5, r5, #3
 800ecd2:	3508      	adds	r5, #8
 800ecd4:	2d0c      	cmp	r5, #12
 800ecd6:	bf38      	it	cc
 800ecd8:	250c      	movcc	r5, #12
 800ecda:	2d00      	cmp	r5, #0
 800ecdc:	4607      	mov	r7, r0
 800ecde:	db01      	blt.n	800ece4 <_malloc_r+0x1c>
 800ece0:	42a9      	cmp	r1, r5
 800ece2:	d905      	bls.n	800ecf0 <_malloc_r+0x28>
 800ece4:	230c      	movs	r3, #12
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	2600      	movs	r6, #0
 800ecea:	4630      	mov	r0, r6
 800ecec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf0:	4e2e      	ldr	r6, [pc, #184]	; (800edac <_malloc_r+0xe4>)
 800ecf2:	f000 f89d 	bl	800ee30 <__malloc_lock>
 800ecf6:	6833      	ldr	r3, [r6, #0]
 800ecf8:	461c      	mov	r4, r3
 800ecfa:	bb34      	cbnz	r4, 800ed4a <_malloc_r+0x82>
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	4638      	mov	r0, r7
 800ed00:	f7ff ffc2 	bl	800ec88 <sbrk_aligned>
 800ed04:	1c43      	adds	r3, r0, #1
 800ed06:	4604      	mov	r4, r0
 800ed08:	d14d      	bne.n	800eda6 <_malloc_r+0xde>
 800ed0a:	6834      	ldr	r4, [r6, #0]
 800ed0c:	4626      	mov	r6, r4
 800ed0e:	2e00      	cmp	r6, #0
 800ed10:	d140      	bne.n	800ed94 <_malloc_r+0xcc>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	4631      	mov	r1, r6
 800ed16:	4638      	mov	r0, r7
 800ed18:	eb04 0803 	add.w	r8, r4, r3
 800ed1c:	f000 f878 	bl	800ee10 <_sbrk_r>
 800ed20:	4580      	cmp	r8, r0
 800ed22:	d13a      	bne.n	800ed9a <_malloc_r+0xd2>
 800ed24:	6821      	ldr	r1, [r4, #0]
 800ed26:	3503      	adds	r5, #3
 800ed28:	1a6d      	subs	r5, r5, r1
 800ed2a:	f025 0503 	bic.w	r5, r5, #3
 800ed2e:	3508      	adds	r5, #8
 800ed30:	2d0c      	cmp	r5, #12
 800ed32:	bf38      	it	cc
 800ed34:	250c      	movcc	r5, #12
 800ed36:	4629      	mov	r1, r5
 800ed38:	4638      	mov	r0, r7
 800ed3a:	f7ff ffa5 	bl	800ec88 <sbrk_aligned>
 800ed3e:	3001      	adds	r0, #1
 800ed40:	d02b      	beq.n	800ed9a <_malloc_r+0xd2>
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	442b      	add	r3, r5
 800ed46:	6023      	str	r3, [r4, #0]
 800ed48:	e00e      	b.n	800ed68 <_malloc_r+0xa0>
 800ed4a:	6822      	ldr	r2, [r4, #0]
 800ed4c:	1b52      	subs	r2, r2, r5
 800ed4e:	d41e      	bmi.n	800ed8e <_malloc_r+0xc6>
 800ed50:	2a0b      	cmp	r2, #11
 800ed52:	d916      	bls.n	800ed82 <_malloc_r+0xba>
 800ed54:	1961      	adds	r1, r4, r5
 800ed56:	42a3      	cmp	r3, r4
 800ed58:	6025      	str	r5, [r4, #0]
 800ed5a:	bf18      	it	ne
 800ed5c:	6059      	strne	r1, [r3, #4]
 800ed5e:	6863      	ldr	r3, [r4, #4]
 800ed60:	bf08      	it	eq
 800ed62:	6031      	streq	r1, [r6, #0]
 800ed64:	5162      	str	r2, [r4, r5]
 800ed66:	604b      	str	r3, [r1, #4]
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f104 060b 	add.w	r6, r4, #11
 800ed6e:	f000 f865 	bl	800ee3c <__malloc_unlock>
 800ed72:	f026 0607 	bic.w	r6, r6, #7
 800ed76:	1d23      	adds	r3, r4, #4
 800ed78:	1af2      	subs	r2, r6, r3
 800ed7a:	d0b6      	beq.n	800ecea <_malloc_r+0x22>
 800ed7c:	1b9b      	subs	r3, r3, r6
 800ed7e:	50a3      	str	r3, [r4, r2]
 800ed80:	e7b3      	b.n	800ecea <_malloc_r+0x22>
 800ed82:	6862      	ldr	r2, [r4, #4]
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	bf0c      	ite	eq
 800ed88:	6032      	streq	r2, [r6, #0]
 800ed8a:	605a      	strne	r2, [r3, #4]
 800ed8c:	e7ec      	b.n	800ed68 <_malloc_r+0xa0>
 800ed8e:	4623      	mov	r3, r4
 800ed90:	6864      	ldr	r4, [r4, #4]
 800ed92:	e7b2      	b.n	800ecfa <_malloc_r+0x32>
 800ed94:	4634      	mov	r4, r6
 800ed96:	6876      	ldr	r6, [r6, #4]
 800ed98:	e7b9      	b.n	800ed0e <_malloc_r+0x46>
 800ed9a:	230c      	movs	r3, #12
 800ed9c:	603b      	str	r3, [r7, #0]
 800ed9e:	4638      	mov	r0, r7
 800eda0:	f000 f84c 	bl	800ee3c <__malloc_unlock>
 800eda4:	e7a1      	b.n	800ecea <_malloc_r+0x22>
 800eda6:	6025      	str	r5, [r4, #0]
 800eda8:	e7de      	b.n	800ed68 <_malloc_r+0xa0>
 800edaa:	bf00      	nop
 800edac:	24001954 	.word	0x24001954

0800edb0 <_realloc_r>:
 800edb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb4:	4680      	mov	r8, r0
 800edb6:	4614      	mov	r4, r2
 800edb8:	460e      	mov	r6, r1
 800edba:	b921      	cbnz	r1, 800edc6 <_realloc_r+0x16>
 800edbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edc0:	4611      	mov	r1, r2
 800edc2:	f7ff bf81 	b.w	800ecc8 <_malloc_r>
 800edc6:	b92a      	cbnz	r2, 800edd4 <_realloc_r+0x24>
 800edc8:	f000 f83e 	bl	800ee48 <_free_r>
 800edcc:	4625      	mov	r5, r4
 800edce:	4628      	mov	r0, r5
 800edd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd4:	f000 f884 	bl	800eee0 <_malloc_usable_size_r>
 800edd8:	4284      	cmp	r4, r0
 800edda:	4607      	mov	r7, r0
 800eddc:	d802      	bhi.n	800ede4 <_realloc_r+0x34>
 800edde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ede2:	d812      	bhi.n	800ee0a <_realloc_r+0x5a>
 800ede4:	4621      	mov	r1, r4
 800ede6:	4640      	mov	r0, r8
 800ede8:	f7ff ff6e 	bl	800ecc8 <_malloc_r>
 800edec:	4605      	mov	r5, r0
 800edee:	2800      	cmp	r0, #0
 800edf0:	d0ed      	beq.n	800edce <_realloc_r+0x1e>
 800edf2:	42bc      	cmp	r4, r7
 800edf4:	4622      	mov	r2, r4
 800edf6:	4631      	mov	r1, r6
 800edf8:	bf28      	it	cs
 800edfa:	463a      	movcs	r2, r7
 800edfc:	f7ff fee2 	bl	800ebc4 <memcpy>
 800ee00:	4631      	mov	r1, r6
 800ee02:	4640      	mov	r0, r8
 800ee04:	f000 f820 	bl	800ee48 <_free_r>
 800ee08:	e7e1      	b.n	800edce <_realloc_r+0x1e>
 800ee0a:	4635      	mov	r5, r6
 800ee0c:	e7df      	b.n	800edce <_realloc_r+0x1e>
	...

0800ee10 <_sbrk_r>:
 800ee10:	b538      	push	{r3, r4, r5, lr}
 800ee12:	4d06      	ldr	r5, [pc, #24]	; (800ee2c <_sbrk_r+0x1c>)
 800ee14:	2300      	movs	r3, #0
 800ee16:	4604      	mov	r4, r0
 800ee18:	4608      	mov	r0, r1
 800ee1a:	602b      	str	r3, [r5, #0]
 800ee1c:	f7f6 fa02 	bl	8005224 <_sbrk>
 800ee20:	1c43      	adds	r3, r0, #1
 800ee22:	d102      	bne.n	800ee2a <_sbrk_r+0x1a>
 800ee24:	682b      	ldr	r3, [r5, #0]
 800ee26:	b103      	cbz	r3, 800ee2a <_sbrk_r+0x1a>
 800ee28:	6023      	str	r3, [r4, #0]
 800ee2a:	bd38      	pop	{r3, r4, r5, pc}
 800ee2c:	2400195c 	.word	0x2400195c

0800ee30 <__malloc_lock>:
 800ee30:	4801      	ldr	r0, [pc, #4]	; (800ee38 <__malloc_lock+0x8>)
 800ee32:	f000 b85d 	b.w	800eef0 <__retarget_lock_acquire_recursive>
 800ee36:	bf00      	nop
 800ee38:	24001960 	.word	0x24001960

0800ee3c <__malloc_unlock>:
 800ee3c:	4801      	ldr	r0, [pc, #4]	; (800ee44 <__malloc_unlock+0x8>)
 800ee3e:	f000 b858 	b.w	800eef2 <__retarget_lock_release_recursive>
 800ee42:	bf00      	nop
 800ee44:	24001960 	.word	0x24001960

0800ee48 <_free_r>:
 800ee48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee4a:	2900      	cmp	r1, #0
 800ee4c:	d044      	beq.n	800eed8 <_free_r+0x90>
 800ee4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee52:	9001      	str	r0, [sp, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f1a1 0404 	sub.w	r4, r1, #4
 800ee5a:	bfb8      	it	lt
 800ee5c:	18e4      	addlt	r4, r4, r3
 800ee5e:	f7ff ffe7 	bl	800ee30 <__malloc_lock>
 800ee62:	4a1e      	ldr	r2, [pc, #120]	; (800eedc <_free_r+0x94>)
 800ee64:	9801      	ldr	r0, [sp, #4]
 800ee66:	6813      	ldr	r3, [r2, #0]
 800ee68:	b933      	cbnz	r3, 800ee78 <_free_r+0x30>
 800ee6a:	6063      	str	r3, [r4, #4]
 800ee6c:	6014      	str	r4, [r2, #0]
 800ee6e:	b003      	add	sp, #12
 800ee70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee74:	f7ff bfe2 	b.w	800ee3c <__malloc_unlock>
 800ee78:	42a3      	cmp	r3, r4
 800ee7a:	d908      	bls.n	800ee8e <_free_r+0x46>
 800ee7c:	6825      	ldr	r5, [r4, #0]
 800ee7e:	1961      	adds	r1, r4, r5
 800ee80:	428b      	cmp	r3, r1
 800ee82:	bf01      	itttt	eq
 800ee84:	6819      	ldreq	r1, [r3, #0]
 800ee86:	685b      	ldreq	r3, [r3, #4]
 800ee88:	1949      	addeq	r1, r1, r5
 800ee8a:	6021      	streq	r1, [r4, #0]
 800ee8c:	e7ed      	b.n	800ee6a <_free_r+0x22>
 800ee8e:	461a      	mov	r2, r3
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	b10b      	cbz	r3, 800ee98 <_free_r+0x50>
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	d9fa      	bls.n	800ee8e <_free_r+0x46>
 800ee98:	6811      	ldr	r1, [r2, #0]
 800ee9a:	1855      	adds	r5, r2, r1
 800ee9c:	42a5      	cmp	r5, r4
 800ee9e:	d10b      	bne.n	800eeb8 <_free_r+0x70>
 800eea0:	6824      	ldr	r4, [r4, #0]
 800eea2:	4421      	add	r1, r4
 800eea4:	1854      	adds	r4, r2, r1
 800eea6:	42a3      	cmp	r3, r4
 800eea8:	6011      	str	r1, [r2, #0]
 800eeaa:	d1e0      	bne.n	800ee6e <_free_r+0x26>
 800eeac:	681c      	ldr	r4, [r3, #0]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	6053      	str	r3, [r2, #4]
 800eeb2:	4421      	add	r1, r4
 800eeb4:	6011      	str	r1, [r2, #0]
 800eeb6:	e7da      	b.n	800ee6e <_free_r+0x26>
 800eeb8:	d902      	bls.n	800eec0 <_free_r+0x78>
 800eeba:	230c      	movs	r3, #12
 800eebc:	6003      	str	r3, [r0, #0]
 800eebe:	e7d6      	b.n	800ee6e <_free_r+0x26>
 800eec0:	6825      	ldr	r5, [r4, #0]
 800eec2:	1961      	adds	r1, r4, r5
 800eec4:	428b      	cmp	r3, r1
 800eec6:	bf04      	itt	eq
 800eec8:	6819      	ldreq	r1, [r3, #0]
 800eeca:	685b      	ldreq	r3, [r3, #4]
 800eecc:	6063      	str	r3, [r4, #4]
 800eece:	bf04      	itt	eq
 800eed0:	1949      	addeq	r1, r1, r5
 800eed2:	6021      	streq	r1, [r4, #0]
 800eed4:	6054      	str	r4, [r2, #4]
 800eed6:	e7ca      	b.n	800ee6e <_free_r+0x26>
 800eed8:	b003      	add	sp, #12
 800eeda:	bd30      	pop	{r4, r5, pc}
 800eedc:	24001954 	.word	0x24001954

0800eee0 <_malloc_usable_size_r>:
 800eee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eee4:	1f18      	subs	r0, r3, #4
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	bfbc      	itt	lt
 800eeea:	580b      	ldrlt	r3, [r1, r0]
 800eeec:	18c0      	addlt	r0, r0, r3
 800eeee:	4770      	bx	lr

0800eef0 <__retarget_lock_acquire_recursive>:
 800eef0:	4770      	bx	lr

0800eef2 <__retarget_lock_release_recursive>:
 800eef2:	4770      	bx	lr

0800eef4 <_init>:
 800eef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef6:	bf00      	nop
 800eef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eefa:	bc08      	pop	{r3}
 800eefc:	469e      	mov	lr, r3
 800eefe:	4770      	bx	lr

0800ef00 <_fini>:
 800ef00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef02:	bf00      	nop
 800ef04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef06:	bc08      	pop	{r3}
 800ef08:	469e      	mov	lr, r3
 800ef0a:	4770      	bx	lr
