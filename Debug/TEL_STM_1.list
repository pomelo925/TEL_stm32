
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc78  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800df48  0800df48  0001df48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e24c  0800e24c  0001e24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0800e254  0800e254  0001e254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e268  0800e268  0001e268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800e26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001088  24000080  0800e2e8  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001108  0800e2e8  00021108  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026d52  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000045ab  00000000  00000000  00046dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001590  00000000  00000000  0004b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001430  00000000  00000000  0004c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b16  00000000  00000000  0004dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cfe2  00000000  00000000  0008387e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153db7  00000000  00000000  000a0860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f4617  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005e64  00000000  00000000  001f4668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800df30 	.word	0x0800df30

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800df30 	.word	0x0800df30

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);

void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f976 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f972 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f96e 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f96a 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f966 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f962 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f95e 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f95a 	bl	800a974 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fe6b 	bl	800a39c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 ff45 	bl	800a558 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 ff41 	bl	800a558 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 ff3d 	bl	800a558 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 ff39 	bl	800a558 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	240002e0 	.word	0x240002e0
 80006f0:	240003c4 	.word	0x240003c4
 80006f4:	2400032c 	.word	0x2400032c
 80006f8:	24000378 	.word	0x24000378
 80006fc:	2400045c 	.word	0x2400045c
 8000700:	24000410 	.word	0x24000410
 8000704:	240004a8 	.word	0x240004a8

08000708 <_ZN8DC_motorC1Eddddddd>:


DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio, double limit){
 8000708:	b480      	push	{r7}
 800070a:	b091      	sub	sp, #68	; 0x44
 800070c:	af00      	add	r7, sp, #0
 800070e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000710:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8000714:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8000718:	ed87 2b08 	vstr	d2, [r7, #32]
 800071c:	ed87 3b06 	vstr	d3, [r7, #24]
 8000720:	ed87 4b04 	vstr	d4, [r7, #16]
 8000724:	ed87 5b02 	vstr	d5, [r7, #8]
 8000728:	ed87 6b00 	vstr	d6, [r7]
 800072c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	this->p = p;
 8000734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800073a:	e9c1 2300 	strd	r2, r3, [r1]
	this->i = i;
 800073e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000744:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->d = d;
 8000748:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800074a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800074e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->time = time;
 8000752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000754:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000758:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	this->res_encoder = res;
 800075c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800075e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000762:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->sr_ratio = ratio;
 8000766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800076c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->I_limit=limit;
 8000770:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000776:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 800077a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800077c:	4618      	mov	r0, r3
 800077e:	3744      	adds	r7, #68	; 0x44
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <_ZN8DC_motor10PIDControlEv>:

void DC_motor::PIDControl(void){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	pid_check++;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	temp = error;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	if(rps_now>10||rps_now<-10){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80007ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f6:	dc09      	bgt.n	800080c <_ZN8DC_motor10PIDControlEv+0x84>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007fe:	eeba 6b04 	vmov.f64	d6, #164	; 0xc1200000 -10.0
 8000802:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d50d      	bpl.n	8000828 <_ZN8DC_motor10PIDControlEv+0xa0>
		rps_now=0;
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	f04f 0200 	mov.w	r2, #0
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		I=0;
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 0200 	mov.w	r2, #0
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	error = rps_goal - rps_now;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000834:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	P = p * error;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	ed93 6b00 	vldr	d6, [r3]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800084a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	ed83 7b02 	vstr	d7, [r3, #8]
	sum = i * error * time;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	ed93 6b04 	vldr	d6, [r3, #16]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8000860:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800086a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	I = I + sum;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	ed93 6b06 	vldr	d6, [r3, #24]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000880:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	ed83 7b06 	vstr	d7, [r3, #24]
	if (rps_now == 0) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000890:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000898:	d106      	bne.n	80008a8 <_ZN8DC_motor10PIDControlEv+0x120>
		I = 0;
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 0200 	mov.w	r2, #0
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I >= I_limit) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	ed93 6b06 	vldr	d6, [r3, #24]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80008b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008bc:	db05      	blt.n	80008ca <_ZN8DC_motor10PIDControlEv+0x142>
		I = I_limit;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I < -I_limit) {
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	ed93 6b06 	vldr	d6, [r3, #24]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008d6:	eeb1 7b47 	vneg.f64	d7, d7
 80008da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80008de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e2:	d507      	bpl.n	80008f4 <_ZN8DC_motor10PIDControlEv+0x16c>
		I = -I_limit;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80008ea:	eeb1 7b47 	vneg.f64	d7, d7
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	ed83 7b06 	vstr	d7, [r3, #24]
	}
	D = d * (error - temp) / time;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	ed93 6b08 	vldr	d6, [r3, #32]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8000906:	ee35 7b47 	vsub.f64	d7, d5, d7
 800090a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8000914:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	PID = P + I + D;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	ed93 6b02 	vldr	d6, [r3, #8]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	ed93 7b06 	vldr	d7, [r3, #24]
 800092a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000934:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	0000      	movs	r0, r0
 800094c:	0000      	movs	r0, r0
	...

08000950 <_Z41__static_initialization_and_destruction_0ii>:
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d148      	bne.n	80009f2 <_Z41__static_initialization_and_destruction_0ii+0xa2>
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000966:	4293      	cmp	r3, r2
 8000968:	d143      	bne.n	80009f2 <_Z41__static_initialization_and_destruction_0ii+0xa2>
DC_motor fr(25000,10,0.1,0.0005,512,13.2,200);
 800096a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000a00 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800096e:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8000a08 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000972:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8000a10 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000976:	ed9f 3b28 	vldr	d3, [pc, #160]	; 8000a18 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800097a:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8000a20 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 800097e:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8000982:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8000a28 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000986:	482a      	ldr	r0, [pc, #168]	; (8000a30 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8000988:	f7ff febe 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor fl(25000,10,0.1,0.0005,512,13.2,200);
 800098c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000a00 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000990:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8000a08 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000994:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8000a10 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000998:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 8000a18 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800099c:	ed9f 2b20 	vldr	d2, [pc, #128]	; 8000a20 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80009a0:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80009a4:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8000a28 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80009a8:	4822      	ldr	r0, [pc, #136]	; (8000a34 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80009aa:	f7ff fead 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor br(25000,10,0.1,0.0005,512,13.2,200);
 80009ae:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000a00 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80009b2:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000a08 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80009b6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8000a10 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80009ba:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8000a18 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80009be:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8000a20 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80009c2:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80009c6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8000a28 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80009ca:	481b      	ldr	r0, [pc, #108]	; (8000a38 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80009cc:	f7ff fe9c 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
DC_motor bl(25000,10,0.1,0.0005,512,13.2,200);
 80009d0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000a00 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80009d4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000a08 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80009d8:	ed9f 4b0d 	vldr	d4, [pc, #52]	; 8000a10 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80009dc:	ed9f 3b0e 	vldr	d3, [pc, #56]	; 8000a18 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80009e0:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8000a20 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80009e4:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80009e8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8000a28 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80009ee:	f7ff fe8b 	bl	8000708 <_ZN8DC_motorC1Eddddddd>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	f3af 8000 	nop.w
 8000a00:	00000000 	.word	0x00000000
 8000a04:	40690000 	.word	0x40690000
 8000a08:	66666666 	.word	0x66666666
 8000a0c:	402a6666 	.word	0x402a6666
 8000a10:	00000000 	.word	0x00000000
 8000a14:	40800000 	.word	0x40800000
 8000a18:	d2f1a9fc 	.word	0xd2f1a9fc
 8000a1c:	3f40624d 	.word	0x3f40624d
 8000a20:	9999999a 	.word	0x9999999a
 8000a24:	3fb99999 	.word	0x3fb99999
 8000a28:	00000000 	.word	0x00000000
 8000a2c:	40d86a00 	.word	0x40d86a00
 8000a30:	240000a0 	.word	0x240000a0
 8000a34:	24000130 	.word	0x24000130
 8000a38:	240001c0 	.word	0x240001c0
 8000a3c:	24000250 	.word	0x24000250

08000a40 <_GLOBAL__sub_I_fr>:
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff ff81 	bl	8000950 <_Z41__static_initialization_and_destruction_0ii>
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_Z10debug_loopv>:

/** debug which function **/
bool mecanum_debug = true;


void debug_loop(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) STM::run_mecanum();
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <_Z10debug_loopv+0x14>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0fb      	beq.n	8000a54 <_Z10debug_loopv+0x4>
 8000a5c:	f003 fdce 	bl	80045fc <_ZN3STM11run_mecanumEv>
 8000a60:	e7f8      	b.n	8000a54 <_Z10debug_loopv+0x4>
 8000a62:	bf00      	nop
 8000a64:	24000001 	.word	0x24000001

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f004 f810 	bl	8004a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f818 	bl	8000aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 fb56 	bl	8001124 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a78:	f000 f884 	bl	8000b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a7c:	f000 f8d6 	bl	8000c2c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a80:	f000 f92a 	bl	8000cd8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a84:	f000 f97e 	bl	8000d84 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000a88:	f000 f9d2 	bl	8000e30 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000a8c:	f000 fa20 	bl	8000ed0 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000a90:	f000 fa42 	bl	8000f18 <MX_TIM15_Init>
  MX_DMA_Init();
 8000a94:	f000 fb1e 	bl	80010d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 fad0 	bl	800103c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000a9c:	f000 fc36 	bl	800130c <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <main+0x38>
	...

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09c      	sub	sp, #112	; 0x70
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	224c      	movs	r2, #76	; 0x4c
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00d f8b2 	bl	800dc1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2220      	movs	r2, #32
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00d f8ac 	bl	800dc1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f007 f981 	bl	8007dcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <SystemClock_Config+0xdc>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad6:	4a2a      	ldr	r2, [pc, #168]	; (8000b80 <SystemClock_Config+0xdc>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <SystemClock_Config+0xdc>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aea:	bf00      	nop
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <SystemClock_Config+0xdc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000af8:	d1f8      	bne.n	8000aec <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afa:	2301      	movs	r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000b10:	232a      	movs	r3, #42	; 0x2a
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b20:	230c      	movs	r3, #12
 8000b22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 f985 	bl	8007e40 <HAL_RCC_OscConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b3c:	f000 fbe0 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b40:	233f      	movs	r3, #63	; 0x3f
 8000b42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b44:	2303      	movs	r3, #3
 8000b46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b52:	2340      	movs	r3, #64	; 0x40
 8000b54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b56:	2340      	movs	r3, #64	; 0x40
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2102      	movs	r1, #2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f007 fd17 	bl	800859c <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b74:	f000 fbc4 	bl	8001300 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3770      	adds	r7, #112	; 0x70
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58024800 	.word	0x58024800

08000b84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2224      	movs	r2, #36	; 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00d f842 	bl	800dc1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000ba4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be2:	2301      	movs	r3, #1
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000bf6:	f009 fe17 	bl	800a828 <HAL_TIM_Encoder_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c00:	f000 fb7e 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_TIM2_Init+0xa4>)
 8000c12:	f00a fd3b 	bl	800b68c <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c1c:	f000 fb70 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	240002e0 	.word	0x240002e0

08000c2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2224      	movs	r2, #36	; 0x24
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00c ffee 	bl	800dc1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <MX_TIM3_Init+0xa8>)
 8000c4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000c9c:	f009 fdc4 	bl	800a828 <HAL_TIM_Encoder_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ca6:	f000 fb2b 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_TIM3_Init+0xa4>)
 8000cb8:	f00a fce8 	bl	800b68c <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cc2:	f000 fb1d 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2400032c 	.word	0x2400032c
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2224      	movs	r2, #36	; 0x24
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00c ff98 	bl	800dc1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <MX_TIM4_Init+0xa8>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d24:	2301      	movs	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d34:	2301      	movs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	480d      	ldr	r0, [pc, #52]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000d48:	f009 fd6e 	bl	800a828 <HAL_TIM_Encoder_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d52:	f000 fad5 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_TIM4_Init+0xa4>)
 8000d64:	f00a fc92 	bl	800b68c <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d6e:	f000 fac7 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	24000378 	.word	0x24000378
 8000d80:	40000800 	.word	0x40000800

08000d84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	2224      	movs	r2, #36	; 0x24
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00c ff42 	bl	800dc1c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <MX_TIM5_Init+0xa8>)
 8000da6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000db6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000de0:	2301      	movs	r3, #1
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000df4:	f009 fd18 	bl	800a828 <HAL_TIM_Encoder_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dfe:	f000 fa7f 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_TIM5_Init+0xa4>)
 8000e10:	f00a fc3c 	bl	800b68c <HAL_TIMEx_MasterConfigSynchronization>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e1a:	f000 fa71 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3730      	adds	r7, #48	; 0x30
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	240003c4 	.word	0x240003c4
 8000e2c:	40000c00 	.word	0x40000c00

08000e30 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e4a:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_TIM12_Init+0x9c>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e60:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e70:	f009 fb1a 	bl	800a4a8 <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000e7a:	f000 fa41 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	; 0x60
 8000e80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000e96:	f009 ff1b 	bl	800acd0 <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000ea0:	f000 fa2e 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000eac:	f009 ff10 	bl	800acd0 <HAL_TIM_PWM_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000eb6:	f000 fa23 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_TIM12_Init+0x98>)
 8000ebc:	f003 f9f4 	bl	80042a8 <HAL_TIM_MspPostInit>

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	24000410 	.word	0x24000410
 8000ecc:	40001800 	.word	0x40001800

08000ed0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_TIM13_Init+0x40>)
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <MX_TIM13_Init+0x44>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <MX_TIM13_Init+0x40>)
 8000edc:	223f      	movs	r2, #63	; 0x3f
 8000ede:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_TIM13_Init+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_TIM13_Init+0x40>)
 8000ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_TIM13_Init+0x40>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_TIM13_Init+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_TIM13_Init+0x40>)
 8000efc:	f009 f9f6 	bl	800a2ec <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000f06:	f000 f9fb 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2400045c 	.word	0x2400045c
 8000f14:	40001c00 	.word	0x40001c00

08000f18 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b098      	sub	sp, #96	; 0x60
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2234      	movs	r2, #52	; 0x34
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00c fe69 	bl	800dc1c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f4a:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f4c:	4a3a      	ldr	r2, [pc, #232]	; (8001038 <MX_TIM15_Init+0x120>)
 8000f4e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b37      	ldr	r3, [pc, #220]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000f5c:	4b35      	ldr	r3, [pc, #212]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f76:	482f      	ldr	r0, [pc, #188]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f78:	f009 fa96 	bl	800a4a8 <HAL_TIM_PWM_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 f9bd 	bl	8001300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000f8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f92:	4619      	mov	r1, r3
 8000f94:	4827      	ldr	r0, [pc, #156]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000f96:	f00a fb79 	bl	800b68c <HAL_TIMEx_MasterConfigSynchronization>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f000 f9ae 	bl	8001300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fac:	2300      	movs	r3, #0
 8000fae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481a      	ldr	r0, [pc, #104]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000fca:	f009 fe81 	bl	800acd0 <HAL_TIM_PWM_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000fd4:	f000 f994 	bl	8001300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <MX_TIM15_Init+0x11c>)
 8000fe2:	f009 fe75 	bl	800acd0 <HAL_TIM_PWM_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000fec:	f000 f988 	bl	8001300 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM15_Init+0x11c>)
 8001018:	f00a fbd4 	bl	800b7c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001022:	f000 f96d 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM15_Init+0x11c>)
 8001028:	f003 f93e 	bl	80042a8 <HAL_TIM_MspPostInit>

}
 800102c:	bf00      	nop
 800102e:	3760      	adds	r7, #96	; 0x60
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	240004a8 	.word	0x240004a8
 8001038:	40014000 	.word	0x40014000

0800103c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <MX_USART1_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001086:	f00a fc5b 	bl	800b940 <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f936 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001098:	f00c fca2 	bl	800d9e0 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 f92d 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010aa:	f00c fcd7 	bl	800da5c <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f000 f924 	bl	8001300 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010ba:	f00c fc58 	bl	800d96e <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f91c 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	240004f4 	.word	0x240004f4
 80010d0:	40011000 	.word	0x40011000

080010d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_DMA_Init+0x4c>)
 80010dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <MX_DMA_Init+0x4c>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <MX_DMA_Init+0x4c>)
 80010ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	200b      	movs	r0, #11
 80010fe:	f003 fe34 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001102:	200b      	movs	r0, #11
 8001104:	f003 fe4b 	bl	8004d9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	200c      	movs	r0, #12
 800110e:	f003 fe2c 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001112:	200c      	movs	r0, #12
 8001114:	f003 fe43 	bl	8004d9e <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58024400 	.word	0x58024400

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a69      	ldr	r2, [pc, #420]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b67      	ldr	r3, [pc, #412]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001158:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	4a62      	ldr	r2, [pc, #392]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001168:	4b5f      	ldr	r3, [pc, #380]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a5a      	ldr	r2, [pc, #360]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b58      	ldr	r3, [pc, #352]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0320 	and.w	r3, r3, #32
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001194:	4b54      	ldr	r3, [pc, #336]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a53      	ldr	r2, [pc, #332]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a4b      	ldr	r2, [pc, #300]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a44      	ldr	r2, [pc, #272]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ee:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	4a3c      	ldr	r2, [pc, #240]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <MX_GPIO_Init+0x1c4>)
 8001200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001212:	4836      	ldr	r0, [pc, #216]	; (80012ec <MX_GPIO_Init+0x1c8>)
 8001214:	f006 fdc0 	bl	8007d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f242 0120 	movw	r1, #8224	; 0x2020
 800121e:	4834      	ldr	r0, [pc, #208]	; (80012f0 <MX_GPIO_Init+0x1cc>)
 8001220:	f006 fdba 	bl	8007d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 800122a:	4832      	ldr	r0, [pc, #200]	; (80012f4 <MX_GPIO_Init+0x1d0>)
 800122c:	f006 fdb4 	bl	8007d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8001236:	4830      	ldr	r0, [pc, #192]	; (80012f8 <MX_GPIO_Init+0x1d4>)
 8001238:	f006 fdae 	bl	8007d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001242:	482e      	ldr	r0, [pc, #184]	; (80012fc <MX_GPIO_Init+0x1d8>)
 8001244:	f006 fda8 	bl	8007d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001248:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4822      	ldr	r0, [pc, #136]	; (80012ec <MX_GPIO_Init+0x1c8>)
 8001262:	f006 fbf1 	bl	8007a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001266:	f242 0320 	movw	r3, #8224	; 0x2020
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	481c      	ldr	r0, [pc, #112]	; (80012f0 <MX_GPIO_Init+0x1cc>)
 8001280:	f006 fbe2 	bl	8007a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001284:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <MX_GPIO_Init+0x1d0>)
 800129e:	f006 fbd3 	bl	8007a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 80012a2:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <MX_GPIO_Init+0x1d4>)
 80012bc:	f006 fbc4 	bl	8007a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 80012c0:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <MX_GPIO_Init+0x1d8>)
 80012da:	f006 fbb5 	bl	8007a48 <HAL_GPIO_Init>

}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58021000 	.word	0x58021000
 80012f0:	58020800 	.word	0x58020800
 80012f4:	58021400 	.word	0x58021400
 80012f8:	58020400 	.word	0x58020400
 80012fc:	58020c00 	.word	0x58020c00

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	ROS::setup();
 8001310:	f001 ff8a 	bl	8003228 <_ZN3ROS5setupEv>
	STM::setup();
 8001314:	f003 f96c 	bl	80045f0 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <main_function+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <main_function+0x1a>
 8001320:	f7ff fb96 	bl	8000a50 <_Z10debug_loopv>
 8001324:	e7f8      	b.n	8001318 <main_function+0xc>
		else ROS::loop();
 8001326:	f001 ff8f 	bl	8003248 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 800132a:	e7f5      	b.n	8001318 <main_function+0xc>
 800132c:	24000000 	.word	0x24000000

08001330 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9c1 2300 	strd	r2, r3, [r1]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ffd8 	bl	8001330 <_ZN8CAR_INFOC1Ev>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3318      	adds	r3, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ffd3 	bl	8001330 <_ZN8CAR_INFOC1Ev>
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <_ZN7MecanumC1Ev+0x60>)
 8001392:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	a309      	add	r3, pc, #36	; (adr r3, 80013c0 <_ZN7MecanumC1Ev+0x50>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	a308      	add	r3, pc, #32	; (adr r3, 80013c8 <_ZN7MecanumC1Ev+0x58>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 80013ae:	f7ff f965 	bl	800067c <_Z13DC_motor_initv>
}
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	4020cccc 	.word	0x4020cccc
 80013c8:	39581062 	.word	0x39581062
 80013cc:	400d48b4 	.word	0x400d48b4
 80013d0:	40270000 	.word	0x40270000

080013d4 <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f807 	bl	80013f0 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f894 	bl	8001510 <_ZN7Mecanum13tf2_car_speedEv>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZN7Mecanum15tf2_wheel_speedEv>:

// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	fr.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	ed93 7b00 	vldr	d7, [r3]
 8001404:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	ed93 5b04 	vldr	d5, [r3, #16]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800141a:	ee34 7b07 	vadd.f64	d7, d4, d7
 800141e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001422:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800142c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <_ZN7Mecanum15tf2_wheel_speedEv+0x10c>)
 8001432:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fl.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	ed93 6b02 	vldr	d6, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	ed93 7b00 	vldr	d7, [r3]
 8001442:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	ed93 5b04 	vldr	d5, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001458:	ee34 7b07 	vadd.f64	d7, d4, d7
 800145c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001460:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800146a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <_ZN7Mecanum15tf2_wheel_speedEv+0x110>)
 8001470:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = (CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	ed93 6b02 	vldr	d6, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	ed93 7b00 	vldr	d7, [r3]
 8001480:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	ed93 5b04 	vldr	d5, [r3, #16]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001496:	ee34 7b07 	vadd.f64	d7, d4, d7
 800149a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800149e:	ee36 5b47 	vsub.f64	d5, d6, d7
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80014a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_ZN7Mecanum15tf2_wheel_speedEv+0x114>)
 80014ae:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	ed93 7b00 	vldr	d7, [r3]
 80014be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	ed93 5b04 	vldr	d5, [r3, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80014d4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80014d8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014dc:	ee36 5b07 	vadd.f64	d5, d6, d7
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80014e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_ZN7Mecanum15tf2_wheel_speedEv+0x118>)
 80014ec:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	240000a0 	.word	0x240000a0
 8001500:	24000130 	.word	0x24000130
 8001504:	24000250 	.word	0x24000250
 8001508:	240001c0 	.word	0x240001c0
 800150c:	00000000 	.word	0x00000000

08001510 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800151e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80015f8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 8001522:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001526:	4b36      	ldr	r3, [pc, #216]	; (8001600 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001528:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800152c:	4b35      	ldr	r3, [pc, #212]	; (8001604 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 800152e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001532:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001538:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800153c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 8001542:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001546:	ee35 7b07 	vadd.f64	d7, d5, d7
 800154a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*radius*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800155a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80015f8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800155e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 8001564:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001568:	4b25      	ldr	r3, [pc, #148]	; (8001600 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800156a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800156e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001574:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001578:	ee35 5b07 	vadd.f64	d5, d5, d7
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 800157e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001582:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001586:	ee26 7b07 	vmul.f64	d7, d6, d7
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001596:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80015f8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800159a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80015aa:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015ae:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80015b2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80015b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 80015bc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80015c2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80015c6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 80015cc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80015d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 80015d6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80015da:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	f3af 8000 	nop.w
	...
 8001600:	24000130 	.word	0x24000130
 8001604:	240000a0 	.word	0x240000a0
 8001608:	24000250 	.word	0x24000250
 800160c:	240001c0 	.word	0x240001c0

08001610 <_Z41__static_initialization_and_destruction_0ii>:
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001626:	4293      	cmp	r3, r2
 8001628:	d102      	bne.n	8001630 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 800162a:	4803      	ldr	r0, [pc, #12]	; (8001638 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800162c:	f7ff fea0 	bl	8001370 <_ZN7MecanumC1Ev>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	24000678 	.word	0x24000678

0800163c <_GLOBAL__sub_I_mecanum>:
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
 8001640:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff ffe3 	bl	8001610 <_Z41__static_initialization_and_destruction_0ii>
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <_ZN3ros3MsgC1Ev+0x1c>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	0800e1fc 	.word	0x0800e1fc

08001690 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
      data()
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ffe8 	bl	8001670 <_ZN3ros3MsgC1Ev>
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3304      	adds	r3, #4
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ffce 	bl	800164c <_ZN3ros4TimeC1Ev>
    {
    }
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0800e1e4 	.word	0x0800e1e4

080016c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6859      	ldr	r1, [r3, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	b2ca      	uxtb	r2, r1
 80016da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0a19      	lsrs	r1, r3, #8
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0c19      	lsrs	r1, r3, #16
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3302      	adds	r3, #2
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0e19      	lsrs	r1, r3, #24
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3303      	adds	r3, #3
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3304      	adds	r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4413      	add	r3, r2
 8001722:	b2ca      	uxtb	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	0a19      	lsrs	r1, r3, #8
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	b2ca      	uxtb	r2, r1
 8001736:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	0c19      	lsrs	r1, r3, #16
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3302      	adds	r3, #2
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	4413      	add	r3, r2
 8001746:	b2ca      	uxtb	r2, r1
 8001748:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	0e19      	lsrs	r1, r3, #24
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3303      	adds	r3, #3
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	b2ca      	uxtb	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3304      	adds	r3, #4
 8001760:	60fb      	str	r3, [r7, #12]
      return offset;
 8001762:	68fb      	ldr	r3, [r7, #12]
    }
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	440b      	add	r3, r1
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3302      	adds	r3, #2
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	440b      	add	r3, r1
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3303      	adds	r3, #3
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	440b      	add	r3, r1
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	061b      	lsls	r3, r3, #24
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3304      	adds	r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	6839      	ldr	r1, [r7, #0]
 80017ec:	440b      	add	r3, r1
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3302      	adds	r3, #2
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	440b      	add	r3, r1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3303      	adds	r3, #3
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	440b      	add	r3, r1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3304      	adds	r3, #4
 8001828:	60fb      	str	r3, [r7, #12]
     return offset;
 800182a:	68fb      	ldr	r3, [r7, #12]
    }
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	0800df48 	.word	0x0800df48

08001854 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	0800df58 	.word	0x0800df58

08001870 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fef8 	bl	8001670 <_ZN3ros3MsgC1Ev>
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	809a      	strh	r2, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800189c:	611a      	str	r2, [r3, #16]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
    {
    }
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	0800e1cc 	.word	0x0800e1cc
 80018b4:	0800df7c 	.word	0x0800df7c

080018b8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8899      	ldrh	r1, [r3, #4]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2ca      	uxtb	r2, r1
 80018d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	889b      	ldrh	r3, [r3, #4]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b299      	uxth	r1, r3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	b2ca      	uxtb	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	3302      	adds	r3, #2
 80018ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fd0c 	bl	8000310 <strlen>
 80018f8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	69b9      	ldr	r1, [r7, #24]
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fcce 	bl	80032a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	3304      	adds	r3, #4
 800190c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	18d0      	adds	r0, r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4619      	mov	r1, r3
 800191c:	f00c f970 	bl	800dc00 <memcpy>
      offset += length_topic_name;
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4413      	add	r3, r2
 8001926:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fcef 	bl	8000310 <strlen>
 8001932:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	6979      	ldr	r1, [r7, #20]
 800193c:	4618      	mov	r0, r3
 800193e:	f001 fcb1 	bl	80032a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	18d0      	adds	r0, r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4619      	mov	r1, r3
 8001956:	f00c f953 	bl	800dc00 <memcpy>
      offset += length_message_type;
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	4413      	add	r3, r2
 8001960:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fcd2 	bl	8000310 <strlen>
 800196c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	6939      	ldr	r1, [r7, #16]
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fc94 	bl	80032a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	3304      	adds	r3, #4
 8001980:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	18d0      	adds	r0, r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4619      	mov	r1, r3
 8001990:	f00c f936 	bl	800dc00 <memcpy>
      offset += length_md5sum;
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	0a19      	lsrs	r1, r3, #8
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	0c19      	lsrs	r1, r3, #16
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3302      	adds	r3, #2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0e19      	lsrs	r1, r3, #24
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3303      	adds	r3, #3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	61fb      	str	r3, [r7, #28]
      return offset;
 80019e4:	69fb      	ldr	r3, [r7, #28]
    }
 80019e6:	4618      	mov	r0, r3
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b08a      	sub	sp, #40	; 0x28
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	3301      	adds	r3, #1
 8001a14:	6839      	ldr	r1, [r7, #0]
 8001a16:	440b      	add	r3, r1
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	441a      	add	r2, r3
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fc50 	bl	80032e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	3304      	adds	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4413      	add	r3, r2
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d20c      	bcs.n	8001a70 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	441a      	add	r2, r3
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	440b      	add	r3, r1
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e7ec      	b.n	8001a4a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	4413      	add	r3, r2
 8001a76:	3b01      	subs	r3, #1
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	441a      	add	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	4413      	add	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	441a      	add	r2, r3
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 fc1d 	bl	80032e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	6a3a      	ldr	r2, [r7, #32]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d20c      	bcs.n	8001ad6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	441a      	add	r2, r3
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	440b      	add	r3, r1
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	e7ec      	b.n	8001ab0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4413      	add	r3, r2
 8001adc:	3b01      	subs	r3, #1
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	441a      	add	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4413      	add	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	441a      	add	r2, r3
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 fbea 	bl	80032e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d20c      	bcs.n	8001b3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	441a      	add	r2, r3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	440b      	add	r3, r1
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e7ec      	b.n	8001b16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	3b01      	subs	r3, #1
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	441a      	add	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	440a      	add	r2, r1
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	3301      	adds	r3, #1
 8001b78:	6839      	ldr	r1, [r7, #0]
 8001b7a:	440b      	add	r3, r1
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	440b      	add	r3, r1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	440b      	add	r3, r1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	061b      	lsls	r3, r3, #24
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	61bb      	str	r3, [r7, #24]
     return offset;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
    }
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	0800df80 	.word	0x0800df80

08001bdc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	0800df9c 	.word	0x0800df9c

08001bf8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fd34 	bl	8001670 <_ZN3ros3MsgC1Ev>
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	711a      	strb	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c18:	609a      	str	r2, [r3, #8]
    {
    }
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	0800e1b4 	.word	0x0800e1b4
 8001c28:	0800df7c 	.word	0x0800df7c

08001c2c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	7912      	ldrb	r2, [r2, #4]
 8001c44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fb5d 	bl	8000310 <strlen>
 8001c56:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 fb1f 	bl	80032a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	18d0      	adds	r0, r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f00b ffc1 	bl	800dc00 <memcpy>
      offset += length_msg;
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c86:	68fb      	ldr	r3, [r7, #12]
    }
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	3301      	adds	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	441a      	add	r2, r3
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fb0f 	bl	80032e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d20c      	bcs.n	8001cf2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	441a      	add	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e7ec      	b.n	8001ccc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
     return offset;
 8001d16:	693b      	ldr	r3, [r7, #16]
    }
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	0800dfc0 	.word	0x0800dfc0

08001d3c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	0800dfd4 	.word	0x0800dfd4

08001d58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc84 	bl	8001670 <_ZN3ros3MsgC1Ev>
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	0800e19c 	.word	0x0800e19c

08001da0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0a19      	lsrs	r1, r3, #8
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b2ca      	uxtb	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	0c19      	lsrs	r1, r3, #16
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0e19      	lsrs	r1, r3, #24
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	3303      	adds	r3, #3
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2ca      	uxtb	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	3304      	adds	r3, #4
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d22b      	bcs.n	8001e5e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b2ca      	uxtb	r2, r1
 8001e1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	0a19      	lsrs	r1, r3, #8
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	3301      	adds	r3, #1
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b2ca      	uxtb	r2, r1
 8001e2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	0c19      	lsrs	r1, r3, #16
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3302      	adds	r3, #2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2ca      	uxtb	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	0e19      	lsrs	r1, r3, #24
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	3303      	adds	r3, #3
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	3304      	adds	r3, #4
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	623b      	str	r3, [r7, #32]
 8001e5c:	e7ce      	b.n	8001dfc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	0a19      	lsrs	r1, r3, #8
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	3301      	adds	r3, #1
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	0c19      	lsrs	r1, r3, #16
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3302      	adds	r3, #2
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b2ca      	uxtb	r2, r1
 8001e8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	0e19      	lsrs	r1, r3, #24
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	3303      	adds	r3, #3
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d22b      	bcs.n	8001f0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2ca      	uxtb	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	0a19      	lsrs	r1, r3, #8
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	b2ca      	uxtb	r2, r1
 8001ede:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	0c19      	lsrs	r1, r3, #16
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	0e19      	lsrs	r1, r3, #24
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	3303      	adds	r3, #3
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	b2ca      	uxtb	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	3304      	adds	r3, #4
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	e7ce      	b.n	8001eac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69d9      	ldr	r1, [r3, #28]
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	b2ca      	uxtb	r2, r1
 8001f1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	0a19      	lsrs	r1, r3, #8
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	3301      	adds	r3, #1
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	b2ca      	uxtb	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	0c19      	lsrs	r1, r3, #16
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	3302      	adds	r3, #2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	0e19      	lsrs	r1, r3, #24
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	3303      	adds	r3, #3
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b2ca      	uxtb	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	3304      	adds	r3, #4
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d228      	bcs.n	8001fb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe f9cc 	bl	8000310 <strlen>
 8001f78:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	6979      	ldr	r1, [r7, #20]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 f98e 	bl	80032a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	18d0      	adds	r0, r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f00b fe2c 	bl	800dc00 <memcpy>
      offset += length_stringsi;
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4413      	add	r3, r2
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	e7d1      	b.n	8001f5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b08e      	sub	sp, #56	; 0x38
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	3301      	adds	r3, #1
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	6a3a      	ldr	r2, [r7, #32]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fee:	3302      	adds	r3, #2
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	6a3a      	ldr	r2, [r7, #32]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	3303      	adds	r3, #3
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	6a3a      	ldr	r2, [r7, #32]
 800200c:	4313      	orrs	r3, r2
 800200e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002012:	3304      	adds	r3, #4
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	6a3a      	ldr	r2, [r7, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d90a      	bls.n	8002036 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f00b fdfe 	bl	800dc2c <realloc>
 8002030:	4602      	mov	r2, r0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a3a      	ldr	r2, [r7, #32]
 800203a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800203c:	2300      	movs	r3, #0
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002046:	429a      	cmp	r2, r3
 8002048:	d236      	bcs.n	80020b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002052:	6839      	ldr	r1, [r7, #0]
 8002054:	440a      	add	r2, r1
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002060:	3301      	adds	r3, #1
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	440b      	add	r3, r1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002072:	3302      	adds	r3, #2
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	440b      	add	r3, r1
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	041b      	lsls	r3, r3, #16
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	3303      	adds	r3, #3
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	440b      	add	r3, r1
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	3304      	adds	r3, #4
 800209c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	3208      	adds	r2, #8
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	3301      	adds	r3, #1
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
 80020b6:	e7c3      	b.n	8002040 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c4:	3301      	adds	r3, #1
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	3302      	adds	r3, #2
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e8:	3303      	adds	r3, #3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fa:	3304      	adds	r3, #4
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	429a      	cmp	r2, r3
 8002106:	d90a      	bls.n	800211e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f00b fd8a 	bl	800dc2c <realloc>
 8002118:	4602      	mov	r2, r0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212e:	429a      	cmp	r2, r3
 8002130:	d236      	bcs.n	80021a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	440a      	add	r2, r1
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	3301      	adds	r3, #1
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	440b      	add	r3, r1
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	3302      	adds	r3, #2
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	440b      	add	r3, r1
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	3303      	adds	r3, #3
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	440b      	add	r3, r1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	3304      	adds	r3, #4
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	3214      	adds	r2, #20
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	3301      	adds	r3, #1
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800219e:	e7c3      	b.n	8002128 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	3301      	adds	r3, #1
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	3302      	adds	r3, #2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d0:	3303      	adds	r3, #3
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	3304      	adds	r3, #4
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d90a      	bls.n	8002206 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f00b fd16 	bl	800dc2c <realloc>
 8002200:	4602      	mov	r2, r0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002216:	429a      	cmp	r2, r3
 8002218:	d23f      	bcs.n	800229a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	441a      	add	r2, r3
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f85a 	bl	80032e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	3304      	adds	r3, #4
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	429a      	cmp	r2, r3
 8002240:	d20c      	bcs.n	800225c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	441a      	add	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3b01      	subs	r3, #1
 800224c:	6839      	ldr	r1, [r7, #0]
 800224e:	440b      	add	r3, r1
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	3301      	adds	r3, #1
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	e7ec      	b.n	8002236 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800225c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	3b01      	subs	r3, #1
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	3b01      	subs	r3, #1
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	441a      	add	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4413      	add	r3, r2
 800227e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	3220      	adds	r2, #32
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002294:	3301      	adds	r3, #1
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
 8002298:	e7ba      	b.n	8002210 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800229c:	4618      	mov	r0, r3
 800229e:	3738      	adds	r7, #56	; 0x38
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	0800e0f0 	.word	0x0800e0f0

080022c0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	0800dff8 	.word	0x0800dff8

080022dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	611a      	str	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
  }
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a42      	ldr	r2, [pc, #264]	; (8002440 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d068      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a40      	ldr	r2, [pc, #256]	; (8002444 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d061      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d05a      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a3b      	ldr	r2, [pc, #236]	; (800244c <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d053      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a38      	ldr	r2, [pc, #224]	; (8002450 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d04c      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a36      	ldr	r2, [pc, #216]	; (8002454 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d045      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a33      	ldr	r2, [pc, #204]	; (8002458 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d03e      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a31      	ldr	r2, [pc, #196]	; (800245c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d037      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d030      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d029      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a29      	ldr	r2, [pc, #164]	; (8002468 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d022      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a27      	ldr	r2, [pc, #156]	; (800246c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d01b      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d014      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a22      	ldr	r2, [pc, #136]	; (8002474 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d006      	beq.n	800240c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d109      	bne.n	8002420 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800241a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241e:	e008      	b.n	8002432 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40020010 	.word	0x40020010
 8002444:	40020028 	.word	0x40020028
 8002448:	40020040 	.word	0x40020040
 800244c:	40020058 	.word	0x40020058
 8002450:	40020070 	.word	0x40020070
 8002454:	40020088 	.word	0x40020088
 8002458:	400200a0 	.word	0x400200a0
 800245c:	400200b8 	.word	0x400200b8
 8002460:	40020410 	.word	0x40020410
 8002464:	40020428 	.word	0x40020428
 8002468:	40020440 	.word	0x40020440
 800246c:	40020458 	.word	0x40020458
 8002470:	40020470 	.word	0x40020470
 8002474:	40020488 	.word	0x40020488
 8002478:	400204a0 	.word	0x400204a0
 800247c:	400204b8 	.word	0x400204b8

08002480 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <_ZN13STM32HardwareC1Ev+0x34>)
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	240004f4 	.word	0x240004f4

080024b8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f804 	bl	80024ce <_ZN13STM32Hardware10reset_rbufEv>
    }
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3304      	adds	r3, #4
 80024de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e2:	4619      	mov	r1, r3
 80024e4:	f009 fb0e 	bl	800bb04 <HAL_UART_Receive_DMA>
    }
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff0d 	bl	8002324 <_ZN13STM32Hardware10getRdmaIndEv>
 800250a:	4603      	mov	r3, r0
 800250c:	429c      	cmp	r4, r3
 800250e:	bf14      	ite	ne
 8002510:	2301      	movne	r3, #1
 8002512:	2300      	moveq	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002520:	1c59      	adds	r1, r3, #1
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	791b      	ldrb	r3, [r3, #4]
 800252e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002540:	68fb      	ldr	r3, [r7, #12]
    }
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
	...

0800254c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	2b20      	cmp	r3, #32
 800255e:	d108      	bne.n	8002572 <_ZN13STM32Hardware5flushEv+0x26>
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <_ZN13STM32Hardware5flushEv+0x26>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <_ZN13STM32Hardware5flushEv+0x28>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03f      	beq.n	80025f8 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <_ZN13STM32Hardware5flushEv+0xb4>)
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800258a:	429a      	cmp	r2, r3
 800258c:	d031      	beq.n	80025f2 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800259a:	429a      	cmp	r2, r3
 800259c:	d20a      	bcs.n	80025b4 <_ZN13STM32Hardware5flushEv+0x68>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	e006      	b.n	80025c2 <_ZN13STM32Hardware5flushEv+0x76>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80025ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	89fa      	ldrh	r2, [r7, #14]
 80025d8:	4619      	mov	r1, r3
 80025da:	f009 fa01 	bl	800b9e0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80025e4:	89fb      	ldrh	r3, [r7, #14]
 80025e6:	4413      	add	r3, r2
 80025e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80025f2:	4b03      	ldr	r3, [pc, #12]	; (8002600 <_ZN13STM32Hardware5flushEv+0xb4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
      }
    }
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	240006c0 	.word	0x240006c0

08002604 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261a:	bfa8      	it	ge
 800261c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002620:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002628:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4293      	cmp	r3, r2
 8002630:	bf28      	it	cs
 8002632:	4613      	movcs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800263c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	4618      	mov	r0, r3
 800264a:	f00b fad9 	bl	800dc00 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	4413      	add	r3, r2
 8002658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	429a      	cmp	r2, r3
 8002668:	d00b      	beq.n	8002682 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	18d1      	adds	r1, r2, r3
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	461a      	mov	r2, r3
 800267e:	f00b fabf 	bl	800dc00 <memcpy>
      }

      flush();
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff ff62 	bl	800254c <_ZN13STM32Hardware5flushEv>
    }
 8002688:	bf00      	nop
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	f002 fa80 	bl	8004b9c <HAL_GetTick>
 800269c:	4603      	mov	r3, r0
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe ffdc 	bl	8001670 <_ZN3ros3MsgC1Ev>
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	0800e158 	.word	0x0800e158

080026f8 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026f8:	b480      	push	{r7}
 80026fa:	b08b      	sub	sp, #44	; 0x2c
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800270c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	4401      	add	r1, r0
 800271a:	b2d3      	uxtb	r3, r2
 800271c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800271e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	0a02      	lsrs	r2, r0, #8
 800272c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002730:	0a0b      	lsrs	r3, r1, #8
 8002732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002734:	3101      	adds	r1, #1
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	4401      	add	r1, r0
 800273a:	b2d3      	uxtb	r3, r2
 800273c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800273e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	0c02      	lsrs	r2, r0, #16
 800274c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002750:	0c0b      	lsrs	r3, r1, #16
 8002752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002754:	3102      	adds	r1, #2
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	4401      	add	r1, r0
 800275a:	b2d3      	uxtb	r3, r2
 800275c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800275e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	0e02      	lsrs	r2, r0, #24
 800276c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002770:	0e0b      	lsrs	r3, r1, #24
 8002772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002774:	3103      	adds	r1, #3
 8002776:	6838      	ldr	r0, [r7, #0]
 8002778:	4401      	add	r1, r0
 800277a:	b2d3      	uxtb	r3, r2
 800277c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800277e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	000a      	movs	r2, r1
 800278c:	2300      	movs	r3, #0
 800278e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002790:	3104      	adds	r1, #4
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	4401      	add	r1, r0
 8002796:	b2d3      	uxtb	r3, r2
 8002798:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800279a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	0a0a      	lsrs	r2, r1, #8
 80027a8:	2300      	movs	r3, #0
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	3105      	adds	r1, #5
 80027ae:	6838      	ldr	r0, [r7, #0]
 80027b0:	4401      	add	r1, r0
 80027b2:	b2d3      	uxtb	r3, r2
 80027b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80027b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	0c0a      	lsrs	r2, r1, #16
 80027c4:	2300      	movs	r3, #0
 80027c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c8:	3106      	adds	r1, #6
 80027ca:	6838      	ldr	r0, [r7, #0]
 80027cc:	4401      	add	r1, r0
 80027ce:	b2d3      	uxtb	r3, r2
 80027d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80027d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	0e0a      	lsrs	r2, r1, #24
 80027e0:	2300      	movs	r3, #0
 80027e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e4:	3107      	adds	r1, #7
 80027e6:	6838      	ldr	r0, [r7, #0]
 80027e8:	4401      	add	r1, r0
 80027ea:	b2d3      	uxtb	r3, r2
 80027ec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3308      	adds	r3, #8
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80027fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80027fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002804:	6838      	ldr	r0, [r7, #0]
 8002806:	4401      	add	r1, r0
 8002808:	b2d3      	uxtb	r3, r2
 800280a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800280c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	0a02      	lsrs	r2, r0, #8
 800281a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800281e:	0a0b      	lsrs	r3, r1, #8
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	3101      	adds	r1, #1
 8002824:	6838      	ldr	r0, [r7, #0]
 8002826:	4401      	add	r1, r0
 8002828:	b2d3      	uxtb	r3, r2
 800282a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800282c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	0c02      	lsrs	r2, r0, #16
 800283a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800283e:	0c0b      	lsrs	r3, r1, #16
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	3102      	adds	r1, #2
 8002844:	6838      	ldr	r0, [r7, #0]
 8002846:	4401      	add	r1, r0
 8002848:	b2d3      	uxtb	r3, r2
 800284a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800284c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	0e02      	lsrs	r2, r0, #24
 800285a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800285e:	0e0b      	lsrs	r3, r1, #24
 8002860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002862:	3103      	adds	r1, #3
 8002864:	6838      	ldr	r0, [r7, #0]
 8002866:	4401      	add	r1, r0
 8002868:	b2d3      	uxtb	r3, r2
 800286a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800286c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	000a      	movs	r2, r1
 800287a:	2300      	movs	r3, #0
 800287c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287e:	3104      	adds	r1, #4
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	4401      	add	r1, r0
 8002884:	b2d3      	uxtb	r3, r2
 8002886:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002888:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	0a0a      	lsrs	r2, r1, #8
 8002896:	2300      	movs	r3, #0
 8002898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289a:	3105      	adds	r1, #5
 800289c:	6838      	ldr	r0, [r7, #0]
 800289e:	4401      	add	r1, r0
 80028a0:	b2d3      	uxtb	r3, r2
 80028a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80028a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	0c0a      	lsrs	r2, r1, #16
 80028b2:	2300      	movs	r3, #0
 80028b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b6:	3106      	adds	r1, #6
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	4401      	add	r1, r0
 80028bc:	b2d3      	uxtb	r3, r2
 80028be:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80028c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	0e0a      	lsrs	r2, r1, #24
 80028ce:	2300      	movs	r3, #0
 80028d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d2:	3107      	adds	r1, #7
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	4401      	add	r1, r0
 80028d8:	b2d3      	uxtb	r3, r2
 80028da:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3308      	adds	r3, #8
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80028ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f2:	6838      	ldr	r0, [r7, #0]
 80028f4:	4401      	add	r1, r0
 80028f6:	b2d3      	uxtb	r3, r2
 80028f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80028fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	0a02      	lsrs	r2, r0, #8
 8002908:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800290c:	0a0b      	lsrs	r3, r1, #8
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	3101      	adds	r1, #1
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	4401      	add	r1, r0
 8002916:	b2d3      	uxtb	r3, r2
 8002918:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800291a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	0c02      	lsrs	r2, r0, #16
 8002928:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800292c:	0c0b      	lsrs	r3, r1, #16
 800292e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002930:	3102      	adds	r1, #2
 8002932:	6838      	ldr	r0, [r7, #0]
 8002934:	4401      	add	r1, r0
 8002936:	b2d3      	uxtb	r3, r2
 8002938:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800293a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	0e02      	lsrs	r2, r0, #24
 8002948:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800294c:	0e0b      	lsrs	r3, r1, #24
 800294e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002950:	3103      	adds	r1, #3
 8002952:	6838      	ldr	r0, [r7, #0]
 8002954:	4401      	add	r1, r0
 8002956:	b2d3      	uxtb	r3, r2
 8002958:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800295a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	000a      	movs	r2, r1
 8002968:	2300      	movs	r3, #0
 800296a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800296c:	3104      	adds	r1, #4
 800296e:	6838      	ldr	r0, [r7, #0]
 8002970:	4401      	add	r1, r0
 8002972:	b2d3      	uxtb	r3, r2
 8002974:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	0a0a      	lsrs	r2, r1, #8
 8002984:	2300      	movs	r3, #0
 8002986:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002988:	3105      	adds	r1, #5
 800298a:	6838      	ldr	r0, [r7, #0]
 800298c:	4401      	add	r1, r0
 800298e:	b2d3      	uxtb	r3, r2
 8002990:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002992:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	0c0a      	lsrs	r2, r1, #16
 80029a0:	2300      	movs	r3, #0
 80029a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a4:	3106      	adds	r1, #6
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	4401      	add	r1, r0
 80029aa:	b2d3      	uxtb	r3, r2
 80029ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80029ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	0e0a      	lsrs	r2, r1, #24
 80029bc:	2300      	movs	r3, #0
 80029be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c0:	3107      	adds	r1, #7
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	4401      	add	r1, r0
 80029c6:	b2d3      	uxtb	r3, r2
 80029c8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	3308      	adds	r3, #8
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029d2:	4618      	mov	r0, r3
 80029d4:	372c      	adds	r7, #44	; 0x2c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80029e2:	b0eb      	sub	sp, #428	; 0x1ac
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80029ea:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a00:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a04:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a08:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a0c:	4413      	add	r3, r2
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2200      	movs	r2, #0
 8002a14:	461c      	mov	r4, r3
 8002a16:	4615      	mov	r5, r2
 8002a18:	ea40 0804 	orr.w	r8, r0, r4
 8002a1c:	ea41 0905 	orr.w	r9, r1, r5
 8002a20:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a24:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2200      	movs	r2, #0
 8002a3a:	469a      	mov	sl, r3
 8002a3c:	4693      	mov	fp, r2
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002a4a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002a4e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002a52:	ea40 0402 	orr.w	r4, r0, r2
 8002a56:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a60:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002a64:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a68:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002a82:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002a92:	464c      	mov	r4, r9
 8002a94:	0423      	lsls	r3, r4, #16
 8002a96:	4644      	mov	r4, r8
 8002a98:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a9c:	4644      	mov	r4, r8
 8002a9e:	0422      	lsls	r2, r4, #16
 8002aa0:	ea40 0402 	orr.w	r4, r0, r2
 8002aa4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002aae:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002ab2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ab6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002aba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002abe:	1cda      	adds	r2, r3, #3
 8002ac0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002ad0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002ad4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002ad8:	4623      	mov	r3, r4
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002ae8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002aec:	4623      	mov	r3, r4
 8002aee:	4303      	orrs	r3, r0
 8002af0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002af4:	462b      	mov	r3, r5
 8002af6:	430b      	orrs	r3, r1
 8002af8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002afc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002b00:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b04:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b0c:	1d1a      	adds	r2, r3, #4
 8002b0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002b1e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002b2e:	0023      	movs	r3, r4
 8002b30:	2200      	movs	r2, #0
 8002b32:	ea40 0402 	orr.w	r4, r0, r2
 8002b36:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002b40:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002b44:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b48:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b50:	1d5a      	adds	r2, r3, #5
 8002b52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b62:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002b72:	0223      	lsls	r3, r4, #8
 8002b74:	2200      	movs	r2, #0
 8002b76:	ea40 0402 	orr.w	r4, r0, r2
 8002b7a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b84:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002b88:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b94:	1d9a      	adds	r2, r3, #6
 8002b96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ba6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002bb6:	0423      	lsls	r3, r4, #16
 8002bb8:	2200      	movs	r2, #0
 8002bba:	ea40 0402 	orr.w	r4, r0, r2
 8002bbe:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bc8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002bcc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002bd0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002bd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bd8:	1dda      	adds	r2, r3, #7
 8002bda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bde:	4413      	add	r3, r2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002bea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002bfa:	0623      	lsls	r3, r4, #24
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	ea40 0402 	orr.w	r4, r0, r2
 8002c02:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002c06:	430b      	orrs	r3, r1
 8002c08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c0c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002c10:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002c14:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c18:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002c20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c24:	3308      	adds	r3, #8
 8002c26:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c36:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c3a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c4e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002c52:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002c56:	4623      	mov	r3, r4
 8002c58:	4303      	orrs	r3, r0
 8002c5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c5e:	462b      	mov	r3, r5
 8002c60:	430b      	orrs	r3, r1
 8002c62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c66:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002c6a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c6e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c88:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002c98:	464c      	mov	r4, r9
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	4644      	mov	r4, r8
 8002c9e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ca2:	4644      	mov	r4, r8
 8002ca4:	0222      	lsls	r2, r4, #8
 8002ca6:	ea40 0402 	orr.w	r4, r0, r2
 8002caa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002cb4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002cb8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cbc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cc0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002ce6:	464c      	mov	r4, r9
 8002ce8:	0423      	lsls	r3, r4, #16
 8002cea:	4644      	mov	r4, r8
 8002cec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002cf0:	4644      	mov	r4, r8
 8002cf2:	0422      	lsls	r2, r4, #16
 8002cf4:	ea40 0402 	orr.w	r4, r0, r2
 8002cf8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d02:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002d06:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d0a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d12:	1cda      	adds	r2, r3, #3
 8002d14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d18:	4413      	add	r3, r2
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d24:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d28:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d34:	4623      	mov	r3, r4
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d3c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002d40:	4623      	mov	r3, r4
 8002d42:	4303      	orrs	r3, r0
 8002d44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d48:	462b      	mov	r3, r5
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d50:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002d54:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d58:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d60:	1d1a      	adds	r2, r3, #4
 8002d62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d66:	4413      	add	r3, r2
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d72:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002d82:	0023      	movs	r3, r4
 8002d84:	2200      	movs	r2, #0
 8002d86:	ea40 0402 	orr.w	r4, r0, r2
 8002d8a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d94:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002d98:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002d9c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002da0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002da4:	1d5a      	adds	r2, r3, #5
 8002da6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002db6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002dc6:	0223      	lsls	r3, r4, #8
 8002dc8:	2200      	movs	r2, #0
 8002dca:	ea40 0402 	orr.w	r4, r0, r2
 8002dce:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dd8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002ddc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002de0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002de4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002de8:	1d9a      	adds	r2, r3, #6
 8002dea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2200      	movs	r2, #0
 8002df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002e0a:	0423      	lsls	r3, r4, #16
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	ea40 0402 	orr.w	r4, r0, r2
 8002e12:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002e16:	430b      	orrs	r3, r1
 8002e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e1c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002e20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e2c:	1dda      	adds	r2, r3, #7
 8002e2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002e4e:	0623      	lsls	r3, r4, #24
 8002e50:	2200      	movs	r2, #0
 8002e52:	ea40 0402 	orr.w	r4, r0, r2
 8002e56:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e60:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002e64:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002e68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e6c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e70:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002e74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e78:	3308      	adds	r3, #8
 8002e7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e8e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002e92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e96:	4413      	add	r3, r2
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ea6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002eaa:	4623      	mov	r3, r4
 8002eac:	4303      	orrs	r3, r0
 8002eae:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	430b      	orrs	r3, r1
 8002eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eb6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002eba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ebe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ec2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ed6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ee4:	464c      	mov	r4, r9
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	4644      	mov	r4, r8
 8002eea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002eee:	4644      	mov	r4, r8
 8002ef0:	0222      	lsls	r2, r4, #8
 8002ef2:	ea40 0402 	orr.w	r4, r0, r2
 8002ef6:	66bc      	str	r4, [r7, #104]	; 0x68
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002efc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002f00:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f04:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2200      	movs	r2, #0
 8002f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f1c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f2a:	464c      	mov	r4, r9
 8002f2c:	0423      	lsls	r3, r4, #16
 8002f2e:	4644      	mov	r4, r8
 8002f30:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f34:	4644      	mov	r4, r8
 8002f36:	0422      	lsls	r2, r4, #16
 8002f38:	ea40 0402 	orr.w	r4, r0, r2
 8002f3c:	65bc      	str	r4, [r7, #88]	; 0x58
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f42:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002f46:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f4a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f52:	1cda      	adds	r2, r3, #3
 8002f54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f58:	4413      	add	r3, r2
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	653b      	str	r3, [r7, #80]	; 0x50
 8002f62:	657a      	str	r2, [r7, #84]	; 0x54
 8002f64:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f68:	4623      	mov	r3, r4
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6e:	4623      	mov	r3, r4
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f74:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002f78:	4623      	mov	r3, r4
 8002f7a:	4303      	orrs	r3, r0
 8002f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f7e:	462b      	mov	r3, r5
 8002f80:	430b      	orrs	r3, r1
 8002f82:	647b      	str	r3, [r7, #68]	; 0x44
 8002f84:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f88:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f8c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f94:	1d1a      	adds	r2, r3, #4
 8002f96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f9a:	4413      	add	r3, r2
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002fb0:	0023      	movs	r3, r4
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	ea40 0402 	orr.w	r4, r0, r2
 8002fb8:	633c      	str	r4, [r7, #48]	; 0x30
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002fc2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002fc6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fce:	1d5a      	adds	r2, r3, #5
 8002fd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fd4:	4413      	add	r3, r2
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2200      	movs	r2, #0
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002fea:	0223      	lsls	r3, r4, #8
 8002fec:	2200      	movs	r2, #0
 8002fee:	ea40 0402 	orr.w	r4, r0, r2
 8002ff2:	623c      	str	r4, [r7, #32]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ffc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003000:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003004:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003008:	3306      	adds	r3, #6
 800300a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800300e:	4413      	add	r3, r2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2200      	movs	r2, #0
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	61fa      	str	r2, [r7, #28]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	69bc      	ldr	r4, [r7, #24]
 8003024:	0423      	lsls	r3, r4, #16
 8003026:	2200      	movs	r2, #0
 8003028:	ea40 0402 	orr.w	r4, r0, r2
 800302c:	613c      	str	r4, [r7, #16]
 800302e:	430b      	orrs	r3, r1
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003036:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800303a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800303e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003042:	3307      	adds	r3, #7
 8003044:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2200      	movs	r2, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	60fa      	str	r2, [r7, #12]
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	68bc      	ldr	r4, [r7, #8]
 800305e:	0623      	lsls	r3, r4, #24
 8003060:	2200      	movs	r2, #0
 8003062:	ea40 0402 	orr.w	r4, r0, r2
 8003066:	603c      	str	r4, [r7, #0]
 8003068:	430b      	orrs	r3, r1
 800306a:	607b      	str	r3, [r7, #4]
 800306c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003070:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003074:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003078:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800307c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003080:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003084:	3308      	adds	r3, #8
 8003086:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800308a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800308e:	4618      	mov	r0, r3
 8003090:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003094:	46bd      	mov	sp, r7
 8003096:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800309a:	4770      	bx	lr

0800309c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	0800e01c 	.word	0x0800e01c

080030b8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	0800e030 	.word	0x0800e030

080030d4 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
      data(0)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fac6 	bl	8001670 <_ZN3ros3MsgC1Ev>
 80030e4:	4a05      	ldr	r2, [pc, #20]	; (80030fc <_ZN8std_msgs4BoolC1Ev+0x28>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	711a      	strb	r2, [r3, #4]
    {
    }
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	0800e140 	.word	0x0800e140

08003100 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	791b      	ldrb	r3, [r3, #4]
 8003112:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	4413      	add	r3, r2
 800311a:	7a3a      	ldrb	r2, [r7, #8]
 800311c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3301      	adds	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
      return offset;
 8003124:	68fb      	ldr	r3, [r7, #12]
    }
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003144:	7a3a      	ldrb	r2, [r7, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	440b      	add	r3, r1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	b2db      	uxtb	r3, r3
 8003152:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003154:	7a3a      	ldrb	r2, [r7, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]
     return offset;
 8003160:	68fb      	ldr	r3, [r7, #12]
    }
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	0800e054 	.word	0x0800e054

0800318c <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	0800e064 	.word	0x0800e064

080031a8 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);

ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
//ros::Publisher scara_pub("scara_fromSTM", &scara_state);

void ROS::scara_callback(const geometry_msgs::Point &msgs){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	scara.ARM_Goal.Px = msgs.x;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031b6:	490b      	ldr	r1, [pc, #44]	; (80031e4 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031b8:	e9c1 2300 	strd	r2, r3, [r1]
	scara.ARM_Goal.Py = msgs.y;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031c2:	4908      	ldr	r1, [pc, #32]	; (80031e4 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	scara.ARM_Goal.Pz = msgs.z;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80031ce:	4905      	ldr	r1, [pc, #20]	; (80031e4 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	scara.run();
 80031d4:	4803      	ldr	r0, [pc, #12]	; (80031e4 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031d6:	f000 fe95 	bl	8003f04 <_ZN5SCARA3runEv>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	240010b0 	.word	0x240010b0

080031e8 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031f6:	490b      	ldr	r1, [pc, #44]	; (8003224 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 80031f8:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003204:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800320e:	4905      	ldr	r1, [pc, #20]	; (8003224 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003210:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003216:	f7fe f8dd 	bl	80013d4 <_ZN7Mecanum3runEv>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	24000678 	.word	0x24000678

08003228 <_ZN3ROS5setupEv>:
//	car_speed.z = mecanum.CAR_Now.Omega;
//	mecanum_pub.publish(&car_speed);
//}


void ROS::setup(void){
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
	nh.initNode();
 800322c:	4804      	ldr	r0, [pc, #16]	; (8003240 <_ZN3ROS5setupEv+0x18>)
 800322e:	f000 f941 	bl	80034b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 8003232:	4904      	ldr	r1, [pc, #16]	; (8003244 <_ZN3ROS5setupEv+0x1c>)
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <_ZN3ROS5setupEv+0x18>)
 8003236:	f000 f95a 	bl	80034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>

//    nh.advertise(mecanum_pub);
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	240006c4 	.word	0x240006c4
 8003244:	24001028 	.word	0x24001028

08003248 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <_ZN3ROS4loopEv+0x10>)
 800324e:	f000 f979 	bl	8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	240006c4 	.word	0x240006c4

0800325c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <HAL_UART_TxCpltCallback+0x20>)
 8003266:	f000 fb46 	bl	80038f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800326a:	4603      	mov	r3, r0
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f96d 	bl	800254c <_ZN13STM32Hardware5flushEv>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	240006c4 	.word	0x240006c4

08003280 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003288:	4805      	ldr	r0, [pc, #20]	; (80032a0 <HAL_UART_RxCpltCallback+0x20>)
 800328a:	f000 fb34 	bl	80038f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800328e:	4603      	mov	r3, r0
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff f91c 	bl	80024ce <_ZN13STM32Hardware10reset_rbufEv>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	240006c4 	.word	0x240006c4

080032a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d80d      	bhi.n	80032d4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	fa22 f103 	lsr.w	r1, r2, r3
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	b2ca      	uxtb	r2, r1
 80032ca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e7ee      	b.n	80032b2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d811      	bhi.n	800331e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	440a      	add	r2, r1
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	4611      	mov	r1, r2
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	00d2      	lsls	r2, r2, #3
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3301      	adds	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e7ea      	b.n	80032f4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	4a04      	ldr	r2, [pc, #16]	; (8003348 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	0800e188 	.word	0x0800e188

0800334c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ffe8 	bl	800332c <_ZN3ros15NodeHandleBase_C1Ev>
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff f88a 	bl	8002480 <_ZN13STM32HardwareC1Ev>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fcec 	bl	8001d58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b18      	cmp	r3, #24
 8003388:	d80b      	bhi.n	80033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	2200      	movs	r2, #0
 8003398:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e7f0      	b.n	8003384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b18      	cmp	r3, #24
 80033aa:	d80a      	bhi.n	80033c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033b4:	2100      	movs	r1, #0
 80033b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	3301      	adds	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e7f1      	b.n	80033a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033cc:	d20a      	bcs.n	80033e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3301      	adds	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e7f0      	b.n	80033c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ee:	d20a      	bcs.n	8003406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4413      	add	r3, r2
 80033f6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3301      	adds	r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	e7f0      	b.n	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	0800e12c 	.word	0x0800e12c

0800344c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	0800e170 	.word	0x0800e170

0800346c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ffe5 	bl	800344c <_ZN3ros11Subscriber_C1Ev>
 8003482:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3310      	adds	r3, #16
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff f90b 	bl	80026a8 <_ZN13geometry_msgs5PointC1Ev>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
  };
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	0800e114 	.word	0x0800e114

080034b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fff9 	bl	80024b8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b18      	cmp	r3, #24
 8003500:	dc19      	bgt.n	8003536 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	f202 2222 	addw	r2, r2, #546	; 0x222
 800350a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	f202 2222 	addw	r2, r2, #546	; 0x222
 800351c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]
        return true;
 800352a:	2301      	movs	r3, #1
 800352c:	e004      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e7e2      	b.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003536:	2300      	movs	r3, #0
  }
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f89d 	bl	8002690 <_ZN13STM32Hardware4timeEv>
 8003556:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003566:	4293      	cmp	r3, r2
 8003568:	d903      	bls.n	8003572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d903      	bls.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003596:	2b00      	cmp	r3, #0
 8003598:	d014      	beq.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f876 	bl	8002690 <_ZN13STM32Hardware4timeEv>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80035b0:	429a      	cmp	r2, r3
 80035b2:	bf8c      	ite	hi
 80035b4:	2301      	movhi	r3, #1
 80035b6:	2300      	movls	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80035be:	f06f 0301 	mvn.w	r3, #1
 80035c2:	e194      	b.n	80038ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe ff91 	bl	80024f0 <_ZN13STM32Hardware4readEv>
 80035ce:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f2c0 8174 	blt.w	80038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035ee:	2b07      	cmp	r3, #7
 80035f0:	d11e      	bne.n	8003630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80035f8:	1c59      	adds	r1, r3, #1
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	b2d1      	uxtb	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4413      	add	r3, r2
 8003608:	460a      	mov	r2, r1
 800360a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003614:	1e5a      	subs	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1b4      	bne.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2208      	movs	r2, #8
 800362a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800362e:	e7af      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003636:	2b00      	cmp	r3, #0
 8003638:	d128      	bne.n	800368c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2bff      	cmp	r3, #255	; 0xff
 800363e:	d10d      	bne.n	800365c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f103 0214 	add.w	r2, r3, #20
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800365a:	e799      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff f815 	bl	8002690 <_ZN13STM32Hardware4timeEv>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	bf8c      	ite	hi
 8003674:	2301      	movhi	r3, #1
 8003676:	2300      	movls	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d088      	beq.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003686:	f06f 0301 	mvn.w	r3, #1
 800368a:	e130      	b.n	80038ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003692:	2b01      	cmp	r3, #1
 8003694:	d118      	bne.n	80036c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2bfe      	cmp	r3, #254	; 0xfe
 800369a:	d107      	bne.n	80036ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036aa:	e771      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f47f af68 	bne.w	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f924 	bl	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80036c6:	e763      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d113      	bne.n	80036fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80036f8:	e74a      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003700:	2b03      	cmp	r3, #3
 8003702:	d110      	bne.n	8003726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	441a      	add	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003724:	e734      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800372c:	2b04      	cmp	r3, #4
 800372e:	d116      	bne.n	800375e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003736:	425a      	negs	r2, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	bf58      	it	pl
 800373e:	4253      	negpl	r3, r2
 8003740:	2bff      	cmp	r3, #255	; 0xff
 8003742:	d107      	bne.n	8003754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003752:	e71d      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800375c:	e718      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003764:	2b05      	cmp	r3, #5
 8003766:	d10f      	bne.n	8003788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003786:	e703      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800378e:	2b06      	cmp	r3, #6
 8003790:	d117      	bne.n	80037c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2207      	movs	r2, #7
 80037a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f47f aeec 	bne.w	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2208      	movs	r2, #8
 80037bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80037c0:	e6e6      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	f47f aee1 	bne.w	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80037dc:	425a      	negs	r2, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	bf58      	it	pl
 80037e4:	4253      	negpl	r3, r2
 80037e6:	2bff      	cmp	r3, #255	; 0xff
 80037e8:	f47f aed2 	bne.w	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d110      	bne.n	8003818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f889 	bl	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8a4 	bl	800394a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	e06a      	b.n	80038ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800381e:	2b0a      	cmp	r3, #10
 8003820:	d107      	bne.n	8003832 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f96c 	bl	8003b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003830:	e6ae      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003838:	2b06      	cmp	r3, #6
 800383a:	d10e      	bne.n	800385a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f7fe fbb9 	bl	8001fc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003858:	e69a      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003860:	2b0b      	cmp	r3, #11
 8003862:	d104      	bne.n	800386e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800386c:	e690      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003874:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800387e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f43f ae84 	beq.w	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800388e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003898:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038a2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80038ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80038ba:	4611      	mov	r1, r2
 80038bc:	4798      	blx	r3
    while (true)
 80038be:	e667      	b.n	8003590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80038c0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00f      	beq.n	80038ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80038da:	4293      	cmp	r3, r2
 80038dc:	d906      	bls.n	80038ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f815 	bl	800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80038ec:	2300      	movs	r3, #0
  }
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
  }
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003916:	f107 030c 	add.w	r3, r7, #12
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd feb8 	bl	8001690 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f107 020c 	add.w	r2, r7, #12
 800392a:	210a      	movs	r1, #10
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
    rt_time = hardware_.time();
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe feab 	bl	8002690 <_ZN13STM32Hardware4timeEv>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800394a:	b590      	push	{r4, r7, lr}
 800394c:	b08b      	sub	sp, #44	; 0x2c
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003952:	f107 030c 	add.w	r3, r7, #12
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd ff8a 	bl	8001870 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	2b18      	cmp	r3, #24
 8003964:	dc63      	bgt.n	8003a2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d056      	beq.n	8003a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	b29b      	uxth	r3, r3
 800398a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3308      	adds	r3, #8
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4798      	blx	r3
 80039c8:	4603      	mov	r3, r0
 80039ca:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4608      	mov	r0, r1
 80039f4:	4798      	blx	r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80039fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039fe:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681c      	ldr	r4, [r3, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fc78 	bl	800230a <_ZN3ros9Publisher15getEndpointTypeEv>
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	461a      	mov	r2, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	3301      	adds	r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	e798      	b.n	8003960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b18      	cmp	r3, #24
 8003a36:	dc5f      	bgt.n	8003af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d053      	beq.n	8003af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3308      	adds	r3, #8
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4798      	blx	r3
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a94:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003a98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4608      	mov	r0, r1
 8003ab0:	4798      	blx	r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aba:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681c      	ldr	r4, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003aca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4798      	blx	r3
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	f107 030c 	add.w	r3, r7, #12
 8003aea:	461a      	mov	r2, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	3301      	adds	r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	e79c      	b.n	8003a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003b00:	bf00      	nop
 8003b02:	372c      	adds	r7, #44	; 0x2c
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd90      	pop	{r4, r7, pc}

08003b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fdba 	bl	8001690 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fdb5 	bl	8002690 <_ZN13STM32Hardware4timeEv>
 8003b26:	4602      	mov	r2, r0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b32:	f107 0308 	add.w	r3, r7, #8
 8003b36:	6839      	ldr	r1, [r7, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fd fe19 	bl	8001770 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4915      	ldr	r1, [pc, #84]	; (8003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003b44:	fba1 1303 	umull	r1, r3, r1, r3
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003b4e:	6939      	ldr	r1, [r7, #16]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003b54:	fba3 0302 	umull	r0, r3, r3, r2
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b5e:	fb00 f303 	mul.w	r3, r0, r3
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8a6 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fd85 	bl	8002690 <_ZN13STM32Hardware4timeEv>
 8003b86:	4602      	mov	r2, r0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	10624dd3 	.word	0x10624dd3
 8003b9c:	000f4240 	.word	0x000f4240

08003ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b63      	cmp	r3, #99	; 0x63
 8003bb0:	dd09      	ble.n	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003bb8:	f083 0301 	eor.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e079      	b.n	8003cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003bd2:	3207      	adds	r2, #7
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
 8003bda:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	22ff      	movs	r2, #255	; 0xff
 8003be0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	22fe      	movs	r2, #254	; 0xfe
 8003be8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003c12:	4413      	add	r3, r2
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	b21b      	sxth	r3, r3
 8003c2e:	121b      	asrs	r3, r3, #8
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c3e:	2305      	movs	r3, #5
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3306      	adds	r3, #6
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	dc0d      	bgt.n	8003c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4413      	add	r3, r2
 8003c52:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e7ec      	b.n	8003c42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3307      	adds	r3, #7
 8003c6c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	425a      	negs	r2, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	bf58      	it	pl
 8003c78:	4253      	negpl	r3, r2
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	6179      	str	r1, [r7, #20]
 8003c82:	43d2      	mvns	r2, r2
 8003c84:	b2d1      	uxtb	r1, r2
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	460a      	mov	r2, r1
 8003c8c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c96:	dc0a      	bgt.n	8003cae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1d18      	adds	r0, r3, #4
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f7fe fcad 	bl	8002604 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	e005      	b.n	8003cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003cae:	4905      	ldr	r1, [pc, #20]	; (8003cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f849 	bl	8003d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	0800e088 	.word	0x0800e088

08003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fcda 	bl	8002690 <_ZN13STM32Hardware4timeEv>
 8003cdc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4915      	ldr	r1, [pc, #84]	; (8003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003ce6:	fba1 1303 	umull	r1, r3, r1, r3
 8003cea:	099b      	lsrs	r3, r3, #6
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003d02:	099b      	lsrs	r3, r3, #6
 8003d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d08:	fb00 f303 	mul.w	r3, r0, r3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	1aca      	subs	r2, r1, r3
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f7fc fc78 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	10624dd3 	.word	0x10624dd3
 8003d40:	000f4240 	.word	0x000f4240
 8003d44:	3b9aca00 	.word	0x3b9aca00

08003d48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	2103      	movs	r1, #3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f804 	bl	8003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fd ff3e 	bl	8001bf8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f107 0214 	add.w	r2, r7, #20
 8003d8e:	2107      	movs	r1, #7
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	4798      	blx	r3
  }
 8003d94:	bf00      	nop
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_Z41__static_initialization_and_destruction_0ii>:
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d11f      	bne.n	8003dec <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d11a      	bne.n	8003dec <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003db6:	480f      	ldr	r0, [pc, #60]	; (8003df4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003db8:	f7ff fac8 	bl	800334c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Bool scara_state;
 8003dbc:	480e      	ldr	r0, [pc, #56]	; (8003df8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003dbe:	f7ff f989 	bl	80030d4 <_ZN8std_msgs4BoolC1Ev>
geometry_msgs::Point car_speed;
 8003dc2:	480e      	ldr	r0, [pc, #56]	; (8003dfc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003dc4:	f7fe fc70 	bl	80026a8 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003dcc:	490d      	ldr	r1, [pc, #52]	; (8003e04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003dce:	480e      	ldr	r0, [pc, #56]	; (8003e08 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003dd0:	f7ff fb4c 	bl	800346c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003dd8:	490d      	ldr	r1, [pc, #52]	; (8003e10 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003dda:	480e      	ldr	r0, [pc, #56]	; (8003e14 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003ddc:	f7ff fb46 	bl	800346c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003de0:	2300      	movs	r3, #0
 8003de2:	4a06      	ldr	r2, [pc, #24]	; (8003dfc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003de4:	490c      	ldr	r1, [pc, #48]	; (8003e18 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003de6:	480d      	ldr	r0, [pc, #52]	; (8003e1c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003de8:	f7fe fa78 	bl	80022dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	240006c4 	.word	0x240006c4
 8003df8:	24001000 	.word	0x24001000
 8003dfc:	24001008 	.word	0x24001008
 8003e00:	080031e9 	.word	0x080031e9
 8003e04:	0800e0c4 	.word	0x0800e0c4
 8003e08:	24001028 	.word	0x24001028
 8003e0c:	080031a9 	.word	0x080031a9
 8003e10:	0800e0d4 	.word	0x0800e0d4
 8003e14:	24001060 	.word	0x24001060
 8003e18:	0800e0e0 	.word	0x0800e0e0
 8003e1c:	24001098 	.word	0x24001098

08003e20 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	6839      	ldr	r1, [r7, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fdd4 	bl	80029de <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	3210      	adds	r2, #16
 8003e3e:	4610      	mov	r0, r2
 8003e40:	4798      	blx	r3
  }
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3310      	adds	r3, #16
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff f914 	bl	800309c <_ZN13geometry_msgs5Point7getTypeEv>
 8003e74:	4603      	mov	r3, r0
  }
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3310      	adds	r3, #16
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f914 	bl	80030b8 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003e90:	4603      	mov	r3, r0
  }
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
    return configured_;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_GLOBAL__sub_I_nh>:
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7ff ff6d 	bl	8003d9c <_Z41__static_initialization_and_destruction_0ii>
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <_ZN8ARM_INFOC1Ev>:
	double Py;
	double Pz;

	// pub to ROS //
	bool is_finished = false;
} ARM_INFO;
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	761a      	strb	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <_ZN5SCARAC1Ev>:

class SCARA{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ffea 	bl	8003ec4 <_ZN8ARM_INFOC1Ev>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3320      	adds	r3, #32
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ffe5 	bl	8003ec4 <_ZN8ARM_INFOC1Ev>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_ZN5SCARA3runEv>:
#include "scara.h"
#include "stepper.h"

SCARA scara;

void SCARA::run(void){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	SCARA::tf2_arm_angle();
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f804 	bl	8003f1a <_ZN5SCARA13tf2_arm_angleEv>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_ZN5SCARA13tf2_arm_angleEv>:


void SCARA::tf2_arm_angle(void){
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]


}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <_Z41__static_initialization_and_destruction_0ii>:
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d107      	bne.n	8003f50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d102      	bne.n	8003f50 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA scara;
 8003f4a:	4803      	ldr	r0, [pc, #12]	; (8003f58 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003f4c:	f7ff ffc8 	bl	8003ee0 <_ZN5SCARAC1Ev>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	240010b0 	.word	0x240010b0

08003f5c <_GLOBAL__sub_I_scara>:
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7ff ffe3 	bl	8003f30 <_Z41__static_initialization_and_destruction_0ii>
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <HAL_MspInit+0x3c>)
 8003f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f78:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <HAL_MspInit+0x3c>)
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_MspInit+0x3c>)
 8003f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2100      	movs	r1, #0
 8003f94:	2005      	movs	r0, #5
 8003f96:	f000 fee8 	bl	8004d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f9a:	2005      	movs	r0, #5
 8003f9c:	f000 feff 	bl	8004d9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	58024400 	.word	0x58024400

08003fac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b090      	sub	sp, #64	; 0x40
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fcc:	d14e      	bne.n	800406c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fce:	4b77      	ldr	r3, [pc, #476]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8003fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fd4:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fde:	4b73      	ldr	r3, [pc, #460]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8003fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fec:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8003fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ffc:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8003ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400a:	4b68      	ldr	r3, [pc, #416]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800400c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004010:	4a66      	ldr	r2, [pc, #408]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800401a:	4b64      	ldr	r3, [pc, #400]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800401c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	623b      	str	r3, [r7, #32]
 8004026:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004028:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	2302      	movs	r3, #2
 8004030:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	2300      	movs	r3, #0
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004036:	2300      	movs	r3, #0
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800403a:	2301      	movs	r3, #1
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004042:	4619      	mov	r1, r3
 8004044:	485a      	ldr	r0, [pc, #360]	; (80041b0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004046:	f003 fcff 	bl	8007a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800404a:	2308      	movs	r3, #8
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004056:	2300      	movs	r3, #0
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800405a:	2301      	movs	r3, #1
 800405c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800405e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004062:	4619      	mov	r1, r3
 8004064:	4853      	ldr	r0, [pc, #332]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x208>)
 8004066:	f003 fcef 	bl	8007a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800406a:	e09b      	b.n	80041a4 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a51      	ldr	r2, [pc, #324]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d12e      	bne.n	80040d4 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004076:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800407c:	4a4b      	ldr	r2, [pc, #300]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004086:	4b49      	ldr	r3, [pc, #292]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004094:	4b45      	ldr	r3, [pc, #276]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409a:	4a44      	ldr	r2, [pc, #272]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040a4:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 80040a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80040b2:	2330      	movs	r3, #48	; 0x30
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b6:	2302      	movs	r3, #2
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040be:	2300      	movs	r3, #0
 80040c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040c2:	2302      	movs	r3, #2
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040ca:	4619      	mov	r1, r3
 80040cc:	4839      	ldr	r0, [pc, #228]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x208>)
 80040ce:	f003 fcbb 	bl	8007a48 <HAL_GPIO_Init>
}
 80040d2:	e067      	b.n	80041a4 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a38      	ldr	r2, [pc, #224]	; (80041bc <HAL_TIM_Encoder_MspInit+0x210>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d12f      	bne.n	800413e <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040de:	4b33      	ldr	r3, [pc, #204]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 80040e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040e4:	4a31      	ldr	r2, [pc, #196]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 80040e6:	f043 0304 	orr.w	r3, r3, #4
 80040ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 80040f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040fc:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 80040fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004102:	4a2a      	ldr	r2, [pc, #168]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004104:	f043 0308 	orr.w	r3, r3, #8
 8004108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800410e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800411a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004120:	2302      	movs	r3, #2
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004124:	2300      	movs	r3, #0
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004128:	2300      	movs	r3, #0
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800412c:	2302      	movs	r3, #2
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004134:	4619      	mov	r1, r3
 8004136:	4822      	ldr	r0, [pc, #136]	; (80041c0 <HAL_TIM_Encoder_MspInit+0x214>)
 8004138:	f003 fc86 	bl	8007a48 <HAL_GPIO_Init>
}
 800413c:	e032      	b.n	80041a4 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <HAL_TIM_Encoder_MspInit+0x218>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d12d      	bne.n	80041a4 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800414a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800414e:	4a17      	ldr	r2, [pc, #92]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004158:	4b14      	ldr	r3, [pc, #80]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800415a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004166:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800416c:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004184:	2303      	movs	r3, #3
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004190:	2300      	movs	r3, #0
 8004192:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004194:	2302      	movs	r3, #2
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800419c:	4619      	mov	r1, r3
 800419e:	4804      	ldr	r0, [pc, #16]	; (80041b0 <HAL_TIM_Encoder_MspInit+0x204>)
 80041a0:	f003 fc52 	bl	8007a48 <HAL_GPIO_Init>
}
 80041a4:	bf00      	nop
 80041a6:	3740      	adds	r7, #64	; 0x40
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58024400 	.word	0x58024400
 80041b0:	58020000 	.word	0x58020000
 80041b4:	58020400 	.word	0x58020400
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	58020c00 	.word	0x58020c00
 80041c4:	40000c00 	.word	0x40000c00

080041c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_TIM_PWM_MspInit+0x84>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d117      	bne.n	800420a <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_TIM_PWM_MspInit+0x88>)
 80041dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_TIM_PWM_MspInit+0x88>)
 80041e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_TIM_PWM_MspInit+0x88>)
 80041ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	202b      	movs	r0, #43	; 0x2b
 80041fe:	f000 fdb4 	bl	8004d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004202:	202b      	movs	r0, #43	; 0x2b
 8004204:	f000 fdcb 	bl	8004d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004208:	e01b      	b.n	8004242 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a11      	ldr	r2, [pc, #68]	; (8004254 <HAL_TIM_PWM_MspInit+0x8c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d116      	bne.n	8004242 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_TIM_PWM_MspInit+0x88>)
 8004216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800421a:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <HAL_TIM_PWM_MspInit+0x88>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004220:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_TIM_PWM_MspInit+0x88>)
 8004226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800422a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004232:	2200      	movs	r2, #0
 8004234:	2100      	movs	r1, #0
 8004236:	2074      	movs	r0, #116	; 0x74
 8004238:	f000 fd97 	bl	8004d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800423c:	2074      	movs	r0, #116	; 0x74
 800423e:	f000 fdae 	bl	8004d9e <HAL_NVIC_EnableIRQ>
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40001800 	.word	0x40001800
 8004250:	58024400 	.word	0x58024400
 8004254:	40014000 	.word	0x40014000

08004258 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <HAL_TIM_Base_MspInit+0x48>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d116      	bne.n	8004298 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800426a:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <HAL_TIM_Base_MspInit+0x4c>)
 800426c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004270:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <HAL_TIM_Base_MspInit+0x4c>)
 8004272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004276:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <HAL_TIM_Base_MspInit+0x4c>)
 800427c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004288:	2200      	movs	r2, #0
 800428a:	2100      	movs	r1, #0
 800428c:	202c      	movs	r0, #44	; 0x2c
 800428e:	f000 fd6c 	bl	8004d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004292:	202c      	movs	r0, #44	; 0x2c
 8004294:	f000 fd83 	bl	8004d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40001c00 	.word	0x40001c00
 80042a4:	58024400 	.word	0x58024400

080042a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a25      	ldr	r2, [pc, #148]	; (800435c <HAL_TIM_MspPostInit+0xb4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d120      	bne.n	800430c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ca:	4b25      	ldr	r3, [pc, #148]	; (8004360 <HAL_TIM_MspPostInit+0xb8>)
 80042cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d0:	4a23      	ldr	r2, [pc, #140]	; (8004360 <HAL_TIM_MspPostInit+0xb8>)
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042da:	4b21      	ldr	r3, [pc, #132]	; (8004360 <HAL_TIM_MspPostInit+0xb8>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80042e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80042ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80042fa:	2302      	movs	r3, #2
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fe:	f107 0314 	add.w	r3, r7, #20
 8004302:	4619      	mov	r1, r3
 8004304:	4817      	ldr	r0, [pc, #92]	; (8004364 <HAL_TIM_MspPostInit+0xbc>)
 8004306:	f003 fb9f 	bl	8007a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800430a:	e023      	b.n	8004354 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <HAL_TIM_MspPostInit+0xc0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d11e      	bne.n	8004354 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_TIM_MspPostInit+0xb8>)
 8004318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800431c:	4a10      	ldr	r2, [pc, #64]	; (8004360 <HAL_TIM_MspPostInit+0xb8>)
 800431e:	f043 0310 	orr.w	r3, r3, #16
 8004322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_TIM_MspPostInit+0xb8>)
 8004328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004334:	2360      	movs	r3, #96	; 0x60
 8004336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004338:	2302      	movs	r3, #2
 800433a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004340:	2300      	movs	r3, #0
 8004342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004344:	2304      	movs	r3, #4
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	4619      	mov	r1, r3
 800434e:	4807      	ldr	r0, [pc, #28]	; (800436c <HAL_TIM_MspPostInit+0xc4>)
 8004350:	f003 fb7a 	bl	8007a48 <HAL_GPIO_Init>
}
 8004354:	bf00      	nop
 8004356:	3728      	adds	r7, #40	; 0x28
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40001800 	.word	0x40001800
 8004360:	58024400 	.word	0x58024400
 8004364:	58020400 	.word	0x58020400
 8004368:	40014000 	.word	0x40014000
 800436c:	58021000 	.word	0x58021000

08004370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b0b6      	sub	sp, #216	; 0xd8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004378:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004388:	f107 0310 	add.w	r3, r7, #16
 800438c:	22b4      	movs	r2, #180	; 0xb4
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f009 fc43 	bl	800dc1c <memset>
  if(huart->Instance==USART1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a57      	ldr	r2, [pc, #348]	; (80044f8 <HAL_UART_MspInit+0x188>)
 800439c:	4293      	cmp	r3, r2
 800439e:	f040 80a7 	bne.w	80044f0 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043ac:	f107 0310 	add.w	r3, r7, #16
 80043b0:	4618      	mov	r0, r3
 80043b2:	f004 fc7f 	bl	8008cb4 <HAL_RCCEx_PeriphCLKConfig>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80043bc:	f7fc ffa0 	bl	8001300 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043c0:	4b4e      	ldr	r3, [pc, #312]	; (80044fc <HAL_UART_MspInit+0x18c>)
 80043c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043c6:	4a4d      	ldr	r2, [pc, #308]	; (80044fc <HAL_UART_MspInit+0x18c>)
 80043c8:	f043 0310 	orr.w	r3, r3, #16
 80043cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043d0:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_UART_MspInit+0x18c>)
 80043d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_UART_MspInit+0x18c>)
 80043e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043e4:	4a45      	ldr	r2, [pc, #276]	; (80044fc <HAL_UART_MspInit+0x18c>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043ee:	4b43      	ldr	r3, [pc, #268]	; (80044fc <HAL_UART_MspInit+0x18c>)
 80043f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004400:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004416:	2307      	movs	r3, #7
 8004418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800441c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004420:	4619      	mov	r1, r3
 8004422:	4837      	ldr	r0, [pc, #220]	; (8004500 <HAL_UART_MspInit+0x190>)
 8004424:	f003 fb10 	bl	8007a48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <HAL_UART_MspInit+0x194>)
 800442a:	4a37      	ldr	r2, [pc, #220]	; (8004508 <HAL_UART_MspInit+0x198>)
 800442c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800442e:	4b35      	ldr	r3, [pc, #212]	; (8004504 <HAL_UART_MspInit+0x194>)
 8004430:	2229      	movs	r2, #41	; 0x29
 8004432:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004434:	4b33      	ldr	r3, [pc, #204]	; (8004504 <HAL_UART_MspInit+0x194>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800443a:	4b32      	ldr	r3, [pc, #200]	; (8004504 <HAL_UART_MspInit+0x194>)
 800443c:	2200      	movs	r2, #0
 800443e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004440:	4b30      	ldr	r3, [pc, #192]	; (8004504 <HAL_UART_MspInit+0x194>)
 8004442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004446:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004448:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_UART_MspInit+0x194>)
 800444a:	2200      	movs	r2, #0
 800444c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_UART_MspInit+0x194>)
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004454:	4b2b      	ldr	r3, [pc, #172]	; (8004504 <HAL_UART_MspInit+0x194>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_UART_MspInit+0x194>)
 800445c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004460:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004462:	4b28      	ldr	r3, [pc, #160]	; (8004504 <HAL_UART_MspInit+0x194>)
 8004464:	2200      	movs	r2, #0
 8004466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004468:	4826      	ldr	r0, [pc, #152]	; (8004504 <HAL_UART_MspInit+0x194>)
 800446a:	f000 fcb3 	bl	8004dd4 <HAL_DMA_Init>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004474:	f7fc ff44 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a22      	ldr	r2, [pc, #136]	; (8004504 <HAL_UART_MspInit+0x194>)
 800447c:	67da      	str	r2, [r3, #124]	; 0x7c
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_UART_MspInit+0x194>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <HAL_UART_MspInit+0x19c>)
 8004486:	4a22      	ldr	r2, [pc, #136]	; (8004510 <HAL_UART_MspInit+0x1a0>)
 8004488:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <HAL_UART_MspInit+0x19c>)
 800448c:	222a      	movs	r2, #42	; 0x2a
 800448e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004490:	4b1e      	ldr	r3, [pc, #120]	; (800450c <HAL_UART_MspInit+0x19c>)
 8004492:	2240      	movs	r2, #64	; 0x40
 8004494:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_UART_MspInit+0x19c>)
 8004498:	2200      	movs	r2, #0
 800449a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_UART_MspInit+0x19c>)
 800449e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80044b0:	4b16      	ldr	r3, [pc, #88]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80044c4:	4811      	ldr	r0, [pc, #68]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044c6:	f000 fc85 	bl	8004dd4 <HAL_DMA_Init>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80044d0:	f7fc ff16 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a0d      	ldr	r2, [pc, #52]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044d8:	679a      	str	r2, [r3, #120]	; 0x78
 80044da:	4a0c      	ldr	r2, [pc, #48]	; (800450c <HAL_UART_MspInit+0x19c>)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044e0:	2200      	movs	r2, #0
 80044e2:	2100      	movs	r1, #0
 80044e4:	2025      	movs	r0, #37	; 0x25
 80044e6:	f000 fc40 	bl	8004d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044ea:	2025      	movs	r0, #37	; 0x25
 80044ec:	f000 fc57 	bl	8004d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044f0:	bf00      	nop
 80044f2:	37d8      	adds	r7, #216	; 0xd8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40011000 	.word	0x40011000
 80044fc:	58024400 	.word	0x58024400
 8004500:	58020000 	.word	0x58020000
 8004504:	24000584 	.word	0x24000584
 8004508:	40020010 	.word	0x40020010
 800450c:	240005fc 	.word	0x240005fc
 8004510:	40020028 	.word	0x40020028

08004514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004518:	e7fe      	b.n	8004518 <NMI_Handler+0x4>

0800451a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800451e:	e7fe      	b.n	800451e <HardFault_Handler+0x4>

08004520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004524:	e7fe      	b.n	8004524 <MemManage_Handler+0x4>

08004526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004526:	b480      	push	{r7}
 8004528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800452a:	e7fe      	b.n	800452a <BusFault_Handler+0x4>

0800452c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004530:	e7fe      	b.n	8004530 <UsageFault_Handler+0x4>

08004532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004560:	f000 fb08 	bl	8004b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004564:	bf00      	nop
 8004566:	bd80      	pop	{r7, pc}

08004568 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <DMA1_Stream0_IRQHandler+0x10>)
 800457e:	f001 ff51 	bl	8006424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	24000584 	.word	0x24000584

0800458c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <DMA1_Stream1_IRQHandler+0x10>)
 8004592:	f001 ff47 	bl	8006424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	240005fc 	.word	0x240005fc

080045a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <USART1_IRQHandler+0x10>)
 80045a6:	f007 fb03 	bl	800bbb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	240004f4 	.word	0x240004f4

080045b4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80045ba:	f006 fa69 	bl	800aa90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24000410 	.word	0x24000410

080045c8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80045ce:	f006 fa5f 	bl	800aa90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	2400045c 	.word	0x2400045c

080045dc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <TIM15_IRQHandler+0x10>)
 80045e2:	f006 fa55 	bl	800aa90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	240004a8 	.word	0x240004a8

080045f0 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	DC_motor_init();
 80045f4:	f7fc f842 	bl	800067c <_Z13DC_motor_initv>
}
 80045f8:	bf00      	nop
 80045fa:	bd80      	pop	{r7, pc}

080045fc <_ZN3STM11run_mecanumEv>:

void STM::run_mecanum(void){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	mecanum.run();
 8004600:	4802      	ldr	r0, [pc, #8]	; (800460c <_ZN3STM11run_mecanumEv+0x10>)
 8004602:	f7fc fee7 	bl	80013d4 <_ZN7Mecanum3runEv>
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	24000678 	.word	0x24000678

08004610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
	return 1;
 8004614:	2301      	movs	r3, #1
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_kill>:

int _kill(int pid, int sig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800462a:	f009 fabf 	bl	800dbac <__errno>
 800462e:	4603      	mov	r3, r0
 8004630:	2216      	movs	r2, #22
 8004632:	601a      	str	r2, [r3, #0]
	return -1;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_exit>:

void _exit (int status)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004648:	f04f 31ff 	mov.w	r1, #4294967295
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ffe7 	bl	8004620 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004652:	e7fe      	b.n	8004652 <_exit+0x12>

08004654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <_sbrk+0x5c>)
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <_sbrk+0x60>)
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <_sbrk+0x64>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <_sbrk+0x64>)
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <_sbrk+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <_sbrk+0x64>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d207      	bcs.n	8004694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004684:	f009 fa92 	bl	800dbac <__errno>
 8004688:	4603      	mov	r3, r0
 800468a:	220c      	movs	r2, #12
 800468c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e009      	b.n	80046a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <_sbrk+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <_sbrk+0x64>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <_sbrk+0x64>)
 80046a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	24050000 	.word	0x24050000
 80046b4:	00000400 	.word	0x00000400
 80046b8:	240010f0 	.word	0x240010f0
 80046bc:	24001108 	.word	0x24001108

080046c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046c4:	4b32      	ldr	r3, [pc, #200]	; (8004790 <SystemInit+0xd0>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	4a31      	ldr	r2, [pc, #196]	; (8004790 <SystemInit+0xd0>)
 80046cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046d4:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <SystemInit+0xd4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d807      	bhi.n	80046f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046e0:	4b2c      	ldr	r3, [pc, #176]	; (8004794 <SystemInit+0xd4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f023 030f 	bic.w	r3, r3, #15
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <SystemInit+0xd4>)
 80046ea:	f043 0307 	orr.w	r3, r3, #7
 80046ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80046f0:	4b29      	ldr	r3, [pc, #164]	; (8004798 <SystemInit+0xd8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a28      	ldr	r2, [pc, #160]	; (8004798 <SystemInit+0xd8>)
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046fc:	4b26      	ldr	r3, [pc, #152]	; (8004798 <SystemInit+0xd8>)
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004702:	4b25      	ldr	r3, [pc, #148]	; (8004798 <SystemInit+0xd8>)
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4924      	ldr	r1, [pc, #144]	; (8004798 <SystemInit+0xd8>)
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <SystemInit+0xdc>)
 800470a:	4013      	ands	r3, r2
 800470c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <SystemInit+0xd4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800471a:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <SystemInit+0xd4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 030f 	bic.w	r3, r3, #15
 8004722:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <SystemInit+0xd4>)
 8004724:	f043 0307 	orr.w	r3, r3, #7
 8004728:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800472a:	4b1b      	ldr	r3, [pc, #108]	; (8004798 <SystemInit+0xd8>)
 800472c:	2200      	movs	r2, #0
 800472e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <SystemInit+0xd8>)
 8004732:	2200      	movs	r2, #0
 8004734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <SystemInit+0xd8>)
 8004738:	2200      	movs	r2, #0
 800473a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800473c:	4b16      	ldr	r3, [pc, #88]	; (8004798 <SystemInit+0xd8>)
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <SystemInit+0xe0>)
 8004740:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004742:	4b15      	ldr	r3, [pc, #84]	; (8004798 <SystemInit+0xd8>)
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <SystemInit+0xe4>)
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004748:	4b13      	ldr	r3, [pc, #76]	; (8004798 <SystemInit+0xd8>)
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <SystemInit+0xe8>)
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <SystemInit+0xd8>)
 8004750:	2200      	movs	r2, #0
 8004752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <SystemInit+0xd8>)
 8004756:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <SystemInit+0xe8>)
 8004758:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800475a:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <SystemInit+0xd8>)
 800475c:	2200      	movs	r2, #0
 800475e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <SystemInit+0xd8>)
 8004762:	4a11      	ldr	r2, [pc, #68]	; (80047a8 <SystemInit+0xe8>)
 8004764:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <SystemInit+0xd8>)
 8004768:	2200      	movs	r2, #0
 800476a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <SystemInit+0xd8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a09      	ldr	r2, [pc, #36]	; (8004798 <SystemInit+0xd8>)
 8004772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004778:	4b07      	ldr	r3, [pc, #28]	; (8004798 <SystemInit+0xd8>)
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <SystemInit+0xec>)
 8004780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004784:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000ed00 	.word	0xe000ed00
 8004794:	52002000 	.word	0x52002000
 8004798:	58024400 	.word	0x58024400
 800479c:	eaf6ed7f 	.word	0xeaf6ed7f
 80047a0:	02020200 	.word	0x02020200
 80047a4:	01ff0000 	.word	0x01ff0000
 80047a8:	01010280 	.word	0x01010280
 80047ac:	52004000 	.word	0x52004000

080047b0 <HAL_TIM_PeriodElapsedCallback>:
#define STEP_PIN_4 GPIO_PIN_9

//int ms=0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM13) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a90      	ldr	r2, [pc, #576]	; (8004a00 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f040 811a 	bne.w	80049f8 <HAL_TIM_PeriodElapsedCallback+0x248>
		/*enc 1*/

//		if(__HAL_TIM_GetCounter(&htim2)>40000000||fr.rps_now>4800)
//			fr.CountNow=__HAL_TIM_GetCounter(&htim2)-65535;
//		else
			fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 80047c4:	4b8f      	ldr	r3, [pc, #572]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	4b8e      	ldr	r3, [pc, #568]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047ce:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

		fr.PIDControl();
 80047d2:	488d      	ldr	r0, [pc, #564]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047d4:	f7fb ffd8 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 80047d8:	4b8a      	ldr	r3, [pc, #552]	; (8004a04 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2200      	movs	r2, #0
 80047de:	625a      	str	r2, [r3, #36]	; 0x24
		if (fr.PID >= 0) {
 80047e0:	4b89      	ldr	r3, [pc, #548]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80047e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80047ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ee:	db0b      	blt.n	8004808 <HAL_TIM_PeriodElapsedCallback+0x58>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 80047f0:	2201      	movs	r2, #1
 80047f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047f6:	4885      	ldr	r0, [pc, #532]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80047f8:	f003 face 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004802:	4882      	ldr	r0, [pc, #520]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004804:	f003 fac8 	bl	8007d98 <HAL_GPIO_WritePin>
		}
		if (fr.PID < 0) {
 8004808:	4b7f      	ldr	r3, [pc, #508]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800480a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800480e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004816:	d513      	bpl.n	8004840 <HAL_TIM_PeriodElapsedCallback+0x90>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 8004818:	2200      	movs	r2, #0
 800481a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800481e:	487b      	ldr	r0, [pc, #492]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004820:	f003 faba 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 8004824:	2201      	movs	r2, #1
 8004826:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800482a:	4878      	ldr	r0, [pc, #480]	; (8004a0c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800482c:	f003 fab4 	bl	8007d98 <HAL_GPIO_WritePin>
			fr.PID = -fr.PID;
 8004830:	4b75      	ldr	r3, [pc, #468]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004832:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004836:	eeb1 7b47 	vneg.f64	d7, d7
 800483a:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800483c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, (int )fr.PID);
 8004840:	4b71      	ldr	r3, [pc, #452]	; (8004a08 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004842:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004846:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800484a:	4b71      	ldr	r3, [pc, #452]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	ee17 2a90 	vmov	r2, s15
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
		/*enc 2*/
//		if(__HAL_TIM_GetCounter(&htim5)>400000000||fl.rps_now>4800)
//			fl.CountNow=0;
//
//		else
			fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	b21a      	sxth	r2, r3
 800485c:	4b6e      	ldr	r3, [pc, #440]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800485e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

		fl.PIDControl();
 8004862:	486d      	ldr	r0, [pc, #436]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004864:	f7fb ff90 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2200      	movs	r2, #0
 800486e:	625a      	str	r2, [r3, #36]	; 0x24
		if (fl.PID < 0) {
 8004870:	4b69      	ldr	r3, [pc, #420]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004872:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004876:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	d50b      	bpl.n	8004898 <HAL_TIM_PeriodElapsedCallback+0xe8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 8004880:	2201      	movs	r2, #1
 8004882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004886:	4865      	ldr	r0, [pc, #404]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004888:	f003 fa86 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 800488c:	2200      	movs	r2, #0
 800488e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004892:	4862      	ldr	r0, [pc, #392]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004894:	f003 fa80 	bl	8007d98 <HAL_GPIO_WritePin>
		}
		if (fl.PID >= 0) {
 8004898:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800489a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800489e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80048a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a6:	db13      	blt.n	80048d0 <HAL_TIM_PeriodElapsedCallback+0x120>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 80048a8:	2200      	movs	r2, #0
 80048aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ae:	485b      	ldr	r0, [pc, #364]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80048b0:	f003 fa72 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 80048b4:	2201      	movs	r2, #1
 80048b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048ba:	4858      	ldr	r0, [pc, #352]	; (8004a1c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80048bc:	f003 fa6c 	bl	8007d98 <HAL_GPIO_WritePin>
			fl.PID = -fl.PID;
 80048c0:	4b55      	ldr	r3, [pc, #340]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80048c2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048c6:	eeb1 7b47 	vneg.f64	d7, d7
 80048ca:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80048cc:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, (int )fl.PID);
 80048d0:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80048d2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80048da:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	ee17 2a90 	vmov	r2, s15
 80048e2:	635a      	str	r2, [r3, #52]	; 0x34
		/*enc 3*/
//		if(__HAL_TIM_GetCounter(&htim3)>400000000||br.rps_now>4800)
//			br.CountNow=0;
//
//		 else
			br.CountNow = __HAL_TIM_GetCounter(&htim3);
 80048e4:	4b4e      	ldr	r3, [pc, #312]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	b21a      	sxth	r2, r3
 80048ec:	4b4d      	ldr	r3, [pc, #308]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048ee:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

		br.PIDControl();
 80048f2:	484c      	ldr	r0, [pc, #304]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80048f4:	f7fb ff48 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 80048f8:	4b49      	ldr	r3, [pc, #292]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24
		if (br.PID < 0) {
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004902:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004906:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d509      	bpl.n	8004924 <HAL_TIM_PeriodElapsedCallback+0x174>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8004910:	2201      	movs	r2, #1
 8004912:	2104      	movs	r1, #4
 8004914:	4844      	ldr	r0, [pc, #272]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004916:	f003 fa3f 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 800491a:	2200      	movs	r2, #0
 800491c:	2108      	movs	r1, #8
 800491e:	4842      	ldr	r0, [pc, #264]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004920:	f003 fa3a 	bl	8007d98 <HAL_GPIO_WritePin>
		}
		if (br.PID >= 0) {
 8004924:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004926:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800492a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800492e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004932:	db11      	blt.n	8004958 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 8004934:	2200      	movs	r2, #0
 8004936:	2104      	movs	r1, #4
 8004938:	483b      	ldr	r0, [pc, #236]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800493a:	f003 fa2d 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 800493e:	2201      	movs	r2, #1
 8004940:	2108      	movs	r1, #8
 8004942:	4839      	ldr	r0, [pc, #228]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004944:	f003 fa28 	bl	8007d98 <HAL_GPIO_WritePin>
			br.PID = -br.PID;
 8004948:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800494a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800494e:	eeb1 7b47 	vneg.f64	d7, d7
 8004952:	4b34      	ldr	r3, [pc, #208]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004954:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (int )br.PID);
 8004958:	4b32      	ldr	r3, [pc, #200]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800495a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800495e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004962:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	ee17 2a90 	vmov	r2, s15
 800496a:	635a      	str	r2, [r3, #52]	; 0x34
		/*enc 4*/
//		if(__HAL_TIM_GetCounter(&htim4)>400000000||bl.rps_now>4800)
//			bl.CountNow=0;
//
//		else
			bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 800496c:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	b21a      	sxth	r2, r3
 8004974:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004976:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

		bl.PIDControl();
 800497a:	482e      	ldr	r0, [pc, #184]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800497c:	f7fb ff04 	bl	8000788 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2200      	movs	r2, #0
 8004986:	625a      	str	r2, [r3, #36]	; 0x24
		if (bl.PID >= 0) {
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800498a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800498e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	db0a      	blt.n	80049ae <HAL_TIM_PeriodElapsedCallback+0x1fe>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8004998:	2201      	movs	r2, #1
 800499a:	2110      	movs	r1, #16
 800499c:	4822      	ldr	r0, [pc, #136]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800499e:	f003 f9fb 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 80049a2:	2200      	movs	r2, #0
 80049a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049a8:	4823      	ldr	r0, [pc, #140]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80049aa:	f003 f9f5 	bl	8007d98 <HAL_GPIO_WritePin>
		}
		if (bl.PID < 0) {
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80049b0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80049b4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80049b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049bc:	d512      	bpl.n	80049e4 <HAL_TIM_PeriodElapsedCallback+0x234>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 80049be:	2200      	movs	r2, #0
 80049c0:	2110      	movs	r1, #16
 80049c2:	4819      	ldr	r0, [pc, #100]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80049c4:	f003 f9e8 	bl	8007d98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 80049c8:	2201      	movs	r2, #1
 80049ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049ce:	481a      	ldr	r0, [pc, #104]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80049d0:	f003 f9e2 	bl	8007d98 <HAL_GPIO_WritePin>
			bl.PID = -bl.PID;
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80049d6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80049da:	eeb1 7b47 	vneg.f64	d7, d7
 80049de:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80049e0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, (int )bl.PID);
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80049e6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80049ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	ee17 2a90 	vmov	r2, s15
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38


	}

}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40001c00 	.word	0x40001c00
 8004a04:	240002e0 	.word	0x240002e0
 8004a08:	240000a0 	.word	0x240000a0
 8004a0c:	58020c00 	.word	0x58020c00
 8004a10:	24000410 	.word	0x24000410
 8004a14:	240003c4 	.word	0x240003c4
 8004a18:	24000130 	.word	0x24000130
 8004a1c:	58020400 	.word	0x58020400
 8004a20:	2400032c 	.word	0x2400032c
 8004a24:	240001c0 	.word	0x240001c0
 8004a28:	58021000 	.word	0x58021000
 8004a2c:	240004a8 	.word	0x240004a8
 8004a30:	24000378 	.word	0x24000378
 8004a34:	24000250 	.word	0x24000250
 8004a38:	58020800 	.word	0x58020800

08004a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a40:	f7ff fe3e 	bl	80046c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a44:	480c      	ldr	r0, [pc, #48]	; (8004a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a46:	490d      	ldr	r1, [pc, #52]	; (8004a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a48:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a4c:	e002      	b.n	8004a54 <LoopCopyDataInit>

08004a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a52:	3304      	adds	r3, #4

08004a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a58:	d3f9      	bcc.n	8004a4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a5c:	4c0a      	ldr	r4, [pc, #40]	; (8004a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a60:	e001      	b.n	8004a66 <LoopFillZerobss>

08004a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a64:	3204      	adds	r2, #4

08004a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a68:	d3fb      	bcc.n	8004a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a6a:	f009 f8a5 	bl	800dbb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a6e:	f7fb fffb 	bl	8000a68 <main>
  bx  lr
 8004a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a74:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004a78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a7c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8004a80:	0800e26c 	.word	0x0800e26c
  ldr r2, =_sbss
 8004a84:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8004a88:	24001108 	.word	0x24001108

08004a8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <ADC3_IRQHandler>
	...

08004a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a96:	2003      	movs	r0, #3
 8004a98:	f000 f95c 	bl	8004d54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a9c:	f003 ff34 	bl	8008908 <HAL_RCC_GetSysClockFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <HAL_Init+0x68>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	4913      	ldr	r1, [pc, #76]	; (8004afc <HAL_Init+0x6c>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_Init+0x68>)
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	4a0e      	ldr	r2, [pc, #56]	; (8004afc <HAL_Init+0x6c>)
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <HAL_Init+0x70>)
 8004ad2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ad4:	4a0b      	ldr	r2, [pc, #44]	; (8004b04 <HAL_Init+0x74>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ada:	200f      	movs	r0, #15
 8004adc:	f000 f814 	bl	8004b08 <HAL_InitTick>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e002      	b.n	8004af0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004aea:	f7ff fa3f 	bl	8003f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	58024400 	.word	0x58024400
 8004afc:	0800e20c 	.word	0x0800e20c
 8004b00:	24000008 	.word	0x24000008
 8004b04:	24000004 	.word	0x24000004

08004b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <HAL_InitTick+0x60>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e021      	b.n	8004b60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004b1c:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_InitTick+0x64>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_InitTick+0x60>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f941 	bl	8004dba <HAL_SYSTICK_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e00e      	b.n	8004b60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b0f      	cmp	r3, #15
 8004b46:	d80a      	bhi.n	8004b5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b48:	2200      	movs	r2, #0
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	f000 f90b 	bl	8004d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b54:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <HAL_InitTick+0x68>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e000      	b.n	8004b60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	24000010 	.word	0x24000010
 8004b6c:	24000004 	.word	0x24000004
 8004b70:	2400000c 	.word	0x2400000c

08004b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_IncTick+0x20>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_IncTick+0x24>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4413      	add	r3, r2
 8004b84:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <HAL_IncTick+0x24>)
 8004b86:	6013      	str	r3, [r2, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	24000010 	.word	0x24000010
 8004b98:	240010f4 	.word	0x240010f4

08004b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004ba0:	4b03      	ldr	r3, [pc, #12]	; (8004bb0 <HAL_GetTick+0x14>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	240010f4 	.word	0x240010f4

08004bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004be2:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	60d3      	str	r3, [r2, #12]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	.word	0xe000ed00
 8004bf8:	05fa0000 	.word	0x05fa0000

08004bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <__NVIC_GetPriorityGrouping+0x18>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	f003 0307 	and.w	r3, r3, #7
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	db0b      	blt.n	8004c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	f003 021f 	and.w	r2, r3, #31
 8004c30:	4907      	ldr	r1, [pc, #28]	; (8004c50 <__NVIC_EnableIRQ+0x38>)
 8004c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	2001      	movs	r0, #1
 8004c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000e100 	.word	0xe000e100

08004c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	db0a      	blt.n	8004c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	490c      	ldr	r1, [pc, #48]	; (8004ca0 <__NVIC_SetPriority+0x4c>)
 8004c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	440b      	add	r3, r1
 8004c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c7c:	e00a      	b.n	8004c94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	4908      	ldr	r1, [pc, #32]	; (8004ca4 <__NVIC_SetPriority+0x50>)
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	0112      	lsls	r2, r2, #4
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	440b      	add	r3, r1
 8004c92:	761a      	strb	r2, [r3, #24]
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	e000e100 	.word	0xe000e100
 8004ca4:	e000ed00 	.word	0xe000ed00

08004ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	; 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f1c3 0307 	rsb	r3, r3, #7
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	bf28      	it	cs
 8004cc6:	2304      	movcs	r3, #4
 8004cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d902      	bls.n	8004cd8 <NVIC_EncodePriority+0x30>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	3b03      	subs	r3, #3
 8004cd6:	e000      	b.n	8004cda <NVIC_EncodePriority+0x32>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	401a      	ands	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	43d9      	mvns	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d00:	4313      	orrs	r3, r2
         );
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3724      	adds	r7, #36	; 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d20:	d301      	bcc.n	8004d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d22:	2301      	movs	r3, #1
 8004d24:	e00f      	b.n	8004d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d26:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <SysTick_Config+0x40>)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d2e:	210f      	movs	r1, #15
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	f7ff ff8e 	bl	8004c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <SysTick_Config+0x40>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <SysTick_Config+0x40>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	e000e010 	.word	0xe000e010

08004d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff29 	bl	8004bb4 <__NVIC_SetPriorityGrouping>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d78:	f7ff ff40 	bl	8004bfc <__NVIC_GetPriorityGrouping>
 8004d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f7ff ff90 	bl	8004ca8 <NVIC_EncodePriority>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff5f 	bl	8004c54 <__NVIC_SetPriority>
}
 8004d96:	bf00      	nop
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	4603      	mov	r3, r0
 8004da6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ff33 	bl	8004c18 <__NVIC_EnableIRQ>
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff ffa4 	bl	8004d10 <SysTick_Config>
 8004dc8:	4603      	mov	r3, r0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ddc:	f7ff fede 	bl	8004b9c <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e314      	b.n	8005416 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a66      	ldr	r2, [pc, #408]	; (8004f8c <HAL_DMA_Init+0x1b8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d04a      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a65      	ldr	r2, [pc, #404]	; (8004f90 <HAL_DMA_Init+0x1bc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d045      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a63      	ldr	r2, [pc, #396]	; (8004f94 <HAL_DMA_Init+0x1c0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d040      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a62      	ldr	r2, [pc, #392]	; (8004f98 <HAL_DMA_Init+0x1c4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d03b      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a60      	ldr	r2, [pc, #384]	; (8004f9c <HAL_DMA_Init+0x1c8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d036      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a5f      	ldr	r2, [pc, #380]	; (8004fa0 <HAL_DMA_Init+0x1cc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d031      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a5d      	ldr	r2, [pc, #372]	; (8004fa4 <HAL_DMA_Init+0x1d0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02c      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a5c      	ldr	r2, [pc, #368]	; (8004fa8 <HAL_DMA_Init+0x1d4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d027      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a5a      	ldr	r2, [pc, #360]	; (8004fac <HAL_DMA_Init+0x1d8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a59      	ldr	r2, [pc, #356]	; (8004fb0 <HAL_DMA_Init+0x1dc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d01d      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a57      	ldr	r2, [pc, #348]	; (8004fb4 <HAL_DMA_Init+0x1e0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a56      	ldr	r2, [pc, #344]	; (8004fb8 <HAL_DMA_Init+0x1e4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a54      	ldr	r2, [pc, #336]	; (8004fbc <HAL_DMA_Init+0x1e8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a53      	ldr	r2, [pc, #332]	; (8004fc0 <HAL_DMA_Init+0x1ec>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a51      	ldr	r2, [pc, #324]	; (8004fc4 <HAL_DMA_Init+0x1f0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_DMA_Init+0xb8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a50      	ldr	r2, [pc, #320]	; (8004fc8 <HAL_DMA_Init+0x1f4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d101      	bne.n	8004e90 <HAL_DMA_Init+0xbc>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <HAL_DMA_Init+0xbe>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 813c 	beq.w	8005110 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a37      	ldr	r2, [pc, #220]	; (8004f8c <HAL_DMA_Init+0x1b8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d04a      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a36      	ldr	r2, [pc, #216]	; (8004f90 <HAL_DMA_Init+0x1bc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d045      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a34      	ldr	r2, [pc, #208]	; (8004f94 <HAL_DMA_Init+0x1c0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d040      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <HAL_DMA_Init+0x1c4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d03b      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a31      	ldr	r2, [pc, #196]	; (8004f9c <HAL_DMA_Init+0x1c8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d036      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <HAL_DMA_Init+0x1cc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d031      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a2e      	ldr	r2, [pc, #184]	; (8004fa4 <HAL_DMA_Init+0x1d0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d02c      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2d      	ldr	r2, [pc, #180]	; (8004fa8 <HAL_DMA_Init+0x1d4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d027      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2b      	ldr	r2, [pc, #172]	; (8004fac <HAL_DMA_Init+0x1d8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d022      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2a      	ldr	r2, [pc, #168]	; (8004fb0 <HAL_DMA_Init+0x1dc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d01d      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a28      	ldr	r2, [pc, #160]	; (8004fb4 <HAL_DMA_Init+0x1e0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d018      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a27      	ldr	r2, [pc, #156]	; (8004fb8 <HAL_DMA_Init+0x1e4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d013      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a25      	ldr	r2, [pc, #148]	; (8004fbc <HAL_DMA_Init+0x1e8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00e      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a24      	ldr	r2, [pc, #144]	; (8004fc0 <HAL_DMA_Init+0x1ec>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d009      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <HAL_DMA_Init+0x1f0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d004      	beq.n	8004f48 <HAL_DMA_Init+0x174>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a21      	ldr	r2, [pc, #132]	; (8004fc8 <HAL_DMA_Init+0x1f4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d108      	bne.n	8004f5a <HAL_DMA_Init+0x186>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e007      	b.n	8004f6a <HAL_DMA_Init+0x196>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f6a:	e02f      	b.n	8004fcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f6c:	f7ff fe16 	bl	8004b9c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b05      	cmp	r3, #5
 8004f78:	d928      	bls.n	8004fcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2203      	movs	r2, #3
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e244      	b.n	8005416 <HAL_DMA_Init+0x642>
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1c8      	bne.n	8004f6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4b84      	ldr	r3, [pc, #528]	; (80051f8 <HAL_DMA_Init+0x424>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ff2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ffe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	2b04      	cmp	r3, #4
 800501e:	d107      	bne.n	8005030 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	4313      	orrs	r3, r2
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b28      	cmp	r3, #40	; 0x28
 8005036:	d903      	bls.n	8005040 <HAL_DMA_Init+0x26c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b2e      	cmp	r3, #46	; 0x2e
 800503e:	d91f      	bls.n	8005080 <HAL_DMA_Init+0x2ac>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b3e      	cmp	r3, #62	; 0x3e
 8005046:	d903      	bls.n	8005050 <HAL_DMA_Init+0x27c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b42      	cmp	r3, #66	; 0x42
 800504e:	d917      	bls.n	8005080 <HAL_DMA_Init+0x2ac>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b46      	cmp	r3, #70	; 0x46
 8005056:	d903      	bls.n	8005060 <HAL_DMA_Init+0x28c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b48      	cmp	r3, #72	; 0x48
 800505e:	d90f      	bls.n	8005080 <HAL_DMA_Init+0x2ac>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b4e      	cmp	r3, #78	; 0x4e
 8005066:	d903      	bls.n	8005070 <HAL_DMA_Init+0x29c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b52      	cmp	r3, #82	; 0x52
 800506e:	d907      	bls.n	8005080 <HAL_DMA_Init+0x2ac>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b73      	cmp	r3, #115	; 0x73
 8005076:	d905      	bls.n	8005084 <HAL_DMA_Init+0x2b0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b77      	cmp	r3, #119	; 0x77
 800507e:	d801      	bhi.n	8005084 <HAL_DMA_Init+0x2b0>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_DMA_Init+0x2b2>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005090:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 0307 	bic.w	r3, r3, #7
 80050a8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d117      	bne.n	80050ec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00e      	beq.n	80050ec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f002 fb30 	bl	8007734 <DMA_CheckFifoParam>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2240      	movs	r2, #64	; 0x40
 80050de:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e194      	b.n	8005416 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f002 fa6b 	bl	80075d0 <DMA_CalcBaseAndBitshift>
 80050fa:	4603      	mov	r3, r0
 80050fc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	223f      	movs	r2, #63	; 0x3f
 8005108:	409a      	lsls	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	609a      	str	r2, [r3, #8]
 800510e:	e0ca      	b.n	80052a6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a39      	ldr	r2, [pc, #228]	; (80051fc <HAL_DMA_Init+0x428>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d022      	beq.n	8005160 <HAL_DMA_Init+0x38c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a38      	ldr	r2, [pc, #224]	; (8005200 <HAL_DMA_Init+0x42c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d01d      	beq.n	8005160 <HAL_DMA_Init+0x38c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a36      	ldr	r2, [pc, #216]	; (8005204 <HAL_DMA_Init+0x430>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d018      	beq.n	8005160 <HAL_DMA_Init+0x38c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a35      	ldr	r2, [pc, #212]	; (8005208 <HAL_DMA_Init+0x434>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d013      	beq.n	8005160 <HAL_DMA_Init+0x38c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a33      	ldr	r2, [pc, #204]	; (800520c <HAL_DMA_Init+0x438>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d00e      	beq.n	8005160 <HAL_DMA_Init+0x38c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a32      	ldr	r2, [pc, #200]	; (8005210 <HAL_DMA_Init+0x43c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d009      	beq.n	8005160 <HAL_DMA_Init+0x38c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a30      	ldr	r2, [pc, #192]	; (8005214 <HAL_DMA_Init+0x440>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_DMA_Init+0x38c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a2f      	ldr	r2, [pc, #188]	; (8005218 <HAL_DMA_Init+0x444>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d101      	bne.n	8005164 <HAL_DMA_Init+0x390>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <HAL_DMA_Init+0x392>
 8005164:	2300      	movs	r3, #0
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8094 	beq.w	8005294 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_DMA_Init+0x428>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d021      	beq.n	80051ba <HAL_DMA_Init+0x3e6>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <HAL_DMA_Init+0x42c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d01c      	beq.n	80051ba <HAL_DMA_Init+0x3e6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_DMA_Init+0x430>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d017      	beq.n	80051ba <HAL_DMA_Init+0x3e6>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_DMA_Init+0x434>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d012      	beq.n	80051ba <HAL_DMA_Init+0x3e6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_DMA_Init+0x438>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00d      	beq.n	80051ba <HAL_DMA_Init+0x3e6>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_DMA_Init+0x43c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d008      	beq.n	80051ba <HAL_DMA_Init+0x3e6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_DMA_Init+0x440>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <HAL_DMA_Init+0x3e6>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_DMA_Init+0x444>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_DMA_Init+0x448>)
 80051d8:	4013      	ands	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d01d      	beq.n	8005220 <HAL_DMA_Init+0x44c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b80      	cmp	r3, #128	; 0x80
 80051ea:	d102      	bne.n	80051f2 <HAL_DMA_Init+0x41e>
 80051ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051f0:	e017      	b.n	8005222 <HAL_DMA_Init+0x44e>
 80051f2:	2300      	movs	r3, #0
 80051f4:	e015      	b.n	8005222 <HAL_DMA_Init+0x44e>
 80051f6:	bf00      	nop
 80051f8:	fe10803f 	.word	0xfe10803f
 80051fc:	58025408 	.word	0x58025408
 8005200:	5802541c 	.word	0x5802541c
 8005204:	58025430 	.word	0x58025430
 8005208:	58025444 	.word	0x58025444
 800520c:	58025458 	.word	0x58025458
 8005210:	5802546c 	.word	0x5802546c
 8005214:	58025480 	.word	0x58025480
 8005218:	58025494 	.word	0x58025494
 800521c:	fffe000f 	.word	0xfffe000f
 8005220:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005250:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	4b6e      	ldr	r3, [pc, #440]	; (8005420 <HAL_DMA_Init+0x64c>)
 8005268:	4413      	add	r3, r2
 800526a:	4a6e      	ldr	r2, [pc, #440]	; (8005424 <HAL_DMA_Init+0x650>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	009a      	lsls	r2, r3, #2
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f002 f9a9 	bl	80075d0 <DMA_CalcBaseAndBitshift>
 800527e:	4603      	mov	r3, r0
 8005280:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2201      	movs	r2, #1
 800528c:	409a      	lsls	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	e008      	b.n	80052a6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2240      	movs	r2, #64	; 0x40
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2203      	movs	r2, #3
 800529e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0b7      	b.n	8005416 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a5f      	ldr	r2, [pc, #380]	; (8005428 <HAL_DMA_Init+0x654>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d072      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5d      	ldr	r2, [pc, #372]	; (800542c <HAL_DMA_Init+0x658>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d06d      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a5c      	ldr	r2, [pc, #368]	; (8005430 <HAL_DMA_Init+0x65c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d068      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5a      	ldr	r2, [pc, #360]	; (8005434 <HAL_DMA_Init+0x660>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d063      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a59      	ldr	r2, [pc, #356]	; (8005438 <HAL_DMA_Init+0x664>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d05e      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a57      	ldr	r2, [pc, #348]	; (800543c <HAL_DMA_Init+0x668>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d059      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_DMA_Init+0x66c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d054      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a54      	ldr	r2, [pc, #336]	; (8005444 <HAL_DMA_Init+0x670>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d04f      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a53      	ldr	r2, [pc, #332]	; (8005448 <HAL_DMA_Init+0x674>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d04a      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a51      	ldr	r2, [pc, #324]	; (800544c <HAL_DMA_Init+0x678>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d045      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a50      	ldr	r2, [pc, #320]	; (8005450 <HAL_DMA_Init+0x67c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d040      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a4e      	ldr	r2, [pc, #312]	; (8005454 <HAL_DMA_Init+0x680>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d03b      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_DMA_Init+0x684>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d036      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a4b      	ldr	r2, [pc, #300]	; (800545c <HAL_DMA_Init+0x688>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d031      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_DMA_Init+0x68c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d02c      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a48      	ldr	r2, [pc, #288]	; (8005464 <HAL_DMA_Init+0x690>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d027      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a47      	ldr	r2, [pc, #284]	; (8005468 <HAL_DMA_Init+0x694>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d022      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a45      	ldr	r2, [pc, #276]	; (800546c <HAL_DMA_Init+0x698>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01d      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a44      	ldr	r2, [pc, #272]	; (8005470 <HAL_DMA_Init+0x69c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a42      	ldr	r2, [pc, #264]	; (8005474 <HAL_DMA_Init+0x6a0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a41      	ldr	r2, [pc, #260]	; (8005478 <HAL_DMA_Init+0x6a4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a3f      	ldr	r2, [pc, #252]	; (800547c <HAL_DMA_Init+0x6a8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a3e      	ldr	r2, [pc, #248]	; (8005480 <HAL_DMA_Init+0x6ac>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_DMA_Init+0x5c2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a3c      	ldr	r2, [pc, #240]	; (8005484 <HAL_DMA_Init+0x6b0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <HAL_DMA_Init+0x5c6>
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_DMA_Init+0x5c8>
 800539a:	2300      	movs	r3, #0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d032      	beq.n	8005406 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f002 fa43 	bl	800782c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b80      	cmp	r3, #128	; 0x80
 80053ac:	d102      	bne.n	80053b4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d010      	beq.n	80053f4 <HAL_DMA_Init+0x620>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d80c      	bhi.n	80053f4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f002 fac0 	bl	8007960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	e008      	b.n	8005406 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	a7fdabf8 	.word	0xa7fdabf8
 8005424:	cccccccd 	.word	0xcccccccd
 8005428:	40020010 	.word	0x40020010
 800542c:	40020028 	.word	0x40020028
 8005430:	40020040 	.word	0x40020040
 8005434:	40020058 	.word	0x40020058
 8005438:	40020070 	.word	0x40020070
 800543c:	40020088 	.word	0x40020088
 8005440:	400200a0 	.word	0x400200a0
 8005444:	400200b8 	.word	0x400200b8
 8005448:	40020410 	.word	0x40020410
 800544c:	40020428 	.word	0x40020428
 8005450:	40020440 	.word	0x40020440
 8005454:	40020458 	.word	0x40020458
 8005458:	40020470 	.word	0x40020470
 800545c:	40020488 	.word	0x40020488
 8005460:	400204a0 	.word	0x400204a0
 8005464:	400204b8 	.word	0x400204b8
 8005468:	58025408 	.word	0x58025408
 800546c:	5802541c 	.word	0x5802541c
 8005470:	58025430 	.word	0x58025430
 8005474:	58025444 	.word	0x58025444
 8005478:	58025458 	.word	0x58025458
 800547c:	5802546c 	.word	0x5802546c
 8005480:	58025480 	.word	0x58025480
 8005484:	58025494 	.word	0x58025494

08005488 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e226      	b.n	80058f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_DMA_Start_IT+0x2a>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e21f      	b.n	80058f2 <HAL_DMA_Start_IT+0x46a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	f040 820a 	bne.w	80058dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a68      	ldr	r2, [pc, #416]	; (800567c <HAL_DMA_Start_IT+0x1f4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d04a      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a66      	ldr	r2, [pc, #408]	; (8005680 <HAL_DMA_Start_IT+0x1f8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d045      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a65      	ldr	r2, [pc, #404]	; (8005684 <HAL_DMA_Start_IT+0x1fc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d040      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a63      	ldr	r2, [pc, #396]	; (8005688 <HAL_DMA_Start_IT+0x200>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d03b      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a62      	ldr	r2, [pc, #392]	; (800568c <HAL_DMA_Start_IT+0x204>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d036      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a60      	ldr	r2, [pc, #384]	; (8005690 <HAL_DMA_Start_IT+0x208>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a5f      	ldr	r2, [pc, #380]	; (8005694 <HAL_DMA_Start_IT+0x20c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d02c      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5d      	ldr	r2, [pc, #372]	; (8005698 <HAL_DMA_Start_IT+0x210>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d027      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a5c      	ldr	r2, [pc, #368]	; (800569c <HAL_DMA_Start_IT+0x214>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5a      	ldr	r2, [pc, #360]	; (80056a0 <HAL_DMA_Start_IT+0x218>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01d      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a59      	ldr	r2, [pc, #356]	; (80056a4 <HAL_DMA_Start_IT+0x21c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d018      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a57      	ldr	r2, [pc, #348]	; (80056a8 <HAL_DMA_Start_IT+0x220>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a56      	ldr	r2, [pc, #344]	; (80056ac <HAL_DMA_Start_IT+0x224>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a54      	ldr	r2, [pc, #336]	; (80056b0 <HAL_DMA_Start_IT+0x228>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a53      	ldr	r2, [pc, #332]	; (80056b4 <HAL_DMA_Start_IT+0x22c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_DMA_Start_IT+0xee>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a51      	ldr	r2, [pc, #324]	; (80056b8 <HAL_DMA_Start_IT+0x230>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d108      	bne.n	8005588 <HAL_DMA_Start_IT+0x100>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e007      	b.n	8005598 <HAL_DMA_Start_IT+0x110>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f001 fe6a 	bl	8007278 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a34      	ldr	r2, [pc, #208]	; (800567c <HAL_DMA_Start_IT+0x1f4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d04a      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a33      	ldr	r2, [pc, #204]	; (8005680 <HAL_DMA_Start_IT+0x1f8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d045      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a31      	ldr	r2, [pc, #196]	; (8005684 <HAL_DMA_Start_IT+0x1fc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d040      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a30      	ldr	r2, [pc, #192]	; (8005688 <HAL_DMA_Start_IT+0x200>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d03b      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a2e      	ldr	r2, [pc, #184]	; (800568c <HAL_DMA_Start_IT+0x204>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d036      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <HAL_DMA_Start_IT+0x208>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d031      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <HAL_DMA_Start_IT+0x20c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d02c      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <HAL_DMA_Start_IT+0x210>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d027      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a28      	ldr	r2, [pc, #160]	; (800569c <HAL_DMA_Start_IT+0x214>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d022      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <HAL_DMA_Start_IT+0x218>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d01d      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <HAL_DMA_Start_IT+0x21c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d018      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <HAL_DMA_Start_IT+0x220>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_DMA_Start_IT+0x224>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a21      	ldr	r2, [pc, #132]	; (80056b0 <HAL_DMA_Start_IT+0x228>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <HAL_DMA_Start_IT+0x22c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_DMA_Start_IT+0x1bc>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <HAL_DMA_Start_IT+0x230>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d101      	bne.n	8005648 <HAL_DMA_Start_IT+0x1c0>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_DMA_Start_IT+0x1c2>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d036      	beq.n	80056bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 021e 	bic.w	r2, r3, #30
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0216 	orr.w	r2, r2, #22
 8005660:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d03e      	beq.n	80056e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0208 	orr.w	r2, r2, #8
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	e035      	b.n	80056e8 <HAL_DMA_Start_IT+0x260>
 800567c:	40020010 	.word	0x40020010
 8005680:	40020028 	.word	0x40020028
 8005684:	40020040 	.word	0x40020040
 8005688:	40020058 	.word	0x40020058
 800568c:	40020070 	.word	0x40020070
 8005690:	40020088 	.word	0x40020088
 8005694:	400200a0 	.word	0x400200a0
 8005698:	400200b8 	.word	0x400200b8
 800569c:	40020410 	.word	0x40020410
 80056a0:	40020428 	.word	0x40020428
 80056a4:	40020440 	.word	0x40020440
 80056a8:	40020458 	.word	0x40020458
 80056ac:	40020470 	.word	0x40020470
 80056b0:	40020488 	.word	0x40020488
 80056b4:	400204a0 	.word	0x400204a0
 80056b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 020e 	bic.w	r2, r3, #14
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 020a 	orr.w	r2, r2, #10
 80056ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0204 	orr.w	r2, r2, #4
 80056e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a83      	ldr	r2, [pc, #524]	; (80058fc <HAL_DMA_Start_IT+0x474>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d072      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a82      	ldr	r2, [pc, #520]	; (8005900 <HAL_DMA_Start_IT+0x478>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d06d      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a80      	ldr	r2, [pc, #512]	; (8005904 <HAL_DMA_Start_IT+0x47c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d068      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a7f      	ldr	r2, [pc, #508]	; (8005908 <HAL_DMA_Start_IT+0x480>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d063      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a7d      	ldr	r2, [pc, #500]	; (800590c <HAL_DMA_Start_IT+0x484>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d05e      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7c      	ldr	r2, [pc, #496]	; (8005910 <HAL_DMA_Start_IT+0x488>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d059      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a7a      	ldr	r2, [pc, #488]	; (8005914 <HAL_DMA_Start_IT+0x48c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d054      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a79      	ldr	r2, [pc, #484]	; (8005918 <HAL_DMA_Start_IT+0x490>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d04f      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a77      	ldr	r2, [pc, #476]	; (800591c <HAL_DMA_Start_IT+0x494>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d04a      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a76      	ldr	r2, [pc, #472]	; (8005920 <HAL_DMA_Start_IT+0x498>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d045      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a74      	ldr	r2, [pc, #464]	; (8005924 <HAL_DMA_Start_IT+0x49c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d040      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a73      	ldr	r2, [pc, #460]	; (8005928 <HAL_DMA_Start_IT+0x4a0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d03b      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a71      	ldr	r2, [pc, #452]	; (800592c <HAL_DMA_Start_IT+0x4a4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d036      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a70      	ldr	r2, [pc, #448]	; (8005930 <HAL_DMA_Start_IT+0x4a8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d031      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a6e      	ldr	r2, [pc, #440]	; (8005934 <HAL_DMA_Start_IT+0x4ac>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d02c      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a6d      	ldr	r2, [pc, #436]	; (8005938 <HAL_DMA_Start_IT+0x4b0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d027      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a6b      	ldr	r2, [pc, #428]	; (800593c <HAL_DMA_Start_IT+0x4b4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d022      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6a      	ldr	r2, [pc, #424]	; (8005940 <HAL_DMA_Start_IT+0x4b8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d01d      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a68      	ldr	r2, [pc, #416]	; (8005944 <HAL_DMA_Start_IT+0x4bc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d018      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a67      	ldr	r2, [pc, #412]	; (8005948 <HAL_DMA_Start_IT+0x4c0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d013      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a65      	ldr	r2, [pc, #404]	; (800594c <HAL_DMA_Start_IT+0x4c4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00e      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a64      	ldr	r2, [pc, #400]	; (8005950 <HAL_DMA_Start_IT+0x4c8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a62      	ldr	r2, [pc, #392]	; (8005954 <HAL_DMA_Start_IT+0x4cc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_DMA_Start_IT+0x350>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a61      	ldr	r2, [pc, #388]	; (8005958 <HAL_DMA_Start_IT+0x4d0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d101      	bne.n	80057dc <HAL_DMA_Start_IT+0x354>
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_DMA_Start_IT+0x356>
 80057dc:	2300      	movs	r3, #0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01a      	beq.n	8005818 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005816:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a37      	ldr	r2, [pc, #220]	; (80058fc <HAL_DMA_Start_IT+0x474>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d04a      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a36      	ldr	r2, [pc, #216]	; (8005900 <HAL_DMA_Start_IT+0x478>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d045      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a34      	ldr	r2, [pc, #208]	; (8005904 <HAL_DMA_Start_IT+0x47c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d040      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a33      	ldr	r2, [pc, #204]	; (8005908 <HAL_DMA_Start_IT+0x480>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d03b      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a31      	ldr	r2, [pc, #196]	; (800590c <HAL_DMA_Start_IT+0x484>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d036      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a30      	ldr	r2, [pc, #192]	; (8005910 <HAL_DMA_Start_IT+0x488>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d031      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a2e      	ldr	r2, [pc, #184]	; (8005914 <HAL_DMA_Start_IT+0x48c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d02c      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2d      	ldr	r2, [pc, #180]	; (8005918 <HAL_DMA_Start_IT+0x490>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d027      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2b      	ldr	r2, [pc, #172]	; (800591c <HAL_DMA_Start_IT+0x494>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d022      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <HAL_DMA_Start_IT+0x498>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d01d      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a28      	ldr	r2, [pc, #160]	; (8005924 <HAL_DMA_Start_IT+0x49c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d018      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a27      	ldr	r2, [pc, #156]	; (8005928 <HAL_DMA_Start_IT+0x4a0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d013      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <HAL_DMA_Start_IT+0x4a4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00e      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a24      	ldr	r2, [pc, #144]	; (8005930 <HAL_DMA_Start_IT+0x4a8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d009      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a22      	ldr	r2, [pc, #136]	; (8005934 <HAL_DMA_Start_IT+0x4ac>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <HAL_DMA_Start_IT+0x430>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a21      	ldr	r2, [pc, #132]	; (8005938 <HAL_DMA_Start_IT+0x4b0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d108      	bne.n	80058ca <HAL_DMA_Start_IT+0x442>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	e012      	b.n	80058f0 <HAL_DMA_Start_IT+0x468>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	e009      	b.n	80058f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40020010 	.word	0x40020010
 8005900:	40020028 	.word	0x40020028
 8005904:	40020040 	.word	0x40020040
 8005908:	40020058 	.word	0x40020058
 800590c:	40020070 	.word	0x40020070
 8005910:	40020088 	.word	0x40020088
 8005914:	400200a0 	.word	0x400200a0
 8005918:	400200b8 	.word	0x400200b8
 800591c:	40020410 	.word	0x40020410
 8005920:	40020428 	.word	0x40020428
 8005924:	40020440 	.word	0x40020440
 8005928:	40020458 	.word	0x40020458
 800592c:	40020470 	.word	0x40020470
 8005930:	40020488 	.word	0x40020488
 8005934:	400204a0 	.word	0x400204a0
 8005938:	400204b8 	.word	0x400204b8
 800593c:	58025408 	.word	0x58025408
 8005940:	5802541c 	.word	0x5802541c
 8005944:	58025430 	.word	0x58025430
 8005948:	58025444 	.word	0x58025444
 800594c:	58025458 	.word	0x58025458
 8005950:	5802546c 	.word	0x5802546c
 8005954:	58025480 	.word	0x58025480
 8005958:	58025494 	.word	0x58025494

0800595c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005964:	f7ff f91a 	bl	8004b9c <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e2dc      	b.n	8005f2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d008      	beq.n	8005992 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e2cd      	b.n	8005f2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a76      	ldr	r2, [pc, #472]	; (8005b70 <HAL_DMA_Abort+0x214>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d04a      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a74      	ldr	r2, [pc, #464]	; (8005b74 <HAL_DMA_Abort+0x218>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d045      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a73      	ldr	r2, [pc, #460]	; (8005b78 <HAL_DMA_Abort+0x21c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d040      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a71      	ldr	r2, [pc, #452]	; (8005b7c <HAL_DMA_Abort+0x220>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d03b      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a70      	ldr	r2, [pc, #448]	; (8005b80 <HAL_DMA_Abort+0x224>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d036      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6e      	ldr	r2, [pc, #440]	; (8005b84 <HAL_DMA_Abort+0x228>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d031      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6d      	ldr	r2, [pc, #436]	; (8005b88 <HAL_DMA_Abort+0x22c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d02c      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a6b      	ldr	r2, [pc, #428]	; (8005b8c <HAL_DMA_Abort+0x230>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d027      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6a      	ldr	r2, [pc, #424]	; (8005b90 <HAL_DMA_Abort+0x234>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d022      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a68      	ldr	r2, [pc, #416]	; (8005b94 <HAL_DMA_Abort+0x238>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01d      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a67      	ldr	r2, [pc, #412]	; (8005b98 <HAL_DMA_Abort+0x23c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d018      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a65      	ldr	r2, [pc, #404]	; (8005b9c <HAL_DMA_Abort+0x240>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a64      	ldr	r2, [pc, #400]	; (8005ba0 <HAL_DMA_Abort+0x244>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a62      	ldr	r2, [pc, #392]	; (8005ba4 <HAL_DMA_Abort+0x248>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a61      	ldr	r2, [pc, #388]	; (8005ba8 <HAL_DMA_Abort+0x24c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_DMA_Abort+0xd6>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a5f      	ldr	r2, [pc, #380]	; (8005bac <HAL_DMA_Abort+0x250>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <HAL_DMA_Abort+0xda>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_DMA_Abort+0xdc>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d013      	beq.n	8005a64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 021e 	bic.w	r2, r2, #30
 8005a4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e00a      	b.n	8005a7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 020e 	bic.w	r2, r2, #14
 8005a72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a3c      	ldr	r2, [pc, #240]	; (8005b70 <HAL_DMA_Abort+0x214>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d072      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a3a      	ldr	r2, [pc, #232]	; (8005b74 <HAL_DMA_Abort+0x218>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d06d      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a39      	ldr	r2, [pc, #228]	; (8005b78 <HAL_DMA_Abort+0x21c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d068      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a37      	ldr	r2, [pc, #220]	; (8005b7c <HAL_DMA_Abort+0x220>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d063      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a36      	ldr	r2, [pc, #216]	; (8005b80 <HAL_DMA_Abort+0x224>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d05e      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a34      	ldr	r2, [pc, #208]	; (8005b84 <HAL_DMA_Abort+0x228>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d059      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a33      	ldr	r2, [pc, #204]	; (8005b88 <HAL_DMA_Abort+0x22c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d054      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a31      	ldr	r2, [pc, #196]	; (8005b8c <HAL_DMA_Abort+0x230>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d04f      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a30      	ldr	r2, [pc, #192]	; (8005b90 <HAL_DMA_Abort+0x234>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d04a      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2e      	ldr	r2, [pc, #184]	; (8005b94 <HAL_DMA_Abort+0x238>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d045      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2d      	ldr	r2, [pc, #180]	; (8005b98 <HAL_DMA_Abort+0x23c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d040      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2b      	ldr	r2, [pc, #172]	; (8005b9c <HAL_DMA_Abort+0x240>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d03b      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2a      	ldr	r2, [pc, #168]	; (8005ba0 <HAL_DMA_Abort+0x244>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d036      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a28      	ldr	r2, [pc, #160]	; (8005ba4 <HAL_DMA_Abort+0x248>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d031      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a27      	ldr	r2, [pc, #156]	; (8005ba8 <HAL_DMA_Abort+0x24c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d02c      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a25      	ldr	r2, [pc, #148]	; (8005bac <HAL_DMA_Abort+0x250>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d027      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a24      	ldr	r2, [pc, #144]	; (8005bb0 <HAL_DMA_Abort+0x254>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d022      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <HAL_DMA_Abort+0x258>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01d      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <HAL_DMA_Abort+0x25c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d018      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1f      	ldr	r2, [pc, #124]	; (8005bbc <HAL_DMA_Abort+0x260>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <HAL_DMA_Abort+0x264>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <HAL_DMA_Abort+0x268>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1b      	ldr	r2, [pc, #108]	; (8005bc8 <HAL_DMA_Abort+0x26c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_DMA_Abort+0x20e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <HAL_DMA_Abort+0x270>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d132      	bne.n	8005bd0 <HAL_DMA_Abort+0x274>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e031      	b.n	8005bd2 <HAL_DMA_Abort+0x276>
 8005b6e:	bf00      	nop
 8005b70:	40020010 	.word	0x40020010
 8005b74:	40020028 	.word	0x40020028
 8005b78:	40020040 	.word	0x40020040
 8005b7c:	40020058 	.word	0x40020058
 8005b80:	40020070 	.word	0x40020070
 8005b84:	40020088 	.word	0x40020088
 8005b88:	400200a0 	.word	0x400200a0
 8005b8c:	400200b8 	.word	0x400200b8
 8005b90:	40020410 	.word	0x40020410
 8005b94:	40020428 	.word	0x40020428
 8005b98:	40020440 	.word	0x40020440
 8005b9c:	40020458 	.word	0x40020458
 8005ba0:	40020470 	.word	0x40020470
 8005ba4:	40020488 	.word	0x40020488
 8005ba8:	400204a0 	.word	0x400204a0
 8005bac:	400204b8 	.word	0x400204b8
 8005bb0:	58025408 	.word	0x58025408
 8005bb4:	5802541c 	.word	0x5802541c
 8005bb8:	58025430 	.word	0x58025430
 8005bbc:	58025444 	.word	0x58025444
 8005bc0:	58025458 	.word	0x58025458
 8005bc4:	5802546c 	.word	0x5802546c
 8005bc8:	58025480 	.word	0x58025480
 8005bcc:	58025494 	.word	0x58025494
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a6d      	ldr	r2, [pc, #436]	; (8005da0 <HAL_DMA_Abort+0x444>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d04a      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a6b      	ldr	r2, [pc, #428]	; (8005da4 <HAL_DMA_Abort+0x448>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d045      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a6a      	ldr	r2, [pc, #424]	; (8005da8 <HAL_DMA_Abort+0x44c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d040      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a68      	ldr	r2, [pc, #416]	; (8005dac <HAL_DMA_Abort+0x450>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d03b      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a67      	ldr	r2, [pc, #412]	; (8005db0 <HAL_DMA_Abort+0x454>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d036      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a65      	ldr	r2, [pc, #404]	; (8005db4 <HAL_DMA_Abort+0x458>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d031      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a64      	ldr	r2, [pc, #400]	; (8005db8 <HAL_DMA_Abort+0x45c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d02c      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a62      	ldr	r2, [pc, #392]	; (8005dbc <HAL_DMA_Abort+0x460>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d027      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a61      	ldr	r2, [pc, #388]	; (8005dc0 <HAL_DMA_Abort+0x464>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a5f      	ldr	r2, [pc, #380]	; (8005dc4 <HAL_DMA_Abort+0x468>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a5e      	ldr	r2, [pc, #376]	; (8005dc8 <HAL_DMA_Abort+0x46c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5c      	ldr	r2, [pc, #368]	; (8005dcc <HAL_DMA_Abort+0x470>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a5b      	ldr	r2, [pc, #364]	; (8005dd0 <HAL_DMA_Abort+0x474>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a59      	ldr	r2, [pc, #356]	; (8005dd4 <HAL_DMA_Abort+0x478>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a58      	ldr	r2, [pc, #352]	; (8005dd8 <HAL_DMA_Abort+0x47c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_DMA_Abort+0x32a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a56      	ldr	r2, [pc, #344]	; (8005ddc <HAL_DMA_Abort+0x480>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <HAL_DMA_Abort+0x33c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e007      	b.n	8005ca8 <HAL_DMA_Abort+0x34c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ca8:	e013      	b.n	8005cd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005caa:	f7fe ff77 	bl	8004b9c <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b05      	cmp	r3, #5
 8005cb6:	d90c      	bls.n	8005cd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2203      	movs	r2, #3
 8005cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e12d      	b.n	8005f2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2f      	ldr	r2, [pc, #188]	; (8005da0 <HAL_DMA_Abort+0x444>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d04a      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2d      	ldr	r2, [pc, #180]	; (8005da4 <HAL_DMA_Abort+0x448>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d045      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a2c      	ldr	r2, [pc, #176]	; (8005da8 <HAL_DMA_Abort+0x44c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d040      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <HAL_DMA_Abort+0x450>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d03b      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a29      	ldr	r2, [pc, #164]	; (8005db0 <HAL_DMA_Abort+0x454>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d036      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <HAL_DMA_Abort+0x458>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d031      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <HAL_DMA_Abort+0x45c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d02c      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a24      	ldr	r2, [pc, #144]	; (8005dbc <HAL_DMA_Abort+0x460>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d027      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a23      	ldr	r2, [pc, #140]	; (8005dc0 <HAL_DMA_Abort+0x464>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a21      	ldr	r2, [pc, #132]	; (8005dc4 <HAL_DMA_Abort+0x468>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01d      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <HAL_DMA_Abort+0x46c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1e      	ldr	r2, [pc, #120]	; (8005dcc <HAL_DMA_Abort+0x470>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_DMA_Abort+0x474>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <HAL_DMA_Abort+0x478>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <HAL_DMA_Abort+0x47c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_DMA_Abort+0x422>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <HAL_DMA_Abort+0x480>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <HAL_DMA_Abort+0x426>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <HAL_DMA_Abort+0x428>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d02b      	beq.n	8005de0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	223f      	movs	r2, #63	; 0x3f
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	609a      	str	r2, [r3, #8]
 8005d9e:	e02a      	b.n	8005df6 <HAL_DMA_Abort+0x49a>
 8005da0:	40020010 	.word	0x40020010
 8005da4:	40020028 	.word	0x40020028
 8005da8:	40020040 	.word	0x40020040
 8005dac:	40020058 	.word	0x40020058
 8005db0:	40020070 	.word	0x40020070
 8005db4:	40020088 	.word	0x40020088
 8005db8:	400200a0 	.word	0x400200a0
 8005dbc:	400200b8 	.word	0x400200b8
 8005dc0:	40020410 	.word	0x40020410
 8005dc4:	40020428 	.word	0x40020428
 8005dc8:	40020440 	.word	0x40020440
 8005dcc:	40020458 	.word	0x40020458
 8005dd0:	40020470 	.word	0x40020470
 8005dd4:	40020488 	.word	0x40020488
 8005dd8:	400204a0 	.word	0x400204a0
 8005ddc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	2201      	movs	r2, #1
 8005df0:	409a      	lsls	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a4f      	ldr	r2, [pc, #316]	; (8005f38 <HAL_DMA_Abort+0x5dc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d072      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a4d      	ldr	r2, [pc, #308]	; (8005f3c <HAL_DMA_Abort+0x5e0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d06d      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4c      	ldr	r2, [pc, #304]	; (8005f40 <HAL_DMA_Abort+0x5e4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d068      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a4a      	ldr	r2, [pc, #296]	; (8005f44 <HAL_DMA_Abort+0x5e8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d063      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a49      	ldr	r2, [pc, #292]	; (8005f48 <HAL_DMA_Abort+0x5ec>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d05e      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a47      	ldr	r2, [pc, #284]	; (8005f4c <HAL_DMA_Abort+0x5f0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d059      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a46      	ldr	r2, [pc, #280]	; (8005f50 <HAL_DMA_Abort+0x5f4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d054      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a44      	ldr	r2, [pc, #272]	; (8005f54 <HAL_DMA_Abort+0x5f8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04f      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a43      	ldr	r2, [pc, #268]	; (8005f58 <HAL_DMA_Abort+0x5fc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a41      	ldr	r2, [pc, #260]	; (8005f5c <HAL_DMA_Abort+0x600>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a40      	ldr	r2, [pc, #256]	; (8005f60 <HAL_DMA_Abort+0x604>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a3e      	ldr	r2, [pc, #248]	; (8005f64 <HAL_DMA_Abort+0x608>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <HAL_DMA_Abort+0x60c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3b      	ldr	r2, [pc, #236]	; (8005f6c <HAL_DMA_Abort+0x610>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3a      	ldr	r2, [pc, #232]	; (8005f70 <HAL_DMA_Abort+0x614>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a38      	ldr	r2, [pc, #224]	; (8005f74 <HAL_DMA_Abort+0x618>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a37      	ldr	r2, [pc, #220]	; (8005f78 <HAL_DMA_Abort+0x61c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a35      	ldr	r2, [pc, #212]	; (8005f7c <HAL_DMA_Abort+0x620>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a34      	ldr	r2, [pc, #208]	; (8005f80 <HAL_DMA_Abort+0x624>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a32      	ldr	r2, [pc, #200]	; (8005f84 <HAL_DMA_Abort+0x628>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <HAL_DMA_Abort+0x62c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a2f      	ldr	r2, [pc, #188]	; (8005f8c <HAL_DMA_Abort+0x630>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <HAL_DMA_Abort+0x634>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_DMA_Abort+0x58a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2c      	ldr	r2, [pc, #176]	; (8005f94 <HAL_DMA_Abort+0x638>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <HAL_DMA_Abort+0x58e>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <HAL_DMA_Abort+0x590>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ef8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00c      	beq.n	8005f1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40020010 	.word	0x40020010
 8005f3c:	40020028 	.word	0x40020028
 8005f40:	40020040 	.word	0x40020040
 8005f44:	40020058 	.word	0x40020058
 8005f48:	40020070 	.word	0x40020070
 8005f4c:	40020088 	.word	0x40020088
 8005f50:	400200a0 	.word	0x400200a0
 8005f54:	400200b8 	.word	0x400200b8
 8005f58:	40020410 	.word	0x40020410
 8005f5c:	40020428 	.word	0x40020428
 8005f60:	40020440 	.word	0x40020440
 8005f64:	40020458 	.word	0x40020458
 8005f68:	40020470 	.word	0x40020470
 8005f6c:	40020488 	.word	0x40020488
 8005f70:	400204a0 	.word	0x400204a0
 8005f74:	400204b8 	.word	0x400204b8
 8005f78:	58025408 	.word	0x58025408
 8005f7c:	5802541c 	.word	0x5802541c
 8005f80:	58025430 	.word	0x58025430
 8005f84:	58025444 	.word	0x58025444
 8005f88:	58025458 	.word	0x58025458
 8005f8c:	5802546c 	.word	0x5802546c
 8005f90:	58025480 	.word	0x58025480
 8005f94:	58025494 	.word	0x58025494

08005f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e237      	b.n	800641a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2280      	movs	r2, #128	; 0x80
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e22c      	b.n	800641a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a5c      	ldr	r2, [pc, #368]	; (8006138 <HAL_DMA_Abort_IT+0x1a0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d04a      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a5b      	ldr	r2, [pc, #364]	; (800613c <HAL_DMA_Abort_IT+0x1a4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d045      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a59      	ldr	r2, [pc, #356]	; (8006140 <HAL_DMA_Abort_IT+0x1a8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d040      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a58      	ldr	r2, [pc, #352]	; (8006144 <HAL_DMA_Abort_IT+0x1ac>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d03b      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a56      	ldr	r2, [pc, #344]	; (8006148 <HAL_DMA_Abort_IT+0x1b0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d036      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a55      	ldr	r2, [pc, #340]	; (800614c <HAL_DMA_Abort_IT+0x1b4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d031      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a53      	ldr	r2, [pc, #332]	; (8006150 <HAL_DMA_Abort_IT+0x1b8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d02c      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a52      	ldr	r2, [pc, #328]	; (8006154 <HAL_DMA_Abort_IT+0x1bc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d027      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a50      	ldr	r2, [pc, #320]	; (8006158 <HAL_DMA_Abort_IT+0x1c0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d022      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a4f      	ldr	r2, [pc, #316]	; (800615c <HAL_DMA_Abort_IT+0x1c4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d01d      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a4d      	ldr	r2, [pc, #308]	; (8006160 <HAL_DMA_Abort_IT+0x1c8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d018      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4c      	ldr	r2, [pc, #304]	; (8006164 <HAL_DMA_Abort_IT+0x1cc>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a4a      	ldr	r2, [pc, #296]	; (8006168 <HAL_DMA_Abort_IT+0x1d0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00e      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a49      	ldr	r2, [pc, #292]	; (800616c <HAL_DMA_Abort_IT+0x1d4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d009      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a47      	ldr	r2, [pc, #284]	; (8006170 <HAL_DMA_Abort_IT+0x1d8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_DMA_Abort_IT+0xc8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a46      	ldr	r2, [pc, #280]	; (8006174 <HAL_DMA_Abort_IT+0x1dc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d101      	bne.n	8006064 <HAL_DMA_Abort_IT+0xcc>
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <HAL_DMA_Abort_IT+0xce>
 8006064:	2300      	movs	r3, #0
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 8086 	beq.w	8006178 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2204      	movs	r2, #4
 8006070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a2f      	ldr	r2, [pc, #188]	; (8006138 <HAL_DMA_Abort_IT+0x1a0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d04a      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2e      	ldr	r2, [pc, #184]	; (800613c <HAL_DMA_Abort_IT+0x1a4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d045      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a2c      	ldr	r2, [pc, #176]	; (8006140 <HAL_DMA_Abort_IT+0x1a8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d040      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2b      	ldr	r2, [pc, #172]	; (8006144 <HAL_DMA_Abort_IT+0x1ac>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d03b      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a29      	ldr	r2, [pc, #164]	; (8006148 <HAL_DMA_Abort_IT+0x1b0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d036      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a28      	ldr	r2, [pc, #160]	; (800614c <HAL_DMA_Abort_IT+0x1b4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d031      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a26      	ldr	r2, [pc, #152]	; (8006150 <HAL_DMA_Abort_IT+0x1b8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02c      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a25      	ldr	r2, [pc, #148]	; (8006154 <HAL_DMA_Abort_IT+0x1bc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d027      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a23      	ldr	r2, [pc, #140]	; (8006158 <HAL_DMA_Abort_IT+0x1c0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d022      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a22      	ldr	r2, [pc, #136]	; (800615c <HAL_DMA_Abort_IT+0x1c4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01d      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a20      	ldr	r2, [pc, #128]	; (8006160 <HAL_DMA_Abort_IT+0x1c8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_DMA_Abort_IT+0x1cc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1d      	ldr	r2, [pc, #116]	; (8006168 <HAL_DMA_Abort_IT+0x1d0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1c      	ldr	r2, [pc, #112]	; (800616c <HAL_DMA_Abort_IT+0x1d4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1a      	ldr	r2, [pc, #104]	; (8006170 <HAL_DMA_Abort_IT+0x1d8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_DMA_Abort_IT+0x17c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a19      	ldr	r2, [pc, #100]	; (8006174 <HAL_DMA_Abort_IT+0x1dc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d108      	bne.n	8006126 <HAL_DMA_Abort_IT+0x18e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e178      	b.n	8006418 <HAL_DMA_Abort_IT+0x480>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	e16f      	b.n	8006418 <HAL_DMA_Abort_IT+0x480>
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 020e 	bic.w	r2, r2, #14
 8006186:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a6c      	ldr	r2, [pc, #432]	; (8006340 <HAL_DMA_Abort_IT+0x3a8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a6b      	ldr	r2, [pc, #428]	; (8006344 <HAL_DMA_Abort_IT+0x3ac>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a69      	ldr	r2, [pc, #420]	; (8006348 <HAL_DMA_Abort_IT+0x3b0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a68      	ldr	r2, [pc, #416]	; (800634c <HAL_DMA_Abort_IT+0x3b4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a66      	ldr	r2, [pc, #408]	; (8006350 <HAL_DMA_Abort_IT+0x3b8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a65      	ldr	r2, [pc, #404]	; (8006354 <HAL_DMA_Abort_IT+0x3bc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a63      	ldr	r2, [pc, #396]	; (8006358 <HAL_DMA_Abort_IT+0x3c0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a62      	ldr	r2, [pc, #392]	; (800635c <HAL_DMA_Abort_IT+0x3c4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a60      	ldr	r2, [pc, #384]	; (8006360 <HAL_DMA_Abort_IT+0x3c8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5f      	ldr	r2, [pc, #380]	; (8006364 <HAL_DMA_Abort_IT+0x3cc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a5d      	ldr	r2, [pc, #372]	; (8006368 <HAL_DMA_Abort_IT+0x3d0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a5c      	ldr	r2, [pc, #368]	; (800636c <HAL_DMA_Abort_IT+0x3d4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a5a      	ldr	r2, [pc, #360]	; (8006370 <HAL_DMA_Abort_IT+0x3d8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a59      	ldr	r2, [pc, #356]	; (8006374 <HAL_DMA_Abort_IT+0x3dc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a57      	ldr	r2, [pc, #348]	; (8006378 <HAL_DMA_Abort_IT+0x3e0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_DMA_Abort_IT+0x290>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a56      	ldr	r2, [pc, #344]	; (800637c <HAL_DMA_Abort_IT+0x3e4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <HAL_DMA_Abort_IT+0x2a2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e007      	b.n	800624a <HAL_DMA_Abort_IT+0x2b2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3c      	ldr	r2, [pc, #240]	; (8006340 <HAL_DMA_Abort_IT+0x3a8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d072      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a3a      	ldr	r2, [pc, #232]	; (8006344 <HAL_DMA_Abort_IT+0x3ac>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d06d      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a39      	ldr	r2, [pc, #228]	; (8006348 <HAL_DMA_Abort_IT+0x3b0>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d068      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a37      	ldr	r2, [pc, #220]	; (800634c <HAL_DMA_Abort_IT+0x3b4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d063      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a36      	ldr	r2, [pc, #216]	; (8006350 <HAL_DMA_Abort_IT+0x3b8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d05e      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a34      	ldr	r2, [pc, #208]	; (8006354 <HAL_DMA_Abort_IT+0x3bc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d059      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	; (8006358 <HAL_DMA_Abort_IT+0x3c0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d054      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a31      	ldr	r2, [pc, #196]	; (800635c <HAL_DMA_Abort_IT+0x3c4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d04f      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a30      	ldr	r2, [pc, #192]	; (8006360 <HAL_DMA_Abort_IT+0x3c8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d04a      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2e      	ldr	r2, [pc, #184]	; (8006364 <HAL_DMA_Abort_IT+0x3cc>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d045      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	; (8006368 <HAL_DMA_Abort_IT+0x3d0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d040      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2b      	ldr	r2, [pc, #172]	; (800636c <HAL_DMA_Abort_IT+0x3d4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d03b      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2a      	ldr	r2, [pc, #168]	; (8006370 <HAL_DMA_Abort_IT+0x3d8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d036      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a28      	ldr	r2, [pc, #160]	; (8006374 <HAL_DMA_Abort_IT+0x3dc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d031      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a27      	ldr	r2, [pc, #156]	; (8006378 <HAL_DMA_Abort_IT+0x3e0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d02c      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	; (800637c <HAL_DMA_Abort_IT+0x3e4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d027      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a24      	ldr	r2, [pc, #144]	; (8006380 <HAL_DMA_Abort_IT+0x3e8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d022      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a22      	ldr	r2, [pc, #136]	; (8006384 <HAL_DMA_Abort_IT+0x3ec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01d      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a21      	ldr	r2, [pc, #132]	; (8006388 <HAL_DMA_Abort_IT+0x3f0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d018      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a1f      	ldr	r2, [pc, #124]	; (800638c <HAL_DMA_Abort_IT+0x3f4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <HAL_DMA_Abort_IT+0x3f8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d00e      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a1c      	ldr	r2, [pc, #112]	; (8006394 <HAL_DMA_Abort_IT+0x3fc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d009      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <HAL_DMA_Abort_IT+0x400>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d004      	beq.n	800633a <HAL_DMA_Abort_IT+0x3a2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a19      	ldr	r2, [pc, #100]	; (800639c <HAL_DMA_Abort_IT+0x404>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d132      	bne.n	80063a0 <HAL_DMA_Abort_IT+0x408>
 800633a:	2301      	movs	r3, #1
 800633c:	e031      	b.n	80063a2 <HAL_DMA_Abort_IT+0x40a>
 800633e:	bf00      	nop
 8006340:	40020010 	.word	0x40020010
 8006344:	40020028 	.word	0x40020028
 8006348:	40020040 	.word	0x40020040
 800634c:	40020058 	.word	0x40020058
 8006350:	40020070 	.word	0x40020070
 8006354:	40020088 	.word	0x40020088
 8006358:	400200a0 	.word	0x400200a0
 800635c:	400200b8 	.word	0x400200b8
 8006360:	40020410 	.word	0x40020410
 8006364:	40020428 	.word	0x40020428
 8006368:	40020440 	.word	0x40020440
 800636c:	40020458 	.word	0x40020458
 8006370:	40020470 	.word	0x40020470
 8006374:	40020488 	.word	0x40020488
 8006378:	400204a0 	.word	0x400204a0
 800637c:	400204b8 	.word	0x400204b8
 8006380:	58025408 	.word	0x58025408
 8006384:	5802541c 	.word	0x5802541c
 8006388:	58025430 	.word	0x58025430
 800638c:	58025444 	.word	0x58025444
 8006390:	58025458 	.word	0x58025458
 8006394:	5802546c 	.word	0x5802546c
 8006398:	58025480 	.word	0x58025480
 800639c:	58025494 	.word	0x58025494
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d028      	beq.n	80063f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2201      	movs	r2, #1
 80063c6:	409a      	lsls	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006430:	4b67      	ldr	r3, [pc, #412]	; (80065d0 <HAL_DMA_IRQHandler+0x1ac>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a67      	ldr	r2, [pc, #412]	; (80065d4 <HAL_DMA_IRQHandler+0x1b0>)
 8006436:	fba2 2303 	umull	r2, r3, r2, r3
 800643a:	0a9b      	lsrs	r3, r3, #10
 800643c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006442:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a5f      	ldr	r2, [pc, #380]	; (80065d8 <HAL_DMA_IRQHandler+0x1b4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d04a      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a5d      	ldr	r2, [pc, #372]	; (80065dc <HAL_DMA_IRQHandler+0x1b8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d045      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a5c      	ldr	r2, [pc, #368]	; (80065e0 <HAL_DMA_IRQHandler+0x1bc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d040      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a5a      	ldr	r2, [pc, #360]	; (80065e4 <HAL_DMA_IRQHandler+0x1c0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d03b      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a59      	ldr	r2, [pc, #356]	; (80065e8 <HAL_DMA_IRQHandler+0x1c4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d036      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a57      	ldr	r2, [pc, #348]	; (80065ec <HAL_DMA_IRQHandler+0x1c8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d031      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a56      	ldr	r2, [pc, #344]	; (80065f0 <HAL_DMA_IRQHandler+0x1cc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d02c      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a54      	ldr	r2, [pc, #336]	; (80065f4 <HAL_DMA_IRQHandler+0x1d0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d027      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a53      	ldr	r2, [pc, #332]	; (80065f8 <HAL_DMA_IRQHandler+0x1d4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a51      	ldr	r2, [pc, #324]	; (80065fc <HAL_DMA_IRQHandler+0x1d8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01d      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a50      	ldr	r2, [pc, #320]	; (8006600 <HAL_DMA_IRQHandler+0x1dc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a4e      	ldr	r2, [pc, #312]	; (8006604 <HAL_DMA_IRQHandler+0x1e0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a4d      	ldr	r2, [pc, #308]	; (8006608 <HAL_DMA_IRQHandler+0x1e4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a4b      	ldr	r2, [pc, #300]	; (800660c <HAL_DMA_IRQHandler+0x1e8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a4a      	ldr	r2, [pc, #296]	; (8006610 <HAL_DMA_IRQHandler+0x1ec>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xd2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a48      	ldr	r2, [pc, #288]	; (8006614 <HAL_DMA_IRQHandler+0x1f0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d101      	bne.n	80064fa <HAL_DMA_IRQHandler+0xd6>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <HAL_DMA_IRQHandler+0xd8>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 842b 	beq.w	8006d58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2208      	movs	r2, #8
 800650c:	409a      	lsls	r2, r3
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80a2 	beq.w	800665c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2e      	ldr	r2, [pc, #184]	; (80065d8 <HAL_DMA_IRQHandler+0x1b4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d04a      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2d      	ldr	r2, [pc, #180]	; (80065dc <HAL_DMA_IRQHandler+0x1b8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d045      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2b      	ldr	r2, [pc, #172]	; (80065e0 <HAL_DMA_IRQHandler+0x1bc>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d040      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2a      	ldr	r2, [pc, #168]	; (80065e4 <HAL_DMA_IRQHandler+0x1c0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d03b      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <HAL_DMA_IRQHandler+0x1c4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d036      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a27      	ldr	r2, [pc, #156]	; (80065ec <HAL_DMA_IRQHandler+0x1c8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d031      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <HAL_DMA_IRQHandler+0x1cc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d02c      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <HAL_DMA_IRQHandler+0x1d0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d027      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a22      	ldr	r2, [pc, #136]	; (80065f8 <HAL_DMA_IRQHandler+0x1d4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d022      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a21      	ldr	r2, [pc, #132]	; (80065fc <HAL_DMA_IRQHandler+0x1d8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d01d      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <HAL_DMA_IRQHandler+0x1dc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d018      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <HAL_DMA_IRQHandler+0x1e0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <HAL_DMA_IRQHandler+0x1e4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1b      	ldr	r2, [pc, #108]	; (800660c <HAL_DMA_IRQHandler+0x1e8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_DMA_IRQHandler+0x1ec>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_DMA_IRQHandler+0x194>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a18      	ldr	r2, [pc, #96]	; (8006614 <HAL_DMA_IRQHandler+0x1f0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d12f      	bne.n	8006618 <HAL_DMA_IRQHandler+0x1f4>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bf14      	ite	ne
 80065c6:	2301      	movne	r3, #1
 80065c8:	2300      	moveq	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	e02e      	b.n	800662c <HAL_DMA_IRQHandler+0x208>
 80065ce:	bf00      	nop
 80065d0:	24000004 	.word	0x24000004
 80065d4:	1b4e81b5 	.word	0x1b4e81b5
 80065d8:	40020010 	.word	0x40020010
 80065dc:	40020028 	.word	0x40020028
 80065e0:	40020040 	.word	0x40020040
 80065e4:	40020058 	.word	0x40020058
 80065e8:	40020070 	.word	0x40020070
 80065ec:	40020088 	.word	0x40020088
 80065f0:	400200a0 	.word	0x400200a0
 80065f4:	400200b8 	.word	0x400200b8
 80065f8:	40020410 	.word	0x40020410
 80065fc:	40020428 	.word	0x40020428
 8006600:	40020440 	.word	0x40020440
 8006604:	40020458 	.word	0x40020458
 8006608:	40020470 	.word	0x40020470
 800660c:	40020488 	.word	0x40020488
 8006610:	400204a0 	.word	0x400204a0
 8006614:	400204b8 	.word	0x400204b8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	bf14      	ite	ne
 8006626:	2301      	movne	r3, #1
 8006628:	2300      	moveq	r3, #0
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d015      	beq.n	800665c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0204 	bic.w	r2, r2, #4
 800663e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2208      	movs	r2, #8
 800664a:	409a      	lsls	r2, r3
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006654:	f043 0201 	orr.w	r2, r3, #1
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	fa22 f303 	lsr.w	r3, r2, r3
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d06e      	beq.n	8006750 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a69      	ldr	r2, [pc, #420]	; (800681c <HAL_DMA_IRQHandler+0x3f8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d04a      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a67      	ldr	r2, [pc, #412]	; (8006820 <HAL_DMA_IRQHandler+0x3fc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d045      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a66      	ldr	r2, [pc, #408]	; (8006824 <HAL_DMA_IRQHandler+0x400>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d040      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a64      	ldr	r2, [pc, #400]	; (8006828 <HAL_DMA_IRQHandler+0x404>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d03b      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a63      	ldr	r2, [pc, #396]	; (800682c <HAL_DMA_IRQHandler+0x408>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d036      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a61      	ldr	r2, [pc, #388]	; (8006830 <HAL_DMA_IRQHandler+0x40c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d031      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a60      	ldr	r2, [pc, #384]	; (8006834 <HAL_DMA_IRQHandler+0x410>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d02c      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a5e      	ldr	r2, [pc, #376]	; (8006838 <HAL_DMA_IRQHandler+0x414>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d027      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a5d      	ldr	r2, [pc, #372]	; (800683c <HAL_DMA_IRQHandler+0x418>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d022      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a5b      	ldr	r2, [pc, #364]	; (8006840 <HAL_DMA_IRQHandler+0x41c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d01d      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a5a      	ldr	r2, [pc, #360]	; (8006844 <HAL_DMA_IRQHandler+0x420>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d018      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a58      	ldr	r2, [pc, #352]	; (8006848 <HAL_DMA_IRQHandler+0x424>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a57      	ldr	r2, [pc, #348]	; (800684c <HAL_DMA_IRQHandler+0x428>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00e      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a55      	ldr	r2, [pc, #340]	; (8006850 <HAL_DMA_IRQHandler+0x42c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d009      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a54      	ldr	r2, [pc, #336]	; (8006854 <HAL_DMA_IRQHandler+0x430>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d004      	beq.n	8006712 <HAL_DMA_IRQHandler+0x2ee>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a52      	ldr	r2, [pc, #328]	; (8006858 <HAL_DMA_IRQHandler+0x434>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d10a      	bne.n	8006728 <HAL_DMA_IRQHandler+0x304>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e003      	b.n	8006730 <HAL_DMA_IRQHandler+0x30c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00d      	beq.n	8006750 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	2201      	movs	r2, #1
 800673e:	409a      	lsls	r2, r3
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	f043 0202 	orr.w	r2, r3, #2
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	2204      	movs	r2, #4
 800675a:	409a      	lsls	r2, r3
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 808f 	beq.w	8006884 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2c      	ldr	r2, [pc, #176]	; (800681c <HAL_DMA_IRQHandler+0x3f8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d04a      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2a      	ldr	r2, [pc, #168]	; (8006820 <HAL_DMA_IRQHandler+0x3fc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d045      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a29      	ldr	r2, [pc, #164]	; (8006824 <HAL_DMA_IRQHandler+0x400>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d040      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a27      	ldr	r2, [pc, #156]	; (8006828 <HAL_DMA_IRQHandler+0x404>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d03b      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a26      	ldr	r2, [pc, #152]	; (800682c <HAL_DMA_IRQHandler+0x408>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d036      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a24      	ldr	r2, [pc, #144]	; (8006830 <HAL_DMA_IRQHandler+0x40c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d031      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a23      	ldr	r2, [pc, #140]	; (8006834 <HAL_DMA_IRQHandler+0x410>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d02c      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a21      	ldr	r2, [pc, #132]	; (8006838 <HAL_DMA_IRQHandler+0x414>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d027      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a20      	ldr	r2, [pc, #128]	; (800683c <HAL_DMA_IRQHandler+0x418>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d022      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <HAL_DMA_IRQHandler+0x41c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d01d      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <HAL_DMA_IRQHandler+0x420>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d018      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1b      	ldr	r2, [pc, #108]	; (8006848 <HAL_DMA_IRQHandler+0x424>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1a      	ldr	r2, [pc, #104]	; (800684c <HAL_DMA_IRQHandler+0x428>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00e      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a18      	ldr	r2, [pc, #96]	; (8006850 <HAL_DMA_IRQHandler+0x42c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a17      	ldr	r2, [pc, #92]	; (8006854 <HAL_DMA_IRQHandler+0x430>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_DMA_IRQHandler+0x3e2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a15      	ldr	r2, [pc, #84]	; (8006858 <HAL_DMA_IRQHandler+0x434>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d12a      	bne.n	800685c <HAL_DMA_IRQHandler+0x438>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	e023      	b.n	8006864 <HAL_DMA_IRQHandler+0x440>
 800681c:	40020010 	.word	0x40020010
 8006820:	40020028 	.word	0x40020028
 8006824:	40020040 	.word	0x40020040
 8006828:	40020058 	.word	0x40020058
 800682c:	40020070 	.word	0x40020070
 8006830:	40020088 	.word	0x40020088
 8006834:	400200a0 	.word	0x400200a0
 8006838:	400200b8 	.word	0x400200b8
 800683c:	40020410 	.word	0x40020410
 8006840:	40020428 	.word	0x40020428
 8006844:	40020440 	.word	0x40020440
 8006848:	40020458 	.word	0x40020458
 800684c:	40020470 	.word	0x40020470
 8006850:	40020488 	.word	0x40020488
 8006854:	400204a0 	.word	0x400204a0
 8006858:	400204b8 	.word	0x400204b8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2300      	movs	r3, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	2204      	movs	r2, #4
 8006872:	409a      	lsls	r2, r3
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687c:	f043 0204 	orr.w	r2, r3, #4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	2210      	movs	r2, #16
 800688e:	409a      	lsls	r2, r3
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80a6 	beq.w	80069e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a85      	ldr	r2, [pc, #532]	; (8006ab4 <HAL_DMA_IRQHandler+0x690>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d04a      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a83      	ldr	r2, [pc, #524]	; (8006ab8 <HAL_DMA_IRQHandler+0x694>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d045      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a82      	ldr	r2, [pc, #520]	; (8006abc <HAL_DMA_IRQHandler+0x698>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d040      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a80      	ldr	r2, [pc, #512]	; (8006ac0 <HAL_DMA_IRQHandler+0x69c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d03b      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a7f      	ldr	r2, [pc, #508]	; (8006ac4 <HAL_DMA_IRQHandler+0x6a0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d036      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a7d      	ldr	r2, [pc, #500]	; (8006ac8 <HAL_DMA_IRQHandler+0x6a4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d031      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a7c      	ldr	r2, [pc, #496]	; (8006acc <HAL_DMA_IRQHandler+0x6a8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d02c      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a7a      	ldr	r2, [pc, #488]	; (8006ad0 <HAL_DMA_IRQHandler+0x6ac>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d027      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a79      	ldr	r2, [pc, #484]	; (8006ad4 <HAL_DMA_IRQHandler+0x6b0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d022      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a77      	ldr	r2, [pc, #476]	; (8006ad8 <HAL_DMA_IRQHandler+0x6b4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01d      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a76      	ldr	r2, [pc, #472]	; (8006adc <HAL_DMA_IRQHandler+0x6b8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a74      	ldr	r2, [pc, #464]	; (8006ae0 <HAL_DMA_IRQHandler+0x6bc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a73      	ldr	r2, [pc, #460]	; (8006ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a71      	ldr	r2, [pc, #452]	; (8006ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a70      	ldr	r2, [pc, #448]	; (8006aec <HAL_DMA_IRQHandler+0x6c8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_DMA_IRQHandler+0x516>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a6e      	ldr	r2, [pc, #440]	; (8006af0 <HAL_DMA_IRQHandler+0x6cc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d10a      	bne.n	8006950 <HAL_DMA_IRQHandler+0x52c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e009      	b.n	8006964 <HAL_DMA_IRQHandler+0x540>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d03e      	beq.n	80069e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	2210      	movs	r2, #16
 8006972:	409a      	lsls	r2, r3
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d018      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d108      	bne.n	80069a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	d024      	beq.n	80069e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
 80069a4:	e01f      	b.n	80069e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01b      	beq.n	80069e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
 80069b6:	e016      	b.n	80069e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d107      	bne.n	80069d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0208 	bic.w	r2, r2, #8
 80069d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2220      	movs	r2, #32
 80069f0:	409a      	lsls	r2, r3
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	4013      	ands	r3, r2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 8110 	beq.w	8006c1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a2c      	ldr	r2, [pc, #176]	; (8006ab4 <HAL_DMA_IRQHandler+0x690>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d04a      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a2b      	ldr	r2, [pc, #172]	; (8006ab8 <HAL_DMA_IRQHandler+0x694>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d045      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a29      	ldr	r2, [pc, #164]	; (8006abc <HAL_DMA_IRQHandler+0x698>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d040      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a28      	ldr	r2, [pc, #160]	; (8006ac0 <HAL_DMA_IRQHandler+0x69c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d03b      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <HAL_DMA_IRQHandler+0x6a0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d036      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a25      	ldr	r2, [pc, #148]	; (8006ac8 <HAL_DMA_IRQHandler+0x6a4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d031      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a23      	ldr	r2, [pc, #140]	; (8006acc <HAL_DMA_IRQHandler+0x6a8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d02c      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a22      	ldr	r2, [pc, #136]	; (8006ad0 <HAL_DMA_IRQHandler+0x6ac>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d027      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a20      	ldr	r2, [pc, #128]	; (8006ad4 <HAL_DMA_IRQHandler+0x6b0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d022      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1f      	ldr	r2, [pc, #124]	; (8006ad8 <HAL_DMA_IRQHandler+0x6b4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d01d      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1d      	ldr	r2, [pc, #116]	; (8006adc <HAL_DMA_IRQHandler+0x6b8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d018      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ae0 <HAL_DMA_IRQHandler+0x6bc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <HAL_DMA_IRQHandler+0x6c0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00e      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a19      	ldr	r2, [pc, #100]	; (8006ae8 <HAL_DMA_IRQHandler+0x6c4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a17      	ldr	r2, [pc, #92]	; (8006aec <HAL_DMA_IRQHandler+0x6c8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x678>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <HAL_DMA_IRQHandler+0x6cc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d12b      	bne.n	8006af4 <HAL_DMA_IRQHandler+0x6d0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	bf14      	ite	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	2300      	moveq	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	e02a      	b.n	8006b08 <HAL_DMA_IRQHandler+0x6e4>
 8006ab2:	bf00      	nop
 8006ab4:	40020010 	.word	0x40020010
 8006ab8:	40020028 	.word	0x40020028
 8006abc:	40020040 	.word	0x40020040
 8006ac0:	40020058 	.word	0x40020058
 8006ac4:	40020070 	.word	0x40020070
 8006ac8:	40020088 	.word	0x40020088
 8006acc:	400200a0 	.word	0x400200a0
 8006ad0:	400200b8 	.word	0x400200b8
 8006ad4:	40020410 	.word	0x40020410
 8006ad8:	40020428 	.word	0x40020428
 8006adc:	40020440 	.word	0x40020440
 8006ae0:	40020458 	.word	0x40020458
 8006ae4:	40020470 	.word	0x40020470
 8006ae8:	40020488 	.word	0x40020488
 8006aec:	400204a0 	.word	0x400204a0
 8006af0:	400204b8 	.word	0x400204b8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf14      	ite	ne
 8006b02:	2301      	movne	r3, #1
 8006b04:	2300      	moveq	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8087 	beq.w	8006c1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2220      	movs	r2, #32
 8006b18:	409a      	lsls	r2, r3
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d139      	bne.n	8006b9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0216 	bic.w	r2, r2, #22
 8006b38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <HAL_DMA_IRQHandler+0x736>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0208 	bic.w	r2, r2, #8
 8006b68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	223f      	movs	r2, #63	; 0x3f
 8006b74:	409a      	lsls	r2, r3
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 834a 	beq.w	8007228 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
          }
          return;
 8006b9c:	e344      	b.n	8007228 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d018      	beq.n	8006bde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d108      	bne.n	8006bcc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d02c      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
 8006bca:	e027      	b.n	8006c1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d023      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
 8006bdc:	e01e      	b.n	8006c1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10f      	bne.n	8006c0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0210 	bic.w	r2, r2, #16
 8006bfa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8306 	beq.w	8007232 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8088 	beq.w	8006d44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2204      	movs	r2, #4
 8006c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a7a      	ldr	r2, [pc, #488]	; (8006e2c <HAL_DMA_IRQHandler+0xa08>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d04a      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a79      	ldr	r2, [pc, #484]	; (8006e30 <HAL_DMA_IRQHandler+0xa0c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d045      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a77      	ldr	r2, [pc, #476]	; (8006e34 <HAL_DMA_IRQHandler+0xa10>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d040      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a76      	ldr	r2, [pc, #472]	; (8006e38 <HAL_DMA_IRQHandler+0xa14>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d03b      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a74      	ldr	r2, [pc, #464]	; (8006e3c <HAL_DMA_IRQHandler+0xa18>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d036      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a73      	ldr	r2, [pc, #460]	; (8006e40 <HAL_DMA_IRQHandler+0xa1c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d031      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a71      	ldr	r2, [pc, #452]	; (8006e44 <HAL_DMA_IRQHandler+0xa20>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d02c      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a70      	ldr	r2, [pc, #448]	; (8006e48 <HAL_DMA_IRQHandler+0xa24>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d027      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a6e      	ldr	r2, [pc, #440]	; (8006e4c <HAL_DMA_IRQHandler+0xa28>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d022      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a6d      	ldr	r2, [pc, #436]	; (8006e50 <HAL_DMA_IRQHandler+0xa2c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d01d      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a6b      	ldr	r2, [pc, #428]	; (8006e54 <HAL_DMA_IRQHandler+0xa30>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d018      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6a      	ldr	r2, [pc, #424]	; (8006e58 <HAL_DMA_IRQHandler+0xa34>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d013      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a68      	ldr	r2, [pc, #416]	; (8006e5c <HAL_DMA_IRQHandler+0xa38>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d00e      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a67      	ldr	r2, [pc, #412]	; (8006e60 <HAL_DMA_IRQHandler+0xa3c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d009      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a65      	ldr	r2, [pc, #404]	; (8006e64 <HAL_DMA_IRQHandler+0xa40>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_DMA_IRQHandler+0x8b8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a64      	ldr	r2, [pc, #400]	; (8006e68 <HAL_DMA_IRQHandler+0xa44>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d108      	bne.n	8006cee <HAL_DMA_IRQHandler+0x8ca>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e007      	b.n	8006cfe <HAL_DMA_IRQHandler+0x8da>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d307      	bcc.n	8006d1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f2      	bne.n	8006cfe <HAL_DMA_IRQHandler+0x8da>
 8006d18:	e000      	b.n	8006d1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d1a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2203      	movs	r2, #3
 8006d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006d32:	e003      	b.n	8006d3c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8272 	beq.w	8007232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
 8006d56:	e26c      	b.n	8007232 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a43      	ldr	r2, [pc, #268]	; (8006e6c <HAL_DMA_IRQHandler+0xa48>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d022      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x984>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a42      	ldr	r2, [pc, #264]	; (8006e70 <HAL_DMA_IRQHandler+0xa4c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d01d      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x984>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a40      	ldr	r2, [pc, #256]	; (8006e74 <HAL_DMA_IRQHandler+0xa50>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d018      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x984>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a3f      	ldr	r2, [pc, #252]	; (8006e78 <HAL_DMA_IRQHandler+0xa54>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d013      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x984>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a3d      	ldr	r2, [pc, #244]	; (8006e7c <HAL_DMA_IRQHandler+0xa58>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00e      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x984>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a3c      	ldr	r2, [pc, #240]	; (8006e80 <HAL_DMA_IRQHandler+0xa5c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d009      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x984>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a3a      	ldr	r2, [pc, #232]	; (8006e84 <HAL_DMA_IRQHandler+0xa60>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <HAL_DMA_IRQHandler+0x984>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a39      	ldr	r2, [pc, #228]	; (8006e88 <HAL_DMA_IRQHandler+0xa64>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d101      	bne.n	8006dac <HAL_DMA_IRQHandler+0x988>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <HAL_DMA_IRQHandler+0x98a>
 8006dac:	2300      	movs	r3, #0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 823f 	beq.w	8007232 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80cd 	beq.w	8006f6c <HAL_DMA_IRQHandler+0xb48>
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 80c7 	beq.w	8006f6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	2204      	movs	r2, #4
 8006de8:	409a      	lsls	r2, r3
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d049      	beq.n	8006e8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8210 	beq.w	800722c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e14:	e20a      	b.n	800722c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8206 	beq.w	800722c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e28:	e200      	b.n	800722c <HAL_DMA_IRQHandler+0xe08>
 8006e2a:	bf00      	nop
 8006e2c:	40020010 	.word	0x40020010
 8006e30:	40020028 	.word	0x40020028
 8006e34:	40020040 	.word	0x40020040
 8006e38:	40020058 	.word	0x40020058
 8006e3c:	40020070 	.word	0x40020070
 8006e40:	40020088 	.word	0x40020088
 8006e44:	400200a0 	.word	0x400200a0
 8006e48:	400200b8 	.word	0x400200b8
 8006e4c:	40020410 	.word	0x40020410
 8006e50:	40020428 	.word	0x40020428
 8006e54:	40020440 	.word	0x40020440
 8006e58:	40020458 	.word	0x40020458
 8006e5c:	40020470 	.word	0x40020470
 8006e60:	40020488 	.word	0x40020488
 8006e64:	400204a0 	.word	0x400204a0
 8006e68:	400204b8 	.word	0x400204b8
 8006e6c:	58025408 	.word	0x58025408
 8006e70:	5802541c 	.word	0x5802541c
 8006e74:	58025430 	.word	0x58025430
 8006e78:	58025444 	.word	0x58025444
 8006e7c:	58025458 	.word	0x58025458
 8006e80:	5802546c 	.word	0x5802546c
 8006e84:	58025480 	.word	0x58025480
 8006e88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d160      	bne.n	8006f58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a7f      	ldr	r2, [pc, #508]	; (8007098 <HAL_DMA_IRQHandler+0xc74>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d04a      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a7d      	ldr	r2, [pc, #500]	; (800709c <HAL_DMA_IRQHandler+0xc78>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d045      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a7c      	ldr	r2, [pc, #496]	; (80070a0 <HAL_DMA_IRQHandler+0xc7c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d040      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a7a      	ldr	r2, [pc, #488]	; (80070a4 <HAL_DMA_IRQHandler+0xc80>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d03b      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a79      	ldr	r2, [pc, #484]	; (80070a8 <HAL_DMA_IRQHandler+0xc84>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d036      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a77      	ldr	r2, [pc, #476]	; (80070ac <HAL_DMA_IRQHandler+0xc88>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d031      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a76      	ldr	r2, [pc, #472]	; (80070b0 <HAL_DMA_IRQHandler+0xc8c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d02c      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a74      	ldr	r2, [pc, #464]	; (80070b4 <HAL_DMA_IRQHandler+0xc90>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d027      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a73      	ldr	r2, [pc, #460]	; (80070b8 <HAL_DMA_IRQHandler+0xc94>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d022      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a71      	ldr	r2, [pc, #452]	; (80070bc <HAL_DMA_IRQHandler+0xc98>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01d      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a70      	ldr	r2, [pc, #448]	; (80070c0 <HAL_DMA_IRQHandler+0xc9c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d018      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6e      	ldr	r2, [pc, #440]	; (80070c4 <HAL_DMA_IRQHandler+0xca0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6d      	ldr	r2, [pc, #436]	; (80070c8 <HAL_DMA_IRQHandler+0xca4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00e      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a6b      	ldr	r2, [pc, #428]	; (80070cc <HAL_DMA_IRQHandler+0xca8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6a      	ldr	r2, [pc, #424]	; (80070d0 <HAL_DMA_IRQHandler+0xcac>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_DMA_IRQHandler+0xb12>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a68      	ldr	r2, [pc, #416]	; (80070d4 <HAL_DMA_IRQHandler+0xcb0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d108      	bne.n	8006f48 <HAL_DMA_IRQHandler+0xb24>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0208 	bic.w	r2, r2, #8
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e007      	b.n	8006f58 <HAL_DMA_IRQHandler+0xb34>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0204 	bic.w	r2, r2, #4
 8006f56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 8165 	beq.w	800722c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f6a:	e15f      	b.n	800722c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f70:	f003 031f 	and.w	r3, r3, #31
 8006f74:	2202      	movs	r2, #2
 8006f76:	409a      	lsls	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 80c5 	beq.w	800710c <HAL_DMA_IRQHandler+0xce8>
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80bf 	beq.w	800710c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f92:	f003 031f 	and.w	r3, r3, #31
 8006f96:	2202      	movs	r2, #2
 8006f98:	409a      	lsls	r2, r3
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d018      	beq.n	8006fda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d109      	bne.n	8006fc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 813a 	beq.w	8007230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fc4:	e134      	b.n	8007230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8130 	beq.w	8007230 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd8:	e12a      	b.n	8007230 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 8089 	bne.w	80070f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2b      	ldr	r2, [pc, #172]	; (8007098 <HAL_DMA_IRQHandler+0xc74>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d04a      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a29      	ldr	r2, [pc, #164]	; (800709c <HAL_DMA_IRQHandler+0xc78>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d045      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a28      	ldr	r2, [pc, #160]	; (80070a0 <HAL_DMA_IRQHandler+0xc7c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d040      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a26      	ldr	r2, [pc, #152]	; (80070a4 <HAL_DMA_IRQHandler+0xc80>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d03b      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a25      	ldr	r2, [pc, #148]	; (80070a8 <HAL_DMA_IRQHandler+0xc84>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d036      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a23      	ldr	r2, [pc, #140]	; (80070ac <HAL_DMA_IRQHandler+0xc88>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d031      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a22      	ldr	r2, [pc, #136]	; (80070b0 <HAL_DMA_IRQHandler+0xc8c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d02c      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a20      	ldr	r2, [pc, #128]	; (80070b4 <HAL_DMA_IRQHandler+0xc90>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d027      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <HAL_DMA_IRQHandler+0xc94>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d022      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1d      	ldr	r2, [pc, #116]	; (80070bc <HAL_DMA_IRQHandler+0xc98>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d01d      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <HAL_DMA_IRQHandler+0xc9c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d018      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1a      	ldr	r2, [pc, #104]	; (80070c4 <HAL_DMA_IRQHandler+0xca0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <HAL_DMA_IRQHandler+0xca4>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00e      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a17      	ldr	r2, [pc, #92]	; (80070cc <HAL_DMA_IRQHandler+0xca8>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <HAL_DMA_IRQHandler+0xcac>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_DMA_IRQHandler+0xc62>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a14      	ldr	r2, [pc, #80]	; (80070d4 <HAL_DMA_IRQHandler+0xcb0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d128      	bne.n	80070d8 <HAL_DMA_IRQHandler+0xcb4>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0214 	bic.w	r2, r2, #20
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e027      	b.n	80070e8 <HAL_DMA_IRQHandler+0xcc4>
 8007098:	40020010 	.word	0x40020010
 800709c:	40020028 	.word	0x40020028
 80070a0:	40020040 	.word	0x40020040
 80070a4:	40020058 	.word	0x40020058
 80070a8:	40020070 	.word	0x40020070
 80070ac:	40020088 	.word	0x40020088
 80070b0:	400200a0 	.word	0x400200a0
 80070b4:	400200b8 	.word	0x400200b8
 80070b8:	40020410 	.word	0x40020410
 80070bc:	40020428 	.word	0x40020428
 80070c0:	40020440 	.word	0x40020440
 80070c4:	40020458 	.word	0x40020458
 80070c8:	40020470 	.word	0x40020470
 80070cc:	40020488 	.word	0x40020488
 80070d0:	400204a0 	.word	0x400204a0
 80070d4:	400204b8 	.word	0x400204b8
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 020a 	bic.w	r2, r2, #10
 80070e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8097 	beq.w	8007230 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800710a:	e091      	b.n	8007230 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007110:	f003 031f 	and.w	r3, r3, #31
 8007114:	2208      	movs	r2, #8
 8007116:	409a      	lsls	r2, r3
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	4013      	ands	r3, r2
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8088 	beq.w	8007232 <HAL_DMA_IRQHandler+0xe0e>
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 8082 	beq.w	8007232 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a41      	ldr	r2, [pc, #260]	; (8007238 <HAL_DMA_IRQHandler+0xe14>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d04a      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3f      	ldr	r2, [pc, #252]	; (800723c <HAL_DMA_IRQHandler+0xe18>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d045      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a3e      	ldr	r2, [pc, #248]	; (8007240 <HAL_DMA_IRQHandler+0xe1c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d040      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a3c      	ldr	r2, [pc, #240]	; (8007244 <HAL_DMA_IRQHandler+0xe20>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d03b      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a3b      	ldr	r2, [pc, #236]	; (8007248 <HAL_DMA_IRQHandler+0xe24>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d036      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a39      	ldr	r2, [pc, #228]	; (800724c <HAL_DMA_IRQHandler+0xe28>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d031      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a38      	ldr	r2, [pc, #224]	; (8007250 <HAL_DMA_IRQHandler+0xe2c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d02c      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a36      	ldr	r2, [pc, #216]	; (8007254 <HAL_DMA_IRQHandler+0xe30>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d027      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a35      	ldr	r2, [pc, #212]	; (8007258 <HAL_DMA_IRQHandler+0xe34>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a33      	ldr	r2, [pc, #204]	; (800725c <HAL_DMA_IRQHandler+0xe38>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01d      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a32      	ldr	r2, [pc, #200]	; (8007260 <HAL_DMA_IRQHandler+0xe3c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d018      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a30      	ldr	r2, [pc, #192]	; (8007264 <HAL_DMA_IRQHandler+0xe40>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2f      	ldr	r2, [pc, #188]	; (8007268 <HAL_DMA_IRQHandler+0xe44>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a2d      	ldr	r2, [pc, #180]	; (800726c <HAL_DMA_IRQHandler+0xe48>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a2c      	ldr	r2, [pc, #176]	; (8007270 <HAL_DMA_IRQHandler+0xe4c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_DMA_IRQHandler+0xdaa>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2a      	ldr	r2, [pc, #168]	; (8007274 <HAL_DMA_IRQHandler+0xe50>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d108      	bne.n	80071e0 <HAL_DMA_IRQHandler+0xdbc>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 021c 	bic.w	r2, r2, #28
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	e007      	b.n	80071f0 <HAL_DMA_IRQHandler+0xdcc>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 020e 	bic.w	r2, r2, #14
 80071ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	2201      	movs	r2, #1
 80071fa:	409a      	lsls	r2, r3
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d009      	beq.n	8007232 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
 8007226:	e004      	b.n	8007232 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007228:	bf00      	nop
 800722a:	e002      	b.n	8007232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800722c:	bf00      	nop
 800722e:	e000      	b.n	8007232 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007230:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007232:	3728      	adds	r7, #40	; 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40020010 	.word	0x40020010
 800723c:	40020028 	.word	0x40020028
 8007240:	40020040 	.word	0x40020040
 8007244:	40020058 	.word	0x40020058
 8007248:	40020070 	.word	0x40020070
 800724c:	40020088 	.word	0x40020088
 8007250:	400200a0 	.word	0x400200a0
 8007254:	400200b8 	.word	0x400200b8
 8007258:	40020410 	.word	0x40020410
 800725c:	40020428 	.word	0x40020428
 8007260:	40020440 	.word	0x40020440
 8007264:	40020458 	.word	0x40020458
 8007268:	40020470 	.word	0x40020470
 800726c:	40020488 	.word	0x40020488
 8007270:	400204a0 	.word	0x400204a0
 8007274:	400204b8 	.word	0x400204b8

08007278 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007290:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a7f      	ldr	r2, [pc, #508]	; (8007494 <DMA_SetConfig+0x21c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d072      	beq.n	8007382 <DMA_SetConfig+0x10a>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a7d      	ldr	r2, [pc, #500]	; (8007498 <DMA_SetConfig+0x220>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d06d      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a7c      	ldr	r2, [pc, #496]	; (800749c <DMA_SetConfig+0x224>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d068      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a7a      	ldr	r2, [pc, #488]	; (80074a0 <DMA_SetConfig+0x228>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d063      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a79      	ldr	r2, [pc, #484]	; (80074a4 <DMA_SetConfig+0x22c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d05e      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a77      	ldr	r2, [pc, #476]	; (80074a8 <DMA_SetConfig+0x230>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d059      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a76      	ldr	r2, [pc, #472]	; (80074ac <DMA_SetConfig+0x234>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d054      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a74      	ldr	r2, [pc, #464]	; (80074b0 <DMA_SetConfig+0x238>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d04f      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a73      	ldr	r2, [pc, #460]	; (80074b4 <DMA_SetConfig+0x23c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d04a      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a71      	ldr	r2, [pc, #452]	; (80074b8 <DMA_SetConfig+0x240>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d045      	beq.n	8007382 <DMA_SetConfig+0x10a>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a70      	ldr	r2, [pc, #448]	; (80074bc <DMA_SetConfig+0x244>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d040      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a6e      	ldr	r2, [pc, #440]	; (80074c0 <DMA_SetConfig+0x248>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d03b      	beq.n	8007382 <DMA_SetConfig+0x10a>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a6d      	ldr	r2, [pc, #436]	; (80074c4 <DMA_SetConfig+0x24c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d036      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a6b      	ldr	r2, [pc, #428]	; (80074c8 <DMA_SetConfig+0x250>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d031      	beq.n	8007382 <DMA_SetConfig+0x10a>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6a      	ldr	r2, [pc, #424]	; (80074cc <DMA_SetConfig+0x254>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d02c      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a68      	ldr	r2, [pc, #416]	; (80074d0 <DMA_SetConfig+0x258>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d027      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a67      	ldr	r2, [pc, #412]	; (80074d4 <DMA_SetConfig+0x25c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d022      	beq.n	8007382 <DMA_SetConfig+0x10a>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a65      	ldr	r2, [pc, #404]	; (80074d8 <DMA_SetConfig+0x260>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01d      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a64      	ldr	r2, [pc, #400]	; (80074dc <DMA_SetConfig+0x264>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d018      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a62      	ldr	r2, [pc, #392]	; (80074e0 <DMA_SetConfig+0x268>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <DMA_SetConfig+0x10a>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a61      	ldr	r2, [pc, #388]	; (80074e4 <DMA_SetConfig+0x26c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00e      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5f      	ldr	r2, [pc, #380]	; (80074e8 <DMA_SetConfig+0x270>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d009      	beq.n	8007382 <DMA_SetConfig+0x10a>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a5e      	ldr	r2, [pc, #376]	; (80074ec <DMA_SetConfig+0x274>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d004      	beq.n	8007382 <DMA_SetConfig+0x10a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a5c      	ldr	r2, [pc, #368]	; (80074f0 <DMA_SetConfig+0x278>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d101      	bne.n	8007386 <DMA_SetConfig+0x10e>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <DMA_SetConfig+0x110>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00d      	beq.n	80073a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007394:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d004      	beq.n	80073a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a39      	ldr	r2, [pc, #228]	; (8007494 <DMA_SetConfig+0x21c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d04a      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a38      	ldr	r2, [pc, #224]	; (8007498 <DMA_SetConfig+0x220>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d045      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a36      	ldr	r2, [pc, #216]	; (800749c <DMA_SetConfig+0x224>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d040      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a35      	ldr	r2, [pc, #212]	; (80074a0 <DMA_SetConfig+0x228>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d03b      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a33      	ldr	r2, [pc, #204]	; (80074a4 <DMA_SetConfig+0x22c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d036      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a32      	ldr	r2, [pc, #200]	; (80074a8 <DMA_SetConfig+0x230>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d031      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a30      	ldr	r2, [pc, #192]	; (80074ac <DMA_SetConfig+0x234>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d02c      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <DMA_SetConfig+0x238>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d027      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <DMA_SetConfig+0x23c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d022      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2c      	ldr	r2, [pc, #176]	; (80074b8 <DMA_SetConfig+0x240>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d01d      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <DMA_SetConfig+0x244>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a29      	ldr	r2, [pc, #164]	; (80074c0 <DMA_SetConfig+0x248>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a27      	ldr	r2, [pc, #156]	; (80074c4 <DMA_SetConfig+0x24c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a26      	ldr	r2, [pc, #152]	; (80074c8 <DMA_SetConfig+0x250>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a24      	ldr	r2, [pc, #144]	; (80074cc <DMA_SetConfig+0x254>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <DMA_SetConfig+0x1d0>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a23      	ldr	r2, [pc, #140]	; (80074d0 <DMA_SetConfig+0x258>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d101      	bne.n	800744c <DMA_SetConfig+0x1d4>
 8007448:	2301      	movs	r3, #1
 800744a:	e000      	b.n	800744e <DMA_SetConfig+0x1d6>
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d059      	beq.n	8007506 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	223f      	movs	r2, #63	; 0x3f
 800745c:	409a      	lsls	r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007470:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d138      	bne.n	80074f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007492:	e086      	b.n	80075a2 <DMA_SetConfig+0x32a>
 8007494:	40020010 	.word	0x40020010
 8007498:	40020028 	.word	0x40020028
 800749c:	40020040 	.word	0x40020040
 80074a0:	40020058 	.word	0x40020058
 80074a4:	40020070 	.word	0x40020070
 80074a8:	40020088 	.word	0x40020088
 80074ac:	400200a0 	.word	0x400200a0
 80074b0:	400200b8 	.word	0x400200b8
 80074b4:	40020410 	.word	0x40020410
 80074b8:	40020428 	.word	0x40020428
 80074bc:	40020440 	.word	0x40020440
 80074c0:	40020458 	.word	0x40020458
 80074c4:	40020470 	.word	0x40020470
 80074c8:	40020488 	.word	0x40020488
 80074cc:	400204a0 	.word	0x400204a0
 80074d0:	400204b8 	.word	0x400204b8
 80074d4:	58025408 	.word	0x58025408
 80074d8:	5802541c 	.word	0x5802541c
 80074dc:	58025430 	.word	0x58025430
 80074e0:	58025444 	.word	0x58025444
 80074e4:	58025458 	.word	0x58025458
 80074e8:	5802546c 	.word	0x5802546c
 80074ec:	58025480 	.word	0x58025480
 80074f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]
}
 8007504:	e04d      	b.n	80075a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <DMA_SetConfig+0x338>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d022      	beq.n	8007556 <DMA_SetConfig+0x2de>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a27      	ldr	r2, [pc, #156]	; (80075b4 <DMA_SetConfig+0x33c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01d      	beq.n	8007556 <DMA_SetConfig+0x2de>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a26      	ldr	r2, [pc, #152]	; (80075b8 <DMA_SetConfig+0x340>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d018      	beq.n	8007556 <DMA_SetConfig+0x2de>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a24      	ldr	r2, [pc, #144]	; (80075bc <DMA_SetConfig+0x344>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <DMA_SetConfig+0x2de>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a23      	ldr	r2, [pc, #140]	; (80075c0 <DMA_SetConfig+0x348>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00e      	beq.n	8007556 <DMA_SetConfig+0x2de>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a21      	ldr	r2, [pc, #132]	; (80075c4 <DMA_SetConfig+0x34c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <DMA_SetConfig+0x2de>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a20      	ldr	r2, [pc, #128]	; (80075c8 <DMA_SetConfig+0x350>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <DMA_SetConfig+0x2de>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1e      	ldr	r2, [pc, #120]	; (80075cc <DMA_SetConfig+0x354>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d101      	bne.n	800755a <DMA_SetConfig+0x2e2>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <DMA_SetConfig+0x2e4>
 800755a:	2300      	movs	r3, #0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d020      	beq.n	80075a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007564:	f003 031f 	and.w	r3, r3, #31
 8007568:	2201      	movs	r2, #1
 800756a:	409a      	lsls	r2, r3
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d108      	bne.n	8007592 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	60da      	str	r2, [r3, #12]
}
 8007590:	e007      	b.n	80075a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	60da      	str	r2, [r3, #12]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	58025408 	.word	0x58025408
 80075b4:	5802541c 	.word	0x5802541c
 80075b8:	58025430 	.word	0x58025430
 80075bc:	58025444 	.word	0x58025444
 80075c0:	58025458 	.word	0x58025458
 80075c4:	5802546c 	.word	0x5802546c
 80075c8:	58025480 	.word	0x58025480
 80075cc:	58025494 	.word	0x58025494

080075d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a42      	ldr	r2, [pc, #264]	; (80076e8 <DMA_CalcBaseAndBitshift+0x118>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d04a      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a41      	ldr	r2, [pc, #260]	; (80076ec <DMA_CalcBaseAndBitshift+0x11c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d045      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a3f      	ldr	r2, [pc, #252]	; (80076f0 <DMA_CalcBaseAndBitshift+0x120>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d040      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a3e      	ldr	r2, [pc, #248]	; (80076f4 <DMA_CalcBaseAndBitshift+0x124>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d03b      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a3c      	ldr	r2, [pc, #240]	; (80076f8 <DMA_CalcBaseAndBitshift+0x128>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d036      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a3b      	ldr	r2, [pc, #236]	; (80076fc <DMA_CalcBaseAndBitshift+0x12c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d031      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a39      	ldr	r2, [pc, #228]	; (8007700 <DMA_CalcBaseAndBitshift+0x130>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d02c      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a38      	ldr	r2, [pc, #224]	; (8007704 <DMA_CalcBaseAndBitshift+0x134>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d027      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a36      	ldr	r2, [pc, #216]	; (8007708 <DMA_CalcBaseAndBitshift+0x138>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d022      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a35      	ldr	r2, [pc, #212]	; (800770c <DMA_CalcBaseAndBitshift+0x13c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d01d      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a33      	ldr	r2, [pc, #204]	; (8007710 <DMA_CalcBaseAndBitshift+0x140>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a32      	ldr	r2, [pc, #200]	; (8007714 <DMA_CalcBaseAndBitshift+0x144>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a30      	ldr	r2, [pc, #192]	; (8007718 <DMA_CalcBaseAndBitshift+0x148>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a2f      	ldr	r2, [pc, #188]	; (800771c <DMA_CalcBaseAndBitshift+0x14c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2d      	ldr	r2, [pc, #180]	; (8007720 <DMA_CalcBaseAndBitshift+0x150>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <DMA_CalcBaseAndBitshift+0xa8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2c      	ldr	r2, [pc, #176]	; (8007724 <DMA_CalcBaseAndBitshift+0x154>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d101      	bne.n	800767c <DMA_CalcBaseAndBitshift+0xac>
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <DMA_CalcBaseAndBitshift+0xae>
 800767c:	2300      	movs	r3, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d024      	beq.n	80076cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	3b10      	subs	r3, #16
 800768a:	4a27      	ldr	r2, [pc, #156]	; (8007728 <DMA_CalcBaseAndBitshift+0x158>)
 800768c:	fba2 2303 	umull	r2, r3, r2, r3
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	4a24      	ldr	r2, [pc, #144]	; (800772c <DMA_CalcBaseAndBitshift+0x15c>)
 800769c:	5cd3      	ldrb	r3, [r2, r3]
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d908      	bls.n	80076bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	4b1f      	ldr	r3, [pc, #124]	; (8007730 <DMA_CalcBaseAndBitshift+0x160>)
 80076b2:	4013      	ands	r3, r2
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	659a      	str	r2, [r3, #88]	; 0x58
 80076ba:	e00d      	b.n	80076d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <DMA_CalcBaseAndBitshift+0x160>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6593      	str	r3, [r2, #88]	; 0x58
 80076ca:	e005      	b.n	80076d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	40020010 	.word	0x40020010
 80076ec:	40020028 	.word	0x40020028
 80076f0:	40020040 	.word	0x40020040
 80076f4:	40020058 	.word	0x40020058
 80076f8:	40020070 	.word	0x40020070
 80076fc:	40020088 	.word	0x40020088
 8007700:	400200a0 	.word	0x400200a0
 8007704:	400200b8 	.word	0x400200b8
 8007708:	40020410 	.word	0x40020410
 800770c:	40020428 	.word	0x40020428
 8007710:	40020440 	.word	0x40020440
 8007714:	40020458 	.word	0x40020458
 8007718:	40020470 	.word	0x40020470
 800771c:	40020488 	.word	0x40020488
 8007720:	400204a0 	.word	0x400204a0
 8007724:	400204b8 	.word	0x400204b8
 8007728:	aaaaaaab 	.word	0xaaaaaaab
 800772c:	0800e21c 	.word	0x0800e21c
 8007730:	fffffc00 	.word	0xfffffc00

08007734 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d120      	bne.n	800778a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	2b03      	cmp	r3, #3
 800774e:	d858      	bhi.n	8007802 <DMA_CheckFifoParam+0xce>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <DMA_CheckFifoParam+0x24>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007769 	.word	0x08007769
 800775c:	0800777b 	.word	0x0800777b
 8007760:	08007769 	.word	0x08007769
 8007764:	08007803 	.word	0x08007803
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d048      	beq.n	8007806 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007778:	e045      	b.n	8007806 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007782:	d142      	bne.n	800780a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007788:	e03f      	b.n	800780a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007792:	d123      	bne.n	80077dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	2b03      	cmp	r3, #3
 800779a:	d838      	bhi.n	800780e <DMA_CheckFifoParam+0xda>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <DMA_CheckFifoParam+0x70>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077b5 	.word	0x080077b5
 80077a8:	080077bb 	.word	0x080077bb
 80077ac:	080077b5 	.word	0x080077b5
 80077b0:	080077cd 	.word	0x080077cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
        break;
 80077b8:	e030      	b.n	800781c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d025      	beq.n	8007812 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077ca:	e022      	b.n	8007812 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077d4:	d11f      	bne.n	8007816 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077da:	e01c      	b.n	8007816 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d902      	bls.n	80077ea <DMA_CheckFifoParam+0xb6>
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d003      	beq.n	80077f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80077e8:	e018      	b.n	800781c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
        break;
 80077ee:	e015      	b.n	800781c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00e      	beq.n	800781a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007800:	e00b      	b.n	800781a <DMA_CheckFifoParam+0xe6>
        break;
 8007802:	bf00      	nop
 8007804:	e00a      	b.n	800781c <DMA_CheckFifoParam+0xe8>
        break;
 8007806:	bf00      	nop
 8007808:	e008      	b.n	800781c <DMA_CheckFifoParam+0xe8>
        break;
 800780a:	bf00      	nop
 800780c:	e006      	b.n	800781c <DMA_CheckFifoParam+0xe8>
        break;
 800780e:	bf00      	nop
 8007810:	e004      	b.n	800781c <DMA_CheckFifoParam+0xe8>
        break;
 8007812:	bf00      	nop
 8007814:	e002      	b.n	800781c <DMA_CheckFifoParam+0xe8>
        break;
 8007816:	bf00      	nop
 8007818:	e000      	b.n	800781c <DMA_CheckFifoParam+0xe8>
    break;
 800781a:	bf00      	nop
    }
  }

  return status;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop

0800782c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a38      	ldr	r2, [pc, #224]	; (8007920 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d022      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a36      	ldr	r2, [pc, #216]	; (8007924 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d01d      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a35      	ldr	r2, [pc, #212]	; (8007928 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d018      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a33      	ldr	r2, [pc, #204]	; (800792c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d013      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a32      	ldr	r2, [pc, #200]	; (8007930 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00e      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a30      	ldr	r2, [pc, #192]	; (8007934 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d009      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a2f      	ldr	r2, [pc, #188]	; (8007938 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d004      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a2d      	ldr	r2, [pc, #180]	; (800793c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d101      	bne.n	800788e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800788a:	2301      	movs	r3, #1
 800788c:	e000      	b.n	8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800788e:	2300      	movs	r3, #0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01a      	beq.n	80078ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	3b08      	subs	r3, #8
 800789c:	4a28      	ldr	r2, [pc, #160]	; (8007940 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	091b      	lsrs	r3, r3, #4
 80078a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4b26      	ldr	r3, [pc, #152]	; (8007944 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a24      	ldr	r2, [pc, #144]	; (8007948 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80078b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2201      	movs	r2, #1
 80078c2:	409a      	lsls	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80078c8:	e024      	b.n	8007914 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	3b10      	subs	r3, #16
 80078d2:	4a1e      	ldr	r2, [pc, #120]	; (800794c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80078d4:	fba2 2303 	umull	r2, r3, r2, r3
 80078d8:	091b      	lsrs	r3, r3, #4
 80078da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4a1c      	ldr	r2, [pc, #112]	; (8007950 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d806      	bhi.n	80078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4a1b      	ldr	r2, [pc, #108]	; (8007954 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d902      	bls.n	80078f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3308      	adds	r3, #8
 80078f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	4b18      	ldr	r3, [pc, #96]	; (8007958 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a16      	ldr	r2, [pc, #88]	; (800795c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007904:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2201      	movs	r2, #1
 800790e:	409a      	lsls	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	58025408 	.word	0x58025408
 8007924:	5802541c 	.word	0x5802541c
 8007928:	58025430 	.word	0x58025430
 800792c:	58025444 	.word	0x58025444
 8007930:	58025458 	.word	0x58025458
 8007934:	5802546c 	.word	0x5802546c
 8007938:	58025480 	.word	0x58025480
 800793c:	58025494 	.word	0x58025494
 8007940:	cccccccd 	.word	0xcccccccd
 8007944:	16009600 	.word	0x16009600
 8007948:	58025880 	.word	0x58025880
 800794c:	aaaaaaab 	.word	0xaaaaaaab
 8007950:	400204b8 	.word	0x400204b8
 8007954:	4002040f 	.word	0x4002040f
 8007958:	10008200 	.word	0x10008200
 800795c:	40020880 	.word	0x40020880

08007960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d04a      	beq.n	8007a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b08      	cmp	r3, #8
 800797a:	d847      	bhi.n	8007a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a25      	ldr	r2, [pc, #148]	; (8007a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d022      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a24      	ldr	r2, [pc, #144]	; (8007a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d01d      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a22      	ldr	r2, [pc, #136]	; (8007a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d018      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a21      	ldr	r2, [pc, #132]	; (8007a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d013      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1f      	ldr	r2, [pc, #124]	; (8007a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00e      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1e      	ldr	r2, [pc, #120]	; (8007a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d009      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1c      	ldr	r2, [pc, #112]	; (8007a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d004      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d101      	bne.n	80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80079d0:	2300      	movs	r3, #0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80079e8:	671a      	str	r2, [r3, #112]	; 0x70
 80079ea:	e009      	b.n	8007a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80079f0:	4413      	add	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a11      	ldr	r2, [pc, #68]	; (8007a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	2201      	movs	r2, #1
 8007a06:	409a      	lsls	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	58025408 	.word	0x58025408
 8007a1c:	5802541c 	.word	0x5802541c
 8007a20:	58025430 	.word	0x58025430
 8007a24:	58025444 	.word	0x58025444
 8007a28:	58025458 	.word	0x58025458
 8007a2c:	5802546c 	.word	0x5802546c
 8007a30:	58025480 	.word	0x58025480
 8007a34:	58025494 	.word	0x58025494
 8007a38:	1600963f 	.word	0x1600963f
 8007a3c:	58025940 	.word	0x58025940
 8007a40:	1000823f 	.word	0x1000823f
 8007a44:	40020940 	.word	0x40020940

08007a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	; 0x24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a56:	4b86      	ldr	r3, [pc, #536]	; (8007c70 <HAL_GPIO_Init+0x228>)
 8007a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a5a:	e18c      	b.n	8007d76 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	2101      	movs	r1, #1
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	fa01 f303 	lsl.w	r3, r1, r3
 8007a68:	4013      	ands	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 817e 	beq.w	8007d70 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d005      	beq.n	8007a8c <HAL_GPIO_Init+0x44>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 0303 	and.w	r3, r3, #3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d130      	bne.n	8007aee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	2203      	movs	r2, #3
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43db      	mvns	r3, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	091b      	lsrs	r3, r3, #4
 8007ad8:	f003 0201 	and.w	r2, r3, #1
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d017      	beq.n	8007b2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	2203      	movs	r2, #3
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	43db      	mvns	r3, r3
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d123      	bne.n	8007b7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	08da      	lsrs	r2, r3, #3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3208      	adds	r2, #8
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	220f      	movs	r2, #15
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43db      	mvns	r3, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4013      	ands	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	08da      	lsrs	r2, r3, #3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3208      	adds	r2, #8
 8007b78:	69b9      	ldr	r1, [r7, #24]
 8007b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	2203      	movs	r2, #3
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4013      	ands	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f003 0203 	and.w	r2, r3, #3
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80d8 	beq.w	8007d70 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bc0:	4b2c      	ldr	r3, [pc, #176]	; (8007c74 <HAL_GPIO_Init+0x22c>)
 8007bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bc6:	4a2b      	ldr	r2, [pc, #172]	; (8007c74 <HAL_GPIO_Init+0x22c>)
 8007bc8:	f043 0302 	orr.w	r3, r3, #2
 8007bcc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007bd0:	4b28      	ldr	r3, [pc, #160]	; (8007c74 <HAL_GPIO_Init+0x22c>)
 8007bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007bde:	4a26      	ldr	r2, [pc, #152]	; (8007c78 <HAL_GPIO_Init+0x230>)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	089b      	lsrs	r3, r3, #2
 8007be4:	3302      	adds	r3, #2
 8007be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	220f      	movs	r2, #15
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a1d      	ldr	r2, [pc, #116]	; (8007c7c <HAL_GPIO_Init+0x234>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d04a      	beq.n	8007ca0 <HAL_GPIO_Init+0x258>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a1c      	ldr	r2, [pc, #112]	; (8007c80 <HAL_GPIO_Init+0x238>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d02b      	beq.n	8007c6a <HAL_GPIO_Init+0x222>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <HAL_GPIO_Init+0x23c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d025      	beq.n	8007c66 <HAL_GPIO_Init+0x21e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1a      	ldr	r2, [pc, #104]	; (8007c88 <HAL_GPIO_Init+0x240>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01f      	beq.n	8007c62 <HAL_GPIO_Init+0x21a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <HAL_GPIO_Init+0x244>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d019      	beq.n	8007c5e <HAL_GPIO_Init+0x216>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <HAL_GPIO_Init+0x248>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <HAL_GPIO_Init+0x212>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <HAL_GPIO_Init+0x24c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00d      	beq.n	8007c56 <HAL_GPIO_Init+0x20e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a16      	ldr	r2, [pc, #88]	; (8007c98 <HAL_GPIO_Init+0x250>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d007      	beq.n	8007c52 <HAL_GPIO_Init+0x20a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <HAL_GPIO_Init+0x254>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <HAL_GPIO_Init+0x206>
 8007c4a:	2309      	movs	r3, #9
 8007c4c:	e029      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c4e:	230a      	movs	r3, #10
 8007c50:	e027      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c52:	2307      	movs	r3, #7
 8007c54:	e025      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c56:	2306      	movs	r3, #6
 8007c58:	e023      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c5a:	2305      	movs	r3, #5
 8007c5c:	e021      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c5e:	2304      	movs	r3, #4
 8007c60:	e01f      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c62:	2303      	movs	r3, #3
 8007c64:	e01d      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e01b      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e019      	b.n	8007ca2 <HAL_GPIO_Init+0x25a>
 8007c6e:	bf00      	nop
 8007c70:	58000080 	.word	0x58000080
 8007c74:	58024400 	.word	0x58024400
 8007c78:	58000400 	.word	0x58000400
 8007c7c:	58020000 	.word	0x58020000
 8007c80:	58020400 	.word	0x58020400
 8007c84:	58020800 	.word	0x58020800
 8007c88:	58020c00 	.word	0x58020c00
 8007c8c:	58021000 	.word	0x58021000
 8007c90:	58021400 	.word	0x58021400
 8007c94:	58021800 	.word	0x58021800
 8007c98:	58021c00 	.word	0x58021c00
 8007c9c:	58022400 	.word	0x58022400
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	f002 0203 	and.w	r2, r2, #3
 8007ca8:	0092      	lsls	r2, r2, #2
 8007caa:	4093      	lsls	r3, r2
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cb2:	4938      	ldr	r1, [pc, #224]	; (8007d94 <HAL_GPIO_Init+0x34c>)
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	089b      	lsrs	r3, r3, #2
 8007cb8:	3302      	adds	r3, #2
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	43db      	mvns	r3, r3
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4013      	ands	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	3301      	adds	r3, #1
 8007d74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f47f ae6b 	bne.w	8007a5c <HAL_GPIO_Init+0x14>
  }
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	3724      	adds	r7, #36	; 0x24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	58000400 	.word	0x58000400

08007d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	807b      	strh	r3, [r7, #2]
 8007da4:	4613      	mov	r3, r2
 8007da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007da8:	787b      	ldrb	r3, [r7, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dae:	887a      	ldrh	r2, [r7, #2]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007db4:	e003      	b.n	8007dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007db6:	887b      	ldrh	r3, [r7, #2]
 8007db8:	041a      	lsls	r2, r3, #16
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	619a      	str	r2, [r3, #24]
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007dd4:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <HAL_PWREx_ConfigSupply+0x70>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d00a      	beq.n	8007df6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007de0:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <HAL_PWREx_ConfigSupply+0x70>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d001      	beq.n	8007df2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e01f      	b.n	8007e32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	e01d      	b.n	8007e32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <HAL_PWREx_ConfigSupply+0x70>)
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f023 0207 	bic.w	r2, r3, #7
 8007dfe:	490f      	ldr	r1, [pc, #60]	; (8007e3c <HAL_PWREx_ConfigSupply+0x70>)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e06:	f7fc fec9 	bl	8004b9c <HAL_GetTick>
 8007e0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e0c:	e009      	b.n	8007e22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e0e:	f7fc fec5 	bl	8004b9c <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e1c:	d901      	bls.n	8007e22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e007      	b.n	8007e32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e22:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <HAL_PWREx_ConfigSupply+0x70>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e2e:	d1ee      	bne.n	8007e0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	58024800 	.word	0x58024800

08007e40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08c      	sub	sp, #48	; 0x30
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e39d      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 8087 	beq.w	8007f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e60:	4b88      	ldr	r3, [pc, #544]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e6a:	4b86      	ldr	r3, [pc, #536]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	2b10      	cmp	r3, #16
 8007e74:	d007      	beq.n	8007e86 <HAL_RCC_OscConfig+0x46>
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	2b18      	cmp	r3, #24
 8007e7a:	d110      	bne.n	8007e9e <HAL_RCC_OscConfig+0x5e>
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d10b      	bne.n	8007e9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e86:	4b7f      	ldr	r3, [pc, #508]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d06c      	beq.n	8007f6c <HAL_RCC_OscConfig+0x12c>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d168      	bne.n	8007f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e377      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea6:	d106      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x76>
 8007ea8:	4b76      	ldr	r3, [pc, #472]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a75      	ldr	r2, [pc, #468]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	e02e      	b.n	8007f14 <HAL_RCC_OscConfig+0xd4>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10c      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x98>
 8007ebe:	4b71      	ldr	r3, [pc, #452]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a70      	ldr	r2, [pc, #448]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	4b6e      	ldr	r3, [pc, #440]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a6d      	ldr	r2, [pc, #436]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	e01d      	b.n	8007f14 <HAL_RCC_OscConfig+0xd4>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ee0:	d10c      	bne.n	8007efc <HAL_RCC_OscConfig+0xbc>
 8007ee2:	4b68      	ldr	r3, [pc, #416]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a67      	ldr	r2, [pc, #412]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	4b65      	ldr	r3, [pc, #404]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a64      	ldr	r2, [pc, #400]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	e00b      	b.n	8007f14 <HAL_RCC_OscConfig+0xd4>
 8007efc:	4b61      	ldr	r3, [pc, #388]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a60      	ldr	r2, [pc, #384]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	4b5e      	ldr	r3, [pc, #376]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a5d      	ldr	r2, [pc, #372]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d013      	beq.n	8007f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1c:	f7fc fe3e 	bl	8004b9c <HAL_GetTick>
 8007f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f22:	e008      	b.n	8007f36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f24:	f7fc fe3a 	bl	8004b9c <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b64      	cmp	r3, #100	; 0x64
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e32b      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f36:	4b53      	ldr	r3, [pc, #332]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <HAL_RCC_OscConfig+0xe4>
 8007f42:	e014      	b.n	8007f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f44:	f7fc fe2a 	bl	8004b9c <HAL_GetTick>
 8007f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f4a:	e008      	b.n	8007f5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f4c:	f7fc fe26 	bl	8004b9c <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b64      	cmp	r3, #100	; 0x64
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e317      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f5e:	4b49      	ldr	r3, [pc, #292]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1f0      	bne.n	8007f4c <HAL_RCC_OscConfig+0x10c>
 8007f6a:	e000      	b.n	8007f6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0302 	and.w	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 808c 	beq.w	8008094 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f7c:	4b41      	ldr	r3, [pc, #260]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f86:	4b3f      	ldr	r3, [pc, #252]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x162>
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	2b18      	cmp	r3, #24
 8007f96:	d137      	bne.n	8008008 <HAL_RCC_OscConfig+0x1c8>
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d132      	bne.n	8008008 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa2:	4b38      	ldr	r3, [pc, #224]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <HAL_RCC_OscConfig+0x17a>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e2e9      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fba:	4b32      	ldr	r3, [pc, #200]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f023 0219 	bic.w	r2, r3, #25
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	492f      	ldr	r1, [pc, #188]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fcc:	f7fc fde6 	bl	8004b9c <HAL_GetTick>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fd4:	f7fc fde2 	bl	8004b9c <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e2d3      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fe6:	4b27      	ldr	r3, [pc, #156]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	061b      	lsls	r3, r3, #24
 8008000:	4920      	ldr	r1, [pc, #128]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8008002:	4313      	orrs	r3, r2
 8008004:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008006:	e045      	b.n	8008094 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d026      	beq.n	800805e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008010:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f023 0219 	bic.w	r2, r3, #25
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	4919      	ldr	r1, [pc, #100]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 800801e:	4313      	orrs	r3, r2
 8008020:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008022:	f7fc fdbb 	bl	8004b9c <HAL_GetTick>
 8008026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008028:	e008      	b.n	800803c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800802a:	f7fc fdb7 	bl	8004b9c <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	2b02      	cmp	r3, #2
 8008036:	d901      	bls.n	800803c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e2a8      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800803c:	4b11      	ldr	r3, [pc, #68]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0f0      	beq.n	800802a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008048:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	490b      	ldr	r1, [pc, #44]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8008058:	4313      	orrs	r3, r2
 800805a:	604b      	str	r3, [r1, #4]
 800805c:	e01a      	b.n	8008094 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a08      	ldr	r2, [pc, #32]	; (8008084 <HAL_RCC_OscConfig+0x244>)
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806a:	f7fc fd97 	bl	8004b9c <HAL_GetTick>
 800806e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008070:	e00a      	b.n	8008088 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008072:	f7fc fd93 	bl	8004b9c <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d903      	bls.n	8008088 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e284      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
 8008084:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008088:	4b96      	ldr	r3, [pc, #600]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1ee      	bne.n	8008072 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b00      	cmp	r3, #0
 800809e:	d06a      	beq.n	8008176 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a0:	4b90      	ldr	r3, [pc, #576]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080a8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080aa:	4b8e      	ldr	r3, [pc, #568]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d007      	beq.n	80080c6 <HAL_RCC_OscConfig+0x286>
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b18      	cmp	r3, #24
 80080ba:	d11b      	bne.n	80080f4 <HAL_RCC_OscConfig+0x2b4>
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d116      	bne.n	80080f4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080c6:	4b87      	ldr	r3, [pc, #540]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_RCC_OscConfig+0x29e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	2b80      	cmp	r3, #128	; 0x80
 80080d8:	d001      	beq.n	80080de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e257      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080de:	4b81      	ldr	r3, [pc, #516]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	061b      	lsls	r3, r3, #24
 80080ec:	497d      	ldr	r1, [pc, #500]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080f2:	e040      	b.n	8008176 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d023      	beq.n	8008144 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080fc:	4b79      	ldr	r3, [pc, #484]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a78      	ldr	r2, [pc, #480]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 8008102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008108:	f7fc fd48 	bl	8004b9c <HAL_GetTick>
 800810c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008110:	f7fc fd44 	bl	8004b9c <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e235      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008122:	4b70      	ldr	r3, [pc, #448]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f0      	beq.n	8008110 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800812e:	4b6d      	ldr	r3, [pc, #436]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	061b      	lsls	r3, r3, #24
 800813c:	4969      	ldr	r1, [pc, #420]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800813e:	4313      	orrs	r3, r2
 8008140:	60cb      	str	r3, [r1, #12]
 8008142:	e018      	b.n	8008176 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008144:	4b67      	ldr	r3, [pc, #412]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a66      	ldr	r2, [pc, #408]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800814a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800814e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fc fd24 	bl	8004b9c <HAL_GetTick>
 8008154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008158:	f7fc fd20 	bl	8004b9c <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e211      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800816a:	4b5e      	ldr	r3, [pc, #376]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f0      	bne.n	8008158 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d036      	beq.n	80081f0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d019      	beq.n	80081be <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800818a:	4b56      	ldr	r3, [pc, #344]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800818c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800818e:	4a55      	ldr	r2, [pc, #340]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008196:	f7fc fd01 	bl	8004b9c <HAL_GetTick>
 800819a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800819c:	e008      	b.n	80081b0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800819e:	f7fc fcfd 	bl	8004b9c <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e1ee      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081b0:	4b4c      	ldr	r3, [pc, #304]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80081b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d0f0      	beq.n	800819e <HAL_RCC_OscConfig+0x35e>
 80081bc:	e018      	b.n	80081f0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081be:	4b49      	ldr	r3, [pc, #292]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80081c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c2:	4a48      	ldr	r2, [pc, #288]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ca:	f7fc fce7 	bl	8004b9c <HAL_GetTick>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081d0:	e008      	b.n	80081e4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081d2:	f7fc fce3 	bl	8004b9c <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e1d4      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081e4:	4b3f      	ldr	r3, [pc, #252]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80081e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f0      	bne.n	80081d2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0320 	and.w	r3, r3, #32
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d036      	beq.n	800826a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d019      	beq.n	8008238 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008204:	4b37      	ldr	r3, [pc, #220]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a36      	ldr	r2, [pc, #216]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800820a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800820e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008210:	f7fc fcc4 	bl	8004b9c <HAL_GetTick>
 8008214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008218:	f7fc fcc0 	bl	8004b9c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e1b1      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800822a:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0f0      	beq.n	8008218 <HAL_RCC_OscConfig+0x3d8>
 8008236:	e018      	b.n	800826a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008238:	4b2a      	ldr	r3, [pc, #168]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a29      	ldr	r2, [pc, #164]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 800823e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008242:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008244:	f7fc fcaa 	bl	8004b9c <HAL_GetTick>
 8008248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800824a:	e008      	b.n	800825e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800824c:	f7fc fca6 	bl	8004b9c <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e197      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800825e:	4b21      	ldr	r3, [pc, #132]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1f0      	bne.n	800824c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 8086 	beq.w	8008384 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <HAL_RCC_OscConfig+0x4a8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <HAL_RCC_OscConfig+0x4a8>)
 800827e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008284:	f7fc fc8a 	bl	8004b9c <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800828c:	f7fc fc86 	bl	8004b9c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b64      	cmp	r3, #100	; 0x64
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e177      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <HAL_RCC_OscConfig+0x4a8>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d106      	bne.n	80082c0 <HAL_RCC_OscConfig+0x480>
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80082b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b6:	4a0b      	ldr	r2, [pc, #44]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80082b8:	f043 0301 	orr.w	r3, r3, #1
 80082bc:	6713      	str	r3, [r2, #112]	; 0x70
 80082be:	e032      	b.n	8008326 <HAL_RCC_OscConfig+0x4e6>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d111      	bne.n	80082ec <HAL_RCC_OscConfig+0x4ac>
 80082c8:	4b06      	ldr	r3, [pc, #24]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80082ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082cc:	4a05      	ldr	r2, [pc, #20]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80082ce:	f023 0301 	bic.w	r3, r3, #1
 80082d2:	6713      	str	r3, [r2, #112]	; 0x70
 80082d4:	4b03      	ldr	r3, [pc, #12]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80082d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d8:	4a02      	ldr	r2, [pc, #8]	; (80082e4 <HAL_RCC_OscConfig+0x4a4>)
 80082da:	f023 0304 	bic.w	r3, r3, #4
 80082de:	6713      	str	r3, [r2, #112]	; 0x70
 80082e0:	e021      	b.n	8008326 <HAL_RCC_OscConfig+0x4e6>
 80082e2:	bf00      	nop
 80082e4:	58024400 	.word	0x58024400
 80082e8:	58024800 	.word	0x58024800
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d10c      	bne.n	800830e <HAL_RCC_OscConfig+0x4ce>
 80082f4:	4b83      	ldr	r3, [pc, #524]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80082f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082f8:	4a82      	ldr	r2, [pc, #520]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80082fa:	f043 0304 	orr.w	r3, r3, #4
 80082fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008300:	4b80      	ldr	r3, [pc, #512]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008304:	4a7f      	ldr	r2, [pc, #508]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	6713      	str	r3, [r2, #112]	; 0x70
 800830c:	e00b      	b.n	8008326 <HAL_RCC_OscConfig+0x4e6>
 800830e:	4b7d      	ldr	r3, [pc, #500]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	4a7c      	ldr	r2, [pc, #496]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	6713      	str	r3, [r2, #112]	; 0x70
 800831a:	4b7a      	ldr	r3, [pc, #488]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	4a79      	ldr	r2, [pc, #484]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008320:	f023 0304 	bic.w	r3, r3, #4
 8008324:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d015      	beq.n	800835a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800832e:	f7fc fc35 	bl	8004b9c <HAL_GetTick>
 8008332:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008334:	e00a      	b.n	800834c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008336:	f7fc fc31 	bl	8004b9c <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	f241 3288 	movw	r2, #5000	; 0x1388
 8008344:	4293      	cmp	r3, r2
 8008346:	d901      	bls.n	800834c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e120      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800834c:	4b6d      	ldr	r3, [pc, #436]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800834e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0ee      	beq.n	8008336 <HAL_RCC_OscConfig+0x4f6>
 8008358:	e014      	b.n	8008384 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800835a:	f7fc fc1f 	bl	8004b9c <HAL_GetTick>
 800835e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008360:	e00a      	b.n	8008378 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008362:	f7fc fc1b 	bl	8004b9c <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008370:	4293      	cmp	r3, r2
 8008372:	d901      	bls.n	8008378 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e10a      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008378:	4b62      	ldr	r3, [pc, #392]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800837a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837c:	f003 0302 	and.w	r3, r3, #2
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1ee      	bne.n	8008362 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80ff 	beq.w	800858c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800838e:	4b5d      	ldr	r3, [pc, #372]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008396:	2b18      	cmp	r3, #24
 8008398:	f000 80ba 	beq.w	8008510 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	f040 8095 	bne.w	80084d0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083a6:	4b57      	ldr	r3, [pc, #348]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a56      	ldr	r2, [pc, #344]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80083ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b2:	f7fc fbf3 	bl	8004b9c <HAL_GetTick>
 80083b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083b8:	e008      	b.n	80083cc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ba:	f7fc fbef 	bl	8004b9c <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e0e0      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083cc:	4b4d      	ldr	r3, [pc, #308]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1f0      	bne.n	80083ba <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083d8:	4b4a      	ldr	r3, [pc, #296]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80083da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083dc:	4b4a      	ldr	r3, [pc, #296]	; (8008508 <HAL_RCC_OscConfig+0x6c8>)
 80083de:	4013      	ands	r3, r2
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80083e8:	0112      	lsls	r2, r2, #4
 80083ea:	430a      	orrs	r2, r1
 80083ec:	4945      	ldr	r1, [pc, #276]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	628b      	str	r3, [r1, #40]	; 0x28
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f6:	3b01      	subs	r3, #1
 80083f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	3b01      	subs	r3, #1
 8008402:	025b      	lsls	r3, r3, #9
 8008404:	b29b      	uxth	r3, r3
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	3b01      	subs	r3, #1
 800840e:	041b      	lsls	r3, r3, #16
 8008410:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	3b01      	subs	r3, #1
 800841c:	061b      	lsls	r3, r3, #24
 800841e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008422:	4938      	ldr	r1, [pc, #224]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008424:	4313      	orrs	r3, r2
 8008426:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008428:	4b36      	ldr	r3, [pc, #216]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	4a35      	ldr	r2, [pc, #212]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800842e:	f023 0301 	bic.w	r3, r3, #1
 8008432:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008434:	4b33      	ldr	r3, [pc, #204]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008438:	4b34      	ldr	r3, [pc, #208]	; (800850c <HAL_RCC_OscConfig+0x6cc>)
 800843a:	4013      	ands	r3, r2
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008440:	00d2      	lsls	r2, r2, #3
 8008442:	4930      	ldr	r1, [pc, #192]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008444:	4313      	orrs	r3, r2
 8008446:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008448:	4b2e      	ldr	r3, [pc, #184]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	f023 020c 	bic.w	r2, r3, #12
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	492b      	ldr	r1, [pc, #172]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008456:	4313      	orrs	r3, r2
 8008458:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800845a:	4b2a      	ldr	r3, [pc, #168]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f023 0202 	bic.w	r2, r3, #2
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	4927      	ldr	r1, [pc, #156]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008468:	4313      	orrs	r3, r2
 800846a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800846c:	4b25      	ldr	r3, [pc, #148]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	4a24      	ldr	r2, [pc, #144]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008478:	4b22      	ldr	r3, [pc, #136]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	4a21      	ldr	r2, [pc, #132]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800847e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008484:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800848a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800848e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008490:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	4a1b      	ldr	r2, [pc, #108]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800849c:	4b19      	ldr	r3, [pc, #100]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a18      	ldr	r2, [pc, #96]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80084a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a8:	f7fc fb78 	bl	8004b9c <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084b0:	f7fc fb74 	bl	8004b9c <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e065      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084c2:	4b10      	ldr	r3, [pc, #64]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCC_OscConfig+0x670>
 80084ce:	e05d      	b.n	800858c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d0:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a0b      	ldr	r2, [pc, #44]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80084d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fc fb5e 	bl	8004b9c <HAL_GetTick>
 80084e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fc fb5a 	bl	8004b9c <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e04b      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084f6:	4b03      	ldr	r3, [pc, #12]	; (8008504 <HAL_RCC_OscConfig+0x6c4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x6a4>
 8008502:	e043      	b.n	800858c <HAL_RCC_OscConfig+0x74c>
 8008504:	58024400 	.word	0x58024400
 8008508:	fffffc0c 	.word	0xfffffc0c
 800850c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008510:	4b21      	ldr	r3, [pc, #132]	; (8008598 <HAL_RCC_OscConfig+0x758>)
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008516:	4b20      	ldr	r3, [pc, #128]	; (8008598 <HAL_RCC_OscConfig+0x758>)
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	2b01      	cmp	r3, #1
 8008522:	d031      	beq.n	8008588 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f003 0203 	and.w	r2, r3, #3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800852e:	429a      	cmp	r2, r3
 8008530:	d12a      	bne.n	8008588 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	091b      	lsrs	r3, r3, #4
 8008536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800853e:	429a      	cmp	r2, r3
 8008540:	d122      	bne.n	8008588 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800854e:	429a      	cmp	r2, r3
 8008550:	d11a      	bne.n	8008588 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	0a5b      	lsrs	r3, r3, #9
 8008556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008560:	429a      	cmp	r2, r3
 8008562:	d111      	bne.n	8008588 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	0c1b      	lsrs	r3, r3, #16
 8008568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008572:	429a      	cmp	r2, r3
 8008574:	d108      	bne.n	8008588 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	0e1b      	lsrs	r3, r3, #24
 800857a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008582:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008584:	429a      	cmp	r2, r3
 8008586:	d001      	beq.n	800858c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3730      	adds	r7, #48	; 0x30
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	58024400 	.word	0x58024400

0800859c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e19c      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085b0:	4b8a      	ldr	r3, [pc, #552]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 030f 	and.w	r3, r3, #15
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d910      	bls.n	80085e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085be:	4b87      	ldr	r3, [pc, #540]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f023 020f 	bic.w	r2, r3, #15
 80085c6:	4985      	ldr	r1, [pc, #532]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ce:	4b83      	ldr	r3, [pc, #524]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 030f 	and.w	r3, r3, #15
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d001      	beq.n	80085e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e184      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d010      	beq.n	800860e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	4b7b      	ldr	r3, [pc, #492]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d908      	bls.n	800860e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085fc:	4b78      	ldr	r3, [pc, #480]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	4975      	ldr	r1, [pc, #468]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800860a:	4313      	orrs	r3, r2
 800860c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d010      	beq.n	800863c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	695a      	ldr	r2, [r3, #20]
 800861e:	4b70      	ldr	r3, [pc, #448]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008626:	429a      	cmp	r2, r3
 8008628:	d908      	bls.n	800863c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800862a:	4b6d      	ldr	r3, [pc, #436]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	496a      	ldr	r1, [pc, #424]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 8008638:	4313      	orrs	r3, r2
 800863a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	4b64      	ldr	r3, [pc, #400]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008654:	429a      	cmp	r2, r3
 8008656:	d908      	bls.n	800866a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008658:	4b61      	ldr	r3, [pc, #388]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	495e      	ldr	r1, [pc, #376]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 8008666:	4313      	orrs	r3, r2
 8008668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d010      	beq.n	8008698 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69da      	ldr	r2, [r3, #28]
 800867a:	4b59      	ldr	r3, [pc, #356]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008682:	429a      	cmp	r2, r3
 8008684:	d908      	bls.n	8008698 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008686:	4b56      	ldr	r3, [pc, #344]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	4953      	ldr	r1, [pc, #332]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 8008694:	4313      	orrs	r3, r2
 8008696:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d010      	beq.n	80086c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	4b4d      	ldr	r3, [pc, #308]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d908      	bls.n	80086c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086b4:	4b4a      	ldr	r3, [pc, #296]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	f023 020f 	bic.w	r2, r3, #15
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	4947      	ldr	r1, [pc, #284]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d055      	beq.n	800877e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086d2:	4b43      	ldr	r3, [pc, #268]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	4940      	ldr	r1, [pc, #256]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80086e0:	4313      	orrs	r3, r2
 80086e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d107      	bne.n	80086fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086ec:	4b3c      	ldr	r3, [pc, #240]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d121      	bne.n	800873c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e0f6      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	2b03      	cmp	r3, #3
 8008702:	d107      	bne.n	8008714 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008704:	4b36      	ldr	r3, [pc, #216]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d115      	bne.n	800873c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e0ea      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d107      	bne.n	800872c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800871c:	4b30      	ldr	r3, [pc, #192]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e0de      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800872c:	4b2c      	ldr	r3, [pc, #176]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e0d6      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800873c:	4b28      	ldr	r3, [pc, #160]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f023 0207 	bic.w	r2, r3, #7
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	4925      	ldr	r1, [pc, #148]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800874a:	4313      	orrs	r3, r2
 800874c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800874e:	f7fc fa25 	bl	8004b9c <HAL_GetTick>
 8008752:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008754:	e00a      	b.n	800876c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008756:	f7fc fa21 	bl	8004b9c <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	f241 3288 	movw	r2, #5000	; 0x1388
 8008764:	4293      	cmp	r3, r2
 8008766:	d901      	bls.n	800876c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e0be      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	429a      	cmp	r2, r3
 800877c:	d1eb      	bne.n	8008756 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	429a      	cmp	r2, r3
 8008798:	d208      	bcs.n	80087ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800879a:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f023 020f 	bic.w	r2, r3, #15
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	490e      	ldr	r1, [pc, #56]	; (80087e0 <HAL_RCC_ClockConfig+0x244>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d214      	bcs.n	80087e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f023 020f 	bic.w	r2, r3, #15
 80087c2:	4906      	ldr	r1, [pc, #24]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ca:	4b04      	ldr	r3, [pc, #16]	; (80087dc <HAL_RCC_ClockConfig+0x240>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d005      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e086      	b.n	80088ea <HAL_RCC_ClockConfig+0x34e>
 80087dc:	52002000 	.word	0x52002000
 80087e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d010      	beq.n	8008812 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	4b3f      	ldr	r3, [pc, #252]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d208      	bcs.n	8008812 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008800:	4b3c      	ldr	r3, [pc, #240]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	4939      	ldr	r1, [pc, #228]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 800880e:	4313      	orrs	r3, r2
 8008810:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d010      	beq.n	8008840 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	4b34      	ldr	r3, [pc, #208]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800882a:	429a      	cmp	r2, r3
 800882c:	d208      	bcs.n	8008840 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800882e:	4b31      	ldr	r3, [pc, #196]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	492e      	ldr	r1, [pc, #184]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 800883c:	4313      	orrs	r3, r2
 800883e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0310 	and.w	r3, r3, #16
 8008848:	2b00      	cmp	r3, #0
 800884a:	d010      	beq.n	800886e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699a      	ldr	r2, [r3, #24]
 8008850:	4b28      	ldr	r3, [pc, #160]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008858:	429a      	cmp	r2, r3
 800885a:	d208      	bcs.n	800886e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800885c:	4b25      	ldr	r3, [pc, #148]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	4922      	ldr	r1, [pc, #136]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 800886a:	4313      	orrs	r3, r2
 800886c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0320 	and.w	r3, r3, #32
 8008876:	2b00      	cmp	r3, #0
 8008878:	d010      	beq.n	800889c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	69da      	ldr	r2, [r3, #28]
 800887e:	4b1d      	ldr	r3, [pc, #116]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008886:	429a      	cmp	r2, r3
 8008888:	d208      	bcs.n	800889c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800888a:	4b1a      	ldr	r3, [pc, #104]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	4917      	ldr	r1, [pc, #92]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 8008898:	4313      	orrs	r3, r2
 800889a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800889c:	f000 f834 	bl	8008908 <HAL_RCC_GetSysClockFreq>
 80088a0:	4602      	mov	r2, r0
 80088a2:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	4912      	ldr	r1, [pc, #72]	; (80088f8 <HAL_RCC_ClockConfig+0x35c>)
 80088ae:	5ccb      	ldrb	r3, [r1, r3]
 80088b0:	f003 031f 	and.w	r3, r3, #31
 80088b4:	fa22 f303 	lsr.w	r3, r2, r3
 80088b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <HAL_RCC_ClockConfig+0x358>)
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	4a0d      	ldr	r2, [pc, #52]	; (80088f8 <HAL_RCC_ClockConfig+0x35c>)
 80088c4:	5cd3      	ldrb	r3, [r2, r3]
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	fa22 f303 	lsr.w	r3, r2, r3
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <HAL_RCC_ClockConfig+0x360>)
 80088d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088d4:	4a0a      	ldr	r2, [pc, #40]	; (8008900 <HAL_RCC_ClockConfig+0x364>)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80088da:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <HAL_RCC_ClockConfig+0x368>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fc f912 	bl	8004b08 <HAL_InitTick>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	58024400 	.word	0x58024400
 80088f8:	0800e20c 	.word	0x0800e20c
 80088fc:	24000008 	.word	0x24000008
 8008900:	24000004 	.word	0x24000004
 8008904:	2400000c 	.word	0x2400000c

08008908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008908:	b480      	push	{r7}
 800890a:	b089      	sub	sp, #36	; 0x24
 800890c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800890e:	4bb3      	ldr	r3, [pc, #716]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008916:	2b18      	cmp	r3, #24
 8008918:	f200 8155 	bhi.w	8008bc6 <HAL_RCC_GetSysClockFreq+0x2be>
 800891c:	a201      	add	r2, pc, #4	; (adr r2, 8008924 <HAL_RCC_GetSysClockFreq+0x1c>)
 800891e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008922:	bf00      	nop
 8008924:	08008989 	.word	0x08008989
 8008928:	08008bc7 	.word	0x08008bc7
 800892c:	08008bc7 	.word	0x08008bc7
 8008930:	08008bc7 	.word	0x08008bc7
 8008934:	08008bc7 	.word	0x08008bc7
 8008938:	08008bc7 	.word	0x08008bc7
 800893c:	08008bc7 	.word	0x08008bc7
 8008940:	08008bc7 	.word	0x08008bc7
 8008944:	080089af 	.word	0x080089af
 8008948:	08008bc7 	.word	0x08008bc7
 800894c:	08008bc7 	.word	0x08008bc7
 8008950:	08008bc7 	.word	0x08008bc7
 8008954:	08008bc7 	.word	0x08008bc7
 8008958:	08008bc7 	.word	0x08008bc7
 800895c:	08008bc7 	.word	0x08008bc7
 8008960:	08008bc7 	.word	0x08008bc7
 8008964:	080089b5 	.word	0x080089b5
 8008968:	08008bc7 	.word	0x08008bc7
 800896c:	08008bc7 	.word	0x08008bc7
 8008970:	08008bc7 	.word	0x08008bc7
 8008974:	08008bc7 	.word	0x08008bc7
 8008978:	08008bc7 	.word	0x08008bc7
 800897c:	08008bc7 	.word	0x08008bc7
 8008980:	08008bc7 	.word	0x08008bc7
 8008984:	080089bb 	.word	0x080089bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008988:	4b94      	ldr	r3, [pc, #592]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d009      	beq.n	80089a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008994:	4b91      	ldr	r3, [pc, #580]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	08db      	lsrs	r3, r3, #3
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	4a90      	ldr	r2, [pc, #576]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089a0:	fa22 f303 	lsr.w	r3, r2, r3
 80089a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80089a6:	e111      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089a8:	4b8d      	ldr	r3, [pc, #564]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089aa:	61bb      	str	r3, [r7, #24]
    break;
 80089ac:	e10e      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80089ae:	4b8d      	ldr	r3, [pc, #564]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089b0:	61bb      	str	r3, [r7, #24]
    break;
 80089b2:	e10b      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80089b4:	4b8c      	ldr	r3, [pc, #560]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089b6:	61bb      	str	r3, [r7, #24]
    break;
 80089b8:	e108      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ba:	4b88      	ldr	r3, [pc, #544]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80089c4:	4b85      	ldr	r3, [pc, #532]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c8:	091b      	lsrs	r3, r3, #4
 80089ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089d0:	4b82      	ldr	r3, [pc, #520]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80089da:	4b80      	ldr	r3, [pc, #512]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	08db      	lsrs	r3, r3, #3
 80089e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	fb02 f303 	mul.w	r3, r2, r3
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80e1 	beq.w	8008bc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	f000 8083 	beq.w	8008b0c <HAL_RCC_GetSysClockFreq+0x204>
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	f200 80a1 	bhi.w	8008b50 <HAL_RCC_GetSysClockFreq+0x248>
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_RCC_GetSysClockFreq+0x114>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d056      	beq.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a1a:	e099      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a1c:	4b6f      	ldr	r3, [pc, #444]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d02d      	beq.n	8008a84 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a28:	4b6c      	ldr	r3, [pc, #432]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	08db      	lsrs	r3, r3, #3
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	4a6b      	ldr	r2, [pc, #428]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a34:	fa22 f303 	lsr.w	r3, r2, r3
 8008a38:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	ee07 3a90 	vmov	s15, r3
 8008a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b62      	ldr	r3, [pc, #392]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008a82:	e087      	b.n	8008b94 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008bf0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b51      	ldr	r3, [pc, #324]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aaa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac6:	e065      	b.n	8008b94 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ada:	4b40      	ldr	r3, [pc, #256]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b0a:	e043      	b.n	8008b94 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008bf8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1e:	4b2f      	ldr	r3, [pc, #188]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b4e:	e021      	b.n	8008b94 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b62:	4b1e      	ldr	r3, [pc, #120]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b92:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008b94:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	0a5b      	lsrs	r3, r3, #9
 8008b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	ee07 3a90 	vmov	s15, r3
 8008ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb8:	ee17 3a90 	vmov	r3, s15
 8008bbc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008bbe:	e005      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61bb      	str	r3, [r7, #24]
    break;
 8008bc4:	e002      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008bc6:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bc8:	61bb      	str	r3, [r7, #24]
    break;
 8008bca:	bf00      	nop
  }

  return sysclockfreq;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3724      	adds	r7, #36	; 0x24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	03d09000 	.word	0x03d09000
 8008be4:	003d0900 	.word	0x003d0900
 8008be8:	007a1200 	.word	0x007a1200
 8008bec:	46000000 	.word	0x46000000
 8008bf0:	4c742400 	.word	0x4c742400
 8008bf4:	4a742400 	.word	0x4a742400
 8008bf8:	4af42400 	.word	0x4af42400

08008bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c02:	f7ff fe81 	bl	8008908 <HAL_RCC_GetSysClockFreq>
 8008c06:	4602      	mov	r2, r0
 8008c08:	4b10      	ldr	r3, [pc, #64]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	0a1b      	lsrs	r3, r3, #8
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	490f      	ldr	r1, [pc, #60]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c14:	5ccb      	ldrb	r3, [r1, r3]
 8008c16:	f003 031f 	and.w	r3, r3, #31
 8008c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c20:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	f003 030f 	and.w	r3, r3, #15
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c2a:	5cd3      	ldrb	r3, [r2, r3]
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	fa22 f303 	lsr.w	r3, r2, r3
 8008c36:	4a07      	ldr	r2, [pc, #28]	; (8008c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c3a:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c42:	681b      	ldr	r3, [r3, #0]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	0800e20c 	.word	0x0800e20c
 8008c54:	24000008 	.word	0x24000008
 8008c58:	24000004 	.word	0x24000004

08008c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c60:	f7ff ffcc 	bl	8008bfc <HAL_RCC_GetHCLKFreq>
 8008c64:	4602      	mov	r2, r0
 8008c66:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	091b      	lsrs	r3, r3, #4
 8008c6c:	f003 0307 	and.w	r3, r3, #7
 8008c70:	4904      	ldr	r1, [pc, #16]	; (8008c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c72:	5ccb      	ldrb	r3, [r1, r3]
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	58024400 	.word	0x58024400
 8008c84:	0800e20c 	.word	0x0800e20c

08008c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c8c:	f7ff ffb6 	bl	8008bfc <HAL_RCC_GetHCLKFreq>
 8008c90:	4602      	mov	r2, r0
 8008c92:	4b06      	ldr	r3, [pc, #24]	; (8008cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	4904      	ldr	r1, [pc, #16]	; (8008cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ca0:	f003 031f 	and.w	r3, r3, #31
 8008ca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	58024400 	.word	0x58024400
 8008cb0:	0800e20c 	.word	0x0800e20c

08008cb4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d03f      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cd8:	d02a      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008cda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cde:	d824      	bhi.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ce4:	d018      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cea:	d81e      	bhi.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cf4:	d007      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008cf6:	e018      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf8:	4ba4      	ldr	r3, [pc, #656]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	4aa3      	ldr	r2, [pc, #652]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d04:	e015      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	2102      	movs	r1, #2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f989 	bl	800a024 <RCCEx_PLL2_Config>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d16:	e00c      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3324      	adds	r3, #36	; 0x24
 8008d1c:	2102      	movs	r1, #2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 fa32 	bl	800a188 <RCCEx_PLL3_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d28:	e003      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2e:	e000      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d109      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d38:	4b94      	ldr	r3, [pc, #592]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d44:	4991      	ldr	r1, [pc, #580]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	650b      	str	r3, [r1, #80]	; 0x50
 8008d4a:	e001      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d03d      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d826      	bhi.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d81 	.word	0x08008d81
 8008d70:	08008d8f 	.word	0x08008d8f
 8008d74:	08008da1 	.word	0x08008da1
 8008d78:	08008db9 	.word	0x08008db9
 8008d7c:	08008db9 	.word	0x08008db9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d80:	4b82      	ldr	r3, [pc, #520]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	4a81      	ldr	r2, [pc, #516]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d8c:	e015      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3304      	adds	r3, #4
 8008d92:	2100      	movs	r1, #0
 8008d94:	4618      	mov	r0, r3
 8008d96:	f001 f945 	bl	800a024 <RCCEx_PLL2_Config>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d9e:	e00c      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3324      	adds	r3, #36	; 0x24
 8008da4:	2100      	movs	r1, #0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 f9ee 	bl	800a188 <RCCEx_PLL3_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008db0:	e003      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	75fb      	strb	r3, [r7, #23]
      break;
 8008db6:	e000      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d109      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dc0:	4b72      	ldr	r3, [pc, #456]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc4:	f023 0207 	bic.w	r2, r3, #7
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dcc:	496f      	ldr	r1, [pc, #444]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	650b      	str	r3, [r1, #80]	; 0x50
 8008dd2:	e001      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d051      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008dea:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008dee:	d036      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008df0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008df4:	d830      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008df6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008dfa:	d032      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e00:	d82a      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008e02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e06:	d02e      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008e08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e0c:	d824      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e12:	d018      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e18:	d81e      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e22:	d007      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008e24:	e018      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e26:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	4a58      	ldr	r2, [pc, #352]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e32:	e019      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3304      	adds	r3, #4
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f001 f8f2 	bl	800a024 <RCCEx_PLL2_Config>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e44:	e010      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3324      	adds	r3, #36	; 0x24
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 f99b 	bl	800a188 <RCCEx_PLL3_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e56:	e007      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e5c:	e004      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e5e:	bf00      	nop
 8008e60:	e002      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e62:	bf00      	nop
 8008e64:	e000      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e6e:	4b47      	ldr	r3, [pc, #284]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e72:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e7c:	4943      	ldr	r1, [pc, #268]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	658b      	str	r3, [r1, #88]	; 0x58
 8008e82:	e001      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d051      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e9a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e9e:	d036      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008ea0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008ea4:	d830      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008ea6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eaa:	d032      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008eac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eb0:	d82a      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008eb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008eb6:	d02e      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008eb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ebc:	d824      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008ebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ec2:	d018      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ec8:	d81e      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ed2:	d007      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ed4:	e018      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed6:	4b2d      	ldr	r3, [pc, #180]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	4a2c      	ldr	r2, [pc, #176]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ee2:	e019      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f001 f89a 	bl	800a024 <RCCEx_PLL2_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008ef4:	e010      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3324      	adds	r3, #36	; 0x24
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 f943 	bl	800a188 <RCCEx_PLL3_Config>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f06:	e007      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0c:	e004      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e002      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f1e:	4b1b      	ldr	r3, [pc, #108]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f22:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f2c:	4917      	ldr	r1, [pc, #92]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	658b      	str	r3, [r1, #88]	; 0x58
 8008f32:	e001      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d035      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f48:	2b30      	cmp	r3, #48	; 0x30
 8008f4a:	d01c      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f4c:	2b30      	cmp	r3, #48	; 0x30
 8008f4e:	d817      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d00c      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008f54:	2b20      	cmp	r3, #32
 8008f56:	d813      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d019      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008f5c:	2b10      	cmp	r3, #16
 8008f5e:	d10f      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	4a09      	ldr	r2, [pc, #36]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008f6c:	e011      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3304      	adds	r3, #4
 8008f72:	2102      	movs	r1, #2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f001 f855 	bl	800a024 <RCCEx_PLL2_Config>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008f7e:	e008      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]
      break;
 8008f84:	e005      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008f86:	bf00      	nop
 8008f88:	e003      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f8a:	bf00      	nop
 8008f8c:	58024400 	.word	0x58024400
      break;
 8008f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d109      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008f98:	4ba3      	ldr	r3, [pc, #652]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fa4:	49a0      	ldr	r1, [pc, #640]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008faa:	e001      	b.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d047      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fc4:	d030      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fca:	d82a      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008fcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008fd0:	d02c      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008fd6:	d824      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fdc:	d018      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe2:	d81e      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fec:	d007      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008fee:	e018      	b.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff0:	4b8d      	ldr	r3, [pc, #564]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a8c      	ldr	r2, [pc, #560]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ffc:	e017      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3304      	adds	r3, #4
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f001 f80d 	bl	800a024 <RCCEx_PLL2_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800900e:	e00e      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3324      	adds	r3, #36	; 0x24
 8009014:	2100      	movs	r1, #0
 8009016:	4618      	mov	r0, r3
 8009018:	f001 f8b6 	bl	800a188 <RCCEx_PLL3_Config>
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009020:	e005      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
      break;
 8009026:	e002      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009028:	bf00      	nop
 800902a:	e000      	b.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800902c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009034:	4b7c      	ldr	r3, [pc, #496]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009038:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009040:	4979      	ldr	r1, [pc, #484]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009042:	4313      	orrs	r3, r2
 8009044:	650b      	str	r3, [r1, #80]	; 0x50
 8009046:	e001      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d049      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009060:	d02e      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009066:	d828      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800906c:	d02a      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800906e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009072:	d822      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009074:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009078:	d026      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800907a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800907e:	d81c      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009084:	d010      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800908a:	d816      	bhi.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x406>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01d      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009094:	d111      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3304      	adds	r3, #4
 800909a:	2101      	movs	r1, #1
 800909c:	4618      	mov	r0, r3
 800909e:	f000 ffc1 	bl	800a024 <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090a6:	e012      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3324      	adds	r3, #36	; 0x24
 80090ac:	2101      	movs	r1, #1
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 f86a 	bl	800a188 <RCCEx_PLL3_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80090b8:	e009      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	75fb      	strb	r3, [r7, #23]
      break;
 80090be:	e006      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80090c0:	bf00      	nop
 80090c2:	e004      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80090c4:	bf00      	nop
 80090c6:	e002      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80090c8:	bf00      	nop
 80090ca:	e000      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80090cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090d4:	4b54      	ldr	r3, [pc, #336]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e0:	4951      	ldr	r1, [pc, #324]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	650b      	str	r3, [r1, #80]	; 0x50
 80090e6:	e001      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
 80090ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d04b      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009102:	d02e      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009108:	d828      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800910a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800910e:	d02a      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009114:	d822      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800911a:	d026      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800911c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009120:	d81c      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009126:	d010      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800912c:	d816      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01d      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009136:	d111      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	2101      	movs	r1, #1
 800913e:	4618      	mov	r0, r3
 8009140:	f000 ff70 	bl	800a024 <RCCEx_PLL2_Config>
 8009144:	4603      	mov	r3, r0
 8009146:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009148:	e012      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3324      	adds	r3, #36	; 0x24
 800914e:	2101      	movs	r1, #1
 8009150:	4618      	mov	r0, r3
 8009152:	f001 f819 	bl	800a188 <RCCEx_PLL3_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800915a:	e009      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	75fb      	strb	r3, [r7, #23]
      break;
 8009160:	e006      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009162:	bf00      	nop
 8009164:	e004      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009166:	bf00      	nop
 8009168:	e002      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800916a:	bf00      	nop
 800916c:	e000      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800916e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009170:	7dfb      	ldrb	r3, [r7, #23]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009176:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800917a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009184:	4928      	ldr	r1, [pc, #160]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009186:	4313      	orrs	r3, r2
 8009188:	658b      	str	r3, [r1, #88]	; 0x58
 800918a:	e001      	b.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d02f      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a4:	d00e      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80091a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091aa:	d814      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d015      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x528>
 80091b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091b4:	d10f      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b6:	4b1c      	ldr	r3, [pc, #112]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	4a1b      	ldr	r2, [pc, #108]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80091c2:	e00c      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3304      	adds	r3, #4
 80091c8:	2101      	movs	r1, #1
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 ff2a 	bl	800a024 <RCCEx_PLL2_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80091d4:	e003      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
      break;
 80091da:	e000      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80091dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d109      	bne.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091e4:	4b10      	ldr	r3, [pc, #64]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f0:	490d      	ldr	r1, [pc, #52]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	650b      	str	r3, [r1, #80]	; 0x50
 80091f6:	e001      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d034      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920c:	2b03      	cmp	r3, #3
 800920e:	d81d      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009210:	a201      	add	r2, pc, #4	; (adr r2, 8009218 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009216:	bf00      	nop
 8009218:	08009253 	.word	0x08009253
 800921c:	0800922d 	.word	0x0800922d
 8009220:	0800923b 	.word	0x0800923b
 8009224:	08009253 	.word	0x08009253
 8009228:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800922c:	4bb1      	ldr	r3, [pc, #708]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	4ab0      	ldr	r2, [pc, #704]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009238:	e00c      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3304      	adds	r3, #4
 800923e:	2102      	movs	r1, #2
 8009240:	4618      	mov	r0, r3
 8009242:	f000 feef 	bl	800a024 <RCCEx_PLL2_Config>
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800924a:	e003      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]
      break;
 8009250:	e000      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d109      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800925a:	4ba6      	ldr	r3, [pc, #664]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800925c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925e:	f023 0203 	bic.w	r2, r3, #3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009266:	49a3      	ldr	r1, [pc, #652]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009268:	4313      	orrs	r3, r2
 800926a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800926c:	e001      	b.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 8086 	beq.w	800938c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009280:	4b9d      	ldr	r3, [pc, #628]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a9c      	ldr	r2, [pc, #624]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800928a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800928c:	f7fb fc86 	bl	8004b9c <HAL_GetTick>
 8009290:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009292:	e009      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009294:	f7fb fc82 	bl	8004b9c <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	2b64      	cmp	r3, #100	; 0x64
 80092a0:	d902      	bls.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	75fb      	strb	r3, [r7, #23]
        break;
 80092a6:	e005      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092a8:	4b93      	ldr	r3, [pc, #588]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0ef      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d166      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092ba:	4b8e      	ldr	r3, [pc, #568]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092c4:	4053      	eors	r3, r2
 80092c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d013      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092ce:	4b89      	ldr	r3, [pc, #548]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092d8:	4b86      	ldr	r3, [pc, #536]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092dc:	4a85      	ldr	r2, [pc, #532]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092e4:	4b83      	ldr	r3, [pc, #524]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e8:	4a82      	ldr	r2, [pc, #520]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80092f0:	4a80      	ldr	r2, [pc, #512]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009300:	d115      	bne.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009302:	f7fb fc4b 	bl	8004b9c <HAL_GetTick>
 8009306:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009308:	e00b      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800930a:	f7fb fc47 	bl	8004b9c <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	f241 3288 	movw	r2, #5000	; 0x1388
 8009318:	4293      	cmp	r3, r2
 800931a:	d902      	bls.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	75fb      	strb	r3, [r7, #23]
            break;
 8009320:	e005      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009322:	4b74      	ldr	r3, [pc, #464]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0ed      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d126      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800933a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009342:	d10d      	bne.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009344:	4b6b      	ldr	r3, [pc, #428]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009352:	0919      	lsrs	r1, r3, #4
 8009354:	4b69      	ldr	r3, [pc, #420]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009356:	400b      	ands	r3, r1
 8009358:	4966      	ldr	r1, [pc, #408]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800935a:	4313      	orrs	r3, r2
 800935c:	610b      	str	r3, [r1, #16]
 800935e:	e005      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009360:	4b64      	ldr	r3, [pc, #400]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	4a63      	ldr	r2, [pc, #396]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009366:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800936a:	6113      	str	r3, [r2, #16]
 800936c:	4b61      	ldr	r3, [pc, #388]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800936e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800937a:	495e      	ldr	r1, [pc, #376]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800937c:	4313      	orrs	r3, r2
 800937e:	670b      	str	r3, [r1, #112]	; 0x70
 8009380:	e004      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009382:	7dfb      	ldrb	r3, [r7, #23]
 8009384:	75bb      	strb	r3, [r7, #22]
 8009386:	e001      	b.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	7dfb      	ldrb	r3, [r7, #23]
 800938a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d07e      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800939c:	2b28      	cmp	r3, #40	; 0x28
 800939e:	d867      	bhi.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80093a0:	a201      	add	r2, pc, #4	; (adr r2, 80093a8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80093a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a6:	bf00      	nop
 80093a8:	08009477 	.word	0x08009477
 80093ac:	08009471 	.word	0x08009471
 80093b0:	08009471 	.word	0x08009471
 80093b4:	08009471 	.word	0x08009471
 80093b8:	08009471 	.word	0x08009471
 80093bc:	08009471 	.word	0x08009471
 80093c0:	08009471 	.word	0x08009471
 80093c4:	08009471 	.word	0x08009471
 80093c8:	0800944d 	.word	0x0800944d
 80093cc:	08009471 	.word	0x08009471
 80093d0:	08009471 	.word	0x08009471
 80093d4:	08009471 	.word	0x08009471
 80093d8:	08009471 	.word	0x08009471
 80093dc:	08009471 	.word	0x08009471
 80093e0:	08009471 	.word	0x08009471
 80093e4:	08009471 	.word	0x08009471
 80093e8:	0800945f 	.word	0x0800945f
 80093ec:	08009471 	.word	0x08009471
 80093f0:	08009471 	.word	0x08009471
 80093f4:	08009471 	.word	0x08009471
 80093f8:	08009471 	.word	0x08009471
 80093fc:	08009471 	.word	0x08009471
 8009400:	08009471 	.word	0x08009471
 8009404:	08009471 	.word	0x08009471
 8009408:	08009477 	.word	0x08009477
 800940c:	08009471 	.word	0x08009471
 8009410:	08009471 	.word	0x08009471
 8009414:	08009471 	.word	0x08009471
 8009418:	08009471 	.word	0x08009471
 800941c:	08009471 	.word	0x08009471
 8009420:	08009471 	.word	0x08009471
 8009424:	08009471 	.word	0x08009471
 8009428:	08009477 	.word	0x08009477
 800942c:	08009471 	.word	0x08009471
 8009430:	08009471 	.word	0x08009471
 8009434:	08009471 	.word	0x08009471
 8009438:	08009471 	.word	0x08009471
 800943c:	08009471 	.word	0x08009471
 8009440:	08009471 	.word	0x08009471
 8009444:	08009471 	.word	0x08009471
 8009448:	08009477 	.word	0x08009477
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3304      	adds	r3, #4
 8009450:	2101      	movs	r1, #1
 8009452:	4618      	mov	r0, r3
 8009454:	f000 fde6 	bl	800a024 <RCCEx_PLL2_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800945c:	e00c      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3324      	adds	r3, #36	; 0x24
 8009462:	2101      	movs	r1, #1
 8009464:	4618      	mov	r0, r3
 8009466:	f000 fe8f 	bl	800a188 <RCCEx_PLL3_Config>
 800946a:	4603      	mov	r3, r0
 800946c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800946e:	e003      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]
      break;
 8009474:	e000      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800947e:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009482:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800948a:	491a      	ldr	r1, [pc, #104]	; (80094f4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800948c:	4313      	orrs	r3, r2
 800948e:	654b      	str	r3, [r1, #84]	; 0x54
 8009490:	e001      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d03e      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a6:	2b05      	cmp	r3, #5
 80094a8:	d820      	bhi.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x838>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	08009501 	.word	0x08009501
 80094b4:	080094c9 	.word	0x080094c9
 80094b8:	080094db 	.word	0x080094db
 80094bc:	08009501 	.word	0x08009501
 80094c0:	08009501 	.word	0x08009501
 80094c4:	08009501 	.word	0x08009501
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3304      	adds	r3, #4
 80094cc:	2101      	movs	r1, #1
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fda8 	bl	800a024 <RCCEx_PLL2_Config>
 80094d4:	4603      	mov	r3, r0
 80094d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80094d8:	e013      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3324      	adds	r3, #36	; 0x24
 80094de:	2101      	movs	r1, #1
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 fe51 	bl	800a188 <RCCEx_PLL3_Config>
 80094e6:	4603      	mov	r3, r0
 80094e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80094ea:	e00a      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	75fb      	strb	r3, [r7, #23]
      break;
 80094f0:	e007      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80094f2:	bf00      	nop
 80094f4:	58024400 	.word	0x58024400
 80094f8:	58024800 	.word	0x58024800
 80094fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8009500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d109      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009508:	4b9f      	ldr	r3, [pc, #636]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	f023 0207 	bic.w	r2, r3, #7
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009514:	499c      	ldr	r1, [pc, #624]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009516:	4313      	orrs	r3, r2
 8009518:	654b      	str	r3, [r1, #84]	; 0x54
 800951a:	e001      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
 800951e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d039      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009532:	2b05      	cmp	r3, #5
 8009534:	d820      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009536:	a201      	add	r2, pc, #4	; (adr r2, 800953c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953c:	0800957f 	.word	0x0800957f
 8009540:	08009555 	.word	0x08009555
 8009544:	08009567 	.word	0x08009567
 8009548:	0800957f 	.word	0x0800957f
 800954c:	0800957f 	.word	0x0800957f
 8009550:	0800957f 	.word	0x0800957f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3304      	adds	r3, #4
 8009558:	2101      	movs	r1, #1
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fd62 	bl	800a024 <RCCEx_PLL2_Config>
 8009560:	4603      	mov	r3, r0
 8009562:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009564:	e00c      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3324      	adds	r3, #36	; 0x24
 800956a:	2101      	movs	r1, #1
 800956c:	4618      	mov	r0, r3
 800956e:	f000 fe0b 	bl	800a188 <RCCEx_PLL3_Config>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009576:	e003      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
      break;
 800957c:	e000      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800957e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009586:	4b80      	ldr	r3, [pc, #512]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958a:	f023 0207 	bic.w	r2, r3, #7
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009594:	497c      	ldr	r1, [pc, #496]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009596:	4313      	orrs	r3, r2
 8009598:	658b      	str	r3, [r1, #88]	; 0x58
 800959a:	e001      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0320 	and.w	r3, r3, #32
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d04b      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095b6:	d02e      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80095b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095bc:	d828      	bhi.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80095be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c2:	d02a      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80095c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c8:	d822      	bhi.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80095ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095ce:	d026      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80095d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095d4:	d81c      	bhi.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80095d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095da:	d010      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80095dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095e0:	d816      	bhi.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d01d      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80095e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ea:	d111      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3304      	adds	r3, #4
 80095f0:	2100      	movs	r1, #0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fd16 	bl	800a024 <RCCEx_PLL2_Config>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095fc:	e012      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3324      	adds	r3, #36	; 0x24
 8009602:	2102      	movs	r1, #2
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fdbf 	bl	800a188 <RCCEx_PLL3_Config>
 800960a:	4603      	mov	r3, r0
 800960c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800960e:	e009      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	75fb      	strb	r3, [r7, #23]
      break;
 8009614:	e006      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009616:	bf00      	nop
 8009618:	e004      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800961a:	bf00      	nop
 800961c:	e002      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800961e:	bf00      	nop
 8009620:	e000      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10a      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800962a:	4b57      	ldr	r3, [pc, #348]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800962c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009638:	4953      	ldr	r1, [pc, #332]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800963a:	4313      	orrs	r3, r2
 800963c:	654b      	str	r3, [r1, #84]	; 0x54
 800963e:	e001      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964c:	2b00      	cmp	r3, #0
 800964e:	d04b      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009656:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800965a:	d02e      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800965c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009660:	d828      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009666:	d02a      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800966c:	d822      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800966e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009672:	d026      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009678:	d81c      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800967a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800967e:	d010      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009684:	d816      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01d      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800968a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800968e:	d111      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3304      	adds	r3, #4
 8009694:	2100      	movs	r1, #0
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fcc4 	bl	800a024 <RCCEx_PLL2_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80096a0:	e012      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3324      	adds	r3, #36	; 0x24
 80096a6:	2102      	movs	r1, #2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fd6d 	bl	800a188 <RCCEx_PLL3_Config>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80096b2:	e009      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
      break;
 80096b8:	e006      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096ba:	bf00      	nop
 80096bc:	e004      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096be:	bf00      	nop
 80096c0:	e002      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096c2:	bf00      	nop
 80096c4:	e000      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80096c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096c8:	7dfb      	ldrb	r3, [r7, #23]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10a      	bne.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80096ce:	4b2e      	ldr	r3, [pc, #184]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80096d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096dc:	492a      	ldr	r1, [pc, #168]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	658b      	str	r3, [r1, #88]	; 0x58
 80096e2:	e001      	b.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d04d      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096fe:	d02e      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009700:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009704:	d828      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800970a:	d02a      	beq.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800970c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009710:	d822      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009712:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009716:	d026      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009718:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800971c:	d81c      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800971e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009722:	d010      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009728:	d816      	bhi.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d01d      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800972e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009732:	d111      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	2100      	movs	r1, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fc72 	bl	800a024 <RCCEx_PLL2_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009744:	e012      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3324      	adds	r3, #36	; 0x24
 800974a:	2102      	movs	r1, #2
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fd1b 	bl	800a188 <RCCEx_PLL3_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009756:	e009      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009758:	2301      	movs	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
      break;
 800975c:	e006      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800975e:	bf00      	nop
 8009760:	e004      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009762:	bf00      	nop
 8009764:	e002      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009766:	bf00      	nop
 8009768:	e000      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800976a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10c      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009772:	4b05      	ldr	r3, [pc, #20]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009780:	4901      	ldr	r1, [pc, #4]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009782:	4313      	orrs	r3, r2
 8009784:	658b      	str	r3, [r1, #88]	; 0x58
 8009786:	e003      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d018      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a4:	d10a      	bne.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3324      	adds	r3, #36	; 0x24
 80097aa:	2102      	movs	r1, #2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fceb 	bl	800a188 <RCCEx_PLL3_Config>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80097bc:	4b8a      	ldr	r3, [pc, #552]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097c8:	4987      	ldr	r1, [pc, #540]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01a      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097e4:	d10a      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3324      	adds	r3, #36	; 0x24
 80097ea:	2102      	movs	r1, #2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fccb 	bl	800a188 <RCCEx_PLL3_Config>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80097fc:	4b7a      	ldr	r3, [pc, #488]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800980a:	4977      	ldr	r1, [pc, #476]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800980c:	4313      	orrs	r3, r2
 800980e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d034      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009826:	d01d      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800982c:	d817      	bhi.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009836:	d009      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009838:	e011      	b.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3304      	adds	r3, #4
 800983e:	2100      	movs	r1, #0
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fbef 	bl	800a024 <RCCEx_PLL2_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800984a:	e00c      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3324      	adds	r3, #36	; 0x24
 8009850:	2102      	movs	r1, #2
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fc98 	bl	800a188 <RCCEx_PLL3_Config>
 8009858:	4603      	mov	r3, r0
 800985a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800985c:	e003      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]
      break;
 8009862:	e000      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800986c:	4b5e      	ldr	r3, [pc, #376]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800986e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800987a:	495b      	ldr	r1, [pc, #364]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800987c:	4313      	orrs	r3, r2
 800987e:	658b      	str	r3, [r1, #88]	; 0x58
 8009880:	e001      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d033      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800989c:	d01c      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800989e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098a2:	d816      	bhi.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80098a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098a8:	d003      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80098aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098ae:	d007      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80098b0:	e00f      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098b2:	4b4d      	ldr	r3, [pc, #308]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b6:	4a4c      	ldr	r2, [pc, #304]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80098be:	e00c      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3324      	adds	r3, #36	; 0x24
 80098c4:	2101      	movs	r1, #1
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fc5e 	bl	800a188 <RCCEx_PLL3_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80098d0:	e003      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	75fb      	strb	r3, [r7, #23]
      break;
 80098d6:	e000      	b.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80098d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098e0:	4b41      	ldr	r3, [pc, #260]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098ee:	493e      	ldr	r1, [pc, #248]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	654b      	str	r3, [r1, #84]	; 0x54
 80098f4:	e001      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d029      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d003      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800990e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009912:	d007      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009914:	e00f      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009916:	4b34      	ldr	r3, [pc, #208]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	4a33      	ldr	r2, [pc, #204]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800991c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009920:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009922:	e00b      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	2102      	movs	r1, #2
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fb7a 	bl	800a024 <RCCEx_PLL2_Config>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009934:	e002      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	75fb      	strb	r3, [r7, #23]
      break;
 800993a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800993c:	7dfb      	ldrb	r3, [r7, #23]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d109      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009942:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009946:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994e:	4926      	ldr	r1, [pc, #152]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009950:	4313      	orrs	r3, r2
 8009952:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009954:	e001      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3324      	adds	r3, #36	; 0x24
 800996a:	2102      	movs	r1, #2
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fc0b 	bl	800a188 <RCCEx_PLL3_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d033      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800998c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009990:	d017      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009996:	d811      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800999c:	d013      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800999e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099a2:	d80b      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d010      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
 80099a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ac:	d106      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ae:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80099b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b2:	4a0d      	ldr	r2, [pc, #52]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80099b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80099ba:	e007      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	75fb      	strb	r3, [r7, #23]
      break;
 80099c0:	e004      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80099c2:	bf00      	nop
 80099c4:	e002      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80099c6:	bf00      	nop
 80099c8:	e000      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80099ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10c      	bne.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099d2:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80099d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099de:	4902      	ldr	r1, [pc, #8]	; (80099e8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	654b      	str	r3, [r1, #84]	; 0x54
 80099e4:	e004      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80099e6:	bf00      	nop
 80099e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d008      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099fc:	4b29      	ldr	r3, [pc, #164]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a08:	4926      	ldr	r1, [pc, #152]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a1a:	4b22      	ldr	r3, [pc, #136]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a26:	491f      	ldr	r1, [pc, #124]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00d      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a38:	4b1a      	ldr	r3, [pc, #104]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	4a19      	ldr	r2, [pc, #100]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a42:	6113      	str	r3, [r2, #16]
 8009a44:	4b17      	ldr	r3, [pc, #92]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a4e:	4915      	ldr	r1, [pc, #84]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da08      	bge.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a5c:	4b11      	ldr	r3, [pc, #68]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a68:	490e      	ldr	r1, [pc, #56]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d009      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a88:	4906      	ldr	r1, [pc, #24]	; (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009a8e:	7dbb      	ldrb	r3, [r7, #22]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e000      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400

08009aa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009aac:	f7ff f8a6 	bl	8008bfc <HAL_RCC_GetHCLKFreq>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	4b06      	ldr	r3, [pc, #24]	; (8009acc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	091b      	lsrs	r3, r3, #4
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	4904      	ldr	r1, [pc, #16]	; (8009ad0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009abe:	5ccb      	ldrb	r3, [r1, r3]
 8009ac0:	f003 031f 	and.w	r3, r3, #31
 8009ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	58024400 	.word	0x58024400
 8009ad0:	0800e20c 	.word	0x0800e20c

08009ad4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b089      	sub	sp, #36	; 0x24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009adc:	4ba1      	ldr	r3, [pc, #644]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009ae6:	4b9f      	ldr	r3, [pc, #636]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aea:	0b1b      	lsrs	r3, r3, #12
 8009aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009af0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009af2:	4b9c      	ldr	r3, [pc, #624]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af6:	091b      	lsrs	r3, r3, #4
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009afe:	4b99      	ldr	r3, [pc, #612]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b02:	08db      	lsrs	r3, r3, #3
 8009b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	fb02 f303 	mul.w	r3, r2, r3
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 8111 	beq.w	8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	f000 8083 	beq.w	8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	f200 80a1 	bhi.w	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d056      	beq.n	8009bec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b3e:	e099      	b.n	8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b40:	4b88      	ldr	r3, [pc, #544]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d02d      	beq.n	8009ba8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b4c:	4b85      	ldr	r3, [pc, #532]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	08db      	lsrs	r3, r3, #3
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	4a84      	ldr	r2, [pc, #528]	; (8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009b58:	fa22 f303 	lsr.w	r3, r2, r3
 8009b5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	ee07 3a90 	vmov	s15, r3
 8009b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b76:	4b7b      	ldr	r3, [pc, #492]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ba2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ba6:	e087      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bba:	4b6a      	ldr	r3, [pc, #424]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bea:	e065      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bfe:	4b59      	ldr	r3, [pc, #356]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c2e:	e043      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c42:	4b48      	ldr	r3, [pc, #288]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c72:	e021      	b.n	8009cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c86:	4b37      	ldr	r3, [pc, #220]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009cb8:	4b2a      	ldr	r3, [pc, #168]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	0a5b      	lsrs	r3, r3, #9
 8009cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cde:	ee17 2a90 	vmov	r2, s15
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009ce6:	4b1f      	ldr	r3, [pc, #124]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cea:	0c1b      	lsrs	r3, r3, #16
 8009cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf0:	ee07 3a90 	vmov	s15, r3
 8009cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d0c:	ee17 2a90 	vmov	r2, s15
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009d14:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	0e1b      	lsrs	r3, r3, #24
 8009d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d3a:	ee17 2a90 	vmov	r2, s15
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d42:	e008      	b.n	8009d56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	609a      	str	r2, [r3, #8]
}
 8009d56:	bf00      	nop
 8009d58:	3724      	adds	r7, #36	; 0x24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	58024400 	.word	0x58024400
 8009d68:	03d09000 	.word	0x03d09000
 8009d6c:	46000000 	.word	0x46000000
 8009d70:	4c742400 	.word	0x4c742400
 8009d74:	4a742400 	.word	0x4a742400
 8009d78:	4af42400 	.word	0x4af42400

08009d7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b089      	sub	sp, #36	; 0x24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d84:	4ba1      	ldr	r3, [pc, #644]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009d8e:	4b9f      	ldr	r3, [pc, #636]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d92:	0d1b      	lsrs	r3, r3, #20
 8009d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d9a:	4b9c      	ldr	r3, [pc, #624]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	0a1b      	lsrs	r3, r3, #8
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009da6:	4b99      	ldr	r3, [pc, #612]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009daa:	08db      	lsrs	r3, r3, #3
 8009dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009db0:	693a      	ldr	r2, [r7, #16]
 8009db2:	fb02 f303 	mul.w	r3, r2, r3
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8111 	beq.w	8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	f000 8083 	beq.w	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	f200 80a1 	bhi.w	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d056      	beq.n	8009e94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009de6:	e099      	b.n	8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009de8:	4b88      	ldr	r3, [pc, #544]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f003 0320 	and.w	r3, r3, #32
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d02d      	beq.n	8009e50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009df4:	4b85      	ldr	r3, [pc, #532]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	08db      	lsrs	r3, r3, #3
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	4a84      	ldr	r2, [pc, #528]	; (800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
 8009e04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b7b      	ldr	r3, [pc, #492]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e4e:	e087      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b6a      	ldr	r3, [pc, #424]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e92:	e065      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a01c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b59      	ldr	r3, [pc, #356]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ed6:	e043      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a020 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eea:	4b48      	ldr	r3, [pc, #288]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009efe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1a:	e021      	b.n	8009f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a01c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2e:	4b37      	ldr	r3, [pc, #220]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f42:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009f60:	4b2a      	ldr	r3, [pc, #168]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f64:	0a5b      	lsrs	r3, r3, #9
 8009f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f6a:	ee07 3a90 	vmov	s15, r3
 8009f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f86:	ee17 2a90 	vmov	r2, s15
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009f8e:	4b1f      	ldr	r3, [pc, #124]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	0c1b      	lsrs	r3, r3, #16
 8009f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fb4:	ee17 2a90 	vmov	r2, s15
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009fbc:	4b13      	ldr	r3, [pc, #76]	; (800a00c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc0:	0e1b      	lsrs	r3, r3, #24
 8009fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe2:	ee17 2a90 	vmov	r2, s15
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009fea:	e008      	b.n	8009ffe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	609a      	str	r2, [r3, #8]
}
 8009ffe:	bf00      	nop
 800a000:	3724      	adds	r7, #36	; 0x24
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	58024400 	.word	0x58024400
 800a010:	03d09000 	.word	0x03d09000
 800a014:	46000000 	.word	0x46000000
 800a018:	4c742400 	.word	0x4c742400
 800a01c:	4a742400 	.word	0x4a742400
 800a020:	4af42400 	.word	0x4af42400

0800a024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a032:	4b53      	ldr	r3, [pc, #332]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d101      	bne.n	800a042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e099      	b.n	800a176 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a042:	4b4f      	ldr	r3, [pc, #316]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a4e      	ldr	r2, [pc, #312]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a04e:	f7fa fda5 	bl	8004b9c <HAL_GetTick>
 800a052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a054:	e008      	b.n	800a068 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a056:	f7fa fda1 	bl	8004b9c <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d901      	bls.n	800a068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e086      	b.n	800a176 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a068:	4b45      	ldr	r3, [pc, #276]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1f0      	bne.n	800a056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a074:	4b42      	ldr	r3, [pc, #264]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	031b      	lsls	r3, r3, #12
 800a082:	493f      	ldr	r1, [pc, #252]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	628b      	str	r3, [r1, #40]	; 0x28
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	3b01      	subs	r3, #1
 800a098:	025b      	lsls	r3, r3, #9
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	041b      	lsls	r3, r3, #16
 800a0a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	061b      	lsls	r3, r3, #24
 800a0b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0b8:	4931      	ldr	r1, [pc, #196]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a0be:	4b30      	ldr	r3, [pc, #192]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	492d      	ldr	r1, [pc, #180]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a0d0:	4b2b      	ldr	r3, [pc, #172]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	f023 0220 	bic.w	r2, r3, #32
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	4928      	ldr	r1, [pc, #160]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a0e2:	4b27      	ldr	r3, [pc, #156]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	4a26      	ldr	r2, [pc, #152]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0e8:	f023 0310 	bic.w	r3, r3, #16
 800a0ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0ee:	4b24      	ldr	r3, [pc, #144]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0f2:	4b24      	ldr	r3, [pc, #144]	; (800a184 <RCCEx_PLL2_Config+0x160>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	69d2      	ldr	r2, [r2, #28]
 800a0fa:	00d2      	lsls	r2, r2, #3
 800a0fc:	4920      	ldr	r1, [pc, #128]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a102:	4b1f      	ldr	r3, [pc, #124]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	4a1e      	ldr	r2, [pc, #120]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a108:	f043 0310 	orr.w	r3, r3, #16
 800a10c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d106      	bne.n	800a122 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a114:	4b1a      	ldr	r3, [pc, #104]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	4a19      	ldr	r2, [pc, #100]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a11a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a11e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a120:	e00f      	b.n	800a142 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d106      	bne.n	800a136 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a128:	4b15      	ldr	r3, [pc, #84]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	4a14      	ldr	r2, [pc, #80]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a12e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a132:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a134:	e005      	b.n	800a142 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a136:	4b12      	ldr	r3, [pc, #72]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	4a11      	ldr	r2, [pc, #68]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a13c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a140:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a142:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a0e      	ldr	r2, [pc, #56]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a14e:	f7fa fd25 	bl	8004b9c <HAL_GetTick>
 800a152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a154:	e008      	b.n	800a168 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a156:	f7fa fd21 	bl	8004b9c <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d901      	bls.n	800a168 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e006      	b.n	800a176 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a168:	4b05      	ldr	r3, [pc, #20]	; (800a180 <RCCEx_PLL2_Config+0x15c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d0f0      	beq.n	800a156 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a174:	7bfb      	ldrb	r3, [r7, #15]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	58024400 	.word	0x58024400
 800a184:	ffff0007 	.word	0xffff0007

0800a188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a196:	4b53      	ldr	r3, [pc, #332]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	f003 0303 	and.w	r3, r3, #3
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d101      	bne.n	800a1a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e099      	b.n	800a2da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1a6:	4b4f      	ldr	r3, [pc, #316]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a4e      	ldr	r2, [pc, #312]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1b2:	f7fa fcf3 	bl	8004b9c <HAL_GetTick>
 800a1b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1b8:	e008      	b.n	800a1cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a1ba:	f7fa fcef 	bl	8004b9c <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d901      	bls.n	800a1cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e086      	b.n	800a2da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a1cc:	4b45      	ldr	r3, [pc, #276]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1f0      	bne.n	800a1ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a1d8:	4b42      	ldr	r3, [pc, #264]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	051b      	lsls	r3, r3, #20
 800a1e6:	493f      	ldr	r1, [pc, #252]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	628b      	str	r3, [r1, #40]	; 0x28
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	025b      	lsls	r3, r3, #9
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	3b01      	subs	r3, #1
 800a208:	041b      	lsls	r3, r3, #16
 800a20a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	3b01      	subs	r3, #1
 800a216:	061b      	lsls	r3, r3, #24
 800a218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a21c:	4931      	ldr	r1, [pc, #196]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a21e:	4313      	orrs	r3, r2
 800a220:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a222:	4b30      	ldr	r3, [pc, #192]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	492d      	ldr	r1, [pc, #180]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a230:	4313      	orrs	r3, r2
 800a232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a234:	4b2b      	ldr	r3, [pc, #172]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	4928      	ldr	r1, [pc, #160]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a242:	4313      	orrs	r3, r2
 800a244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a246:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	4a26      	ldr	r2, [pc, #152]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a24c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a252:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a256:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <RCCEx_PLL3_Config+0x160>)
 800a258:	4013      	ands	r3, r2
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	69d2      	ldr	r2, [r2, #28]
 800a25e:	00d2      	lsls	r2, r2, #3
 800a260:	4920      	ldr	r1, [pc, #128]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a262:	4313      	orrs	r3, r2
 800a264:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a266:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26a:	4a1e      	ldr	r2, [pc, #120]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a26c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a278:	4b1a      	ldr	r3, [pc, #104]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27c:	4a19      	ldr	r2, [pc, #100]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a27e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a282:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a284:	e00f      	b.n	800a2a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d106      	bne.n	800a29a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a28c:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	4a14      	ldr	r2, [pc, #80]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a296:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a298:	e005      	b.n	800a2a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a29a:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29e:	4a11      	ldr	r2, [pc, #68]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a0e      	ldr	r2, [pc, #56]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2b2:	f7fa fc73 	bl	8004b9c <HAL_GetTick>
 800a2b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2b8:	e008      	b.n	800a2cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a2ba:	f7fa fc6f 	bl	8004b9c <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d901      	bls.n	800a2cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e006      	b.n	800a2da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2cc:	4b05      	ldr	r3, [pc, #20]	; (800a2e4 <RCCEx_PLL3_Config+0x15c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0f0      	beq.n	800a2ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
 800a2e8:	ffff0007 	.word	0xffff0007

0800a2ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e049      	b.n	800a392 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f7f9 ffa0 	bl	8004258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3304      	adds	r3, #4
 800a328:	4619      	mov	r1, r3
 800a32a:	4610      	mov	r0, r2
 800a32c:	f000 fe0c 	bl	800af48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d001      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e05e      	b.n	800a472 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f042 0201 	orr.w	r2, r2, #1
 800a3ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a2b      	ldr	r2, [pc, #172]	; (800a480 <HAL_TIM_Base_Start_IT+0xe4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d02c      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3de:	d027      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a27      	ldr	r2, [pc, #156]	; (800a484 <HAL_TIM_Base_Start_IT+0xe8>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d022      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a26      	ldr	r2, [pc, #152]	; (800a488 <HAL_TIM_Base_Start_IT+0xec>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d01d      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a24      	ldr	r2, [pc, #144]	; (800a48c <HAL_TIM_Base_Start_IT+0xf0>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d018      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a23      	ldr	r2, [pc, #140]	; (800a490 <HAL_TIM_Base_Start_IT+0xf4>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d013      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a21      	ldr	r2, [pc, #132]	; (800a494 <HAL_TIM_Base_Start_IT+0xf8>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00e      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a20      	ldr	r2, [pc, #128]	; (800a498 <HAL_TIM_Base_Start_IT+0xfc>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d009      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1e      	ldr	r2, [pc, #120]	; (800a49c <HAL_TIM_Base_Start_IT+0x100>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d004      	beq.n	800a430 <HAL_TIM_Base_Start_IT+0x94>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a1d      	ldr	r2, [pc, #116]	; (800a4a0 <HAL_TIM_Base_Start_IT+0x104>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d115      	bne.n	800a45c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689a      	ldr	r2, [r3, #8]
 800a436:	4b1b      	ldr	r3, [pc, #108]	; (800a4a4 <HAL_TIM_Base_Start_IT+0x108>)
 800a438:	4013      	ands	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b06      	cmp	r3, #6
 800a440:	d015      	beq.n	800a46e <HAL_TIM_Base_Start_IT+0xd2>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a448:	d011      	beq.n	800a46e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0201 	orr.w	r2, r2, #1
 800a458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a45a:	e008      	b.n	800a46e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	e000      	b.n	800a470 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a46e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	40010000 	.word	0x40010000
 800a484:	40000400 	.word	0x40000400
 800a488:	40000800 	.word	0x40000800
 800a48c:	40000c00 	.word	0x40000c00
 800a490:	40010400 	.word	0x40010400
 800a494:	40001800 	.word	0x40001800
 800a498:	40014000 	.word	0x40014000
 800a49c:	4000e000 	.word	0x4000e000
 800a4a0:	4000e400 	.word	0x4000e400
 800a4a4:	00010007 	.word	0x00010007

0800a4a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e049      	b.n	800a54e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7f9 fe7a 	bl	80041c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f000 fd2e 	bl	800af48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d109      	bne.n	800a580 <HAL_TIM_PWM_Start_IT+0x28>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b01      	cmp	r3, #1
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	e03c      	b.n	800a5fa <HAL_TIM_PWM_Start_IT+0xa2>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b04      	cmp	r3, #4
 800a584:	d109      	bne.n	800a59a <HAL_TIM_PWM_Start_IT+0x42>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b01      	cmp	r3, #1
 800a590:	bf14      	ite	ne
 800a592:	2301      	movne	r3, #1
 800a594:	2300      	moveq	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	e02f      	b.n	800a5fa <HAL_TIM_PWM_Start_IT+0xa2>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d109      	bne.n	800a5b4 <HAL_TIM_PWM_Start_IT+0x5c>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	bf14      	ite	ne
 800a5ac:	2301      	movne	r3, #1
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	e022      	b.n	800a5fa <HAL_TIM_PWM_Start_IT+0xa2>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b0c      	cmp	r3, #12
 800a5b8:	d109      	bne.n	800a5ce <HAL_TIM_PWM_Start_IT+0x76>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	bf14      	ite	ne
 800a5c6:	2301      	movne	r3, #1
 800a5c8:	2300      	moveq	r3, #0
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	e015      	b.n	800a5fa <HAL_TIM_PWM_Start_IT+0xa2>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b10      	cmp	r3, #16
 800a5d2:	d109      	bne.n	800a5e8 <HAL_TIM_PWM_Start_IT+0x90>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	bf14      	ite	ne
 800a5e0:	2301      	movne	r3, #1
 800a5e2:	2300      	moveq	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	e008      	b.n	800a5fa <HAL_TIM_PWM_Start_IT+0xa2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	bf14      	ite	ne
 800a5f4:	2301      	movne	r3, #1
 800a5f6:	2300      	moveq	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e0f6      	b.n	800a7f0 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d104      	bne.n	800a612 <HAL_TIM_PWM_Start_IT+0xba>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a610:	e023      	b.n	800a65a <HAL_TIM_PWM_Start_IT+0x102>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b04      	cmp	r3, #4
 800a616:	d104      	bne.n	800a622 <HAL_TIM_PWM_Start_IT+0xca>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a620:	e01b      	b.n	800a65a <HAL_TIM_PWM_Start_IT+0x102>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b08      	cmp	r3, #8
 800a626:	d104      	bne.n	800a632 <HAL_TIM_PWM_Start_IT+0xda>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a630:	e013      	b.n	800a65a <HAL_TIM_PWM_Start_IT+0x102>
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b0c      	cmp	r3, #12
 800a636:	d104      	bne.n	800a642 <HAL_TIM_PWM_Start_IT+0xea>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2202      	movs	r2, #2
 800a63c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a640:	e00b      	b.n	800a65a <HAL_TIM_PWM_Start_IT+0x102>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b10      	cmp	r3, #16
 800a646:	d104      	bne.n	800a652 <HAL_TIM_PWM_Start_IT+0xfa>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a650:	e003      	b.n	800a65a <HAL_TIM_PWM_Start_IT+0x102>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2202      	movs	r2, #2
 800a656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b0c      	cmp	r3, #12
 800a65e:	d841      	bhi.n	800a6e4 <HAL_TIM_PWM_Start_IT+0x18c>
 800a660:	a201      	add	r2, pc, #4	; (adr r2, 800a668 <HAL_TIM_PWM_Start_IT+0x110>)
 800a662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a666:	bf00      	nop
 800a668:	0800a69d 	.word	0x0800a69d
 800a66c:	0800a6e5 	.word	0x0800a6e5
 800a670:	0800a6e5 	.word	0x0800a6e5
 800a674:	0800a6e5 	.word	0x0800a6e5
 800a678:	0800a6af 	.word	0x0800a6af
 800a67c:	0800a6e5 	.word	0x0800a6e5
 800a680:	0800a6e5 	.word	0x0800a6e5
 800a684:	0800a6e5 	.word	0x0800a6e5
 800a688:	0800a6c1 	.word	0x0800a6c1
 800a68c:	0800a6e5 	.word	0x0800a6e5
 800a690:	0800a6e5 	.word	0x0800a6e5
 800a694:	0800a6e5 	.word	0x0800a6e5
 800a698:	0800a6d3 	.word	0x0800a6d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68da      	ldr	r2, [r3, #12]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f042 0202 	orr.w	r2, r2, #2
 800a6aa:	60da      	str	r2, [r3, #12]
      break;
 800a6ac:	e01d      	b.n	800a6ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f042 0204 	orr.w	r2, r2, #4
 800a6bc:	60da      	str	r2, [r3, #12]
      break;
 800a6be:	e014      	b.n	800a6ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68da      	ldr	r2, [r3, #12]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0208 	orr.w	r2, r2, #8
 800a6ce:	60da      	str	r2, [r3, #12]
      break;
 800a6d0:	e00b      	b.n	800a6ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f042 0210 	orr.w	r2, r2, #16
 800a6e0:	60da      	str	r2, [r3, #12]
      break;
 800a6e2:	e002      	b.n	800a6ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e8:	bf00      	nop
  }

  if (status == HAL_OK)
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d17e      	bne.n	800a7ee <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 ffa1 	bl	800b640 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a3d      	ldr	r2, [pc, #244]	; (800a7f8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d013      	beq.n	800a730 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a3b      	ldr	r2, [pc, #236]	; (800a7fc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d00e      	beq.n	800a730 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a3a      	ldr	r2, [pc, #232]	; (800a800 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d009      	beq.n	800a730 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a38      	ldr	r2, [pc, #224]	; (800a804 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d004      	beq.n	800a730 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a37      	ldr	r2, [pc, #220]	; (800a808 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d101      	bne.n	800a734 <HAL_TIM_PWM_Start_IT+0x1dc>
 800a730:	2301      	movs	r3, #1
 800a732:	e000      	b.n	800a736 <HAL_TIM_PWM_Start_IT+0x1de>
 800a734:	2300      	movs	r3, #0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d007      	beq.n	800a74a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a748:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a2a      	ldr	r2, [pc, #168]	; (800a7f8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d02c      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a75c:	d027      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a2a      	ldr	r2, [pc, #168]	; (800a80c <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d022      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a28      	ldr	r2, [pc, #160]	; (800a810 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d01d      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a27      	ldr	r2, [pc, #156]	; (800a814 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d018      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a1e      	ldr	r2, [pc, #120]	; (800a7fc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d013      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a23      	ldr	r2, [pc, #140]	; (800a818 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d00e      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1a      	ldr	r2, [pc, #104]	; (800a800 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d009      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a1f      	ldr	r2, [pc, #124]	; (800a81c <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d004      	beq.n	800a7ae <HAL_TIM_PWM_Start_IT+0x256>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1d      	ldr	r2, [pc, #116]	; (800a820 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d115      	bne.n	800a7da <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	4b1b      	ldr	r3, [pc, #108]	; (800a824 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	2b06      	cmp	r3, #6
 800a7be:	d015      	beq.n	800a7ec <HAL_TIM_PWM_Start_IT+0x294>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7c6:	d011      	beq.n	800a7ec <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0201 	orr.w	r2, r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7d8:	e008      	b.n	800a7ec <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f042 0201 	orr.w	r2, r2, #1
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	e000      	b.n	800a7ee <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	40010000 	.word	0x40010000
 800a7fc:	40010400 	.word	0x40010400
 800a800:	40014000 	.word	0x40014000
 800a804:	40014400 	.word	0x40014400
 800a808:	40014800 	.word	0x40014800
 800a80c:	40000400 	.word	0x40000400
 800a810:	40000800 	.word	0x40000800
 800a814:	40000c00 	.word	0x40000c00
 800a818:	40001800 	.word	0x40001800
 800a81c:	4000e000 	.word	0x4000e000
 800a820:	4000e400 	.word	0x4000e400
 800a824:	00010007 	.word	0x00010007

0800a828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e08f      	b.n	800a95c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7f9 fbab 	bl	8003fac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2202      	movs	r2, #2
 800a85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	6899      	ldr	r1, [r3, #8]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	4b3e      	ldr	r3, [pc, #248]	; (800a964 <HAL_TIM_Encoder_Init+0x13c>)
 800a86a:	400b      	ands	r3, r1
 800a86c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3304      	adds	r3, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f000 fb65 	bl	800af48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	4b31      	ldr	r3, [pc, #196]	; (800a968 <HAL_TIM_Encoder_Init+0x140>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	689a      	ldr	r2, [r3, #8]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	699b      	ldr	r3, [r3, #24]
 800a8b0:	021b      	lsls	r3, r3, #8
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	4b2b      	ldr	r3, [pc, #172]	; (800a96c <HAL_TIM_Encoder_Init+0x144>)
 800a8be:	4013      	ands	r3, r2
 800a8c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a8c2:	693a      	ldr	r2, [r7, #16]
 800a8c4:	4b2a      	ldr	r3, [pc, #168]	; (800a970 <HAL_TIM_Encoder_Init+0x148>)
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68da      	ldr	r2, [r3, #12]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	021b      	lsls	r3, r3, #8
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	011a      	lsls	r2, r3, #4
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	031b      	lsls	r3, r3, #12
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a8f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a8fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	011b      	lsls	r3, r3, #4
 800a90a:	4313      	orrs	r3, r2
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	fffebff8 	.word	0xfffebff8
 800a968:	fffffcfc 	.word	0xfffffcfc
 800a96c:	fffff3f3 	.word	0xfffff3f3
 800a970:	ffff0f0f 	.word	0xffff0f0f

0800a974 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a984:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a98c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a994:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a99c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d110      	bne.n	800a9c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d102      	bne.n	800a9b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9aa:	7b7b      	ldrb	r3, [r7, #13]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d001      	beq.n	800a9b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e069      	b.n	800aa88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c4:	e031      	b.n	800aa2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d110      	bne.n	800a9ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d102      	bne.n	800a9d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9d2:	7b3b      	ldrb	r3, [r7, #12]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d001      	beq.n	800a9dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e055      	b.n	800aa88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ec:	e01d      	b.n	800aa2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d108      	bne.n	800aa06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d105      	bne.n	800aa06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9fa:	7b7b      	ldrb	r3, [r7, #13]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d102      	bne.n	800aa06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa00:	7b3b      	ldrb	r3, [r7, #12]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d001      	beq.n	800aa0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e03e      	b.n	800aa88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2202      	movs	r2, #2
 800aa16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2202      	movs	r2, #2
 800aa26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <HAL_TIM_Encoder_Start+0xc4>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d008      	beq.n	800aa48 <HAL_TIM_Encoder_Start+0xd4>
 800aa36:	e00f      	b.n	800aa58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	2100      	movs	r1, #0
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fdfd 	bl	800b640 <TIM_CCxChannelCmd>
      break;
 800aa46:	e016      	b.n	800aa76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	2104      	movs	r1, #4
 800aa50:	4618      	mov	r0, r3
 800aa52:	f000 fdf5 	bl	800b640 <TIM_CCxChannelCmd>
      break;
 800aa56:	e00e      	b.n	800aa76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	2100      	movs	r1, #0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 fded 	bl	800b640 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	2104      	movs	r1, #4
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 fde6 	bl	800b640 <TIM_CCxChannelCmd>
      break;
 800aa74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f042 0201 	orr.w	r2, r2, #1
 800aa84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d122      	bne.n	800aaec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d11b      	bne.n	800aaec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0202 	mvn.w	r2, #2
 800aabc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fa1a 	bl	800af0c <HAL_TIM_IC_CaptureCallback>
 800aad8:	e005      	b.n	800aae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa0c 	bl	800aef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fa1d 	bl	800af20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b04      	cmp	r3, #4
 800aaf8:	d122      	bne.n	800ab40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d11b      	bne.n	800ab40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f06f 0204 	mvn.w	r2, #4
 800ab10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2202      	movs	r2, #2
 800ab16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	699b      	ldr	r3, [r3, #24]
 800ab1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d003      	beq.n	800ab2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f9f0 	bl	800af0c <HAL_TIM_IC_CaptureCallback>
 800ab2c:	e005      	b.n	800ab3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f9e2 	bl	800aef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f9f3 	bl	800af20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	f003 0308 	and.w	r3, r3, #8
 800ab4a:	2b08      	cmp	r3, #8
 800ab4c:	d122      	bne.n	800ab94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f003 0308 	and.w	r3, r3, #8
 800ab58:	2b08      	cmp	r3, #8
 800ab5a:	d11b      	bne.n	800ab94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f06f 0208 	mvn.w	r2, #8
 800ab64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2204      	movs	r2, #4
 800ab6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	f003 0303 	and.w	r3, r3, #3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f9c6 	bl	800af0c <HAL_TIM_IC_CaptureCallback>
 800ab80:	e005      	b.n	800ab8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f9b8 	bl	800aef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f9c9 	bl	800af20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	f003 0310 	and.w	r3, r3, #16
 800ab9e:	2b10      	cmp	r3, #16
 800aba0:	d122      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f003 0310 	and.w	r3, r3, #16
 800abac:	2b10      	cmp	r3, #16
 800abae:	d11b      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f06f 0210 	mvn.w	r2, #16
 800abb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2208      	movs	r2, #8
 800abbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f99c 	bl	800af0c <HAL_TIM_IC_CaptureCallback>
 800abd4:	e005      	b.n	800abe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f98e 	bl	800aef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f99f 	bl	800af20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d10e      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f003 0301 	and.w	r3, r3, #1
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d107      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f06f 0201 	mvn.w	r2, #1
 800ac0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7f9 fdce 	bl	80047b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1e:	2b80      	cmp	r3, #128	; 0x80
 800ac20:	d10e      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2c:	2b80      	cmp	r3, #128	; 0x80
 800ac2e:	d107      	bne.n	800ac40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fe6c 	bl	800b918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4e:	d10e      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac5a:	2b80      	cmp	r3, #128	; 0x80
 800ac5c:	d107      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fe5f 	bl	800b92c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac78:	2b40      	cmp	r3, #64	; 0x40
 800ac7a:	d10e      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac86:	2b40      	cmp	r3, #64	; 0x40
 800ac88:	d107      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f94d 	bl	800af34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	f003 0320 	and.w	r3, r3, #32
 800aca4:	2b20      	cmp	r3, #32
 800aca6:	d10e      	bne.n	800acc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	f003 0320 	and.w	r3, r3, #32
 800acb2:	2b20      	cmp	r3, #32
 800acb4:	d107      	bne.n	800acc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f06f 0220 	mvn.w	r2, #32
 800acbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fe1f 	bl	800b904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d101      	bne.n	800acee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800acea:	2302      	movs	r3, #2
 800acec:	e0ff      	b.n	800aeee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2201      	movs	r2, #1
 800acf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2b14      	cmp	r3, #20
 800acfa:	f200 80f0 	bhi.w	800aede <HAL_TIM_PWM_ConfigChannel+0x20e>
 800acfe:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad59 	.word	0x0800ad59
 800ad08:	0800aedf 	.word	0x0800aedf
 800ad0c:	0800aedf 	.word	0x0800aedf
 800ad10:	0800aedf 	.word	0x0800aedf
 800ad14:	0800ad99 	.word	0x0800ad99
 800ad18:	0800aedf 	.word	0x0800aedf
 800ad1c:	0800aedf 	.word	0x0800aedf
 800ad20:	0800aedf 	.word	0x0800aedf
 800ad24:	0800addb 	.word	0x0800addb
 800ad28:	0800aedf 	.word	0x0800aedf
 800ad2c:	0800aedf 	.word	0x0800aedf
 800ad30:	0800aedf 	.word	0x0800aedf
 800ad34:	0800ae1b 	.word	0x0800ae1b
 800ad38:	0800aedf 	.word	0x0800aedf
 800ad3c:	0800aedf 	.word	0x0800aedf
 800ad40:	0800aedf 	.word	0x0800aedf
 800ad44:	0800ae5d 	.word	0x0800ae5d
 800ad48:	0800aedf 	.word	0x0800aedf
 800ad4c:	0800aedf 	.word	0x0800aedf
 800ad50:	0800aedf 	.word	0x0800aedf
 800ad54:	0800ae9d 	.word	0x0800ae9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68b9      	ldr	r1, [r7, #8]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 f998 	bl	800b094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	699a      	ldr	r2, [r3, #24]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0208 	orr.w	r2, r2, #8
 800ad72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	699a      	ldr	r2, [r3, #24]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f022 0204 	bic.w	r2, r2, #4
 800ad82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6999      	ldr	r1, [r3, #24]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	691a      	ldr	r2, [r3, #16]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	619a      	str	r2, [r3, #24]
      break;
 800ad96:	e0a5      	b.n	800aee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68b9      	ldr	r1, [r7, #8]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fa08 	bl	800b1b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	699a      	ldr	r2, [r3, #24]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6999      	ldr	r1, [r3, #24]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	021a      	lsls	r2, r3, #8
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	619a      	str	r2, [r3, #24]
      break;
 800add8:	e084      	b.n	800aee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fa71 	bl	800b2c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69da      	ldr	r2, [r3, #28]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f042 0208 	orr.w	r2, r2, #8
 800adf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	69da      	ldr	r2, [r3, #28]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f022 0204 	bic.w	r2, r2, #4
 800ae04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	69d9      	ldr	r1, [r3, #28]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	61da      	str	r2, [r3, #28]
      break;
 800ae18:	e064      	b.n	800aee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fad9 	bl	800b3d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	69da      	ldr	r2, [r3, #28]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69d9      	ldr	r1, [r3, #28]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	021a      	lsls	r2, r3, #8
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	61da      	str	r2, [r3, #28]
      break;
 800ae5a:	e043      	b.n	800aee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fb22 	bl	800b4ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f042 0208 	orr.w	r2, r2, #8
 800ae76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f022 0204 	bic.w	r2, r2, #4
 800ae86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	691a      	ldr	r2, [r3, #16]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae9a:	e023      	b.n	800aee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68b9      	ldr	r1, [r7, #8]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 fb66 	bl	800b574 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aec6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	021a      	lsls	r2, r3, #8
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aedc:	e002      	b.n	800aee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	75fb      	strb	r3, [r7, #23]
      break;
 800aee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3718      	adds	r7, #24
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop

0800aef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a44      	ldr	r2, [pc, #272]	; (800b06c <TIM_Base_SetConfig+0x124>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d013      	beq.n	800af88 <TIM_Base_SetConfig+0x40>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af66:	d00f      	beq.n	800af88 <TIM_Base_SetConfig+0x40>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a41      	ldr	r2, [pc, #260]	; (800b070 <TIM_Base_SetConfig+0x128>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00b      	beq.n	800af88 <TIM_Base_SetConfig+0x40>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a40      	ldr	r2, [pc, #256]	; (800b074 <TIM_Base_SetConfig+0x12c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d007      	beq.n	800af88 <TIM_Base_SetConfig+0x40>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a3f      	ldr	r2, [pc, #252]	; (800b078 <TIM_Base_SetConfig+0x130>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d003      	beq.n	800af88 <TIM_Base_SetConfig+0x40>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a3e      	ldr	r2, [pc, #248]	; (800b07c <TIM_Base_SetConfig+0x134>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d108      	bne.n	800af9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4313      	orrs	r3, r2
 800af98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a33      	ldr	r2, [pc, #204]	; (800b06c <TIM_Base_SetConfig+0x124>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d027      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa8:	d023      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a30      	ldr	r2, [pc, #192]	; (800b070 <TIM_Base_SetConfig+0x128>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d01f      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a2f      	ldr	r2, [pc, #188]	; (800b074 <TIM_Base_SetConfig+0x12c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d01b      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a2e      	ldr	r2, [pc, #184]	; (800b078 <TIM_Base_SetConfig+0x130>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d017      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a2d      	ldr	r2, [pc, #180]	; (800b07c <TIM_Base_SetConfig+0x134>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d013      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a2c      	ldr	r2, [pc, #176]	; (800b080 <TIM_Base_SetConfig+0x138>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00f      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a2b      	ldr	r2, [pc, #172]	; (800b084 <TIM_Base_SetConfig+0x13c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00b      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a2a      	ldr	r2, [pc, #168]	; (800b088 <TIM_Base_SetConfig+0x140>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d007      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a29      	ldr	r2, [pc, #164]	; (800b08c <TIM_Base_SetConfig+0x144>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d003      	beq.n	800aff2 <TIM_Base_SetConfig+0xaa>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a28      	ldr	r2, [pc, #160]	; (800b090 <TIM_Base_SetConfig+0x148>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d108      	bne.n	800b004 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	4313      	orrs	r3, r2
 800b002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a10      	ldr	r2, [pc, #64]	; (800b06c <TIM_Base_SetConfig+0x124>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d00f      	beq.n	800b050 <TIM_Base_SetConfig+0x108>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a12      	ldr	r2, [pc, #72]	; (800b07c <TIM_Base_SetConfig+0x134>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00b      	beq.n	800b050 <TIM_Base_SetConfig+0x108>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a11      	ldr	r2, [pc, #68]	; (800b080 <TIM_Base_SetConfig+0x138>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d007      	beq.n	800b050 <TIM_Base_SetConfig+0x108>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a10      	ldr	r2, [pc, #64]	; (800b084 <TIM_Base_SetConfig+0x13c>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d003      	beq.n	800b050 <TIM_Base_SetConfig+0x108>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a0f      	ldr	r2, [pc, #60]	; (800b088 <TIM_Base_SetConfig+0x140>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d103      	bne.n	800b058 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	615a      	str	r2, [r3, #20]
}
 800b05e:	bf00      	nop
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	40010000 	.word	0x40010000
 800b070:	40000400 	.word	0x40000400
 800b074:	40000800 	.word	0x40000800
 800b078:	40000c00 	.word	0x40000c00
 800b07c:	40010400 	.word	0x40010400
 800b080:	40014000 	.word	0x40014000
 800b084:	40014400 	.word	0x40014400
 800b088:	40014800 	.word	0x40014800
 800b08c:	4000e000 	.word	0x4000e000
 800b090:	4000e400 	.word	0x4000e400

0800b094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	f023 0201 	bic.w	r2, r3, #1
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4b37      	ldr	r3, [pc, #220]	; (800b19c <TIM_OC1_SetConfig+0x108>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0303 	bic.w	r3, r3, #3
 800b0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f023 0302 	bic.w	r3, r3, #2
 800b0dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a2d      	ldr	r2, [pc, #180]	; (800b1a0 <TIM_OC1_SetConfig+0x10c>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00f      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a2c      	ldr	r2, [pc, #176]	; (800b1a4 <TIM_OC1_SetConfig+0x110>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d00b      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a2b      	ldr	r2, [pc, #172]	; (800b1a8 <TIM_OC1_SetConfig+0x114>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d007      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a2a      	ldr	r2, [pc, #168]	; (800b1ac <TIM_OC1_SetConfig+0x118>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d003      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a29      	ldr	r2, [pc, #164]	; (800b1b0 <TIM_OC1_SetConfig+0x11c>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d10c      	bne.n	800b12a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f023 0308 	bic.w	r3, r3, #8
 800b116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	4313      	orrs	r3, r2
 800b120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f023 0304 	bic.w	r3, r3, #4
 800b128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a1c      	ldr	r2, [pc, #112]	; (800b1a0 <TIM_OC1_SetConfig+0x10c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00f      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a1b      	ldr	r2, [pc, #108]	; (800b1a4 <TIM_OC1_SetConfig+0x110>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00b      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a1a      	ldr	r2, [pc, #104]	; (800b1a8 <TIM_OC1_SetConfig+0x114>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d007      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a19      	ldr	r2, [pc, #100]	; (800b1ac <TIM_OC1_SetConfig+0x118>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a18      	ldr	r2, [pc, #96]	; (800b1b0 <TIM_OC1_SetConfig+0x11c>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d111      	bne.n	800b176 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	4313      	orrs	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	4313      	orrs	r3, r2
 800b174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	621a      	str	r2, [r3, #32]
}
 800b190:	bf00      	nop
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	fffeff8f 	.word	0xfffeff8f
 800b1a0:	40010000 	.word	0x40010000
 800b1a4:	40010400 	.word	0x40010400
 800b1a8:	40014000 	.word	0x40014000
 800b1ac:	40014400 	.word	0x40014400
 800b1b0:	40014800 	.word	0x40014800

0800b1b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	f023 0210 	bic.w	r2, r3, #16
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4b34      	ldr	r3, [pc, #208]	; (800b2b0 <TIM_OC2_SetConfig+0xfc>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	021b      	lsls	r3, r3, #8
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f023 0320 	bic.w	r3, r3, #32
 800b1fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	011b      	lsls	r3, r3, #4
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	4313      	orrs	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a29      	ldr	r2, [pc, #164]	; (800b2b4 <TIM_OC2_SetConfig+0x100>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d003      	beq.n	800b21c <TIM_OC2_SetConfig+0x68>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a28      	ldr	r2, [pc, #160]	; (800b2b8 <TIM_OC2_SetConfig+0x104>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d10d      	bne.n	800b238 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <TIM_OC2_SetConfig+0x100>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d00f      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a1d      	ldr	r2, [pc, #116]	; (800b2b8 <TIM_OC2_SetConfig+0x104>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00b      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a1c      	ldr	r2, [pc, #112]	; (800b2bc <TIM_OC2_SetConfig+0x108>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d007      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <TIM_OC2_SetConfig+0x10c>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d003      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <TIM_OC2_SetConfig+0x110>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d113      	bne.n	800b288 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b26e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	4313      	orrs	r3, r2
 800b27a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	4313      	orrs	r3, r2
 800b286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	621a      	str	r2, [r3, #32]
}
 800b2a2:	bf00      	nop
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	feff8fff 	.word	0xfeff8fff
 800b2b4:	40010000 	.word	0x40010000
 800b2b8:	40010400 	.word	0x40010400
 800b2bc:	40014000 	.word	0x40014000
 800b2c0:	40014400 	.word	0x40014400
 800b2c4:	40014800 	.word	0x40014800

0800b2c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4b33      	ldr	r3, [pc, #204]	; (800b3c0 <TIM_OC3_SetConfig+0xf8>)
 800b2f4:	4013      	ands	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0303 	bic.w	r3, r3, #3
 800b2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	021b      	lsls	r3, r3, #8
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a28      	ldr	r2, [pc, #160]	; (800b3c4 <TIM_OC3_SetConfig+0xfc>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_OC3_SetConfig+0x66>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a27      	ldr	r2, [pc, #156]	; (800b3c8 <TIM_OC3_SetConfig+0x100>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d10d      	bne.n	800b34a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a1d      	ldr	r2, [pc, #116]	; (800b3c4 <TIM_OC3_SetConfig+0xfc>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d00f      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a1c      	ldr	r2, [pc, #112]	; (800b3c8 <TIM_OC3_SetConfig+0x100>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d00b      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a1b      	ldr	r2, [pc, #108]	; (800b3cc <TIM_OC3_SetConfig+0x104>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d007      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a1a      	ldr	r2, [pc, #104]	; (800b3d0 <TIM_OC3_SetConfig+0x108>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d003      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a19      	ldr	r2, [pc, #100]	; (800b3d4 <TIM_OC3_SetConfig+0x10c>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d113      	bne.n	800b39a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	4313      	orrs	r3, r2
 800b398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	621a      	str	r2, [r3, #32]
}
 800b3b4:	bf00      	nop
 800b3b6:	371c      	adds	r7, #28
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	fffeff8f 	.word	0xfffeff8f
 800b3c4:	40010000 	.word	0x40010000
 800b3c8:	40010400 	.word	0x40010400
 800b3cc:	40014000 	.word	0x40014000
 800b3d0:	40014400 	.word	0x40014400
 800b3d4:	40014800 	.word	0x40014800

0800b3d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4b24      	ldr	r3, [pc, #144]	; (800b494 <TIM_OC4_SetConfig+0xbc>)
 800b404:	4013      	ands	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	021b      	lsls	r3, r3, #8
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4313      	orrs	r3, r2
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	689b      	ldr	r3, [r3, #8]
 800b428:	031b      	lsls	r3, r3, #12
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a19      	ldr	r2, [pc, #100]	; (800b498 <TIM_OC4_SetConfig+0xc0>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d00f      	beq.n	800b458 <TIM_OC4_SetConfig+0x80>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a18      	ldr	r2, [pc, #96]	; (800b49c <TIM_OC4_SetConfig+0xc4>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d00b      	beq.n	800b458 <TIM_OC4_SetConfig+0x80>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a17      	ldr	r2, [pc, #92]	; (800b4a0 <TIM_OC4_SetConfig+0xc8>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d007      	beq.n	800b458 <TIM_OC4_SetConfig+0x80>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a16      	ldr	r2, [pc, #88]	; (800b4a4 <TIM_OC4_SetConfig+0xcc>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d003      	beq.n	800b458 <TIM_OC4_SetConfig+0x80>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a15      	ldr	r2, [pc, #84]	; (800b4a8 <TIM_OC4_SetConfig+0xd0>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d109      	bne.n	800b46c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b45e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	019b      	lsls	r3, r3, #6
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	621a      	str	r2, [r3, #32]
}
 800b486:	bf00      	nop
 800b488:	371c      	adds	r7, #28
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	feff8fff 	.word	0xfeff8fff
 800b498:	40010000 	.word	0x40010000
 800b49c:	40010400 	.word	0x40010400
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	40014400 	.word	0x40014400
 800b4a8:	40014800 	.word	0x40014800

0800b4ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4b21      	ldr	r3, [pc, #132]	; (800b55c <TIM_OC5_SetConfig+0xb0>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b4ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	041b      	lsls	r3, r3, #16
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a18      	ldr	r2, [pc, #96]	; (800b560 <TIM_OC5_SetConfig+0xb4>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00f      	beq.n	800b522 <TIM_OC5_SetConfig+0x76>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a17      	ldr	r2, [pc, #92]	; (800b564 <TIM_OC5_SetConfig+0xb8>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d00b      	beq.n	800b522 <TIM_OC5_SetConfig+0x76>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a16      	ldr	r2, [pc, #88]	; (800b568 <TIM_OC5_SetConfig+0xbc>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d007      	beq.n	800b522 <TIM_OC5_SetConfig+0x76>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a15      	ldr	r2, [pc, #84]	; (800b56c <TIM_OC5_SetConfig+0xc0>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d003      	beq.n	800b522 <TIM_OC5_SetConfig+0x76>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a14      	ldr	r2, [pc, #80]	; (800b570 <TIM_OC5_SetConfig+0xc4>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d109      	bne.n	800b536 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	021b      	lsls	r3, r3, #8
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	4313      	orrs	r3, r2
 800b534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	621a      	str	r2, [r3, #32]
}
 800b550:	bf00      	nop
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	fffeff8f 	.word	0xfffeff8f
 800b560:	40010000 	.word	0x40010000
 800b564:	40010400 	.word	0x40010400
 800b568:	40014000 	.word	0x40014000
 800b56c:	40014400 	.word	0x40014400
 800b570:	40014800 	.word	0x40014800

0800b574 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b574:	b480      	push	{r7}
 800b576:	b087      	sub	sp, #28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	4b22      	ldr	r3, [pc, #136]	; (800b628 <TIM_OC6_SetConfig+0xb4>)
 800b5a0:	4013      	ands	r3, r2
 800b5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	021b      	lsls	r3, r3, #8
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	051b      	lsls	r3, r3, #20
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a19      	ldr	r2, [pc, #100]	; (800b62c <TIM_OC6_SetConfig+0xb8>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d00f      	beq.n	800b5ec <TIM_OC6_SetConfig+0x78>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a18      	ldr	r2, [pc, #96]	; (800b630 <TIM_OC6_SetConfig+0xbc>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00b      	beq.n	800b5ec <TIM_OC6_SetConfig+0x78>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a17      	ldr	r2, [pc, #92]	; (800b634 <TIM_OC6_SetConfig+0xc0>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d007      	beq.n	800b5ec <TIM_OC6_SetConfig+0x78>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a16      	ldr	r2, [pc, #88]	; (800b638 <TIM_OC6_SetConfig+0xc4>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d003      	beq.n	800b5ec <TIM_OC6_SetConfig+0x78>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a15      	ldr	r2, [pc, #84]	; (800b63c <TIM_OC6_SetConfig+0xc8>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d109      	bne.n	800b600 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	029b      	lsls	r3, r3, #10
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	621a      	str	r2, [r3, #32]
}
 800b61a:	bf00      	nop
 800b61c:	371c      	adds	r7, #28
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	feff8fff 	.word	0xfeff8fff
 800b62c:	40010000 	.word	0x40010000
 800b630:	40010400 	.word	0x40010400
 800b634:	40014000 	.word	0x40014000
 800b638:	40014400 	.word	0x40014400
 800b63c:	40014800 	.word	0x40014800

0800b640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f003 031f 	and.w	r3, r3, #31
 800b652:	2201      	movs	r2, #1
 800b654:	fa02 f303 	lsl.w	r3, r2, r3
 800b658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a1a      	ldr	r2, [r3, #32]
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	43db      	mvns	r3, r3
 800b662:	401a      	ands	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6a1a      	ldr	r2, [r3, #32]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	f003 031f 	and.w	r3, r3, #31
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	fa01 f303 	lsl.w	r3, r1, r3
 800b678:	431a      	orrs	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	621a      	str	r2, [r3, #32]
}
 800b67e:	bf00      	nop
 800b680:	371c      	adds	r7, #28
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
	...

0800b68c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d101      	bne.n	800b6a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	e077      	b.n	800b794 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a35      	ldr	r2, [pc, #212]	; (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d004      	beq.n	800b6d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a34      	ldr	r2, [pc, #208]	; (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d108      	bne.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b6de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a25      	ldr	r2, [pc, #148]	; (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d02c      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b716:	d027      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a22      	ldr	r2, [pc, #136]	; (800b7a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d022      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a21      	ldr	r2, [pc, #132]	; (800b7ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d01d      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a1f      	ldr	r2, [pc, #124]	; (800b7b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d018      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a1a      	ldr	r2, [pc, #104]	; (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d013      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a1b      	ldr	r2, [pc, #108]	; (800b7b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00e      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a1a      	ldr	r2, [pc, #104]	; (800b7b8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d009      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a18      	ldr	r2, [pc, #96]	; (800b7bc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d004      	beq.n	800b768 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a17      	ldr	r2, [pc, #92]	; (800b7c0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d10c      	bne.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b76e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	4313      	orrs	r3, r2
 800b778:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68ba      	ldr	r2, [r7, #8]
 800b780:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	40010000 	.word	0x40010000
 800b7a4:	40010400 	.word	0x40010400
 800b7a8:	40000400 	.word	0x40000400
 800b7ac:	40000800 	.word	0x40000800
 800b7b0:	40000c00 	.word	0x40000c00
 800b7b4:	40001800 	.word	0x40001800
 800b7b8:	40014000 	.word	0x40014000
 800b7bc:	4000e000 	.word	0x4000e000
 800b7c0:	4000e400 	.word	0x4000e400

0800b7c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d101      	bne.n	800b7e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7dc:	2302      	movs	r3, #2
 800b7de:	e087      	b.n	800b8f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b846:	4313      	orrs	r3, r2
 800b848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	4313      	orrs	r3, r2
 800b858:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a27      	ldr	r2, [pc, #156]	; (800b8fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d004      	beq.n	800b86e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a25      	ldr	r2, [pc, #148]	; (800b900 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d106      	bne.n	800b87c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	4313      	orrs	r3, r2
 800b87a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a1e      	ldr	r2, [pc, #120]	; (800b8fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d004      	beq.n	800b890 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a1d      	ldr	r2, [pc, #116]	; (800b900 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d126      	bne.n	800b8de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89a:	051b      	lsls	r3, r3, #20
 800b89c:	4313      	orrs	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a0e      	ldr	r2, [pc, #56]	; (800b8fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d004      	beq.n	800b8d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a0d      	ldr	r2, [pc, #52]	; (800b900 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d106      	bne.n	800b8de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	40010000 	.word	0x40010000
 800b900:	40010400 	.word	0x40010400

0800b904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e042      	b.n	800b9d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d106      	bne.n	800b96a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7f8 fd03 	bl	8004370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2224      	movs	r2, #36	; 0x24
 800b96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f022 0201 	bic.w	r2, r2, #1
 800b980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fcdc 	bl	800c340 <UART_SetConfig>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d101      	bne.n	800b992 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e022      	b.n	800b9d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b996:	2b00      	cmp	r3, #0
 800b998:	d002      	beq.n	800b9a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f001 fb3c 	bl	800d018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f001 fbc3 	bl	800d15c <UART_CheckIdleState>
 800b9d6:	4603      	mov	r3, r0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08a      	sub	sp, #40	; 0x28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9f4:	2b20      	cmp	r3, #32
 800b9f6:	d17a      	bne.n	800baee <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d002      	beq.n	800ba04 <HAL_UART_Transmit_DMA+0x24>
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d101      	bne.n	800ba08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e073      	b.n	800baf0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <HAL_UART_Transmit_DMA+0x36>
 800ba12:	2302      	movs	r3, #2
 800ba14:	e06c      	b.n	800baf0 <HAL_UART_Transmit_DMA+0x110>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	88fa      	ldrh	r2, [r7, #6]
 800ba28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	88fa      	ldrh	r2, [r7, #6]
 800ba30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2221      	movs	r2, #33	; 0x21
 800ba40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d02c      	beq.n	800baa6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba50:	4a29      	ldr	r2, [pc, #164]	; (800baf8 <HAL_UART_Transmit_DMA+0x118>)
 800ba52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba58:	4a28      	ldr	r2, [pc, #160]	; (800bafc <HAL_UART_Transmit_DMA+0x11c>)
 800ba5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba60:	4a27      	ldr	r2, [pc, #156]	; (800bb00 <HAL_UART_Transmit_DMA+0x120>)
 800ba62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba68:	2200      	movs	r2, #0
 800ba6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba74:	4619      	mov	r1, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3328      	adds	r3, #40	; 0x28
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	f7f9 fd02 	bl	8005488 <HAL_DMA_Start_IT>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00d      	beq.n	800baa6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2210      	movs	r2, #16
 800ba8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2220      	movs	r2, #32
 800ba9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e024      	b.n	800baf0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2240      	movs	r2, #64	; 0x40
 800baac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3308      	adds	r3, #8
 800babc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	e853 3f00 	ldrex	r3, [r3]
 800bac4:	613b      	str	r3, [r7, #16]
   return(result);
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3308      	adds	r3, #8
 800bad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad6:	623a      	str	r2, [r7, #32]
 800bad8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bada:	69f9      	ldr	r1, [r7, #28]
 800badc:	6a3a      	ldr	r2, [r7, #32]
 800bade:	e841 2300 	strex	r3, r2, [r1]
 800bae2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1e5      	bne.n	800bab6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	e000      	b.n	800baf0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800baee:	2302      	movs	r3, #2
  }
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3728      	adds	r7, #40	; 0x28
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	0800d625 	.word	0x0800d625
 800bafc:	0800d6bb 	.word	0x0800d6bb
 800bb00:	0800d831 	.word	0x0800d831

0800bb04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08a      	sub	sp, #40	; 0x28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb18:	2b20      	cmp	r3, #32
 800bb1a:	d142      	bne.n	800bba2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d002      	beq.n	800bb28 <HAL_UART_Receive_DMA+0x24>
 800bb22:	88fb      	ldrh	r3, [r7, #6]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d101      	bne.n	800bb2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e03b      	b.n	800bba4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d101      	bne.n	800bb3a <HAL_UART_Receive_DMA+0x36>
 800bb36:	2302      	movs	r3, #2
 800bb38:	e034      	b.n	800bba4 <HAL_UART_Receive_DMA+0xa0>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a17      	ldr	r2, [pc, #92]	; (800bbac <HAL_UART_Receive_DMA+0xa8>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d01f      	beq.n	800bb92 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d018      	beq.n	800bb92 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	e853 3f00 	ldrex	r3, [r3]
 800bb6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb74:	627b      	str	r3, [r7, #36]	; 0x24
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7e:	623b      	str	r3, [r7, #32]
 800bb80:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb82:	69f9      	ldr	r1, [r7, #28]
 800bb84:	6a3a      	ldr	r2, [r7, #32]
 800bb86:	e841 2300 	strex	r3, r2, [r1]
 800bb8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1e6      	bne.n	800bb60 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bb92:	88fb      	ldrh	r3, [r7, #6]
 800bb94:	461a      	mov	r2, r3
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f001 fbf3 	bl	800d384 <UART_Start_Receive_DMA>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	e000      	b.n	800bba4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bba2:	2302      	movs	r3, #2
  }
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3728      	adds	r7, #40	; 0x28
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	58000c00 	.word	0x58000c00

0800bbb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b0ba      	sub	sp, #232	; 0xe8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bbda:	f640 030f 	movw	r3, #2063	; 0x80f
 800bbde:	4013      	ands	r3, r2
 800bbe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bbe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d11b      	bne.n	800bc24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf0:	f003 0320 	and.w	r3, r3, #32
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d015      	beq.n	800bc24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbfc:	f003 0320 	and.w	r3, r3, #32
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d105      	bne.n	800bc10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d009      	beq.n	800bc24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 835a 	beq.w	800c2ce <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	4798      	blx	r3
      }
      return;
 800bc22:	e354      	b.n	800c2ce <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 811f 	beq.w	800be6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc32:	4b8b      	ldr	r3, [pc, #556]	; (800be60 <HAL_UART_IRQHandler+0x2b0>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bc3e:	4b89      	ldr	r3, [pc, #548]	; (800be64 <HAL_UART_IRQHandler+0x2b4>)
 800bc40:	4013      	ands	r3, r2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 8112 	beq.w	800be6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d011      	beq.n	800bc78 <HAL_UART_IRQHandler+0xc8>
 800bc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2201      	movs	r2, #1
 800bc66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc6e:	f043 0201 	orr.w	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7c:	f003 0302 	and.w	r3, r3, #2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d011      	beq.n	800bca8 <HAL_UART_IRQHandler+0xf8>
 800bc84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2202      	movs	r2, #2
 800bc96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc9e:	f043 0204 	orr.w	r2, r3, #4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d011      	beq.n	800bcd8 <HAL_UART_IRQHandler+0x128>
 800bcb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00b      	beq.n	800bcd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2204      	movs	r2, #4
 800bcc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcce:	f043 0202 	orr.w	r2, r3, #2
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bcd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcdc:	f003 0308 	and.w	r3, r3, #8
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d017      	beq.n	800bd14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bce8:	f003 0320 	and.w	r3, r3, #32
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d105      	bne.n	800bcfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bcf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bcf4:	4b5a      	ldr	r3, [pc, #360]	; (800be60 <HAL_UART_IRQHandler+0x2b0>)
 800bcf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2208      	movs	r2, #8
 800bd02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd0a:	f043 0208 	orr.w	r2, r3, #8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d012      	beq.n	800bd46 <HAL_UART_IRQHandler+0x196>
 800bd20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00c      	beq.n	800bd46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd3c:	f043 0220 	orr.w	r2, r3, #32
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 82c0 	beq.w	800c2d2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d013      	beq.n	800bd86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d105      	bne.n	800bd76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d007      	beq.n	800bd86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9a:	2b40      	cmp	r3, #64	; 0x40
 800bd9c:	d005      	beq.n	800bdaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bda2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d04f      	beq.n	800be4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 fbd4 	bl	800d558 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d141      	bne.n	800be42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bdcc:	e853 3f00 	ldrex	r3, [r3]
 800bdd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3308      	adds	r3, #8
 800bde6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1d9      	bne.n	800bdbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d013      	beq.n	800be3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be16:	4a14      	ldr	r2, [pc, #80]	; (800be68 <HAL_UART_IRQHandler+0x2b8>)
 800be18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fa f8ba 	bl	8005f98 <HAL_DMA_Abort_IT>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d017      	beq.n	800be5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be38:	e00f      	b.n	800be5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fa6a 	bl	800c314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be40:	e00b      	b.n	800be5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fa66 	bl	800c314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be48:	e007      	b.n	800be5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fa62 	bl	800c314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800be58:	e23b      	b.n	800c2d2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be5a:	bf00      	nop
    return;
 800be5c:	e239      	b.n	800c2d2 <HAL_UART_IRQHandler+0x722>
 800be5e:	bf00      	nop
 800be60:	10000001 	.word	0x10000001
 800be64:	04000120 	.word	0x04000120
 800be68:	0800d8b1 	.word	0x0800d8b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be70:	2b01      	cmp	r3, #1
 800be72:	f040 81ce 	bne.w	800c212 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7a:	f003 0310 	and.w	r3, r3, #16
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 81c7 	beq.w	800c212 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be88:	f003 0310 	and.w	r3, r3, #16
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 81c0 	beq.w	800c212 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2210      	movs	r2, #16
 800be98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea4:	2b40      	cmp	r3, #64	; 0x40
 800bea6:	f040 813b 	bne.w	800c120 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a8b      	ldr	r2, [pc, #556]	; (800c0e0 <HAL_UART_IRQHandler+0x530>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d059      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a89      	ldr	r2, [pc, #548]	; (800c0e4 <HAL_UART_IRQHandler+0x534>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d053      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a87      	ldr	r2, [pc, #540]	; (800c0e8 <HAL_UART_IRQHandler+0x538>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d04d      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a85      	ldr	r2, [pc, #532]	; (800c0ec <HAL_UART_IRQHandler+0x53c>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d047      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a83      	ldr	r2, [pc, #524]	; (800c0f0 <HAL_UART_IRQHandler+0x540>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d041      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a81      	ldr	r2, [pc, #516]	; (800c0f4 <HAL_UART_IRQHandler+0x544>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d03b      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4a7f      	ldr	r2, [pc, #508]	; (800c0f8 <HAL_UART_IRQHandler+0x548>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d035      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a7d      	ldr	r2, [pc, #500]	; (800c0fc <HAL_UART_IRQHandler+0x54c>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d02f      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a7b      	ldr	r2, [pc, #492]	; (800c100 <HAL_UART_IRQHandler+0x550>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d029      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4a79      	ldr	r2, [pc, #484]	; (800c104 <HAL_UART_IRQHandler+0x554>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d023      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a77      	ldr	r2, [pc, #476]	; (800c108 <HAL_UART_IRQHandler+0x558>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d01d      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a75      	ldr	r2, [pc, #468]	; (800c10c <HAL_UART_IRQHandler+0x55c>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d017      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a73      	ldr	r2, [pc, #460]	; (800c110 <HAL_UART_IRQHandler+0x560>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d011      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a71      	ldr	r2, [pc, #452]	; (800c114 <HAL_UART_IRQHandler+0x564>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d00b      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a6f      	ldr	r2, [pc, #444]	; (800c118 <HAL_UART_IRQHandler+0x568>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d005      	beq.n	800bf6a <HAL_UART_IRQHandler+0x3ba>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a6d      	ldr	r2, [pc, #436]	; (800c11c <HAL_UART_IRQHandler+0x56c>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d105      	bne.n	800bf76 <HAL_UART_IRQHandler+0x3c6>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	e004      	b.n	800bf80 <HAL_UART_IRQHandler+0x3d0>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f000 81a4 	beq.w	800c2d6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	f080 819c 	bcs.w	800c2d6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfb2:	f000 8086 	beq.w	800c0c2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfc2:	e853 3f00 	ldrex	r3, [r3]
 800bfc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bfca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bfe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bfe4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bfec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bff0:	e841 2300 	strex	r3, r2, [r1]
 800bff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1da      	bne.n	800bfb6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3308      	adds	r3, #8
 800c006:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c00a:	e853 3f00 	ldrex	r3, [r3]
 800c00e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c012:	f023 0301 	bic.w	r3, r3, #1
 800c016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3308      	adds	r3, #8
 800c020:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c024:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c028:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c02c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c030:	e841 2300 	strex	r3, r2, [r1]
 800c034:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d1e1      	bne.n	800c000 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3308      	adds	r3, #8
 800c042:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c046:	e853 3f00 	ldrex	r3, [r3]
 800c04a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c04c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c04e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3308      	adds	r3, #8
 800c05c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c060:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c062:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c064:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c066:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c068:	e841 2300 	strex	r3, r2, [r1]
 800c06c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c06e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1e3      	bne.n	800c03c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2220      	movs	r2, #32
 800c078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c08a:	e853 3f00 	ldrex	r3, [r3]
 800c08e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c092:	f023 0310 	bic.w	r3, r3, #16
 800c096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0ac:	e841 2300 	strex	r3, r2, [r1]
 800c0b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1e4      	bne.n	800c082 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7f9 fc4d 	bl	800595c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f926 	bl	800c328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0dc:	e0fb      	b.n	800c2d6 <HAL_UART_IRQHandler+0x726>
 800c0de:	bf00      	nop
 800c0e0:	40020010 	.word	0x40020010
 800c0e4:	40020028 	.word	0x40020028
 800c0e8:	40020040 	.word	0x40020040
 800c0ec:	40020058 	.word	0x40020058
 800c0f0:	40020070 	.word	0x40020070
 800c0f4:	40020088 	.word	0x40020088
 800c0f8:	400200a0 	.word	0x400200a0
 800c0fc:	400200b8 	.word	0x400200b8
 800c100:	40020410 	.word	0x40020410
 800c104:	40020428 	.word	0x40020428
 800c108:	40020440 	.word	0x40020440
 800c10c:	40020458 	.word	0x40020458
 800c110:	40020470 	.word	0x40020470
 800c114:	40020488 	.word	0x40020488
 800c118:	400204a0 	.word	0x400204a0
 800c11c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f000 80cc 	beq.w	800c2da <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 80c7 	beq.w	800c2da <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c154:	e853 3f00 	ldrex	r3, [r3]
 800c158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c16e:	647b      	str	r3, [r7, #68]	; 0x44
 800c170:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c176:	e841 2300 	strex	r3, r2, [r1]
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1e4      	bne.n	800c14c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3308      	adds	r3, #8
 800c188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	e853 3f00 	ldrex	r3, [r3]
 800c190:	623b      	str	r3, [r7, #32]
   return(result);
 800c192:	6a3a      	ldr	r2, [r7, #32]
 800c194:	4b54      	ldr	r3, [pc, #336]	; (800c2e8 <HAL_UART_IRQHandler+0x738>)
 800c196:	4013      	ands	r3, r2
 800c198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c1a6:	633a      	str	r2, [r7, #48]	; 0x30
 800c1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1ae:	e841 2300 	strex	r3, r2, [r1]
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1e3      	bne.n	800c182 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	e853 3f00 	ldrex	r3, [r3]
 800c1da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f023 0310 	bic.w	r3, r3, #16
 800c1e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c1f0:	61fb      	str	r3, [r7, #28]
 800c1f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f4:	69b9      	ldr	r1, [r7, #24]
 800c1f6:	69fa      	ldr	r2, [r7, #28]
 800c1f8:	e841 2300 	strex	r3, r2, [r1]
 800c1fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1e4      	bne.n	800c1ce <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c208:	4619      	mov	r1, r3
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f88c 	bl	800c328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c210:	e063      	b.n	800c2da <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00e      	beq.n	800c23c <HAL_UART_IRQHandler+0x68c>
 800c21e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c226:	2b00      	cmp	r3, #0
 800c228:	d008      	beq.n	800c23c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c232:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f001 fb7c 	bl	800d932 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c23a:	e051      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c244:	2b00      	cmp	r3, #0
 800c246:	d014      	beq.n	800c272 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c250:	2b00      	cmp	r3, #0
 800c252:	d105      	bne.n	800c260 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d008      	beq.n	800c272 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c264:	2b00      	cmp	r3, #0
 800c266:	d03a      	beq.n	800c2de <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	4798      	blx	r3
    }
    return;
 800c270:	e035      	b.n	800c2de <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d009      	beq.n	800c292 <HAL_UART_IRQHandler+0x6e2>
 800c27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f001 fb26 	bl	800d8dc <UART_EndTransmit_IT>
    return;
 800c290:	e026      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d009      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x702>
 800c29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d003      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f001 fb55 	bl	800d95a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2b0:	e016      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d010      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x730>
 800c2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	da0c      	bge.n	800c2e0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 fb3d 	bl	800d946 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2cc:	e008      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
      return;
 800c2ce:	bf00      	nop
 800c2d0:	e006      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
    return;
 800c2d2:	bf00      	nop
 800c2d4:	e004      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
      return;
 800c2d6:	bf00      	nop
 800c2d8:	e002      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
      return;
 800c2da:	bf00      	nop
 800c2dc:	e000      	b.n	800c2e0 <HAL_UART_IRQHandler+0x730>
    return;
 800c2de:	bf00      	nop
  }
}
 800c2e0:	37e8      	adds	r7, #232	; 0xe8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	effffffe 	.word	0xeffffffe

0800c2ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2f4:	bf00      	nop
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c308:	bf00      	nop
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c344:	b092      	sub	sp, #72	; 0x48
 800c346:	af00      	add	r7, sp, #0
 800c348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	689a      	ldr	r2, [r3, #8]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	431a      	orrs	r2, r3
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	431a      	orrs	r2, r3
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	69db      	ldr	r3, [r3, #28]
 800c364:	4313      	orrs	r3, r2
 800c366:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	4bbe      	ldr	r3, [pc, #760]	; (800c668 <UART_SetConfig+0x328>)
 800c370:	4013      	ands	r3, r2
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	6812      	ldr	r2, [r2, #0]
 800c376:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c378:	430b      	orrs	r3, r1
 800c37a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	430a      	orrs	r2, r1
 800c390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	699b      	ldr	r3, [r3, #24]
 800c396:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4ab3      	ldr	r2, [pc, #716]	; (800c66c <UART_SetConfig+0x32c>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d004      	beq.n	800c3ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689a      	ldr	r2, [r3, #8]
 800c3b2:	4baf      	ldr	r3, [pc, #700]	; (800c670 <UART_SetConfig+0x330>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c6:	f023 010f 	bic.w	r1, r3, #15
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4aa6      	ldr	r2, [pc, #664]	; (800c674 <UART_SetConfig+0x334>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d177      	bne.n	800c4d0 <UART_SetConfig+0x190>
 800c3e0:	4ba5      	ldr	r3, [pc, #660]	; (800c678 <UART_SetConfig+0x338>)
 800c3e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3e8:	2b28      	cmp	r3, #40	; 0x28
 800c3ea:	d86d      	bhi.n	800c4c8 <UART_SetConfig+0x188>
 800c3ec:	a201      	add	r2, pc, #4	; (adr r2, 800c3f4 <UART_SetConfig+0xb4>)
 800c3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f2:	bf00      	nop
 800c3f4:	0800c499 	.word	0x0800c499
 800c3f8:	0800c4c9 	.word	0x0800c4c9
 800c3fc:	0800c4c9 	.word	0x0800c4c9
 800c400:	0800c4c9 	.word	0x0800c4c9
 800c404:	0800c4c9 	.word	0x0800c4c9
 800c408:	0800c4c9 	.word	0x0800c4c9
 800c40c:	0800c4c9 	.word	0x0800c4c9
 800c410:	0800c4c9 	.word	0x0800c4c9
 800c414:	0800c4a1 	.word	0x0800c4a1
 800c418:	0800c4c9 	.word	0x0800c4c9
 800c41c:	0800c4c9 	.word	0x0800c4c9
 800c420:	0800c4c9 	.word	0x0800c4c9
 800c424:	0800c4c9 	.word	0x0800c4c9
 800c428:	0800c4c9 	.word	0x0800c4c9
 800c42c:	0800c4c9 	.word	0x0800c4c9
 800c430:	0800c4c9 	.word	0x0800c4c9
 800c434:	0800c4a9 	.word	0x0800c4a9
 800c438:	0800c4c9 	.word	0x0800c4c9
 800c43c:	0800c4c9 	.word	0x0800c4c9
 800c440:	0800c4c9 	.word	0x0800c4c9
 800c444:	0800c4c9 	.word	0x0800c4c9
 800c448:	0800c4c9 	.word	0x0800c4c9
 800c44c:	0800c4c9 	.word	0x0800c4c9
 800c450:	0800c4c9 	.word	0x0800c4c9
 800c454:	0800c4b1 	.word	0x0800c4b1
 800c458:	0800c4c9 	.word	0x0800c4c9
 800c45c:	0800c4c9 	.word	0x0800c4c9
 800c460:	0800c4c9 	.word	0x0800c4c9
 800c464:	0800c4c9 	.word	0x0800c4c9
 800c468:	0800c4c9 	.word	0x0800c4c9
 800c46c:	0800c4c9 	.word	0x0800c4c9
 800c470:	0800c4c9 	.word	0x0800c4c9
 800c474:	0800c4b9 	.word	0x0800c4b9
 800c478:	0800c4c9 	.word	0x0800c4c9
 800c47c:	0800c4c9 	.word	0x0800c4c9
 800c480:	0800c4c9 	.word	0x0800c4c9
 800c484:	0800c4c9 	.word	0x0800c4c9
 800c488:	0800c4c9 	.word	0x0800c4c9
 800c48c:	0800c4c9 	.word	0x0800c4c9
 800c490:	0800c4c9 	.word	0x0800c4c9
 800c494:	0800c4c1 	.word	0x0800c4c1
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e326      	b.n	800caee <UART_SetConfig+0x7ae>
 800c4a0:	2304      	movs	r3, #4
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e322      	b.n	800caee <UART_SetConfig+0x7ae>
 800c4a8:	2308      	movs	r3, #8
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e31e      	b.n	800caee <UART_SetConfig+0x7ae>
 800c4b0:	2310      	movs	r3, #16
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e31a      	b.n	800caee <UART_SetConfig+0x7ae>
 800c4b8:	2320      	movs	r3, #32
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e316      	b.n	800caee <UART_SetConfig+0x7ae>
 800c4c0:	2340      	movs	r3, #64	; 0x40
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e312      	b.n	800caee <UART_SetConfig+0x7ae>
 800c4c8:	2380      	movs	r3, #128	; 0x80
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e30e      	b.n	800caee <UART_SetConfig+0x7ae>
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a69      	ldr	r2, [pc, #420]	; (800c67c <UART_SetConfig+0x33c>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d130      	bne.n	800c53c <UART_SetConfig+0x1fc>
 800c4da:	4b67      	ldr	r3, [pc, #412]	; (800c678 <UART_SetConfig+0x338>)
 800c4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4de:	f003 0307 	and.w	r3, r3, #7
 800c4e2:	2b05      	cmp	r3, #5
 800c4e4:	d826      	bhi.n	800c534 <UART_SetConfig+0x1f4>
 800c4e6:	a201      	add	r2, pc, #4	; (adr r2, 800c4ec <UART_SetConfig+0x1ac>)
 800c4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ec:	0800c505 	.word	0x0800c505
 800c4f0:	0800c50d 	.word	0x0800c50d
 800c4f4:	0800c515 	.word	0x0800c515
 800c4f8:	0800c51d 	.word	0x0800c51d
 800c4fc:	0800c525 	.word	0x0800c525
 800c500:	0800c52d 	.word	0x0800c52d
 800c504:	2300      	movs	r3, #0
 800c506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50a:	e2f0      	b.n	800caee <UART_SetConfig+0x7ae>
 800c50c:	2304      	movs	r3, #4
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c512:	e2ec      	b.n	800caee <UART_SetConfig+0x7ae>
 800c514:	2308      	movs	r3, #8
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e2e8      	b.n	800caee <UART_SetConfig+0x7ae>
 800c51c:	2310      	movs	r3, #16
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e2e4      	b.n	800caee <UART_SetConfig+0x7ae>
 800c524:	2320      	movs	r3, #32
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e2e0      	b.n	800caee <UART_SetConfig+0x7ae>
 800c52c:	2340      	movs	r3, #64	; 0x40
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e2dc      	b.n	800caee <UART_SetConfig+0x7ae>
 800c534:	2380      	movs	r3, #128	; 0x80
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e2d8      	b.n	800caee <UART_SetConfig+0x7ae>
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a4f      	ldr	r2, [pc, #316]	; (800c680 <UART_SetConfig+0x340>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d130      	bne.n	800c5a8 <UART_SetConfig+0x268>
 800c546:	4b4c      	ldr	r3, [pc, #304]	; (800c678 <UART_SetConfig+0x338>)
 800c548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c54a:	f003 0307 	and.w	r3, r3, #7
 800c54e:	2b05      	cmp	r3, #5
 800c550:	d826      	bhi.n	800c5a0 <UART_SetConfig+0x260>
 800c552:	a201      	add	r2, pc, #4	; (adr r2, 800c558 <UART_SetConfig+0x218>)
 800c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c558:	0800c571 	.word	0x0800c571
 800c55c:	0800c579 	.word	0x0800c579
 800c560:	0800c581 	.word	0x0800c581
 800c564:	0800c589 	.word	0x0800c589
 800c568:	0800c591 	.word	0x0800c591
 800c56c:	0800c599 	.word	0x0800c599
 800c570:	2300      	movs	r3, #0
 800c572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c576:	e2ba      	b.n	800caee <UART_SetConfig+0x7ae>
 800c578:	2304      	movs	r3, #4
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e2b6      	b.n	800caee <UART_SetConfig+0x7ae>
 800c580:	2308      	movs	r3, #8
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e2b2      	b.n	800caee <UART_SetConfig+0x7ae>
 800c588:	2310      	movs	r3, #16
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e2ae      	b.n	800caee <UART_SetConfig+0x7ae>
 800c590:	2320      	movs	r3, #32
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e2aa      	b.n	800caee <UART_SetConfig+0x7ae>
 800c598:	2340      	movs	r3, #64	; 0x40
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e2a6      	b.n	800caee <UART_SetConfig+0x7ae>
 800c5a0:	2380      	movs	r3, #128	; 0x80
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e2a2      	b.n	800caee <UART_SetConfig+0x7ae>
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a35      	ldr	r2, [pc, #212]	; (800c684 <UART_SetConfig+0x344>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d130      	bne.n	800c614 <UART_SetConfig+0x2d4>
 800c5b2:	4b31      	ldr	r3, [pc, #196]	; (800c678 <UART_SetConfig+0x338>)
 800c5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b05      	cmp	r3, #5
 800c5bc:	d826      	bhi.n	800c60c <UART_SetConfig+0x2cc>
 800c5be:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <UART_SetConfig+0x284>)
 800c5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c4:	0800c5dd 	.word	0x0800c5dd
 800c5c8:	0800c5e5 	.word	0x0800c5e5
 800c5cc:	0800c5ed 	.word	0x0800c5ed
 800c5d0:	0800c5f5 	.word	0x0800c5f5
 800c5d4:	0800c5fd 	.word	0x0800c5fd
 800c5d8:	0800c605 	.word	0x0800c605
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e2:	e284      	b.n	800caee <UART_SetConfig+0x7ae>
 800c5e4:	2304      	movs	r3, #4
 800c5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ea:	e280      	b.n	800caee <UART_SetConfig+0x7ae>
 800c5ec:	2308      	movs	r3, #8
 800c5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f2:	e27c      	b.n	800caee <UART_SetConfig+0x7ae>
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fa:	e278      	b.n	800caee <UART_SetConfig+0x7ae>
 800c5fc:	2320      	movs	r3, #32
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e274      	b.n	800caee <UART_SetConfig+0x7ae>
 800c604:	2340      	movs	r3, #64	; 0x40
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60a:	e270      	b.n	800caee <UART_SetConfig+0x7ae>
 800c60c:	2380      	movs	r3, #128	; 0x80
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c612:	e26c      	b.n	800caee <UART_SetConfig+0x7ae>
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a1b      	ldr	r2, [pc, #108]	; (800c688 <UART_SetConfig+0x348>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d142      	bne.n	800c6a4 <UART_SetConfig+0x364>
 800c61e:	4b16      	ldr	r3, [pc, #88]	; (800c678 <UART_SetConfig+0x338>)
 800c620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c622:	f003 0307 	and.w	r3, r3, #7
 800c626:	2b05      	cmp	r3, #5
 800c628:	d838      	bhi.n	800c69c <UART_SetConfig+0x35c>
 800c62a:	a201      	add	r2, pc, #4	; (adr r2, 800c630 <UART_SetConfig+0x2f0>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c649 	.word	0x0800c649
 800c634:	0800c651 	.word	0x0800c651
 800c638:	0800c659 	.word	0x0800c659
 800c63c:	0800c661 	.word	0x0800c661
 800c640:	0800c68d 	.word	0x0800c68d
 800c644:	0800c695 	.word	0x0800c695
 800c648:	2300      	movs	r3, #0
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64e:	e24e      	b.n	800caee <UART_SetConfig+0x7ae>
 800c650:	2304      	movs	r3, #4
 800c652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c656:	e24a      	b.n	800caee <UART_SetConfig+0x7ae>
 800c658:	2308      	movs	r3, #8
 800c65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c65e:	e246      	b.n	800caee <UART_SetConfig+0x7ae>
 800c660:	2310      	movs	r3, #16
 800c662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c666:	e242      	b.n	800caee <UART_SetConfig+0x7ae>
 800c668:	cfff69f3 	.word	0xcfff69f3
 800c66c:	58000c00 	.word	0x58000c00
 800c670:	11fff4ff 	.word	0x11fff4ff
 800c674:	40011000 	.word	0x40011000
 800c678:	58024400 	.word	0x58024400
 800c67c:	40004400 	.word	0x40004400
 800c680:	40004800 	.word	0x40004800
 800c684:	40004c00 	.word	0x40004c00
 800c688:	40005000 	.word	0x40005000
 800c68c:	2320      	movs	r3, #32
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e22c      	b.n	800caee <UART_SetConfig+0x7ae>
 800c694:	2340      	movs	r3, #64	; 0x40
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e228      	b.n	800caee <UART_SetConfig+0x7ae>
 800c69c:	2380      	movs	r3, #128	; 0x80
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e224      	b.n	800caee <UART_SetConfig+0x7ae>
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4ab1      	ldr	r2, [pc, #708]	; (800c970 <UART_SetConfig+0x630>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d176      	bne.n	800c79c <UART_SetConfig+0x45c>
 800c6ae:	4bb1      	ldr	r3, [pc, #708]	; (800c974 <UART_SetConfig+0x634>)
 800c6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6b6:	2b28      	cmp	r3, #40	; 0x28
 800c6b8:	d86c      	bhi.n	800c794 <UART_SetConfig+0x454>
 800c6ba:	a201      	add	r2, pc, #4	; (adr r2, 800c6c0 <UART_SetConfig+0x380>)
 800c6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c0:	0800c765 	.word	0x0800c765
 800c6c4:	0800c795 	.word	0x0800c795
 800c6c8:	0800c795 	.word	0x0800c795
 800c6cc:	0800c795 	.word	0x0800c795
 800c6d0:	0800c795 	.word	0x0800c795
 800c6d4:	0800c795 	.word	0x0800c795
 800c6d8:	0800c795 	.word	0x0800c795
 800c6dc:	0800c795 	.word	0x0800c795
 800c6e0:	0800c76d 	.word	0x0800c76d
 800c6e4:	0800c795 	.word	0x0800c795
 800c6e8:	0800c795 	.word	0x0800c795
 800c6ec:	0800c795 	.word	0x0800c795
 800c6f0:	0800c795 	.word	0x0800c795
 800c6f4:	0800c795 	.word	0x0800c795
 800c6f8:	0800c795 	.word	0x0800c795
 800c6fc:	0800c795 	.word	0x0800c795
 800c700:	0800c775 	.word	0x0800c775
 800c704:	0800c795 	.word	0x0800c795
 800c708:	0800c795 	.word	0x0800c795
 800c70c:	0800c795 	.word	0x0800c795
 800c710:	0800c795 	.word	0x0800c795
 800c714:	0800c795 	.word	0x0800c795
 800c718:	0800c795 	.word	0x0800c795
 800c71c:	0800c795 	.word	0x0800c795
 800c720:	0800c77d 	.word	0x0800c77d
 800c724:	0800c795 	.word	0x0800c795
 800c728:	0800c795 	.word	0x0800c795
 800c72c:	0800c795 	.word	0x0800c795
 800c730:	0800c795 	.word	0x0800c795
 800c734:	0800c795 	.word	0x0800c795
 800c738:	0800c795 	.word	0x0800c795
 800c73c:	0800c795 	.word	0x0800c795
 800c740:	0800c785 	.word	0x0800c785
 800c744:	0800c795 	.word	0x0800c795
 800c748:	0800c795 	.word	0x0800c795
 800c74c:	0800c795 	.word	0x0800c795
 800c750:	0800c795 	.word	0x0800c795
 800c754:	0800c795 	.word	0x0800c795
 800c758:	0800c795 	.word	0x0800c795
 800c75c:	0800c795 	.word	0x0800c795
 800c760:	0800c78d 	.word	0x0800c78d
 800c764:	2301      	movs	r3, #1
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e1c0      	b.n	800caee <UART_SetConfig+0x7ae>
 800c76c:	2304      	movs	r3, #4
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e1bc      	b.n	800caee <UART_SetConfig+0x7ae>
 800c774:	2308      	movs	r3, #8
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e1b8      	b.n	800caee <UART_SetConfig+0x7ae>
 800c77c:	2310      	movs	r3, #16
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c782:	e1b4      	b.n	800caee <UART_SetConfig+0x7ae>
 800c784:	2320      	movs	r3, #32
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78a:	e1b0      	b.n	800caee <UART_SetConfig+0x7ae>
 800c78c:	2340      	movs	r3, #64	; 0x40
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e1ac      	b.n	800caee <UART_SetConfig+0x7ae>
 800c794:	2380      	movs	r3, #128	; 0x80
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79a:	e1a8      	b.n	800caee <UART_SetConfig+0x7ae>
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a75      	ldr	r2, [pc, #468]	; (800c978 <UART_SetConfig+0x638>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d130      	bne.n	800c808 <UART_SetConfig+0x4c8>
 800c7a6:	4b73      	ldr	r3, [pc, #460]	; (800c974 <UART_SetConfig+0x634>)
 800c7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	2b05      	cmp	r3, #5
 800c7b0:	d826      	bhi.n	800c800 <UART_SetConfig+0x4c0>
 800c7b2:	a201      	add	r2, pc, #4	; (adr r2, 800c7b8 <UART_SetConfig+0x478>)
 800c7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b8:	0800c7d1 	.word	0x0800c7d1
 800c7bc:	0800c7d9 	.word	0x0800c7d9
 800c7c0:	0800c7e1 	.word	0x0800c7e1
 800c7c4:	0800c7e9 	.word	0x0800c7e9
 800c7c8:	0800c7f1 	.word	0x0800c7f1
 800c7cc:	0800c7f9 	.word	0x0800c7f9
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e18a      	b.n	800caee <UART_SetConfig+0x7ae>
 800c7d8:	2304      	movs	r3, #4
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e186      	b.n	800caee <UART_SetConfig+0x7ae>
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e182      	b.n	800caee <UART_SetConfig+0x7ae>
 800c7e8:	2310      	movs	r3, #16
 800c7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ee:	e17e      	b.n	800caee <UART_SetConfig+0x7ae>
 800c7f0:	2320      	movs	r3, #32
 800c7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7f6:	e17a      	b.n	800caee <UART_SetConfig+0x7ae>
 800c7f8:	2340      	movs	r3, #64	; 0x40
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fe:	e176      	b.n	800caee <UART_SetConfig+0x7ae>
 800c800:	2380      	movs	r3, #128	; 0x80
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c806:	e172      	b.n	800caee <UART_SetConfig+0x7ae>
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a5b      	ldr	r2, [pc, #364]	; (800c97c <UART_SetConfig+0x63c>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d130      	bne.n	800c874 <UART_SetConfig+0x534>
 800c812:	4b58      	ldr	r3, [pc, #352]	; (800c974 <UART_SetConfig+0x634>)
 800c814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c816:	f003 0307 	and.w	r3, r3, #7
 800c81a:	2b05      	cmp	r3, #5
 800c81c:	d826      	bhi.n	800c86c <UART_SetConfig+0x52c>
 800c81e:	a201      	add	r2, pc, #4	; (adr r2, 800c824 <UART_SetConfig+0x4e4>)
 800c820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c824:	0800c83d 	.word	0x0800c83d
 800c828:	0800c845 	.word	0x0800c845
 800c82c:	0800c84d 	.word	0x0800c84d
 800c830:	0800c855 	.word	0x0800c855
 800c834:	0800c85d 	.word	0x0800c85d
 800c838:	0800c865 	.word	0x0800c865
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e154      	b.n	800caee <UART_SetConfig+0x7ae>
 800c844:	2304      	movs	r3, #4
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e150      	b.n	800caee <UART_SetConfig+0x7ae>
 800c84c:	2308      	movs	r3, #8
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e14c      	b.n	800caee <UART_SetConfig+0x7ae>
 800c854:	2310      	movs	r3, #16
 800c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c85a:	e148      	b.n	800caee <UART_SetConfig+0x7ae>
 800c85c:	2320      	movs	r3, #32
 800c85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c862:	e144      	b.n	800caee <UART_SetConfig+0x7ae>
 800c864:	2340      	movs	r3, #64	; 0x40
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86a:	e140      	b.n	800caee <UART_SetConfig+0x7ae>
 800c86c:	2380      	movs	r3, #128	; 0x80
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c872:	e13c      	b.n	800caee <UART_SetConfig+0x7ae>
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a41      	ldr	r2, [pc, #260]	; (800c980 <UART_SetConfig+0x640>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	f040 8082 	bne.w	800c984 <UART_SetConfig+0x644>
 800c880:	4b3c      	ldr	r3, [pc, #240]	; (800c974 <UART_SetConfig+0x634>)
 800c882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c884:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c888:	2b28      	cmp	r3, #40	; 0x28
 800c88a:	d86d      	bhi.n	800c968 <UART_SetConfig+0x628>
 800c88c:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <UART_SetConfig+0x554>)
 800c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c892:	bf00      	nop
 800c894:	0800c939 	.word	0x0800c939
 800c898:	0800c969 	.word	0x0800c969
 800c89c:	0800c969 	.word	0x0800c969
 800c8a0:	0800c969 	.word	0x0800c969
 800c8a4:	0800c969 	.word	0x0800c969
 800c8a8:	0800c969 	.word	0x0800c969
 800c8ac:	0800c969 	.word	0x0800c969
 800c8b0:	0800c969 	.word	0x0800c969
 800c8b4:	0800c941 	.word	0x0800c941
 800c8b8:	0800c969 	.word	0x0800c969
 800c8bc:	0800c969 	.word	0x0800c969
 800c8c0:	0800c969 	.word	0x0800c969
 800c8c4:	0800c969 	.word	0x0800c969
 800c8c8:	0800c969 	.word	0x0800c969
 800c8cc:	0800c969 	.word	0x0800c969
 800c8d0:	0800c969 	.word	0x0800c969
 800c8d4:	0800c949 	.word	0x0800c949
 800c8d8:	0800c969 	.word	0x0800c969
 800c8dc:	0800c969 	.word	0x0800c969
 800c8e0:	0800c969 	.word	0x0800c969
 800c8e4:	0800c969 	.word	0x0800c969
 800c8e8:	0800c969 	.word	0x0800c969
 800c8ec:	0800c969 	.word	0x0800c969
 800c8f0:	0800c969 	.word	0x0800c969
 800c8f4:	0800c951 	.word	0x0800c951
 800c8f8:	0800c969 	.word	0x0800c969
 800c8fc:	0800c969 	.word	0x0800c969
 800c900:	0800c969 	.word	0x0800c969
 800c904:	0800c969 	.word	0x0800c969
 800c908:	0800c969 	.word	0x0800c969
 800c90c:	0800c969 	.word	0x0800c969
 800c910:	0800c969 	.word	0x0800c969
 800c914:	0800c959 	.word	0x0800c959
 800c918:	0800c969 	.word	0x0800c969
 800c91c:	0800c969 	.word	0x0800c969
 800c920:	0800c969 	.word	0x0800c969
 800c924:	0800c969 	.word	0x0800c969
 800c928:	0800c969 	.word	0x0800c969
 800c92c:	0800c969 	.word	0x0800c969
 800c930:	0800c969 	.word	0x0800c969
 800c934:	0800c961 	.word	0x0800c961
 800c938:	2301      	movs	r3, #1
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c93e:	e0d6      	b.n	800caee <UART_SetConfig+0x7ae>
 800c940:	2304      	movs	r3, #4
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c946:	e0d2      	b.n	800caee <UART_SetConfig+0x7ae>
 800c948:	2308      	movs	r3, #8
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c94e:	e0ce      	b.n	800caee <UART_SetConfig+0x7ae>
 800c950:	2310      	movs	r3, #16
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c956:	e0ca      	b.n	800caee <UART_SetConfig+0x7ae>
 800c958:	2320      	movs	r3, #32
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c95e:	e0c6      	b.n	800caee <UART_SetConfig+0x7ae>
 800c960:	2340      	movs	r3, #64	; 0x40
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e0c2      	b.n	800caee <UART_SetConfig+0x7ae>
 800c968:	2380      	movs	r3, #128	; 0x80
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e0be      	b.n	800caee <UART_SetConfig+0x7ae>
 800c970:	40011400 	.word	0x40011400
 800c974:	58024400 	.word	0x58024400
 800c978:	40007800 	.word	0x40007800
 800c97c:	40007c00 	.word	0x40007c00
 800c980:	40011800 	.word	0x40011800
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4aad      	ldr	r2, [pc, #692]	; (800cc40 <UART_SetConfig+0x900>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d176      	bne.n	800ca7c <UART_SetConfig+0x73c>
 800c98e:	4bad      	ldr	r3, [pc, #692]	; (800cc44 <UART_SetConfig+0x904>)
 800c990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c996:	2b28      	cmp	r3, #40	; 0x28
 800c998:	d86c      	bhi.n	800ca74 <UART_SetConfig+0x734>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <UART_SetConfig+0x660>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800ca45 	.word	0x0800ca45
 800c9a4:	0800ca75 	.word	0x0800ca75
 800c9a8:	0800ca75 	.word	0x0800ca75
 800c9ac:	0800ca75 	.word	0x0800ca75
 800c9b0:	0800ca75 	.word	0x0800ca75
 800c9b4:	0800ca75 	.word	0x0800ca75
 800c9b8:	0800ca75 	.word	0x0800ca75
 800c9bc:	0800ca75 	.word	0x0800ca75
 800c9c0:	0800ca4d 	.word	0x0800ca4d
 800c9c4:	0800ca75 	.word	0x0800ca75
 800c9c8:	0800ca75 	.word	0x0800ca75
 800c9cc:	0800ca75 	.word	0x0800ca75
 800c9d0:	0800ca75 	.word	0x0800ca75
 800c9d4:	0800ca75 	.word	0x0800ca75
 800c9d8:	0800ca75 	.word	0x0800ca75
 800c9dc:	0800ca75 	.word	0x0800ca75
 800c9e0:	0800ca55 	.word	0x0800ca55
 800c9e4:	0800ca75 	.word	0x0800ca75
 800c9e8:	0800ca75 	.word	0x0800ca75
 800c9ec:	0800ca75 	.word	0x0800ca75
 800c9f0:	0800ca75 	.word	0x0800ca75
 800c9f4:	0800ca75 	.word	0x0800ca75
 800c9f8:	0800ca75 	.word	0x0800ca75
 800c9fc:	0800ca75 	.word	0x0800ca75
 800ca00:	0800ca5d 	.word	0x0800ca5d
 800ca04:	0800ca75 	.word	0x0800ca75
 800ca08:	0800ca75 	.word	0x0800ca75
 800ca0c:	0800ca75 	.word	0x0800ca75
 800ca10:	0800ca75 	.word	0x0800ca75
 800ca14:	0800ca75 	.word	0x0800ca75
 800ca18:	0800ca75 	.word	0x0800ca75
 800ca1c:	0800ca75 	.word	0x0800ca75
 800ca20:	0800ca65 	.word	0x0800ca65
 800ca24:	0800ca75 	.word	0x0800ca75
 800ca28:	0800ca75 	.word	0x0800ca75
 800ca2c:	0800ca75 	.word	0x0800ca75
 800ca30:	0800ca75 	.word	0x0800ca75
 800ca34:	0800ca75 	.word	0x0800ca75
 800ca38:	0800ca75 	.word	0x0800ca75
 800ca3c:	0800ca75 	.word	0x0800ca75
 800ca40:	0800ca6d 	.word	0x0800ca6d
 800ca44:	2301      	movs	r3, #1
 800ca46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4a:	e050      	b.n	800caee <UART_SetConfig+0x7ae>
 800ca4c:	2304      	movs	r3, #4
 800ca4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca52:	e04c      	b.n	800caee <UART_SetConfig+0x7ae>
 800ca54:	2308      	movs	r3, #8
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5a:	e048      	b.n	800caee <UART_SetConfig+0x7ae>
 800ca5c:	2310      	movs	r3, #16
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca62:	e044      	b.n	800caee <UART_SetConfig+0x7ae>
 800ca64:	2320      	movs	r3, #32
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e040      	b.n	800caee <UART_SetConfig+0x7ae>
 800ca6c:	2340      	movs	r3, #64	; 0x40
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e03c      	b.n	800caee <UART_SetConfig+0x7ae>
 800ca74:	2380      	movs	r3, #128	; 0x80
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7a:	e038      	b.n	800caee <UART_SetConfig+0x7ae>
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a71      	ldr	r2, [pc, #452]	; (800cc48 <UART_SetConfig+0x908>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d130      	bne.n	800cae8 <UART_SetConfig+0x7a8>
 800ca86:	4b6f      	ldr	r3, [pc, #444]	; (800cc44 <UART_SetConfig+0x904>)
 800ca88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca8a:	f003 0307 	and.w	r3, r3, #7
 800ca8e:	2b05      	cmp	r3, #5
 800ca90:	d826      	bhi.n	800cae0 <UART_SetConfig+0x7a0>
 800ca92:	a201      	add	r2, pc, #4	; (adr r2, 800ca98 <UART_SetConfig+0x758>)
 800ca94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca98:	0800cab1 	.word	0x0800cab1
 800ca9c:	0800cab9 	.word	0x0800cab9
 800caa0:	0800cac1 	.word	0x0800cac1
 800caa4:	0800cac9 	.word	0x0800cac9
 800caa8:	0800cad1 	.word	0x0800cad1
 800caac:	0800cad9 	.word	0x0800cad9
 800cab0:	2302      	movs	r3, #2
 800cab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab6:	e01a      	b.n	800caee <UART_SetConfig+0x7ae>
 800cab8:	2304      	movs	r3, #4
 800caba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cabe:	e016      	b.n	800caee <UART_SetConfig+0x7ae>
 800cac0:	2308      	movs	r3, #8
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac6:	e012      	b.n	800caee <UART_SetConfig+0x7ae>
 800cac8:	2310      	movs	r3, #16
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cace:	e00e      	b.n	800caee <UART_SetConfig+0x7ae>
 800cad0:	2320      	movs	r3, #32
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad6:	e00a      	b.n	800caee <UART_SetConfig+0x7ae>
 800cad8:	2340      	movs	r3, #64	; 0x40
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cade:	e006      	b.n	800caee <UART_SetConfig+0x7ae>
 800cae0:	2380      	movs	r3, #128	; 0x80
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cae6:	e002      	b.n	800caee <UART_SetConfig+0x7ae>
 800cae8:	2380      	movs	r3, #128	; 0x80
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a55      	ldr	r2, [pc, #340]	; (800cc48 <UART_SetConfig+0x908>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	f040 80f8 	bne.w	800ccea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cafa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cafe:	2b20      	cmp	r3, #32
 800cb00:	dc46      	bgt.n	800cb90 <UART_SetConfig+0x850>
 800cb02:	2b02      	cmp	r3, #2
 800cb04:	db75      	blt.n	800cbf2 <UART_SetConfig+0x8b2>
 800cb06:	3b02      	subs	r3, #2
 800cb08:	2b1e      	cmp	r3, #30
 800cb0a:	d872      	bhi.n	800cbf2 <UART_SetConfig+0x8b2>
 800cb0c:	a201      	add	r2, pc, #4	; (adr r2, 800cb14 <UART_SetConfig+0x7d4>)
 800cb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb12:	bf00      	nop
 800cb14:	0800cb97 	.word	0x0800cb97
 800cb18:	0800cbf3 	.word	0x0800cbf3
 800cb1c:	0800cb9f 	.word	0x0800cb9f
 800cb20:	0800cbf3 	.word	0x0800cbf3
 800cb24:	0800cbf3 	.word	0x0800cbf3
 800cb28:	0800cbf3 	.word	0x0800cbf3
 800cb2c:	0800cbaf 	.word	0x0800cbaf
 800cb30:	0800cbf3 	.word	0x0800cbf3
 800cb34:	0800cbf3 	.word	0x0800cbf3
 800cb38:	0800cbf3 	.word	0x0800cbf3
 800cb3c:	0800cbf3 	.word	0x0800cbf3
 800cb40:	0800cbf3 	.word	0x0800cbf3
 800cb44:	0800cbf3 	.word	0x0800cbf3
 800cb48:	0800cbf3 	.word	0x0800cbf3
 800cb4c:	0800cbbf 	.word	0x0800cbbf
 800cb50:	0800cbf3 	.word	0x0800cbf3
 800cb54:	0800cbf3 	.word	0x0800cbf3
 800cb58:	0800cbf3 	.word	0x0800cbf3
 800cb5c:	0800cbf3 	.word	0x0800cbf3
 800cb60:	0800cbf3 	.word	0x0800cbf3
 800cb64:	0800cbf3 	.word	0x0800cbf3
 800cb68:	0800cbf3 	.word	0x0800cbf3
 800cb6c:	0800cbf3 	.word	0x0800cbf3
 800cb70:	0800cbf3 	.word	0x0800cbf3
 800cb74:	0800cbf3 	.word	0x0800cbf3
 800cb78:	0800cbf3 	.word	0x0800cbf3
 800cb7c:	0800cbf3 	.word	0x0800cbf3
 800cb80:	0800cbf3 	.word	0x0800cbf3
 800cb84:	0800cbf3 	.word	0x0800cbf3
 800cb88:	0800cbf3 	.word	0x0800cbf3
 800cb8c:	0800cbe5 	.word	0x0800cbe5
 800cb90:	2b40      	cmp	r3, #64	; 0x40
 800cb92:	d02a      	beq.n	800cbea <UART_SetConfig+0x8aa>
 800cb94:	e02d      	b.n	800cbf2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cb96:	f7fc ff87 	bl	8009aa8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb9c:	e02f      	b.n	800cbfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fc ff96 	bl	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbac:	e027      	b.n	800cbfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbae:	f107 0318 	add.w	r3, r7, #24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fd f8e2 	bl	8009d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbb8:	69fb      	ldr	r3, [r7, #28]
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbbc:	e01f      	b.n	800cbfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbbe:	4b21      	ldr	r3, [pc, #132]	; (800cc44 <UART_SetConfig+0x904>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0320 	and.w	r3, r3, #32
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d009      	beq.n	800cbde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbca:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <UART_SetConfig+0x904>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	08db      	lsrs	r3, r3, #3
 800cbd0:	f003 0303 	and.w	r3, r3, #3
 800cbd4:	4a1d      	ldr	r2, [pc, #116]	; (800cc4c <UART_SetConfig+0x90c>)
 800cbd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbdc:	e00f      	b.n	800cbfe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cbde:	4b1b      	ldr	r3, [pc, #108]	; (800cc4c <UART_SetConfig+0x90c>)
 800cbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe2:	e00c      	b.n	800cbfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbe4:	4b1a      	ldr	r3, [pc, #104]	; (800cc50 <UART_SetConfig+0x910>)
 800cbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe8:	e009      	b.n	800cbfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf0:	e005      	b.n	800cbfe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 81ee 	beq.w	800cfe2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	4a12      	ldr	r2, [pc, #72]	; (800cc54 <UART_SetConfig+0x914>)
 800cc0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc10:	461a      	mov	r2, r3
 800cc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc14:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc18:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	005b      	lsls	r3, r3, #1
 800cc22:	4413      	add	r3, r2
 800cc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d305      	bcc.n	800cc36 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d910      	bls.n	800cc58 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc3c:	e1d1      	b.n	800cfe2 <UART_SetConfig+0xca2>
 800cc3e:	bf00      	nop
 800cc40:	40011c00 	.word	0x40011c00
 800cc44:	58024400 	.word	0x58024400
 800cc48:	58000c00 	.word	0x58000c00
 800cc4c:	03d09000 	.word	0x03d09000
 800cc50:	003d0900 	.word	0x003d0900
 800cc54:	0800e224 	.word	0x0800e224
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	60bb      	str	r3, [r7, #8]
 800cc5e:	60fa      	str	r2, [r7, #12]
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	4ac0      	ldr	r2, [pc, #768]	; (800cf68 <UART_SetConfig+0xc28>)
 800cc66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	603b      	str	r3, [r7, #0]
 800cc70:	607a      	str	r2, [r7, #4]
 800cc72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cc7a:	f7f3 fb51 	bl	8000320 <__aeabi_uldivmod>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	4610      	mov	r0, r2
 800cc84:	4619      	mov	r1, r3
 800cc86:	f04f 0200 	mov.w	r2, #0
 800cc8a:	f04f 0300 	mov.w	r3, #0
 800cc8e:	020b      	lsls	r3, r1, #8
 800cc90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cc94:	0202      	lsls	r2, r0, #8
 800cc96:	6979      	ldr	r1, [r7, #20]
 800cc98:	6849      	ldr	r1, [r1, #4]
 800cc9a:	0849      	lsrs	r1, r1, #1
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	460c      	mov	r4, r1
 800cca0:	4605      	mov	r5, r0
 800cca2:	eb12 0804 	adds.w	r8, r2, r4
 800cca6:	eb43 0905 	adc.w	r9, r3, r5
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	469a      	mov	sl, r3
 800ccb2:	4693      	mov	fp, r2
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	465b      	mov	r3, fp
 800ccb8:	4640      	mov	r0, r8
 800ccba:	4649      	mov	r1, r9
 800ccbc:	f7f3 fb30 	bl	8000320 <__aeabi_uldivmod>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccce:	d308      	bcc.n	800cce2 <UART_SetConfig+0x9a2>
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccd6:	d204      	bcs.n	800cce2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccde:	60da      	str	r2, [r3, #12]
 800cce0:	e17f      	b.n	800cfe2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cce8:	e17b      	b.n	800cfe2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	69db      	ldr	r3, [r3, #28]
 800ccee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccf2:	f040 80bd 	bne.w	800ce70 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ccf6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ccfa:	2b20      	cmp	r3, #32
 800ccfc:	dc48      	bgt.n	800cd90 <UART_SetConfig+0xa50>
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	db7b      	blt.n	800cdfa <UART_SetConfig+0xaba>
 800cd02:	2b20      	cmp	r3, #32
 800cd04:	d879      	bhi.n	800cdfa <UART_SetConfig+0xaba>
 800cd06:	a201      	add	r2, pc, #4	; (adr r2, 800cd0c <UART_SetConfig+0x9cc>)
 800cd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0c:	0800cd97 	.word	0x0800cd97
 800cd10:	0800cd9f 	.word	0x0800cd9f
 800cd14:	0800cdfb 	.word	0x0800cdfb
 800cd18:	0800cdfb 	.word	0x0800cdfb
 800cd1c:	0800cda7 	.word	0x0800cda7
 800cd20:	0800cdfb 	.word	0x0800cdfb
 800cd24:	0800cdfb 	.word	0x0800cdfb
 800cd28:	0800cdfb 	.word	0x0800cdfb
 800cd2c:	0800cdb7 	.word	0x0800cdb7
 800cd30:	0800cdfb 	.word	0x0800cdfb
 800cd34:	0800cdfb 	.word	0x0800cdfb
 800cd38:	0800cdfb 	.word	0x0800cdfb
 800cd3c:	0800cdfb 	.word	0x0800cdfb
 800cd40:	0800cdfb 	.word	0x0800cdfb
 800cd44:	0800cdfb 	.word	0x0800cdfb
 800cd48:	0800cdfb 	.word	0x0800cdfb
 800cd4c:	0800cdc7 	.word	0x0800cdc7
 800cd50:	0800cdfb 	.word	0x0800cdfb
 800cd54:	0800cdfb 	.word	0x0800cdfb
 800cd58:	0800cdfb 	.word	0x0800cdfb
 800cd5c:	0800cdfb 	.word	0x0800cdfb
 800cd60:	0800cdfb 	.word	0x0800cdfb
 800cd64:	0800cdfb 	.word	0x0800cdfb
 800cd68:	0800cdfb 	.word	0x0800cdfb
 800cd6c:	0800cdfb 	.word	0x0800cdfb
 800cd70:	0800cdfb 	.word	0x0800cdfb
 800cd74:	0800cdfb 	.word	0x0800cdfb
 800cd78:	0800cdfb 	.word	0x0800cdfb
 800cd7c:	0800cdfb 	.word	0x0800cdfb
 800cd80:	0800cdfb 	.word	0x0800cdfb
 800cd84:	0800cdfb 	.word	0x0800cdfb
 800cd88:	0800cdfb 	.word	0x0800cdfb
 800cd8c:	0800cded 	.word	0x0800cded
 800cd90:	2b40      	cmp	r3, #64	; 0x40
 800cd92:	d02e      	beq.n	800cdf2 <UART_SetConfig+0xab2>
 800cd94:	e031      	b.n	800cdfa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd96:	f7fb ff61 	bl	8008c5c <HAL_RCC_GetPCLK1Freq>
 800cd9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd9c:	e033      	b.n	800ce06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd9e:	f7fb ff73 	bl	8008c88 <HAL_RCC_GetPCLK2Freq>
 800cda2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cda4:	e02f      	b.n	800ce06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cda6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fc fe92 	bl	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb4:	e027      	b.n	800ce06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdb6:	f107 0318 	add.w	r3, r7, #24
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fc ffde 	bl	8009d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc4:	e01f      	b.n	800ce06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdc6:	4b69      	ldr	r3, [pc, #420]	; (800cf6c <UART_SetConfig+0xc2c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f003 0320 	and.w	r3, r3, #32
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d009      	beq.n	800cde6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdd2:	4b66      	ldr	r3, [pc, #408]	; (800cf6c <UART_SetConfig+0xc2c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	08db      	lsrs	r3, r3, #3
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	4a64      	ldr	r2, [pc, #400]	; (800cf70 <UART_SetConfig+0xc30>)
 800cdde:	fa22 f303 	lsr.w	r3, r2, r3
 800cde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cde4:	e00f      	b.n	800ce06 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cde6:	4b62      	ldr	r3, [pc, #392]	; (800cf70 <UART_SetConfig+0xc30>)
 800cde8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdea:	e00c      	b.n	800ce06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdec:	4b61      	ldr	r3, [pc, #388]	; (800cf74 <UART_SetConfig+0xc34>)
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf0:	e009      	b.n	800ce06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf8:	e005      	b.n	800ce06 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ce04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ce06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 80ea 	beq.w	800cfe2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce12:	4a55      	ldr	r2, [pc, #340]	; (800cf68 <UART_SetConfig+0xc28>)
 800ce14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce18:	461a      	mov	r2, r3
 800ce1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce20:	005a      	lsls	r2, r3, #1
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	085b      	lsrs	r3, r3, #1
 800ce28:	441a      	add	r2, r3
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	2b0f      	cmp	r3, #15
 800ce38:	d916      	bls.n	800ce68 <UART_SetConfig+0xb28>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce40:	d212      	bcs.n	800ce68 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	f023 030f 	bic.w	r3, r3, #15
 800ce4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	085b      	lsrs	r3, r3, #1
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	f003 0307 	and.w	r3, r3, #7
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ce64:	60da      	str	r2, [r3, #12]
 800ce66:	e0bc      	b.n	800cfe2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce6e:	e0b8      	b.n	800cfe2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ce70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce74:	2b20      	cmp	r3, #32
 800ce76:	dc4b      	bgt.n	800cf10 <UART_SetConfig+0xbd0>
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f2c0 8087 	blt.w	800cf8c <UART_SetConfig+0xc4c>
 800ce7e:	2b20      	cmp	r3, #32
 800ce80:	f200 8084 	bhi.w	800cf8c <UART_SetConfig+0xc4c>
 800ce84:	a201      	add	r2, pc, #4	; (adr r2, 800ce8c <UART_SetConfig+0xb4c>)
 800ce86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8a:	bf00      	nop
 800ce8c:	0800cf17 	.word	0x0800cf17
 800ce90:	0800cf1f 	.word	0x0800cf1f
 800ce94:	0800cf8d 	.word	0x0800cf8d
 800ce98:	0800cf8d 	.word	0x0800cf8d
 800ce9c:	0800cf27 	.word	0x0800cf27
 800cea0:	0800cf8d 	.word	0x0800cf8d
 800cea4:	0800cf8d 	.word	0x0800cf8d
 800cea8:	0800cf8d 	.word	0x0800cf8d
 800ceac:	0800cf37 	.word	0x0800cf37
 800ceb0:	0800cf8d 	.word	0x0800cf8d
 800ceb4:	0800cf8d 	.word	0x0800cf8d
 800ceb8:	0800cf8d 	.word	0x0800cf8d
 800cebc:	0800cf8d 	.word	0x0800cf8d
 800cec0:	0800cf8d 	.word	0x0800cf8d
 800cec4:	0800cf8d 	.word	0x0800cf8d
 800cec8:	0800cf8d 	.word	0x0800cf8d
 800cecc:	0800cf47 	.word	0x0800cf47
 800ced0:	0800cf8d 	.word	0x0800cf8d
 800ced4:	0800cf8d 	.word	0x0800cf8d
 800ced8:	0800cf8d 	.word	0x0800cf8d
 800cedc:	0800cf8d 	.word	0x0800cf8d
 800cee0:	0800cf8d 	.word	0x0800cf8d
 800cee4:	0800cf8d 	.word	0x0800cf8d
 800cee8:	0800cf8d 	.word	0x0800cf8d
 800ceec:	0800cf8d 	.word	0x0800cf8d
 800cef0:	0800cf8d 	.word	0x0800cf8d
 800cef4:	0800cf8d 	.word	0x0800cf8d
 800cef8:	0800cf8d 	.word	0x0800cf8d
 800cefc:	0800cf8d 	.word	0x0800cf8d
 800cf00:	0800cf8d 	.word	0x0800cf8d
 800cf04:	0800cf8d 	.word	0x0800cf8d
 800cf08:	0800cf8d 	.word	0x0800cf8d
 800cf0c:	0800cf7f 	.word	0x0800cf7f
 800cf10:	2b40      	cmp	r3, #64	; 0x40
 800cf12:	d037      	beq.n	800cf84 <UART_SetConfig+0xc44>
 800cf14:	e03a      	b.n	800cf8c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf16:	f7fb fea1 	bl	8008c5c <HAL_RCC_GetPCLK1Freq>
 800cf1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf1c:	e03c      	b.n	800cf98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf1e:	f7fb feb3 	bl	8008c88 <HAL_RCC_GetPCLK2Freq>
 800cf22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf24:	e038      	b.n	800cf98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fc fdd2 	bl	8009ad4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf34:	e030      	b.n	800cf98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf36:	f107 0318 	add.w	r3, r7, #24
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fc ff1e 	bl	8009d7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf44:	e028      	b.n	800cf98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf46:	4b09      	ldr	r3, [pc, #36]	; (800cf6c <UART_SetConfig+0xc2c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 0320 	and.w	r3, r3, #32
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d012      	beq.n	800cf78 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf52:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <UART_SetConfig+0xc2c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	08db      	lsrs	r3, r3, #3
 800cf58:	f003 0303 	and.w	r3, r3, #3
 800cf5c:	4a04      	ldr	r2, [pc, #16]	; (800cf70 <UART_SetConfig+0xc30>)
 800cf5e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf64:	e018      	b.n	800cf98 <UART_SetConfig+0xc58>
 800cf66:	bf00      	nop
 800cf68:	0800e224 	.word	0x0800e224
 800cf6c:	58024400 	.word	0x58024400
 800cf70:	03d09000 	.word	0x03d09000
 800cf74:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cf78:	4b24      	ldr	r3, [pc, #144]	; (800d00c <UART_SetConfig+0xccc>)
 800cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7c:	e00c      	b.n	800cf98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf7e:	4b24      	ldr	r3, [pc, #144]	; (800d010 <UART_SetConfig+0xcd0>)
 800cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf82:	e009      	b.n	800cf98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf8a:	e005      	b.n	800cf98 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf96:	bf00      	nop
    }

    if (pclk != 0U)
 800cf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d021      	beq.n	800cfe2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa2:	4a1c      	ldr	r2, [pc, #112]	; (800d014 <UART_SetConfig+0xcd4>)
 800cfa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfac:	fbb3 f2f2 	udiv	r2, r3, r2
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	085b      	lsrs	r3, r3, #1
 800cfb6:	441a      	add	r2, r3
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc4:	2b0f      	cmp	r3, #15
 800cfc6:	d909      	bls.n	800cfdc <UART_SetConfig+0xc9c>
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfce:	d205      	bcs.n	800cfdc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60da      	str	r2, [r3, #12]
 800cfda:	e002      	b.n	800cfe2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	2200      	movs	r2, #0
 800cff6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2200      	movs	r2, #0
 800cffc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cffe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d002:	4618      	mov	r0, r3
 800d004:	3748      	adds	r7, #72	; 0x48
 800d006:	46bd      	mov	sp, r7
 800d008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d00c:	03d09000 	.word	0x03d09000
 800d010:	003d0900 	.word	0x003d0900
 800d014:	0800e224 	.word	0x0800e224

0800d018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00a      	beq.n	800d042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d046:	f003 0302 	and.w	r3, r3, #2
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00a      	beq.n	800d064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	430a      	orrs	r2, r1
 800d062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	f003 0304 	and.w	r3, r3, #4
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00a      	beq.n	800d086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	430a      	orrs	r2, r1
 800d084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08a:	f003 0308 	and.w	r3, r3, #8
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00a      	beq.n	800d0a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	430a      	orrs	r2, r1
 800d0a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ac:	f003 0310 	and.w	r3, r3, #16
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00a      	beq.n	800d0ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	430a      	orrs	r2, r1
 800d0c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ce:	f003 0320 	and.w	r3, r3, #32
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00a      	beq.n	800d0ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	430a      	orrs	r2, r1
 800d0ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01a      	beq.n	800d12e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	430a      	orrs	r2, r1
 800d10c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d116:	d10a      	bne.n	800d12e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	430a      	orrs	r2, r1
 800d12c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00a      	beq.n	800d150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	430a      	orrs	r2, r1
 800d14e:	605a      	str	r2, [r3, #4]
  }
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af02      	add	r7, sp, #8
 800d162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d16c:	f7f7 fd16 	bl	8004b9c <HAL_GetTick>
 800d170:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f003 0308 	and.w	r3, r3, #8
 800d17c:	2b08      	cmp	r3, #8
 800d17e:	d10e      	bne.n	800d19e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d180:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 f82f 	bl	800d1f2 <UART_WaitOnFlagUntilTimeout>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d19a:	2303      	movs	r3, #3
 800d19c:	e025      	b.n	800d1ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	d10e      	bne.n	800d1ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 f819 	bl	800d1f2 <UART_WaitOnFlagUntilTimeout>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	e00f      	b.n	800d1ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2220      	movs	r2, #32
 800d1ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2220      	movs	r2, #32
 800d1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b09c      	sub	sp, #112	; 0x70
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	60b9      	str	r1, [r7, #8]
 800d1fc:	603b      	str	r3, [r7, #0]
 800d1fe:	4613      	mov	r3, r2
 800d200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d202:	e0a9      	b.n	800d358 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d20a:	f000 80a5 	beq.w	800d358 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d20e:	f7f7 fcc5 	bl	8004b9c <HAL_GetTick>
 800d212:	4602      	mov	r2, r0
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d302      	bcc.n	800d224 <UART_WaitOnFlagUntilTimeout+0x32>
 800d21e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d220:	2b00      	cmp	r3, #0
 800d222:	d140      	bne.n	800d2a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d234:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d238:	667b      	str	r3, [r7, #100]	; 0x64
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d242:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d244:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d246:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e6      	bne.n	800d224 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3308      	adds	r3, #8
 800d25c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d260:	e853 3f00 	ldrex	r3, [r3]
 800d264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	f023 0301 	bic.w	r3, r3, #1
 800d26c:	663b      	str	r3, [r7, #96]	; 0x60
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3308      	adds	r3, #8
 800d274:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d276:	64ba      	str	r2, [r7, #72]	; 0x48
 800d278:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d27c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d27e:	e841 2300 	strex	r3, r2, [r1]
 800d282:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1e5      	bne.n	800d256 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2220      	movs	r2, #32
 800d28e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2220      	movs	r2, #32
 800d296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e069      	b.n	800d37a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f003 0304 	and.w	r3, r3, #4
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d051      	beq.n	800d358 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2c2:	d149      	bne.n	800d358 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	e853 3f00 	ldrex	r3, [r3]
 800d2da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d2e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2ec:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2f4:	e841 2300 	strex	r3, r2, [r1]
 800d2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1e6      	bne.n	800d2ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3308      	adds	r3, #8
 800d306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	e853 3f00 	ldrex	r3, [r3]
 800d30e:	613b      	str	r3, [r7, #16]
   return(result);
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	f023 0301 	bic.w	r3, r3, #1
 800d316:	66bb      	str	r3, [r7, #104]	; 0x68
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3308      	adds	r3, #8
 800d31e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d320:	623a      	str	r2, [r7, #32]
 800d322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d324:	69f9      	ldr	r1, [r7, #28]
 800d326:	6a3a      	ldr	r2, [r7, #32]
 800d328:	e841 2300 	strex	r3, r2, [r1]
 800d32c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1e5      	bne.n	800d300 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2220      	movs	r2, #32
 800d338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2220      	movs	r2, #32
 800d340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2220      	movs	r2, #32
 800d348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d354:	2303      	movs	r3, #3
 800d356:	e010      	b.n	800d37a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	69da      	ldr	r2, [r3, #28]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	4013      	ands	r3, r2
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	429a      	cmp	r2, r3
 800d366:	bf0c      	ite	eq
 800d368:	2301      	moveq	r3, #1
 800d36a:	2300      	movne	r3, #0
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	461a      	mov	r2, r3
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	429a      	cmp	r2, r3
 800d374:	f43f af46 	beq.w	800d204 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3770      	adds	r7, #112	; 0x70
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
	...

0800d384 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b096      	sub	sp, #88	; 0x58
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	4613      	mov	r3, r2
 800d390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	88fa      	ldrh	r2, [r7, #6]
 800d39c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2222      	movs	r2, #34	; 0x22
 800d3ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d02c      	beq.n	800d412 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3bc:	4a42      	ldr	r2, [pc, #264]	; (800d4c8 <UART_Start_Receive_DMA+0x144>)
 800d3be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3c4:	4a41      	ldr	r2, [pc, #260]	; (800d4cc <UART_Start_Receive_DMA+0x148>)
 800d3c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3cc:	4a40      	ldr	r2, [pc, #256]	; (800d4d0 <UART_Start_Receive_DMA+0x14c>)
 800d3ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3324      	adds	r3, #36	; 0x24
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	88fb      	ldrh	r3, [r7, #6]
 800d3ec:	f7f8 f84c 	bl	8005488 <HAL_DMA_Start_IT>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00d      	beq.n	800d412 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2210      	movs	r2, #16
 800d3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2220      	movs	r2, #32
 800d40a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e055      	b.n	800d4be <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d018      	beq.n	800d454 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d42a:	e853 3f00 	ldrex	r3, [r3]
 800d42e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d436:	657b      	str	r3, [r7, #84]	; 0x54
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	461a      	mov	r2, r3
 800d43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d440:	64bb      	str	r3, [r7, #72]	; 0x48
 800d442:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d444:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d448:	e841 2300 	strex	r3, r2, [r1]
 800d44c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d44e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1e6      	bne.n	800d422 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3308      	adds	r3, #8
 800d45a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	e853 3f00 	ldrex	r3, [r3]
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	f043 0301 	orr.w	r3, r3, #1
 800d46a:	653b      	str	r3, [r7, #80]	; 0x50
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3308      	adds	r3, #8
 800d472:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d474:	637a      	str	r2, [r7, #52]	; 0x34
 800d476:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d47c:	e841 2300 	strex	r3, r2, [r1]
 800d480:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d1e5      	bne.n	800d454 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3308      	adds	r3, #8
 800d48e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	e853 3f00 	ldrex	r3, [r3]
 800d496:	613b      	str	r3, [r7, #16]
   return(result);
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d4a8:	623a      	str	r2, [r7, #32]
 800d4aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ac:	69f9      	ldr	r1, [r7, #28]
 800d4ae:	6a3a      	ldr	r2, [r7, #32]
 800d4b0:	e841 2300 	strex	r3, r2, [r1]
 800d4b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1e5      	bne.n	800d488 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3758      	adds	r7, #88	; 0x58
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	0800d6d7 	.word	0x0800d6d7
 800d4cc:	0800d7f9 	.word	0x0800d7f9
 800d4d0:	0800d831 	.word	0x0800d831

0800d4d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b08f      	sub	sp, #60	; 0x3c
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	e853 3f00 	ldrex	r3, [r3]
 800d4e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d4f0:	637b      	str	r3, [r7, #52]	; 0x34
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4fc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d502:	e841 2300 	strex	r3, r2, [r1]
 800d506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1e6      	bne.n	800d4dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3308      	adds	r3, #8
 800d514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d524:	633b      	str	r3, [r7, #48]	; 0x30
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	3308      	adds	r3, #8
 800d52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d52e:	61ba      	str	r2, [r7, #24]
 800d530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d532:	6979      	ldr	r1, [r7, #20]
 800d534:	69ba      	ldr	r2, [r7, #24]
 800d536:	e841 2300 	strex	r3, r2, [r1]
 800d53a:	613b      	str	r3, [r7, #16]
   return(result);
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1e5      	bne.n	800d50e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2220      	movs	r2, #32
 800d546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d54a:	bf00      	nop
 800d54c:	373c      	adds	r7, #60	; 0x3c
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
	...

0800d558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d558:	b480      	push	{r7}
 800d55a:	b095      	sub	sp, #84	; 0x54
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d568:	e853 3f00 	ldrex	r3, [r3]
 800d56c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d574:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d57e:	643b      	str	r3, [r7, #64]	; 0x40
 800d580:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d582:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d586:	e841 2300 	strex	r3, r2, [r1]
 800d58a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1e6      	bne.n	800d560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3308      	adds	r3, #8
 800d598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	e853 3f00 	ldrex	r3, [r3]
 800d5a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5a2:	69fa      	ldr	r2, [r7, #28]
 800d5a4:	4b1e      	ldr	r3, [pc, #120]	; (800d620 <UART_EndRxTransfer+0xc8>)
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5ba:	e841 2300 	strex	r3, r2, [r1]
 800d5be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e5      	bne.n	800d592 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d118      	bne.n	800d600 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	e853 3f00 	ldrex	r3, [r3]
 800d5da:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f023 0310 	bic.w	r3, r3, #16
 800d5e2:	647b      	str	r3, [r7, #68]	; 0x44
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ec:	61bb      	str	r3, [r7, #24]
 800d5ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f0:	6979      	ldr	r1, [r7, #20]
 800d5f2:	69ba      	ldr	r2, [r7, #24]
 800d5f4:	e841 2300 	strex	r3, r2, [r1]
 800d5f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1e6      	bne.n	800d5ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2220      	movs	r2, #32
 800d604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d614:	bf00      	nop
 800d616:	3754      	adds	r7, #84	; 0x54
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr
 800d620:	effffffe 	.word	0xeffffffe

0800d624 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b090      	sub	sp, #64	; 0x40
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d630:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d63a:	d037      	beq.n	800d6ac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63e:	2200      	movs	r2, #0
 800d640:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3308      	adds	r3, #8
 800d64a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	e853 3f00 	ldrex	r3, [r3]
 800d652:	623b      	str	r3, [r7, #32]
   return(result);
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d65a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3308      	adds	r3, #8
 800d662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d664:	633a      	str	r2, [r7, #48]	; 0x30
 800d666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d66c:	e841 2300 	strex	r3, r2, [r1]
 800d670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1e5      	bne.n	800d644 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	e853 3f00 	ldrex	r3, [r3]
 800d684:	60fb      	str	r3, [r7, #12]
   return(result);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d68c:	637b      	str	r3, [r7, #52]	; 0x34
 800d68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d696:	61fb      	str	r3, [r7, #28]
 800d698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69a:	69b9      	ldr	r1, [r7, #24]
 800d69c:	69fa      	ldr	r2, [r7, #28]
 800d69e:	e841 2300 	strex	r3, r2, [r1]
 800d6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e6      	bne.n	800d678 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6aa:	e002      	b.n	800d6b2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d6ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d6ae:	f7f5 fdd5 	bl	800325c <HAL_UART_TxCpltCallback>
}
 800d6b2:	bf00      	nop
 800d6b4:	3740      	adds	r7, #64	; 0x40
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b084      	sub	sp, #16
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f7fe fe0f 	bl	800c2ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}

0800d6d6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b09c      	sub	sp, #112	; 0x70
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	69db      	ldr	r3, [r3, #28]
 800d6e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6ec:	d071      	beq.n	800d7d2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6fe:	e853 3f00 	ldrex	r3, [r3]
 800d702:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d70a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	461a      	mov	r2, r3
 800d712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d714:	65bb      	str	r3, [r7, #88]	; 0x58
 800d716:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d71a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d71c:	e841 2300 	strex	r3, r2, [r1]
 800d720:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e6      	bne.n	800d6f6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	3308      	adds	r3, #8
 800d72e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	e853 3f00 	ldrex	r3, [r3]
 800d736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73a:	f023 0301 	bic.w	r3, r3, #1
 800d73e:	667b      	str	r3, [r7, #100]	; 0x64
 800d740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3308      	adds	r3, #8
 800d746:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d748:	647a      	str	r2, [r7, #68]	; 0x44
 800d74a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d74e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d750:	e841 2300 	strex	r3, r2, [r1]
 800d754:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1e5      	bne.n	800d728 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d75c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3308      	adds	r3, #8
 800d762:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d766:	e853 3f00 	ldrex	r3, [r3]
 800d76a:	623b      	str	r3, [r7, #32]
   return(result);
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d772:	663b      	str	r3, [r7, #96]	; 0x60
 800d774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	3308      	adds	r3, #8
 800d77a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d77c:	633a      	str	r2, [r7, #48]	; 0x30
 800d77e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d780:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d784:	e841 2300 	strex	r3, r2, [r1]
 800d788:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1e5      	bne.n	800d75c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d792:	2220      	movs	r2, #32
 800d794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d118      	bne.n	800d7d2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	e853 3f00 	ldrex	r3, [r3]
 800d7ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f023 0310 	bic.w	r3, r3, #16
 800d7b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7be:	61fb      	str	r3, [r7, #28]
 800d7c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c2:	69b9      	ldr	r1, [r7, #24]
 800d7c4:	69fa      	ldr	r2, [r7, #28]
 800d7c6:	e841 2300 	strex	r3, r2, [r1]
 800d7ca:	617b      	str	r3, [r7, #20]
   return(result);
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1e6      	bne.n	800d7a0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d107      	bne.n	800d7ea <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d7dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d7e4:	f7fe fda0 	bl	800c328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d7e8:	e002      	b.n	800d7f0 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d7ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d7ec:	f7f5 fd48 	bl	8003280 <HAL_UART_RxCpltCallback>
}
 800d7f0:	bf00      	nop
 800d7f2:	3770      	adds	r7, #112	; 0x70
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d804:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d109      	bne.n	800d822 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d814:	085b      	lsrs	r3, r3, #1
 800d816:	b29b      	uxth	r3, r3
 800d818:	4619      	mov	r1, r3
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7fe fd84 	bl	800c328 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d820:	e002      	b.n	800d828 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f7fe fd6c 	bl	800c300 <HAL_UART_RxHalfCpltCallback>
}
 800d828:	bf00      	nop
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d844:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d84c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d858:	2b80      	cmp	r3, #128	; 0x80
 800d85a:	d109      	bne.n	800d870 <UART_DMAError+0x40>
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	2b21      	cmp	r3, #33	; 0x21
 800d860:	d106      	bne.n	800d870 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2200      	movs	r2, #0
 800d866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d86a:	6978      	ldr	r0, [r7, #20]
 800d86c:	f7ff fe32 	bl	800d4d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87a:	2b40      	cmp	r3, #64	; 0x40
 800d87c:	d109      	bne.n	800d892 <UART_DMAError+0x62>
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2b22      	cmp	r3, #34	; 0x22
 800d882:	d106      	bne.n	800d892 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	2200      	movs	r2, #0
 800d888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d88c:	6978      	ldr	r0, [r7, #20]
 800d88e:	f7ff fe63 	bl	800d558 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d898:	f043 0210 	orr.w	r2, r3, #16
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8a2:	6978      	ldr	r0, [r7, #20]
 800d8a4:	f7fe fd36 	bl	800c314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8a8:	bf00      	nop
 800d8aa:	3718      	adds	r7, #24
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f7fe fd20 	bl	800c314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8d4:	bf00      	nop
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b088      	sub	sp, #32
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	e853 3f00 	ldrex	r3, [r3]
 800d8f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	461a      	mov	r2, r3
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	61bb      	str	r3, [r7, #24]
 800d904:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d906:	6979      	ldr	r1, [r7, #20]
 800d908:	69ba      	ldr	r2, [r7, #24]
 800d90a:	e841 2300 	strex	r3, r2, [r1]
 800d90e:	613b      	str	r3, [r7, #16]
   return(result);
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1e6      	bne.n	800d8e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2220      	movs	r2, #32
 800d91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7f5 fc99 	bl	800325c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d92a:	bf00      	nop
 800d92c:	3720      	adds	r7, #32
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d932:	b480      	push	{r7}
 800d934:	b083      	sub	sp, #12
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d93a:	bf00      	nop
 800d93c:	370c      	adds	r7, #12
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d946:	b480      	push	{r7}
 800d948:	b083      	sub	sp, #12
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d95a:	b480      	push	{r7}
 800d95c:	b083      	sub	sp, #12
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d962:	bf00      	nop
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d96e:	b480      	push	{r7}
 800d970:	b085      	sub	sp, #20
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d101      	bne.n	800d984 <HAL_UARTEx_DisableFifoMode+0x16>
 800d980:	2302      	movs	r3, #2
 800d982:	e027      	b.n	800d9d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2224      	movs	r2, #36	; 0x24
 800d990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f022 0201 	bic.w	r2, r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d9b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2220      	movs	r2, #32
 800d9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d101      	bne.n	800d9f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	e02d      	b.n	800da54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2224      	movs	r2, #36	; 0x24
 800da04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f022 0201 	bic.w	r2, r2, #1
 800da1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	689b      	ldr	r3, [r3, #8]
 800da26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	683a      	ldr	r2, [r7, #0]
 800da30:	430a      	orrs	r2, r1
 800da32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f84f 	bl	800dad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2220      	movs	r2, #32
 800da46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d101      	bne.n	800da74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da70:	2302      	movs	r3, #2
 800da72:	e02d      	b.n	800dad0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2224      	movs	r2, #36	; 0x24
 800da80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f022 0201 	bic.w	r2, r2, #1
 800da9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	430a      	orrs	r2, r1
 800daae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f811 	bl	800dad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2220      	movs	r2, #32
 800dac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3710      	adds	r7, #16
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d108      	bne.n	800dafa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800daf8:	e031      	b.n	800db5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dafa:	2310      	movs	r3, #16
 800dafc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dafe:	2310      	movs	r3, #16
 800db00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	0e5b      	lsrs	r3, r3, #25
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	f003 0307 	and.w	r3, r3, #7
 800db10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	0f5b      	lsrs	r3, r3, #29
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	f003 0307 	and.w	r3, r3, #7
 800db20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db22:	7bbb      	ldrb	r3, [r7, #14]
 800db24:	7b3a      	ldrb	r2, [r7, #12]
 800db26:	4911      	ldr	r1, [pc, #68]	; (800db6c <UARTEx_SetNbDataToProcess+0x94>)
 800db28:	5c8a      	ldrb	r2, [r1, r2]
 800db2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db2e:	7b3a      	ldrb	r2, [r7, #12]
 800db30:	490f      	ldr	r1, [pc, #60]	; (800db70 <UARTEx_SetNbDataToProcess+0x98>)
 800db32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db34:	fb93 f3f2 	sdiv	r3, r3, r2
 800db38:	b29a      	uxth	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db40:	7bfb      	ldrb	r3, [r7, #15]
 800db42:	7b7a      	ldrb	r2, [r7, #13]
 800db44:	4909      	ldr	r1, [pc, #36]	; (800db6c <UARTEx_SetNbDataToProcess+0x94>)
 800db46:	5c8a      	ldrb	r2, [r1, r2]
 800db48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db4c:	7b7a      	ldrb	r2, [r7, #13]
 800db4e:	4908      	ldr	r1, [pc, #32]	; (800db70 <UARTEx_SetNbDataToProcess+0x98>)
 800db50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db52:	fb93 f3f2 	sdiv	r3, r3, r2
 800db56:	b29a      	uxth	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800db5e:	bf00      	nop
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	0800e23c 	.word	0x0800e23c
 800db70:	0800e244 	.word	0x0800e244

0800db74 <__cxa_pure_virtual>:
 800db74:	b508      	push	{r3, lr}
 800db76:	f000 f80d 	bl	800db94 <_ZSt9terminatev>

0800db7a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800db7a:	b508      	push	{r3, lr}
 800db7c:	4780      	blx	r0
 800db7e:	f000 f80e 	bl	800db9e <abort>
	...

0800db84 <_ZSt13get_terminatev>:
 800db84:	4b02      	ldr	r3, [pc, #8]	; (800db90 <_ZSt13get_terminatev+0xc>)
 800db86:	6818      	ldr	r0, [r3, #0]
 800db88:	f3bf 8f5b 	dmb	ish
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	24000014 	.word	0x24000014

0800db94 <_ZSt9terminatev>:
 800db94:	b508      	push	{r3, lr}
 800db96:	f7ff fff5 	bl	800db84 <_ZSt13get_terminatev>
 800db9a:	f7ff ffee 	bl	800db7a <_ZN10__cxxabiv111__terminateEPFvvE>

0800db9e <abort>:
 800db9e:	b508      	push	{r3, lr}
 800dba0:	2006      	movs	r0, #6
 800dba2:	f000 f873 	bl	800dc8c <raise>
 800dba6:	2001      	movs	r0, #1
 800dba8:	f7f6 fd4a 	bl	8004640 <_exit>

0800dbac <__errno>:
 800dbac:	4b01      	ldr	r3, [pc, #4]	; (800dbb4 <__errno+0x8>)
 800dbae:	6818      	ldr	r0, [r3, #0]
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	24000018 	.word	0x24000018

0800dbb8 <__libc_init_array>:
 800dbb8:	b570      	push	{r4, r5, r6, lr}
 800dbba:	4d0d      	ldr	r5, [pc, #52]	; (800dbf0 <__libc_init_array+0x38>)
 800dbbc:	4c0d      	ldr	r4, [pc, #52]	; (800dbf4 <__libc_init_array+0x3c>)
 800dbbe:	1b64      	subs	r4, r4, r5
 800dbc0:	10a4      	asrs	r4, r4, #2
 800dbc2:	2600      	movs	r6, #0
 800dbc4:	42a6      	cmp	r6, r4
 800dbc6:	d109      	bne.n	800dbdc <__libc_init_array+0x24>
 800dbc8:	4d0b      	ldr	r5, [pc, #44]	; (800dbf8 <__libc_init_array+0x40>)
 800dbca:	4c0c      	ldr	r4, [pc, #48]	; (800dbfc <__libc_init_array+0x44>)
 800dbcc:	f000 f9b0 	bl	800df30 <_init>
 800dbd0:	1b64      	subs	r4, r4, r5
 800dbd2:	10a4      	asrs	r4, r4, #2
 800dbd4:	2600      	movs	r6, #0
 800dbd6:	42a6      	cmp	r6, r4
 800dbd8:	d105      	bne.n	800dbe6 <__libc_init_array+0x2e>
 800dbda:	bd70      	pop	{r4, r5, r6, pc}
 800dbdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe0:	4798      	blx	r3
 800dbe2:	3601      	adds	r6, #1
 800dbe4:	e7ee      	b.n	800dbc4 <__libc_init_array+0xc>
 800dbe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbea:	4798      	blx	r3
 800dbec:	3601      	adds	r6, #1
 800dbee:	e7f2      	b.n	800dbd6 <__libc_init_array+0x1e>
 800dbf0:	0800e254 	.word	0x0800e254
 800dbf4:	0800e254 	.word	0x0800e254
 800dbf8:	0800e254 	.word	0x0800e254
 800dbfc:	0800e268 	.word	0x0800e268

0800dc00 <memcpy>:
 800dc00:	440a      	add	r2, r1
 800dc02:	4291      	cmp	r1, r2
 800dc04:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc08:	d100      	bne.n	800dc0c <memcpy+0xc>
 800dc0a:	4770      	bx	lr
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc16:	4291      	cmp	r1, r2
 800dc18:	d1f9      	bne.n	800dc0e <memcpy+0xe>
 800dc1a:	bd10      	pop	{r4, pc}

0800dc1c <memset>:
 800dc1c:	4402      	add	r2, r0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d100      	bne.n	800dc26 <memset+0xa>
 800dc24:	4770      	bx	lr
 800dc26:	f803 1b01 	strb.w	r1, [r3], #1
 800dc2a:	e7f9      	b.n	800dc20 <memset+0x4>

0800dc2c <realloc>:
 800dc2c:	4b02      	ldr	r3, [pc, #8]	; (800dc38 <realloc+0xc>)
 800dc2e:	460a      	mov	r2, r1
 800dc30:	4601      	mov	r1, r0
 800dc32:	6818      	ldr	r0, [r3, #0]
 800dc34:	f000 b8da 	b.w	800ddec <_realloc_r>
 800dc38:	24000018 	.word	0x24000018

0800dc3c <_raise_r>:
 800dc3c:	291f      	cmp	r1, #31
 800dc3e:	b538      	push	{r3, r4, r5, lr}
 800dc40:	4604      	mov	r4, r0
 800dc42:	460d      	mov	r5, r1
 800dc44:	d904      	bls.n	800dc50 <_raise_r+0x14>
 800dc46:	2316      	movs	r3, #22
 800dc48:	6003      	str	r3, [r0, #0]
 800dc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc52:	b112      	cbz	r2, 800dc5a <_raise_r+0x1e>
 800dc54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc58:	b94b      	cbnz	r3, 800dc6e <_raise_r+0x32>
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f000 f830 	bl	800dcc0 <_getpid_r>
 800dc60:	462a      	mov	r2, r5
 800dc62:	4601      	mov	r1, r0
 800dc64:	4620      	mov	r0, r4
 800dc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc6a:	f000 b817 	b.w	800dc9c <_kill_r>
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d00a      	beq.n	800dc88 <_raise_r+0x4c>
 800dc72:	1c59      	adds	r1, r3, #1
 800dc74:	d103      	bne.n	800dc7e <_raise_r+0x42>
 800dc76:	2316      	movs	r3, #22
 800dc78:	6003      	str	r3, [r0, #0]
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	e7e7      	b.n	800dc4e <_raise_r+0x12>
 800dc7e:	2400      	movs	r4, #0
 800dc80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc84:	4628      	mov	r0, r5
 800dc86:	4798      	blx	r3
 800dc88:	2000      	movs	r0, #0
 800dc8a:	e7e0      	b.n	800dc4e <_raise_r+0x12>

0800dc8c <raise>:
 800dc8c:	4b02      	ldr	r3, [pc, #8]	; (800dc98 <raise+0xc>)
 800dc8e:	4601      	mov	r1, r0
 800dc90:	6818      	ldr	r0, [r3, #0]
 800dc92:	f7ff bfd3 	b.w	800dc3c <_raise_r>
 800dc96:	bf00      	nop
 800dc98:	24000018 	.word	0x24000018

0800dc9c <_kill_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d07      	ldr	r5, [pc, #28]	; (800dcbc <_kill_r+0x20>)
 800dca0:	2300      	movs	r3, #0
 800dca2:	4604      	mov	r4, r0
 800dca4:	4608      	mov	r0, r1
 800dca6:	4611      	mov	r1, r2
 800dca8:	602b      	str	r3, [r5, #0]
 800dcaa:	f7f6 fcb9 	bl	8004620 <_kill>
 800dcae:	1c43      	adds	r3, r0, #1
 800dcb0:	d102      	bne.n	800dcb8 <_kill_r+0x1c>
 800dcb2:	682b      	ldr	r3, [r5, #0]
 800dcb4:	b103      	cbz	r3, 800dcb8 <_kill_r+0x1c>
 800dcb6:	6023      	str	r3, [r4, #0]
 800dcb8:	bd38      	pop	{r3, r4, r5, pc}
 800dcba:	bf00      	nop
 800dcbc:	24001100 	.word	0x24001100

0800dcc0 <_getpid_r>:
 800dcc0:	f7f6 bca6 	b.w	8004610 <_getpid>

0800dcc4 <sbrk_aligned>:
 800dcc4:	b570      	push	{r4, r5, r6, lr}
 800dcc6:	4e0e      	ldr	r6, [pc, #56]	; (800dd00 <sbrk_aligned+0x3c>)
 800dcc8:	460c      	mov	r4, r1
 800dcca:	6831      	ldr	r1, [r6, #0]
 800dccc:	4605      	mov	r5, r0
 800dcce:	b911      	cbnz	r1, 800dcd6 <sbrk_aligned+0x12>
 800dcd0:	f000 f8bc 	bl	800de4c <_sbrk_r>
 800dcd4:	6030      	str	r0, [r6, #0]
 800dcd6:	4621      	mov	r1, r4
 800dcd8:	4628      	mov	r0, r5
 800dcda:	f000 f8b7 	bl	800de4c <_sbrk_r>
 800dcde:	1c43      	adds	r3, r0, #1
 800dce0:	d00a      	beq.n	800dcf8 <sbrk_aligned+0x34>
 800dce2:	1cc4      	adds	r4, r0, #3
 800dce4:	f024 0403 	bic.w	r4, r4, #3
 800dce8:	42a0      	cmp	r0, r4
 800dcea:	d007      	beq.n	800dcfc <sbrk_aligned+0x38>
 800dcec:	1a21      	subs	r1, r4, r0
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f000 f8ac 	bl	800de4c <_sbrk_r>
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d101      	bne.n	800dcfc <sbrk_aligned+0x38>
 800dcf8:	f04f 34ff 	mov.w	r4, #4294967295
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
 800dd00:	240010fc 	.word	0x240010fc

0800dd04 <_malloc_r>:
 800dd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd08:	1ccd      	adds	r5, r1, #3
 800dd0a:	f025 0503 	bic.w	r5, r5, #3
 800dd0e:	3508      	adds	r5, #8
 800dd10:	2d0c      	cmp	r5, #12
 800dd12:	bf38      	it	cc
 800dd14:	250c      	movcc	r5, #12
 800dd16:	2d00      	cmp	r5, #0
 800dd18:	4607      	mov	r7, r0
 800dd1a:	db01      	blt.n	800dd20 <_malloc_r+0x1c>
 800dd1c:	42a9      	cmp	r1, r5
 800dd1e:	d905      	bls.n	800dd2c <_malloc_r+0x28>
 800dd20:	230c      	movs	r3, #12
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	2600      	movs	r6, #0
 800dd26:	4630      	mov	r0, r6
 800dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd2c:	4e2e      	ldr	r6, [pc, #184]	; (800dde8 <_malloc_r+0xe4>)
 800dd2e:	f000 f89d 	bl	800de6c <__malloc_lock>
 800dd32:	6833      	ldr	r3, [r6, #0]
 800dd34:	461c      	mov	r4, r3
 800dd36:	bb34      	cbnz	r4, 800dd86 <_malloc_r+0x82>
 800dd38:	4629      	mov	r1, r5
 800dd3a:	4638      	mov	r0, r7
 800dd3c:	f7ff ffc2 	bl	800dcc4 <sbrk_aligned>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	4604      	mov	r4, r0
 800dd44:	d14d      	bne.n	800dde2 <_malloc_r+0xde>
 800dd46:	6834      	ldr	r4, [r6, #0]
 800dd48:	4626      	mov	r6, r4
 800dd4a:	2e00      	cmp	r6, #0
 800dd4c:	d140      	bne.n	800ddd0 <_malloc_r+0xcc>
 800dd4e:	6823      	ldr	r3, [r4, #0]
 800dd50:	4631      	mov	r1, r6
 800dd52:	4638      	mov	r0, r7
 800dd54:	eb04 0803 	add.w	r8, r4, r3
 800dd58:	f000 f878 	bl	800de4c <_sbrk_r>
 800dd5c:	4580      	cmp	r8, r0
 800dd5e:	d13a      	bne.n	800ddd6 <_malloc_r+0xd2>
 800dd60:	6821      	ldr	r1, [r4, #0]
 800dd62:	3503      	adds	r5, #3
 800dd64:	1a6d      	subs	r5, r5, r1
 800dd66:	f025 0503 	bic.w	r5, r5, #3
 800dd6a:	3508      	adds	r5, #8
 800dd6c:	2d0c      	cmp	r5, #12
 800dd6e:	bf38      	it	cc
 800dd70:	250c      	movcc	r5, #12
 800dd72:	4629      	mov	r1, r5
 800dd74:	4638      	mov	r0, r7
 800dd76:	f7ff ffa5 	bl	800dcc4 <sbrk_aligned>
 800dd7a:	3001      	adds	r0, #1
 800dd7c:	d02b      	beq.n	800ddd6 <_malloc_r+0xd2>
 800dd7e:	6823      	ldr	r3, [r4, #0]
 800dd80:	442b      	add	r3, r5
 800dd82:	6023      	str	r3, [r4, #0]
 800dd84:	e00e      	b.n	800dda4 <_malloc_r+0xa0>
 800dd86:	6822      	ldr	r2, [r4, #0]
 800dd88:	1b52      	subs	r2, r2, r5
 800dd8a:	d41e      	bmi.n	800ddca <_malloc_r+0xc6>
 800dd8c:	2a0b      	cmp	r2, #11
 800dd8e:	d916      	bls.n	800ddbe <_malloc_r+0xba>
 800dd90:	1961      	adds	r1, r4, r5
 800dd92:	42a3      	cmp	r3, r4
 800dd94:	6025      	str	r5, [r4, #0]
 800dd96:	bf18      	it	ne
 800dd98:	6059      	strne	r1, [r3, #4]
 800dd9a:	6863      	ldr	r3, [r4, #4]
 800dd9c:	bf08      	it	eq
 800dd9e:	6031      	streq	r1, [r6, #0]
 800dda0:	5162      	str	r2, [r4, r5]
 800dda2:	604b      	str	r3, [r1, #4]
 800dda4:	4638      	mov	r0, r7
 800dda6:	f104 060b 	add.w	r6, r4, #11
 800ddaa:	f000 f865 	bl	800de78 <__malloc_unlock>
 800ddae:	f026 0607 	bic.w	r6, r6, #7
 800ddb2:	1d23      	adds	r3, r4, #4
 800ddb4:	1af2      	subs	r2, r6, r3
 800ddb6:	d0b6      	beq.n	800dd26 <_malloc_r+0x22>
 800ddb8:	1b9b      	subs	r3, r3, r6
 800ddba:	50a3      	str	r3, [r4, r2]
 800ddbc:	e7b3      	b.n	800dd26 <_malloc_r+0x22>
 800ddbe:	6862      	ldr	r2, [r4, #4]
 800ddc0:	42a3      	cmp	r3, r4
 800ddc2:	bf0c      	ite	eq
 800ddc4:	6032      	streq	r2, [r6, #0]
 800ddc6:	605a      	strne	r2, [r3, #4]
 800ddc8:	e7ec      	b.n	800dda4 <_malloc_r+0xa0>
 800ddca:	4623      	mov	r3, r4
 800ddcc:	6864      	ldr	r4, [r4, #4]
 800ddce:	e7b2      	b.n	800dd36 <_malloc_r+0x32>
 800ddd0:	4634      	mov	r4, r6
 800ddd2:	6876      	ldr	r6, [r6, #4]
 800ddd4:	e7b9      	b.n	800dd4a <_malloc_r+0x46>
 800ddd6:	230c      	movs	r3, #12
 800ddd8:	603b      	str	r3, [r7, #0]
 800ddda:	4638      	mov	r0, r7
 800dddc:	f000 f84c 	bl	800de78 <__malloc_unlock>
 800dde0:	e7a1      	b.n	800dd26 <_malloc_r+0x22>
 800dde2:	6025      	str	r5, [r4, #0]
 800dde4:	e7de      	b.n	800dda4 <_malloc_r+0xa0>
 800dde6:	bf00      	nop
 800dde8:	240010f8 	.word	0x240010f8

0800ddec <_realloc_r>:
 800ddec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf0:	4680      	mov	r8, r0
 800ddf2:	4614      	mov	r4, r2
 800ddf4:	460e      	mov	r6, r1
 800ddf6:	b921      	cbnz	r1, 800de02 <_realloc_r+0x16>
 800ddf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	f7ff bf81 	b.w	800dd04 <_malloc_r>
 800de02:	b92a      	cbnz	r2, 800de10 <_realloc_r+0x24>
 800de04:	f000 f83e 	bl	800de84 <_free_r>
 800de08:	4625      	mov	r5, r4
 800de0a:	4628      	mov	r0, r5
 800de0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de10:	f000 f884 	bl	800df1c <_malloc_usable_size_r>
 800de14:	4284      	cmp	r4, r0
 800de16:	4607      	mov	r7, r0
 800de18:	d802      	bhi.n	800de20 <_realloc_r+0x34>
 800de1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de1e:	d812      	bhi.n	800de46 <_realloc_r+0x5a>
 800de20:	4621      	mov	r1, r4
 800de22:	4640      	mov	r0, r8
 800de24:	f7ff ff6e 	bl	800dd04 <_malloc_r>
 800de28:	4605      	mov	r5, r0
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d0ed      	beq.n	800de0a <_realloc_r+0x1e>
 800de2e:	42bc      	cmp	r4, r7
 800de30:	4622      	mov	r2, r4
 800de32:	4631      	mov	r1, r6
 800de34:	bf28      	it	cs
 800de36:	463a      	movcs	r2, r7
 800de38:	f7ff fee2 	bl	800dc00 <memcpy>
 800de3c:	4631      	mov	r1, r6
 800de3e:	4640      	mov	r0, r8
 800de40:	f000 f820 	bl	800de84 <_free_r>
 800de44:	e7e1      	b.n	800de0a <_realloc_r+0x1e>
 800de46:	4635      	mov	r5, r6
 800de48:	e7df      	b.n	800de0a <_realloc_r+0x1e>
	...

0800de4c <_sbrk_r>:
 800de4c:	b538      	push	{r3, r4, r5, lr}
 800de4e:	4d06      	ldr	r5, [pc, #24]	; (800de68 <_sbrk_r+0x1c>)
 800de50:	2300      	movs	r3, #0
 800de52:	4604      	mov	r4, r0
 800de54:	4608      	mov	r0, r1
 800de56:	602b      	str	r3, [r5, #0]
 800de58:	f7f6 fbfc 	bl	8004654 <_sbrk>
 800de5c:	1c43      	adds	r3, r0, #1
 800de5e:	d102      	bne.n	800de66 <_sbrk_r+0x1a>
 800de60:	682b      	ldr	r3, [r5, #0]
 800de62:	b103      	cbz	r3, 800de66 <_sbrk_r+0x1a>
 800de64:	6023      	str	r3, [r4, #0]
 800de66:	bd38      	pop	{r3, r4, r5, pc}
 800de68:	24001100 	.word	0x24001100

0800de6c <__malloc_lock>:
 800de6c:	4801      	ldr	r0, [pc, #4]	; (800de74 <__malloc_lock+0x8>)
 800de6e:	f000 b85d 	b.w	800df2c <__retarget_lock_acquire_recursive>
 800de72:	bf00      	nop
 800de74:	24001104 	.word	0x24001104

0800de78 <__malloc_unlock>:
 800de78:	4801      	ldr	r0, [pc, #4]	; (800de80 <__malloc_unlock+0x8>)
 800de7a:	f000 b858 	b.w	800df2e <__retarget_lock_release_recursive>
 800de7e:	bf00      	nop
 800de80:	24001104 	.word	0x24001104

0800de84 <_free_r>:
 800de84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de86:	2900      	cmp	r1, #0
 800de88:	d044      	beq.n	800df14 <_free_r+0x90>
 800de8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8e:	9001      	str	r0, [sp, #4]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f1a1 0404 	sub.w	r4, r1, #4
 800de96:	bfb8      	it	lt
 800de98:	18e4      	addlt	r4, r4, r3
 800de9a:	f7ff ffe7 	bl	800de6c <__malloc_lock>
 800de9e:	4a1e      	ldr	r2, [pc, #120]	; (800df18 <_free_r+0x94>)
 800dea0:	9801      	ldr	r0, [sp, #4]
 800dea2:	6813      	ldr	r3, [r2, #0]
 800dea4:	b933      	cbnz	r3, 800deb4 <_free_r+0x30>
 800dea6:	6063      	str	r3, [r4, #4]
 800dea8:	6014      	str	r4, [r2, #0]
 800deaa:	b003      	add	sp, #12
 800deac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800deb0:	f7ff bfe2 	b.w	800de78 <__malloc_unlock>
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	d908      	bls.n	800deca <_free_r+0x46>
 800deb8:	6825      	ldr	r5, [r4, #0]
 800deba:	1961      	adds	r1, r4, r5
 800debc:	428b      	cmp	r3, r1
 800debe:	bf01      	itttt	eq
 800dec0:	6819      	ldreq	r1, [r3, #0]
 800dec2:	685b      	ldreq	r3, [r3, #4]
 800dec4:	1949      	addeq	r1, r1, r5
 800dec6:	6021      	streq	r1, [r4, #0]
 800dec8:	e7ed      	b.n	800dea6 <_free_r+0x22>
 800deca:	461a      	mov	r2, r3
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	b10b      	cbz	r3, 800ded4 <_free_r+0x50>
 800ded0:	42a3      	cmp	r3, r4
 800ded2:	d9fa      	bls.n	800deca <_free_r+0x46>
 800ded4:	6811      	ldr	r1, [r2, #0]
 800ded6:	1855      	adds	r5, r2, r1
 800ded8:	42a5      	cmp	r5, r4
 800deda:	d10b      	bne.n	800def4 <_free_r+0x70>
 800dedc:	6824      	ldr	r4, [r4, #0]
 800dede:	4421      	add	r1, r4
 800dee0:	1854      	adds	r4, r2, r1
 800dee2:	42a3      	cmp	r3, r4
 800dee4:	6011      	str	r1, [r2, #0]
 800dee6:	d1e0      	bne.n	800deaa <_free_r+0x26>
 800dee8:	681c      	ldr	r4, [r3, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	6053      	str	r3, [r2, #4]
 800deee:	4421      	add	r1, r4
 800def0:	6011      	str	r1, [r2, #0]
 800def2:	e7da      	b.n	800deaa <_free_r+0x26>
 800def4:	d902      	bls.n	800defc <_free_r+0x78>
 800def6:	230c      	movs	r3, #12
 800def8:	6003      	str	r3, [r0, #0]
 800defa:	e7d6      	b.n	800deaa <_free_r+0x26>
 800defc:	6825      	ldr	r5, [r4, #0]
 800defe:	1961      	adds	r1, r4, r5
 800df00:	428b      	cmp	r3, r1
 800df02:	bf04      	itt	eq
 800df04:	6819      	ldreq	r1, [r3, #0]
 800df06:	685b      	ldreq	r3, [r3, #4]
 800df08:	6063      	str	r3, [r4, #4]
 800df0a:	bf04      	itt	eq
 800df0c:	1949      	addeq	r1, r1, r5
 800df0e:	6021      	streq	r1, [r4, #0]
 800df10:	6054      	str	r4, [r2, #4]
 800df12:	e7ca      	b.n	800deaa <_free_r+0x26>
 800df14:	b003      	add	sp, #12
 800df16:	bd30      	pop	{r4, r5, pc}
 800df18:	240010f8 	.word	0x240010f8

0800df1c <_malloc_usable_size_r>:
 800df1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df20:	1f18      	subs	r0, r3, #4
 800df22:	2b00      	cmp	r3, #0
 800df24:	bfbc      	itt	lt
 800df26:	580b      	ldrlt	r3, [r1, r0]
 800df28:	18c0      	addlt	r0, r0, r3
 800df2a:	4770      	bx	lr

0800df2c <__retarget_lock_acquire_recursive>:
 800df2c:	4770      	bx	lr

0800df2e <__retarget_lock_release_recursive>:
 800df2e:	4770      	bx	lr

0800df30 <_init>:
 800df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df32:	bf00      	nop
 800df34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df36:	bc08      	pop	{r3}
 800df38:	469e      	mov	lr, r3
 800df3a:	4770      	bx	lr

0800df3c <_fini>:
 800df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3e:	bf00      	nop
 800df40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df42:	bc08      	pop	{r3}
 800df44:	469e      	mov	lr, r3
 800df46:	4770      	bx	lr
