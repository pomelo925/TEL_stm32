
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d6c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c50  08011040  08011040  00021040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012c90  08012c90  00022c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  08012c98  08012c98  00022c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012cac  08012cac  00022cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08012cb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001aa0  24000080  08012d2c  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001b20  08012d2c  00031b20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ee78  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f69  00000000  00000000  0005ef22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  00063e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001518  00000000  00000000  00065540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036ad6  00000000  00000000  00066a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020bf0  00000000  00000000  0009d52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154986  00000000  00000000  000be11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00212aa4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066e8  00000000  00000000  00212af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011024 	.word	0x08011024

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	08011024 	.word	0x08011024

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	; 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b974 	b.w	8000998 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	468e      	mov	lr, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d14d      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d6:	428a      	cmp	r2, r1
 80006d8:	4694      	mov	ip, r2
 80006da:	d969      	bls.n	80007b0 <__udivmoddi4+0xe8>
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	b152      	cbz	r2, 80006f8 <__udivmoddi4+0x30>
 80006e2:	fa01 f302 	lsl.w	r3, r1, r2
 80006e6:	f1c2 0120 	rsb	r1, r2, #32
 80006ea:	fa20 f101 	lsr.w	r1, r0, r1
 80006ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f2:	ea41 0e03 	orr.w	lr, r1, r3
 80006f6:	4094      	lsls	r4, r2
 80006f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006fc:	0c21      	lsrs	r1, r4, #16
 80006fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000702:	fa1f f78c 	uxth.w	r7, ip
 8000706:	fb08 e316 	mls	r3, r8, r6, lr
 800070a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800070e:	fb06 f107 	mul.w	r1, r6, r7
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f106 30ff 	add.w	r0, r6, #4294967295
 800071e:	f080 811f 	bcs.w	8000960 <__udivmoddi4+0x298>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 811c 	bls.w	8000960 <__udivmoddi4+0x298>
 8000728:	3e02      	subs	r6, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	b2a4      	uxth	r4, r4
 8000730:	fbb3 f0f8 	udiv	r0, r3, r8
 8000734:	fb08 3310 	mls	r3, r8, r0, r3
 8000738:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800073c:	fb00 f707 	mul.w	r7, r0, r7
 8000740:	42a7      	cmp	r7, r4
 8000742:	d90a      	bls.n	800075a <__udivmoddi4+0x92>
 8000744:	eb1c 0404 	adds.w	r4, ip, r4
 8000748:	f100 33ff 	add.w	r3, r0, #4294967295
 800074c:	f080 810a 	bcs.w	8000964 <__udivmoddi4+0x29c>
 8000750:	42a7      	cmp	r7, r4
 8000752:	f240 8107 	bls.w	8000964 <__udivmoddi4+0x29c>
 8000756:	4464      	add	r4, ip
 8000758:	3802      	subs	r0, #2
 800075a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800075e:	1be4      	subs	r4, r4, r7
 8000760:	2600      	movs	r6, #0
 8000762:	b11d      	cbz	r5, 800076c <__udivmoddi4+0xa4>
 8000764:	40d4      	lsrs	r4, r2
 8000766:	2300      	movs	r3, #0
 8000768:	e9c5 4300 	strd	r4, r3, [r5]
 800076c:	4631      	mov	r1, r6
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0xc2>
 8000776:	2d00      	cmp	r5, #0
 8000778:	f000 80ef 	beq.w	800095a <__udivmoddi4+0x292>
 800077c:	2600      	movs	r6, #0
 800077e:	e9c5 0100 	strd	r0, r1, [r5]
 8000782:	4630      	mov	r0, r6
 8000784:	4631      	mov	r1, r6
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	fab3 f683 	clz	r6, r3
 800078e:	2e00      	cmp	r6, #0
 8000790:	d14a      	bne.n	8000828 <__udivmoddi4+0x160>
 8000792:	428b      	cmp	r3, r1
 8000794:	d302      	bcc.n	800079c <__udivmoddi4+0xd4>
 8000796:	4282      	cmp	r2, r0
 8000798:	f200 80f9 	bhi.w	800098e <__udivmoddi4+0x2c6>
 800079c:	1a84      	subs	r4, r0, r2
 800079e:	eb61 0303 	sbc.w	r3, r1, r3
 80007a2:	2001      	movs	r0, #1
 80007a4:	469e      	mov	lr, r3
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d0e0      	beq.n	800076c <__udivmoddi4+0xa4>
 80007aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ae:	e7dd      	b.n	800076c <__udivmoddi4+0xa4>
 80007b0:	b902      	cbnz	r2, 80007b4 <__udivmoddi4+0xec>
 80007b2:	deff      	udf	#255	; 0xff
 80007b4:	fab2 f282 	clz	r2, r2
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	f040 8092 	bne.w	80008e2 <__udivmoddi4+0x21a>
 80007be:	eba1 010c 	sub.w	r1, r1, ip
 80007c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007c6:	fa1f fe8c 	uxth.w	lr, ip
 80007ca:	2601      	movs	r6, #1
 80007cc:	0c20      	lsrs	r0, r4, #16
 80007ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80007d2:	fb07 1113 	mls	r1, r7, r3, r1
 80007d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007da:	fb0e f003 	mul.w	r0, lr, r3
 80007de:	4288      	cmp	r0, r1
 80007e0:	d908      	bls.n	80007f4 <__udivmoddi4+0x12c>
 80007e2:	eb1c 0101 	adds.w	r1, ip, r1
 80007e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ea:	d202      	bcs.n	80007f2 <__udivmoddi4+0x12a>
 80007ec:	4288      	cmp	r0, r1
 80007ee:	f200 80cb 	bhi.w	8000988 <__udivmoddi4+0x2c0>
 80007f2:	4643      	mov	r3, r8
 80007f4:	1a09      	subs	r1, r1, r0
 80007f6:	b2a4      	uxth	r4, r4
 80007f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000800:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000804:	fb0e fe00 	mul.w	lr, lr, r0
 8000808:	45a6      	cmp	lr, r4
 800080a:	d908      	bls.n	800081e <__udivmoddi4+0x156>
 800080c:	eb1c 0404 	adds.w	r4, ip, r4
 8000810:	f100 31ff 	add.w	r1, r0, #4294967295
 8000814:	d202      	bcs.n	800081c <__udivmoddi4+0x154>
 8000816:	45a6      	cmp	lr, r4
 8000818:	f200 80bb 	bhi.w	8000992 <__udivmoddi4+0x2ca>
 800081c:	4608      	mov	r0, r1
 800081e:	eba4 040e 	sub.w	r4, r4, lr
 8000822:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000826:	e79c      	b.n	8000762 <__udivmoddi4+0x9a>
 8000828:	f1c6 0720 	rsb	r7, r6, #32
 800082c:	40b3      	lsls	r3, r6
 800082e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000832:	ea4c 0c03 	orr.w	ip, ip, r3
 8000836:	fa20 f407 	lsr.w	r4, r0, r7
 800083a:	fa01 f306 	lsl.w	r3, r1, r6
 800083e:	431c      	orrs	r4, r3
 8000840:	40f9      	lsrs	r1, r7
 8000842:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000846:	fa00 f306 	lsl.w	r3, r0, r6
 800084a:	fbb1 f8f9 	udiv	r8, r1, r9
 800084e:	0c20      	lsrs	r0, r4, #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fb09 1118 	mls	r1, r9, r8, r1
 8000858:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800085c:	fb08 f00e 	mul.w	r0, r8, lr
 8000860:	4288      	cmp	r0, r1
 8000862:	fa02 f206 	lsl.w	r2, r2, r6
 8000866:	d90b      	bls.n	8000880 <__udivmoddi4+0x1b8>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000870:	f080 8088 	bcs.w	8000984 <__udivmoddi4+0x2bc>
 8000874:	4288      	cmp	r0, r1
 8000876:	f240 8085 	bls.w	8000984 <__udivmoddi4+0x2bc>
 800087a:	f1a8 0802 	sub.w	r8, r8, #2
 800087e:	4461      	add	r1, ip
 8000880:	1a09      	subs	r1, r1, r0
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb1 f0f9 	udiv	r0, r1, r9
 8000888:	fb09 1110 	mls	r1, r9, r0, r1
 800088c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000890:	fb00 fe0e 	mul.w	lr, r0, lr
 8000894:	458e      	cmp	lr, r1
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x1e2>
 8000898:	eb1c 0101 	adds.w	r1, ip, r1
 800089c:	f100 34ff 	add.w	r4, r0, #4294967295
 80008a0:	d26c      	bcs.n	800097c <__udivmoddi4+0x2b4>
 80008a2:	458e      	cmp	lr, r1
 80008a4:	d96a      	bls.n	800097c <__udivmoddi4+0x2b4>
 80008a6:	3802      	subs	r0, #2
 80008a8:	4461      	add	r1, ip
 80008aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ae:	fba0 9402 	umull	r9, r4, r0, r2
 80008b2:	eba1 010e 	sub.w	r1, r1, lr
 80008b6:	42a1      	cmp	r1, r4
 80008b8:	46c8      	mov	r8, r9
 80008ba:	46a6      	mov	lr, r4
 80008bc:	d356      	bcc.n	800096c <__udivmoddi4+0x2a4>
 80008be:	d053      	beq.n	8000968 <__udivmoddi4+0x2a0>
 80008c0:	b15d      	cbz	r5, 80008da <__udivmoddi4+0x212>
 80008c2:	ebb3 0208 	subs.w	r2, r3, r8
 80008c6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ca:	fa01 f707 	lsl.w	r7, r1, r7
 80008ce:	fa22 f306 	lsr.w	r3, r2, r6
 80008d2:	40f1      	lsrs	r1, r6
 80008d4:	431f      	orrs	r7, r3
 80008d6:	e9c5 7100 	strd	r7, r1, [r5]
 80008da:	2600      	movs	r6, #0
 80008dc:	4631      	mov	r1, r6
 80008de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e2:	f1c2 0320 	rsb	r3, r2, #32
 80008e6:	40d8      	lsrs	r0, r3
 80008e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ec:	fa21 f303 	lsr.w	r3, r1, r3
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4301      	orrs	r1, r0
 80008f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f8:	fa1f fe8c 	uxth.w	lr, ip
 80008fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000900:	fb07 3610 	mls	r6, r7, r0, r3
 8000904:	0c0b      	lsrs	r3, r1, #16
 8000906:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800090a:	fb00 f60e 	mul.w	r6, r0, lr
 800090e:	429e      	cmp	r6, r3
 8000910:	fa04 f402 	lsl.w	r4, r4, r2
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x260>
 8000916:	eb1c 0303 	adds.w	r3, ip, r3
 800091a:	f100 38ff 	add.w	r8, r0, #4294967295
 800091e:	d22f      	bcs.n	8000980 <__udivmoddi4+0x2b8>
 8000920:	429e      	cmp	r6, r3
 8000922:	d92d      	bls.n	8000980 <__udivmoddi4+0x2b8>
 8000924:	3802      	subs	r0, #2
 8000926:	4463      	add	r3, ip
 8000928:	1b9b      	subs	r3, r3, r6
 800092a:	b289      	uxth	r1, r1
 800092c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000930:	fb07 3316 	mls	r3, r7, r6, r3
 8000934:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000938:	fb06 f30e 	mul.w	r3, r6, lr
 800093c:	428b      	cmp	r3, r1
 800093e:	d908      	bls.n	8000952 <__udivmoddi4+0x28a>
 8000940:	eb1c 0101 	adds.w	r1, ip, r1
 8000944:	f106 38ff 	add.w	r8, r6, #4294967295
 8000948:	d216      	bcs.n	8000978 <__udivmoddi4+0x2b0>
 800094a:	428b      	cmp	r3, r1
 800094c:	d914      	bls.n	8000978 <__udivmoddi4+0x2b0>
 800094e:	3e02      	subs	r6, #2
 8000950:	4461      	add	r1, ip
 8000952:	1ac9      	subs	r1, r1, r3
 8000954:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000958:	e738      	b.n	80007cc <__udivmoddi4+0x104>
 800095a:	462e      	mov	r6, r5
 800095c:	4628      	mov	r0, r5
 800095e:	e705      	b.n	800076c <__udivmoddi4+0xa4>
 8000960:	4606      	mov	r6, r0
 8000962:	e6e3      	b.n	800072c <__udivmoddi4+0x64>
 8000964:	4618      	mov	r0, r3
 8000966:	e6f8      	b.n	800075a <__udivmoddi4+0x92>
 8000968:	454b      	cmp	r3, r9
 800096a:	d2a9      	bcs.n	80008c0 <__udivmoddi4+0x1f8>
 800096c:	ebb9 0802 	subs.w	r8, r9, r2
 8000970:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000974:	3801      	subs	r0, #1
 8000976:	e7a3      	b.n	80008c0 <__udivmoddi4+0x1f8>
 8000978:	4646      	mov	r6, r8
 800097a:	e7ea      	b.n	8000952 <__udivmoddi4+0x28a>
 800097c:	4620      	mov	r0, r4
 800097e:	e794      	b.n	80008aa <__udivmoddi4+0x1e2>
 8000980:	4640      	mov	r0, r8
 8000982:	e7d1      	b.n	8000928 <__udivmoddi4+0x260>
 8000984:	46d0      	mov	r8, sl
 8000986:	e77b      	b.n	8000880 <__udivmoddi4+0x1b8>
 8000988:	3b02      	subs	r3, #2
 800098a:	4461      	add	r1, ip
 800098c:	e732      	b.n	80007f4 <__udivmoddi4+0x12c>
 800098e:	4630      	mov	r0, r6
 8000990:	e709      	b.n	80007a6 <__udivmoddi4+0xde>
 8000992:	4464      	add	r4, ip
 8000994:	3802      	subs	r0, #2
 8000996:	e742      	b.n	800081e <__udivmoddi4+0x156>

08000998 <__aeabi_idiv0>:
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <_ZN3ros16normalizeSecNSecERmS0_>:
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	0a5a      	lsrs	r2, r3, #9
 80009ac:	490f      	ldr	r1, [pc, #60]	; (80009ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80009ae:	fba1 1202 	umull	r1, r2, r1, r2
 80009b2:	09d2      	lsrs	r2, r2, #7
 80009b4:	490e      	ldr	r1, [pc, #56]	; (80009f0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80009b6:	fb01 f202 	mul.w	r2, r1, r2
 80009ba:	1a9b      	subs	r3, r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	0a5b      	lsrs	r3, r3, #9
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	09db      	lsrs	r3, r3, #7
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	441a      	add	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	00044b83 	.word	0x00044b83
 80009f0:	3b9aca00 	.word	0x3b9aca00

080009f4 <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80009f8:	2100      	movs	r1, #0
 80009fa:	4822      	ldr	r0, [pc, #136]	; (8000a84 <_Z13DC_motor_initv+0x90>)
 80009fc:	f00c f918 	bl	800cc30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000a00:	2104      	movs	r1, #4
 8000a02:	4820      	ldr	r0, [pc, #128]	; (8000a84 <_Z13DC_motor_initv+0x90>)
 8000a04:	f00c f914 	bl	800cc30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	481f      	ldr	r0, [pc, #124]	; (8000a88 <_Z13DC_motor_initv+0x94>)
 8000a0c:	f00c f910 	bl	800cc30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000a10:	2104      	movs	r1, #4
 8000a12:	481d      	ldr	r0, [pc, #116]	; (8000a88 <_Z13DC_motor_initv+0x94>)
 8000a14:	f00c f90c 	bl	800cc30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	481c      	ldr	r0, [pc, #112]	; (8000a8c <_Z13DC_motor_initv+0x98>)
 8000a1c:	f00c f908 	bl	800cc30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000a20:	2104      	movs	r1, #4
 8000a22:	481a      	ldr	r0, [pc, #104]	; (8000a8c <_Z13DC_motor_initv+0x98>)
 8000a24:	f00c f904 	bl	800cc30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4819      	ldr	r0, [pc, #100]	; (8000a90 <_Z13DC_motor_initv+0x9c>)
 8000a2c:	f00c f900 	bl	800cc30 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <_Z13DC_motor_initv+0x9c>)
 8000a34:	f00c f8fc 	bl	800cc30 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4816      	ldr	r0, [pc, #88]	; (8000a94 <_Z13DC_motor_initv+0xa0>)
 8000a3c:	f00b feea 	bl	800c814 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8000a40:	2100      	movs	r1, #0
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <_Z13DC_motor_initv+0xa0>)
 8000a44:	f00b fee6 	bl	800c814 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <_Z13DC_motor_initv+0xa4>)
 8000a4c:	f00b fee2 	bl	800c814 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 8000a50:	2100      	movs	r1, #0
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <_Z13DC_motor_initv+0xa4>)
 8000a54:	f00b fede 	bl	800c814 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4810      	ldr	r0, [pc, #64]	; (8000a9c <_Z13DC_motor_initv+0xa8>)
 8000a5c:	f00b fdbe 	bl	800c5dc <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim7);
 8000a60:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <_Z13DC_motor_initv+0xac>)
 8000a62:	f00b fcdd 	bl	800c420 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <_Z13DC_motor_initv+0xb0>)
 8000a68:	f00b fcda 	bl	800c420 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8000a6c:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <_Z13DC_motor_initv+0xb4>)
 8000a6e:	f00b fcd7 	bl	800c420 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <_Z13DC_motor_initv+0xb8>)
 8000a74:	f00b fcd4 	bl	800c420 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);
 8000a78:	4808      	ldr	r0, [pc, #32]	; (8000a9c <_Z13DC_motor_initv+0xa8>)
 8000a7a:	f00b fcd1 	bl	800c420 <HAL_TIM_Base_Start_IT>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	24000280 	.word	0x24000280
 8000a88:	24000364 	.word	0x24000364
 8000a8c:	240002cc 	.word	0x240002cc
 8000a90:	24000318 	.word	0x24000318
 8000a94:	24000448 	.word	0x24000448
 8000a98:	2400052c 	.word	0x2400052c
 8000a9c:	24000578 	.word	0x24000578
 8000aa0:	240003b0 	.word	0x240003b0
 8000aa4:	240003fc 	.word	0x240003fc
 8000aa8:	24000494 	.word	0x24000494
 8000aac:	240004e0 	.word	0x240004e0

08000ab0 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b08f      	sub	sp, #60	; 0x3c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ab8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000abc:	ed87 1b08 	vstr	d1, [r7, #32]
 8000ac0:	ed87 2b06 	vstr	d2, [r7, #24]
 8000ac4:	ed87 3b04 	vstr	d3, [r7, #16]
 8000ac8:	ed87 4b02 	vstr	d4, [r7, #8]
 8000acc:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000ad0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000ad6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000adc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ae0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 8000ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000aea:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000aee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000af0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000af4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000afa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000afe:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 8000b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b08:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	4618      	mov	r0, r3
 8000b10:	373c      	adds	r7, #60	; 0x3c
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b30:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b34:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	ed93 7b00 	vldr	d7, [r3]
 8000b3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	ed93 7b02 	vldr	d7, [r3, #8]
 8000b48:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 8000b52:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000b68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	ed93 6b06 	vldr	d6, [r3, #24]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	ed93 6b04 	vldr	d6, [r3, #16]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000b94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	ed93 5b06 	vldr	d5, [r3, #24]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000ba4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ba8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	ed93 5b08 	vldr	d5, [r3, #32]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000bb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_Z41__static_initialization_and_destruction_0ii>:
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d140      	bne.n	8000c72 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13b      	bne.n	8000c72 <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(2700,0.5,0, 0.001,512,20.8);
 8000bfa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000bfe:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c02:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c06:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000c98 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c0a:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c0e:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8000ca0 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000c12:	482f      	ldr	r0, [pc, #188]	; (8000cd0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8000c14:	f7ff ff4c 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1700,0.5,0, 0.001,512,20.8);
 8000c18:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000c1c:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c20:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c24:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000c98 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c28:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8000ca8 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000c30:	4828      	ldr	r0, [pc, #160]	; (8000cd4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8000c32:	f7ff ff3d 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
DC_motor br(3800,0.6,0.002, 0.001,512,20.8);
 8000c36:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000c3a:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c3e:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c42:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8000cb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000c46:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8000cb8 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000c4a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8000cc0 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8000c4e:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8000c50:	f7ff ff2e 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
DC_motor bl(3200,0.5,0, 0.001,512,20.8);
 8000c54:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000c80 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000c58:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000c88 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000c5c:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000c90 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000c60:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000c98 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000c64:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000c68:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8000cc8 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8000c6c:	481b      	ldr	r0, [pc, #108]	; (8000cdc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8000c6e:	f7ff ff1f 	bl	8000ab0 <_ZN8DC_motorC1Edddddd>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	f3af 8000 	nop.w
 8000c80:	cccccccd 	.word	0xcccccccd
 8000c84:	4034cccc 	.word	0x4034cccc
 8000c88:	00000000 	.word	0x00000000
 8000c8c:	40800000 	.word	0x40800000
 8000c90:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c94:	3f50624d 	.word	0x3f50624d
	...
 8000ca4:	40a51800 	.word	0x40a51800
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	409a9000 	.word	0x409a9000
 8000cb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000cb4:	3f60624d 	.word	0x3f60624d
 8000cb8:	33333333 	.word	0x33333333
 8000cbc:	3fe33333 	.word	0x3fe33333
 8000cc0:	00000000 	.word	0x00000000
 8000cc4:	40adb000 	.word	0x40adb000
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	40a90000 	.word	0x40a90000
 8000cd0:	240000a0 	.word	0x240000a0
 8000cd4:	24000110 	.word	0x24000110
 8000cd8:	24000180 	.word	0x24000180
 8000cdc:	240001f0 	.word	0x240001f0

08000ce0 <_GLOBAL__sub_I_fr>:
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ff79 	bl	8000be0 <_Z41__static_initialization_and_destruction_0ii>
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_Z10debug_loopv>:
bool mecanum_debug = true;
bool intake_debug = false;
bool scara_debug = false;


void debug_loop(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <_Z10debug_loopv+0x14>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0fb      	beq.n	8000cf4 <_Z10debug_loopv+0x4>
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <_Z10debug_loopv+0x18>)
 8000cfe:	f000 fe99 	bl	8001a34 <_ZN7Mecanum3runEv>
 8000d02:	e7f7      	b.n	8000cf4 <_Z10debug_loopv+0x4>
 8000d04:	24000000 	.word	0x24000000
 8000d08:	24000748 	.word	0x24000748

08000d0c <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>:

namespace INTAKE{
	double tilt, stretch, suck;
}

void INTAKE::trinary(double function, GPIO_TypeDef* a_port, int a_pin, GPIO_TypeDef* b_port, int b_pin){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	ed87 0b04 	vstr	d0, [r7, #16]
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]
	if (function == 1){
 8000d1e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000d26:	eeb4 7b46 	vcmp.f64	d7, d6
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	d10e      	bne.n	8000d4e <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x42>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	68f8      	ldr	r0, [r7, #12]
 8000d3a:	f009 f86f 	bl	8009e1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_SET);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	2201      	movs	r2, #1
 8000d44:	4619      	mov	r1, r3
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f009 f868 	bl	8009e1c <HAL_GPIO_WritePin>
	}
	else if (function == -1){
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
	}
}
 8000d4c:	e02c      	b.n	8000da8 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x9c>
	else if (function == 0){
 8000d4e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5a:	d10e      	bne.n	8000d7a <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x6e>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	4619      	mov	r1, r3
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f009 f859 	bl	8009e1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f009 f852 	bl	8009e1c <HAL_GPIO_WritePin>
}
 8000d78:	e016      	b.n	8000da8 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x9c>
	else if (function == -1){
 8000d7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d7e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000d82:	eeb4 7b46 	vcmp.f64	d7, d6
 8000d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8a:	d10d      	bne.n	8000da8 <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i+0x9c>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f009 f841 	bl	8009e1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f009 f83a 	bl	8009e1c <HAL_GPIO_WritePin>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_ZN6INTAKE3runEv>:

void INTAKE::run(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	INTAKE::trinary(INTAKE::tilt, TILT_INA_PORT, TILT_INA_PIN, TILT_INB_PORT, TILT_INB_PIN);
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <_ZN6INTAKE3runEv+0x4c>)
 8000db6:	ed93 7b00 	vldr	d7, [r3]
 8000dba:	2304      	movs	r3, #4
 8000dbc:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <_ZN6INTAKE3runEv+0x50>)
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	4810      	ldr	r0, [pc, #64]	; (8000e04 <_ZN6INTAKE3runEv+0x54>)
 8000dc2:	eeb0 0b47 	vmov.f64	d0, d7
 8000dc6:	f7ff ffa1 	bl	8000d0c <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>
	INTAKE::trinary(INTAKE::stretch, STRETCH_INA_PORT, STRETCH_INA_PIN, STRETCH_INB_PORT, STRETCH_INB_PIN);
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <_ZN6INTAKE3runEv+0x58>)
 8000dcc:	ed93 7b00 	vldr	d7, [r3]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <_ZN6INTAKE3runEv+0x54>)
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <_ZN6INTAKE3runEv+0x5c>)
 8000dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8000ddc:	f7ff ff96 	bl	8000d0c <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>
	INTAKE::trinary(INTAKE::suck, SUCK_INA_PORT, SUCK_INA_PIN, SUCK_INB_PORT, SUCK_INB_PIN);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <_ZN6INTAKE3runEv+0x60>)
 8000de2:	ed93 7b00 	vldr	d7, [r3]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <_ZN6INTAKE3runEv+0x64>)
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <_ZN6INTAKE3runEv+0x64>)
 8000dee:	eeb0 0b47 	vmov.f64	d0, d7
 8000df2:	f7ff ff8b 	bl	8000d0c <_ZN6INTAKE7trinaryEdP12GPIO_TypeDefiS1_i>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000268 	.word	0x24000268
 8000e00:	58021400 	.word	0x58021400
 8000e04:	58020400 	.word	0x58020400
 8000e08:	24000270 	.word	0x24000270
 8000e0c:	58020800 	.word	0x58020800
 8000e10:	24000278 	.word	0x24000278
 8000e14:	58020000 	.word	0x58020000

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f005 fe3e 	bl	8006a9c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f820 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fc64 	bl	80016f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e28:	f000 f88c 	bl	8000f44 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e2c:	f000 f8de 	bl	8000fec <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e30:	f000 f932 	bl	8001098 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e34:	f000 f986 	bl	8001144 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000e38:	f000 fa64 	bl	8001304 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000e3c:	f000 fab2 	bl	80013a4 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000e40:	f000 faf6 	bl	8001430 <MX_TIM15_Init>
  MX_DMA_Init();
 8000e44:	f000 fc2c 	bl	80016a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000e48:	f000 fbde 	bl	8001608 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000e4c:	f000 fa06 	bl	800125c <MX_TIM8_Init>
  MX_TIM14_Init();
 8000e50:	f000 facc 	bl	80013ec <MX_TIM14_Init>
  MX_TIM7_Init();
 8000e54:	f000 f9cc 	bl	80011f0 <MX_TIM7_Init>
  MX_TIM23_Init();
 8000e58:	f000 fb7c 	bl	8001554 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000e5c:	f000 fd86 	bl	800196c <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <main+0x48>
	...

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09c      	sub	sp, #112	; 0x70
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	224c      	movs	r2, #76	; 0x4c
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00f ff4c 	bl	8010d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00f ff46 	bl	8010d10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f008 ffe3 	bl	8009e50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <SystemClock_Config+0xdc>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e96:	4a2a      	ldr	r2, [pc, #168]	; (8000f40 <SystemClock_Config+0xdc>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <SystemClock_Config+0xdc>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eaa:	bf00      	nop
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <SystemClock_Config+0xdc>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb8:	d1f8      	bne.n	8000eac <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000ed0:	232a      	movs	r3, #42	; 0x2a
 8000ed2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f008 ffe7 	bl	8009ec4 <HAL_RCC_OscConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000efc:	f000 fd30 	bl	8001960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	233f      	movs	r3, #63	; 0x3f
 8000f02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f04:	2303      	movs	r3, #3
 8000f06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000f08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2102      	movs	r1, #2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f009 fb79 	bl	800a620 <HAL_RCC_ClockConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f34:	f000 fd14 	bl	8001960 <Error_Handler>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3770      	adds	r7, #112	; 0x70
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58024800 	.word	0x58024800

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2224      	movs	r2, #36	; 0x24
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00f fedc 	bl	8010d10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f92:	2301      	movs	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000fb6:	f00b fd95 	bl	800cae4 <HAL_TIM_Encoder_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000fc0:	f000 fcce 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0xa4>)
 8000fd2:	f00c fe4f 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000fdc:	f000 fcc0 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3730      	adds	r7, #48	; 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	24000280 	.word	0x24000280

08000fec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2224      	movs	r2, #36	; 0x24
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00f fe88 	bl	8010d10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_TIM3_Init+0xa4>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_TIM3_Init+0xa8>)
 800100e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_TIM3_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_TIM3_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_TIM3_Init+0xa4>)
 800101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001022:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_TIM3_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_TIM3_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001030:	2303      	movs	r3, #3
 8001032:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001038:	2301      	movs	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_TIM3_Init+0xa4>)
 800105c:	f00b fd42 	bl	800cae4 <HAL_TIM_Encoder_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001066:	f000 fc7b 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_TIM3_Init+0xa4>)
 8001078:	f00c fdfc 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001082:	f000 fc6d 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3730      	adds	r7, #48	; 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	240002cc 	.word	0x240002cc
 8001094:	40000400 	.word	0x40000400

08001098 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2224      	movs	r2, #36	; 0x24
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00f fe32 	bl	8010d10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_TIM4_Init+0xa4>)
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <MX_TIM4_Init+0xa8>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_TIM4_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_TIM4_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <MX_TIM4_Init+0xa4>)
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_TIM4_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	; (800113c <MX_TIM4_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010dc:	2303      	movs	r3, #3
 80010de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010f4:	2301      	movs	r3, #1
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_TIM4_Init+0xa4>)
 8001108:	f00b fcec 	bl	800cae4 <HAL_TIM_Encoder_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001112:	f000 fc25 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_TIM4_Init+0xa4>)
 8001124:	f00c fda6 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800112e:	f000 fc17 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	; 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000318 	.word	0x24000318
 8001140:	40000800 	.word	0x40000800

08001144 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08c      	sub	sp, #48	; 0x30
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2224      	movs	r2, #36	; 0x24
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f00f fddc 	bl	8010d10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_TIM5_Init+0xa4>)
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <MX_TIM5_Init+0xa8>)
 8001166:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_TIM5_Init+0xa4>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM5_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_TIM5_Init+0xa4>)
 8001176:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM5_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_TIM5_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001188:	2303      	movs	r3, #3
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001190:	2301      	movs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_TIM5_Init+0xa4>)
 80011b4:	f00b fc96 	bl	800cae4 <HAL_TIM_Encoder_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80011be:	f000 fbcf 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM5_Init+0xa4>)
 80011d0:	f00c fd50 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80011da:	f000 fbc1 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	24000364 	.word	0x24000364
 80011ec:	40000c00 	.word	0x40000c00

080011f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_TIM7_Init+0x64>)
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_TIM7_Init+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_TIM7_Init+0x64>)
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_TIM7_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_TIM7_Init+0x64>)
 8001214:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001218:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_TIM7_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM7_Init+0x64>)
 8001222:	f00b f8a5 	bl	800c370 <HAL_TIM_Base_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800122c:	f000 fb98 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_TIM7_Init+0x64>)
 800123e:	f00c fd19 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001248:	f000 fb8a 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	240003b0 	.word	0x240003b0
 8001258:	40001400 	.word	0x40001400

0800125c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_TIM8_Init+0xa0>)
 800127c:	4a20      	ldr	r2, [pc, #128]	; (8001300 <MX_TIM8_Init+0xa4>)
 800127e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_TIM8_Init+0xa0>)
 8001282:	221f      	movs	r2, #31
 8001284:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM8_Init+0xa0>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_TIM8_Init+0xa0>)
 800128e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001292:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM8_Init+0xa0>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_TIM8_Init+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_TIM8_Init+0xa0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012a6:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_TIM8_Init+0xa0>)
 80012a8:	f00b f862 	bl	800c370 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80012b2:	f000 fb55 	bl	8001960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <MX_TIM8_Init+0xa0>)
 80012c4:	f00b ff76 	bl	800d1b4 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80012ce:	f000 fb47 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM8_Init+0xa0>)
 80012e4:	f00c fcc6 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80012ee:	f000 fb37 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	240003fc 	.word	0x240003fc
 8001300:	40010400 	.word	0x40010400

08001304 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM12_Init+0x98>)
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <MX_TIM12_Init+0x9c>)
 8001320:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM12_Init+0x98>)
 8001324:	2203      	movs	r2, #3
 8001326:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM12_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM12_Init+0x98>)
 8001330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001334:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM12_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_TIM12_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001342:	4816      	ldr	r0, [pc, #88]	; (800139c <MX_TIM12_Init+0x98>)
 8001344:	f00b f8f2 	bl	800c52c <HAL_TIM_PWM_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800134e:	f000 fb07 	bl	8001960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001352:	2360      	movs	r3, #96	; 0x60
 8001354:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM12_Init+0x98>)
 800136a:	f00b fe0f 	bl	800cf8c <HAL_TIM_PWM_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001374:	f000 faf4 	bl	8001960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2204      	movs	r2, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM12_Init+0x98>)
 8001380:	f00b fe04 	bl	800cf8c <HAL_TIM_PWM_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800138a:	f000 fae9 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM12_Init+0x98>)
 8001390:	f004 fe56 	bl	8006040 <HAL_TIM_MspPostInit>

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	24000448 	.word	0x24000448
 80013a0:	40001800 	.word	0x40001800

080013a4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_TIM13_Init+0x40>)
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <MX_TIM13_Init+0x44>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_TIM13_Init+0x40>)
 80013b0:	2253      	movs	r2, #83	; 0x53
 80013b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_TIM13_Init+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_TIM13_Init+0x40>)
 80013bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_TIM13_Init+0x40>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_TIM13_Init+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_TIM13_Init+0x40>)
 80013d0:	f00a ffce 	bl	800c370 <HAL_TIM_Base_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80013da:	f000 fac1 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000494 	.word	0x24000494
 80013e8:	40001c00 	.word	0x40001c00

080013ec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MX_TIM14_Init+0x3c>)
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <MX_TIM14_Init+0x40>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_TIM14_Init+0x3c>)
 80013f8:	223f      	movs	r2, #63	; 0x3f
 80013fa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_TIM14_Init+0x3c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_TIM14_Init+0x3c>)
 8001404:	2263      	movs	r2, #99	; 0x63
 8001406:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <MX_TIM14_Init+0x3c>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_TIM14_Init+0x3c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_TIM14_Init+0x3c>)
 8001416:	f00a ffab 	bl	800c370 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001420:	f000 fa9e 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	240004e0 	.word	0x240004e0
 800142c:	40002000 	.word	0x40002000

08001430 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b098      	sub	sp, #96	; 0x60
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001436:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2234      	movs	r2, #52	; 0x34
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f00f fc57 	bl	8010d10 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001462:	4b3a      	ldr	r3, [pc, #232]	; (800154c <MX_TIM15_Init+0x11c>)
 8001464:	4a3a      	ldr	r2, [pc, #232]	; (8001550 <MX_TIM15_Init+0x120>)
 8001466:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3;
 8001468:	4b38      	ldr	r3, [pc, #224]	; (800154c <MX_TIM15_Init+0x11c>)
 800146a:	2203      	movs	r2, #3
 800146c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <MX_TIM15_Init+0x11c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <MX_TIM15_Init+0x11c>)
 8001476:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <MX_TIM15_Init+0x11c>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <MX_TIM15_Init+0x11c>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <MX_TIM15_Init+0x11c>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800148e:	482f      	ldr	r0, [pc, #188]	; (800154c <MX_TIM15_Init+0x11c>)
 8001490:	f00b f84c 	bl	800c52c <HAL_TIM_PWM_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800149a:	f000 fa61 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80014a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014aa:	4619      	mov	r1, r3
 80014ac:	4827      	ldr	r0, [pc, #156]	; (800154c <MX_TIM15_Init+0x11c>)
 80014ae:	f00c fbe1 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f000 fa52 	bl	8001960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014bc:	2360      	movs	r3, #96	; 0x60
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c4:	2300      	movs	r3, #0
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c8:	2300      	movs	r3, #0
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	481a      	ldr	r0, [pc, #104]	; (800154c <MX_TIM15_Init+0x11c>)
 80014e2:	f00b fd53 	bl	800cf8c <HAL_TIM_PWM_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80014ec:	f000 fa38 	bl	8001960 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f4:	2204      	movs	r2, #4
 80014f6:	4619      	mov	r1, r3
 80014f8:	4814      	ldr	r0, [pc, #80]	; (800154c <MX_TIM15_Init+0x11c>)
 80014fa:	f00b fd47 	bl	800cf8c <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001504:	f000 fa2c 	bl	8001960 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM15_Init+0x11c>)
 8001530:	f00c fc3c 	bl	800ddac <HAL_TIMEx_ConfigBreakDeadTime>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800153a:	f000 fa11 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM15_Init+0x11c>)
 8001540:	f004 fd7e 	bl	8006040 <HAL_TIM_MspPostInit>

}
 8001544:	bf00      	nop
 8001546:	3760      	adds	r7, #96	; 0x60
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2400052c 	.word	0x2400052c
 8001550:	40014000 	.word	0x40014000

08001554 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001566:	463b      	mov	r3, r7
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <MX_TIM23_Init+0xac>)
 800157a:	4a22      	ldr	r2, [pc, #136]	; (8001604 <MX_TIM23_Init+0xb0>)
 800157c:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_TIM23_Init+0xac>)
 8001580:	223f      	movs	r2, #63	; 0x3f
 8001582:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM23_Init+0xac>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 19999;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM23_Init+0xac>)
 800158c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001590:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM23_Init+0xac>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM23_Init+0xac>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_TIM23_Init+0xac>)
 80015a0:	f00a ffc4 	bl	800c52c <HAL_TIM_PWM_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 80015aa:	f000 f9d9 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <MX_TIM23_Init+0xac>)
 80015be:	f00c fb59 	bl	800dc74 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 80015c8:	f000 f9ca 	bl	8001960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <MX_TIM23_Init+0xac>)
 80015e4:	f00b fcd2 	bl	800cf8c <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 80015ee:	f000 f9b7 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <MX_TIM23_Init+0xac>)
 80015f4:	f004 fd24 	bl	8006040 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	24000578 	.word	0x24000578
 8001604:	4000e000 	.word	0x4000e000

08001608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <MX_USART1_UART_Init+0x90>)
 800160e:	4a23      	ldr	r2, [pc, #140]	; (800169c <MX_USART1_UART_Init+0x94>)
 8001610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <MX_USART1_UART_Init+0x90>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <MX_USART1_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <MX_USART1_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001650:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001652:	f00c fc69 	bl	800df28 <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800165c:	f000 f980 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001664:	f00e fcb0 	bl	800ffc8 <HAL_UARTEx_SetTxFifoThreshold>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800166e:	f000 f977 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001672:	2100      	movs	r1, #0
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001676:	f00e fce5 	bl	8010044 <HAL_UARTEx_SetRxFifoThreshold>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001680:	f000 f96e 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_USART1_UART_Init+0x90>)
 8001686:	f00e fc66 	bl	800ff56 <HAL_UARTEx_DisableFifoMode>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001690:	f000 f966 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	240005c4 	.word	0x240005c4
 800169c:	40011000 	.word	0x40011000

080016a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_DMA_Init+0x4c>)
 80016a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <MX_DMA_Init+0x4c>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_DMA_Init+0x4c>)
 80016b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	200b      	movs	r0, #11
 80016ca:	f005 fb78 	bl	8006dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016ce:	200b      	movs	r0, #11
 80016d0:	f005 fb8f 	bl	8006df2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	200c      	movs	r0, #12
 80016da:	f005 fb70 	bl	8006dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016de:	200c      	movs	r0, #12
 80016e0:	f005 fb87 	bl	8006df2 <HAL_NVIC_EnableIRQ>

}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	58024400 	.word	0x58024400

080016f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08e      	sub	sp, #56	; 0x38
 80016f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001706:	4b8e      	ldr	r3, [pc, #568]	; (8001940 <MX_GPIO_Init+0x250>)
 8001708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170c:	4a8c      	ldr	r2, [pc, #560]	; (8001940 <MX_GPIO_Init+0x250>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001716:	4b8a      	ldr	r3, [pc, #552]	; (8001940 <MX_GPIO_Init+0x250>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	4b86      	ldr	r3, [pc, #536]	; (8001940 <MX_GPIO_Init+0x250>)
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	4a85      	ldr	r2, [pc, #532]	; (8001940 <MX_GPIO_Init+0x250>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001734:	4b82      	ldr	r3, [pc, #520]	; (8001940 <MX_GPIO_Init+0x250>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001742:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <MX_GPIO_Init+0x250>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001748:	4a7d      	ldr	r2, [pc, #500]	; (8001940 <MX_GPIO_Init+0x250>)
 800174a:	f043 0320 	orr.w	r3, r3, #32
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001752:	4b7b      	ldr	r3, [pc, #492]	; (8001940 <MX_GPIO_Init+0x250>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001760:	4b77      	ldr	r3, [pc, #476]	; (8001940 <MX_GPIO_Init+0x250>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	4a76      	ldr	r2, [pc, #472]	; (8001940 <MX_GPIO_Init+0x250>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001770:	4b73      	ldr	r3, [pc, #460]	; (8001940 <MX_GPIO_Init+0x250>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b70      	ldr	r3, [pc, #448]	; (8001940 <MX_GPIO_Init+0x250>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001784:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <MX_GPIO_Init+0x250>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178e:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <MX_GPIO_Init+0x250>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <MX_GPIO_Init+0x250>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a2:	4a67      	ldr	r2, [pc, #412]	; (8001940 <MX_GPIO_Init+0x250>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ac:	4b64      	ldr	r3, [pc, #400]	; (8001940 <MX_GPIO_Init+0x250>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	4b61      	ldr	r3, [pc, #388]	; (8001940 <MX_GPIO_Init+0x250>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c0:	4a5f      	ldr	r2, [pc, #380]	; (8001940 <MX_GPIO_Init+0x250>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ca:	4b5d      	ldr	r3, [pc, #372]	; (8001940 <MX_GPIO_Init+0x250>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d8:	4b59      	ldr	r3, [pc, #356]	; (8001940 <MX_GPIO_Init+0x250>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	4a58      	ldr	r2, [pc, #352]	; (8001940 <MX_GPIO_Init+0x250>)
 80017e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e8:	4b55      	ldr	r3, [pc, #340]	; (8001940 <MX_GPIO_Init+0x250>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80017fc:	4851      	ldr	r0, [pc, #324]	; (8001944 <MX_GPIO_Init+0x254>)
 80017fe:	f008 fb0d 	bl	8009e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f242 0130 	movw	r1, #8240	; 0x2030
 8001808:	484f      	ldr	r0, [pc, #316]	; (8001948 <MX_GPIO_Init+0x258>)
 800180a:	f008 fb07 	bl	8009e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001814:	484d      	ldr	r0, [pc, #308]	; (800194c <MX_GPIO_Init+0x25c>)
 8001816:	f008 fb01 	bl	8009e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	21f0      	movs	r1, #240	; 0xf0
 800181e:	484c      	ldr	r0, [pc, #304]	; (8001950 <MX_GPIO_Init+0x260>)
 8001820:	f008 fafc 	bl	8009e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 514f 	mov.w	r1, #13248	; 0x33c0
 800182a:	484a      	ldr	r0, [pc, #296]	; (8001954 <MX_GPIO_Init+0x264>)
 800182c:	f008 faf6 	bl	8009e1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001836:	4848      	ldr	r0, [pc, #288]	; (8001958 <MX_GPIO_Init+0x268>)
 8001838:	f008 faf0 	bl	8009e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 800183c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	483b      	ldr	r0, [pc, #236]	; (8001944 <MX_GPIO_Init+0x254>)
 8001856:	f008 f921 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 800185a:	f242 0330 	movw	r3, #8240	; 0x2030
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	4619      	mov	r1, r3
 8001872:	4835      	ldr	r0, [pc, #212]	; (8001948 <MX_GPIO_Init+0x258>)
 8001874:	f008 f912 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001878:	2308      	movs	r3, #8
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4830      	ldr	r0, [pc, #192]	; (800194c <MX_GPIO_Init+0x25c>)
 800188c:	f008 f906 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001890:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a6:	4619      	mov	r1, r3
 80018a8:	4828      	ldr	r0, [pc, #160]	; (800194c <MX_GPIO_Init+0x25c>)
 80018aa:	f008 f8f7 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ae:	2303      	movs	r3, #3
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018be:	4619      	mov	r1, r3
 80018c0:	4821      	ldr	r0, [pc, #132]	; (8001948 <MX_GPIO_Init+0x258>)
 80018c2:	f008 f8eb 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018c6:	23f0      	movs	r3, #240	; 0xf0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	4619      	mov	r1, r3
 80018dc:	481c      	ldr	r0, [pc, #112]	; (8001950 <MX_GPIO_Init+0x260>)
 80018de:	f008 f8dd 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7
 80018e2:	f44f 534f 	mov.w	r3, #13248	; 0x33c0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	4619      	mov	r1, r3
 80018fa:	4816      	ldr	r0, [pc, #88]	; (8001954 <MX_GPIO_Init+0x264>)
 80018fc:	f008 f8ce 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001900:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	480f      	ldr	r0, [pc, #60]	; (8001958 <MX_GPIO_Init+0x268>)
 800191a:	f008 f8bf 	bl	8009a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800191e:	2378      	movs	r3, #120	; 0x78
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	480a      	ldr	r0, [pc, #40]	; (800195c <MX_GPIO_Init+0x26c>)
 8001932:	f008 f8b3 	bl	8009a9c <HAL_GPIO_Init>

}
 8001936:	bf00      	nop
 8001938:	3738      	adds	r7, #56	; 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	58024400 	.word	0x58024400
 8001944:	58021000 	.word	0x58021000
 8001948:	58020800 	.word	0x58020800
 800194c:	58021400 	.word	0x58021400
 8001950:	58020000 	.word	0x58020000
 8001954:	58020400 	.word	0x58020400
 8001958:	58020c00 	.word	0x58020c00
 800195c:	58021800 	.word	0x58021800

08001960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001968:	e7fe      	b.n	8001968 <Error_Handler+0x8>
	...

0800196c <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	ROS::setup();
 8001970:	f002 f99a 	bl	8003ca8 <_ZN3ROS5setupEv>
	STM::setup();
 8001974:	f004 fd5c 	bl	8006430 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 8001978:	4b04      	ldr	r3, [pc, #16]	; (800198c <main_function+0x20>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <main_function+0x1a>
 8001980:	f7ff f9b6 	bl	8000cf0 <_Z10debug_loopv>
 8001984:	e7f8      	b.n	8001978 <main_function+0xc>
		else ROS::loop();
 8001986:	f002 f9a5 	bl	8003cd4 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 800198a:	e7f5      	b.n	8001978 <main_function+0xc>
 800198c:	24000260 	.word	0x24000260

08001990 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c1 2300 	strd	r2, r3, [r1]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ffd8 	bl	8001990 <_ZN8CAR_INFOC1Ev>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3318      	adds	r3, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ffd3 	bl	8001990 <_ZN8CAR_INFOC1Ev>
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <_ZN7MecanumC1Ev+0x60>)
 80019f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	a309      	add	r3, pc, #36	; (adr r3, 8001a20 <_ZN7MecanumC1Ev+0x50>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	a308      	add	r3, pc, #32	; (adr r3, 8001a28 <_ZN7MecanumC1Ev+0x58>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001a0e:	f7fe fff1 	bl	80009f4 <_Z13DC_motor_initv>
}
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	f3af 8000 	nop.w
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	4020cccc 	.word	0x4020cccc
 8001a28:	39581062 	.word	0x39581062
 8001a2c:	400d48b4 	.word	0x400d48b4
 8001a30:	40270000 	.word	0x40270000

08001a34 <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f807 	bl	8001a50 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f89a 	bl	8001b7c <_ZN7Mecanum13tf2_car_speedEv>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZN7Mecanum15tf2_wheel_speedEv>:


// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	fl.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	ed93 6b02 	vldr	d6, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	ed93 7b00 	vldr	d7, [r3]
 8001a64:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	ed93 5b04 	vldr	d5, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001a7a:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a82:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a86:	eeb1 5b47 	vneg.f64	d5, d7
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001a90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <_ZN7Mecanum15tf2_wheel_speedEv+0x11c>)
 8001a96:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fr.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	ed93 7b00 	vldr	d7, [r3]
 8001aa6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	ed93 5b04 	vldr	d5, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001abc:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001ac0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ac4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ac8:	eeb1 5b47 	vneg.f64	d5, d7
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001ad2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <_ZN7Mecanum15tf2_wheel_speedEv+0x120>)
 8001ad8:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	ed93 6b02 	vldr	d6, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	ed93 7b00 	vldr	d7, [r3]
 8001ae8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	ed93 5b04 	vldr	d5, [r3, #16]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001afe:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001b02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b0a:	eeb1 5b47 	vneg.f64	d5, d7
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001b14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <_ZN7Mecanum15tf2_wheel_speedEv+0x124>)
 8001b1a:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	ed93 6b02 	vldr	d6, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	ed93 5b04 	vldr	d5, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001b40:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001b44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b4c:	eeb1 5b47 	vneg.f64	d5, d7
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8001b56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <_ZN7Mecanum15tf2_wheel_speedEv+0x128>)
 8001b5c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	24000110 	.word	0x24000110
 8001b70:	240000a0 	.word	0x240000a0
 8001b74:	240001f0 	.word	0x240001f0
 8001b78:	24000180 	.word	0x24000180

08001b7c <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	CAR_Now.Vy = -(0.25)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001b8a:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001b8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b92:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001b94:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001b9a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001b9e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001ba4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001ba8:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001bae:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001bb2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001bb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Vx = -(0.25)*radius*(fl.rps_now - fr.rps_now - bl.rps_now + br.rps_now);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001bc6:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001bca:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001bd0:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001bd6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001bda:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001be0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001be4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001bea:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001bee:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001bf2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Omega = -(0.25)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c02:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001c06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001c16:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001c1a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001c1e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001c22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001c28:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001c2e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c32:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001c38:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c3c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001c42:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001c46:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001c4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	24000110 	.word	0x24000110
 8001c64:	240000a0 	.word	0x240000a0
 8001c68:	240001f0 	.word	0x240001f0
 8001c6c:	24000180 	.word	0x24000180

08001c70 <_Z41__static_initialization_and_destruction_0ii>:
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d102      	bne.n	8001c90 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001c8c:	f7ff fea0 	bl	80019d0 <_ZN7MecanumC1Ev>
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	24000748 	.word	0x24000748

08001c9c <_GLOBAL__sub_I_mecanum>:
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff ffe3 	bl	8001c70 <_Z41__static_initialization_and_destruction_0ii>
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZN7MYRESET7receiveEv>:
	int state=0;
}

int apple =0, banana=0, cookie=0;

void MYRESET::receive(void){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

	apple = HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN);
 8001cb0:	2108      	movs	r1, #8
 8001cb2:	4825      	ldr	r0, [pc, #148]	; (8001d48 <_ZN7MYRESET7receiveEv+0x9c>)
 8001cb4:	f008 f89a 	bl	8009dec <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <_ZN7MYRESET7receiveEv+0xa0>)
 8001cbe:	601a      	str	r2, [r3, #0]
	banana = apple;
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <_ZN7MYRESET7receiveEv+0xa0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <_ZN7MYRESET7receiveEv+0xa4>)
 8001cc6:	6013      	str	r3, [r2, #0]
	if(banana!=apple)cookie++;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <_ZN7MYRESET7receiveEv+0xa4>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <_ZN7MYRESET7receiveEv+0xa0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d004      	beq.n	8001cde <_ZN7MYRESET7receiveEv+0x32>
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <_ZN7MYRESET7receiveEv+0xa8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <_ZN7MYRESET7receiveEv+0xa8>)
 8001cdc:	6013      	str	r3, [r2, #0]

	/* first part*/
	if (HAL_GPIO_ReadPin(THIRD_PART_PORT, THIRD_PART_PIN) == 0)MYRESET::state=3;
 8001cde:	2102      	movs	r1, #2
 8001ce0:	481d      	ldr	r0, [pc, #116]	; (8001d58 <_ZN7MYRESET7receiveEv+0xac>)
 8001ce2:	f008 f883 	bl	8009dec <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <_ZN7MYRESET7receiveEv+0x52>
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <_ZN7MYRESET7receiveEv+0xb0>)
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	601a      	str	r2, [r3, #0]

	/* third part*/
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;

	else MYRESET::state=0;
}
 8001cfc:	e022      	b.n	8001d44 <_ZN7MYRESET7receiveEv+0x98>
	else if (HAL_GPIO_ReadPin(SECOND_PART_PORT, SECOND_PART_PIN) == 0) MYRESET::state=2;
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4815      	ldr	r0, [pc, #84]	; (8001d58 <_ZN7MYRESET7receiveEv+0xac>)
 8001d02:	f008 f873 	bl	8009dec <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <_ZN7MYRESET7receiveEv+0x72>
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <_ZN7MYRESET7receiveEv+0xb0>)
 8001d18:	2202      	movs	r2, #2
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	e012      	b.n	8001d44 <_ZN7MYRESET7receiveEv+0x98>
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;
 8001d1e:	2108      	movs	r1, #8
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <_ZN7MYRESET7receiveEv+0x9c>)
 8001d22:	f008 f863 	bl	8009dec <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <_ZN7MYRESET7receiveEv+0x92>
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <_ZN7MYRESET7receiveEv+0xb0>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
}
 8001d3c:	e002      	b.n	8001d44 <_ZN7MYRESET7receiveEv+0x98>
	else MYRESET::state=0;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <_ZN7MYRESET7receiveEv+0xb0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	58021400 	.word	0x58021400
 8001d4c:	240007ac 	.word	0x240007ac
 8001d50:	240007b0 	.word	0x240007b0
 8001d54:	240007b4 	.word	0x240007b4
 8001d58:	58020800 	.word	0x58020800
 8001d5c:	240007a8 	.word	0x240007a8

08001d60 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	08011340 	.word	0x08011340

08001da4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      data()
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ffe8 	bl	8001d84 <_ZN3ros3MsgC1Ev>
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ffce 	bl	8001d60 <_ZN3ros4TimeC1Ev>
    {
    }
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	08011328 	.word	0x08011328

08001dd4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0a19      	lsrs	r1, r3, #8
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b2ca      	uxtb	r2, r1
 8001e00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	0c19      	lsrs	r1, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b2ca      	uxtb	r2, r1
 8001e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	0e19      	lsrs	r1, r3, #24
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	4413      	add	r3, r2
 8001e22:	b2ca      	uxtb	r2, r1
 8001e24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a19      	lsrs	r1, r3, #8
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	b2ca      	uxtb	r2, r1
 8001e4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	0c19      	lsrs	r1, r3, #16
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3302      	adds	r3, #2
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b2ca      	uxtb	r2, r1
 8001e5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0e19      	lsrs	r1, r3, #24
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3303      	adds	r3, #3
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b2ca      	uxtb	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3304      	adds	r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e76:	68fb      	ldr	r3, [r7, #12]
    }
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	440b      	add	r3, r1
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	6839      	ldr	r1, [r7, #0]
 8001ed6:	440b      	add	r3, r1
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3301      	adds	r3, #1
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	440b      	add	r3, r1
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3302      	adds	r3, #2
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	440b      	add	r3, r1
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3303      	adds	r3, #3
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	08011040 	.word	0x08011040

08001f68 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	08011050 	.word	0x08011050

08001f84 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fef8 	bl	8001d84 <_ZN3ros3MsgC1Ev>
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	809a      	strh	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
    {
    }
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08011310 	.word	0x08011310
 8001fc8:	08011074 	.word	0x08011074

08001fcc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8899      	ldrh	r1, [r3, #4]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	889b      	ldrh	r3, [r3, #4]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b299      	uxth	r1, r3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3302      	adds	r3, #2
 8002000:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe f982 	bl	8000310 <strlen>
 800200c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4413      	add	r3, r2
 8002014:	69b9      	ldr	r1, [r7, #24]
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fe8a 	bl	8003d30 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3304      	adds	r3, #4
 8002020:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	18d0      	adds	r0, r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4619      	mov	r1, r3
 8002030:	f00e fe60 	bl	8010cf4 <memcpy>
      offset += length_topic_name;
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4413      	add	r3, r2
 800203a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe f965 	bl	8000310 <strlen>
 8002046:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4413      	add	r3, r2
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 fe6d 	bl	8003d30 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	18d0      	adds	r0, r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4619      	mov	r1, r3
 800206a:	f00e fe43 	bl	8010cf4 <memcpy>
      offset += length_message_type;
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4413      	add	r3, r2
 8002074:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe f948 	bl	8000310 <strlen>
 8002080:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4413      	add	r3, r2
 8002088:	6939      	ldr	r1, [r7, #16]
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fe50 	bl	8003d30 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3304      	adds	r3, #4
 8002094:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	18d0      	adds	r0, r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4619      	mov	r1, r3
 80020a4:	f00e fe26 	bl	8010cf4 <memcpy>
      offset += length_md5sum;
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80020b6:	68f9      	ldr	r1, [r7, #12]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	b2ca      	uxtb	r2, r1
 80020c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	0a19      	lsrs	r1, r3, #8
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3301      	adds	r3, #1
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	b2ca      	uxtb	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0c19      	lsrs	r1, r3, #16
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3302      	adds	r3, #2
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0e19      	lsrs	r1, r3, #24
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3303      	adds	r3, #3
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	61fb      	str	r3, [r7, #28]
      return offset;
 80020f8:	69fb      	ldr	r3, [r7, #28]
    }
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002102:	b580      	push	{r7, lr}
 8002104:	b08a      	sub	sp, #40	; 0x28
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	889b      	ldrh	r3, [r3, #4]
 8002122:	b21a      	sxth	r2, r3
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	3301      	adds	r3, #1
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	440b      	add	r3, r1
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21b      	sxth	r3, r3
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	3302      	adds	r3, #2
 8002140:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	441a      	add	r2, r3
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f001 fe0c 	bl	8003d6c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	3304      	adds	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4413      	add	r3, r2
 8002164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002166:	429a      	cmp	r2, r3
 8002168:	d20c      	bcs.n	8002184 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	441a      	add	r2, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3b01      	subs	r3, #1
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	440b      	add	r3, r1
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	3301      	adds	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e7ec      	b.n	800215e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4413      	add	r3, r2
 800218a:	3b01      	subs	r3, #1
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	4413      	add	r3, r2
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	3b01      	subs	r3, #1
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	441a      	add	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	4413      	add	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	441a      	add	r2, r3
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fdd9 	bl	8003d6c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	3304      	adds	r3, #4
 80021be:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	623b      	str	r3, [r7, #32]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	6a3a      	ldr	r2, [r7, #32]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d20c      	bcs.n	80021ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	441a      	add	r2, r3
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	3b01      	subs	r3, #1
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	440b      	add	r3, r1
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	3301      	adds	r3, #1
 80021e6:	623b      	str	r3, [r7, #32]
 80021e8:	e7ec      	b.n	80021c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	3b01      	subs	r3, #1
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	441a      	add	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	441a      	add	r2, r3
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f001 fda6 	bl	8003d6c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	3304      	adds	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	429a      	cmp	r2, r3
 8002234:	d20c      	bcs.n	8002250 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	441a      	add	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	3b01      	subs	r3, #1
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	440b      	add	r3, r1
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3301      	adds	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e7ec      	b.n	800222a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	3b01      	subs	r3, #1
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	4413      	add	r3, r2
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3b01      	subs	r3, #1
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	441a      	add	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	440a      	add	r2, r1
 8002280:	7812      	ldrb	r2, [r2, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	3301      	adds	r3, #1
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	440b      	add	r3, r1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	4313      	orrs	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	3302      	adds	r3, #2
 800229e:	6839      	ldr	r1, [r7, #0]
 80022a0:	440b      	add	r3, r1
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	3303      	adds	r3, #3
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	440b      	add	r3, r1
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	061b      	lsls	r3, r3, #24
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	3304      	adds	r3, #4
 80022c6:	61bb      	str	r3, [r7, #24]
     return offset;
 80022c8:	69bb      	ldr	r3, [r7, #24]
    }
 80022ca:	4618      	mov	r0, r3
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	08011078 	.word	0x08011078

080022f0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	08011094 	.word	0x08011094

0800230c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fd34 	bl	8001d84 <_ZN3ros3MsgC1Ev>
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	711a      	strb	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800232c:	609a      	str	r2, [r3, #8]
    {
    }
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	080112f8 	.word	0x080112f8
 800233c:	08011074 	.word	0x08011074

08002340 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	4413      	add	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	7912      	ldrb	r2, [r2, #4]
 8002358:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3301      	adds	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fd ffd3 	bl	8000310 <strlen>
 800236a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	4413      	add	r3, r2
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4618      	mov	r0, r3
 8002376:	f001 fcdb 	bl	8003d30 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3304      	adds	r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	18d0      	adds	r0, r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4619      	mov	r1, r3
 800238e:	f00e fcb1 	bl	8010cf4 <memcpy>
      offset += length_msg;
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
      return offset;
 800239a:	68fb      	ldr	r3, [r7, #12]
    }
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	3301      	adds	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	441a      	add	r2, r3
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fccb 	bl	8003d6c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3304      	adds	r3, #4
 80023da:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d20c      	bcs.n	8002406 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	441a      	add	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	440b      	add	r3, r1
 80023fa:	7812      	ldrb	r2, [r2, #0]
 80023fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e7ec      	b.n	80023e0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	3b01      	subs	r3, #1
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	3b01      	subs	r3, #1
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	441a      	add	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
     return offset;
 800242a:	693b      	ldr	r3, [r7, #16]
    }
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	080110b8 	.word	0x080110b8

08002450 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	080110cc 	.word	0x080110cc

0800246c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fc84 	bl	8001d84 <_ZN3ros3MsgC1Ev>
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	080112e0 	.word	0x080112e0

080024b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	b2ca      	uxtb	r2, r1
 80024ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0a19      	lsrs	r1, r3, #8
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	3301      	adds	r3, #1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	b2ca      	uxtb	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0c19      	lsrs	r1, r3, #16
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	3302      	adds	r3, #2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	b2ca      	uxtb	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0e19      	lsrs	r1, r3, #24
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	3303      	adds	r3, #3
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4413      	add	r3, r2
 8002502:	b2ca      	uxtb	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3304      	adds	r3, #4
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800250c:	2300      	movs	r3, #0
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	429a      	cmp	r2, r3
 8002518:	d22b      	bcs.n	8002572 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002528:	6939      	ldr	r1, [r7, #16]
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	0a19      	lsrs	r1, r3, #8
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	3301      	adds	r3, #1
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4413      	add	r3, r2
 8002540:	b2ca      	uxtb	r2, r1
 8002542:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	0c19      	lsrs	r1, r3, #16
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	3302      	adds	r3, #2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	0e19      	lsrs	r1, r3, #24
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	3303      	adds	r3, #3
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4413      	add	r3, r2
 8002560:	b2ca      	uxtb	r2, r1
 8002562:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	3304      	adds	r3, #4
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	3301      	adds	r3, #1
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	e7ce      	b.n	8002510 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	b2ca      	uxtb	r2, r1
 800257e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	0a19      	lsrs	r1, r3, #8
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	b2ca      	uxtb	r2, r1
 8002590:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	0c19      	lsrs	r1, r3, #16
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	3302      	adds	r3, #2
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	b2ca      	uxtb	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	0e19      	lsrs	r1, r3, #24
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	3303      	adds	r3, #3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	b2ca      	uxtb	r2, r1
 80025b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	3304      	adds	r3, #4
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d22b      	bcs.n	8002622 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	0a19      	lsrs	r1, r3, #8
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	3301      	adds	r3, #1
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	b2ca      	uxtb	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	0c19      	lsrs	r1, r3, #16
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	3302      	adds	r3, #2
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	b2ca      	uxtb	r2, r1
 8002602:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	0e19      	lsrs	r1, r3, #24
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	3303      	adds	r3, #3
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	b2ca      	uxtb	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	3304      	adds	r3, #4
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3301      	adds	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e7ce      	b.n	80025c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69d9      	ldr	r1, [r3, #28]
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	4413      	add	r3, r2
 800262c:	b2ca      	uxtb	r2, r1
 800262e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	0a19      	lsrs	r1, r3, #8
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3301      	adds	r3, #1
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	b2ca      	uxtb	r2, r1
 8002640:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	0c19      	lsrs	r1, r3, #16
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3302      	adds	r3, #2
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	b2ca      	uxtb	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	0e19      	lsrs	r1, r3, #24
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3303      	adds	r3, #3
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	b2ca      	uxtb	r2, r1
 8002664:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	3304      	adds	r3, #4
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	429a      	cmp	r2, r3
 8002678:	d228      	bcs.n	80026cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd fe42 	bl	8000310 <strlen>
 800268c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4413      	add	r3, r2
 8002694:	6979      	ldr	r1, [r7, #20]
 8002696:	4618      	mov	r0, r3
 8002698:	f001 fb4a 	bl	8003d30 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	3304      	adds	r3, #4
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	18d0      	adds	r0, r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4619      	mov	r1, r3
 80026b8:	f00e fb1c 	bl	8010cf4 <memcpy>
      offset += length_stringsi;
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	4413      	add	r3, r2
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e7d1      	b.n	8002670 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026ce:	4618      	mov	r0, r3
 80026d0:	3728      	adds	r7, #40	; 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b08e      	sub	sp, #56	; 0x38
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	3301      	adds	r3, #1
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	6a3a      	ldr	r2, [r7, #32]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	3302      	adds	r3, #2
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	4313      	orrs	r3, r2
 8002710:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	3303      	adds	r3, #3
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	6a3a      	ldr	r2, [r7, #32]
 8002720:	4313      	orrs	r3, r2
 8002722:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002726:	3304      	adds	r3, #4
 8002728:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	6a3a      	ldr	r2, [r7, #32]
 8002730:	429a      	cmp	r2, r3
 8002732:	d90a      	bls.n	800274a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f00e faee 	bl	8010d20 <realloc>
 8002744:	4602      	mov	r2, r0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a3a      	ldr	r2, [r7, #32]
 800274e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002750:	2300      	movs	r3, #0
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275a:	429a      	cmp	r2, r3
 800275c:	d236      	bcs.n	80027cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	440a      	add	r2, r1
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3301      	adds	r3, #1
 8002776:	6839      	ldr	r1, [r7, #0]
 8002778:	440b      	add	r3, r1
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	3302      	adds	r3, #2
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	440b      	add	r3, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	041b      	lsls	r3, r3, #16
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	3303      	adds	r3, #3
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	440b      	add	r3, r1
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ae:	3304      	adds	r3, #4
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	6812      	ldr	r2, [r2, #0]
 80027c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	3301      	adds	r3, #1
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ca:	e7c3      	b.n	8002754 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	3301      	adds	r3, #1
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	3302      	adds	r3, #2
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	3303      	adds	r3, #3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	4313      	orrs	r3, r2
 800280a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	3304      	adds	r3, #4
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	429a      	cmp	r2, r3
 800281a:	d90a      	bls.n	8002832 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f00e fa7a 	bl	8010d20 <realloc>
 800282c:	4602      	mov	r2, r0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002842:	429a      	cmp	r2, r3
 8002844:	d236      	bcs.n	80028b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	440a      	add	r2, r1
 8002852:	7812      	ldrb	r2, [r2, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	3301      	adds	r3, #1
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	440b      	add	r3, r1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	3302      	adds	r3, #2
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	440b      	add	r3, r1
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	041b      	lsls	r3, r3, #16
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	3303      	adds	r3, #3
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	440b      	add	r3, r1
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	3304      	adds	r3, #4
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	3214      	adds	r2, #20
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	3301      	adds	r3, #1
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b2:	e7c3      	b.n	800283c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c0:	3301      	adds	r3, #1
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80028d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d2:	3302      	adds	r3, #2
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	3303      	adds	r3, #3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	4413      	add	r3, r2
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	3304      	adds	r3, #4
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	429a      	cmp	r2, r3
 8002902:	d90a      	bls.n	800291a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4619      	mov	r1, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f00e fa06 	bl	8010d20 <realloc>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292a:	429a      	cmp	r2, r3
 800292c:	d23f      	bcs.n	80029ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	441a      	add	r2, r3
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fa16 	bl	8003d6c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	3304      	adds	r3, #4
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	441a      	add	r2, r3
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	440b      	add	r3, r1
 8002964:	7812      	ldrb	r2, [r2, #0]
 8002966:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	3301      	adds	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	e7ec      	b.n	800294a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4413      	add	r3, r2
 8002976:	3b01      	subs	r3, #1
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002982:	3b01      	subs	r3, #1
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	441a      	add	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800298c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	3220      	adds	r2, #32
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	3301      	adds	r3, #1
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ac:	e7ba      	b.n	8002924 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80029b0:	4618      	mov	r0, r3
 80029b2:	3738      	adds	r7, #56	; 0x38
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	0801121c 	.word	0x0801121c

080029d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	080110f0 	.word	0x080110f0

080029f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	611a      	str	r2, [r3, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68d8      	ldr	r0, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6891      	ldr	r1, [r2, #8]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4798      	blx	r3
 8002a3c:	4603      	mov	r3, r0
  };
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
  }
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d068      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a40      	ldr	r2, [pc, #256]	; (8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d061      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d05a      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3b      	ldr	r2, [pc, #236]	; (8002b88 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d053      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a38      	ldr	r2, [pc, #224]	; (8002b8c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d04c      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a36      	ldr	r2, [pc, #216]	; (8002b90 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d045      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a33      	ldr	r2, [pc, #204]	; (8002b94 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d03e      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a31      	ldr	r2, [pc, #196]	; (8002b98 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d037      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d030      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d029      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d022      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d01b      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a24      	ldr	r2, [pc, #144]	; (8002bac <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d014      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00d      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d006      	beq.n	8002b48 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d109      	bne.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5a:	e008      	b.n	8002b6e <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40020010 	.word	0x40020010
 8002b80:	40020028 	.word	0x40020028
 8002b84:	40020040 	.word	0x40020040
 8002b88:	40020058 	.word	0x40020058
 8002b8c:	40020070 	.word	0x40020070
 8002b90:	40020088 	.word	0x40020088
 8002b94:	400200a0 	.word	0x400200a0
 8002b98:	400200b8 	.word	0x400200b8
 8002b9c:	40020410 	.word	0x40020410
 8002ba0:	40020428 	.word	0x40020428
 8002ba4:	40020440 	.word	0x40020440
 8002ba8:	40020458 	.word	0x40020458
 8002bac:	40020470 	.word	0x40020470
 8002bb0:	40020488 	.word	0x40020488
 8002bb4:	400204a0 	.word	0x400204a0
 8002bb8:	400204b8 	.word	0x400204b8

08002bbc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <_ZN13STM32HardwareC1Ev+0x34>)
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	240005c4 	.word	0x240005c4

08002bf4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f804 	bl	8002c0a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f00b fa64 	bl	800e0ec <HAL_UART_Receive_DMA>
    }
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002c34:	f04f 33ff 	mov.w	r3, #4294967295
 8002c38:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff0d 	bl	8002a60 <_ZN13STM32Hardware10getRdmaIndEv>
 8002c46:	4603      	mov	r3, r0
 8002c48:	429c      	cmp	r4, r3
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d012      	beq.n	8002c7c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c5c:	1c59      	adds	r1, r3, #1
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	791b      	ldrb	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd90      	pop	{r4, r7, pc}
	...

08002c88 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d108      	bne.n	8002cae <_ZN13STM32Hardware5flushEv+0x26>
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	f083 0301 	eor.w	r3, r3, #1
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_ZN13STM32Hardware5flushEv+0x26>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <_ZN13STM32Hardware5flushEv+0x28>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d03f      	beq.n	8002d34 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d031      	beq.n	8002d2e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d20a      	bcs.n	8002cf0 <_ZN13STM32Hardware5flushEv+0x68>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	e006      	b.n	8002cfe <_ZN13STM32Hardware5flushEv+0x76>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8002d0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	89fa      	ldrh	r2, [r7, #14]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f00b f957 	bl	800dfc8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8002d20:	89fb      	ldrh	r3, [r7, #14]
 8002d22:	4413      	add	r3, r2
 8002d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 8002d2e:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
      }
    }
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	240007b8 	.word	0x240007b8

08002d40 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
      int n = length;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	bfa8      	it	ge
 8002d58:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002d5c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002d64:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	bf28      	it	cs
 8002d6e:	4613      	movcs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002d78:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f00d ffb5 	bl	8010cf4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	4413      	add	r3, r2
 8002d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d00b      	beq.n	8002dbe <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	18d1      	adds	r1, r2, r3
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	f00d ff9b 	bl	8010cf4 <memcpy>
      }

      flush();
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff62 	bl	8002c88 <_ZN13STM32Hardware5flushEv>
    }
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	f003 fee8 	bl	8006ba8 <HAL_GetTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ffc8 	bl	8001d84 <_ZN3ros3MsgC1Ev>
 8002df4:	4a0e      	ldr	r2, [pc, #56]	; (8002e30 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	0801129c 	.word	0x0801129c

08002e34 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e34:	b480      	push	{r7}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e48:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	4401      	add	r1, r0
 8002e56:	b2d3      	uxtb	r3, r2
 8002e58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002e5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	0a02      	lsrs	r2, r0, #8
 8002e68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e6c:	0a0b      	lsrs	r3, r1, #8
 8002e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e70:	3101      	adds	r1, #1
 8002e72:	6838      	ldr	r0, [r7, #0]
 8002e74:	4401      	add	r1, r0
 8002e76:	b2d3      	uxtb	r3, r2
 8002e78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002e7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	0c02      	lsrs	r2, r0, #16
 8002e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e8c:	0c0b      	lsrs	r3, r1, #16
 8002e8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e90:	3102      	adds	r1, #2
 8002e92:	6838      	ldr	r0, [r7, #0]
 8002e94:	4401      	add	r1, r0
 8002e96:	b2d3      	uxtb	r3, r2
 8002e98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002e9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	0e02      	lsrs	r2, r0, #24
 8002ea8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002eac:	0e0b      	lsrs	r3, r1, #24
 8002eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eb0:	3103      	adds	r1, #3
 8002eb2:	6838      	ldr	r0, [r7, #0]
 8002eb4:	4401      	add	r1, r0
 8002eb6:	b2d3      	uxtb	r3, r2
 8002eb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002eba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	000a      	movs	r2, r1
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ecc:	3104      	adds	r1, #4
 8002ece:	6838      	ldr	r0, [r7, #0]
 8002ed0:	4401      	add	r1, r0
 8002ed2:	b2d3      	uxtb	r3, r2
 8002ed4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002ed6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	0a0a      	lsrs	r2, r1, #8
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee8:	3105      	adds	r1, #5
 8002eea:	6838      	ldr	r0, [r7, #0]
 8002eec:	4401      	add	r1, r0
 8002eee:	b2d3      	uxtb	r3, r2
 8002ef0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002ef2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	0c0a      	lsrs	r2, r1, #16
 8002f00:	2300      	movs	r3, #0
 8002f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f04:	3106      	adds	r1, #6
 8002f06:	6838      	ldr	r0, [r7, #0]
 8002f08:	4401      	add	r1, r0
 8002f0a:	b2d3      	uxtb	r3, r2
 8002f0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002f0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	0e0a      	lsrs	r2, r1, #24
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f20:	3107      	adds	r1, #7
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	4401      	add	r1, r0
 8002f26:	b2d3      	uxtb	r3, r2
 8002f28:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f36:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002f3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f40:	6838      	ldr	r0, [r7, #0]
 8002f42:	4401      	add	r1, r0
 8002f44:	b2d3      	uxtb	r3, r2
 8002f46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	0a02      	lsrs	r2, r0, #8
 8002f56:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f5a:	0a0b      	lsrs	r3, r1, #8
 8002f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5e:	3101      	adds	r1, #1
 8002f60:	6838      	ldr	r0, [r7, #0]
 8002f62:	4401      	add	r1, r0
 8002f64:	b2d3      	uxtb	r3, r2
 8002f66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002f68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	0c02      	lsrs	r2, r0, #16
 8002f76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f7a:	0c0b      	lsrs	r3, r1, #16
 8002f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f7e:	3102      	adds	r1, #2
 8002f80:	6838      	ldr	r0, [r7, #0]
 8002f82:	4401      	add	r1, r0
 8002f84:	b2d3      	uxtb	r3, r2
 8002f86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002f88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	0e02      	lsrs	r2, r0, #24
 8002f96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f9a:	0e0b      	lsrs	r3, r1, #24
 8002f9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9e:	3103      	adds	r1, #3
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	4401      	add	r1, r0
 8002fa4:	b2d3      	uxtb	r3, r2
 8002fa6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002fa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fba:	3104      	adds	r1, #4
 8002fbc:	6838      	ldr	r0, [r7, #0]
 8002fbe:	4401      	add	r1, r0
 8002fc0:	b2d3      	uxtb	r3, r2
 8002fc2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002fc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	0a0a      	lsrs	r2, r1, #8
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd6:	3105      	adds	r1, #5
 8002fd8:	6838      	ldr	r0, [r7, #0]
 8002fda:	4401      	add	r1, r0
 8002fdc:	b2d3      	uxtb	r3, r2
 8002fde:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002fe0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	0c0a      	lsrs	r2, r1, #16
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff2:	3106      	adds	r1, #6
 8002ff4:	6838      	ldr	r0, [r7, #0]
 8002ff6:	4401      	add	r1, r0
 8002ff8:	b2d3      	uxtb	r3, r2
 8002ffa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	0e0a      	lsrs	r2, r1, #24
 800300a:	2300      	movs	r3, #0
 800300c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800300e:	3107      	adds	r1, #7
 8003010:	6838      	ldr	r0, [r7, #0]
 8003012:	4401      	add	r1, r0
 8003014:	b2d3      	uxtb	r3, r2
 8003016:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	3308      	adds	r3, #8
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003024:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003028:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800302c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	4401      	add	r1, r0
 8003032:	b2d3      	uxtb	r3, r2
 8003034:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003036:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	0a02      	lsrs	r2, r0, #8
 8003044:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003048:	0a0b      	lsrs	r3, r1, #8
 800304a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800304c:	3101      	adds	r1, #1
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	4401      	add	r1, r0
 8003052:	b2d3      	uxtb	r3, r2
 8003054:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	0c02      	lsrs	r2, r0, #16
 8003064:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003068:	0c0b      	lsrs	r3, r1, #16
 800306a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306c:	3102      	adds	r1, #2
 800306e:	6838      	ldr	r0, [r7, #0]
 8003070:	4401      	add	r1, r0
 8003072:	b2d3      	uxtb	r3, r2
 8003074:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003076:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	0e02      	lsrs	r2, r0, #24
 8003084:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003088:	0e0b      	lsrs	r3, r1, #24
 800308a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308c:	3103      	adds	r1, #3
 800308e:	6838      	ldr	r0, [r7, #0]
 8003090:	4401      	add	r1, r0
 8003092:	b2d3      	uxtb	r3, r2
 8003094:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003096:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	000a      	movs	r2, r1
 80030a4:	2300      	movs	r3, #0
 80030a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a8:	3104      	adds	r1, #4
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	4401      	add	r1, r0
 80030ae:	b2d3      	uxtb	r3, r2
 80030b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80030b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	0a0a      	lsrs	r2, r1, #8
 80030c0:	2300      	movs	r3, #0
 80030c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c4:	3105      	adds	r1, #5
 80030c6:	6838      	ldr	r0, [r7, #0]
 80030c8:	4401      	add	r1, r0
 80030ca:	b2d3      	uxtb	r3, r2
 80030cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80030ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	0c0a      	lsrs	r2, r1, #16
 80030dc:	2300      	movs	r3, #0
 80030de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e0:	3106      	adds	r1, #6
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	4401      	add	r1, r0
 80030e6:	b2d3      	uxtb	r3, r2
 80030e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80030ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	0e0a      	lsrs	r2, r1, #24
 80030f8:	2300      	movs	r3, #0
 80030fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fc:	3107      	adds	r1, #7
 80030fe:	6838      	ldr	r0, [r7, #0]
 8003100:	4401      	add	r1, r0
 8003102:	b2d3      	uxtb	r3, r2
 8003104:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	3308      	adds	r3, #8
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800310e:	4618      	mov	r0, r3
 8003110:	372c      	adds	r7, #44	; 0x2c
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800311a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800311e:	b0eb      	sub	sp, #428	; 0x1ac
 8003120:	af00      	add	r7, sp, #0
 8003122:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003126:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800313c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003140:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003144:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003148:	4413      	add	r3, r2
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2200      	movs	r2, #0
 8003150:	461c      	mov	r4, r3
 8003152:	4615      	mov	r5, r2
 8003154:	ea40 0804 	orr.w	r8, r0, r4
 8003158:	ea41 0905 	orr.w	r9, r1, r5
 800315c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003160:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003164:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2200      	movs	r2, #0
 8003176:	469a      	mov	sl, r3
 8003178:	4693      	mov	fp, r2
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003186:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800318a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800318e:	ea40 0402 	orr.w	r4, r0, r2
 8003192:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003196:	430b      	orrs	r3, r1
 8003198:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800319c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80031a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80031be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80031ce:	464c      	mov	r4, r9
 80031d0:	0423      	lsls	r3, r4, #16
 80031d2:	4644      	mov	r4, r8
 80031d4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80031d8:	4644      	mov	r4, r8
 80031da:	0422      	lsls	r2, r4, #16
 80031dc:	ea40 0402 	orr.w	r4, r0, r2
 80031e0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80031e4:	430b      	orrs	r3, r1
 80031e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80031ea:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80031ee:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031f2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031fa:	1cda      	adds	r2, r3, #3
 80031fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003200:	4413      	add	r3, r2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800320c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003210:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003214:	4623      	mov	r3, r4
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800321c:	4623      	mov	r3, r4
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003224:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003228:	4623      	mov	r3, r4
 800322a:	4303      	orrs	r3, r0
 800322c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003230:	462b      	mov	r3, r5
 8003232:	430b      	orrs	r3, r1
 8003234:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003238:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800323c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003240:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003244:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003248:	1d1a      	adds	r2, r3, #4
 800324a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800324e:	4413      	add	r3, r2
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800325a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800326a:	0023      	movs	r3, r4
 800326c:	2200      	movs	r2, #0
 800326e:	ea40 0402 	orr.w	r4, r0, r2
 8003272:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003276:	430b      	orrs	r3, r1
 8003278:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800327c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003280:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003284:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003288:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800328c:	1d5a      	adds	r2, r3, #5
 800328e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800329e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80032ae:	0223      	lsls	r3, r4, #8
 80032b0:	2200      	movs	r2, #0
 80032b2:	ea40 0402 	orr.w	r4, r0, r2
 80032b6:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80032c0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80032c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80032cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032d0:	1d9a      	adds	r2, r3, #6
 80032d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032e2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80032f2:	0423      	lsls	r3, r4, #16
 80032f4:	2200      	movs	r2, #0
 80032f6:	ea40 0402 	orr.w	r4, r0, r2
 80032fa:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80032fe:	430b      	orrs	r3, r1
 8003300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003304:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003308:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800330c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003310:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003314:	1dda      	adds	r2, r3, #7
 8003316:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003326:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003336:	0623      	lsls	r3, r4, #24
 8003338:	2200      	movs	r2, #0
 800333a:	ea40 0402 	orr.w	r4, r0, r2
 800333e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003342:	430b      	orrs	r3, r1
 8003344:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003348:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800334c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003350:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003354:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003358:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800335c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003360:	3308      	adds	r3, #8
 8003362:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003372:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003376:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800337a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800337e:	4413      	add	r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800338a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800338e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003392:	4623      	mov	r3, r4
 8003394:	4303      	orrs	r3, r0
 8003396:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800339a:	462b      	mov	r3, r5
 800339c:	430b      	orrs	r3, r1
 800339e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033a2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80033a6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033c4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80033d4:	464c      	mov	r4, r9
 80033d6:	0223      	lsls	r3, r4, #8
 80033d8:	4644      	mov	r4, r8
 80033da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033de:	4644      	mov	r4, r8
 80033e0:	0222      	lsls	r2, r4, #8
 80033e2:	ea40 0402 	orr.w	r4, r0, r2
 80033e6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80033ea:	430b      	orrs	r3, r1
 80033ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80033f0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80033f4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003400:	1c9a      	adds	r2, r3, #2
 8003402:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003406:	4413      	add	r3, r2
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003412:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003422:	464c      	mov	r4, r9
 8003424:	0423      	lsls	r3, r4, #16
 8003426:	4644      	mov	r4, r8
 8003428:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800342c:	4644      	mov	r4, r8
 800342e:	0422      	lsls	r2, r4, #16
 8003430:	ea40 0402 	orr.w	r4, r0, r2
 8003434:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003438:	430b      	orrs	r3, r1
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800343e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003442:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003446:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800344a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800344e:	1cda      	adds	r2, r3, #3
 8003450:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003454:	4413      	add	r3, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003460:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003464:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003468:	4623      	mov	r3, r4
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003470:	4623      	mov	r3, r4
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003478:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800347c:	4623      	mov	r3, r4
 800347e:	4303      	orrs	r3, r0
 8003480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003484:	462b      	mov	r3, r5
 8003486:	430b      	orrs	r3, r1
 8003488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800348c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003490:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003494:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003498:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800349c:	1d1a      	adds	r2, r3, #4
 800349e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034ae:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80034be:	0023      	movs	r3, r4
 80034c0:	2200      	movs	r2, #0
 80034c2:	ea40 0402 	orr.w	r4, r0, r2
 80034c6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80034ca:	430b      	orrs	r3, r1
 80034cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80034d0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80034d4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034d8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80034dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034e0:	1d5a      	adds	r2, r3, #5
 80034e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034e6:	4413      	add	r3, r2
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003502:	0223      	lsls	r3, r4, #8
 8003504:	2200      	movs	r2, #0
 8003506:	ea40 0402 	orr.w	r4, r0, r2
 800350a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800350e:	430b      	orrs	r3, r1
 8003510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003514:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003518:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800351c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003520:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003524:	1d9a      	adds	r2, r3, #6
 8003526:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2200      	movs	r2, #0
 8003532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003536:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003546:	0423      	lsls	r3, r4, #16
 8003548:	2200      	movs	r2, #0
 800354a:	ea40 0402 	orr.w	r4, r0, r2
 800354e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003552:	430b      	orrs	r3, r1
 8003554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003558:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800355c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003560:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003564:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003568:	1dda      	adds	r2, r3, #7
 800356a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2200      	movs	r2, #0
 8003576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800357a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800358a:	0623      	lsls	r3, r4, #24
 800358c:	2200      	movs	r2, #0
 800358e:	ea40 0402 	orr.w	r4, r0, r2
 8003592:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003596:	430b      	orrs	r3, r1
 8003598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800359c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80035a0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80035a4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80035a8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80035ac:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80035b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035b4:	3308      	adds	r3, #8
 80035b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035ca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80035ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035de:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035e2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80035e6:	4623      	mov	r3, r4
 80035e8:	4303      	orrs	r3, r0
 80035ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80035ec:	462b      	mov	r3, r5
 80035ee:	430b      	orrs	r3, r1
 80035f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035f2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80035f6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035fa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2200      	movs	r2, #0
 8003610:	673b      	str	r3, [r7, #112]	; 0x70
 8003612:	677a      	str	r2, [r7, #116]	; 0x74
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003620:	464c      	mov	r4, r9
 8003622:	0223      	lsls	r3, r4, #8
 8003624:	4644      	mov	r4, r8
 8003626:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800362a:	4644      	mov	r4, r8
 800362c:	0222      	lsls	r2, r4, #8
 800362e:	ea40 0402 	orr.w	r4, r0, r2
 8003632:	66bc      	str	r4, [r7, #104]	; 0x68
 8003634:	430b      	orrs	r3, r1
 8003636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003638:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800363c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003640:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003644:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800364e:	4413      	add	r3, r2
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2200      	movs	r2, #0
 8003656:	663b      	str	r3, [r7, #96]	; 0x60
 8003658:	667a      	str	r2, [r7, #100]	; 0x64
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003666:	464c      	mov	r4, r9
 8003668:	0423      	lsls	r3, r4, #16
 800366a:	4644      	mov	r4, r8
 800366c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003670:	4644      	mov	r4, r8
 8003672:	0422      	lsls	r2, r4, #16
 8003674:	ea40 0402 	orr.w	r4, r0, r2
 8003678:	65bc      	str	r4, [r7, #88]	; 0x58
 800367a:	430b      	orrs	r3, r1
 800367c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800367e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003682:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003686:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800368a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800368e:	1cda      	adds	r2, r3, #3
 8003690:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003694:	4413      	add	r3, r2
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2200      	movs	r2, #0
 800369c:	653b      	str	r3, [r7, #80]	; 0x50
 800369e:	657a      	str	r2, [r7, #84]	; 0x54
 80036a0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80036a4:	4623      	mov	r3, r4
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036aa:	4623      	mov	r3, r4
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80036b4:	4623      	mov	r3, r4
 80036b6:	4303      	orrs	r3, r0
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	462b      	mov	r3, r5
 80036bc:	430b      	orrs	r3, r1
 80036be:	647b      	str	r3, [r7, #68]	; 0x44
 80036c0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80036c4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036c8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80036cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2200      	movs	r2, #0
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80036ec:	0023      	movs	r3, r4
 80036ee:	2200      	movs	r2, #0
 80036f0:	ea40 0402 	orr.w	r4, r0, r2
 80036f4:	633c      	str	r4, [r7, #48]	; 0x30
 80036f6:	430b      	orrs	r3, r1
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
 80036fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80036fe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003702:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003706:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800370a:	1d5a      	adds	r2, r3, #5
 800370c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003710:	4413      	add	r3, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2200      	movs	r2, #0
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
 800371a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003726:	0223      	lsls	r3, r4, #8
 8003728:	2200      	movs	r2, #0
 800372a:	ea40 0402 	orr.w	r4, r0, r2
 800372e:	623c      	str	r4, [r7, #32]
 8003730:	430b      	orrs	r3, r1
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
 8003734:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003738:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800373c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003740:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003744:	3306      	adds	r3, #6
 8003746:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2200      	movs	r2, #0
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	69bc      	ldr	r4, [r7, #24]
 8003760:	0423      	lsls	r3, r4, #16
 8003762:	2200      	movs	r2, #0
 8003764:	ea40 0402 	orr.w	r4, r0, r2
 8003768:	613c      	str	r4, [r7, #16]
 800376a:	430b      	orrs	r3, r1
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003772:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003776:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800377a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800377e:	3307      	adds	r3, #7
 8003780:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003784:	4413      	add	r3, r2
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2200      	movs	r2, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	60fa      	str	r2, [r7, #12]
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	68bc      	ldr	r4, [r7, #8]
 800379a:	0623      	lsls	r3, r4, #24
 800379c:	2200      	movs	r2, #0
 800379e:	ea40 0402 	orr.w	r4, r0, r2
 80037a2:	603c      	str	r4, [r7, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80037b0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80037b4:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80037b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80037bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037c0:	3308      	adds	r3, #8
 80037c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80037c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80037ca:	4618      	mov	r0, r3
 80037cc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80037d0:	46bd      	mov	sp, r7
 80037d2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037d6:	4770      	bx	lr

080037d8 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	08011114 	.word	0x08011114

080037f4 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	08011128 	.word	0x08011128

08003810 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
      data(0)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fab2 	bl	8001d84 <_ZN3ros3MsgC1Ev>
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	08011284 	.word	0x08011284

08003844 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003858:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800385c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003860:	6979      	ldr	r1, [r7, #20]
 8003862:	6838      	ldr	r0, [r7, #0]
 8003864:	4401      	add	r1, r0
 8003866:	b2d3      	uxtb	r3, r2
 8003868:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800386a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	0a02      	lsrs	r2, r0, #8
 8003878:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800387c:	0a0b      	lsrs	r3, r1, #8
 800387e:	6979      	ldr	r1, [r7, #20]
 8003880:	3101      	adds	r1, #1
 8003882:	6838      	ldr	r0, [r7, #0]
 8003884:	4401      	add	r1, r0
 8003886:	b2d3      	uxtb	r3, r2
 8003888:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800388a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	0c02      	lsrs	r2, r0, #16
 8003898:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800389c:	0c0b      	lsrs	r3, r1, #16
 800389e:	6979      	ldr	r1, [r7, #20]
 80038a0:	3102      	adds	r1, #2
 80038a2:	6838      	ldr	r0, [r7, #0]
 80038a4:	4401      	add	r1, r0
 80038a6:	b2d3      	uxtb	r3, r2
 80038a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80038aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	0e02      	lsrs	r2, r0, #24
 80038b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038bc:	0e0b      	lsrs	r3, r1, #24
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	3103      	adds	r1, #3
 80038c2:	6838      	ldr	r0, [r7, #0]
 80038c4:	4401      	add	r1, r0
 80038c6:	b2d3      	uxtb	r3, r2
 80038c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80038ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	000a      	movs	r2, r1
 80038d8:	2300      	movs	r3, #0
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	3104      	adds	r1, #4
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	4401      	add	r1, r0
 80038e2:	b2d3      	uxtb	r3, r2
 80038e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80038e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	0a0a      	lsrs	r2, r1, #8
 80038f4:	2300      	movs	r3, #0
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	3105      	adds	r1, #5
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	4401      	add	r1, r0
 80038fe:	b2d3      	uxtb	r3, r2
 8003900:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	0c0a      	lsrs	r2, r1, #16
 8003910:	2300      	movs	r3, #0
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	3106      	adds	r1, #6
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	4401      	add	r1, r0
 800391a:	b2d3      	uxtb	r3, r2
 800391c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800391e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	0e0a      	lsrs	r2, r1, #24
 800392c:	2300      	movs	r3, #0
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	3107      	adds	r1, #7
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	4401      	add	r1, r0
 8003936:	b2d3      	uxtb	r3, r2
 8003938:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	3308      	adds	r3, #8
 800393e:	617b      	str	r3, [r7, #20]
      return offset;
 8003940:	697b      	ldr	r3, [r7, #20]
    }
 8003942:	4618      	mov	r0, r3
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800394e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003952:	b0a3      	sub	sp, #140	; 0x8c
 8003954:	af00      	add	r7, sp, #0
 8003956:	6778      	str	r0, [r7, #116]	; 0x74
 8003958:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800396c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003970:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2200      	movs	r2, #0
 800397e:	461c      	mov	r4, r3
 8003980:	4615      	mov	r5, r2
 8003982:	ea40 0804 	orr.w	r8, r0, r4
 8003986:	ea41 0905 	orr.w	r9, r1, r5
 800398a:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800398e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800399a:	4413      	add	r3, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	469a      	mov	sl, r3
 80039a4:	4693      	mov	fp, r2
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80039b2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80039b6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80039ba:	ea40 0402 	orr.w	r4, r0, r2
 80039be:	66bc      	str	r4, [r7, #104]	; 0x68
 80039c0:	430b      	orrs	r3, r1
 80039c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039c4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80039c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80039d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039d4:	1c9a      	adds	r2, r3, #2
 80039d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d8:	4413      	add	r3, r2
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2200      	movs	r2, #0
 80039e0:	663b      	str	r3, [r7, #96]	; 0x60
 80039e2:	667a      	str	r2, [r7, #100]	; 0x64
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039f0:	464c      	mov	r4, r9
 80039f2:	0423      	lsls	r3, r4, #16
 80039f4:	4644      	mov	r4, r8
 80039f6:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039fa:	4644      	mov	r4, r8
 80039fc:	0422      	lsls	r2, r4, #16
 80039fe:	ea40 0402 	orr.w	r4, r0, r2
 8003a02:	65bc      	str	r4, [r7, #88]	; 0x58
 8003a04:	430b      	orrs	r3, r1
 8003a06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a08:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003a0c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a10:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a18:	1cda      	adds	r2, r3, #3
 8003a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a1c:	4413      	add	r3, r2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2200      	movs	r2, #0
 8003a24:	653b      	str	r3, [r7, #80]	; 0x50
 8003a26:	657a      	str	r2, [r7, #84]	; 0x54
 8003a28:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a32:	4623      	mov	r3, r4
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a38:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	4303      	orrs	r3, r0
 8003a40:	643b      	str	r3, [r7, #64]	; 0x40
 8003a42:	462b      	mov	r3, r5
 8003a44:	430b      	orrs	r3, r1
 8003a46:	647b      	str	r3, [r7, #68]	; 0x44
 8003a48:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003a4c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a50:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5c:	4413      	add	r3, r2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2200      	movs	r2, #0
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a66:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003a72:	0023      	movs	r3, r4
 8003a74:	2200      	movs	r2, #0
 8003a76:	ea40 0402 	orr.w	r4, r0, r2
 8003a7a:	633c      	str	r4, [r7, #48]	; 0x30
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a80:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003a84:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a90:	1d5a      	adds	r2, r3, #5
 8003a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a94:	4413      	add	r3, r2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003aaa:	0223      	lsls	r3, r4, #8
 8003aac:	2200      	movs	r2, #0
 8003aae:	ea40 0402 	orr.w	r4, r0, r2
 8003ab2:	623c      	str	r4, [r7, #32]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003abc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ac0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac8:	3306      	adds	r3, #6
 8003aca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003acc:	4413      	add	r3, r2
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	61fa      	str	r2, [r7, #28]
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	69bc      	ldr	r4, [r7, #24]
 8003ae2:	0423      	lsls	r3, r4, #16
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	ea40 0402 	orr.w	r4, r0, r2
 8003aea:	613c      	str	r4, [r7, #16]
 8003aec:	430b      	orrs	r3, r1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003af4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003af8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b00:	3307      	adds	r3, #7
 8003b02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b04:	4413      	add	r3, r2
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	60fa      	str	r2, [r7, #12]
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	68bc      	ldr	r4, [r7, #8]
 8003b1a:	0623      	lsls	r3, r4, #24
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	ea40 0402 	orr.w	r4, r0, r2
 8003b22:	603c      	str	r4, [r7, #0]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b2c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003b30:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003b34:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003b36:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b3e:	3308      	adds	r3, #8
 8003b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003b48:	4618      	mov	r0, r3
 8003b4a:	378c      	adds	r7, #140	; 0x8c
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003b52:	4770      	bx	lr

08003b54 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	0801114c 	.word	0x0801114c

08003b70 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	0801115c 	.word	0x0801115c

08003b8c <_ZN3ROS9pub_resetEv>:
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
ros::Publisher reset_pub("reset_fromSTM", &reset);
ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);

/** RESET **/
void ROS::pub_reset(void){
 8003b8c:	b5b0      	push	{r4, r5, r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	MYRESET::receive();
 8003b90:	f7fe f88c 	bl	8001cac <_ZN7MYRESET7receiveEv>
	reset.data = MYRESET::state;
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <_ZN3ROS9pub_resetEv+0x1c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	17da      	asrs	r2, r3, #31
 8003b9a:	461c      	mov	r4, r3
 8003b9c:	4615      	mov	r5, r2
 8003b9e:	4b03      	ldr	r3, [pc, #12]	; (8003bac <_ZN3ROS9pub_resetEv+0x20>)
 8003ba0:	e9c3 4502 	strd	r4, r5, [r3, #8]
//	reset_pub.publish(&reset); // PROBLEMATIC!!!
}
 8003ba4:	bf00      	nop
 8003ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba8:	240007a8 	.word	0x240007a8
 8003bac:	24001948 	.word	0x24001948

08003bb0 <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E>:


/** SCARA **/
void ROS::relay_callback(const std_msgs::Int64 &msgs){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	sc.relay = msgs.data;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	f7fc fd3b 	bl	800063c <__aeabi_l2d>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4905      	ldr	r1, [pc, #20]	; (8003be0 <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E+0x30>)
 8003bcc:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
	sc.run();
 8003bd0:	4803      	ldr	r0, [pc, #12]	; (8003be0 <_ZN3ROS14relay_callbackERKN8std_msgs5Int64E+0x30>)
 8003bd2:	f001 f93b 	bl	8004e4c <_ZN5SCARA3runEv>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	24001a30 	.word	0x24001a30

08003be4 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE>:


/** INTAKE **/
void ROS::intake_callback(const geometry_msgs::Point &msgs){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	INTAKE::tilt = msgs.x;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003bf2:	490a      	ldr	r1, [pc, #40]	; (8003c1c <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x38>)
 8003bf4:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::stretch = msgs.y;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003bfe:	4908      	ldr	r1, [pc, #32]	; (8003c20 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003c00:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::suck = msgs.z;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c0a:	4906      	ldr	r1, [pc, #24]	; (8003c24 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x40>)
 8003c0c:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::run();
 8003c10:	f7fd f8ce 	bl	8000db0 <_ZN6INTAKE3runEv>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	24000268 	.word	0x24000268
 8003c20:	24000270 	.word	0x24000270
 8003c24:	24000278 	.word	0x24000278

08003c28 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:
}



/** CHASSIS -- mecanum **/
void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c36:	490b      	ldr	r1, [pc, #44]	; (8003c64 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003c38:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c42:	4908      	ldr	r1, [pc, #32]	; (8003c64 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003c44:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c4e:	4905      	ldr	r1, [pc, #20]	; (8003c64 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003c50:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003c54:	4803      	ldr	r0, [pc, #12]	; (8003c64 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003c56:	f7fd feed 	bl	8001a34 <_ZN7Mecanum3runEv>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	24000748 	.word	0x24000748

08003c68 <_ZN3ROS11pub_car_velEv>:

void ROS::pub_car_vel(void){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	car_speed.x = mecanum.CAR_Now.Vx;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <_ZN3ROS11pub_car_velEv+0x34>)
 8003c6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c72:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003c74:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8003c78:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <_ZN3ROS11pub_car_velEv+0x34>)
 8003c7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003c80:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8003c84:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <_ZN3ROS11pub_car_velEv+0x34>)
 8003c86:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003c8a:	4905      	ldr	r1, [pc, #20]	; (8003ca0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003c8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <_ZN3ROS11pub_car_velEv+0x38>)
 8003c92:	4804      	ldr	r0, [pc, #16]	; (8003ca4 <_ZN3ROS11pub_car_velEv+0x3c>)
 8003c94:	f7fe fec3 	bl	8002a1e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	24000748 	.word	0x24000748
 8003ca0:	24001918 	.word	0x24001918
 8003ca4:	240019f0 	.word	0x240019f0

08003ca8 <_ZN3ROS5setupEv>:


/** ROS setup and loop **/
void ROS::setup(void){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	nh.initNode();
 8003cac:	4806      	ldr	r0, [pc, #24]	; (8003cc8 <_ZN3ROS5setupEv+0x20>)
 8003cae:	f000 f981 	bl	8003fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 8003cb2:	4906      	ldr	r1, [pc, #24]	; (8003ccc <_ZN3ROS5setupEv+0x24>)
 8003cb4:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <_ZN3ROS5setupEv+0x20>)
 8003cb6:	f000 f9a6 	bl	8004006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.advertise(mecanum_pub);
 8003cba:	4905      	ldr	r1, [pc, #20]	; (8003cd0 <_ZN3ROS5setupEv+0x28>)
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <_ZN3ROS5setupEv+0x20>)
 8003cbe:	f000 f9cd 	bl	800405c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	240007bc 	.word	0x240007bc
 8003ccc:	24001958 	.word	0x24001958
 8003cd0:	240019f0 	.word	0x240019f0

08003cd4 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <_ZN3ROS4loopEv+0x10>)
 8003cda:	f000 f9ef 	bl	80040bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	240007bc 	.word	0x240007bc

08003ce8 <HAL_UART_TxCpltCallback>:


/* UART Communication */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003cf0:	4805      	ldr	r0, [pc, #20]	; (8003d08 <HAL_UART_TxCpltCallback+0x20>)
 8003cf2:	f000 fc54 	bl	800459e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe ffc5 	bl	8002c88 <_ZN13STM32Hardware5flushEv>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	240007bc 	.word	0x240007bc

08003d0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003d14:	4805      	ldr	r0, [pc, #20]	; (8003d2c <HAL_UART_RxCpltCallback+0x20>)
 8003d16:	f000 fc42 	bl	800459e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe ff74 	bl	8002c0a <_ZN13STM32Hardware10reset_rbufEv>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	240007bc 	.word	0x240007bc

08003d30 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d80d      	bhi.n	8003d60 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	fa22 f103 	lsr.w	r1, r2, r3
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	b2ca      	uxtb	r2, r1
 8003d56:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e7ee      	b.n	8003d3e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d811      	bhi.n	8003daa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	440a      	add	r2, r1
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	4611      	mov	r1, r2
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	00d2      	lsls	r2, r2, #3
 8003d98:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3301      	adds	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e7ea      	b.n	8003d80 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	4a04      	ldr	r2, [pc, #16]	; (8003dd4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	080112cc 	.word	0x080112cc

08003dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff ffe8 	bl	8003db8 <_ZN3ros15NodeHandleBase_C1Ev>
 8003de8:	4a45      	ldr	r2, [pc, #276]	; (8003f00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fee2 	bl	8002bbc <_ZN13STM32HardwareC1Ev>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	f241 1314 	movw	r3, #4372	; 0x1114
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fb2d 	bl	800246c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b18      	cmp	r3, #24
 8003e1a:	d80b      	bhi.n	8003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e7f0      	b.n	8003e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b18      	cmp	r3, #24
 8003e3c:	d80a      	bhi.n	8003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003e46:	2100      	movs	r1, #0
 8003e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	e7f1      	b.n	8003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d20a      	bcs.n	8003e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e7f0      	b.n	8003e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d20a      	bcs.n	8003e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4413      	add	r3, r2
 8003e88:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	e7f0      	b.n	8003e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eac:	461a      	mov	r2, r3
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.floats_length = 0;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats = NULL;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    req_param_resp.ints_length = 0;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    spin_timeout_ = 0;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08011270 	.word	0x08011270

08003f04 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	080112b4 	.word	0x080112b4

08003f24 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ffe5 	bl	8003f04 <_ZN3ros11Subscriber_C1Ev>
 8003f3a:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3310      	adds	r3, #16
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe ff4d 	bl	8002de4 <_ZN13geometry_msgs5PointC1Ev>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
  };
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	08011258 	.word	0x08011258

08003f6c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ffc1 	bl	8003f04 <_ZN3ros11Subscriber_C1Ev>
 8003f82:	4a0b      	ldr	r2, [pc, #44]	; (8003fb0 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fc3f 	bl	8003810 <_ZN8std_msgs5Int64C1Ev>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	609a      	str	r2, [r3, #8]
  };
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	08011240 	.word	0x08011240

08003fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fe17 	bl	8002bf4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004010:	2300      	movs	r3, #0
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b18      	cmp	r3, #24
 8004018:	dc19      	bgt.n	800404e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	605a      	str	r2, [r3, #4]
        return true;
 8004042:	2301      	movs	r3, #1
 8004044:	e004      	b.n	8004050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3301      	adds	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e7e2      	b.n	8004014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 800404e:	2300      	movs	r3, #0
  }
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b18      	cmp	r3, #24
 800406e:	dc1e      	bgt.n	80040ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d111      	bne.n	80040a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	60da      	str	r2, [r3, #12]
        return true;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e004      	b.n	80040b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3301      	adds	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e7dd      	b.n	800406a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80040ae:	2300      	movs	r3, #0
  }
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fe7f 	bl	8002dcc <_ZN13STM32Hardware4timeEv>
 80040ce:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d905      	bls.n	80040f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004106:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	429a      	cmp	r2, r3
 800410e:	d906      	bls.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004116:	461a      	mov	r2, r3
 8004118:	2300      	movs	r3, #0
 800411a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8004124:	2b00      	cmp	r3, #0
 8004126:	d014      	beq.n	8004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fe4d 	bl	8002dcc <_ZN13STM32Hardware4timeEv>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 800413e:	429a      	cmp	r2, r3
 8004140:	bf8c      	ite	hi
 8004142:	2301      	movhi	r3, #1
 8004144:	2300      	movls	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 800414c:	f06f 0301 	mvn.w	r3, #1
 8004150:	e221      	b.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe fd68 	bl	8002c2c <_ZN13STM32Hardware4readEv>
 800415c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f2c0 81fa 	blt.w	800455a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416c:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4413      	add	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800417a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004184:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004188:	2b07      	cmp	r3, #7
 800418a:	d12b      	bne.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800419e:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	b2d1      	uxtb	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	460a      	mov	r2, r1
 80041ac:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041ba:	3b01      	subs	r3, #1
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1a4      	bne.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041da:	461a      	mov	r2, r3
 80041dc:	2308      	movs	r3, #8
 80041de:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80041e2:	e79c      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d130      	bne.n	8004254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2bff      	cmp	r3, #255	; 0xff
 80041f6:	d112      	bne.n	800421e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004202:	3301      	adds	r3, #1
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800420a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3314      	adds	r3, #20
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004218:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800421c:	e77f      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fdd2 	bl	8002dcc <_ZN13STM32Hardware4timeEv>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	bf8c      	ite	hi
 8004236:	2301      	movhi	r3, #1
 8004238:	2300      	movls	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	f43f af6e 	beq.w	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 800424e:	f06f 0301 	mvn.w	r3, #1
 8004252:	e1a0      	b.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800425e:	2b01      	cmp	r3, #1
 8004260:	d121      	bne.n	80042a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2bfe      	cmp	r3, #254	; 0xfe
 8004266:	d10b      	bne.n	8004280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004272:	3301      	adds	r3, #1
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800427a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800427e:	e74e      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004286:	461a      	mov	r2, r3
 8004288:	2300      	movs	r3, #0
 800428a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004294:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f af40 	bne.w	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f989 	bl	80045b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80042a4:	e73b      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d120      	bne.n	80042f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ba:	461a      	mov	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c8:	461a      	mov	r2, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80042da:	3301      	adds	r3, #1
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80042f4:	e713      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004300:	2b03      	cmp	r3, #3
 8004302:	d118      	bne.n	8004336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	4413      	add	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800431a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004324:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004328:	3301      	adds	r3, #1
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004330:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004334:	e6f3      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004340:	2b04      	cmp	r3, #4
 8004342:	d11f      	bne.n	8004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800434e:	425a      	negs	r2, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	bf58      	it	pl
 8004356:	4253      	negpl	r3, r2
 8004358:	2bff      	cmp	r3, #255	; 0xff
 800435a:	d10b      	bne.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004362:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004366:	3301      	adds	r3, #1
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800436e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004372:	e6d4      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437a:	461a      	mov	r2, r3
 800437c:	2300      	movs	r3, #0
 800437e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004382:	e6cc      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800438e:	2b05      	cmp	r3, #5
 8004390:	d119      	bne.n	80043c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004398:	461a      	mov	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043aa:	3301      	adds	r3, #1
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043b2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80043c4:	e6ab      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80043d0:	2b06      	cmp	r3, #6
 80043d2:	d123      	bne.n	800441c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043da:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	4413      	add	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	461a      	mov	r2, r3
 80043f6:	2307      	movs	r3, #7
 80043f8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004406:	2b00      	cmp	r3, #0
 8004408:	f47f ae89 	bne.w	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004412:	461a      	mov	r2, r3
 8004414:	2308      	movs	r3, #8
 8004416:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800441a:	e680      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004422:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004426:	2b08      	cmp	r3, #8
 8004428:	f47f ae79 	bne.w	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004440:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004444:	425a      	negs	r2, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	bf58      	it	pl
 800444c:	4253      	negpl	r3, r2
 800444e:	2bff      	cmp	r3, #255	; 0xff
 8004450:	f47f ae65 	bne.w	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d116      	bne.n	8004490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8a7 	bl	80045b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8c2 	bl	80045f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004474:	461a      	mov	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	e082      	b.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800449a:	2b0a      	cmp	r3, #10
 800449c:	d107      	bne.n	80044ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f984 	bl	80047b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80044ac:	e637      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044b8:	2b06      	cmp	r3, #6
 80044ba:	d111      	bne.n	80044e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	f241 1314 	movw	r3, #4372	; 0x1114
 80044c2:	4413      	add	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe f902 	bl	80026d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80044de:	e61e      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044ea:	2b0b      	cmp	r3, #11
 80044ec:	d106      	bne.n	80044fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80044fa:	e610      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004506:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f43f ae02 	beq.w	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004524:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800452e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800453c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004554:	4611      	mov	r1, r2
 8004556:	4798      	blx	r3
    while (true)
 8004558:	e5e1      	b.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 800455a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004562:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004570:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800457c:	4293      	cmp	r3, r2
 800457e:	d909      	bls.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f818 	bl	80045b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458c:	461a      	mov	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8004594:	2300      	movs	r3, #0
  }
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3304      	adds	r3, #4
  }
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80045be:	f107 030c 	add.w	r3, r7, #12
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fbee 	bl	8001da4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f107 020c 	add.w	r2, r7, #12
 80045d2:	210a      	movs	r1, #10
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
    rt_time = hardware_.time();
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fbf5 	bl	8002dcc <_ZN13STM32Hardware4timeEv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80045ea:	bf00      	nop
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80045f2:	b590      	push	{r4, r7, lr}
 80045f4:	b08b      	sub	sp, #44	; 0x2c
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd fcc0 	bl	8001f84 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004604:	2300      	movs	r3, #0
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	2b18      	cmp	r3, #24
 800460c:	dc63      	bgt.n	80046d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d056      	beq.n	80046ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	b29b      	uxth	r3, r3
 8004632:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4608      	mov	r0, r1
 800466e:	4798      	blx	r3
 8004670:	4603      	mov	r3, r0
 8004672:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4608      	mov	r0, r1
 800469c:	4798      	blx	r3
 800469e:	4603      	mov	r3, r0
 80046a0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80046a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681c      	ldr	r4, [r3, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe f9c2 	bl	8002a46 <_ZN3ros9Publisher15getEndpointTypeEv>
 80046c2:	4601      	mov	r1, r0
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	461a      	mov	r2, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	3301      	adds	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
 80046d4:	e798      	b.n	8004608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	2b18      	cmp	r3, #24
 80046de:	dc5f      	bgt.n	80047a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80046e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d053      	beq.n	8004798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f4:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80046f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800470a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004716:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800471a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004722:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4608      	mov	r0, r1
 8004732:	4798      	blx	r3
 8004734:	4603      	mov	r3, r0
 8004736:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800473c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004740:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4608      	mov	r0, r1
 8004758:	4798      	blx	r3
 800475a:	4603      	mov	r3, r0
 800475c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800475e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004762:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681c      	ldr	r4, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800477e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3304      	adds	r3, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4608      	mov	r0, r1
 800478a:	4798      	blx	r3
 800478c:	4601      	mov	r1, r0
 800478e:	f107 030c 	add.w	r3, r7, #12
 8004792:	461a      	mov	r2, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	3301      	adds	r3, #1
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	e79c      	b.n	80046da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 80047ac:	bf00      	nop
 80047ae:	372c      	adds	r7, #44	; 0x2c
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}

080047b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fd faee 	bl	8001da4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe fafd 	bl	8002dcc <_ZN13STM32Hardware4timeEv>
 80047d2:	4602      	mov	r2, r0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fd fb4d 	bl	8001e84 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4916      	ldr	r1, [pc, #88]	; (8004848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80047f0:	fba1 1303 	umull	r1, r3, r1, r3
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	4413      	add	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004800:	fba3 0302 	umull	r0, r3, r3, r2
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800480a:	fb00 f303 	mul.w	r3, r0, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	4a0e      	ldr	r2, [pc, #56]	; (800484c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	440b      	add	r3, r1
 8004818:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f8aa 	bl	800497c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe facd 	bl	8002dcc <_ZN13STM32Hardware4timeEv>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	10624dd3 	.word	0x10624dd3
 800484c:	000f4240 	.word	0x000f4240

08004850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b63      	cmp	r3, #99	; 0x63
 8004860:	dd0b      	ble.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800486c:	f083 0301 	eor.w	r3, r3, #1
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004876:	2300      	movs	r3, #0
 8004878:	e079      	b.n	800496e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8004886:	3207      	adds	r2, #7
 8004888:	4611      	mov	r1, r2
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
 800488e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	22ff      	movs	r2, #255	; 0xff
 8004894:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22fe      	movs	r2, #254	; 0xfe
 800489c:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 80048c6:	4413      	add	r3, r2
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	b21b      	sxth	r3, r3
 80048e2:	121b      	asrs	r3, r3, #8
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80048f2:	2305      	movs	r3, #5
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	3306      	adds	r3, #6
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	dc0d      	bgt.n	800491c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4413      	add	r3, r2
 8004906:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	3301      	adds	r3, #1
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	e7ec      	b.n	80048f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3307      	adds	r3, #7
 8004920:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	425a      	negs	r2, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	bf58      	it	pl
 800492c:	4253      	negpl	r3, r2
 800492e:	b2da      	uxtb	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	6179      	str	r1, [r7, #20]
 8004936:	43d2      	mvns	r2, r2
 8004938:	b2d1      	uxtb	r1, r2
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	460a      	mov	r2, r1
 8004940:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494a:	dc0a      	bgt.n	8004962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1d18      	adds	r0, r3, #4
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4619      	mov	r1, r3
 800495a:	f7fe f9f1 	bl	8002d40 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	e005      	b.n	800496e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004962:	4905      	ldr	r1, [pc, #20]	; (8004978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f849 	bl	80049fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	08011180 	.word	0x08011180

0800497c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe fa1e 	bl	8002dcc <_ZN13STM32Hardware4timeEv>
 8004990:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4915      	ldr	r1, [pc, #84]	; (80049f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800499a:	fba1 1303 	umull	r1, r3, r1, r3
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	1e5a      	subs	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 80049b2:	fba3 0302 	umull	r0, r3, r3, r2
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049bc:	fb00 f303 	mul.w	r3, r0, r3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	1aca      	subs	r2, r1, r3
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80049cc:	4413      	add	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f7fb ffda 	bl	800099c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	10624dd3 	.word	0x10624dd3
 80049f4:	000f4240 	.word	0x000f4240
 80049f8:	3b9aca00 	.word	0x3b9aca00

080049fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	2103      	movs	r1, #3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f804 	bl	8004a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	460b      	mov	r3, r1
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004a26:	f107 0314 	add.w	r3, r7, #20
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd fc6e 	bl	800230c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f107 0214 	add.w	r2, r7, #20
 8004a42:	2107      	movs	r1, #7
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	4798      	blx	r3
  }
 8004a48:	bf00      	nop
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <_Z41__static_initialization_and_destruction_0ii>:
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d137      	bne.n	8004ad0 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d132      	bne.n	8004ad0 <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8004a6a:	481b      	ldr	r0, [pc, #108]	; (8004ad8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004a6c:	f7ff f9b4 	bl	8003dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point microswitch;
 8004a70:	481a      	ldr	r0, [pc, #104]	; (8004adc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004a72:	f7fe f9b7 	bl	8002de4 <_ZN13geometry_msgs5PointC1Ev>
geometry_msgs::Point car_speed;
 8004a76:	481a      	ldr	r0, [pc, #104]	; (8004ae0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004a78:	f7fe f9b4 	bl	8002de4 <_ZN13geometry_msgs5PointC1Ev>
std_msgs::Int64 relay;
 8004a7c:	4819      	ldr	r0, [pc, #100]	; (8004ae4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004a7e:	f7fe fec7 	bl	8003810 <_ZN8std_msgs5Int64C1Ev>
std_msgs::Int64 reset;
 8004a82:	4819      	ldr	r0, [pc, #100]	; (8004ae8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004a84:	f7fe fec4 	bl	8003810 <_ZN8std_msgs5Int64C1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004a8c:	4918      	ldr	r1, [pc, #96]	; (8004af0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004a8e:	4819      	ldr	r0, [pc, #100]	; (8004af4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004a90:	f7ff fa48 	bl	8003f24 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> intake_sub("intake_toSTM", ROS::intake_callback);
 8004a94:	2301      	movs	r3, #1
 8004a96:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004a98:	4918      	ldr	r1, [pc, #96]	; (8004afc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004a9a:	4819      	ldr	r0, [pc, #100]	; (8004b00 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004a9c:	f7ff fa42 	bl	8003f24 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int64> relay_sub("relay_toSTM", ROS::relay_callback);
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004aa4:	4918      	ldr	r1, [pc, #96]	; (8004b08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004aa6:	4819      	ldr	r0, [pc, #100]	; (8004b0c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004aa8:	f7ff fa60 	bl	8003f6c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8004aac:	2300      	movs	r3, #0
 8004aae:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004ab0:	4917      	ldr	r1, [pc, #92]	; (8004b10 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004ab2:	4818      	ldr	r0, [pc, #96]	; (8004b14 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004ab4:	f7fd ff9c 	bl	80029f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher reset_pub("reset_fromSTM", &reset);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004abc:	4916      	ldr	r1, [pc, #88]	; (8004b18 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004abe:	4817      	ldr	r0, [pc, #92]	; (8004b1c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004ac0:	f7fd ff96 	bl	80029f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004ac8:	4915      	ldr	r1, [pc, #84]	; (8004b20 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004aca:	4816      	ldr	r0, [pc, #88]	; (8004b24 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004acc:	f7fd ff90 	bl	80029f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	240007bc 	.word	0x240007bc
 8004adc:	240018f8 	.word	0x240018f8
 8004ae0:	24001918 	.word	0x24001918
 8004ae4:	24001938 	.word	0x24001938
 8004ae8:	24001948 	.word	0x24001948
 8004aec:	08003c29 	.word	0x08003c29
 8004af0:	080111bc 	.word	0x080111bc
 8004af4:	24001958 	.word	0x24001958
 8004af8:	08003be5 	.word	0x08003be5
 8004afc:	080111cc 	.word	0x080111cc
 8004b00:	24001990 	.word	0x24001990
 8004b04:	08003bb1 	.word	0x08003bb1
 8004b08:	080111dc 	.word	0x080111dc
 8004b0c:	240019c8 	.word	0x240019c8
 8004b10:	080111e8 	.word	0x080111e8
 8004b14:	240019f0 	.word	0x240019f0
 8004b18:	080111f8 	.word	0x080111f8
 8004b1c:	24001a04 	.word	0x24001a04
 8004b20:	08011208 	.word	0x08011208
 8004b24:	24001a18 	.word	0x24001a18

08004b28 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3310      	adds	r3, #16
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe ff08 	bl	800394e <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	3210      	adds	r2, #16
 8004b46:	4610      	mov	r0, r2
 8004b48:	4798      	blx	r3
  }
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3310      	adds	r3, #16
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fe ffec 	bl	8003b54 <_ZN8std_msgs5Int647getTypeEv>
 8004b7c:	4603      	mov	r3, r0
  }
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3310      	adds	r3, #16
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe ffec 	bl	8003b70 <_ZN8std_msgs5Int646getMD5Ev>
 8004b98:	4603      	mov	r3, r0
  }
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3310      	adds	r3, #16
 8004bb0:	6839      	ldr	r1, [r7, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fab1 	bl	800311a <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	3210      	adds	r2, #16
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4798      	blx	r3
  }
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3310      	adds	r3, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fdf1 	bl	80037d8 <_ZN13geometry_msgs5Point7getTypeEv>
 8004bf6:	4603      	mov	r3, r0
  }
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3310      	adds	r3, #16
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe fdf1 	bl	80037f4 <_ZN13geometry_msgs5Point6getMD5Ev>
 8004c12:	4603      	mov	r3, r0
  }
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
    return configured_;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <_GLOBAL__sub_I_nh>:
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c42:	2001      	movs	r0, #1
 8004c44:	f7ff ff04 	bl	8004a50 <_Z41__static_initialization_and_destruction_0ii>
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	0000      	movs	r0, r0
 8004c4c:	0000      	movs	r0, r0
	...

08004c50 <_ZN5SCARAC1Ev>:
#define AIR_PORT GPIOA
#define AIR_PIN GPIO_PIN_5

extern TIM_HandleTypeDef htim23;

struct SCARA{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9c1 2300 	strd	r2, r3, [r1]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	4b4e      	ldr	r3, [pc, #312]	; (8004da8 <_ZN5SCARAC1Ev+0x158>)
 8004c6e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	a346      	add	r3, pc, #280	; (adr r3, 8004d90 <_ZN5SCARAC1Ev+0x140>)
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	a340      	add	r3, pc, #256	; (adr r3, 8004d90 <_ZN5SCARAC1Ev+0x140>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	4b41      	ldr	r3, [pc, #260]	; (8004dac <_ZN5SCARAC1Ev+0x15c>)
 8004ca6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <_ZN5SCARAC1Ev+0x15c>)
 8004cc0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	659a      	str	r2, [r3, #88]	; 0x58
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	679a      	str	r2, [r3, #120]	; 0x78
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	67da      	str	r2, [r3, #124]	; 0x7c
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	a325      	add	r3, pc, #148	; (adr r3, 8004d98 <_ZN5SCARAC1Ev+0x148>)
 8004d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d08:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	a324      	add	r3, pc, #144	; (adr r3, 8004da0 <_ZN5SCARAC1Ev+0x150>)
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	a321      	add	r3, pc, #132	; (adr r3, 8004da0 <_ZN5SCARAC1Ev+0x150>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <_ZN5SCARAC1Ev+0x158>)
 8004d68:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w
 8004d90:	00000000 	.word	0x00000000
 8004d94:	4070e000 	.word	0x4070e000
 8004d98:	00000000 	.word	0x00000000
 8004d9c:	40622000 	.word	0x40622000
 8004da0:	00000000 	.word	0x00000000
 8004da4:	40a00400 	.word	0x40a00400
 8004da8:	c0490000 	.word	0xc0490000
 8004dac:	c0668000 	.word	0xc0668000

08004db0 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t>:
#include "scara.h"

SCARA sc;

void SCARA::trinary(double function, GPIO_TypeDef* a_port,
		uint16_t a_pin, GPIO_TypeDef* b_port, uint16_t b_pin){ \
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6178      	str	r0, [r7, #20]
 8004db8:	ed87 0b02 	vstr	d0, [r7, #8]
 8004dbc:	6139      	str	r1, [r7, #16]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	80fb      	strh	r3, [r7, #6]
	if (function == 1) {
 8004dc4:	ed97 7b02 	vldr	d7, [r7, #8]
 8004dc8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004dcc:	eeb4 7b46 	vcmp.f64	d7, d6
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	d10c      	bne.n	8004df0 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x40>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6938      	ldr	r0, [r7, #16]
 8004dde:	f005 f81d 	bl	8009e1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_SET);
 8004de2:	8c3b      	ldrh	r3, [r7, #32]
 8004de4:	2201      	movs	r2, #1
 8004de6:	4619      	mov	r1, r3
 8004de8:	6838      	ldr	r0, [r7, #0]
 8004dea:	f005 f817 	bl	8009e1c <HAL_GPIO_WritePin>
	}
	else if (function == -1) {
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
	}
}
 8004dee:	e028      	b.n	8004e42 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x92>
	else if (function == 0) {
 8004df0:	ed97 7b02 	vldr	d7, [r7, #8]
 8004df4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	d10c      	bne.n	8004e18 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x68>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_RESET);
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	2200      	movs	r2, #0
 8004e02:	4619      	mov	r1, r3
 8004e04:	6938      	ldr	r0, [r7, #16]
 8004e06:	f005 f809 	bl	8009e1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8004e0a:	8c3b      	ldrh	r3, [r7, #32]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6838      	ldr	r0, [r7, #0]
 8004e12:	f005 f803 	bl	8009e1c <HAL_GPIO_WritePin>
}
 8004e16:	e014      	b.n	8004e42 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x92>
	else if (function == -1) {
 8004e18:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e1c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8004e20:	eeb4 7b46 	vcmp.f64	d7, d6
 8004e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e28:	d10b      	bne.n	8004e42 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t+0x92>
		HAL_GPIO_WritePin(a_port, a_pin, GPIO_PIN_SET);
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6938      	ldr	r0, [r7, #16]
 8004e32:	f004 fff3 	bl	8009e1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_port, b_pin, GPIO_PIN_RESET);
 8004e36:	8c3b      	ldrh	r3, [r7, #32]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6838      	ldr	r0, [r7, #0]
 8004e3e:	f004 ffed 	bl	8009e1c <HAL_GPIO_WritePin>
}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <_ZN5SCARA3runEv>:


void SCARA::run(){
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	6078      	str	r0, [r7, #4]
	/* relay */
	sc.trinary(relay, VALVE_PORT, VALVE_PIN, AIR_PORT, AIR_PIN);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <_ZN5SCARA3runEv+0x30>)
 8004e60:	2210      	movs	r2, #16
 8004e62:	4906      	ldr	r1, [pc, #24]	; (8004e7c <_ZN5SCARA3runEv+0x30>)
 8004e64:	eeb0 0b47 	vmov.f64	d0, d7
 8004e68:	4805      	ldr	r0, [pc, #20]	; (8004e80 <_ZN5SCARA3runEv+0x34>)
 8004e6a:	f7ff ffa1 	bl	8004db0 <_ZN5SCARA7trinaryEdP12GPIO_TypeDeftS1_t>

	/* arm */
	sc.seize();
 8004e6e:	4804      	ldr	r0, [pc, #16]	; (8004e80 <_ZN5SCARA3runEv+0x34>)
 8004e70:	f000 f80a 	bl	8004e88 <_ZN5SCARA5seizeEv>
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	58020000 	.word	0x58020000
 8004e80:	24001a30 	.word	0x24001a30
 8004e84:	00000000 	.word	0x00000000

08004e88 <_ZN5SCARA5seizeEv>:

void SCARA::seize(){
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	//'update' is used by ST
	if (update == 1){
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d115      	bne.n	8004ec6 <_ZN5SCARA5seizeEv+0x3e>
		x = ST_test_x;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	e9c1 2300 	strd	r2, r3, [r1]
		y = ST_test_y;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	e9c1 2302 	strd	r2, r3, [r1, #8]
		flag = ST_test_flag;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		update = 0;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	}

	phi = count_phi(x,y);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	ed93 7b00 	vldr	d7, [r3]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ed2:	eeb0 1b46 	vmov.f64	d1, d6
 8004ed6:	eeb0 0b47 	vmov.f64	d0, d7
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fdf4 	bl	8005ac8 <_ZN5SCARA9count_phiEdd>
 8004ee0:	eeb0 7b40 	vmov.f64	d7, d0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	ed83 7b04 	vstr	d7, [r3, #16]
	at = count_atan2(x,y);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	ed93 7b00 	vldr	d7, [r3]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ef6:	eeb0 1b46 	vmov.f64	d1, d6
 8004efa:	eeb0 0b47 	vmov.f64	d0, d7
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fca6 	bl	8005850 <_ZN5SCARA11count_atan2Edd>
 8004f04:	eeb0 7b40 	vmov.f64	d7, d0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	ed83 7b06 	vstr	d7, [r3, #24]
	if (count_atan2(x,y) < 0)at += 360;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	ed93 7b00 	vldr	d7, [r3]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	ed93 6b02 	vldr	d6, [r3, #8]
 8004f1a:	eeb0 1b46 	vmov.f64	d1, d6
 8004f1e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fc94 	bl	8005850 <_ZN5SCARA11count_atan2Edd>
 8004f28:	eeb0 7b40 	vmov.f64	d7, d0
 8004f2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	bf4c      	ite	mi
 8004f36:	2301      	movmi	r3, #1
 8004f38:	2300      	movpl	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <_ZN5SCARA5seizeEv+0xcc>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	ed93 7b06 	vldr	d7, [r3, #24]
 8004f46:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 80051c0 <_ZN5SCARA5seizeEv+0x338>
 8004f4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	ed83 7b06 	vstr	d7, [r3, #24]
	if (at + phi <= 250){
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	ed93 6b06 	vldr	d6, [r3, #24]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	ed93 7b04 	vldr	d7, [r3, #16]
 8004f60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f64:	ed9f 6b98 	vldr	d6, [pc, #608]	; 80051c8 <_ZN5SCARA5seizeEv+0x340>
 8004f68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	d81f      	bhi.n	8004fb2 <_ZN5SCARA5seizeEv+0x12a>
		angle_goal_1 = at + phi;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	ed93 6b06 	vldr	d6, [r3, #24]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	ed93 7b04 	vldr	d7, [r3, #16]
 8004f7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	ed83 7b08 	vstr	d7, [r3, #32]
		angle_goal_2 = -count_theta2(x,y);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	ed93 7b00 	vldr	d7, [r3]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	ed93 6b02 	vldr	d6, [r3, #8]
 8004f94:	eeb0 1b46 	vmov.f64	d1, d6
 8004f98:	eeb0 0b47 	vmov.f64	d0, d7
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fd37 	bl	8005a10 <_ZN5SCARA12count_theta2Edd>
 8004fa2:	eeb0 7b40 	vmov.f64	d7, d0
 8004fa6:	eeb1 7b47 	vneg.f64	d7, d7
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
 8004fb0:	e02b      	b.n	800500a <_ZN5SCARA5seizeEv+0x182>
	}
	else if(at + phi > 250){
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	ed93 6b06 	vldr	d6, [r3, #24]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	ed93 7b04 	vldr	d7, [r3, #16]
 8004fbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fc2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 80051c8 <_ZN5SCARA5seizeEv+0x340>
 8004fc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fce:	dd1c      	ble.n	800500a <_ZN5SCARA5seizeEv+0x182>
		angle_goal_1 = at - phi;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	ed93 6b06 	vldr	d6, [r3, #24]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	ed93 7b04 	vldr	d7, [r3, #16]
 8004fdc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	ed83 7b08 	vstr	d7, [r3, #32]
		angle_goal_2 = count_theta2(x,y);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	ed93 7b00 	vldr	d7, [r3]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ff2:	eeb0 1b46 	vmov.f64	d1, d6
 8004ff6:	eeb0 0b47 	vmov.f64	d0, d7
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fd08 	bl	8005a10 <_ZN5SCARA12count_theta2Edd>
 8005000:	eeb0 7b40 	vmov.f64	d7, d0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	}

	 if (air_pressure == 1)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_RESET);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <_ZN5SCARA5seizeEv+0x198>
 8005014:	2200      	movs	r2, #0
 8005016:	2120      	movs	r1, #32
 8005018:	4873      	ldr	r0, [pc, #460]	; (80051e8 <_ZN5SCARA5seizeEv+0x360>)
 800501a:	f004 feff 	bl	8009e1c <HAL_GPIO_WritePin>
 800501e:	e009      	b.n	8005034 <_ZN5SCARA5seizeEv+0x1ac>
	 else if (air_pressure == 0)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_SET);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <_ZN5SCARA5seizeEv+0x1ac>
 800502a:	2201      	movs	r2, #1
 800502c:	2120      	movs	r1, #32
 800502e:	486e      	ldr	r0, [pc, #440]	; (80051e8 <_ZN5SCARA5seizeEv+0x360>)
 8005030:	f004 fef4 	bl	8009e1c <HAL_GPIO_WritePin>

	 if (valve_switch == 1)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_RESET);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800503a:	2b01      	cmp	r3, #1
 800503c:	d105      	bne.n	800504a <_ZN5SCARA5seizeEv+0x1c2>
 800503e:	2200      	movs	r2, #0
 8005040:	2110      	movs	r1, #16
 8005042:	4869      	ldr	r0, [pc, #420]	; (80051e8 <_ZN5SCARA5seizeEv+0x360>)
 8005044:	f004 feea 	bl	8009e1c <HAL_GPIO_WritePin>
 8005048:	e009      	b.n	800505e <_ZN5SCARA5seizeEv+0x1d6>
	 else if (valve_switch == 0)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_SET);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <_ZN5SCARA5seizeEv+0x1d6>
 8005054:	2201      	movs	r2, #1
 8005056:	2110      	movs	r1, #16
 8005058:	4863      	ldr	r0, [pc, #396]	; (80051e8 <_ZN5SCARA5seizeEv+0x360>)
 800505a:	f004 fedf 	bl	8009e1c <HAL_GPIO_WritePin>

	 pulse_goal = 600 + 10 * servo_angle;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8005064:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005068:	ee27 7b06 	vmul.f64	d7, d7, d6
 800506c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80051d0 <_ZN5SCARA5seizeEv+0x348>
 8005070:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	 if (servo_angle == 145)__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8005080:	ed9f 6b55 	vldr	d6, [pc, #340]	; 80051d8 <_ZN5SCARA5seizeEv+0x350>
 8005084:	eeb4 7b46 	vcmp.f64	d7, d6
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	d109      	bne.n	80050a2 <_ZN5SCARA5seizeEv+0x21a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8005094:	4b55      	ldr	r3, [pc, #340]	; (80051ec <_ZN5SCARA5seizeEv+0x364>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800509c:	ee17 2a90 	vmov	r2, s15
 80050a0:	635a      	str	r2, [r3, #52]	; 0x34
	 if (pulse_now != pulse_goal){
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80050ae:	eeb4 6b47 	vcmp.f64	d6, d7
 80050b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b6:	d050      	beq.n	800515a <_ZN5SCARA5seizeEv+0x2d2>
	  while (pulse_now < pulse_goal){
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80050c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050cc:	d400      	bmi.n	80050d0 <_ZN5SCARA5seizeEv+0x248>
 80050ce:	e017      	b.n	8005100 <_ZN5SCARA5seizeEv+0x278>
	   pulse_now ++;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80050d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80050da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	   HAL_Delay(0.3);
 80050e4:	2000      	movs	r0, #0
 80050e6:	f001 fd6b 	bl	8006bc0 <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80050f0:	4b3e      	ldr	r3, [pc, #248]	; (80051ec <_ZN5SCARA5seizeEv+0x364>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80050f8:	ee17 2a90 	vmov	r2, s15
 80050fc:	635a      	str	r2, [r3, #52]	; 0x34
	  while (pulse_now < pulse_goal){
 80050fe:	e7db      	b.n	80050b8 <_ZN5SCARA5seizeEv+0x230>
	  }
	  while (pulse_now > pulse_goal){
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800510c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005114:	dd17      	ble.n	8005146 <_ZN5SCARA5seizeEv+0x2be>
	   pulse_now --;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 800511c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005120:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	   HAL_Delay(0.3);
 800512a:	2000      	movs	r0, #0
 800512c:	f001 fd48 	bl	8006bc0 <HAL_Delay>
	   __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8005136:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <_ZN5SCARA5seizeEv+0x364>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800513e:	ee17 2a90 	vmov	r2, s15
 8005142:	635a      	str	r2, [r3, #52]	; 0x34
	  while (pulse_now > pulse_goal){
 8005144:	e7dc      	b.n	8005100 <_ZN5SCARA5seizeEv+0x278>
	  }
	  input_check = 1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  pulse_now = pulse_goal;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	 }


	 if (angle_goal_1 != angle_now_1) {
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	ed93 6b08 	vldr	d6, [r3, #32]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005166:	eeb4 6b47 	vcmp.f64	d6, d7
 800516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516e:	f000 8088 	beq.w	8005282 <_ZN5SCARA5seizeEv+0x3fa>

	  step_1 = (double)(angle_goal_1 - angle_now_1)*4 *8 / 0.9;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	ed93 6b08 	vldr	d6, [r3, #32]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800517e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005182:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005186:	ee27 7b06 	vmul.f64	d7, d7, d6
 800518a:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 800518e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005192:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80051e0 <_ZN5SCARA5seizeEv+0x358>
 8005196:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	  if (step_1 >= 0) {
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80051a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80051aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ae:	db21      	blt.n	80051f4 <_ZN5SCARA5seizeEv+0x36c>
	   HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 80051b0:	2201      	movs	r2, #1
 80051b2:	2120      	movs	r1, #32
 80051b4:	480e      	ldr	r0, [pc, #56]	; (80051f0 <_ZN5SCARA5seizeEv+0x368>)
 80051b6:	f004 fe31 	bl	8009e1c <HAL_GPIO_WritePin>
 80051ba:	e030      	b.n	800521e <_ZN5SCARA5seizeEv+0x396>
 80051bc:	f3af 8000 	nop.w
 80051c0:	00000000 	.word	0x00000000
 80051c4:	40768000 	.word	0x40768000
 80051c8:	00000000 	.word	0x00000000
 80051cc:	406f4000 	.word	0x406f4000
 80051d0:	00000000 	.word	0x00000000
 80051d4:	4082c000 	.word	0x4082c000
 80051d8:	00000000 	.word	0x00000000
 80051dc:	40622000 	.word	0x40622000
 80051e0:	cccccccd 	.word	0xcccccccd
 80051e4:	3feccccc 	.word	0x3feccccc
 80051e8:	58020000 	.word	0x58020000
 80051ec:	24000578 	.word	0x24000578
 80051f0:	58020800 	.word	0x58020800
	  }else if (step_1 < 0) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80051fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80051fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005202:	d50c      	bpl.n	800521e <_ZN5SCARA5seizeEv+0x396>
	   step_1 = -step_1;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800520a:	eeb1 7b47 	vneg.f64	d7, d7
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	   HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_RESET);
 8005214:	2200      	movs	r2, #0
 8005216:	2120      	movs	r1, #32
 8005218:	4899      	ldr	r0, [pc, #612]	; (8005480 <_ZN5SCARA5seizeEv+0x5f8>)
 800521a:	f004 fdff 	bl	8009e1c <HAL_GPIO_WritePin>
	  }
	  if (state == 1)step_1 *= 1.02; //undetermined
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005224:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005228:	eeb4 7b46 	vcmp.f64	d7, d6
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	d109      	bne.n	8005246 <_ZN5SCARA5seizeEv+0x3be>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005238:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005450 <_ZN5SCARA5seizeEv+0x5c8>
 800523c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  if (state == 2)step_1 *= 1.05; //undetermined
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800524c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005250:	eeb4 7b46 	vcmp.f64	d7, d6
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	d109      	bne.n	800526e <_ZN5SCARA5seizeEv+0x3e6>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005260:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8005458 <_ZN5SCARA5seizeEv+0x5d0>
 8005264:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  input_check = 1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  angle_now_1 = angle_goal_1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	 }

	 if (angle_goal_2 != angle_now_2) {
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800528e:	eeb4 6b47 	vcmp.f64	d6, d7
 8005292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005296:	f000 80a7 	beq.w	80053e8 <_ZN5SCARA5seizeEv+0x560>

	  step_2 = (angle_goal_2 - angle_now_2)*8 / 0.9;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80052a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80052aa:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80052ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80052b2:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8005460 <_ZN5SCARA5seizeEv+0x5d8>
 80052b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

	  if (angle_now_2 >= 180 && angle_goal_2 < 180){
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80052c6:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8005468 <_ZN5SCARA5seizeEv+0x5e0>
 80052ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	db14      	blt.n	80052fe <_ZN5SCARA5seizeEv+0x476>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80052da:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8005468 <_ZN5SCARA5seizeEv+0x5e0>
 80052de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e6:	d50a      	bpl.n	80052fe <_ZN5SCARA5seizeEv+0x476>
	   step_2 += 3200;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80052ee:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8005470 <_ZN5SCARA5seizeEv+0x5e8>
 80052f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
 80052fc:	e01d      	b.n	800533a <_ZN5SCARA5seizeEv+0x4b2>
	  }else if (angle_now_2 < 180 && angle_goal_2 >= 180){
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005304:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8005468 <_ZN5SCARA5seizeEv+0x5e0>
 8005308:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800530c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005310:	d513      	bpl.n	800533a <_ZN5SCARA5seizeEv+0x4b2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8005318:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8005468 <_ZN5SCARA5seizeEv+0x5e0>
 800531c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	db09      	blt.n	800533a <_ZN5SCARA5seizeEv+0x4b2>
	   step_2 -= 3200;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800532c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005470 <_ZN5SCARA5seizeEv+0x5e8>
 8005330:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	  }

	  if (step_2 >= 0) {
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005340:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005348:	db06      	blt.n	8005358 <_ZN5SCARA5seizeEv+0x4d0>
	   HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_SET);
 800534a:	2201      	movs	r2, #1
 800534c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005350:	484c      	ldr	r0, [pc, #304]	; (8005484 <_ZN5SCARA5seizeEv+0x5fc>)
 8005352:	f004 fd63 	bl	8009e1c <HAL_GPIO_WritePin>
 8005356:	e015      	b.n	8005384 <_ZN5SCARA5seizeEv+0x4fc>
	  }else if (step_2 < 0) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800535e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005366:	d50d      	bpl.n	8005384 <_ZN5SCARA5seizeEv+0x4fc>
	   step_2 = -step_2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800536e:	eeb1 7b47 	vneg.f64	d7, d7
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	   HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800537e:	4841      	ldr	r0, [pc, #260]	; (8005484 <_ZN5SCARA5seizeEv+0x5fc>)
 8005380:	f004 fd4c 	bl	8009e1c <HAL_GPIO_WritePin>
	  }
	  if (state == 1)step_2 *= 1.02; //undetermined
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800538a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800538e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	d109      	bne.n	80053ac <_ZN5SCARA5seizeEv+0x524>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800539e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8005450 <_ZN5SCARA5seizeEv+0x5c8>
 80053a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	  if (state == 2)step_2 *= 1.05; //undetermined
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80053b2:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80053b6:	eeb4 7b46 	vcmp.f64	d7, d6
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	d109      	bne.n	80053d4 <_ZN5SCARA5seizeEv+0x54c>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80053c6:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8005458 <_ZN5SCARA5seizeEv+0x5d0>
 80053ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	  input_check = 1;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  angle_now_2 = angle_goal_2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	 }

	 if (high_goal != high_now) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80053f4:	eeb4 6b47 	vcmp.f64	d6, d7
 80053f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fc:	d064      	beq.n	80054c8 <_ZN5SCARA5seizeEv+0x640>

	  step_3 = (high_goal - high_now)*200 *8 / 6;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800540a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800540e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8005478 <_ZN5SCARA5seizeEv+0x5f0>
 8005412:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005416:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 800541a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800541e:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8005422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68

	  if (step_3 >= 0) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005432:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543a:	db25      	blt.n	8005488 <_ZN5SCARA5seizeEv+0x600>
	   HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 800543c:	2201      	movs	r2, #1
 800543e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005442:	4810      	ldr	r0, [pc, #64]	; (8005484 <_ZN5SCARA5seizeEv+0x5fc>)
 8005444:	f004 fcea 	bl	8009e1c <HAL_GPIO_WritePin>
 8005448:	e034      	b.n	80054b4 <_ZN5SCARA5seizeEv+0x62c>
 800544a:	bf00      	nop
 800544c:	f3af 8000 	nop.w
 8005450:	851eb852 	.word	0x851eb852
 8005454:	3ff051eb 	.word	0x3ff051eb
 8005458:	cccccccd 	.word	0xcccccccd
 800545c:	3ff0cccc 	.word	0x3ff0cccc
 8005460:	cccccccd 	.word	0xcccccccd
 8005464:	3feccccc 	.word	0x3feccccc
 8005468:	00000000 	.word	0x00000000
 800546c:	40668000 	.word	0x40668000
 8005470:	00000000 	.word	0x00000000
 8005474:	40a90000 	.word	0x40a90000
 8005478:	00000000 	.word	0x00000000
 800547c:	40690000 	.word	0x40690000
 8005480:	58020800 	.word	0x58020800
 8005484:	58021400 	.word	0x58021400
	  }else if (step_3 < 0) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800548e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005496:	d50d      	bpl.n	80054b4 <_ZN5SCARA5seizeEv+0x62c>
	   step_3 = -step_3;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800549e:	eeb1 7b47 	vneg.f64	d7, d7
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	   HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_RESET);
 80054a8:	2200      	movs	r2, #0
 80054aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054ae:	48ac      	ldr	r0, [pc, #688]	; (8005760 <_ZN5SCARA5seizeEv+0x8d8>)
 80054b0:	f004 fcb4 	bl	8009e1c <HAL_GPIO_WritePin>
	  }
	  input_check = 1;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	  high_now = high_goal;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	 }

	 if (step_1 < 1 && step_1 > 0)step_1 = 1;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80054ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	d50d      	bpl.n	80054f8 <_ZN5SCARA5seizeEv+0x670>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80054e2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ea:	dd05      	ble.n	80054f8 <_ZN5SCARA5seizeEv+0x670>
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	4b9c      	ldr	r3, [pc, #624]	; (8005764 <_ZN5SCARA5seizeEv+0x8dc>)
 80054f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	 if (step_2 < 1 && step_2 > 0)step_2 = 1;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80054fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005502:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	d50d      	bpl.n	8005528 <_ZN5SCARA5seizeEv+0x6a0>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005512:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	dd05      	ble.n	8005528 <_ZN5SCARA5seizeEv+0x6a0>
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	4b90      	ldr	r3, [pc, #576]	; (8005764 <_ZN5SCARA5seizeEv+0x8dc>)
 8005524:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	 if (step_3 < 1 && step_3 > 0)step_3 = 1;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800552e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005532:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553a:	d50d      	bpl.n	8005558 <_ZN5SCARA5seizeEv+0x6d0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005542:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	dd05      	ble.n	8005558 <_ZN5SCARA5seizeEv+0x6d0>
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	4b84      	ldr	r3, [pc, #528]	; (8005764 <_ZN5SCARA5seizeEv+0x8dc>)
 8005554:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68


	 if (x == 0 && y == -50 && flag == 1){
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	ed93 7b00 	vldr	d7, [r3]
 800555e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	d135      	bne.n	80055d4 <_ZN5SCARA5seizeEv+0x74c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	ed93 7b02 	vldr	d7, [r3, #8]
 800556e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8005740 <_ZN5SCARA5seizeEv+0x8b8>
 8005572:	eeb4 7b46 	vcmp.f64	d7, d6
 8005576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557a:	d12b      	bne.n	80055d4 <_ZN5SCARA5seizeEv+0x74c>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d126      	bne.n	80055d4 <_ZN5SCARA5seizeEv+0x74c>
	  step_1 = 120;
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	4b76      	ldr	r3, [pc, #472]	; (8005768 <_ZN5SCARA5seizeEv+0x8e0>)
 800558e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 8005592:	2201      	movs	r2, #1
 8005594:	2120      	movs	r1, #32
 8005596:	4875      	ldr	r0, [pc, #468]	; (800576c <_ZN5SCARA5seizeEv+0x8e4>)
 8005598:	f004 fc40 	bl	8009e1c <HAL_GPIO_WritePin>
	  step_2 = 30;
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	4b73      	ldr	r3, [pc, #460]	; (8005770 <_ZN5SCARA5seizeEv+0x8e8>)
 80055a4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	  HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 80055a8:	2200      	movs	r2, #0
 80055aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055ae:	486c      	ldr	r0, [pc, #432]	; (8005760 <_ZN5SCARA5seizeEv+0x8d8>)
 80055b0:	f004 fc34 	bl	8009e1c <HAL_GPIO_WritePin>
	  step_3 = 2000;
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	f04f 0200 	mov.w	r2, #0
 80055ba:	4b6e      	ldr	r3, [pc, #440]	; (8005774 <_ZN5SCARA5seizeEv+0x8ec>)
 80055bc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	  HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 80055c0:	2201      	movs	r2, #1
 80055c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055c6:	4866      	ldr	r0, [pc, #408]	; (8005760 <_ZN5SCARA5seizeEv+0x8d8>)
 80055c8:	f004 fc28 	bl	8009e1c <HAL_GPIO_WritePin>
	  flag = 5;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2205      	movs	r2, #5
 80055d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 }
	 if (valve_switch == 1){
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d107      	bne.n	80055ee <_ZN5SCARA5seizeEv+0x766>
	  HAL_Delay(2000);
 80055de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80055e2:	f001 faed 	bl	8006bc0 <HAL_Delay>
	  valve_switch = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	 }


	 if (step_1 == 0 && step_2 == 0 && step_3 == 0 && input_check == 1){
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80055f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fc:	f040 8101 	bne.w	8005802 <_ZN5SCARA5seizeEv+0x97a>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005606:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800560e:	f040 80f8 	bne.w	8005802 <_ZN5SCARA5seizeEv+0x97a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005618:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005620:	f040 80ef 	bne.w	8005802 <_ZN5SCARA5seizeEv+0x97a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800562a:	2b01      	cmp	r3, #1
 800562c:	f040 80e9 	bne.w	8005802 <_ZN5SCARA5seizeEv+0x97a>

	  if (flag == 2){
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005636:	2b02      	cmp	r3, #2
 8005638:	d104      	bne.n	8005644 <_ZN5SCARA5seizeEv+0x7bc>
	   flag = 5;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2205      	movs	r2, #5
 800563e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005642:	e0da      	b.n	80057fa <_ZN5SCARA5seizeEv+0x972>
	  }
	  else if (flag == 3){
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800564a:	2b03      	cmp	r3, #3
 800564c:	f040 80ad 	bne.w	80057aa <_ZN5SCARA5seizeEv+0x922>
	   air_pressure = 1, valve_switch = 0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	   if (high_state == 0){
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d147      	bne.n	80056f8 <_ZN5SCARA5seizeEv+0x870>
	    if (state == 0)servo_angle = 20,state++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800566e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005676:	d110      	bne.n	800569a <_ZN5SCARA5seizeEv+0x812>
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <_ZN5SCARA5seizeEv+0x8f0>)
 8005680:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 800568a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800568e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
 8005698:	e02a      	b.n	80056f0 <_ZN5SCARA5seizeEv+0x868>
	    else if (state == 1)servo_angle = 270, state++;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80056a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056a4:	eeb4 7b46 	vcmp.f64	d7, d6
 80056a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ac:	d110      	bne.n	80056d0 <_ZN5SCARA5seizeEv+0x848>
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	a325      	add	r3, pc, #148	; (adr r3, 8005748 <_ZN5SCARA5seizeEv+0x8c0>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80056c0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
 80056ce:	e00f      	b.n	80056f0 <_ZN5SCARA5seizeEv+0x868>
	    else if (state == 2)servo_angle = 145;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80056d6:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80056da:	eeb4 7b46 	vcmp.f64	d7, d6
 80056de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e2:	d105      	bne.n	80056f0 <_ZN5SCARA5seizeEv+0x868>
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	a31a      	add	r3, pc, #104	; (adr r3, 8005750 <_ZN5SCARA5seizeEv+0x8c8>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	    high_state = 1;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	67da      	str	r2, [r3, #124]	; 0x7c
 80056f6:	e080      	b.n	80057fa <_ZN5SCARA5seizeEv+0x972>
	   }
	   else if (high_state == 1){
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d109      	bne.n	8005714 <_ZN5SCARA5seizeEv+0x88c>
	    high_goal = -89;
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	a315      	add	r3, pc, #84	; (adr r3, 8005758 <_ZN5SCARA5seizeEv+0x8d0>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	    high_state = 2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	67da      	str	r2, [r3, #124]	; 0x7c
 8005712:	e072      	b.n	80057fa <_ZN5SCARA5seizeEv+0x972>
	   }
	   else if (high_state == 2){
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005718:	2b02      	cmp	r3, #2
 800571a:	d12f      	bne.n	800577c <_ZN5SCARA5seizeEv+0x8f4>
	    HAL_Delay(2000);
 800571c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005720:	f001 fa4e 	bl	8006bc0 <HAL_Delay>
	    high_goal = 0;
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	    high_state = 3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	67da      	str	r2, [r3, #124]	; 0x7c
 8005738:	e05f      	b.n	80057fa <_ZN5SCARA5seizeEv+0x972>
 800573a:	bf00      	nop
 800573c:	f3af 8000 	nop.w
 8005740:	00000000 	.word	0x00000000
 8005744:	c0490000 	.word	0xc0490000
 8005748:	00000000 	.word	0x00000000
 800574c:	4070e000 	.word	0x4070e000
 8005750:	00000000 	.word	0x00000000
 8005754:	40622000 	.word	0x40622000
 8005758:	00000000 	.word	0x00000000
 800575c:	c0564000 	.word	0xc0564000
 8005760:	58021400 	.word	0x58021400
 8005764:	3ff00000 	.word	0x3ff00000
 8005768:	405e0000 	.word	0x405e0000
 800576c:	58020800 	.word	0x58020800
 8005770:	403e0000 	.word	0x403e0000
 8005774:	409f4000 	.word	0x409f4000
 8005778:	40340000 	.word	0x40340000
	   }
	 else if(high_state == 3 && pulse_now == pulse_goal){
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005780:	2b03      	cmp	r3, #3
 8005782:	d13a      	bne.n	80057fa <_ZN5SCARA5seizeEv+0x972>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	ed93 6b22 	vldr	d6, [r3, #136]	; 0x88
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005790:	eeb4 6b47 	vcmp.f64	d6, d7
 8005794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005798:	d12f      	bne.n	80057fa <_ZN5SCARA5seizeEv+0x972>
	    high_state = 0;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	67da      	str	r2, [r3, #124]	; 0x7c
	    flag = 5;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2205      	movs	r2, #5
 80057a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80057a8:	e027      	b.n	80057fa <_ZN5SCARA5seizeEv+0x972>
	   }
	  }
	 else if (step_1 == 0 && step_2 == 0 && flag == 4){
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80057b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b8:	d11f      	bne.n	80057fa <_ZN5SCARA5seizeEv+0x972>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80057c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c8:	d117      	bne.n	80057fa <_ZN5SCARA5seizeEv+0x972>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d112      	bne.n	80057fa <_ZN5SCARA5seizeEv+0x972>
	   air_pressure = 0;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	   valve_switch = 1;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	   state = 0;
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	   flag = 5;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2205      	movs	r2, #5
 80057f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	  }
	  input_check = 0;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	 }


	 if (step_1 == 0 && step_2 == 0 && step_3 == 0 && flag == 5){
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8005808:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005810:	d118      	bne.n	8005844 <_ZN5SCARA5seizeEv+0x9bc>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8005818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800581c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005820:	d110      	bne.n	8005844 <_ZN5SCARA5seizeEv+0x9bc>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8005828:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800582c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005830:	d108      	bne.n	8005844 <_ZN5SCARA5seizeEv+0x9bc>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005838:	2b05      	cmp	r3, #5
 800583a:	d103      	bne.n	8005844 <_ZN5SCARA5seizeEv+0x9bc>
		 flag = 0;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	 }
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	0000      	movs	r0, r0
	...

08005850 <_ZN5SCARA11count_atan2Edd>:

double SCARA::count_atan2(double x, double y)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	; 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6178      	str	r0, [r7, #20]
 8005858:	ed87 0b02 	vstr	d0, [r7, #8]
 800585c:	ed87 1b00 	vstr	d1, [r7]
 double atan2;
 double temp = y/x;
 8005860:	ed97 5b00 	vldr	d5, [r7]
 8005864:	ed97 6b02 	vldr	d6, [r7, #8]
 8005868:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800586c:	ed87 7b06 	vstr	d7, [r7, #24]
 if(x > 0){
 8005870:	ed97 7b02 	vldr	d7, [r7, #8]
 8005874:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	dd10      	ble.n	80058a0 <_ZN5SCARA11count_atan2Edd+0x50>
   atan2 = (atan(temp)*180)/PI;
 800587e:	ed97 0b06 	vldr	d0, [r7, #24]
 8005882:	f00a ff09 	bl	8010698 <atan>
 8005886:	eeb0 7b40 	vmov.f64	d7, d0
 800588a:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8005990 <_ZN5SCARA11count_atan2Edd+0x140>
 800588e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005892:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8005998 <_ZN5SCARA11count_atan2Edd+0x148>
 8005896:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800589a:	ed87 7b08 	vstr	d7, [r7, #32]
 800589e:	e06c      	b.n	800597a <_ZN5SCARA11count_atan2Edd+0x12a>
 }
    else if(y >= 0 && x < 0){
 80058a0:	ed97 7b00 	vldr	d7, [r7]
 80058a4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ac:	db1b      	blt.n	80058e6 <_ZN5SCARA11count_atan2Edd+0x96>
 80058ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80058b2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ba:	d514      	bpl.n	80058e6 <_ZN5SCARA11count_atan2Edd+0x96>
        atan2 = (atan(temp)*180)/PI + 180;
 80058bc:	ed97 0b06 	vldr	d0, [r7, #24]
 80058c0:	f00a feea 	bl	8010698 <atan>
 80058c4:	eeb0 7b40 	vmov.f64	d7, d0
 80058c8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8005990 <_ZN5SCARA11count_atan2Edd+0x140>
 80058cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80058d0:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8005998 <_ZN5SCARA11count_atan2Edd+0x148>
 80058d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80058d8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005990 <_ZN5SCARA11count_atan2Edd+0x140>
 80058dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058e0:	ed87 7b08 	vstr	d7, [r7, #32]
 80058e4:	e049      	b.n	800597a <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x < 0){
 80058e6:	ed97 7b00 	vldr	d7, [r7]
 80058ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	d51b      	bpl.n	800592c <_ZN5SCARA11count_atan2Edd+0xdc>
 80058f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80058f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005900:	d514      	bpl.n	800592c <_ZN5SCARA11count_atan2Edd+0xdc>
        atan2 = (atan(temp)*180/PI - 180);
 8005902:	ed97 0b06 	vldr	d0, [r7, #24]
 8005906:	f00a fec7 	bl	8010698 <atan>
 800590a:	eeb0 7b40 	vmov.f64	d7, d0
 800590e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005990 <_ZN5SCARA11count_atan2Edd+0x140>
 8005912:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005916:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8005998 <_ZN5SCARA11count_atan2Edd+0x148>
 800591a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800591e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005990 <_ZN5SCARA11count_atan2Edd+0x140>
 8005922:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005926:	ed87 7b08 	vstr	d7, [r7, #32]
 800592a:	e026      	b.n	800597a <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y > 0 && x == 0){
 800592c:	ed97 7b00 	vldr	d7, [r7]
 8005930:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005938:	dd0c      	ble.n	8005954 <_ZN5SCARA11count_atan2Edd+0x104>
 800593a:	ed97 7b02 	vldr	d7, [r7, #8]
 800593e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005946:	d105      	bne.n	8005954 <_ZN5SCARA11count_atan2Edd+0x104>
        atan2 = 180/2;
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <_ZN5SCARA11count_atan2Edd+0x150>)
 800594e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005952:	e012      	b.n	800597a <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x == 0){
 8005954:	ed97 7b00 	vldr	d7, [r7]
 8005958:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800595c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005960:	d50b      	bpl.n	800597a <_ZN5SCARA11count_atan2Edd+0x12a>
 8005962:	ed97 7b02 	vldr	d7, [r7, #8]
 8005966:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800596a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596e:	d104      	bne.n	800597a <_ZN5SCARA11count_atan2Edd+0x12a>
        atan2 = -180/2;
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <_ZN5SCARA11count_atan2Edd+0x154>)
 8005976:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
 return atan2;
 800597a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800597e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005982:	eeb0 0b47 	vmov.f64	d0, d7
 8005986:	3728      	adds	r7, #40	; 0x28
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	f3af 8000 	nop.w
 8005990:	00000000 	.word	0x00000000
 8005994:	40668000 	.word	0x40668000
 8005998:	54442d18 	.word	0x54442d18
 800599c:	400921fb 	.word	0x400921fb
 80059a0:	40568000 	.word	0x40568000
 80059a4:	c0568000 	.word	0xc0568000

080059a8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	ed87 0b02 	vstr	d0, [r7, #8]
 80059b2:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80059be:	eeb0 1b47 	vmov.f64	d1, d7
 80059c2:	ed97 0b02 	vldr	d0, [r7, #8]
 80059c6:	f00a fc13 	bl	80101f0 <pow>
 80059ca:	eeb0 7b40 	vmov.f64	d7, d0
    }
 80059ce:	eeb0 0b47 	vmov.f64	d0, d7
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	ee06 3a90 	vmov	s13, r3
 80059f2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80059f6:	eeb0 1b46 	vmov.f64	d1, d6
 80059fa:	eeb0 0b47 	vmov.f64	d0, d7
 80059fe:	f00a fbf7 	bl	80101f0 <pow>
 8005a02:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005a06:	eeb0 0b47 	vmov.f64	d0, d7
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_ZN5SCARA12count_theta2Edd>:

double SCARA::count_theta2(double x, double y)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	ed2d 8b02 	vpush	{d8}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6178      	str	r0, [r7, #20]
 8005a1c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005a20:	ed87 1b00 	vstr	d1, [r7]
 double theta2;
 double temp;
 temp = (double)(pow(x,2) + pow(y,2) - pow(length1,2) - pow(length2,2));
 8005a24:	2002      	movs	r0, #2
 8005a26:	ed97 0b02 	vldr	d0, [r7, #8]
 8005a2a:	f7ff ffbd 	bl	80059a8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a2e:	eeb0 8b40 	vmov.f64	d8, d0
 8005a32:	2002      	movs	r0, #2
 8005a34:	ed97 0b00 	vldr	d0, [r7]
 8005a38:	f7ff ffb6 	bl	80059a8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a3c:	eeb0 7b40 	vmov.f64	d7, d0
 8005a40:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005a44:	2102      	movs	r1, #2
 8005a46:	20be      	movs	r0, #190	; 0xbe
 8005a48:	f7ff ffc6 	bl	80059d8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a4c:	eeb0 7b40 	vmov.f64	d7, d0
 8005a50:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005a54:	2102      	movs	r1, #2
 8005a56:	208c      	movs	r0, #140	; 0x8c
 8005a58:	f7ff ffbe 	bl	80059d8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a5c:	eeb0 7b40 	vmov.f64	d7, d0
 8005a60:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005a64:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(2*length1*length2);
 8005a68:	ed97 6b08 	vldr	d6, [r7, #32]
 8005a6c:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8005ab0 <_ZN5SCARA12count_theta2Edd+0xa0>
 8005a70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005a74:	ed87 7b08 	vstr	d7, [r7, #32]
 theta2 = (acos(temp)*180)/PI;
 8005a78:	ed97 0b08 	vldr	d0, [r7, #32]
 8005a7c:	f00a ff10 	bl	80108a0 <acos>
 8005a80:	eeb0 7b40 	vmov.f64	d7, d0
 8005a84:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005ab8 <_ZN5SCARA12count_theta2Edd+0xa8>
 8005a88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a8c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005ac0 <_ZN5SCARA12count_theta2Edd+0xb0>
 8005a90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005a94:	ed87 7b06 	vstr	d7, [r7, #24]
 return theta2;
 8005a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a9c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005aa0:	eeb0 0b47 	vmov.f64	d0, d7
 8005aa4:	3728      	adds	r7, #40	; 0x28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	ecbd 8b02 	vpop	{d8}
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	00000000 	.word	0x00000000
 8005ab4:	40e9fa00 	.word	0x40e9fa00
 8005ab8:	00000000 	.word	0x00000000
 8005abc:	40668000 	.word	0x40668000
 8005ac0:	54442d18 	.word	0x54442d18
 8005ac4:	400921fb 	.word	0x400921fb

08005ac8 <_ZN5SCARA9count_phiEdd>:

double SCARA::count_phi(double x, double y)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	ed2d 8b02 	vpush	{d8}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6178      	str	r0, [r7, #20]
 8005ad4:	ed87 0b02 	vstr	d0, [r7, #8]
 8005ad8:	ed87 1b00 	vstr	d1, [r7]
 double phi;
 double temp = pow(length2,2) - pow(length1,2) - pow(x,2) - pow(y,2);
 8005adc:	2102      	movs	r1, #2
 8005ade:	208c      	movs	r0, #140	; 0x8c
 8005ae0:	f7ff ff7a 	bl	80059d8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005ae4:	eeb0 8b40 	vmov.f64	d8, d0
 8005ae8:	2102      	movs	r1, #2
 8005aea:	20be      	movs	r0, #190	; 0xbe
 8005aec:	f7ff ff74 	bl	80059d8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005af0:	eeb0 7b40 	vmov.f64	d7, d0
 8005af4:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005af8:	2002      	movs	r0, #2
 8005afa:	ed97 0b02 	vldr	d0, [r7, #8]
 8005afe:	f7ff ff53 	bl	80059a8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b02:	eeb0 7b40 	vmov.f64	d7, d0
 8005b06:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005b0a:	2002      	movs	r0, #2
 8005b0c:	ed97 0b00 	vldr	d0, [r7]
 8005b10:	f7ff ff4a 	bl	80059a8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b14:	eeb0 7b40 	vmov.f64	d7, d0
 8005b18:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005b1c:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(-2*length1*sqrt(pow(x,2)+pow(y,2)));
 8005b20:	2002      	movs	r0, #2
 8005b22:	ed97 0b02 	vldr	d0, [r7, #8]
 8005b26:	f7ff ff3f 	bl	80059a8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b2a:	eeb0 8b40 	vmov.f64	d8, d0
 8005b2e:	2002      	movs	r0, #2
 8005b30:	ed97 0b00 	vldr	d0, [r7]
 8005b34:	f7ff ff38 	bl	80059a8 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b38:	eeb0 7b40 	vmov.f64	d7, d0
 8005b3c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005b40:	eeb0 0b47 	vmov.f64	d0, d7
 8005b44:	f00a fed8 	bl	80108f8 <sqrt>
 8005b48:	eeb0 7b40 	vmov.f64	d7, d0
 8005b4c:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8005b98 <_ZN5SCARA9count_phiEdd+0xd0>
 8005b50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b54:	ed97 5b08 	vldr	d5, [r7, #32]
 8005b58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b5c:	ed87 7b08 	vstr	d7, [r7, #32]
 phi = (acos(temp)*180)/PI;
 8005b60:	ed97 0b08 	vldr	d0, [r7, #32]
 8005b64:	f00a fe9c 	bl	80108a0 <acos>
 8005b68:	eeb0 7b40 	vmov.f64	d7, d0
 8005b6c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005ba0 <_ZN5SCARA9count_phiEdd+0xd8>
 8005b70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b74:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005ba8 <_ZN5SCARA9count_phiEdd+0xe0>
 8005b78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b7c:	ed87 7b06 	vstr	d7, [r7, #24]
 return phi;
 8005b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b84:	ec43 2b17 	vmov	d7, r2, r3
}
 8005b88:	eeb0 0b47 	vmov.f64	d0, d7
 8005b8c:	3728      	adds	r7, #40	; 0x28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	ecbd 8b02 	vpop	{d8}
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	00000000 	.word	0x00000000
 8005b9c:	c077c000 	.word	0xc077c000
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	40668000 	.word	0x40668000
 8005ba8:	54442d18 	.word	0x54442d18
 8005bac:	400921fb 	.word	0x400921fb

08005bb0 <_Z41__static_initialization_and_destruction_0ii>:
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d102      	bne.n	8005bd0 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA sc;
 8005bca:	4803      	ldr	r0, [pc, #12]	; (8005bd8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005bcc:	f7ff f840 	bl	8004c50 <_ZN5SCARAC1Ev>
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	24001a30 	.word	0x24001a30

08005bdc <_GLOBAL__sub_I_sc>:
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005be4:	2001      	movs	r0, #1
 8005be6:	f7ff ffe3 	bl	8005bb0 <_Z41__static_initialization_and_destruction_0ii>
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <HAL_MspInit+0x3c>)
 8005bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bf8:	4a0b      	ldr	r2, [pc, #44]	; (8005c28 <HAL_MspInit+0x3c>)
 8005bfa:	f043 0302 	orr.w	r3, r3, #2
 8005bfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <HAL_MspInit+0x3c>)
 8005c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005c10:	2200      	movs	r2, #0
 8005c12:	2100      	movs	r1, #0
 8005c14:	2005      	movs	r0, #5
 8005c16:	f001 f8d2 	bl	8006dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005c1a:	2005      	movs	r0, #5
 8005c1c:	f001 f8e9 	bl	8006df2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	58024400 	.word	0x58024400

08005c2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b090      	sub	sp, #64	; 0x40
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4c:	d14e      	bne.n	8005cec <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c4e:	4b77      	ldr	r3, [pc, #476]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c54:	4a75      	ldr	r2, [pc, #468]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c5e:	4b73      	ldr	r3, [pc, #460]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c6c:	4b6f      	ldr	r3, [pc, #444]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c72:	4a6e      	ldr	r2, [pc, #440]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c7c:	4b6b      	ldr	r3, [pc, #428]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c8a:	4b68      	ldr	r3, [pc, #416]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c90:	4a66      	ldr	r2, [pc, #408]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c92:	f043 0302 	orr.w	r3, r3, #2
 8005c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c9a:	4b64      	ldr	r3, [pc, #400]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	623b      	str	r3, [r7, #32]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	485a      	ldr	r0, [pc, #360]	; (8005e30 <HAL_TIM_Encoder_MspInit+0x204>)
 8005cc6:	f003 fee9 	bl	8009a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005cca:	2308      	movs	r3, #8
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4853      	ldr	r0, [pc, #332]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x208>)
 8005ce6:	f003 fed9 	bl	8009a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005cea:	e09b      	b.n	8005e24 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a51      	ldr	r2, [pc, #324]	; (8005e38 <HAL_TIM_Encoder_MspInit+0x20c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d12e      	bne.n	8005d54 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cf6:	4b4d      	ldr	r3, [pc, #308]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cfc:	4a4b      	ldr	r2, [pc, #300]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005cfe:	f043 0302 	orr.w	r3, r3, #2
 8005d02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d06:	4b49      	ldr	r3, [pc, #292]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d14:	4b45      	ldr	r3, [pc, #276]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d1a:	4a44      	ldr	r2, [pc, #272]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d1c:	f043 0302 	orr.w	r3, r3, #2
 8005d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d24:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005d32:	2330      	movs	r3, #48	; 0x30
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d36:	2302      	movs	r3, #2
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d42:	2302      	movs	r3, #2
 8005d44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4839      	ldr	r0, [pc, #228]	; (8005e34 <HAL_TIM_Encoder_MspInit+0x208>)
 8005d4e:	f003 fea5 	bl	8009a9c <HAL_GPIO_Init>
}
 8005d52:	e067      	b.n	8005e24 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <HAL_TIM_Encoder_MspInit+0x210>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d12f      	bne.n	8005dbe <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d5e:	4b33      	ldr	r3, [pc, #204]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d64:	4a31      	ldr	r2, [pc, #196]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d66:	f043 0304 	orr.w	r3, r3, #4
 8005d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d7c:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d82:	4a2a      	ldr	r2, [pc, #168]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d84:	f043 0308 	orr.w	r3, r3, #8
 8005d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d8c:	4b27      	ldr	r3, [pc, #156]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005d9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da0:	2302      	movs	r3, #2
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da8:	2300      	movs	r3, #0
 8005daa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005dac:	2302      	movs	r3, #2
 8005dae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005db4:	4619      	mov	r1, r3
 8005db6:	4822      	ldr	r0, [pc, #136]	; (8005e40 <HAL_TIM_Encoder_MspInit+0x214>)
 8005db8:	f003 fe70 	bl	8009a9c <HAL_GPIO_Init>
}
 8005dbc:	e032      	b.n	8005e24 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a20      	ldr	r2, [pc, #128]	; (8005e44 <HAL_TIM_Encoder_MspInit+0x218>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d12d      	bne.n	8005e24 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005dc8:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dce:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005dd0:	f043 0308 	orr.w	r3, r3, #8
 8005dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005dd8:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dec:	4a0f      	ldr	r2, [pc, #60]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005df6:	4b0d      	ldr	r3, [pc, #52]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x200>)
 8005df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e04:	2303      	movs	r3, #3
 8005e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e10:	2300      	movs	r3, #0
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005e14:	2302      	movs	r3, #2
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4804      	ldr	r0, [pc, #16]	; (8005e30 <HAL_TIM_Encoder_MspInit+0x204>)
 8005e20:	f003 fe3c 	bl	8009a9c <HAL_GPIO_Init>
}
 8005e24:	bf00      	nop
 8005e26:	3740      	adds	r7, #64	; 0x40
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	58020000 	.word	0x58020000
 8005e34:	58020400 	.word	0x58020400
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	58020c00 	.word	0x58020c00
 8005e44:	40000c00 	.word	0x40000c00

08005e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a42      	ldr	r2, [pc, #264]	; (8005f60 <HAL_TIM_Base_MspInit+0x118>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d117      	bne.n	8005e8a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e5a:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e60:	4a40      	ldr	r2, [pc, #256]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005e62:	f043 0320 	orr.w	r3, r3, #32
 8005e66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e6a:	4b3e      	ldr	r3, [pc, #248]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	2037      	movs	r0, #55	; 0x37
 8005e7e:	f000 ff9e 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e82:	2037      	movs	r0, #55	; 0x37
 8005e84:	f000 ffb5 	bl	8006df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005e88:	e065      	b.n	8005f56 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a36      	ldr	r2, [pc, #216]	; (8005f68 <HAL_TIM_Base_MspInit+0x120>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d127      	bne.n	8005ee4 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005e94:	4b33      	ldr	r3, [pc, #204]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e9a:	4a32      	ldr	r2, [pc, #200]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ea4:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	202b      	movs	r0, #43	; 0x2b
 8005eb8:	f000 ff81 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005ebc:	202b      	movs	r0, #43	; 0x2b
 8005ebe:	f000 ff98 	bl	8006df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	202c      	movs	r0, #44	; 0x2c
 8005ec8:	f000 ff79 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ecc:	202c      	movs	r0, #44	; 0x2c
 8005ece:	f000 ff90 	bl	8006df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	202d      	movs	r0, #45	; 0x2d
 8005ed8:	f000 ff71 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005edc:	202d      	movs	r0, #45	; 0x2d
 8005ede:	f000 ff88 	bl	8006df2 <HAL_NVIC_EnableIRQ>
}
 8005ee2:	e038      	b.n	8005f56 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <HAL_TIM_Base_MspInit+0x124>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d117      	bne.n	8005f1e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ef4:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005efe:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2100      	movs	r1, #0
 8005f10:	202c      	movs	r0, #44	; 0x2c
 8005f12:	f000 ff54 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005f16:	202c      	movs	r0, #44	; 0x2c
 8005f18:	f000 ff6b 	bl	8006df2 <HAL_NVIC_EnableIRQ>
}
 8005f1c:	e01b      	b.n	8005f56 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <HAL_TIM_Base_MspInit+0x128>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d116      	bne.n	8005f56 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f2e:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <HAL_TIM_Base_MspInit+0x11c>)
 8005f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005f46:	2200      	movs	r2, #0
 8005f48:	2100      	movs	r1, #0
 8005f4a:	202d      	movs	r0, #45	; 0x2d
 8005f4c:	f000 ff37 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005f50:	202d      	movs	r0, #45	; 0x2d
 8005f52:	f000 ff4e 	bl	8006df2 <HAL_NVIC_EnableIRQ>
}
 8005f56:	bf00      	nop
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40001400 	.word	0x40001400
 8005f64:	58024400 	.word	0x58024400
 8005f68:	40010400 	.word	0x40010400
 8005f6c:	40001c00 	.word	0x40001c00
 8005f70:	40002000 	.word	0x40002000

08005f74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2b      	ldr	r2, [pc, #172]	; (8006030 <HAL_TIM_PWM_MspInit+0xbc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d117      	bne.n	8005fb6 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005f86:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8005f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f8c:	4a29      	ldr	r2, [pc, #164]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8005f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f96:	4b27      	ldr	r3, [pc, #156]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8005f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	202b      	movs	r0, #43	; 0x2b
 8005faa:	f000 ff08 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005fae:	202b      	movs	r0, #43	; 0x2b
 8005fb0:	f000 ff1f 	bl	8006df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8005fb4:	e038      	b.n	8006028 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM15)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <HAL_TIM_PWM_MspInit+0xc4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d117      	bne.n	8005ff0 <HAL_TIM_PWM_MspInit+0x7c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005fc0:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8005fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fc6:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005fd0:	4b18      	ldr	r3, [pc, #96]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8005fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	2074      	movs	r0, #116	; 0x74
 8005fe4:	f000 feeb 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8005fe8:	2074      	movs	r0, #116	; 0x74
 8005fea:	f000 ff02 	bl	8006df2 <HAL_NVIC_EnableIRQ>
}
 8005fee:	e01b      	b.n	8006028 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM23)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a11      	ldr	r2, [pc, #68]	; (800603c <HAL_TIM_PWM_MspInit+0xc8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d116      	bne.n	8006028 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8005ffc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006000:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 8006002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006006:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800600a:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <HAL_TIM_PWM_MspInit+0xc0>)
 800600c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006018:	2200      	movs	r2, #0
 800601a:	2100      	movs	r1, #0
 800601c:	20a1      	movs	r0, #161	; 0xa1
 800601e:	f000 fece 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8006022:	20a1      	movs	r0, #161	; 0xa1
 8006024:	f000 fee5 	bl	8006df2 <HAL_NVIC_EnableIRQ>
}
 8006028:	bf00      	nop
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40001800 	.word	0x40001800
 8006034:	58024400 	.word	0x58024400
 8006038:	40014000 	.word	0x40014000
 800603c:	4000e000 	.word	0x4000e000

08006040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08a      	sub	sp, #40	; 0x28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006048:	f107 0314 	add.w	r3, r7, #20
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	609a      	str	r2, [r3, #8]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a38      	ldr	r2, [pc, #224]	; (8006140 <HAL_TIM_MspPostInit+0x100>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d120      	bne.n	80060a4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006062:	4b38      	ldr	r3, [pc, #224]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 8006064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006068:	4a36      	ldr	r2, [pc, #216]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 800606a:	f043 0302 	orr.w	r3, r3, #2
 800606e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 8006074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006080:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006086:	2302      	movs	r3, #2
 8006088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8006092:	2302      	movs	r3, #2
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006096:	f107 0314 	add.w	r3, r7, #20
 800609a:	4619      	mov	r1, r3
 800609c:	482a      	ldr	r0, [pc, #168]	; (8006148 <HAL_TIM_MspPostInit+0x108>)
 800609e:	f003 fcfd 	bl	8009a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 80060a2:	e048      	b.n	8006136 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a28      	ldr	r2, [pc, #160]	; (800614c <HAL_TIM_MspPostInit+0x10c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d11f      	bne.n	80060ee <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060ae:	4b25      	ldr	r3, [pc, #148]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 80060b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b4:	4a23      	ldr	r2, [pc, #140]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 80060b6:	f043 0310 	orr.w	r3, r3, #16
 80060ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060be:	4b21      	ldr	r3, [pc, #132]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 80060c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80060cc:	2360      	movs	r3, #96	; 0x60
 80060ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d0:	2302      	movs	r3, #2
 80060d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060d8:	2300      	movs	r3, #0
 80060da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80060dc:	2304      	movs	r3, #4
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	4619      	mov	r1, r3
 80060e6:	481a      	ldr	r0, [pc, #104]	; (8006150 <HAL_TIM_MspPostInit+0x110>)
 80060e8:	f003 fcd8 	bl	8009a9c <HAL_GPIO_Init>
}
 80060ec:	e023      	b.n	8006136 <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM23)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a18      	ldr	r2, [pc, #96]	; (8006154 <HAL_TIM_MspPostInit+0x114>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d11e      	bne.n	8006136 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 80060fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060fe:	4a11      	ldr	r2, [pc, #68]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 8006100:	f043 0320 	orr.w	r3, r3, #32
 8006104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_TIM_MspPostInit+0x104>)
 800610a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006116:	2301      	movs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611a:	2302      	movs	r3, #2
 800611c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006122:	2300      	movs	r3, #0
 8006124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8006126:	230d      	movs	r3, #13
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800612a:	f107 0314 	add.w	r3, r7, #20
 800612e:	4619      	mov	r1, r3
 8006130:	4809      	ldr	r0, [pc, #36]	; (8006158 <HAL_TIM_MspPostInit+0x118>)
 8006132:	f003 fcb3 	bl	8009a9c <HAL_GPIO_Init>
}
 8006136:	bf00      	nop
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40001800 	.word	0x40001800
 8006144:	58024400 	.word	0x58024400
 8006148:	58020400 	.word	0x58020400
 800614c:	40014000 	.word	0x40014000
 8006150:	58021000 	.word	0x58021000
 8006154:	4000e000 	.word	0x4000e000
 8006158:	58021400 	.word	0x58021400

0800615c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b0b6      	sub	sp, #216	; 0xd8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	609a      	str	r2, [r3, #8]
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006174:	f107 0310 	add.w	r3, r7, #16
 8006178:	22b4      	movs	r2, #180	; 0xb4
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f00a fdc7 	bl	8010d10 <memset>
  if(huart->Instance==USART1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a57      	ldr	r2, [pc, #348]	; (80062e4 <HAL_UART_MspInit+0x188>)
 8006188:	4293      	cmp	r3, r2
 800618a:	f040 80a7 	bne.w	80062dc <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800618e:	2301      	movs	r3, #1
 8006190:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8006192:	2300      	movs	r3, #0
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	4618      	mov	r0, r3
 800619e:	f004 fdcb 	bl	800ad38 <HAL_RCCEx_PeriphCLKConfig>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80061a8:	f7fb fbda 	bl	8001960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80061ac:	4b4e      	ldr	r3, [pc, #312]	; (80062e8 <HAL_UART_MspInit+0x18c>)
 80061ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061b2:	4a4d      	ldr	r2, [pc, #308]	; (80062e8 <HAL_UART_MspInit+0x18c>)
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80061bc:	4b4a      	ldr	r3, [pc, #296]	; (80062e8 <HAL_UART_MspInit+0x18c>)
 80061be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ca:	4b47      	ldr	r3, [pc, #284]	; (80062e8 <HAL_UART_MspInit+0x18c>)
 80061cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061d0:	4a45      	ldr	r2, [pc, #276]	; (80062e8 <HAL_UART_MspInit+0x18c>)
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061da:	4b43      	ldr	r3, [pc, #268]	; (80062e8 <HAL_UART_MspInit+0x18c>)
 80061dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80061e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80061ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f0:	2302      	movs	r3, #2
 80061f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061fc:	2300      	movs	r3, #0
 80061fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006202:	2307      	movs	r3, #7
 8006204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006208:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800620c:	4619      	mov	r1, r3
 800620e:	4837      	ldr	r0, [pc, #220]	; (80062ec <HAL_UART_MspInit+0x190>)
 8006210:	f003 fc44 	bl	8009a9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8006214:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006216:	4a37      	ldr	r2, [pc, #220]	; (80062f4 <HAL_UART_MspInit+0x198>)
 8006218:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800621a:	4b35      	ldr	r3, [pc, #212]	; (80062f0 <HAL_UART_MspInit+0x194>)
 800621c:	2229      	movs	r2, #41	; 0x29
 800621e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006220:	4b33      	ldr	r3, [pc, #204]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006222:	2200      	movs	r2, #0
 8006224:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006226:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006228:	2200      	movs	r2, #0
 800622a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800622c:	4b30      	ldr	r3, [pc, #192]	; (80062f0 <HAL_UART_MspInit+0x194>)
 800622e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006232:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006234:	4b2e      	ldr	r3, [pc, #184]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006236:	2200      	movs	r2, #0
 8006238:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800623a:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <HAL_UART_MspInit+0x194>)
 800623c:	2200      	movs	r2, #0
 800623e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006240:	4b2b      	ldr	r3, [pc, #172]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006242:	2200      	movs	r2, #0
 8006244:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006246:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006248:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800624c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800624e:	4b28      	ldr	r3, [pc, #160]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006250:	2200      	movs	r2, #0
 8006252:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006254:	4826      	ldr	r0, [pc, #152]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006256:	f000 fde7 	bl	8006e28 <HAL_DMA_Init>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8006260:	f7fb fb7e 	bl	8001960 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a22      	ldr	r2, [pc, #136]	; (80062f0 <HAL_UART_MspInit+0x194>)
 8006268:	67da      	str	r2, [r3, #124]	; 0x7c
 800626a:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <HAL_UART_MspInit+0x194>)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8006270:	4b21      	ldr	r3, [pc, #132]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 8006272:	4a22      	ldr	r2, [pc, #136]	; (80062fc <HAL_UART_MspInit+0x1a0>)
 8006274:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006276:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 8006278:	222a      	movs	r2, #42	; 0x2a
 800627a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800627c:	4b1e      	ldr	r3, [pc, #120]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 800627e:	2240      	movs	r2, #64	; 0x40
 8006280:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006282:	4b1d      	ldr	r3, [pc, #116]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 8006284:	2200      	movs	r2, #0
 8006286:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006288:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 800628a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800628e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006290:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 8006292:	2200      	movs	r2, #0
 8006294:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006296:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 8006298:	2200      	movs	r2, #0
 800629a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800629c:	4b16      	ldr	r3, [pc, #88]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 800629e:	2200      	movs	r2, #0
 80062a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 80062a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062a8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062aa:	4b13      	ldr	r3, [pc, #76]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80062b0:	4811      	ldr	r0, [pc, #68]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 80062b2:	f000 fdb9 	bl	8006e28 <HAL_DMA_Init>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80062bc:	f7fb fb50 	bl	8001960 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0d      	ldr	r2, [pc, #52]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 80062c4:	679a      	str	r2, [r3, #120]	; 0x78
 80062c6:	4a0c      	ldr	r2, [pc, #48]	; (80062f8 <HAL_UART_MspInit+0x19c>)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80062cc:	2200      	movs	r2, #0
 80062ce:	2100      	movs	r1, #0
 80062d0:	2025      	movs	r0, #37	; 0x25
 80062d2:	f000 fd74 	bl	8006dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80062d6:	2025      	movs	r0, #37	; 0x25
 80062d8:	f000 fd8b 	bl	8006df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80062dc:	bf00      	nop
 80062de:	37d8      	adds	r7, #216	; 0xd8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40011000 	.word	0x40011000
 80062e8:	58024400 	.word	0x58024400
 80062ec:	58020000 	.word	0x58020000
 80062f0:	24000654 	.word	0x24000654
 80062f4:	40020010 	.word	0x40020010
 80062f8:	240006cc 	.word	0x240006cc
 80062fc:	40020028 	.word	0x40020028

08006300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006304:	e7fe      	b.n	8006304 <NMI_Handler+0x4>

08006306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800630a:	e7fe      	b.n	800630a <HardFault_Handler+0x4>

0800630c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006310:	e7fe      	b.n	8006310 <MemManage_Handler+0x4>

08006312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006312:	b480      	push	{r7}
 8006314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006316:	e7fe      	b.n	8006316 <BusFault_Handler+0x4>

08006318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800631c:	e7fe      	b.n	800631c <UsageFault_Handler+0x4>

0800631e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800631e:	b480      	push	{r7}
 8006320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006322:	bf00      	nop
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006330:	bf00      	nop
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800633a:	b480      	push	{r7}
 800633c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800633e:	bf00      	nop
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800634c:	f000 fc18 	bl	8006b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006350:	bf00      	nop
 8006352:	bd80      	pop	{r7, pc}

08006354 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006368:	4802      	ldr	r0, [pc, #8]	; (8006374 <DMA1_Stream0_IRQHandler+0x10>)
 800636a:	f002 f885 	bl	8008478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	24000654 	.word	0x24000654

08006378 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800637c:	4802      	ldr	r0, [pc, #8]	; (8006388 <DMA1_Stream1_IRQHandler+0x10>)
 800637e:	f002 f87b 	bl	8008478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006382:	bf00      	nop
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	240006cc 	.word	0x240006cc

0800638c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006390:	4802      	ldr	r0, [pc, #8]	; (800639c <USART1_IRQHandler+0x10>)
 8006392:	f007 ff01 	bl	800e198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006396:	bf00      	nop
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	240005c4 	.word	0x240005c4

080063a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80063a4:	4803      	ldr	r0, [pc, #12]	; (80063b4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80063a6:	f006 fcd1 	bl	800cd4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80063aa:	4803      	ldr	r0, [pc, #12]	; (80063b8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80063ac:	f006 fcce 	bl	800cd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80063b0:	bf00      	nop
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	240003fc 	.word	0x240003fc
 80063b8:	24000448 	.word	0x24000448

080063bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80063c0:	4803      	ldr	r0, [pc, #12]	; (80063d0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80063c2:	f006 fcc3 	bl	800cd4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80063c6:	4803      	ldr	r0, [pc, #12]	; (80063d4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80063c8:	f006 fcc0 	bl	800cd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80063cc:	bf00      	nop
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	240003fc 	.word	0x240003fc
 80063d4:	24000494 	.word	0x24000494

080063d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80063dc:	4803      	ldr	r0, [pc, #12]	; (80063ec <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80063de:	f006 fcb5 	bl	800cd4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80063e2:	4803      	ldr	r0, [pc, #12]	; (80063f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80063e4:	f006 fcb2 	bl	800cd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80063e8:	bf00      	nop
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	240003fc 	.word	0x240003fc
 80063f0:	240004e0 	.word	0x240004e0

080063f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80063f8:	4802      	ldr	r0, [pc, #8]	; (8006404 <TIM7_IRQHandler+0x10>)
 80063fa:	f006 fca7 	bl	800cd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	240003b0 	.word	0x240003b0

08006408 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800640c:	4802      	ldr	r0, [pc, #8]	; (8006418 <TIM15_IRQHandler+0x10>)
 800640e:	f006 fc9d 	bl	800cd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	2400052c 	.word	0x2400052c

0800641c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8006420:	4802      	ldr	r0, [pc, #8]	; (800642c <TIM23_IRQHandler+0x10>)
 8006422:	f006 fc93 	bl	800cd4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8006426:	bf00      	nop
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	24000578 	.word	0x24000578

08006430 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
	DC_motor_init();
 8006434:	f7fa fade 	bl	80009f4 <_Z13DC_motor_initv>
}
 8006438:	bf00      	nop
 800643a:	bd80      	pop	{r7, pc}

0800643c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
	return 1;
 8006440:	2301      	movs	r3, #1
}
 8006442:	4618      	mov	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <_kill>:

int _kill(int pid, int sig)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006456:	f00a fc23 	bl	8010ca0 <__errno>
 800645a:	4603      	mov	r3, r0
 800645c:	2216      	movs	r2, #22
 800645e:	601a      	str	r2, [r3, #0]
	return -1;
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <_exit>:

void _exit (int status)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006474:	f04f 31ff 	mov.w	r1, #4294967295
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ffe7 	bl	800644c <_kill>
	while (1) {}		/* Make sure we hang here */
 800647e:	e7fe      	b.n	800647e <_exit+0x12>

08006480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006488:	4a14      	ldr	r2, [pc, #80]	; (80064dc <_sbrk+0x5c>)
 800648a:	4b15      	ldr	r3, [pc, #84]	; (80064e0 <_sbrk+0x60>)
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006494:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <_sbrk+0x64>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800649c:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <_sbrk+0x64>)
 800649e:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <_sbrk+0x68>)
 80064a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064a2:	4b10      	ldr	r3, [pc, #64]	; (80064e4 <_sbrk+0x64>)
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d207      	bcs.n	80064c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80064b0:	f00a fbf6 	bl	8010ca0 <__errno>
 80064b4:	4603      	mov	r3, r0
 80064b6:	220c      	movs	r2, #12
 80064b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	e009      	b.n	80064d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80064c0:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <_sbrk+0x64>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <_sbrk+0x64>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4413      	add	r3, r2
 80064ce:	4a05      	ldr	r2, [pc, #20]	; (80064e4 <_sbrk+0x64>)
 80064d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80064d2:	68fb      	ldr	r3, [r7, #12]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	24050000 	.word	0x24050000
 80064e0:	00000400 	.word	0x00000400
 80064e4:	24001b00 	.word	0x24001b00
 80064e8:	24001b20 	.word	0x24001b20

080064ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80064f0:	4b32      	ldr	r3, [pc, #200]	; (80065bc <SystemInit+0xd0>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	4a31      	ldr	r2, [pc, #196]	; (80065bc <SystemInit+0xd0>)
 80064f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006500:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <SystemInit+0xd4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	2b06      	cmp	r3, #6
 800650a:	d807      	bhi.n	800651c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800650c:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <SystemInit+0xd4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 030f 	bic.w	r3, r3, #15
 8006514:	4a2a      	ldr	r2, [pc, #168]	; (80065c0 <SystemInit+0xd4>)
 8006516:	f043 0307 	orr.w	r3, r3, #7
 800651a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800651c:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <SystemInit+0xd8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a28      	ldr	r2, [pc, #160]	; (80065c4 <SystemInit+0xd8>)
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006528:	4b26      	ldr	r3, [pc, #152]	; (80065c4 <SystemInit+0xd8>)
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800652e:	4b25      	ldr	r3, [pc, #148]	; (80065c4 <SystemInit+0xd8>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4924      	ldr	r1, [pc, #144]	; (80065c4 <SystemInit+0xd8>)
 8006534:	4b24      	ldr	r3, [pc, #144]	; (80065c8 <SystemInit+0xdc>)
 8006536:	4013      	ands	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <SystemInit+0xd4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006546:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <SystemInit+0xd4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f023 030f 	bic.w	r3, r3, #15
 800654e:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <SystemInit+0xd4>)
 8006550:	f043 0307 	orr.w	r3, r3, #7
 8006554:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006556:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <SystemInit+0xd8>)
 8006558:	2200      	movs	r2, #0
 800655a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800655c:	4b19      	ldr	r3, [pc, #100]	; (80065c4 <SystemInit+0xd8>)
 800655e:	2200      	movs	r2, #0
 8006560:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006562:	4b18      	ldr	r3, [pc, #96]	; (80065c4 <SystemInit+0xd8>)
 8006564:	2200      	movs	r2, #0
 8006566:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006568:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <SystemInit+0xd8>)
 800656a:	4a18      	ldr	r2, [pc, #96]	; (80065cc <SystemInit+0xe0>)
 800656c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800656e:	4b15      	ldr	r3, [pc, #84]	; (80065c4 <SystemInit+0xd8>)
 8006570:	4a17      	ldr	r2, [pc, #92]	; (80065d0 <SystemInit+0xe4>)
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006574:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <SystemInit+0xd8>)
 8006576:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <SystemInit+0xe8>)
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <SystemInit+0xd8>)
 800657c:	2200      	movs	r2, #0
 800657e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006580:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <SystemInit+0xd8>)
 8006582:	4a14      	ldr	r2, [pc, #80]	; (80065d4 <SystemInit+0xe8>)
 8006584:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <SystemInit+0xd8>)
 8006588:	2200      	movs	r2, #0
 800658a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <SystemInit+0xd8>)
 800658e:	4a11      	ldr	r2, [pc, #68]	; (80065d4 <SystemInit+0xe8>)
 8006590:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006592:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <SystemInit+0xd8>)
 8006594:	2200      	movs	r2, #0
 8006596:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <SystemInit+0xd8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <SystemInit+0xd8>)
 800659e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <SystemInit+0xd8>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <SystemInit+0xec>)
 80065ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80065b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80065b2:	bf00      	nop
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	e000ed00 	.word	0xe000ed00
 80065c0:	52002000 	.word	0x52002000
 80065c4:	58024400 	.word	0x58024400
 80065c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80065cc:	02020200 	.word	0x02020200
 80065d0:	01ff0000 	.word	0x01ff0000
 80065d4:	01010280 	.word	0x01010280
 80065d8:	52004000 	.word	0x52004000

080065dc <HAL_TIM_PeriodElapsedCallback>:
#include "reset.h"
#include "scara.h"
#include "microswitch.h"

int axx=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	/** SCARA **/
	if (htim->Instance == TIM7) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a84      	ldr	r2, [pc, #528]	; (80067fc <HAL_TIM_PeriodElapsedCallback+0x220>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d12a      	bne.n	8006644 <HAL_TIM_PeriodElapsedCallback+0x68>
		/*stepper 2*/
		if (sc.temp_2 == 1) {
 80065ee:	4b84      	ldr	r3, [pc, #528]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80065f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d109      	bne.n	800660a <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_SET);
 80065f6:	2201      	movs	r2, #1
 80065f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065fc:	4881      	ldr	r0, [pc, #516]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80065fe:	f003 fc0d 	bl	8009e1c <HAL_GPIO_WritePin>
			sc.temp_2 = 0;
 8006602:	4b7f      	ldr	r3, [pc, #508]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006604:	2200      	movs	r2, #0
 8006606:	659a      	str	r2, [r3, #88]	; 0x58
 8006608:	e01c      	b.n	8006644 <HAL_TIM_PeriodElapsedCallback+0x68>
		}
		else if (sc.step_2 >= 1) {
 800660a:	4b7d      	ldr	r3, [pc, #500]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800660c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006610:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006614:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661c:	db12      	blt.n	8006644 <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_RESET);
 800661e:	2200      	movs	r2, #0
 8006620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006624:	4877      	ldr	r0, [pc, #476]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8006626:	f003 fbf9 	bl	8009e1c <HAL_GPIO_WritePin>
			sc.temp_2 = 1;
 800662a:	4b75      	ldr	r3, [pc, #468]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800662c:	2201      	movs	r2, #1
 800662e:	659a      	str	r2, [r3, #88]	; 0x58
			sc.step_2 = sc.step_2 - 1;
 8006630:	4b73      	ldr	r3, [pc, #460]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006632:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006636:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800663a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800663e:	4b70      	ldr	r3, [pc, #448]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006640:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}
	}

	if (htim->Instance == TIM8) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6f      	ldr	r2, [pc, #444]	; (8006808 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d12a      	bne.n	80066a4 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  /*stepper 1*/
		if (sc.temp_1 == 1) {
 800664e:	4b6c      	ldr	r3, [pc, #432]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	2b01      	cmp	r3, #1
 8006654:	d109      	bne.n	800666a <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_SET);
 8006656:	2201      	movs	r2, #1
 8006658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800665c:	4869      	ldr	r0, [pc, #420]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800665e:	f003 fbdd 	bl	8009e1c <HAL_GPIO_WritePin>
			sc.temp_1 = 0;
 8006662:	4b67      	ldr	r3, [pc, #412]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006664:	2200      	movs	r2, #0
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
 8006668:	e01c      	b.n	80066a4 <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		else if (sc.step_1 >= 1) {
 800666a:	4b65      	ldr	r3, [pc, #404]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800666c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006670:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006674:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667c:	db12      	blt.n	80066a4 <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_RESET);
 800667e:	2200      	movs	r2, #0
 8006680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006684:	485f      	ldr	r0, [pc, #380]	; (8006804 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8006686:	f003 fbc9 	bl	8009e1c <HAL_GPIO_WritePin>
			sc.temp_1 = 1;
 800668a:	4b5d      	ldr	r3, [pc, #372]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800668c:	2201      	movs	r2, #1
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
			sc.step_1 = sc.step_1 - 1;
 8006690:	4b5b      	ldr	r3, [pc, #364]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006692:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006696:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800669a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800669e:	4b58      	ldr	r3, [pc, #352]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80066a0:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		}
	}

	if (htim->Instance == TIM14) {
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a58      	ldr	r2, [pc, #352]	; (800680c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d12a      	bne.n	8006704 <HAL_TIM_PeriodElapsedCallback+0x128>
		/*stepper 3*/
		if (sc.temp_3 == 1) {
 80066ae:	4b54      	ldr	r3, [pc, #336]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80066b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d109      	bne.n	80066ca <HAL_TIM_PeriodElapsedCallback+0xee>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_SET);
 80066b6:	2201      	movs	r2, #1
 80066b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066bc:	4854      	ldr	r0, [pc, #336]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80066be:	f003 fbad 	bl	8009e1c <HAL_GPIO_WritePin>
			sc.temp_3 = 0;
 80066c2:	4b4f      	ldr	r3, [pc, #316]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	679a      	str	r2, [r3, #120]	; 0x78
 80066c8:	e01c      	b.n	8006704 <HAL_TIM_PeriodElapsedCallback+0x128>
		}
		else if (sc.step_3 >= 1) {
 80066ca:	4b4d      	ldr	r3, [pc, #308]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80066cc:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80066d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066dc:	db12      	blt.n	8006704 <HAL_TIM_PeriodElapsedCallback+0x128>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_RESET);
 80066de:	2200      	movs	r2, #0
 80066e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066e4:	484a      	ldr	r0, [pc, #296]	; (8006810 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80066e6:	f003 fb99 	bl	8009e1c <HAL_GPIO_WritePin>
			sc.temp_3 = 1;
 80066ea:	4b45      	ldr	r3, [pc, #276]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	679a      	str	r2, [r3, #120]	; 0x78
			sc.step_3 = sc.step_3 - 1;
 80066f0:	4b43      	ldr	r3, [pc, #268]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80066f2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80066f6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066fe:	4b40      	ldr	r3, [pc, #256]	; (8006800 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8006700:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
		}
	}
	/**  **/


	if (htim->Instance == TIM13) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a42      	ldr	r2, [pc, #264]	; (8006814 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d11e      	bne.n	800674c <HAL_TIM_PeriodElapsedCallback+0x170>
	/* ROS publish */
		static int ms=0;
		if(ms%10==0){
 800670e:	4b42      	ldr	r3, [pc, #264]	; (8006818 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006710:	6819      	ldr	r1, [r3, #0]
 8006712:	4b42      	ldr	r3, [pc, #264]	; (800681c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006714:	fb83 2301 	smull	r2, r3, r3, r1
 8006718:	109a      	asrs	r2, r3, #2
 800671a:	17cb      	asrs	r3, r1, #31
 800671c:	1ad2      	subs	r2, r2, r3
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	1aca      	subs	r2, r1, r3
 8006728:	2a00      	cmp	r2, #0
 800672a:	d103      	bne.n	8006734 <HAL_TIM_PeriodElapsedCallback+0x158>
			ROS::pub_car_vel();
 800672c:	f7fd fa9c 	bl	8003c68 <_ZN3ROS11pub_car_velEv>
			ROS::pub_reset();
 8006730:	f7fd fa2c 	bl	8003b8c <_ZN3ROS9pub_resetEv>
		}
		ms++;
 8006734:	4b38      	ldr	r3, [pc, #224]	; (8006818 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3301      	adds	r3, #1
 800673a:	4a37      	ldr	r2, [pc, #220]	; (8006818 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800673c:	6013      	str	r3, [r2, #0]

	/* PID Control */
		motor_standard();
 800673e:	f000 f87d 	bl	800683c <_Z14motor_standardv>
		axx++;
 8006742:	4b37      	ldr	r3, [pc, #220]	; (8006820 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3301      	adds	r3, #1
 8006748:	4a35      	ldr	r2, [pc, #212]	; (8006820 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800674a:	6013      	str	r3, [r2, #0]
	}


	/** Intake **/
	if (htim->Instance == TIM24){
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a34      	ldr	r2, [pc, #208]	; (8006824 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d14d      	bne.n	80067f2 <HAL_TIM_PeriodElapsedCallback+0x216>
		/* microswitch */
		if (HAL_GPIO_ReadPin(TOUCH_A_PORT, TOUCH_A_PIN) == 0) {
 8006756:	2140      	movs	r1, #64	; 0x40
 8006758:	4833      	ldr	r0, [pc, #204]	; (8006828 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800675a:	f003 fb47 	bl	8009dec <HAL_GPIO_ReadPin>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d006      	beq.n	800677c <HAL_TIM_PeriodElapsedCallback+0x1a0>
			MICROSWITCH::touch_a = 1;
 800676e:	492f      	ldr	r1, [pc, #188]	; (800682c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006776:	e9c1 2300 	strd	r2, r3, [r1]
 800677a:	e006      	b.n	800678a <HAL_TIM_PeriodElapsedCallback+0x1ae>
		} else MICROSWITCH::touch_a = 0;
 800677c:	492b      	ldr	r1, [pc, #172]	; (800682c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_B_PORT, TOUCH_B_PIN) == 0) {
 800678a:	2120      	movs	r1, #32
 800678c:	4826      	ldr	r0, [pc, #152]	; (8006828 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800678e:	f003 fb2d 	bl	8009dec <HAL_GPIO_ReadPin>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	bf0c      	ite	eq
 8006798:	2301      	moveq	r3, #1
 800679a:	2300      	movne	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d006      	beq.n	80067b0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			MICROSWITCH::touch_b = 1;
 80067a2:	4924      	ldr	r1, [pc, #144]	; (8006834 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	4b21      	ldr	r3, [pc, #132]	; (8006830 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80067aa:	e9c1 2300 	strd	r2, r3, [r1]
 80067ae:	e006      	b.n	80067be <HAL_TIM_PeriodElapsedCallback+0x1e2>
		} else MICROSWITCH::touch_b = 0;
 80067b0:	4920      	ldr	r1, [pc, #128]	; (8006834 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_C_PORT, TOUCH_C_PIN) == 0) {
 80067be:	2110      	movs	r1, #16
 80067c0:	4819      	ldr	r0, [pc, #100]	; (8006828 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80067c2:	f003 fb13 	bl	8009dec <HAL_GPIO_ReadPin>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf0c      	ite	eq
 80067cc:	2301      	moveq	r3, #1
 80067ce:	2300      	movne	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d006      	beq.n	80067e4 <HAL_TIM_PeriodElapsedCallback+0x208>
			MICROSWITCH::touch_c = 1;
 80067d6:	4918      	ldr	r1, [pc, #96]	; (8006838 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	4b14      	ldr	r3, [pc, #80]	; (8006830 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80067de:	e9c1 2300 	strd	r2, r3, [r1]
		} else MICROSWITCH::touch_c = 0;
	}
}
 80067e2:	e006      	b.n	80067f2 <HAL_TIM_PeriodElapsedCallback+0x216>
		} else MICROSWITCH::touch_c = 0;
 80067e4:	4914      	ldr	r1, [pc, #80]	; (8006838 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	e9c1 2300 	strd	r2, r3, [r1]
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40001400 	.word	0x40001400
 8006800:	24001a30 	.word	0x24001a30
 8006804:	58021400 	.word	0x58021400
 8006808:	40010400 	.word	0x40010400
 800680c:	40002000 	.word	0x40002000
 8006810:	58020400 	.word	0x58020400
 8006814:	40001c00 	.word	0x40001c00
 8006818:	24001b08 	.word	0x24001b08
 800681c:	66666667 	.word	0x66666667
 8006820:	24001b04 	.word	0x24001b04
 8006824:	4000e400 	.word	0x4000e400
 8006828:	58021800 	.word	0x58021800
 800682c:	24000790 	.word	0x24000790
 8006830:	3ff00000 	.word	0x3ff00000
 8006834:	24000798 	.word	0x24000798
 8006838:	240007a0 	.word	0x240007a0

0800683c <_Z14motor_standardv>:


void motor_standard(void){
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8006840:	4b73      	ldr	r3, [pc, #460]	; (8006a10 <_Z14motor_standardv+0x1d4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	b21a      	sxth	r2, r3
 8006848:	4b72      	ldr	r3, [pc, #456]	; (8006a14 <_Z14motor_standardv+0x1d8>)
 800684a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 800684e:	4871      	ldr	r0, [pc, #452]	; (8006a14 <_Z14motor_standardv+0x1d8>)
 8006850:	f7fa f963 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8006854:	4b6e      	ldr	r3, [pc, #440]	; (8006a10 <_Z14motor_standardv+0x1d4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM < 0) {
 800685c:	4b6d      	ldr	r3, [pc, #436]	; (8006a14 <_Z14motor_standardv+0x1d8>)
 800685e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006862:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686a:	d50c      	bpl.n	8006886 <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 800686c:	2201      	movs	r2, #1
 800686e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006872:	4869      	ldr	r0, [pc, #420]	; (8006a18 <_Z14motor_standardv+0x1dc>)
 8006874:	f003 fad2 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 8006878:	2200      	movs	r2, #0
 800687a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800687e:	4866      	ldr	r0, [pc, #408]	; (8006a18 <_Z14motor_standardv+0x1dc>)
 8006880:	f003 facc 	bl	8009e1c <HAL_GPIO_WritePin>
 8006884:	e00b      	b.n	800689e <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 8006886:	2200      	movs	r2, #0
 8006888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800688c:	4862      	ldr	r0, [pc, #392]	; (8006a18 <_Z14motor_standardv+0x1dc>)
 800688e:	f003 fac5 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 8006892:	2201      	movs	r2, #1
 8006894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006898:	485f      	ldr	r0, [pc, #380]	; (8006a18 <_Z14motor_standardv+0x1dc>)
 800689a:	f003 fabf 	bl	8009e1c <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 800689e:	4b5d      	ldr	r3, [pc, #372]	; (8006a14 <_Z14motor_standardv+0x1d8>)
 80068a0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80068a4:	eeb0 7bc7 	vabs.f64	d7, d7
 80068a8:	4b5c      	ldr	r3, [pc, #368]	; (8006a1c <_Z14motor_standardv+0x1e0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068b0:	ee17 2a90 	vmov	r2, s15
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 80068b6:	4b5a      	ldr	r3, [pc, #360]	; (8006a20 <_Z14motor_standardv+0x1e4>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	b21a      	sxth	r2, r3
 80068be:	4b59      	ldr	r3, [pc, #356]	; (8006a24 <_Z14motor_standardv+0x1e8>)
 80068c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 80068c4:	4857      	ldr	r0, [pc, #348]	; (8006a24 <_Z14motor_standardv+0x1e8>)
 80068c6:	f7fa f928 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 80068ca:	4b55      	ldr	r3, [pc, #340]	; (8006a20 <_Z14motor_standardv+0x1e4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PWM > 0) {
 80068d2:	4b54      	ldr	r3, [pc, #336]	; (8006a24 <_Z14motor_standardv+0x1e8>)
 80068d4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80068d8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80068dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e0:	dd0c      	ble.n	80068fc <_Z14motor_standardv+0xc0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 80068e2:	2201      	movs	r2, #1
 80068e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068e8:	484f      	ldr	r0, [pc, #316]	; (8006a28 <_Z14motor_standardv+0x1ec>)
 80068ea:	f003 fa97 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 80068ee:	2200      	movs	r2, #0
 80068f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068f4:	484c      	ldr	r0, [pc, #304]	; (8006a28 <_Z14motor_standardv+0x1ec>)
 80068f6:	f003 fa91 	bl	8009e1c <HAL_GPIO_WritePin>
 80068fa:	e00b      	b.n	8006914 <_Z14motor_standardv+0xd8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006902:	4849      	ldr	r0, [pc, #292]	; (8006a28 <_Z14motor_standardv+0x1ec>)
 8006904:	f003 fa8a 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8006908:	2201      	movs	r2, #1
 800690a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800690e:	4846      	ldr	r0, [pc, #280]	; (8006a28 <_Z14motor_standardv+0x1ec>)
 8006910:	f003 fa84 	bl	8009e1c <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, fabs(fl.PWM));
 8006914:	4b43      	ldr	r3, [pc, #268]	; (8006a24 <_Z14motor_standardv+0x1e8>)
 8006916:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800691a:	eeb0 7bc7 	vabs.f64	d7, d7
 800691e:	4b3f      	ldr	r3, [pc, #252]	; (8006a1c <_Z14motor_standardv+0x1e0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006926:	ee17 2a90 	vmov	r2, s15
 800692a:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 800692c:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <_Z14motor_standardv+0x1f0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	b21a      	sxth	r2, r3
 8006934:	4b3e      	ldr	r3, [pc, #248]	; (8006a30 <_Z14motor_standardv+0x1f4>)
 8006936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 800693a:	483d      	ldr	r0, [pc, #244]	; (8006a30 <_Z14motor_standardv+0x1f4>)
 800693c:	f7fa f8ed 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 8006940:	4b3a      	ldr	r3, [pc, #232]	; (8006a2c <_Z14motor_standardv+0x1f0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2200      	movs	r2, #0
 8006946:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM > 0) {
 8006948:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <_Z14motor_standardv+0x1f4>)
 800694a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800694e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	dd0a      	ble.n	800696e <_Z14motor_standardv+0x132>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 8006958:	2201      	movs	r2, #1
 800695a:	2104      	movs	r1, #4
 800695c:	4835      	ldr	r0, [pc, #212]	; (8006a34 <_Z14motor_standardv+0x1f8>)
 800695e:	f003 fa5d 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 8006962:	2200      	movs	r2, #0
 8006964:	2108      	movs	r1, #8
 8006966:	4833      	ldr	r0, [pc, #204]	; (8006a34 <_Z14motor_standardv+0x1f8>)
 8006968:	f003 fa58 	bl	8009e1c <HAL_GPIO_WritePin>
 800696c:	e009      	b.n	8006982 <_Z14motor_standardv+0x146>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 800696e:	2200      	movs	r2, #0
 8006970:	2104      	movs	r1, #4
 8006972:	4830      	ldr	r0, [pc, #192]	; (8006a34 <_Z14motor_standardv+0x1f8>)
 8006974:	f003 fa52 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 8006978:	2201      	movs	r2, #1
 800697a:	2108      	movs	r1, #8
 800697c:	482d      	ldr	r0, [pc, #180]	; (8006a34 <_Z14motor_standardv+0x1f8>)
 800697e:	f003 fa4d 	bl	8009e1c <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 8006982:	4b2b      	ldr	r3, [pc, #172]	; (8006a30 <_Z14motor_standardv+0x1f4>)
 8006984:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006988:	eeb0 7bc7 	vabs.f64	d7, d7
 800698c:	4b2a      	ldr	r3, [pc, #168]	; (8006a38 <_Z14motor_standardv+0x1fc>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006994:	ee17 2a90 	vmov	r2, s15
 8006998:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 800699a:	4b28      	ldr	r3, [pc, #160]	; (8006a3c <_Z14motor_standardv+0x200>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	b21a      	sxth	r2, r3
 80069a2:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <_Z14motor_standardv+0x204>)
 80069a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 80069a8:	4825      	ldr	r0, [pc, #148]	; (8006a40 <_Z14motor_standardv+0x204>)
 80069aa:	f7fa f8b6 	bl	8000b1a <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 80069ae:	4b23      	ldr	r3, [pc, #140]	; (8006a3c <_Z14motor_standardv+0x200>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM < 0) {
 80069b6:	4b22      	ldr	r3, [pc, #136]	; (8006a40 <_Z14motor_standardv+0x204>)
 80069b8:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80069bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80069c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c4:	d50b      	bpl.n	80069de <_Z14motor_standardv+0x1a2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 80069c6:	2201      	movs	r2, #1
 80069c8:	2110      	movs	r1, #16
 80069ca:	481a      	ldr	r0, [pc, #104]	; (8006a34 <_Z14motor_standardv+0x1f8>)
 80069cc:	f003 fa26 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 80069d0:	2200      	movs	r2, #0
 80069d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069d6:	481b      	ldr	r0, [pc, #108]	; (8006a44 <_Z14motor_standardv+0x208>)
 80069d8:	f003 fa20 	bl	8009e1c <HAL_GPIO_WritePin>
 80069dc:	e00a      	b.n	80069f4 <_Z14motor_standardv+0x1b8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 80069de:	2200      	movs	r2, #0
 80069e0:	2110      	movs	r1, #16
 80069e2:	4814      	ldr	r0, [pc, #80]	; (8006a34 <_Z14motor_standardv+0x1f8>)
 80069e4:	f003 fa1a 	bl	8009e1c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 80069e8:	2201      	movs	r2, #1
 80069ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069ee:	4815      	ldr	r0, [pc, #84]	; (8006a44 <_Z14motor_standardv+0x208>)
 80069f0:	f003 fa14 	bl	8009e1c <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 80069f4:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <_Z14motor_standardv+0x204>)
 80069f6:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80069fa:	eeb0 7bc7 	vabs.f64	d7, d7
 80069fe:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <_Z14motor_standardv+0x1fc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006a06:	ee17 2a90 	vmov	r2, s15
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8006a0c:	bf00      	nop
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	24000280 	.word	0x24000280
 8006a14:	240000a0 	.word	0x240000a0
 8006a18:	58020c00 	.word	0x58020c00
 8006a1c:	24000448 	.word	0x24000448
 8006a20:	24000364 	.word	0x24000364
 8006a24:	24000110 	.word	0x24000110
 8006a28:	58020400 	.word	0x58020400
 8006a2c:	240002cc 	.word	0x240002cc
 8006a30:	24000180 	.word	0x24000180
 8006a34:	58021000 	.word	0x58021000
 8006a38:	2400052c 	.word	0x2400052c
 8006a3c:	24000318 	.word	0x24000318
 8006a40:	240001f0 	.word	0x240001f0
 8006a44:	58020800 	.word	0x58020800

08006a48 <Reset_Handler>:
 8006a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a80 <LoopFillZerobss+0xe>
 8006a4c:	f7ff fd4e 	bl	80064ec <SystemInit>
 8006a50:	480c      	ldr	r0, [pc, #48]	; (8006a84 <LoopFillZerobss+0x12>)
 8006a52:	490d      	ldr	r1, [pc, #52]	; (8006a88 <LoopFillZerobss+0x16>)
 8006a54:	4a0d      	ldr	r2, [pc, #52]	; (8006a8c <LoopFillZerobss+0x1a>)
 8006a56:	2300      	movs	r3, #0
 8006a58:	e002      	b.n	8006a60 <LoopCopyDataInit>

08006a5a <CopyDataInit>:
 8006a5a:	58d4      	ldr	r4, [r2, r3]
 8006a5c:	50c4      	str	r4, [r0, r3]
 8006a5e:	3304      	adds	r3, #4

08006a60 <LoopCopyDataInit>:
 8006a60:	18c4      	adds	r4, r0, r3
 8006a62:	428c      	cmp	r4, r1
 8006a64:	d3f9      	bcc.n	8006a5a <CopyDataInit>
 8006a66:	4a0a      	ldr	r2, [pc, #40]	; (8006a90 <LoopFillZerobss+0x1e>)
 8006a68:	4c0a      	ldr	r4, [pc, #40]	; (8006a94 <LoopFillZerobss+0x22>)
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e001      	b.n	8006a72 <LoopFillZerobss>

08006a6e <FillZerobss>:
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	3204      	adds	r2, #4

08006a72 <LoopFillZerobss>:
 8006a72:	42a2      	cmp	r2, r4
 8006a74:	d3fb      	bcc.n	8006a6e <FillZerobss>
 8006a76:	f00a f919 	bl	8010cac <__libc_init_array>
 8006a7a:	f7fa f9cd 	bl	8000e18 <main>
 8006a7e:	4770      	bx	lr
 8006a80:	24050000 	.word	0x24050000
 8006a84:	24000000 	.word	0x24000000
 8006a88:	2400007c 	.word	0x2400007c
 8006a8c:	08012cb0 	.word	0x08012cb0
 8006a90:	24000080 	.word	0x24000080
 8006a94:	24001b20 	.word	0x24001b20

08006a98 <ADC3_IRQHandler>:
 8006a98:	e7fe      	b.n	8006a98 <ADC3_IRQHandler>
	...

08006a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006aa2:	2003      	movs	r0, #3
 8006aa4:	f000 f980 	bl	8006da8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006aa8:	f003 ff70 	bl	800a98c <HAL_RCC_GetSysClockFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <HAL_Init+0x68>)
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	0a1b      	lsrs	r3, r3, #8
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	4913      	ldr	r1, [pc, #76]	; (8006b08 <HAL_Init+0x6c>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	f003 031f 	and.w	r3, r3, #31
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ac6:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <HAL_Init+0x68>)
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	4a0e      	ldr	r2, [pc, #56]	; (8006b08 <HAL_Init+0x6c>)
 8006ad0:	5cd3      	ldrb	r3, [r2, r3]
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8006adc:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <HAL_Init+0x70>)
 8006ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ae0:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <HAL_Init+0x74>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ae6:	200f      	movs	r0, #15
 8006ae8:	f000 f814 	bl	8006b14 <HAL_InitTick>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e002      	b.n	8006afc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006af6:	f7ff f879 	bl	8005bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	58024400 	.word	0x58024400
 8006b08:	08011350 	.word	0x08011350
 8006b0c:	24000008 	.word	0x24000008
 8006b10:	24000004 	.word	0x24000004

08006b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006b1c:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <HAL_InitTick+0x60>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e021      	b.n	8006b6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <HAL_InitTick+0x64>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <HAL_InitTick+0x60>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	4619      	mov	r1, r3
 8006b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 f965 	bl	8006e0e <HAL_SYSTICK_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e00e      	b.n	8006b6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b0f      	cmp	r3, #15
 8006b52:	d80a      	bhi.n	8006b6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b54:	2200      	movs	r2, #0
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	f000 f92f 	bl	8006dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b60:	4a06      	ldr	r2, [pc, #24]	; (8006b7c <HAL_InitTick+0x68>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e000      	b.n	8006b6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	24000010 	.word	0x24000010
 8006b78:	24000004 	.word	0x24000004
 8006b7c:	2400000c 	.word	0x2400000c

08006b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <HAL_IncTick+0x20>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <HAL_IncTick+0x24>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4413      	add	r3, r2
 8006b90:	4a04      	ldr	r2, [pc, #16]	; (8006ba4 <HAL_IncTick+0x24>)
 8006b92:	6013      	str	r3, [r2, #0]
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	24000010 	.word	0x24000010
 8006ba4:	24001b0c 	.word	0x24001b0c

08006ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return uwTick;
 8006bac:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <HAL_GetTick+0x14>)
 8006bae:	681b      	ldr	r3, [r3, #0]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	24001b0c 	.word	0x24001b0c

08006bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bc8:	f7ff ffee 	bl	8006ba8 <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd8:	d005      	beq.n	8006be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <HAL_Delay+0x44>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006be6:	bf00      	nop
 8006be8:	f7ff ffde 	bl	8006ba8 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d8f7      	bhi.n	8006be8 <HAL_Delay+0x28>
  {
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	24000010 	.word	0x24000010

08006c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c18:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <__NVIC_SetPriorityGrouping+0x40>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c24:	4013      	ands	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <__NVIC_SetPriorityGrouping+0x44>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c36:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <__NVIC_SetPriorityGrouping+0x40>)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	60d3      	str	r3, [r2, #12]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	e000ed00 	.word	0xe000ed00
 8006c4c:	05fa0000 	.word	0x05fa0000

08006c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c54:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <__NVIC_GetPriorityGrouping+0x18>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	f003 0307 	and.w	r3, r3, #7
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	db0b      	blt.n	8006c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	f003 021f 	and.w	r2, r3, #31
 8006c84:	4907      	ldr	r1, [pc, #28]	; (8006ca4 <__NVIC_EnableIRQ+0x38>)
 8006c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	e000e100 	.word	0xe000e100

08006ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	6039      	str	r1, [r7, #0]
 8006cb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	db0a      	blt.n	8006cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	490c      	ldr	r1, [pc, #48]	; (8006cf4 <__NVIC_SetPriority+0x4c>)
 8006cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cc6:	0112      	lsls	r2, r2, #4
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cd0:	e00a      	b.n	8006ce8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	4908      	ldr	r1, [pc, #32]	; (8006cf8 <__NVIC_SetPriority+0x50>)
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	3b04      	subs	r3, #4
 8006ce0:	0112      	lsls	r2, r2, #4
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	761a      	strb	r2, [r3, #24]
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	e000e100 	.word	0xe000e100
 8006cf8:	e000ed00 	.word	0xe000ed00

08006cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b089      	sub	sp, #36	; 0x24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f1c3 0307 	rsb	r3, r3, #7
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	bf28      	it	cs
 8006d1a:	2304      	movcs	r3, #4
 8006d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3304      	adds	r3, #4
 8006d22:	2b06      	cmp	r3, #6
 8006d24:	d902      	bls.n	8006d2c <NVIC_EncodePriority+0x30>
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3b03      	subs	r3, #3
 8006d2a:	e000      	b.n	8006d2e <NVIC_EncodePriority+0x32>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	43da      	mvns	r2, r3
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	401a      	ands	r2, r3
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d44:	f04f 31ff 	mov.w	r1, #4294967295
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4e:	43d9      	mvns	r1, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d54:	4313      	orrs	r3, r2
         );
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3724      	adds	r7, #36	; 0x24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d74:	d301      	bcc.n	8006d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d76:	2301      	movs	r3, #1
 8006d78:	e00f      	b.n	8006d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	; (8006da4 <SysTick_Config+0x40>)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d82:	210f      	movs	r1, #15
 8006d84:	f04f 30ff 	mov.w	r0, #4294967295
 8006d88:	f7ff ff8e 	bl	8006ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d8c:	4b05      	ldr	r3, [pc, #20]	; (8006da4 <SysTick_Config+0x40>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d92:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <SysTick_Config+0x40>)
 8006d94:	2207      	movs	r2, #7
 8006d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	e000e010 	.word	0xe000e010

08006da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff ff29 	bl	8006c08 <__NVIC_SetPriorityGrouping>
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b086      	sub	sp, #24
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006dcc:	f7ff ff40 	bl	8006c50 <__NVIC_GetPriorityGrouping>
 8006dd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	6978      	ldr	r0, [r7, #20]
 8006dd8:	f7ff ff90 	bl	8006cfc <NVIC_EncodePriority>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff ff5f 	bl	8006ca8 <__NVIC_SetPriority>
}
 8006dea:	bf00      	nop
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	4603      	mov	r3, r0
 8006dfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff ff33 	bl	8006c6c <__NVIC_EnableIRQ>
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff ffa4 	bl	8006d64 <SysTick_Config>
 8006e1c:	4603      	mov	r3, r0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006e30:	f7ff feba 	bl	8006ba8 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e314      	b.n	800746a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a66      	ldr	r2, [pc, #408]	; (8006fe0 <HAL_DMA_Init+0x1b8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d04a      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a65      	ldr	r2, [pc, #404]	; (8006fe4 <HAL_DMA_Init+0x1bc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d045      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a63      	ldr	r2, [pc, #396]	; (8006fe8 <HAL_DMA_Init+0x1c0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d040      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a62      	ldr	r2, [pc, #392]	; (8006fec <HAL_DMA_Init+0x1c4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d03b      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a60      	ldr	r2, [pc, #384]	; (8006ff0 <HAL_DMA_Init+0x1c8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d036      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a5f      	ldr	r2, [pc, #380]	; (8006ff4 <HAL_DMA_Init+0x1cc>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d031      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a5d      	ldr	r2, [pc, #372]	; (8006ff8 <HAL_DMA_Init+0x1d0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d02c      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a5c      	ldr	r2, [pc, #368]	; (8006ffc <HAL_DMA_Init+0x1d4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d027      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a5a      	ldr	r2, [pc, #360]	; (8007000 <HAL_DMA_Init+0x1d8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d022      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a59      	ldr	r2, [pc, #356]	; (8007004 <HAL_DMA_Init+0x1dc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d01d      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a57      	ldr	r2, [pc, #348]	; (8007008 <HAL_DMA_Init+0x1e0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d018      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a56      	ldr	r2, [pc, #344]	; (800700c <HAL_DMA_Init+0x1e4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d013      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a54      	ldr	r2, [pc, #336]	; (8007010 <HAL_DMA_Init+0x1e8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00e      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a53      	ldr	r2, [pc, #332]	; (8007014 <HAL_DMA_Init+0x1ec>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d009      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a51      	ldr	r2, [pc, #324]	; (8007018 <HAL_DMA_Init+0x1f0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_DMA_Init+0xb8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a50      	ldr	r2, [pc, #320]	; (800701c <HAL_DMA_Init+0x1f4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <HAL_DMA_Init+0xbc>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <HAL_DMA_Init+0xbe>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 813c 	beq.w	8007164 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <HAL_DMA_Init+0x1b8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d04a      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a36      	ldr	r2, [pc, #216]	; (8006fe4 <HAL_DMA_Init+0x1bc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d045      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a34      	ldr	r2, [pc, #208]	; (8006fe8 <HAL_DMA_Init+0x1c0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d040      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a33      	ldr	r2, [pc, #204]	; (8006fec <HAL_DMA_Init+0x1c4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d03b      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a31      	ldr	r2, [pc, #196]	; (8006ff0 <HAL_DMA_Init+0x1c8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d036      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a30      	ldr	r2, [pc, #192]	; (8006ff4 <HAL_DMA_Init+0x1cc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d031      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a2e      	ldr	r2, [pc, #184]	; (8006ff8 <HAL_DMA_Init+0x1d0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d02c      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2d      	ldr	r2, [pc, #180]	; (8006ffc <HAL_DMA_Init+0x1d4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d027      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2b      	ldr	r2, [pc, #172]	; (8007000 <HAL_DMA_Init+0x1d8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d022      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2a      	ldr	r2, [pc, #168]	; (8007004 <HAL_DMA_Init+0x1dc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d01d      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a28      	ldr	r2, [pc, #160]	; (8007008 <HAL_DMA_Init+0x1e0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d018      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a27      	ldr	r2, [pc, #156]	; (800700c <HAL_DMA_Init+0x1e4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a25      	ldr	r2, [pc, #148]	; (8007010 <HAL_DMA_Init+0x1e8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00e      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a24      	ldr	r2, [pc, #144]	; (8007014 <HAL_DMA_Init+0x1ec>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d009      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a22      	ldr	r2, [pc, #136]	; (8007018 <HAL_DMA_Init+0x1f0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <HAL_DMA_Init+0x174>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a21      	ldr	r2, [pc, #132]	; (800701c <HAL_DMA_Init+0x1f4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d108      	bne.n	8006fae <HAL_DMA_Init+0x186>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e007      	b.n	8006fbe <HAL_DMA_Init+0x196>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0201 	bic.w	r2, r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fbe:	e02f      	b.n	8007020 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fc0:	f7ff fdf2 	bl	8006ba8 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d928      	bls.n	8007020 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e244      	b.n	800746a <HAL_DMA_Init+0x642>
 8006fe0:	40020010 	.word	0x40020010
 8006fe4:	40020028 	.word	0x40020028
 8006fe8:	40020040 	.word	0x40020040
 8006fec:	40020058 	.word	0x40020058
 8006ff0:	40020070 	.word	0x40020070
 8006ff4:	40020088 	.word	0x40020088
 8006ff8:	400200a0 	.word	0x400200a0
 8006ffc:	400200b8 	.word	0x400200b8
 8007000:	40020410 	.word	0x40020410
 8007004:	40020428 	.word	0x40020428
 8007008:	40020440 	.word	0x40020440
 800700c:	40020458 	.word	0x40020458
 8007010:	40020470 	.word	0x40020470
 8007014:	40020488 	.word	0x40020488
 8007018:	400204a0 	.word	0x400204a0
 800701c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1c8      	bne.n	8006fc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4b84      	ldr	r3, [pc, #528]	; (800724c <HAL_DMA_Init+0x424>)
 800703a:	4013      	ands	r3, r2
 800703c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007046:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007052:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800705e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	2b04      	cmp	r3, #4
 8007072:	d107      	bne.n	8007084 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	4313      	orrs	r3, r2
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b28      	cmp	r3, #40	; 0x28
 800708a:	d903      	bls.n	8007094 <HAL_DMA_Init+0x26c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b2e      	cmp	r3, #46	; 0x2e
 8007092:	d91f      	bls.n	80070d4 <HAL_DMA_Init+0x2ac>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b3e      	cmp	r3, #62	; 0x3e
 800709a:	d903      	bls.n	80070a4 <HAL_DMA_Init+0x27c>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b42      	cmp	r3, #66	; 0x42
 80070a2:	d917      	bls.n	80070d4 <HAL_DMA_Init+0x2ac>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b46      	cmp	r3, #70	; 0x46
 80070aa:	d903      	bls.n	80070b4 <HAL_DMA_Init+0x28c>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b48      	cmp	r3, #72	; 0x48
 80070b2:	d90f      	bls.n	80070d4 <HAL_DMA_Init+0x2ac>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b4e      	cmp	r3, #78	; 0x4e
 80070ba:	d903      	bls.n	80070c4 <HAL_DMA_Init+0x29c>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b52      	cmp	r3, #82	; 0x52
 80070c2:	d907      	bls.n	80070d4 <HAL_DMA_Init+0x2ac>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b73      	cmp	r3, #115	; 0x73
 80070ca:	d905      	bls.n	80070d8 <HAL_DMA_Init+0x2b0>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b77      	cmp	r3, #119	; 0x77
 80070d2:	d801      	bhi.n	80070d8 <HAL_DMA_Init+0x2b0>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <HAL_DMA_Init+0x2b2>
 80070d8:	2300      	movs	r3, #0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070e4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f023 0307 	bic.w	r3, r3, #7
 80070fc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b04      	cmp	r3, #4
 800710e:	d117      	bne.n	8007140 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f002 fb30 	bl	8009788 <DMA_CheckFifoParam>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2240      	movs	r2, #64	; 0x40
 8007132:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e194      	b.n	800746a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f002 fa6b 	bl	8009624 <DMA_CalcBaseAndBitshift>
 800714e:	4603      	mov	r3, r0
 8007150:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	223f      	movs	r2, #63	; 0x3f
 800715c:	409a      	lsls	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	609a      	str	r2, [r3, #8]
 8007162:	e0ca      	b.n	80072fa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a39      	ldr	r2, [pc, #228]	; (8007250 <HAL_DMA_Init+0x428>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d022      	beq.n	80071b4 <HAL_DMA_Init+0x38c>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a38      	ldr	r2, [pc, #224]	; (8007254 <HAL_DMA_Init+0x42c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d01d      	beq.n	80071b4 <HAL_DMA_Init+0x38c>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a36      	ldr	r2, [pc, #216]	; (8007258 <HAL_DMA_Init+0x430>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d018      	beq.n	80071b4 <HAL_DMA_Init+0x38c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a35      	ldr	r2, [pc, #212]	; (800725c <HAL_DMA_Init+0x434>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <HAL_DMA_Init+0x38c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a33      	ldr	r2, [pc, #204]	; (8007260 <HAL_DMA_Init+0x438>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <HAL_DMA_Init+0x38c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a32      	ldr	r2, [pc, #200]	; (8007264 <HAL_DMA_Init+0x43c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <HAL_DMA_Init+0x38c>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a30      	ldr	r2, [pc, #192]	; (8007268 <HAL_DMA_Init+0x440>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_DMA_Init+0x38c>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2f      	ldr	r2, [pc, #188]	; (800726c <HAL_DMA_Init+0x444>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d101      	bne.n	80071b8 <HAL_DMA_Init+0x390>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <HAL_DMA_Init+0x392>
 80071b8:	2300      	movs	r3, #0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 8094 	beq.w	80072e8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <HAL_DMA_Init+0x428>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d021      	beq.n	800720e <HAL_DMA_Init+0x3e6>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a21      	ldr	r2, [pc, #132]	; (8007254 <HAL_DMA_Init+0x42c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d01c      	beq.n	800720e <HAL_DMA_Init+0x3e6>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <HAL_DMA_Init+0x430>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d017      	beq.n	800720e <HAL_DMA_Init+0x3e6>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	; (800725c <HAL_DMA_Init+0x434>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d012      	beq.n	800720e <HAL_DMA_Init+0x3e6>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1c      	ldr	r2, [pc, #112]	; (8007260 <HAL_DMA_Init+0x438>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00d      	beq.n	800720e <HAL_DMA_Init+0x3e6>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <HAL_DMA_Init+0x43c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d008      	beq.n	800720e <HAL_DMA_Init+0x3e6>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a19      	ldr	r2, [pc, #100]	; (8007268 <HAL_DMA_Init+0x440>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d003      	beq.n	800720e <HAL_DMA_Init+0x3e6>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a18      	ldr	r2, [pc, #96]	; (800726c <HAL_DMA_Init+0x444>)
 800720c:	4293      	cmp	r3, r2
 800720e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4b11      	ldr	r3, [pc, #68]	; (8007270 <HAL_DMA_Init+0x448>)
 800722c:	4013      	ands	r3, r2
 800722e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b40      	cmp	r3, #64	; 0x40
 8007236:	d01d      	beq.n	8007274 <HAL_DMA_Init+0x44c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d102      	bne.n	8007246 <HAL_DMA_Init+0x41e>
 8007240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007244:	e017      	b.n	8007276 <HAL_DMA_Init+0x44e>
 8007246:	2300      	movs	r3, #0
 8007248:	e015      	b.n	8007276 <HAL_DMA_Init+0x44e>
 800724a:	bf00      	nop
 800724c:	fe10803f 	.word	0xfe10803f
 8007250:	58025408 	.word	0x58025408
 8007254:	5802541c 	.word	0x5802541c
 8007258:	58025430 	.word	0x58025430
 800725c:	58025444 	.word	0x58025444
 8007260:	58025458 	.word	0x58025458
 8007264:	5802546c 	.word	0x5802546c
 8007268:	58025480 	.word	0x58025480
 800726c:	58025494 	.word	0x58025494
 8007270:	fffe000f 	.word	0xfffe000f
 8007274:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68d2      	ldr	r2, [r2, #12]
 800727a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800727c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007284:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800728c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007294:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800729c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80072a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b6e      	ldr	r3, [pc, #440]	; (8007474 <HAL_DMA_Init+0x64c>)
 80072bc:	4413      	add	r3, r2
 80072be:	4a6e      	ldr	r2, [pc, #440]	; (8007478 <HAL_DMA_Init+0x650>)
 80072c0:	fba2 2303 	umull	r2, r3, r2, r3
 80072c4:	091b      	lsrs	r3, r3, #4
 80072c6:	009a      	lsls	r2, r3, #2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f002 f9a9 	bl	8009624 <DMA_CalcBaseAndBitshift>
 80072d2:	4603      	mov	r3, r0
 80072d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	2201      	movs	r2, #1
 80072e0:	409a      	lsls	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	e008      	b.n	80072fa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2240      	movs	r2, #64	; 0x40
 80072ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2203      	movs	r2, #3
 80072f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e0b7      	b.n	800746a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a5f      	ldr	r2, [pc, #380]	; (800747c <HAL_DMA_Init+0x654>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d072      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5d      	ldr	r2, [pc, #372]	; (8007480 <HAL_DMA_Init+0x658>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d06d      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a5c      	ldr	r2, [pc, #368]	; (8007484 <HAL_DMA_Init+0x65c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d068      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5a      	ldr	r2, [pc, #360]	; (8007488 <HAL_DMA_Init+0x660>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d063      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a59      	ldr	r2, [pc, #356]	; (800748c <HAL_DMA_Init+0x664>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d05e      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a57      	ldr	r2, [pc, #348]	; (8007490 <HAL_DMA_Init+0x668>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d059      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a56      	ldr	r2, [pc, #344]	; (8007494 <HAL_DMA_Init+0x66c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d054      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a54      	ldr	r2, [pc, #336]	; (8007498 <HAL_DMA_Init+0x670>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d04f      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a53      	ldr	r2, [pc, #332]	; (800749c <HAL_DMA_Init+0x674>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d04a      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a51      	ldr	r2, [pc, #324]	; (80074a0 <HAL_DMA_Init+0x678>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d045      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a50      	ldr	r2, [pc, #320]	; (80074a4 <HAL_DMA_Init+0x67c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d040      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a4e      	ldr	r2, [pc, #312]	; (80074a8 <HAL_DMA_Init+0x680>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d03b      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a4d      	ldr	r2, [pc, #308]	; (80074ac <HAL_DMA_Init+0x684>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d036      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a4b      	ldr	r2, [pc, #300]	; (80074b0 <HAL_DMA_Init+0x688>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d031      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a4a      	ldr	r2, [pc, #296]	; (80074b4 <HAL_DMA_Init+0x68c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d02c      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a48      	ldr	r2, [pc, #288]	; (80074b8 <HAL_DMA_Init+0x690>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d027      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a47      	ldr	r2, [pc, #284]	; (80074bc <HAL_DMA_Init+0x694>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d022      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a45      	ldr	r2, [pc, #276]	; (80074c0 <HAL_DMA_Init+0x698>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01d      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a44      	ldr	r2, [pc, #272]	; (80074c4 <HAL_DMA_Init+0x69c>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d018      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a42      	ldr	r2, [pc, #264]	; (80074c8 <HAL_DMA_Init+0x6a0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d013      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a41      	ldr	r2, [pc, #260]	; (80074cc <HAL_DMA_Init+0x6a4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d00e      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a3f      	ldr	r2, [pc, #252]	; (80074d0 <HAL_DMA_Init+0x6a8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d009      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a3e      	ldr	r2, [pc, #248]	; (80074d4 <HAL_DMA_Init+0x6ac>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d004      	beq.n	80073ea <HAL_DMA_Init+0x5c2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a3c      	ldr	r2, [pc, #240]	; (80074d8 <HAL_DMA_Init+0x6b0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d101      	bne.n	80073ee <HAL_DMA_Init+0x5c6>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <HAL_DMA_Init+0x5c8>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d032      	beq.n	800745a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f002 fa43 	bl	8009880 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b80      	cmp	r3, #128	; 0x80
 8007400:	d102      	bne.n	8007408 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800741c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d010      	beq.n	8007448 <HAL_DMA_Init+0x620>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2b08      	cmp	r3, #8
 800742c:	d80c      	bhi.n	8007448 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f002 fac0 	bl	80099b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	e008      	b.n	800745a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	a7fdabf8 	.word	0xa7fdabf8
 8007478:	cccccccd 	.word	0xcccccccd
 800747c:	40020010 	.word	0x40020010
 8007480:	40020028 	.word	0x40020028
 8007484:	40020040 	.word	0x40020040
 8007488:	40020058 	.word	0x40020058
 800748c:	40020070 	.word	0x40020070
 8007490:	40020088 	.word	0x40020088
 8007494:	400200a0 	.word	0x400200a0
 8007498:	400200b8 	.word	0x400200b8
 800749c:	40020410 	.word	0x40020410
 80074a0:	40020428 	.word	0x40020428
 80074a4:	40020440 	.word	0x40020440
 80074a8:	40020458 	.word	0x40020458
 80074ac:	40020470 	.word	0x40020470
 80074b0:	40020488 	.word	0x40020488
 80074b4:	400204a0 	.word	0x400204a0
 80074b8:	400204b8 	.word	0x400204b8
 80074bc:	58025408 	.word	0x58025408
 80074c0:	5802541c 	.word	0x5802541c
 80074c4:	58025430 	.word	0x58025430
 80074c8:	58025444 	.word	0x58025444
 80074cc:	58025458 	.word	0x58025458
 80074d0:	5802546c 	.word	0x5802546c
 80074d4:	58025480 	.word	0x58025480
 80074d8:	58025494 	.word	0x58025494

080074dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e226      	b.n	8007946 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_DMA_Start_IT+0x2a>
 8007502:	2302      	movs	r3, #2
 8007504:	e21f      	b.n	8007946 <HAL_DMA_Start_IT+0x46a>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	f040 820a 	bne.w	8007930 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a68      	ldr	r2, [pc, #416]	; (80076d0 <HAL_DMA_Start_IT+0x1f4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d04a      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a66      	ldr	r2, [pc, #408]	; (80076d4 <HAL_DMA_Start_IT+0x1f8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d045      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a65      	ldr	r2, [pc, #404]	; (80076d8 <HAL_DMA_Start_IT+0x1fc>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d040      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a63      	ldr	r2, [pc, #396]	; (80076dc <HAL_DMA_Start_IT+0x200>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d03b      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a62      	ldr	r2, [pc, #392]	; (80076e0 <HAL_DMA_Start_IT+0x204>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d036      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a60      	ldr	r2, [pc, #384]	; (80076e4 <HAL_DMA_Start_IT+0x208>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d031      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a5f      	ldr	r2, [pc, #380]	; (80076e8 <HAL_DMA_Start_IT+0x20c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d02c      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a5d      	ldr	r2, [pc, #372]	; (80076ec <HAL_DMA_Start_IT+0x210>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d027      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a5c      	ldr	r2, [pc, #368]	; (80076f0 <HAL_DMA_Start_IT+0x214>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a5a      	ldr	r2, [pc, #360]	; (80076f4 <HAL_DMA_Start_IT+0x218>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01d      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a59      	ldr	r2, [pc, #356]	; (80076f8 <HAL_DMA_Start_IT+0x21c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a57      	ldr	r2, [pc, #348]	; (80076fc <HAL_DMA_Start_IT+0x220>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a56      	ldr	r2, [pc, #344]	; (8007700 <HAL_DMA_Start_IT+0x224>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a54      	ldr	r2, [pc, #336]	; (8007704 <HAL_DMA_Start_IT+0x228>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a53      	ldr	r2, [pc, #332]	; (8007708 <HAL_DMA_Start_IT+0x22c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <HAL_DMA_Start_IT+0xee>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a51      	ldr	r2, [pc, #324]	; (800770c <HAL_DMA_Start_IT+0x230>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d108      	bne.n	80075dc <HAL_DMA_Start_IT+0x100>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0201 	bic.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e007      	b.n	80075ec <HAL_DMA_Start_IT+0x110>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f001 fe6a 	bl	80092cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a34      	ldr	r2, [pc, #208]	; (80076d0 <HAL_DMA_Start_IT+0x1f4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d04a      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a33      	ldr	r2, [pc, #204]	; (80076d4 <HAL_DMA_Start_IT+0x1f8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d045      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a31      	ldr	r2, [pc, #196]	; (80076d8 <HAL_DMA_Start_IT+0x1fc>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d040      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a30      	ldr	r2, [pc, #192]	; (80076dc <HAL_DMA_Start_IT+0x200>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d03b      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2e      	ldr	r2, [pc, #184]	; (80076e0 <HAL_DMA_Start_IT+0x204>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d036      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a2d      	ldr	r2, [pc, #180]	; (80076e4 <HAL_DMA_Start_IT+0x208>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d031      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a2b      	ldr	r2, [pc, #172]	; (80076e8 <HAL_DMA_Start_IT+0x20c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d02c      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <HAL_DMA_Start_IT+0x210>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d027      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a28      	ldr	r2, [pc, #160]	; (80076f0 <HAL_DMA_Start_IT+0x214>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d022      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <HAL_DMA_Start_IT+0x218>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d01d      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a25      	ldr	r2, [pc, #148]	; (80076f8 <HAL_DMA_Start_IT+0x21c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d018      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a24      	ldr	r2, [pc, #144]	; (80076fc <HAL_DMA_Start_IT+0x220>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a22      	ldr	r2, [pc, #136]	; (8007700 <HAL_DMA_Start_IT+0x224>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00e      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a21      	ldr	r2, [pc, #132]	; (8007704 <HAL_DMA_Start_IT+0x228>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d009      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1f      	ldr	r2, [pc, #124]	; (8007708 <HAL_DMA_Start_IT+0x22c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_DMA_Start_IT+0x1bc>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a1e      	ldr	r2, [pc, #120]	; (800770c <HAL_DMA_Start_IT+0x230>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d101      	bne.n	800769c <HAL_DMA_Start_IT+0x1c0>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <HAL_DMA_Start_IT+0x1c2>
 800769c:	2300      	movs	r3, #0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d036      	beq.n	8007710 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f023 021e 	bic.w	r2, r3, #30
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0216 	orr.w	r2, r2, #22
 80076b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d03e      	beq.n	800773c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0208 	orr.w	r2, r2, #8
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	e035      	b.n	800773c <HAL_DMA_Start_IT+0x260>
 80076d0:	40020010 	.word	0x40020010
 80076d4:	40020028 	.word	0x40020028
 80076d8:	40020040 	.word	0x40020040
 80076dc:	40020058 	.word	0x40020058
 80076e0:	40020070 	.word	0x40020070
 80076e4:	40020088 	.word	0x40020088
 80076e8:	400200a0 	.word	0x400200a0
 80076ec:	400200b8 	.word	0x400200b8
 80076f0:	40020410 	.word	0x40020410
 80076f4:	40020428 	.word	0x40020428
 80076f8:	40020440 	.word	0x40020440
 80076fc:	40020458 	.word	0x40020458
 8007700:	40020470 	.word	0x40020470
 8007704:	40020488 	.word	0x40020488
 8007708:	400204a0 	.word	0x400204a0
 800770c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f023 020e 	bic.w	r2, r3, #14
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 020a 	orr.w	r2, r2, #10
 8007722:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0204 	orr.w	r2, r2, #4
 800773a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a83      	ldr	r2, [pc, #524]	; (8007950 <HAL_DMA_Start_IT+0x474>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d072      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a82      	ldr	r2, [pc, #520]	; (8007954 <HAL_DMA_Start_IT+0x478>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d06d      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a80      	ldr	r2, [pc, #512]	; (8007958 <HAL_DMA_Start_IT+0x47c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d068      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a7f      	ldr	r2, [pc, #508]	; (800795c <HAL_DMA_Start_IT+0x480>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d063      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a7d      	ldr	r2, [pc, #500]	; (8007960 <HAL_DMA_Start_IT+0x484>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d05e      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a7c      	ldr	r2, [pc, #496]	; (8007964 <HAL_DMA_Start_IT+0x488>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d059      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a7a      	ldr	r2, [pc, #488]	; (8007968 <HAL_DMA_Start_IT+0x48c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d054      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a79      	ldr	r2, [pc, #484]	; (800796c <HAL_DMA_Start_IT+0x490>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d04f      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a77      	ldr	r2, [pc, #476]	; (8007970 <HAL_DMA_Start_IT+0x494>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d04a      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a76      	ldr	r2, [pc, #472]	; (8007974 <HAL_DMA_Start_IT+0x498>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d045      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a74      	ldr	r2, [pc, #464]	; (8007978 <HAL_DMA_Start_IT+0x49c>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d040      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a73      	ldr	r2, [pc, #460]	; (800797c <HAL_DMA_Start_IT+0x4a0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d03b      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a71      	ldr	r2, [pc, #452]	; (8007980 <HAL_DMA_Start_IT+0x4a4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d036      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a70      	ldr	r2, [pc, #448]	; (8007984 <HAL_DMA_Start_IT+0x4a8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d031      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a6e      	ldr	r2, [pc, #440]	; (8007988 <HAL_DMA_Start_IT+0x4ac>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d02c      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a6d      	ldr	r2, [pc, #436]	; (800798c <HAL_DMA_Start_IT+0x4b0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d027      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a6b      	ldr	r2, [pc, #428]	; (8007990 <HAL_DMA_Start_IT+0x4b4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d022      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a6a      	ldr	r2, [pc, #424]	; (8007994 <HAL_DMA_Start_IT+0x4b8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01d      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a68      	ldr	r2, [pc, #416]	; (8007998 <HAL_DMA_Start_IT+0x4bc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a67      	ldr	r2, [pc, #412]	; (800799c <HAL_DMA_Start_IT+0x4c0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a65      	ldr	r2, [pc, #404]	; (80079a0 <HAL_DMA_Start_IT+0x4c4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a64      	ldr	r2, [pc, #400]	; (80079a4 <HAL_DMA_Start_IT+0x4c8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a62      	ldr	r2, [pc, #392]	; (80079a8 <HAL_DMA_Start_IT+0x4cc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_DMA_Start_IT+0x350>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a61      	ldr	r2, [pc, #388]	; (80079ac <HAL_DMA_Start_IT+0x4d0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d101      	bne.n	8007830 <HAL_DMA_Start_IT+0x354>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <HAL_DMA_Start_IT+0x356>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01a      	beq.n	800786c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007852:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800786a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a37      	ldr	r2, [pc, #220]	; (8007950 <HAL_DMA_Start_IT+0x474>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d04a      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a36      	ldr	r2, [pc, #216]	; (8007954 <HAL_DMA_Start_IT+0x478>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d045      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a34      	ldr	r2, [pc, #208]	; (8007958 <HAL_DMA_Start_IT+0x47c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d040      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a33      	ldr	r2, [pc, #204]	; (800795c <HAL_DMA_Start_IT+0x480>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d03b      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a31      	ldr	r2, [pc, #196]	; (8007960 <HAL_DMA_Start_IT+0x484>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d036      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a30      	ldr	r2, [pc, #192]	; (8007964 <HAL_DMA_Start_IT+0x488>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d031      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a2e      	ldr	r2, [pc, #184]	; (8007968 <HAL_DMA_Start_IT+0x48c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d02c      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a2d      	ldr	r2, [pc, #180]	; (800796c <HAL_DMA_Start_IT+0x490>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d027      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a2b      	ldr	r2, [pc, #172]	; (8007970 <HAL_DMA_Start_IT+0x494>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d022      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a2a      	ldr	r2, [pc, #168]	; (8007974 <HAL_DMA_Start_IT+0x498>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d01d      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a28      	ldr	r2, [pc, #160]	; (8007978 <HAL_DMA_Start_IT+0x49c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d018      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a27      	ldr	r2, [pc, #156]	; (800797c <HAL_DMA_Start_IT+0x4a0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a25      	ldr	r2, [pc, #148]	; (8007980 <HAL_DMA_Start_IT+0x4a4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00e      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a24      	ldr	r2, [pc, #144]	; (8007984 <HAL_DMA_Start_IT+0x4a8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d009      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a22      	ldr	r2, [pc, #136]	; (8007988 <HAL_DMA_Start_IT+0x4ac>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <HAL_DMA_Start_IT+0x430>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a21      	ldr	r2, [pc, #132]	; (800798c <HAL_DMA_Start_IT+0x4b0>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d108      	bne.n	800791e <HAL_DMA_Start_IT+0x442>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0201 	orr.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	e012      	b.n	8007944 <HAL_DMA_Start_IT+0x468>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0201 	orr.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	e009      	b.n	8007944 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007936:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40020010 	.word	0x40020010
 8007954:	40020028 	.word	0x40020028
 8007958:	40020040 	.word	0x40020040
 800795c:	40020058 	.word	0x40020058
 8007960:	40020070 	.word	0x40020070
 8007964:	40020088 	.word	0x40020088
 8007968:	400200a0 	.word	0x400200a0
 800796c:	400200b8 	.word	0x400200b8
 8007970:	40020410 	.word	0x40020410
 8007974:	40020428 	.word	0x40020428
 8007978:	40020440 	.word	0x40020440
 800797c:	40020458 	.word	0x40020458
 8007980:	40020470 	.word	0x40020470
 8007984:	40020488 	.word	0x40020488
 8007988:	400204a0 	.word	0x400204a0
 800798c:	400204b8 	.word	0x400204b8
 8007990:	58025408 	.word	0x58025408
 8007994:	5802541c 	.word	0x5802541c
 8007998:	58025430 	.word	0x58025430
 800799c:	58025444 	.word	0x58025444
 80079a0:	58025458 	.word	0x58025458
 80079a4:	5802546c 	.word	0x5802546c
 80079a8:	58025480 	.word	0x58025480
 80079ac:	58025494 	.word	0x58025494

080079b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80079b8:	f7ff f8f6 	bl	8006ba8 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e2dc      	b.n	8007f82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d008      	beq.n	80079e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e2cd      	b.n	8007f82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a76      	ldr	r2, [pc, #472]	; (8007bc4 <HAL_DMA_Abort+0x214>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d04a      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a74      	ldr	r2, [pc, #464]	; (8007bc8 <HAL_DMA_Abort+0x218>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d045      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a73      	ldr	r2, [pc, #460]	; (8007bcc <HAL_DMA_Abort+0x21c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d040      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a71      	ldr	r2, [pc, #452]	; (8007bd0 <HAL_DMA_Abort+0x220>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d03b      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a70      	ldr	r2, [pc, #448]	; (8007bd4 <HAL_DMA_Abort+0x224>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d036      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a6e      	ldr	r2, [pc, #440]	; (8007bd8 <HAL_DMA_Abort+0x228>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d031      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a6d      	ldr	r2, [pc, #436]	; (8007bdc <HAL_DMA_Abort+0x22c>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d02c      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a6b      	ldr	r2, [pc, #428]	; (8007be0 <HAL_DMA_Abort+0x230>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d027      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a6a      	ldr	r2, [pc, #424]	; (8007be4 <HAL_DMA_Abort+0x234>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d022      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a68      	ldr	r2, [pc, #416]	; (8007be8 <HAL_DMA_Abort+0x238>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d01d      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a67      	ldr	r2, [pc, #412]	; (8007bec <HAL_DMA_Abort+0x23c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d018      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a65      	ldr	r2, [pc, #404]	; (8007bf0 <HAL_DMA_Abort+0x240>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d013      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a64      	ldr	r2, [pc, #400]	; (8007bf4 <HAL_DMA_Abort+0x244>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00e      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a62      	ldr	r2, [pc, #392]	; (8007bf8 <HAL_DMA_Abort+0x248>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d009      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a61      	ldr	r2, [pc, #388]	; (8007bfc <HAL_DMA_Abort+0x24c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d004      	beq.n	8007a86 <HAL_DMA_Abort+0xd6>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a5f      	ldr	r2, [pc, #380]	; (8007c00 <HAL_DMA_Abort+0x250>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d101      	bne.n	8007a8a <HAL_DMA_Abort+0xda>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <HAL_DMA_Abort+0xdc>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d013      	beq.n	8007ab8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 021e 	bic.w	r2, r2, #30
 8007a9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695a      	ldr	r2, [r3, #20]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	e00a      	b.n	8007ace <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 020e 	bic.w	r2, r2, #14
 8007ac6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a3c      	ldr	r2, [pc, #240]	; (8007bc4 <HAL_DMA_Abort+0x214>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d072      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a3a      	ldr	r2, [pc, #232]	; (8007bc8 <HAL_DMA_Abort+0x218>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d06d      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a39      	ldr	r2, [pc, #228]	; (8007bcc <HAL_DMA_Abort+0x21c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d068      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a37      	ldr	r2, [pc, #220]	; (8007bd0 <HAL_DMA_Abort+0x220>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d063      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a36      	ldr	r2, [pc, #216]	; (8007bd4 <HAL_DMA_Abort+0x224>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d05e      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a34      	ldr	r2, [pc, #208]	; (8007bd8 <HAL_DMA_Abort+0x228>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d059      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a33      	ldr	r2, [pc, #204]	; (8007bdc <HAL_DMA_Abort+0x22c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d054      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a31      	ldr	r2, [pc, #196]	; (8007be0 <HAL_DMA_Abort+0x230>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d04f      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a30      	ldr	r2, [pc, #192]	; (8007be4 <HAL_DMA_Abort+0x234>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d04a      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a2e      	ldr	r2, [pc, #184]	; (8007be8 <HAL_DMA_Abort+0x238>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d045      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a2d      	ldr	r2, [pc, #180]	; (8007bec <HAL_DMA_Abort+0x23c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d040      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a2b      	ldr	r2, [pc, #172]	; (8007bf0 <HAL_DMA_Abort+0x240>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d03b      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <HAL_DMA_Abort+0x244>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d036      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a28      	ldr	r2, [pc, #160]	; (8007bf8 <HAL_DMA_Abort+0x248>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d031      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a27      	ldr	r2, [pc, #156]	; (8007bfc <HAL_DMA_Abort+0x24c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d02c      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a25      	ldr	r2, [pc, #148]	; (8007c00 <HAL_DMA_Abort+0x250>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d027      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a24      	ldr	r2, [pc, #144]	; (8007c04 <HAL_DMA_Abort+0x254>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d022      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <HAL_DMA_Abort+0x258>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01d      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a21      	ldr	r2, [pc, #132]	; (8007c0c <HAL_DMA_Abort+0x25c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d018      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <HAL_DMA_Abort+0x260>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1e      	ldr	r2, [pc, #120]	; (8007c14 <HAL_DMA_Abort+0x264>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00e      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	; (8007c18 <HAL_DMA_Abort+0x268>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d009      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1b      	ldr	r2, [pc, #108]	; (8007c1c <HAL_DMA_Abort+0x26c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d004      	beq.n	8007bbe <HAL_DMA_Abort+0x20e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a19      	ldr	r2, [pc, #100]	; (8007c20 <HAL_DMA_Abort+0x270>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d132      	bne.n	8007c24 <HAL_DMA_Abort+0x274>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e031      	b.n	8007c26 <HAL_DMA_Abort+0x276>
 8007bc2:	bf00      	nop
 8007bc4:	40020010 	.word	0x40020010
 8007bc8:	40020028 	.word	0x40020028
 8007bcc:	40020040 	.word	0x40020040
 8007bd0:	40020058 	.word	0x40020058
 8007bd4:	40020070 	.word	0x40020070
 8007bd8:	40020088 	.word	0x40020088
 8007bdc:	400200a0 	.word	0x400200a0
 8007be0:	400200b8 	.word	0x400200b8
 8007be4:	40020410 	.word	0x40020410
 8007be8:	40020428 	.word	0x40020428
 8007bec:	40020440 	.word	0x40020440
 8007bf0:	40020458 	.word	0x40020458
 8007bf4:	40020470 	.word	0x40020470
 8007bf8:	40020488 	.word	0x40020488
 8007bfc:	400204a0 	.word	0x400204a0
 8007c00:	400204b8 	.word	0x400204b8
 8007c04:	58025408 	.word	0x58025408
 8007c08:	5802541c 	.word	0x5802541c
 8007c0c:	58025430 	.word	0x58025430
 8007c10:	58025444 	.word	0x58025444
 8007c14:	58025458 	.word	0x58025458
 8007c18:	5802546c 	.word	0x5802546c
 8007c1c:	58025480 	.word	0x58025480
 8007c20:	58025494 	.word	0x58025494
 8007c24:	2300      	movs	r3, #0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d007      	beq.n	8007c3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a6d      	ldr	r2, [pc, #436]	; (8007df4 <HAL_DMA_Abort+0x444>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d04a      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a6b      	ldr	r2, [pc, #428]	; (8007df8 <HAL_DMA_Abort+0x448>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d045      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a6a      	ldr	r2, [pc, #424]	; (8007dfc <HAL_DMA_Abort+0x44c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d040      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a68      	ldr	r2, [pc, #416]	; (8007e00 <HAL_DMA_Abort+0x450>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d03b      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a67      	ldr	r2, [pc, #412]	; (8007e04 <HAL_DMA_Abort+0x454>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d036      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a65      	ldr	r2, [pc, #404]	; (8007e08 <HAL_DMA_Abort+0x458>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d031      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a64      	ldr	r2, [pc, #400]	; (8007e0c <HAL_DMA_Abort+0x45c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d02c      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a62      	ldr	r2, [pc, #392]	; (8007e10 <HAL_DMA_Abort+0x460>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d027      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a61      	ldr	r2, [pc, #388]	; (8007e14 <HAL_DMA_Abort+0x464>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d022      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a5f      	ldr	r2, [pc, #380]	; (8007e18 <HAL_DMA_Abort+0x468>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d01d      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a5e      	ldr	r2, [pc, #376]	; (8007e1c <HAL_DMA_Abort+0x46c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d018      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a5c      	ldr	r2, [pc, #368]	; (8007e20 <HAL_DMA_Abort+0x470>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a5b      	ldr	r2, [pc, #364]	; (8007e24 <HAL_DMA_Abort+0x474>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00e      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a59      	ldr	r2, [pc, #356]	; (8007e28 <HAL_DMA_Abort+0x478>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d009      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a58      	ldr	r2, [pc, #352]	; (8007e2c <HAL_DMA_Abort+0x47c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_DMA_Abort+0x32a>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a56      	ldr	r2, [pc, #344]	; (8007e30 <HAL_DMA_Abort+0x480>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d108      	bne.n	8007cec <HAL_DMA_Abort+0x33c>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0201 	bic.w	r2, r2, #1
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e007      	b.n	8007cfc <HAL_DMA_Abort+0x34c>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007cfc:	e013      	b.n	8007d26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cfe:	f7fe ff53 	bl	8006ba8 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	d90c      	bls.n	8007d26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2203      	movs	r2, #3
 8007d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e12d      	b.n	8007f82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e5      	bne.n	8007cfe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a2f      	ldr	r2, [pc, #188]	; (8007df4 <HAL_DMA_Abort+0x444>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d04a      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a2d      	ldr	r2, [pc, #180]	; (8007df8 <HAL_DMA_Abort+0x448>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d045      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a2c      	ldr	r2, [pc, #176]	; (8007dfc <HAL_DMA_Abort+0x44c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d040      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a2a      	ldr	r2, [pc, #168]	; (8007e00 <HAL_DMA_Abort+0x450>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d03b      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a29      	ldr	r2, [pc, #164]	; (8007e04 <HAL_DMA_Abort+0x454>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d036      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <HAL_DMA_Abort+0x458>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d031      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a26      	ldr	r2, [pc, #152]	; (8007e0c <HAL_DMA_Abort+0x45c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d02c      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a24      	ldr	r2, [pc, #144]	; (8007e10 <HAL_DMA_Abort+0x460>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d027      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a23      	ldr	r2, [pc, #140]	; (8007e14 <HAL_DMA_Abort+0x464>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d022      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <HAL_DMA_Abort+0x468>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01d      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <HAL_DMA_Abort+0x46c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d018      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <HAL_DMA_Abort+0x470>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d013      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <HAL_DMA_Abort+0x474>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00e      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <HAL_DMA_Abort+0x478>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d009      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1a      	ldr	r2, [pc, #104]	; (8007e2c <HAL_DMA_Abort+0x47c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d004      	beq.n	8007dd2 <HAL_DMA_Abort+0x422>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a18      	ldr	r2, [pc, #96]	; (8007e30 <HAL_DMA_Abort+0x480>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d101      	bne.n	8007dd6 <HAL_DMA_Abort+0x426>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e000      	b.n	8007dd8 <HAL_DMA_Abort+0x428>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d02b      	beq.n	8007e34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de6:	f003 031f 	and.w	r3, r3, #31
 8007dea:	223f      	movs	r2, #63	; 0x3f
 8007dec:	409a      	lsls	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	609a      	str	r2, [r3, #8]
 8007df2:	e02a      	b.n	8007e4a <HAL_DMA_Abort+0x49a>
 8007df4:	40020010 	.word	0x40020010
 8007df8:	40020028 	.word	0x40020028
 8007dfc:	40020040 	.word	0x40020040
 8007e00:	40020058 	.word	0x40020058
 8007e04:	40020070 	.word	0x40020070
 8007e08:	40020088 	.word	0x40020088
 8007e0c:	400200a0 	.word	0x400200a0
 8007e10:	400200b8 	.word	0x400200b8
 8007e14:	40020410 	.word	0x40020410
 8007e18:	40020428 	.word	0x40020428
 8007e1c:	40020440 	.word	0x40020440
 8007e20:	40020458 	.word	0x40020458
 8007e24:	40020470 	.word	0x40020470
 8007e28:	40020488 	.word	0x40020488
 8007e2c:	400204a0 	.word	0x400204a0
 8007e30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3e:	f003 031f 	and.w	r3, r3, #31
 8007e42:	2201      	movs	r2, #1
 8007e44:	409a      	lsls	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a4f      	ldr	r2, [pc, #316]	; (8007f8c <HAL_DMA_Abort+0x5dc>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d072      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a4d      	ldr	r2, [pc, #308]	; (8007f90 <HAL_DMA_Abort+0x5e0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d06d      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a4c      	ldr	r2, [pc, #304]	; (8007f94 <HAL_DMA_Abort+0x5e4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d068      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a4a      	ldr	r2, [pc, #296]	; (8007f98 <HAL_DMA_Abort+0x5e8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d063      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a49      	ldr	r2, [pc, #292]	; (8007f9c <HAL_DMA_Abort+0x5ec>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d05e      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a47      	ldr	r2, [pc, #284]	; (8007fa0 <HAL_DMA_Abort+0x5f0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d059      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a46      	ldr	r2, [pc, #280]	; (8007fa4 <HAL_DMA_Abort+0x5f4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d054      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a44      	ldr	r2, [pc, #272]	; (8007fa8 <HAL_DMA_Abort+0x5f8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d04f      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a43      	ldr	r2, [pc, #268]	; (8007fac <HAL_DMA_Abort+0x5fc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d04a      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a41      	ldr	r2, [pc, #260]	; (8007fb0 <HAL_DMA_Abort+0x600>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d045      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a40      	ldr	r2, [pc, #256]	; (8007fb4 <HAL_DMA_Abort+0x604>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d040      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a3e      	ldr	r2, [pc, #248]	; (8007fb8 <HAL_DMA_Abort+0x608>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d03b      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a3d      	ldr	r2, [pc, #244]	; (8007fbc <HAL_DMA_Abort+0x60c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d036      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a3b      	ldr	r2, [pc, #236]	; (8007fc0 <HAL_DMA_Abort+0x610>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d031      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a3a      	ldr	r2, [pc, #232]	; (8007fc4 <HAL_DMA_Abort+0x614>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d02c      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a38      	ldr	r2, [pc, #224]	; (8007fc8 <HAL_DMA_Abort+0x618>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d027      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a37      	ldr	r2, [pc, #220]	; (8007fcc <HAL_DMA_Abort+0x61c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d022      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a35      	ldr	r2, [pc, #212]	; (8007fd0 <HAL_DMA_Abort+0x620>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d01d      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a34      	ldr	r2, [pc, #208]	; (8007fd4 <HAL_DMA_Abort+0x624>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d018      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a32      	ldr	r2, [pc, #200]	; (8007fd8 <HAL_DMA_Abort+0x628>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d013      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a31      	ldr	r2, [pc, #196]	; (8007fdc <HAL_DMA_Abort+0x62c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00e      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a2f      	ldr	r2, [pc, #188]	; (8007fe0 <HAL_DMA_Abort+0x630>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d009      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a2e      	ldr	r2, [pc, #184]	; (8007fe4 <HAL_DMA_Abort+0x634>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d004      	beq.n	8007f3a <HAL_DMA_Abort+0x58a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a2c      	ldr	r2, [pc, #176]	; (8007fe8 <HAL_DMA_Abort+0x638>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d101      	bne.n	8007f3e <HAL_DMA_Abort+0x58e>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <HAL_DMA_Abort+0x590>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d015      	beq.n	8007f70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00c      	beq.n	8007f70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40020010 	.word	0x40020010
 8007f90:	40020028 	.word	0x40020028
 8007f94:	40020040 	.word	0x40020040
 8007f98:	40020058 	.word	0x40020058
 8007f9c:	40020070 	.word	0x40020070
 8007fa0:	40020088 	.word	0x40020088
 8007fa4:	400200a0 	.word	0x400200a0
 8007fa8:	400200b8 	.word	0x400200b8
 8007fac:	40020410 	.word	0x40020410
 8007fb0:	40020428 	.word	0x40020428
 8007fb4:	40020440 	.word	0x40020440
 8007fb8:	40020458 	.word	0x40020458
 8007fbc:	40020470 	.word	0x40020470
 8007fc0:	40020488 	.word	0x40020488
 8007fc4:	400204a0 	.word	0x400204a0
 8007fc8:	400204b8 	.word	0x400204b8
 8007fcc:	58025408 	.word	0x58025408
 8007fd0:	5802541c 	.word	0x5802541c
 8007fd4:	58025430 	.word	0x58025430
 8007fd8:	58025444 	.word	0x58025444
 8007fdc:	58025458 	.word	0x58025458
 8007fe0:	5802546c 	.word	0x5802546c
 8007fe4:	58025480 	.word	0x58025480
 8007fe8:	58025494 	.word	0x58025494

08007fec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e237      	b.n	800846e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d004      	beq.n	8008014 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2280      	movs	r2, #128	; 0x80
 800800e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e22c      	b.n	800846e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a5c      	ldr	r2, [pc, #368]	; (800818c <HAL_DMA_Abort_IT+0x1a0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d04a      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a5b      	ldr	r2, [pc, #364]	; (8008190 <HAL_DMA_Abort_IT+0x1a4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d045      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a59      	ldr	r2, [pc, #356]	; (8008194 <HAL_DMA_Abort_IT+0x1a8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d040      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a58      	ldr	r2, [pc, #352]	; (8008198 <HAL_DMA_Abort_IT+0x1ac>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d03b      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a56      	ldr	r2, [pc, #344]	; (800819c <HAL_DMA_Abort_IT+0x1b0>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d036      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a55      	ldr	r2, [pc, #340]	; (80081a0 <HAL_DMA_Abort_IT+0x1b4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d031      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a53      	ldr	r2, [pc, #332]	; (80081a4 <HAL_DMA_Abort_IT+0x1b8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d02c      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a52      	ldr	r2, [pc, #328]	; (80081a8 <HAL_DMA_Abort_IT+0x1bc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d027      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a50      	ldr	r2, [pc, #320]	; (80081ac <HAL_DMA_Abort_IT+0x1c0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d022      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a4f      	ldr	r2, [pc, #316]	; (80081b0 <HAL_DMA_Abort_IT+0x1c4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d01d      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a4d      	ldr	r2, [pc, #308]	; (80081b4 <HAL_DMA_Abort_IT+0x1c8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d018      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a4c      	ldr	r2, [pc, #304]	; (80081b8 <HAL_DMA_Abort_IT+0x1cc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a4a      	ldr	r2, [pc, #296]	; (80081bc <HAL_DMA_Abort_IT+0x1d0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00e      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a49      	ldr	r2, [pc, #292]	; (80081c0 <HAL_DMA_Abort_IT+0x1d4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a47      	ldr	r2, [pc, #284]	; (80081c4 <HAL_DMA_Abort_IT+0x1d8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <HAL_DMA_Abort_IT+0xc8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a46      	ldr	r2, [pc, #280]	; (80081c8 <HAL_DMA_Abort_IT+0x1dc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d101      	bne.n	80080b8 <HAL_DMA_Abort_IT+0xcc>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <HAL_DMA_Abort_IT+0xce>
 80080b8:	2300      	movs	r3, #0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 8086 	beq.w	80081cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2204      	movs	r2, #4
 80080c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a2f      	ldr	r2, [pc, #188]	; (800818c <HAL_DMA_Abort_IT+0x1a0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d04a      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a2e      	ldr	r2, [pc, #184]	; (8008190 <HAL_DMA_Abort_IT+0x1a4>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d045      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a2c      	ldr	r2, [pc, #176]	; (8008194 <HAL_DMA_Abort_IT+0x1a8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d040      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a2b      	ldr	r2, [pc, #172]	; (8008198 <HAL_DMA_Abort_IT+0x1ac>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d03b      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a29      	ldr	r2, [pc, #164]	; (800819c <HAL_DMA_Abort_IT+0x1b0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d036      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a28      	ldr	r2, [pc, #160]	; (80081a0 <HAL_DMA_Abort_IT+0x1b4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d031      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <HAL_DMA_Abort_IT+0x1b8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d02c      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a25      	ldr	r2, [pc, #148]	; (80081a8 <HAL_DMA_Abort_IT+0x1bc>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d027      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a23      	ldr	r2, [pc, #140]	; (80081ac <HAL_DMA_Abort_IT+0x1c0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d022      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <HAL_DMA_Abort_IT+0x1c4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d01d      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <HAL_DMA_Abort_IT+0x1c8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d018      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a1f      	ldr	r2, [pc, #124]	; (80081b8 <HAL_DMA_Abort_IT+0x1cc>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d013      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <HAL_DMA_Abort_IT+0x1d0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00e      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a1c      	ldr	r2, [pc, #112]	; (80081c0 <HAL_DMA_Abort_IT+0x1d4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d009      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <HAL_DMA_Abort_IT+0x1d8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d004      	beq.n	8008168 <HAL_DMA_Abort_IT+0x17c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a19      	ldr	r2, [pc, #100]	; (80081c8 <HAL_DMA_Abort_IT+0x1dc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <HAL_DMA_Abort_IT+0x18e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	e178      	b.n	800846c <HAL_DMA_Abort_IT+0x480>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0201 	bic.w	r2, r2, #1
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e16f      	b.n	800846c <HAL_DMA_Abort_IT+0x480>
 800818c:	40020010 	.word	0x40020010
 8008190:	40020028 	.word	0x40020028
 8008194:	40020040 	.word	0x40020040
 8008198:	40020058 	.word	0x40020058
 800819c:	40020070 	.word	0x40020070
 80081a0:	40020088 	.word	0x40020088
 80081a4:	400200a0 	.word	0x400200a0
 80081a8:	400200b8 	.word	0x400200b8
 80081ac:	40020410 	.word	0x40020410
 80081b0:	40020428 	.word	0x40020428
 80081b4:	40020440 	.word	0x40020440
 80081b8:	40020458 	.word	0x40020458
 80081bc:	40020470 	.word	0x40020470
 80081c0:	40020488 	.word	0x40020488
 80081c4:	400204a0 	.word	0x400204a0
 80081c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 020e 	bic.w	r2, r2, #14
 80081da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a6c      	ldr	r2, [pc, #432]	; (8008394 <HAL_DMA_Abort_IT+0x3a8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d04a      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a6b      	ldr	r2, [pc, #428]	; (8008398 <HAL_DMA_Abort_IT+0x3ac>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d045      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a69      	ldr	r2, [pc, #420]	; (800839c <HAL_DMA_Abort_IT+0x3b0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d040      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a68      	ldr	r2, [pc, #416]	; (80083a0 <HAL_DMA_Abort_IT+0x3b4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d03b      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a66      	ldr	r2, [pc, #408]	; (80083a4 <HAL_DMA_Abort_IT+0x3b8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d036      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a65      	ldr	r2, [pc, #404]	; (80083a8 <HAL_DMA_Abort_IT+0x3bc>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d031      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a63      	ldr	r2, [pc, #396]	; (80083ac <HAL_DMA_Abort_IT+0x3c0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d02c      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a62      	ldr	r2, [pc, #392]	; (80083b0 <HAL_DMA_Abort_IT+0x3c4>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d027      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a60      	ldr	r2, [pc, #384]	; (80083b4 <HAL_DMA_Abort_IT+0x3c8>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d022      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a5f      	ldr	r2, [pc, #380]	; (80083b8 <HAL_DMA_Abort_IT+0x3cc>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d01d      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a5d      	ldr	r2, [pc, #372]	; (80083bc <HAL_DMA_Abort_IT+0x3d0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d018      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a5c      	ldr	r2, [pc, #368]	; (80083c0 <HAL_DMA_Abort_IT+0x3d4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d013      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a5a      	ldr	r2, [pc, #360]	; (80083c4 <HAL_DMA_Abort_IT+0x3d8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00e      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a59      	ldr	r2, [pc, #356]	; (80083c8 <HAL_DMA_Abort_IT+0x3dc>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d009      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a57      	ldr	r2, [pc, #348]	; (80083cc <HAL_DMA_Abort_IT+0x3e0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <HAL_DMA_Abort_IT+0x290>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a56      	ldr	r2, [pc, #344]	; (80083d0 <HAL_DMA_Abort_IT+0x3e4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d108      	bne.n	800828e <HAL_DMA_Abort_IT+0x2a2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	e007      	b.n	800829e <HAL_DMA_Abort_IT+0x2b2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a3c      	ldr	r2, [pc, #240]	; (8008394 <HAL_DMA_Abort_IT+0x3a8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d072      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a3a      	ldr	r2, [pc, #232]	; (8008398 <HAL_DMA_Abort_IT+0x3ac>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d06d      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a39      	ldr	r2, [pc, #228]	; (800839c <HAL_DMA_Abort_IT+0x3b0>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d068      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a37      	ldr	r2, [pc, #220]	; (80083a0 <HAL_DMA_Abort_IT+0x3b4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d063      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a36      	ldr	r2, [pc, #216]	; (80083a4 <HAL_DMA_Abort_IT+0x3b8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d05e      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a34      	ldr	r2, [pc, #208]	; (80083a8 <HAL_DMA_Abort_IT+0x3bc>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d059      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a33      	ldr	r2, [pc, #204]	; (80083ac <HAL_DMA_Abort_IT+0x3c0>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d054      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a31      	ldr	r2, [pc, #196]	; (80083b0 <HAL_DMA_Abort_IT+0x3c4>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d04f      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a30      	ldr	r2, [pc, #192]	; (80083b4 <HAL_DMA_Abort_IT+0x3c8>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d04a      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a2e      	ldr	r2, [pc, #184]	; (80083b8 <HAL_DMA_Abort_IT+0x3cc>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d045      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a2d      	ldr	r2, [pc, #180]	; (80083bc <HAL_DMA_Abort_IT+0x3d0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d040      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a2b      	ldr	r2, [pc, #172]	; (80083c0 <HAL_DMA_Abort_IT+0x3d4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d03b      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a2a      	ldr	r2, [pc, #168]	; (80083c4 <HAL_DMA_Abort_IT+0x3d8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d036      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a28      	ldr	r2, [pc, #160]	; (80083c8 <HAL_DMA_Abort_IT+0x3dc>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d031      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a27      	ldr	r2, [pc, #156]	; (80083cc <HAL_DMA_Abort_IT+0x3e0>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d02c      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a25      	ldr	r2, [pc, #148]	; (80083d0 <HAL_DMA_Abort_IT+0x3e4>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d027      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a24      	ldr	r2, [pc, #144]	; (80083d4 <HAL_DMA_Abort_IT+0x3e8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d022      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a22      	ldr	r2, [pc, #136]	; (80083d8 <HAL_DMA_Abort_IT+0x3ec>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d01d      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a21      	ldr	r2, [pc, #132]	; (80083dc <HAL_DMA_Abort_IT+0x3f0>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d018      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1f      	ldr	r2, [pc, #124]	; (80083e0 <HAL_DMA_Abort_IT+0x3f4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d013      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <HAL_DMA_Abort_IT+0x3f8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00e      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <HAL_DMA_Abort_IT+0x3fc>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d009      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <HAL_DMA_Abort_IT+0x400>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d004      	beq.n	800838e <HAL_DMA_Abort_IT+0x3a2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <HAL_DMA_Abort_IT+0x404>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d132      	bne.n	80083f4 <HAL_DMA_Abort_IT+0x408>
 800838e:	2301      	movs	r3, #1
 8008390:	e031      	b.n	80083f6 <HAL_DMA_Abort_IT+0x40a>
 8008392:	bf00      	nop
 8008394:	40020010 	.word	0x40020010
 8008398:	40020028 	.word	0x40020028
 800839c:	40020040 	.word	0x40020040
 80083a0:	40020058 	.word	0x40020058
 80083a4:	40020070 	.word	0x40020070
 80083a8:	40020088 	.word	0x40020088
 80083ac:	400200a0 	.word	0x400200a0
 80083b0:	400200b8 	.word	0x400200b8
 80083b4:	40020410 	.word	0x40020410
 80083b8:	40020428 	.word	0x40020428
 80083bc:	40020440 	.word	0x40020440
 80083c0:	40020458 	.word	0x40020458
 80083c4:	40020470 	.word	0x40020470
 80083c8:	40020488 	.word	0x40020488
 80083cc:	400204a0 	.word	0x400204a0
 80083d0:	400204b8 	.word	0x400204b8
 80083d4:	58025408 	.word	0x58025408
 80083d8:	5802541c 	.word	0x5802541c
 80083dc:	58025430 	.word	0x58025430
 80083e0:	58025444 	.word	0x58025444
 80083e4:	58025458 	.word	0x58025458
 80083e8:	5802546c 	.word	0x5802546c
 80083ec:	58025480 	.word	0x58025480
 80083f0:	58025494 	.word	0x58025494
 80083f4:	2300      	movs	r3, #0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d028      	beq.n	800844c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008408:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	2201      	movs	r2, #1
 800841a:	409a      	lsls	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008428:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00c      	beq.n	800844c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800843c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008440:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800844a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop

08008478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008484:	4b67      	ldr	r3, [pc, #412]	; (8008624 <HAL_DMA_IRQHandler+0x1ac>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a67      	ldr	r2, [pc, #412]	; (8008628 <HAL_DMA_IRQHandler+0x1b0>)
 800848a:	fba2 2303 	umull	r2, r3, r2, r3
 800848e:	0a9b      	lsrs	r3, r3, #10
 8008490:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008496:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a5f      	ldr	r2, [pc, #380]	; (800862c <HAL_DMA_IRQHandler+0x1b4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d04a      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a5d      	ldr	r2, [pc, #372]	; (8008630 <HAL_DMA_IRQHandler+0x1b8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d045      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a5c      	ldr	r2, [pc, #368]	; (8008634 <HAL_DMA_IRQHandler+0x1bc>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d040      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a5a      	ldr	r2, [pc, #360]	; (8008638 <HAL_DMA_IRQHandler+0x1c0>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d03b      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a59      	ldr	r2, [pc, #356]	; (800863c <HAL_DMA_IRQHandler+0x1c4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d036      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a57      	ldr	r2, [pc, #348]	; (8008640 <HAL_DMA_IRQHandler+0x1c8>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d031      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a56      	ldr	r2, [pc, #344]	; (8008644 <HAL_DMA_IRQHandler+0x1cc>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d02c      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a54      	ldr	r2, [pc, #336]	; (8008648 <HAL_DMA_IRQHandler+0x1d0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d027      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a53      	ldr	r2, [pc, #332]	; (800864c <HAL_DMA_IRQHandler+0x1d4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d022      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a51      	ldr	r2, [pc, #324]	; (8008650 <HAL_DMA_IRQHandler+0x1d8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d01d      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a50      	ldr	r2, [pc, #320]	; (8008654 <HAL_DMA_IRQHandler+0x1dc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d018      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a4e      	ldr	r2, [pc, #312]	; (8008658 <HAL_DMA_IRQHandler+0x1e0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d013      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a4d      	ldr	r2, [pc, #308]	; (800865c <HAL_DMA_IRQHandler+0x1e4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d00e      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a4b      	ldr	r2, [pc, #300]	; (8008660 <HAL_DMA_IRQHandler+0x1e8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d009      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a4a      	ldr	r2, [pc, #296]	; (8008664 <HAL_DMA_IRQHandler+0x1ec>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d004      	beq.n	800854a <HAL_DMA_IRQHandler+0xd2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a48      	ldr	r2, [pc, #288]	; (8008668 <HAL_DMA_IRQHandler+0x1f0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d101      	bne.n	800854e <HAL_DMA_IRQHandler+0xd6>
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <HAL_DMA_IRQHandler+0xd8>
 800854e:	2300      	movs	r3, #0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 842b 	beq.w	8008dac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855a:	f003 031f 	and.w	r3, r3, #31
 800855e:	2208      	movs	r2, #8
 8008560:	409a      	lsls	r2, r3
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	4013      	ands	r3, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80a2 	beq.w	80086b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2e      	ldr	r2, [pc, #184]	; (800862c <HAL_DMA_IRQHandler+0x1b4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d04a      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2d      	ldr	r2, [pc, #180]	; (8008630 <HAL_DMA_IRQHandler+0x1b8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d045      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <HAL_DMA_IRQHandler+0x1bc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d040      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a2a      	ldr	r2, [pc, #168]	; (8008638 <HAL_DMA_IRQHandler+0x1c0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d03b      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a28      	ldr	r2, [pc, #160]	; (800863c <HAL_DMA_IRQHandler+0x1c4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d036      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a27      	ldr	r2, [pc, #156]	; (8008640 <HAL_DMA_IRQHandler+0x1c8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d031      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a25      	ldr	r2, [pc, #148]	; (8008644 <HAL_DMA_IRQHandler+0x1cc>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d02c      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a24      	ldr	r2, [pc, #144]	; (8008648 <HAL_DMA_IRQHandler+0x1d0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d027      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a22      	ldr	r2, [pc, #136]	; (800864c <HAL_DMA_IRQHandler+0x1d4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d022      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a21      	ldr	r2, [pc, #132]	; (8008650 <HAL_DMA_IRQHandler+0x1d8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d01d      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1f      	ldr	r2, [pc, #124]	; (8008654 <HAL_DMA_IRQHandler+0x1dc>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d018      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1e      	ldr	r2, [pc, #120]	; (8008658 <HAL_DMA_IRQHandler+0x1e0>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d013      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a1c      	ldr	r2, [pc, #112]	; (800865c <HAL_DMA_IRQHandler+0x1e4>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00e      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <HAL_DMA_IRQHandler+0x1e8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d009      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a19      	ldr	r2, [pc, #100]	; (8008664 <HAL_DMA_IRQHandler+0x1ec>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <HAL_DMA_IRQHandler+0x194>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a18      	ldr	r2, [pc, #96]	; (8008668 <HAL_DMA_IRQHandler+0x1f0>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d12f      	bne.n	800866c <HAL_DMA_IRQHandler+0x1f4>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	2301      	movne	r3, #1
 800861c:	2300      	moveq	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	e02e      	b.n	8008680 <HAL_DMA_IRQHandler+0x208>
 8008622:	bf00      	nop
 8008624:	24000004 	.word	0x24000004
 8008628:	1b4e81b5 	.word	0x1b4e81b5
 800862c:	40020010 	.word	0x40020010
 8008630:	40020028 	.word	0x40020028
 8008634:	40020040 	.word	0x40020040
 8008638:	40020058 	.word	0x40020058
 800863c:	40020070 	.word	0x40020070
 8008640:	40020088 	.word	0x40020088
 8008644:	400200a0 	.word	0x400200a0
 8008648:	400200b8 	.word	0x400200b8
 800864c:	40020410 	.word	0x40020410
 8008650:	40020428 	.word	0x40020428
 8008654:	40020440 	.word	0x40020440
 8008658:	40020458 	.word	0x40020458
 800865c:	40020470 	.word	0x40020470
 8008660:	40020488 	.word	0x40020488
 8008664:	400204a0 	.word	0x400204a0
 8008668:	400204b8 	.word	0x400204b8
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	bf14      	ite	ne
 800867a:	2301      	movne	r3, #1
 800867c:	2300      	moveq	r3, #0
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d015      	beq.n	80086b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0204 	bic.w	r2, r2, #4
 8008692:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	2208      	movs	r2, #8
 800869e:	409a      	lsls	r2, r3
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a8:	f043 0201 	orr.w	r2, r3, #1
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	fa22 f303 	lsr.w	r3, r2, r3
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d06e      	beq.n	80087a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a69      	ldr	r2, [pc, #420]	; (8008870 <HAL_DMA_IRQHandler+0x3f8>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d04a      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a67      	ldr	r2, [pc, #412]	; (8008874 <HAL_DMA_IRQHandler+0x3fc>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d045      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a66      	ldr	r2, [pc, #408]	; (8008878 <HAL_DMA_IRQHandler+0x400>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d040      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a64      	ldr	r2, [pc, #400]	; (800887c <HAL_DMA_IRQHandler+0x404>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d03b      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a63      	ldr	r2, [pc, #396]	; (8008880 <HAL_DMA_IRQHandler+0x408>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d036      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a61      	ldr	r2, [pc, #388]	; (8008884 <HAL_DMA_IRQHandler+0x40c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d031      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a60      	ldr	r2, [pc, #384]	; (8008888 <HAL_DMA_IRQHandler+0x410>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d02c      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a5e      	ldr	r2, [pc, #376]	; (800888c <HAL_DMA_IRQHandler+0x414>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d027      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a5d      	ldr	r2, [pc, #372]	; (8008890 <HAL_DMA_IRQHandler+0x418>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d022      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a5b      	ldr	r2, [pc, #364]	; (8008894 <HAL_DMA_IRQHandler+0x41c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d01d      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a5a      	ldr	r2, [pc, #360]	; (8008898 <HAL_DMA_IRQHandler+0x420>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d018      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a58      	ldr	r2, [pc, #352]	; (800889c <HAL_DMA_IRQHandler+0x424>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d013      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a57      	ldr	r2, [pc, #348]	; (80088a0 <HAL_DMA_IRQHandler+0x428>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a55      	ldr	r2, [pc, #340]	; (80088a4 <HAL_DMA_IRQHandler+0x42c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d009      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a54      	ldr	r2, [pc, #336]	; (80088a8 <HAL_DMA_IRQHandler+0x430>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_DMA_IRQHandler+0x2ee>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a52      	ldr	r2, [pc, #328]	; (80088ac <HAL_DMA_IRQHandler+0x434>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d10a      	bne.n	800877c <HAL_DMA_IRQHandler+0x304>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008770:	2b00      	cmp	r3, #0
 8008772:	bf14      	ite	ne
 8008774:	2301      	movne	r3, #1
 8008776:	2300      	moveq	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	e003      	b.n	8008784 <HAL_DMA_IRQHandler+0x30c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00d      	beq.n	80087a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	2201      	movs	r2, #1
 8008792:	409a      	lsls	r2, r3
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879c:	f043 0202 	orr.w	r2, r3, #2
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	2204      	movs	r2, #4
 80087ae:	409a      	lsls	r2, r3
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	4013      	ands	r3, r2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 808f 	beq.w	80088d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a2c      	ldr	r2, [pc, #176]	; (8008870 <HAL_DMA_IRQHandler+0x3f8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d04a      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a2a      	ldr	r2, [pc, #168]	; (8008874 <HAL_DMA_IRQHandler+0x3fc>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d045      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a29      	ldr	r2, [pc, #164]	; (8008878 <HAL_DMA_IRQHandler+0x400>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d040      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a27      	ldr	r2, [pc, #156]	; (800887c <HAL_DMA_IRQHandler+0x404>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d03b      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a26      	ldr	r2, [pc, #152]	; (8008880 <HAL_DMA_IRQHandler+0x408>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d036      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a24      	ldr	r2, [pc, #144]	; (8008884 <HAL_DMA_IRQHandler+0x40c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d031      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a23      	ldr	r2, [pc, #140]	; (8008888 <HAL_DMA_IRQHandler+0x410>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d02c      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a21      	ldr	r2, [pc, #132]	; (800888c <HAL_DMA_IRQHandler+0x414>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d027      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a20      	ldr	r2, [pc, #128]	; (8008890 <HAL_DMA_IRQHandler+0x418>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d022      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <HAL_DMA_IRQHandler+0x41c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d01d      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <HAL_DMA_IRQHandler+0x420>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d018      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1b      	ldr	r2, [pc, #108]	; (800889c <HAL_DMA_IRQHandler+0x424>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d013      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a1a      	ldr	r2, [pc, #104]	; (80088a0 <HAL_DMA_IRQHandler+0x428>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00e      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <HAL_DMA_IRQHandler+0x42c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d009      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <HAL_DMA_IRQHandler+0x430>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d004      	beq.n	800885a <HAL_DMA_IRQHandler+0x3e2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a15      	ldr	r2, [pc, #84]	; (80088ac <HAL_DMA_IRQHandler+0x434>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d12a      	bne.n	80088b0 <HAL_DMA_IRQHandler+0x438>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	bf14      	ite	ne
 8008868:	2301      	movne	r3, #1
 800886a:	2300      	moveq	r3, #0
 800886c:	b2db      	uxtb	r3, r3
 800886e:	e023      	b.n	80088b8 <HAL_DMA_IRQHandler+0x440>
 8008870:	40020010 	.word	0x40020010
 8008874:	40020028 	.word	0x40020028
 8008878:	40020040 	.word	0x40020040
 800887c:	40020058 	.word	0x40020058
 8008880:	40020070 	.word	0x40020070
 8008884:	40020088 	.word	0x40020088
 8008888:	400200a0 	.word	0x400200a0
 800888c:	400200b8 	.word	0x400200b8
 8008890:	40020410 	.word	0x40020410
 8008894:	40020428 	.word	0x40020428
 8008898:	40020440 	.word	0x40020440
 800889c:	40020458 	.word	0x40020458
 80088a0:	40020470 	.word	0x40020470
 80088a4:	40020488 	.word	0x40020488
 80088a8:	400204a0 	.word	0x400204a0
 80088ac:	400204b8 	.word	0x400204b8
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2300      	movs	r3, #0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00d      	beq.n	80088d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	2204      	movs	r2, #4
 80088c6:	409a      	lsls	r2, r3
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d0:	f043 0204 	orr.w	r2, r3, #4
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2210      	movs	r2, #16
 80088e2:	409a      	lsls	r2, r3
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	4013      	ands	r3, r2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80a6 	beq.w	8008a3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a85      	ldr	r2, [pc, #532]	; (8008b08 <HAL_DMA_IRQHandler+0x690>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d04a      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a83      	ldr	r2, [pc, #524]	; (8008b0c <HAL_DMA_IRQHandler+0x694>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d045      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a82      	ldr	r2, [pc, #520]	; (8008b10 <HAL_DMA_IRQHandler+0x698>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d040      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a80      	ldr	r2, [pc, #512]	; (8008b14 <HAL_DMA_IRQHandler+0x69c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d03b      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a7f      	ldr	r2, [pc, #508]	; (8008b18 <HAL_DMA_IRQHandler+0x6a0>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d036      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a7d      	ldr	r2, [pc, #500]	; (8008b1c <HAL_DMA_IRQHandler+0x6a4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d031      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a7c      	ldr	r2, [pc, #496]	; (8008b20 <HAL_DMA_IRQHandler+0x6a8>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d02c      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a7a      	ldr	r2, [pc, #488]	; (8008b24 <HAL_DMA_IRQHandler+0x6ac>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d027      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a79      	ldr	r2, [pc, #484]	; (8008b28 <HAL_DMA_IRQHandler+0x6b0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d022      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a77      	ldr	r2, [pc, #476]	; (8008b2c <HAL_DMA_IRQHandler+0x6b4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01d      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a76      	ldr	r2, [pc, #472]	; (8008b30 <HAL_DMA_IRQHandler+0x6b8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d018      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a74      	ldr	r2, [pc, #464]	; (8008b34 <HAL_DMA_IRQHandler+0x6bc>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d013      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a73      	ldr	r2, [pc, #460]	; (8008b38 <HAL_DMA_IRQHandler+0x6c0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00e      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a71      	ldr	r2, [pc, #452]	; (8008b3c <HAL_DMA_IRQHandler+0x6c4>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d009      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a70      	ldr	r2, [pc, #448]	; (8008b40 <HAL_DMA_IRQHandler+0x6c8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d004      	beq.n	800898e <HAL_DMA_IRQHandler+0x516>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a6e      	ldr	r2, [pc, #440]	; (8008b44 <HAL_DMA_IRQHandler+0x6cc>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d10a      	bne.n	80089a4 <HAL_DMA_IRQHandler+0x52c>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b00      	cmp	r3, #0
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	e009      	b.n	80089b8 <HAL_DMA_IRQHandler+0x540>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0304 	and.w	r3, r3, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf14      	ite	ne
 80089b2:	2301      	movne	r3, #1
 80089b4:	2300      	moveq	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d03e      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	2210      	movs	r2, #16
 80089c6:	409a      	lsls	r2, r3
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d018      	beq.n	8008a0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d108      	bne.n	80089fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d024      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	4798      	blx	r3
 80089f8:	e01f      	b.n	8008a3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01b      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
 8008a0a:	e016      	b.n	8008a3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d107      	bne.n	8008a2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0208 	bic.w	r2, r2, #8
 8008a28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a3e:	f003 031f 	and.w	r3, r3, #31
 8008a42:	2220      	movs	r2, #32
 8008a44:	409a      	lsls	r2, r3
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8110 	beq.w	8008c70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2c      	ldr	r2, [pc, #176]	; (8008b08 <HAL_DMA_IRQHandler+0x690>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d04a      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2b      	ldr	r2, [pc, #172]	; (8008b0c <HAL_DMA_IRQHandler+0x694>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d045      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a29      	ldr	r2, [pc, #164]	; (8008b10 <HAL_DMA_IRQHandler+0x698>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d040      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a28      	ldr	r2, [pc, #160]	; (8008b14 <HAL_DMA_IRQHandler+0x69c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d03b      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a26      	ldr	r2, [pc, #152]	; (8008b18 <HAL_DMA_IRQHandler+0x6a0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d036      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a25      	ldr	r2, [pc, #148]	; (8008b1c <HAL_DMA_IRQHandler+0x6a4>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d031      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a23      	ldr	r2, [pc, #140]	; (8008b20 <HAL_DMA_IRQHandler+0x6a8>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d02c      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a22      	ldr	r2, [pc, #136]	; (8008b24 <HAL_DMA_IRQHandler+0x6ac>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d027      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a20      	ldr	r2, [pc, #128]	; (8008b28 <HAL_DMA_IRQHandler+0x6b0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d022      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <HAL_DMA_IRQHandler+0x6b4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d01d      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	; (8008b30 <HAL_DMA_IRQHandler+0x6b8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d018      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <HAL_DMA_IRQHandler+0x6bc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1a      	ldr	r2, [pc, #104]	; (8008b38 <HAL_DMA_IRQHandler+0x6c0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00e      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a19      	ldr	r2, [pc, #100]	; (8008b3c <HAL_DMA_IRQHandler+0x6c4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d009      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a17      	ldr	r2, [pc, #92]	; (8008b40 <HAL_DMA_IRQHandler+0x6c8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d004      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x678>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a16      	ldr	r2, [pc, #88]	; (8008b44 <HAL_DMA_IRQHandler+0x6cc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d12b      	bne.n	8008b48 <HAL_DMA_IRQHandler+0x6d0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0310 	and.w	r3, r3, #16
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bf14      	ite	ne
 8008afe:	2301      	movne	r3, #1
 8008b00:	2300      	moveq	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	e02a      	b.n	8008b5c <HAL_DMA_IRQHandler+0x6e4>
 8008b06:	bf00      	nop
 8008b08:	40020010 	.word	0x40020010
 8008b0c:	40020028 	.word	0x40020028
 8008b10:	40020040 	.word	0x40020040
 8008b14:	40020058 	.word	0x40020058
 8008b18:	40020070 	.word	0x40020070
 8008b1c:	40020088 	.word	0x40020088
 8008b20:	400200a0 	.word	0x400200a0
 8008b24:	400200b8 	.word	0x400200b8
 8008b28:	40020410 	.word	0x40020410
 8008b2c:	40020428 	.word	0x40020428
 8008b30:	40020440 	.word	0x40020440
 8008b34:	40020458 	.word	0x40020458
 8008b38:	40020470 	.word	0x40020470
 8008b3c:	40020488 	.word	0x40020488
 8008b40:	400204a0 	.word	0x400204a0
 8008b44:	400204b8 	.word	0x400204b8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bf14      	ite	ne
 8008b56:	2301      	movne	r3, #1
 8008b58:	2300      	moveq	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8087 	beq.w	8008c70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b66:	f003 031f 	and.w	r3, r3, #31
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	409a      	lsls	r2, r3
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d139      	bne.n	8008bf2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 0216 	bic.w	r2, r2, #22
 8008b8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d103      	bne.n	8008bae <HAL_DMA_IRQHandler+0x736>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d007      	beq.n	8008bbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0208 	bic.w	r2, r2, #8
 8008bbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc2:	f003 031f 	and.w	r3, r3, #31
 8008bc6:	223f      	movs	r2, #63	; 0x3f
 8008bc8:	409a      	lsls	r2, r3
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 834a 	beq.w	800927c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	4798      	blx	r3
          }
          return;
 8008bf0:	e344      	b.n	800927c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d018      	beq.n	8008c32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d108      	bne.n	8008c20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d02c      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
 8008c1e:	e027      	b.n	8008c70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d023      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
 8008c30:	e01e      	b.n	8008c70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10f      	bne.n	8008c60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0210 	bic.w	r2, r2, #16
 8008c4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 8306 	beq.w	8009286 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 8088 	beq.w	8008d98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2204      	movs	r2, #4
 8008c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a7a      	ldr	r2, [pc, #488]	; (8008e80 <HAL_DMA_IRQHandler+0xa08>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d04a      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a79      	ldr	r2, [pc, #484]	; (8008e84 <HAL_DMA_IRQHandler+0xa0c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d045      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a77      	ldr	r2, [pc, #476]	; (8008e88 <HAL_DMA_IRQHandler+0xa10>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d040      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a76      	ldr	r2, [pc, #472]	; (8008e8c <HAL_DMA_IRQHandler+0xa14>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d03b      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a74      	ldr	r2, [pc, #464]	; (8008e90 <HAL_DMA_IRQHandler+0xa18>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d036      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a73      	ldr	r2, [pc, #460]	; (8008e94 <HAL_DMA_IRQHandler+0xa1c>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d031      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a71      	ldr	r2, [pc, #452]	; (8008e98 <HAL_DMA_IRQHandler+0xa20>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d02c      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a70      	ldr	r2, [pc, #448]	; (8008e9c <HAL_DMA_IRQHandler+0xa24>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d027      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a6e      	ldr	r2, [pc, #440]	; (8008ea0 <HAL_DMA_IRQHandler+0xa28>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d022      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a6d      	ldr	r2, [pc, #436]	; (8008ea4 <HAL_DMA_IRQHandler+0xa2c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d01d      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a6b      	ldr	r2, [pc, #428]	; (8008ea8 <HAL_DMA_IRQHandler+0xa30>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d018      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a6a      	ldr	r2, [pc, #424]	; (8008eac <HAL_DMA_IRQHandler+0xa34>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d013      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a68      	ldr	r2, [pc, #416]	; (8008eb0 <HAL_DMA_IRQHandler+0xa38>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00e      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a67      	ldr	r2, [pc, #412]	; (8008eb4 <HAL_DMA_IRQHandler+0xa3c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d009      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a65      	ldr	r2, [pc, #404]	; (8008eb8 <HAL_DMA_IRQHandler+0xa40>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d004      	beq.n	8008d30 <HAL_DMA_IRQHandler+0x8b8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a64      	ldr	r2, [pc, #400]	; (8008ebc <HAL_DMA_IRQHandler+0xa44>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d108      	bne.n	8008d42 <HAL_DMA_IRQHandler+0x8ca>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0201 	bic.w	r2, r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e007      	b.n	8008d52 <HAL_DMA_IRQHandler+0x8da>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f022 0201 	bic.w	r2, r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d307      	bcc.n	8008d6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1f2      	bne.n	8008d52 <HAL_DMA_IRQHandler+0x8da>
 8008d6c:	e000      	b.n	8008d70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008d6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2203      	movs	r2, #3
 8008d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008d86:	e003      	b.n	8008d90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8272 	beq.w	8009286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
 8008daa:	e26c      	b.n	8009286 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a43      	ldr	r2, [pc, #268]	; (8008ec0 <HAL_DMA_IRQHandler+0xa48>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d022      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x984>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a42      	ldr	r2, [pc, #264]	; (8008ec4 <HAL_DMA_IRQHandler+0xa4c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d01d      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x984>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a40      	ldr	r2, [pc, #256]	; (8008ec8 <HAL_DMA_IRQHandler+0xa50>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d018      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x984>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a3f      	ldr	r2, [pc, #252]	; (8008ecc <HAL_DMA_IRQHandler+0xa54>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d013      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x984>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a3d      	ldr	r2, [pc, #244]	; (8008ed0 <HAL_DMA_IRQHandler+0xa58>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00e      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x984>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a3c      	ldr	r2, [pc, #240]	; (8008ed4 <HAL_DMA_IRQHandler+0xa5c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d009      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x984>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a3a      	ldr	r2, [pc, #232]	; (8008ed8 <HAL_DMA_IRQHandler+0xa60>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d004      	beq.n	8008dfc <HAL_DMA_IRQHandler+0x984>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a39      	ldr	r2, [pc, #228]	; (8008edc <HAL_DMA_IRQHandler+0xa64>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d101      	bne.n	8008e00 <HAL_DMA_IRQHandler+0x988>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e000      	b.n	8008e02 <HAL_DMA_IRQHandler+0x98a>
 8008e00:	2300      	movs	r3, #0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 823f 	beq.w	8009286 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e14:	f003 031f 	and.w	r3, r3, #31
 8008e18:	2204      	movs	r2, #4
 8008e1a:	409a      	lsls	r2, r3
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80cd 	beq.w	8008fc0 <HAL_DMA_IRQHandler+0xb48>
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80c7 	beq.w	8008fc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e36:	f003 031f 	and.w	r3, r3, #31
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	409a      	lsls	r2, r3
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d049      	beq.n	8008ee0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8210 	beq.w	8009280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e68:	e20a      	b.n	8009280 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 8206 	beq.w	8009280 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e7c:	e200      	b.n	8009280 <HAL_DMA_IRQHandler+0xe08>
 8008e7e:	bf00      	nop
 8008e80:	40020010 	.word	0x40020010
 8008e84:	40020028 	.word	0x40020028
 8008e88:	40020040 	.word	0x40020040
 8008e8c:	40020058 	.word	0x40020058
 8008e90:	40020070 	.word	0x40020070
 8008e94:	40020088 	.word	0x40020088
 8008e98:	400200a0 	.word	0x400200a0
 8008e9c:	400200b8 	.word	0x400200b8
 8008ea0:	40020410 	.word	0x40020410
 8008ea4:	40020428 	.word	0x40020428
 8008ea8:	40020440 	.word	0x40020440
 8008eac:	40020458 	.word	0x40020458
 8008eb0:	40020470 	.word	0x40020470
 8008eb4:	40020488 	.word	0x40020488
 8008eb8:	400204a0 	.word	0x400204a0
 8008ebc:	400204b8 	.word	0x400204b8
 8008ec0:	58025408 	.word	0x58025408
 8008ec4:	5802541c 	.word	0x5802541c
 8008ec8:	58025430 	.word	0x58025430
 8008ecc:	58025444 	.word	0x58025444
 8008ed0:	58025458 	.word	0x58025458
 8008ed4:	5802546c 	.word	0x5802546c
 8008ed8:	58025480 	.word	0x58025480
 8008edc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d160      	bne.n	8008fac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a7f      	ldr	r2, [pc, #508]	; (80090ec <HAL_DMA_IRQHandler+0xc74>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d04a      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a7d      	ldr	r2, [pc, #500]	; (80090f0 <HAL_DMA_IRQHandler+0xc78>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d045      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a7c      	ldr	r2, [pc, #496]	; (80090f4 <HAL_DMA_IRQHandler+0xc7c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d040      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a7a      	ldr	r2, [pc, #488]	; (80090f8 <HAL_DMA_IRQHandler+0xc80>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d03b      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a79      	ldr	r2, [pc, #484]	; (80090fc <HAL_DMA_IRQHandler+0xc84>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d036      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a77      	ldr	r2, [pc, #476]	; (8009100 <HAL_DMA_IRQHandler+0xc88>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d031      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a76      	ldr	r2, [pc, #472]	; (8009104 <HAL_DMA_IRQHandler+0xc8c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d02c      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a74      	ldr	r2, [pc, #464]	; (8009108 <HAL_DMA_IRQHandler+0xc90>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d027      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a73      	ldr	r2, [pc, #460]	; (800910c <HAL_DMA_IRQHandler+0xc94>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d022      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a71      	ldr	r2, [pc, #452]	; (8009110 <HAL_DMA_IRQHandler+0xc98>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d01d      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a70      	ldr	r2, [pc, #448]	; (8009114 <HAL_DMA_IRQHandler+0xc9c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d018      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a6e      	ldr	r2, [pc, #440]	; (8009118 <HAL_DMA_IRQHandler+0xca0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d013      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a6d      	ldr	r2, [pc, #436]	; (800911c <HAL_DMA_IRQHandler+0xca4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00e      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a6b      	ldr	r2, [pc, #428]	; (8009120 <HAL_DMA_IRQHandler+0xca8>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d009      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a6a      	ldr	r2, [pc, #424]	; (8009124 <HAL_DMA_IRQHandler+0xcac>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d004      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xb12>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a68      	ldr	r2, [pc, #416]	; (8009128 <HAL_DMA_IRQHandler+0xcb0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d108      	bne.n	8008f9c <HAL_DMA_IRQHandler+0xb24>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 0208 	bic.w	r2, r2, #8
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	e007      	b.n	8008fac <HAL_DMA_IRQHandler+0xb34>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0204 	bic.w	r2, r2, #4
 8008faa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 8165 	beq.w	8009280 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fbe:	e15f      	b.n	8009280 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc4:	f003 031f 	and.w	r3, r3, #31
 8008fc8:	2202      	movs	r2, #2
 8008fca:	409a      	lsls	r2, r3
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4013      	ands	r3, r2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 80c5 	beq.w	8009160 <HAL_DMA_IRQHandler+0xce8>
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80bf 	beq.w	8009160 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe6:	f003 031f 	and.w	r3, r3, #31
 8008fea:	2202      	movs	r2, #2
 8008fec:	409a      	lsls	r2, r3
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d018      	beq.n	800902e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 813a 	beq.w	8009284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009018:	e134      	b.n	8009284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 8130 	beq.w	8009284 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800902c:	e12a      	b.n	8009284 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f003 0320 	and.w	r3, r3, #32
 8009034:	2b00      	cmp	r3, #0
 8009036:	f040 8089 	bne.w	800914c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a2b      	ldr	r2, [pc, #172]	; (80090ec <HAL_DMA_IRQHandler+0xc74>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d04a      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a29      	ldr	r2, [pc, #164]	; (80090f0 <HAL_DMA_IRQHandler+0xc78>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d045      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a28      	ldr	r2, [pc, #160]	; (80090f4 <HAL_DMA_IRQHandler+0xc7c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d040      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a26      	ldr	r2, [pc, #152]	; (80090f8 <HAL_DMA_IRQHandler+0xc80>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d03b      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a25      	ldr	r2, [pc, #148]	; (80090fc <HAL_DMA_IRQHandler+0xc84>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d036      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a23      	ldr	r2, [pc, #140]	; (8009100 <HAL_DMA_IRQHandler+0xc88>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d031      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a22      	ldr	r2, [pc, #136]	; (8009104 <HAL_DMA_IRQHandler+0xc8c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d02c      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a20      	ldr	r2, [pc, #128]	; (8009108 <HAL_DMA_IRQHandler+0xc90>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d027      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1f      	ldr	r2, [pc, #124]	; (800910c <HAL_DMA_IRQHandler+0xc94>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d022      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1d      	ldr	r2, [pc, #116]	; (8009110 <HAL_DMA_IRQHandler+0xc98>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d01d      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a1c      	ldr	r2, [pc, #112]	; (8009114 <HAL_DMA_IRQHandler+0xc9c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d018      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a1a      	ldr	r2, [pc, #104]	; (8009118 <HAL_DMA_IRQHandler+0xca0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d013      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a19      	ldr	r2, [pc, #100]	; (800911c <HAL_DMA_IRQHandler+0xca4>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00e      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a17      	ldr	r2, [pc, #92]	; (8009120 <HAL_DMA_IRQHandler+0xca8>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d009      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a16      	ldr	r2, [pc, #88]	; (8009124 <HAL_DMA_IRQHandler+0xcac>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d004      	beq.n	80090da <HAL_DMA_IRQHandler+0xc62>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a14      	ldr	r2, [pc, #80]	; (8009128 <HAL_DMA_IRQHandler+0xcb0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d128      	bne.n	800912c <HAL_DMA_IRQHandler+0xcb4>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 0214 	bic.w	r2, r2, #20
 80090e8:	601a      	str	r2, [r3, #0]
 80090ea:	e027      	b.n	800913c <HAL_DMA_IRQHandler+0xcc4>
 80090ec:	40020010 	.word	0x40020010
 80090f0:	40020028 	.word	0x40020028
 80090f4:	40020040 	.word	0x40020040
 80090f8:	40020058 	.word	0x40020058
 80090fc:	40020070 	.word	0x40020070
 8009100:	40020088 	.word	0x40020088
 8009104:	400200a0 	.word	0x400200a0
 8009108:	400200b8 	.word	0x400200b8
 800910c:	40020410 	.word	0x40020410
 8009110:	40020428 	.word	0x40020428
 8009114:	40020440 	.word	0x40020440
 8009118:	40020458 	.word	0x40020458
 800911c:	40020470 	.word	0x40020470
 8009120:	40020488 	.word	0x40020488
 8009124:	400204a0 	.word	0x400204a0
 8009128:	400204b8 	.word	0x400204b8
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 020a 	bic.w	r2, r2, #10
 800913a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 8097 	beq.w	8009284 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800915e:	e091      	b.n	8009284 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	2208      	movs	r2, #8
 800916a:	409a      	lsls	r2, r3
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8088 	beq.w	8009286 <HAL_DMA_IRQHandler+0xe0e>
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f003 0308 	and.w	r3, r3, #8
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 8082 	beq.w	8009286 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a41      	ldr	r2, [pc, #260]	; (800928c <HAL_DMA_IRQHandler+0xe14>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d04a      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a3f      	ldr	r2, [pc, #252]	; (8009290 <HAL_DMA_IRQHandler+0xe18>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d045      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a3e      	ldr	r2, [pc, #248]	; (8009294 <HAL_DMA_IRQHandler+0xe1c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d040      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a3c      	ldr	r2, [pc, #240]	; (8009298 <HAL_DMA_IRQHandler+0xe20>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d03b      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a3b      	ldr	r2, [pc, #236]	; (800929c <HAL_DMA_IRQHandler+0xe24>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d036      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a39      	ldr	r2, [pc, #228]	; (80092a0 <HAL_DMA_IRQHandler+0xe28>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d031      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a38      	ldr	r2, [pc, #224]	; (80092a4 <HAL_DMA_IRQHandler+0xe2c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d02c      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a36      	ldr	r2, [pc, #216]	; (80092a8 <HAL_DMA_IRQHandler+0xe30>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d027      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a35      	ldr	r2, [pc, #212]	; (80092ac <HAL_DMA_IRQHandler+0xe34>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d022      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a33      	ldr	r2, [pc, #204]	; (80092b0 <HAL_DMA_IRQHandler+0xe38>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d01d      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a32      	ldr	r2, [pc, #200]	; (80092b4 <HAL_DMA_IRQHandler+0xe3c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d018      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a30      	ldr	r2, [pc, #192]	; (80092b8 <HAL_DMA_IRQHandler+0xe40>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d013      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a2f      	ldr	r2, [pc, #188]	; (80092bc <HAL_DMA_IRQHandler+0xe44>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d00e      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a2d      	ldr	r2, [pc, #180]	; (80092c0 <HAL_DMA_IRQHandler+0xe48>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d009      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a2c      	ldr	r2, [pc, #176]	; (80092c4 <HAL_DMA_IRQHandler+0xe4c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d004      	beq.n	8009222 <HAL_DMA_IRQHandler+0xdaa>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a2a      	ldr	r2, [pc, #168]	; (80092c8 <HAL_DMA_IRQHandler+0xe50>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d108      	bne.n	8009234 <HAL_DMA_IRQHandler+0xdbc>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 021c 	bic.w	r2, r2, #28
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	e007      	b.n	8009244 <HAL_DMA_IRQHandler+0xdcc>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 020e 	bic.w	r2, r2, #14
 8009242:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009248:	f003 031f 	and.w	r3, r3, #31
 800924c:	2201      	movs	r2, #1
 800924e:	409a      	lsls	r2, r3
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
 800927a:	e004      	b.n	8009286 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800927c:	bf00      	nop
 800927e:	e002      	b.n	8009286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009280:	bf00      	nop
 8009282:	e000      	b.n	8009286 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009284:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009286:	3728      	adds	r7, #40	; 0x28
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40020010 	.word	0x40020010
 8009290:	40020028 	.word	0x40020028
 8009294:	40020040 	.word	0x40020040
 8009298:	40020058 	.word	0x40020058
 800929c:	40020070 	.word	0x40020070
 80092a0:	40020088 	.word	0x40020088
 80092a4:	400200a0 	.word	0x400200a0
 80092a8:	400200b8 	.word	0x400200b8
 80092ac:	40020410 	.word	0x40020410
 80092b0:	40020428 	.word	0x40020428
 80092b4:	40020440 	.word	0x40020440
 80092b8:	40020458 	.word	0x40020458
 80092bc:	40020470 	.word	0x40020470
 80092c0:	40020488 	.word	0x40020488
 80092c4:	400204a0 	.word	0x400204a0
 80092c8:	400204b8 	.word	0x400204b8

080092cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a7f      	ldr	r2, [pc, #508]	; (80094e8 <DMA_SetConfig+0x21c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d072      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a7d      	ldr	r2, [pc, #500]	; (80094ec <DMA_SetConfig+0x220>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d06d      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a7c      	ldr	r2, [pc, #496]	; (80094f0 <DMA_SetConfig+0x224>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d068      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a7a      	ldr	r2, [pc, #488]	; (80094f4 <DMA_SetConfig+0x228>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d063      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a79      	ldr	r2, [pc, #484]	; (80094f8 <DMA_SetConfig+0x22c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d05e      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a77      	ldr	r2, [pc, #476]	; (80094fc <DMA_SetConfig+0x230>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d059      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a76      	ldr	r2, [pc, #472]	; (8009500 <DMA_SetConfig+0x234>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d054      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a74      	ldr	r2, [pc, #464]	; (8009504 <DMA_SetConfig+0x238>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d04f      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a73      	ldr	r2, [pc, #460]	; (8009508 <DMA_SetConfig+0x23c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d04a      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a71      	ldr	r2, [pc, #452]	; (800950c <DMA_SetConfig+0x240>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d045      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a70      	ldr	r2, [pc, #448]	; (8009510 <DMA_SetConfig+0x244>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d040      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a6e      	ldr	r2, [pc, #440]	; (8009514 <DMA_SetConfig+0x248>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d03b      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a6d      	ldr	r2, [pc, #436]	; (8009518 <DMA_SetConfig+0x24c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d036      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a6b      	ldr	r2, [pc, #428]	; (800951c <DMA_SetConfig+0x250>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d031      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a6a      	ldr	r2, [pc, #424]	; (8009520 <DMA_SetConfig+0x254>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d02c      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a68      	ldr	r2, [pc, #416]	; (8009524 <DMA_SetConfig+0x258>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d027      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a67      	ldr	r2, [pc, #412]	; (8009528 <DMA_SetConfig+0x25c>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d022      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a65      	ldr	r2, [pc, #404]	; (800952c <DMA_SetConfig+0x260>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d01d      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a64      	ldr	r2, [pc, #400]	; (8009530 <DMA_SetConfig+0x264>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d018      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a62      	ldr	r2, [pc, #392]	; (8009534 <DMA_SetConfig+0x268>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d013      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a61      	ldr	r2, [pc, #388]	; (8009538 <DMA_SetConfig+0x26c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d00e      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a5f      	ldr	r2, [pc, #380]	; (800953c <DMA_SetConfig+0x270>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d009      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a5e      	ldr	r2, [pc, #376]	; (8009540 <DMA_SetConfig+0x274>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d004      	beq.n	80093d6 <DMA_SetConfig+0x10a>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a5c      	ldr	r2, [pc, #368]	; (8009544 <DMA_SetConfig+0x278>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d101      	bne.n	80093da <DMA_SetConfig+0x10e>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e000      	b.n	80093dc <DMA_SetConfig+0x110>
 80093da:	2300      	movs	r3, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80093e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d004      	beq.n	80093fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80093fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a39      	ldr	r2, [pc, #228]	; (80094e8 <DMA_SetConfig+0x21c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d04a      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a38      	ldr	r2, [pc, #224]	; (80094ec <DMA_SetConfig+0x220>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d045      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a36      	ldr	r2, [pc, #216]	; (80094f0 <DMA_SetConfig+0x224>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d040      	beq.n	800949c <DMA_SetConfig+0x1d0>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a35      	ldr	r2, [pc, #212]	; (80094f4 <DMA_SetConfig+0x228>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d03b      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a33      	ldr	r2, [pc, #204]	; (80094f8 <DMA_SetConfig+0x22c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d036      	beq.n	800949c <DMA_SetConfig+0x1d0>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a32      	ldr	r2, [pc, #200]	; (80094fc <DMA_SetConfig+0x230>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d031      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a30      	ldr	r2, [pc, #192]	; (8009500 <DMA_SetConfig+0x234>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d02c      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a2f      	ldr	r2, [pc, #188]	; (8009504 <DMA_SetConfig+0x238>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d027      	beq.n	800949c <DMA_SetConfig+0x1d0>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a2d      	ldr	r2, [pc, #180]	; (8009508 <DMA_SetConfig+0x23c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d022      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a2c      	ldr	r2, [pc, #176]	; (800950c <DMA_SetConfig+0x240>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d01d      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a2a      	ldr	r2, [pc, #168]	; (8009510 <DMA_SetConfig+0x244>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d018      	beq.n	800949c <DMA_SetConfig+0x1d0>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a29      	ldr	r2, [pc, #164]	; (8009514 <DMA_SetConfig+0x248>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d013      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a27      	ldr	r2, [pc, #156]	; (8009518 <DMA_SetConfig+0x24c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d00e      	beq.n	800949c <DMA_SetConfig+0x1d0>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a26      	ldr	r2, [pc, #152]	; (800951c <DMA_SetConfig+0x250>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d009      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a24      	ldr	r2, [pc, #144]	; (8009520 <DMA_SetConfig+0x254>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d004      	beq.n	800949c <DMA_SetConfig+0x1d0>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a23      	ldr	r2, [pc, #140]	; (8009524 <DMA_SetConfig+0x258>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d101      	bne.n	80094a0 <DMA_SetConfig+0x1d4>
 800949c:	2301      	movs	r3, #1
 800949e:	e000      	b.n	80094a2 <DMA_SetConfig+0x1d6>
 80094a0:	2300      	movs	r3, #0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d059      	beq.n	800955a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094aa:	f003 031f 	and.w	r3, r3, #31
 80094ae:	223f      	movs	r2, #63	; 0x3f
 80094b0:	409a      	lsls	r2, r3
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	2b40      	cmp	r3, #64	; 0x40
 80094d4:	d138      	bne.n	8009548 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80094e6:	e086      	b.n	80095f6 <DMA_SetConfig+0x32a>
 80094e8:	40020010 	.word	0x40020010
 80094ec:	40020028 	.word	0x40020028
 80094f0:	40020040 	.word	0x40020040
 80094f4:	40020058 	.word	0x40020058
 80094f8:	40020070 	.word	0x40020070
 80094fc:	40020088 	.word	0x40020088
 8009500:	400200a0 	.word	0x400200a0
 8009504:	400200b8 	.word	0x400200b8
 8009508:	40020410 	.word	0x40020410
 800950c:	40020428 	.word	0x40020428
 8009510:	40020440 	.word	0x40020440
 8009514:	40020458 	.word	0x40020458
 8009518:	40020470 	.word	0x40020470
 800951c:	40020488 	.word	0x40020488
 8009520:	400204a0 	.word	0x400204a0
 8009524:	400204b8 	.word	0x400204b8
 8009528:	58025408 	.word	0x58025408
 800952c:	5802541c 	.word	0x5802541c
 8009530:	58025430 	.word	0x58025430
 8009534:	58025444 	.word	0x58025444
 8009538:	58025458 	.word	0x58025458
 800953c:	5802546c 	.word	0x5802546c
 8009540:	58025480 	.word	0x58025480
 8009544:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	60da      	str	r2, [r3, #12]
}
 8009558:	e04d      	b.n	80095f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a29      	ldr	r2, [pc, #164]	; (8009604 <DMA_SetConfig+0x338>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d022      	beq.n	80095aa <DMA_SetConfig+0x2de>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a27      	ldr	r2, [pc, #156]	; (8009608 <DMA_SetConfig+0x33c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d01d      	beq.n	80095aa <DMA_SetConfig+0x2de>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a26      	ldr	r2, [pc, #152]	; (800960c <DMA_SetConfig+0x340>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d018      	beq.n	80095aa <DMA_SetConfig+0x2de>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a24      	ldr	r2, [pc, #144]	; (8009610 <DMA_SetConfig+0x344>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d013      	beq.n	80095aa <DMA_SetConfig+0x2de>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a23      	ldr	r2, [pc, #140]	; (8009614 <DMA_SetConfig+0x348>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d00e      	beq.n	80095aa <DMA_SetConfig+0x2de>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a21      	ldr	r2, [pc, #132]	; (8009618 <DMA_SetConfig+0x34c>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d009      	beq.n	80095aa <DMA_SetConfig+0x2de>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a20      	ldr	r2, [pc, #128]	; (800961c <DMA_SetConfig+0x350>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d004      	beq.n	80095aa <DMA_SetConfig+0x2de>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <DMA_SetConfig+0x354>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d101      	bne.n	80095ae <DMA_SetConfig+0x2e2>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <DMA_SetConfig+0x2e4>
 80095ae:	2300      	movs	r3, #0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d020      	beq.n	80095f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b8:	f003 031f 	and.w	r3, r3, #31
 80095bc:	2201      	movs	r2, #1
 80095be:	409a      	lsls	r2, r3
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	683a      	ldr	r2, [r7, #0]
 80095ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b40      	cmp	r3, #64	; 0x40
 80095d2:	d108      	bne.n	80095e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	60da      	str	r2, [r3, #12]
}
 80095e4:	e007      	b.n	80095f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	60da      	str	r2, [r3, #12]
}
 80095f6:	bf00      	nop
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	58025408 	.word	0x58025408
 8009608:	5802541c 	.word	0x5802541c
 800960c:	58025430 	.word	0x58025430
 8009610:	58025444 	.word	0x58025444
 8009614:	58025458 	.word	0x58025458
 8009618:	5802546c 	.word	0x5802546c
 800961c:	58025480 	.word	0x58025480
 8009620:	58025494 	.word	0x58025494

08009624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a42      	ldr	r2, [pc, #264]	; (800973c <DMA_CalcBaseAndBitshift+0x118>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d04a      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a41      	ldr	r2, [pc, #260]	; (8009740 <DMA_CalcBaseAndBitshift+0x11c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d045      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a3f      	ldr	r2, [pc, #252]	; (8009744 <DMA_CalcBaseAndBitshift+0x120>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d040      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a3e      	ldr	r2, [pc, #248]	; (8009748 <DMA_CalcBaseAndBitshift+0x124>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d03b      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a3c      	ldr	r2, [pc, #240]	; (800974c <DMA_CalcBaseAndBitshift+0x128>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d036      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a3b      	ldr	r2, [pc, #236]	; (8009750 <DMA_CalcBaseAndBitshift+0x12c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d031      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a39      	ldr	r2, [pc, #228]	; (8009754 <DMA_CalcBaseAndBitshift+0x130>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d02c      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a38      	ldr	r2, [pc, #224]	; (8009758 <DMA_CalcBaseAndBitshift+0x134>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d027      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a36      	ldr	r2, [pc, #216]	; (800975c <DMA_CalcBaseAndBitshift+0x138>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d022      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a35      	ldr	r2, [pc, #212]	; (8009760 <DMA_CalcBaseAndBitshift+0x13c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d01d      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a33      	ldr	r2, [pc, #204]	; (8009764 <DMA_CalcBaseAndBitshift+0x140>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d018      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a32      	ldr	r2, [pc, #200]	; (8009768 <DMA_CalcBaseAndBitshift+0x144>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d013      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a30      	ldr	r2, [pc, #192]	; (800976c <DMA_CalcBaseAndBitshift+0x148>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00e      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a2f      	ldr	r2, [pc, #188]	; (8009770 <DMA_CalcBaseAndBitshift+0x14c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d009      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a2d      	ldr	r2, [pc, #180]	; (8009774 <DMA_CalcBaseAndBitshift+0x150>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d004      	beq.n	80096cc <DMA_CalcBaseAndBitshift+0xa8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a2c      	ldr	r2, [pc, #176]	; (8009778 <DMA_CalcBaseAndBitshift+0x154>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d101      	bne.n	80096d0 <DMA_CalcBaseAndBitshift+0xac>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e000      	b.n	80096d2 <DMA_CalcBaseAndBitshift+0xae>
 80096d0:	2300      	movs	r3, #0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d024      	beq.n	8009720 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	3b10      	subs	r3, #16
 80096de:	4a27      	ldr	r2, [pc, #156]	; (800977c <DMA_CalcBaseAndBitshift+0x158>)
 80096e0:	fba2 2303 	umull	r2, r3, r2, r3
 80096e4:	091b      	lsrs	r3, r3, #4
 80096e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f003 0307 	and.w	r3, r3, #7
 80096ee:	4a24      	ldr	r2, [pc, #144]	; (8009780 <DMA_CalcBaseAndBitshift+0x15c>)
 80096f0:	5cd3      	ldrb	r3, [r2, r3]
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d908      	bls.n	8009710 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	4b1f      	ldr	r3, [pc, #124]	; (8009784 <DMA_CalcBaseAndBitshift+0x160>)
 8009706:	4013      	ands	r3, r2
 8009708:	1d1a      	adds	r2, r3, #4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	659a      	str	r2, [r3, #88]	; 0x58
 800970e:	e00d      	b.n	800972c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	4b1b      	ldr	r3, [pc, #108]	; (8009784 <DMA_CalcBaseAndBitshift+0x160>)
 8009718:	4013      	ands	r3, r2
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6593      	str	r3, [r2, #88]	; 0x58
 800971e:	e005      	b.n	800972c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	40020010 	.word	0x40020010
 8009740:	40020028 	.word	0x40020028
 8009744:	40020040 	.word	0x40020040
 8009748:	40020058 	.word	0x40020058
 800974c:	40020070 	.word	0x40020070
 8009750:	40020088 	.word	0x40020088
 8009754:	400200a0 	.word	0x400200a0
 8009758:	400200b8 	.word	0x400200b8
 800975c:	40020410 	.word	0x40020410
 8009760:	40020428 	.word	0x40020428
 8009764:	40020440 	.word	0x40020440
 8009768:	40020458 	.word	0x40020458
 800976c:	40020470 	.word	0x40020470
 8009770:	40020488 	.word	0x40020488
 8009774:	400204a0 	.word	0x400204a0
 8009778:	400204b8 	.word	0x400204b8
 800977c:	aaaaaaab 	.word	0xaaaaaaab
 8009780:	08011360 	.word	0x08011360
 8009784:	fffffc00 	.word	0xfffffc00

08009788 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d120      	bne.n	80097de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d858      	bhi.n	8009856 <DMA_CheckFifoParam+0xce>
 80097a4:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <DMA_CheckFifoParam+0x24>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	080097bd 	.word	0x080097bd
 80097b0:	080097cf 	.word	0x080097cf
 80097b4:	080097bd 	.word	0x080097bd
 80097b8:	08009857 	.word	0x08009857
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d048      	beq.n	800985a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097cc:	e045      	b.n	800985a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097d6:	d142      	bne.n	800985e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097dc:	e03f      	b.n	800985e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e6:	d123      	bne.n	8009830 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d838      	bhi.n	8009862 <DMA_CheckFifoParam+0xda>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <DMA_CheckFifoParam+0x70>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009809 	.word	0x08009809
 80097fc:	0800980f 	.word	0x0800980f
 8009800:	08009809 	.word	0x08009809
 8009804:	08009821 	.word	0x08009821
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	73fb      	strb	r3, [r7, #15]
        break;
 800980c:	e030      	b.n	8009870 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d025      	beq.n	8009866 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800981e:	e022      	b.n	8009866 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009828:	d11f      	bne.n	800986a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800982e:	e01c      	b.n	800986a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	2b02      	cmp	r3, #2
 8009836:	d902      	bls.n	800983e <DMA_CheckFifoParam+0xb6>
 8009838:	2b03      	cmp	r3, #3
 800983a:	d003      	beq.n	8009844 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800983c:	e018      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	73fb      	strb	r3, [r7, #15]
        break;
 8009842:	e015      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00e      	beq.n	800986e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	73fb      	strb	r3, [r7, #15]
    break;
 8009854:	e00b      	b.n	800986e <DMA_CheckFifoParam+0xe6>
        break;
 8009856:	bf00      	nop
 8009858:	e00a      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
        break;
 800985a:	bf00      	nop
 800985c:	e008      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
        break;
 800985e:	bf00      	nop
 8009860:	e006      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
        break;
 8009862:	bf00      	nop
 8009864:	e004      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
        break;
 8009866:	bf00      	nop
 8009868:	e002      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
        break;
 800986a:	bf00      	nop
 800986c:	e000      	b.n	8009870 <DMA_CheckFifoParam+0xe8>
    break;
 800986e:	bf00      	nop
    }
  }

  return status;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop

08009880 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a38      	ldr	r2, [pc, #224]	; (8009974 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d022      	beq.n	80098de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a36      	ldr	r2, [pc, #216]	; (8009978 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d01d      	beq.n	80098de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a35      	ldr	r2, [pc, #212]	; (800997c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d018      	beq.n	80098de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a33      	ldr	r2, [pc, #204]	; (8009980 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d013      	beq.n	80098de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a32      	ldr	r2, [pc, #200]	; (8009984 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d00e      	beq.n	80098de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a30      	ldr	r2, [pc, #192]	; (8009988 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d009      	beq.n	80098de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a2f      	ldr	r2, [pc, #188]	; (800998c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d004      	beq.n	80098de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a2d      	ldr	r2, [pc, #180]	; (8009990 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d101      	bne.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80098de:	2301      	movs	r3, #1
 80098e0:	e000      	b.n	80098e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80098e2:	2300      	movs	r3, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01a      	beq.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	3b08      	subs	r3, #8
 80098f0:	4a28      	ldr	r2, [pc, #160]	; (8009994 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80098f2:	fba2 2303 	umull	r2, r3, r2, r3
 80098f6:	091b      	lsrs	r3, r3, #4
 80098f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4b26      	ldr	r3, [pc, #152]	; (8009998 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	461a      	mov	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a24      	ldr	r2, [pc, #144]	; (800999c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800990c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f003 031f 	and.w	r3, r3, #31
 8009914:	2201      	movs	r2, #1
 8009916:	409a      	lsls	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800991c:	e024      	b.n	8009968 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	3b10      	subs	r3, #16
 8009926:	4a1e      	ldr	r2, [pc, #120]	; (80099a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009928:	fba2 2303 	umull	r2, r3, r2, r3
 800992c:	091b      	lsrs	r3, r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	4a1c      	ldr	r2, [pc, #112]	; (80099a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d806      	bhi.n	8009946 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4a1b      	ldr	r2, [pc, #108]	; (80099a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d902      	bls.n	8009946 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3308      	adds	r3, #8
 8009944:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4b18      	ldr	r3, [pc, #96]	; (80099ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	461a      	mov	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a16      	ldr	r2, [pc, #88]	; (80099b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009958:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	2201      	movs	r2, #1
 8009962:	409a      	lsls	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009968:	bf00      	nop
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	58025408 	.word	0x58025408
 8009978:	5802541c 	.word	0x5802541c
 800997c:	58025430 	.word	0x58025430
 8009980:	58025444 	.word	0x58025444
 8009984:	58025458 	.word	0x58025458
 8009988:	5802546c 	.word	0x5802546c
 800998c:	58025480 	.word	0x58025480
 8009990:	58025494 	.word	0x58025494
 8009994:	cccccccd 	.word	0xcccccccd
 8009998:	16009600 	.word	0x16009600
 800999c:	58025880 	.word	0x58025880
 80099a0:	aaaaaaab 	.word	0xaaaaaaab
 80099a4:	400204b8 	.word	0x400204b8
 80099a8:	4002040f 	.word	0x4002040f
 80099ac:	10008200 	.word	0x10008200
 80099b0:	40020880 	.word	0x40020880

080099b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d04a      	beq.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d847      	bhi.n	8009a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a25      	ldr	r2, [pc, #148]	; (8009a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d022      	beq.n	8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a24      	ldr	r2, [pc, #144]	; (8009a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d01d      	beq.n	8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a22      	ldr	r2, [pc, #136]	; (8009a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d018      	beq.n	8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a21      	ldr	r2, [pc, #132]	; (8009a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d013      	beq.n	8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1f      	ldr	r2, [pc, #124]	; (8009a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00e      	beq.n	8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d009      	beq.n	8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1c      	ldr	r2, [pc, #112]	; (8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1b      	ldr	r2, [pc, #108]	; (8009a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d101      	bne.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e000      	b.n	8009a26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009a24:	2300      	movs	r3, #0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	4b17      	ldr	r3, [pc, #92]	; (8009a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	461a      	mov	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009a3c:	671a      	str	r2, [r3, #112]	; 0x70
 8009a3e:	e009      	b.n	8009a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a11      	ldr	r2, [pc, #68]	; (8009a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009a52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	2201      	movs	r2, #1
 8009a5a:	409a      	lsls	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009a60:	bf00      	nop
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	58025408 	.word	0x58025408
 8009a70:	5802541c 	.word	0x5802541c
 8009a74:	58025430 	.word	0x58025430
 8009a78:	58025444 	.word	0x58025444
 8009a7c:	58025458 	.word	0x58025458
 8009a80:	5802546c 	.word	0x5802546c
 8009a84:	58025480 	.word	0x58025480
 8009a88:	58025494 	.word	0x58025494
 8009a8c:	1600963f 	.word	0x1600963f
 8009a90:	58025940 	.word	0x58025940
 8009a94:	1000823f 	.word	0x1000823f
 8009a98:	40020940 	.word	0x40020940

08009a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b089      	sub	sp, #36	; 0x24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009aaa:	4b86      	ldr	r3, [pc, #536]	; (8009cc4 <HAL_GPIO_Init+0x228>)
 8009aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009aae:	e18c      	b.n	8009dca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8009abc:	4013      	ands	r3, r2
 8009abe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 817e 	beq.w	8009dc4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d005      	beq.n	8009ae0 <HAL_GPIO_Init+0x44>
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f003 0303 	and.w	r3, r3, #3
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d130      	bne.n	8009b42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	2203      	movs	r2, #3
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	43db      	mvns	r3, r3
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	4013      	ands	r3, r2
 8009af6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	fa02 f303 	lsl.w	r3, r2, r3
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b16:	2201      	movs	r2, #1
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1e:	43db      	mvns	r3, r3
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	4013      	ands	r3, r2
 8009b24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	091b      	lsrs	r3, r3, #4
 8009b2c:	f003 0201 	and.w	r2, r3, #1
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	fa02 f303 	lsl.w	r3, r2, r3
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f003 0303 	and.w	r3, r3, #3
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d017      	beq.n	8009b7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	2203      	movs	r2, #3
 8009b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5e:	43db      	mvns	r3, r3
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	4013      	ands	r3, r2
 8009b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	689a      	ldr	r2, [r3, #8]
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	005b      	lsls	r3, r3, #1
 8009b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d123      	bne.n	8009bd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	08da      	lsrs	r2, r3, #3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3208      	adds	r2, #8
 8009b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	220f      	movs	r2, #15
 8009ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba6:	43db      	mvns	r3, r3
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	4013      	ands	r3, r2
 8009bac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	f003 0307 	and.w	r3, r3, #7
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	fa02 f303 	lsl.w	r3, r2, r3
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	08da      	lsrs	r2, r3, #3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	3208      	adds	r2, #8
 8009bcc:	69b9      	ldr	r1, [r7, #24]
 8009bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	2203      	movs	r2, #3
 8009bde:	fa02 f303 	lsl.w	r3, r2, r3
 8009be2:	43db      	mvns	r3, r3
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	4013      	ands	r3, r2
 8009be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f003 0203 	and.w	r2, r3, #3
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 80d8 	beq.w	8009dc4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c14:	4b2c      	ldr	r3, [pc, #176]	; (8009cc8 <HAL_GPIO_Init+0x22c>)
 8009c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c1a:	4a2b      	ldr	r2, [pc, #172]	; (8009cc8 <HAL_GPIO_Init+0x22c>)
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009c24:	4b28      	ldr	r3, [pc, #160]	; (8009cc8 <HAL_GPIO_Init+0x22c>)
 8009c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c32:	4a26      	ldr	r2, [pc, #152]	; (8009ccc <HAL_GPIO_Init+0x230>)
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	089b      	lsrs	r3, r3, #2
 8009c38:	3302      	adds	r3, #2
 8009c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	f003 0303 	and.w	r3, r3, #3
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	220f      	movs	r2, #15
 8009c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4e:	43db      	mvns	r3, r3
 8009c50:	69ba      	ldr	r2, [r7, #24]
 8009c52:	4013      	ands	r3, r2
 8009c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a1d      	ldr	r2, [pc, #116]	; (8009cd0 <HAL_GPIO_Init+0x234>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d04a      	beq.n	8009cf4 <HAL_GPIO_Init+0x258>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a1c      	ldr	r2, [pc, #112]	; (8009cd4 <HAL_GPIO_Init+0x238>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d02b      	beq.n	8009cbe <HAL_GPIO_Init+0x222>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a1b      	ldr	r2, [pc, #108]	; (8009cd8 <HAL_GPIO_Init+0x23c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d025      	beq.n	8009cba <HAL_GPIO_Init+0x21e>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a1a      	ldr	r2, [pc, #104]	; (8009cdc <HAL_GPIO_Init+0x240>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d01f      	beq.n	8009cb6 <HAL_GPIO_Init+0x21a>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a19      	ldr	r2, [pc, #100]	; (8009ce0 <HAL_GPIO_Init+0x244>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d019      	beq.n	8009cb2 <HAL_GPIO_Init+0x216>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <HAL_GPIO_Init+0x248>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d013      	beq.n	8009cae <HAL_GPIO_Init+0x212>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <HAL_GPIO_Init+0x24c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00d      	beq.n	8009caa <HAL_GPIO_Init+0x20e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a16      	ldr	r2, [pc, #88]	; (8009cec <HAL_GPIO_Init+0x250>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d007      	beq.n	8009ca6 <HAL_GPIO_Init+0x20a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <HAL_GPIO_Init+0x254>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d101      	bne.n	8009ca2 <HAL_GPIO_Init+0x206>
 8009c9e:	2309      	movs	r3, #9
 8009ca0:	e029      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009ca2:	230a      	movs	r3, #10
 8009ca4:	e027      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009ca6:	2307      	movs	r3, #7
 8009ca8:	e025      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009caa:	2306      	movs	r3, #6
 8009cac:	e023      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009cae:	2305      	movs	r3, #5
 8009cb0:	e021      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009cb2:	2304      	movs	r3, #4
 8009cb4:	e01f      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e01d      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e01b      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e019      	b.n	8009cf6 <HAL_GPIO_Init+0x25a>
 8009cc2:	bf00      	nop
 8009cc4:	58000080 	.word	0x58000080
 8009cc8:	58024400 	.word	0x58024400
 8009ccc:	58000400 	.word	0x58000400
 8009cd0:	58020000 	.word	0x58020000
 8009cd4:	58020400 	.word	0x58020400
 8009cd8:	58020800 	.word	0x58020800
 8009cdc:	58020c00 	.word	0x58020c00
 8009ce0:	58021000 	.word	0x58021000
 8009ce4:	58021400 	.word	0x58021400
 8009ce8:	58021800 	.word	0x58021800
 8009cec:	58021c00 	.word	0x58021c00
 8009cf0:	58022400 	.word	0x58022400
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	f002 0203 	and.w	r2, r2, #3
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	4093      	lsls	r3, r2
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d06:	4938      	ldr	r1, [pc, #224]	; (8009de8 <HAL_GPIO_Init+0x34c>)
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	089b      	lsrs	r3, r3, #2
 8009d0c:	3302      	adds	r3, #2
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	43db      	mvns	r3, r3
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	4013      	ands	r3, r2
 8009d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	43db      	mvns	r3, r3
 8009d4e:	69ba      	ldr	r2, [r7, #24]
 8009d50:	4013      	ands	r3, r2
 8009d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	43db      	mvns	r3, r3
 8009d7a:	69ba      	ldr	r2, [r7, #24]
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	43db      	mvns	r3, r3
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	4013      	ands	r3, r2
 8009da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009db6:	69ba      	ldr	r2, [r7, #24]
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f47f ae6b 	bne.w	8009ab0 <HAL_GPIO_Init+0x14>
  }
}
 8009dda:	bf00      	nop
 8009ddc:	bf00      	nop
 8009dde:	3724      	adds	r7, #36	; 0x24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	58000400 	.word	0x58000400

08009dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691a      	ldr	r2, [r3, #16]
 8009dfc:	887b      	ldrh	r3, [r7, #2]
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e04:	2301      	movs	r3, #1
 8009e06:	73fb      	strb	r3, [r7, #15]
 8009e08:	e001      	b.n	8009e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	807b      	strh	r3, [r7, #2]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e2c:	787b      	ldrb	r3, [r7, #1]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e32:	887a      	ldrh	r2, [r7, #2]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e38:	e003      	b.n	8009e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e3a:	887b      	ldrh	r3, [r7, #2]
 8009e3c:	041a      	lsls	r2, r3, #16
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	619a      	str	r2, [r3, #24]
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
	...

08009e50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e58:	4b19      	ldr	r3, [pc, #100]	; (8009ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f003 0304 	and.w	r3, r3, #4
 8009e60:	2b04      	cmp	r3, #4
 8009e62:	d00a      	beq.n	8009e7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e64:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d001      	beq.n	8009e76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e01f      	b.n	8009eb6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	e01d      	b.n	8009eb6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e7a:	4b11      	ldr	r3, [pc, #68]	; (8009ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	f023 0207 	bic.w	r2, r3, #7
 8009e82:	490f      	ldr	r1, [pc, #60]	; (8009ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009e8a:	f7fc fe8d 	bl	8006ba8 <HAL_GetTick>
 8009e8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e90:	e009      	b.n	8009ea6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009e92:	f7fc fe89 	bl	8006ba8 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea0:	d901      	bls.n	8009ea6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e007      	b.n	8009eb6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ea6:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <HAL_PWREx_ConfigSupply+0x70>)
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eb2:	d1ee      	bne.n	8009e92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	58024800 	.word	0x58024800

08009ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08c      	sub	sp, #48	; 0x30
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e39d      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0301 	and.w	r3, r3, #1
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 8087 	beq.w	8009ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ee4:	4b88      	ldr	r3, [pc, #544]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009eee:	4b86      	ldr	r3, [pc, #536]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef6:	2b10      	cmp	r3, #16
 8009ef8:	d007      	beq.n	8009f0a <HAL_RCC_OscConfig+0x46>
 8009efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efc:	2b18      	cmp	r3, #24
 8009efe:	d110      	bne.n	8009f22 <HAL_RCC_OscConfig+0x5e>
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	f003 0303 	and.w	r3, r3, #3
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d10b      	bne.n	8009f22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f0a:	4b7f      	ldr	r3, [pc, #508]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d06c      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x12c>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d168      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e377      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f2a:	d106      	bne.n	8009f3a <HAL_RCC_OscConfig+0x76>
 8009f2c:	4b76      	ldr	r3, [pc, #472]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a75      	ldr	r2, [pc, #468]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	e02e      	b.n	8009f98 <HAL_RCC_OscConfig+0xd4>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10c      	bne.n	8009f5c <HAL_RCC_OscConfig+0x98>
 8009f42:	4b71      	ldr	r3, [pc, #452]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a70      	ldr	r2, [pc, #448]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	4b6e      	ldr	r3, [pc, #440]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a6d      	ldr	r2, [pc, #436]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	e01d      	b.n	8009f98 <HAL_RCC_OscConfig+0xd4>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f64:	d10c      	bne.n	8009f80 <HAL_RCC_OscConfig+0xbc>
 8009f66:	4b68      	ldr	r3, [pc, #416]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a67      	ldr	r2, [pc, #412]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	4b65      	ldr	r3, [pc, #404]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a64      	ldr	r2, [pc, #400]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	e00b      	b.n	8009f98 <HAL_RCC_OscConfig+0xd4>
 8009f80:	4b61      	ldr	r3, [pc, #388]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a60      	ldr	r2, [pc, #384]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	4b5e      	ldr	r3, [pc, #376]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a5d      	ldr	r2, [pc, #372]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d013      	beq.n	8009fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa0:	f7fc fe02 	bl	8006ba8 <HAL_GetTick>
 8009fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fa6:	e008      	b.n	8009fba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fa8:	f7fc fdfe 	bl	8006ba8 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	2b64      	cmp	r3, #100	; 0x64
 8009fb4:	d901      	bls.n	8009fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e32b      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fba:	4b53      	ldr	r3, [pc, #332]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0f0      	beq.n	8009fa8 <HAL_RCC_OscConfig+0xe4>
 8009fc6:	e014      	b.n	8009ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc8:	f7fc fdee 	bl	8006ba8 <HAL_GetTick>
 8009fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fce:	e008      	b.n	8009fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fd0:	f7fc fdea 	bl	8006ba8 <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b64      	cmp	r3, #100	; 0x64
 8009fdc:	d901      	bls.n	8009fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e317      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fe2:	4b49      	ldr	r3, [pc, #292]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1f0      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x10c>
 8009fee:	e000      	b.n	8009ff2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 808c 	beq.w	800a118 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a000:	4b41      	ldr	r3, [pc, #260]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a008:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a00a:	4b3f      	ldr	r3, [pc, #252]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d007      	beq.n	800a026 <HAL_RCC_OscConfig+0x162>
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	2b18      	cmp	r3, #24
 800a01a:	d137      	bne.n	800a08c <HAL_RCC_OscConfig+0x1c8>
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d132      	bne.n	800a08c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a026:	4b38      	ldr	r3, [pc, #224]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f003 0304 	and.w	r3, r3, #4
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <HAL_RCC_OscConfig+0x17a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e2e9      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a03e:	4b32      	ldr	r3, [pc, #200]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f023 0219 	bic.w	r2, r3, #25
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	492f      	ldr	r1, [pc, #188]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a050:	f7fc fdaa 	bl	8006ba8 <HAL_GetTick>
 800a054:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a056:	e008      	b.n	800a06a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a058:	f7fc fda6 	bl	8006ba8 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	2b02      	cmp	r3, #2
 800a064:	d901      	bls.n	800a06a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e2d3      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a06a:	4b27      	ldr	r3, [pc, #156]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 0304 	and.w	r3, r3, #4
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0f0      	beq.n	800a058 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a076:	4b24      	ldr	r3, [pc, #144]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	061b      	lsls	r3, r3, #24
 800a084:	4920      	ldr	r1, [pc, #128]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a086:	4313      	orrs	r3, r2
 800a088:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a08a:	e045      	b.n	800a118 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d026      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a094:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f023 0219 	bic.w	r2, r3, #25
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	4919      	ldr	r1, [pc, #100]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a6:	f7fc fd7f 	bl	8006ba8 <HAL_GetTick>
 800a0aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0ac:	e008      	b.n	800a0c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0ae:	f7fc fd7b 	bl	8006ba8 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d901      	bls.n	800a0c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e2a8      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0c0:	4b11      	ldr	r3, [pc, #68]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0f0      	beq.n	800a0ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0cc:	4b0e      	ldr	r3, [pc, #56]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	061b      	lsls	r3, r3, #24
 800a0da:	490b      	ldr	r1, [pc, #44]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	604b      	str	r3, [r1, #4]
 800a0e0:	e01a      	b.n	800a118 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a08      	ldr	r2, [pc, #32]	; (800a108 <HAL_RCC_OscConfig+0x244>)
 800a0e8:	f023 0301 	bic.w	r3, r3, #1
 800a0ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ee:	f7fc fd5b 	bl	8006ba8 <HAL_GetTick>
 800a0f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0f4:	e00a      	b.n	800a10c <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0f6:	f7fc fd57 	bl	8006ba8 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	2b02      	cmp	r3, #2
 800a102:	d903      	bls.n	800a10c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e284      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
 800a108:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a10c:	4b96      	ldr	r3, [pc, #600]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1ee      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0310 	and.w	r3, r3, #16
 800a120:	2b00      	cmp	r3, #0
 800a122:	d06a      	beq.n	800a1fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a124:	4b90      	ldr	r3, [pc, #576]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a12c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a12e:	4b8e      	ldr	r3, [pc, #568]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a132:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	2b08      	cmp	r3, #8
 800a138:	d007      	beq.n	800a14a <HAL_RCC_OscConfig+0x286>
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	2b18      	cmp	r3, #24
 800a13e:	d11b      	bne.n	800a178 <HAL_RCC_OscConfig+0x2b4>
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	2b01      	cmp	r3, #1
 800a148:	d116      	bne.n	800a178 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a14a:	4b87      	ldr	r3, [pc, #540]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <HAL_RCC_OscConfig+0x29e>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	2b80      	cmp	r3, #128	; 0x80
 800a15c:	d001      	beq.n	800a162 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e257      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a162:	4b81      	ldr	r3, [pc, #516]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	061b      	lsls	r3, r3, #24
 800a170:	497d      	ldr	r1, [pc, #500]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a172:	4313      	orrs	r3, r2
 800a174:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a176:	e040      	b.n	800a1fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d023      	beq.n	800a1c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a180:	4b79      	ldr	r3, [pc, #484]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a78      	ldr	r2, [pc, #480]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a18c:	f7fc fd0c 	bl	8006ba8 <HAL_GetTick>
 800a190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a192:	e008      	b.n	800a1a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a194:	f7fc fd08 	bl	8006ba8 <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d901      	bls.n	800a1a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e235      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1a6:	4b70      	ldr	r3, [pc, #448]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0f0      	beq.n	800a194 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1b2:	4b6d      	ldr	r3, [pc, #436]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	061b      	lsls	r3, r3, #24
 800a1c0:	4969      	ldr	r1, [pc, #420]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60cb      	str	r3, [r1, #12]
 800a1c6:	e018      	b.n	800a1fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1c8:	4b67      	ldr	r3, [pc, #412]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a66      	ldr	r2, [pc, #408]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a1ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d4:	f7fc fce8 	bl	8006ba8 <HAL_GetTick>
 800a1d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a1dc:	f7fc fce4 	bl	8006ba8 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e211      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1ee:	4b5e      	ldr	r3, [pc, #376]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1f0      	bne.n	800a1dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0308 	and.w	r3, r3, #8
 800a202:	2b00      	cmp	r3, #0
 800a204:	d036      	beq.n	800a274 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d019      	beq.n	800a242 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a20e:	4b56      	ldr	r3, [pc, #344]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a212:	4a55      	ldr	r2, [pc, #340]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a214:	f043 0301 	orr.w	r3, r3, #1
 800a218:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21a:	f7fc fcc5 	bl	8006ba8 <HAL_GetTick>
 800a21e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a220:	e008      	b.n	800a234 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a222:	f7fc fcc1 	bl	8006ba8 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d901      	bls.n	800a234 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e1ee      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a234:	4b4c      	ldr	r3, [pc, #304]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0f0      	beq.n	800a222 <HAL_RCC_OscConfig+0x35e>
 800a240:	e018      	b.n	800a274 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a242:	4b49      	ldr	r3, [pc, #292]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a246:	4a48      	ldr	r2, [pc, #288]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a24e:	f7fc fcab 	bl	8006ba8 <HAL_GetTick>
 800a252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a254:	e008      	b.n	800a268 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a256:	f7fc fca7 	bl	8006ba8 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	d901      	bls.n	800a268 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e1d4      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a268:	4b3f      	ldr	r3, [pc, #252]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26c:	f003 0302 	and.w	r3, r3, #2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1f0      	bne.n	800a256 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d036      	beq.n	800a2ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d019      	beq.n	800a2bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a288:	4b37      	ldr	r3, [pc, #220]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a36      	ldr	r2, [pc, #216]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a28e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a294:	f7fc fc88 	bl	8006ba8 <HAL_GetTick>
 800a298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a29c:	f7fc fc84 	bl	8006ba8 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e1b1      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2ae:	4b2e      	ldr	r3, [pc, #184]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f0      	beq.n	800a29c <HAL_RCC_OscConfig+0x3d8>
 800a2ba:	e018      	b.n	800a2ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2bc:	4b2a      	ldr	r3, [pc, #168]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a29      	ldr	r2, [pc, #164]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2c8:	f7fc fc6e 	bl	8006ba8 <HAL_GetTick>
 800a2cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2ce:	e008      	b.n	800a2e2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2d0:	f7fc fc6a 	bl	8006ba8 <HAL_GetTick>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d901      	bls.n	800a2e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e197      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2e2:	4b21      	ldr	r3, [pc, #132]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1f0      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0304 	and.w	r3, r3, #4
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 8086 	beq.w	800a408 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a2fc:	4b1b      	ldr	r3, [pc, #108]	; (800a36c <HAL_RCC_OscConfig+0x4a8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a1a      	ldr	r2, [pc, #104]	; (800a36c <HAL_RCC_OscConfig+0x4a8>)
 800a302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a306:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a308:	f7fc fc4e 	bl	8006ba8 <HAL_GetTick>
 800a30c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a310:	f7fc fc4a 	bl	8006ba8 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b64      	cmp	r3, #100	; 0x64
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e177      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a322:	4b12      	ldr	r3, [pc, #72]	; (800a36c <HAL_RCC_OscConfig+0x4a8>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0f0      	beq.n	800a310 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d106      	bne.n	800a344 <HAL_RCC_OscConfig+0x480>
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33a:	4a0b      	ldr	r2, [pc, #44]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a33c:	f043 0301 	orr.w	r3, r3, #1
 800a340:	6713      	str	r3, [r2, #112]	; 0x70
 800a342:	e032      	b.n	800a3aa <HAL_RCC_OscConfig+0x4e6>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d111      	bne.n	800a370 <HAL_RCC_OscConfig+0x4ac>
 800a34c:	4b06      	ldr	r3, [pc, #24]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a350:	4a05      	ldr	r2, [pc, #20]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a352:	f023 0301 	bic.w	r3, r3, #1
 800a356:	6713      	str	r3, [r2, #112]	; 0x70
 800a358:	4b03      	ldr	r3, [pc, #12]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a35c:	4a02      	ldr	r2, [pc, #8]	; (800a368 <HAL_RCC_OscConfig+0x4a4>)
 800a35e:	f023 0304 	bic.w	r3, r3, #4
 800a362:	6713      	str	r3, [r2, #112]	; 0x70
 800a364:	e021      	b.n	800a3aa <HAL_RCC_OscConfig+0x4e6>
 800a366:	bf00      	nop
 800a368:	58024400 	.word	0x58024400
 800a36c:	58024800 	.word	0x58024800
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b05      	cmp	r3, #5
 800a376:	d10c      	bne.n	800a392 <HAL_RCC_OscConfig+0x4ce>
 800a378:	4b83      	ldr	r3, [pc, #524]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37c:	4a82      	ldr	r2, [pc, #520]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a37e:	f043 0304 	orr.w	r3, r3, #4
 800a382:	6713      	str	r3, [r2, #112]	; 0x70
 800a384:	4b80      	ldr	r3, [pc, #512]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a388:	4a7f      	ldr	r2, [pc, #508]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a38a:	f043 0301 	orr.w	r3, r3, #1
 800a38e:	6713      	str	r3, [r2, #112]	; 0x70
 800a390:	e00b      	b.n	800a3aa <HAL_RCC_OscConfig+0x4e6>
 800a392:	4b7d      	ldr	r3, [pc, #500]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a396:	4a7c      	ldr	r2, [pc, #496]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	6713      	str	r3, [r2, #112]	; 0x70
 800a39e:	4b7a      	ldr	r3, [pc, #488]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a2:	4a79      	ldr	r2, [pc, #484]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a3a4:	f023 0304 	bic.w	r3, r3, #4
 800a3a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d015      	beq.n	800a3de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b2:	f7fc fbf9 	bl	8006ba8 <HAL_GetTick>
 800a3b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3b8:	e00a      	b.n	800a3d0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3ba:	f7fc fbf5 	bl	8006ba8 <HAL_GetTick>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d901      	bls.n	800a3d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e120      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3d0:	4b6d      	ldr	r3, [pc, #436]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d4:	f003 0302 	and.w	r3, r3, #2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0ee      	beq.n	800a3ba <HAL_RCC_OscConfig+0x4f6>
 800a3dc:	e014      	b.n	800a408 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3de:	f7fc fbe3 	bl	8006ba8 <HAL_GetTick>
 800a3e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3e4:	e00a      	b.n	800a3fc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3e6:	f7fc fbdf 	bl	8006ba8 <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d901      	bls.n	800a3fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e10a      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3fc:	4b62      	ldr	r3, [pc, #392]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1ee      	bne.n	800a3e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 80ff 	beq.w	800a610 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a412:	4b5d      	ldr	r3, [pc, #372]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a41a:	2b18      	cmp	r3, #24
 800a41c:	f000 80ba 	beq.w	800a594 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	2b02      	cmp	r3, #2
 800a426:	f040 8095 	bne.w	800a554 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a42a:	4b57      	ldr	r3, [pc, #348]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a56      	ldr	r2, [pc, #344]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a436:	f7fc fbb7 	bl	8006ba8 <HAL_GetTick>
 800a43a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a43c:	e008      	b.n	800a450 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a43e:	f7fc fbb3 	bl	8006ba8 <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d901      	bls.n	800a450 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e0e0      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a450:	4b4d      	ldr	r3, [pc, #308]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f0      	bne.n	800a43e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a45c:	4b4a      	ldr	r3, [pc, #296]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a45e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a460:	4b4a      	ldr	r3, [pc, #296]	; (800a58c <HAL_RCC_OscConfig+0x6c8>)
 800a462:	4013      	ands	r3, r2
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a46c:	0112      	lsls	r2, r2, #4
 800a46e:	430a      	orrs	r2, r1
 800a470:	4945      	ldr	r1, [pc, #276]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a472:	4313      	orrs	r3, r2
 800a474:	628b      	str	r3, [r1, #40]	; 0x28
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	3b01      	subs	r3, #1
 800a47c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a484:	3b01      	subs	r3, #1
 800a486:	025b      	lsls	r3, r3, #9
 800a488:	b29b      	uxth	r3, r3
 800a48a:	431a      	orrs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a490:	3b01      	subs	r3, #1
 800a492:	041b      	lsls	r3, r3, #16
 800a494:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a498:	431a      	orrs	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	061b      	lsls	r3, r3, #24
 800a4a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4a6:	4938      	ldr	r1, [pc, #224]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a4ac:	4b36      	ldr	r3, [pc, #216]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b0:	4a35      	ldr	r2, [pc, #212]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4b2:	f023 0301 	bic.w	r3, r3, #1
 800a4b6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4b8:	4b33      	ldr	r3, [pc, #204]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4bc:	4b34      	ldr	r3, [pc, #208]	; (800a590 <HAL_RCC_OscConfig+0x6cc>)
 800a4be:	4013      	ands	r3, r2
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4c4:	00d2      	lsls	r2, r2, #3
 800a4c6:	4930      	ldr	r1, [pc, #192]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4cc:	4b2e      	ldr	r3, [pc, #184]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	f023 020c 	bic.w	r2, r3, #12
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d8:	492b      	ldr	r1, [pc, #172]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4de:	4b2a      	ldr	r3, [pc, #168]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e2:	f023 0202 	bic.w	r2, r3, #2
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ea:	4927      	ldr	r1, [pc, #156]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4f0:	4b25      	ldr	r3, [pc, #148]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	4a24      	ldr	r2, [pc, #144]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fc:	4b22      	ldr	r3, [pc, #136]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	4a21      	ldr	r2, [pc, #132]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a508:	4b1f      	ldr	r3, [pc, #124]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	4a1e      	ldr	r2, [pc, #120]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a50e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a514:	4b1c      	ldr	r3, [pc, #112]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a518:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a51a:	f043 0301 	orr.w	r3, r3, #1
 800a51e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a520:	4b19      	ldr	r3, [pc, #100]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a18      	ldr	r2, [pc, #96]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a52a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52c:	f7fc fb3c 	bl	8006ba8 <HAL_GetTick>
 800a530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a532:	e008      	b.n	800a546 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a534:	f7fc fb38 	bl	8006ba8 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d901      	bls.n	800a546 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e065      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a546:	4b10      	ldr	r3, [pc, #64]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d0f0      	beq.n	800a534 <HAL_RCC_OscConfig+0x670>
 800a552:	e05d      	b.n	800a610 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a554:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a0b      	ldr	r2, [pc, #44]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a55a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a55e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a560:	f7fc fb22 	bl	8006ba8 <HAL_GetTick>
 800a564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a566:	e008      	b.n	800a57a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a568:	f7fc fb1e 	bl	8006ba8 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	2b02      	cmp	r3, #2
 800a574:	d901      	bls.n	800a57a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e04b      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a57a:	4b03      	ldr	r3, [pc, #12]	; (800a588 <HAL_RCC_OscConfig+0x6c4>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1f0      	bne.n	800a568 <HAL_RCC_OscConfig+0x6a4>
 800a586:	e043      	b.n	800a610 <HAL_RCC_OscConfig+0x74c>
 800a588:	58024400 	.word	0x58024400
 800a58c:	fffffc0c 	.word	0xfffffc0c
 800a590:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a594:	4b21      	ldr	r3, [pc, #132]	; (800a61c <HAL_RCC_OscConfig+0x758>)
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a598:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a59a:	4b20      	ldr	r3, [pc, #128]	; (800a61c <HAL_RCC_OscConfig+0x758>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d031      	beq.n	800a60c <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f003 0203 	and.w	r2, r3, #3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d12a      	bne.n	800a60c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	091b      	lsrs	r3, r3, #4
 800a5ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d122      	bne.n	800a60c <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d11a      	bne.n	800a60c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	0a5b      	lsrs	r3, r3, #9
 800a5da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d111      	bne.n	800a60c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	0c1b      	lsrs	r3, r3, #16
 800a5ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d108      	bne.n	800a60c <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	0e1b      	lsrs	r3, r3, #24
 800a5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a606:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a608:	429a      	cmp	r2, r3
 800a60a:	d001      	beq.n	800a610 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e000      	b.n	800a612 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3730      	adds	r7, #48	; 0x30
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	58024400 	.word	0x58024400

0800a620 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e19c      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a634:	4b8a      	ldr	r3, [pc, #552]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 030f 	and.w	r3, r3, #15
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d910      	bls.n	800a664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a642:	4b87      	ldr	r3, [pc, #540]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f023 020f 	bic.w	r2, r3, #15
 800a64a:	4985      	ldr	r1, [pc, #532]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	4313      	orrs	r3, r2
 800a650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a652:	4b83      	ldr	r3, [pc, #524]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d001      	beq.n	800a664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e184      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d010      	beq.n	800a692 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691a      	ldr	r2, [r3, #16]
 800a674:	4b7b      	ldr	r3, [pc, #492]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a676:	699b      	ldr	r3, [r3, #24]
 800a678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d908      	bls.n	800a692 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a680:	4b78      	ldr	r3, [pc, #480]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	4975      	ldr	r1, [pc, #468]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0308 	and.w	r3, r3, #8
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d010      	beq.n	800a6c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	695a      	ldr	r2, [r3, #20]
 800a6a2:	4b70      	ldr	r3, [pc, #448]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d908      	bls.n	800a6c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6ae:	4b6d      	ldr	r3, [pc, #436]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	496a      	ldr	r1, [pc, #424]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0310 	and.w	r3, r3, #16
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d010      	beq.n	800a6ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	699a      	ldr	r2, [r3, #24]
 800a6d0:	4b64      	ldr	r3, [pc, #400]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a6d2:	69db      	ldr	r3, [r3, #28]
 800a6d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d908      	bls.n	800a6ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6dc:	4b61      	ldr	r3, [pc, #388]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	495e      	ldr	r1, [pc, #376]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0320 	and.w	r3, r3, #32
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d010      	beq.n	800a71c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	69da      	ldr	r2, [r3, #28]
 800a6fe:	4b59      	ldr	r3, [pc, #356]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a706:	429a      	cmp	r2, r3
 800a708:	d908      	bls.n	800a71c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a70a:	4b56      	ldr	r3, [pc, #344]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	4953      	ldr	r1, [pc, #332]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a718:	4313      	orrs	r3, r2
 800a71a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0302 	and.w	r3, r3, #2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d010      	beq.n	800a74a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	4b4d      	ldr	r3, [pc, #308]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	f003 030f 	and.w	r3, r3, #15
 800a734:	429a      	cmp	r2, r3
 800a736:	d908      	bls.n	800a74a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a738:	4b4a      	ldr	r3, [pc, #296]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f023 020f 	bic.w	r2, r3, #15
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	4947      	ldr	r1, [pc, #284]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a746:	4313      	orrs	r3, r2
 800a748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d055      	beq.n	800a802 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a756:	4b43      	ldr	r3, [pc, #268]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	4940      	ldr	r1, [pc, #256]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a764:	4313      	orrs	r3, r2
 800a766:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d107      	bne.n	800a780 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a770:	4b3c      	ldr	r3, [pc, #240]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d121      	bne.n	800a7c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e0f6      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	2b03      	cmp	r3, #3
 800a786:	d107      	bne.n	800a798 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a788:	4b36      	ldr	r3, [pc, #216]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d115      	bne.n	800a7c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e0ea      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d107      	bne.n	800a7b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7a0:	4b30      	ldr	r3, [pc, #192]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e0de      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7b0:	4b2c      	ldr	r3, [pc, #176]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d101      	bne.n	800a7c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e0d6      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7c0:	4b28      	ldr	r3, [pc, #160]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	f023 0207 	bic.w	r2, r3, #7
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	4925      	ldr	r1, [pc, #148]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d2:	f7fc f9e9 	bl	8006ba8 <HAL_GetTick>
 800a7d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7d8:	e00a      	b.n	800a7f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7da:	f7fc f9e5 	bl	8006ba8 <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d901      	bls.n	800a7f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e0be      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7f0:	4b1c      	ldr	r3, [pc, #112]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d1eb      	bne.n	800a7da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d010      	beq.n	800a830 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68da      	ldr	r2, [r3, #12]
 800a812:	4b14      	ldr	r3, [pc, #80]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	f003 030f 	and.w	r3, r3, #15
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d208      	bcs.n	800a830 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a81e:	4b11      	ldr	r3, [pc, #68]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f023 020f 	bic.w	r2, r3, #15
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	490e      	ldr	r1, [pc, #56]	; (800a864 <HAL_RCC_ClockConfig+0x244>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d214      	bcs.n	800a868 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a83e:	4b08      	ldr	r3, [pc, #32]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f023 020f 	bic.w	r2, r3, #15
 800a846:	4906      	ldr	r1, [pc, #24]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a84e:	4b04      	ldr	r3, [pc, #16]	; (800a860 <HAL_RCC_ClockConfig+0x240>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 030f 	and.w	r3, r3, #15
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d005      	beq.n	800a868 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e086      	b.n	800a96e <HAL_RCC_ClockConfig+0x34e>
 800a860:	52002000 	.word	0x52002000
 800a864:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0304 	and.w	r3, r3, #4
 800a870:	2b00      	cmp	r3, #0
 800a872:	d010      	beq.n	800a896 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	691a      	ldr	r2, [r3, #16]
 800a878:	4b3f      	ldr	r3, [pc, #252]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a880:	429a      	cmp	r2, r3
 800a882:	d208      	bcs.n	800a896 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a884:	4b3c      	ldr	r3, [pc, #240]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	4939      	ldr	r1, [pc, #228]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a892:	4313      	orrs	r3, r2
 800a894:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0308 	and.w	r3, r3, #8
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d010      	beq.n	800a8c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	695a      	ldr	r2, [r3, #20]
 800a8a6:	4b34      	ldr	r3, [pc, #208]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d208      	bcs.n	800a8c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8b2:	4b31      	ldr	r3, [pc, #196]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	492e      	ldr	r1, [pc, #184]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0310 	and.w	r3, r3, #16
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d010      	beq.n	800a8f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	699a      	ldr	r2, [r3, #24]
 800a8d4:	4b28      	ldr	r3, [pc, #160]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a8d6:	69db      	ldr	r3, [r3, #28]
 800a8d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d208      	bcs.n	800a8f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	4922      	ldr	r1, [pc, #136]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d010      	beq.n	800a920 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	69da      	ldr	r2, [r3, #28]
 800a902:	4b1d      	ldr	r3, [pc, #116]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d208      	bcs.n	800a920 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a90e:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	4917      	ldr	r1, [pc, #92]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a920:	f000 f834 	bl	800a98c <HAL_RCC_GetSysClockFreq>
 800a924:	4602      	mov	r2, r0
 800a926:	4b14      	ldr	r3, [pc, #80]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	0a1b      	lsrs	r3, r3, #8
 800a92c:	f003 030f 	and.w	r3, r3, #15
 800a930:	4912      	ldr	r1, [pc, #72]	; (800a97c <HAL_RCC_ClockConfig+0x35c>)
 800a932:	5ccb      	ldrb	r3, [r1, r3]
 800a934:	f003 031f 	and.w	r3, r3, #31
 800a938:	fa22 f303 	lsr.w	r3, r2, r3
 800a93c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a93e:	4b0e      	ldr	r3, [pc, #56]	; (800a978 <HAL_RCC_ClockConfig+0x358>)
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	f003 030f 	and.w	r3, r3, #15
 800a946:	4a0d      	ldr	r2, [pc, #52]	; (800a97c <HAL_RCC_ClockConfig+0x35c>)
 800a948:	5cd3      	ldrb	r3, [r2, r3]
 800a94a:	f003 031f 	and.w	r3, r3, #31
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	fa22 f303 	lsr.w	r3, r2, r3
 800a954:	4a0a      	ldr	r2, [pc, #40]	; (800a980 <HAL_RCC_ClockConfig+0x360>)
 800a956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a958:	4a0a      	ldr	r2, [pc, #40]	; (800a984 <HAL_RCC_ClockConfig+0x364>)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a95e:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <HAL_RCC_ClockConfig+0x368>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4618      	mov	r0, r3
 800a964:	f7fc f8d6 	bl	8006b14 <HAL_InitTick>
 800a968:	4603      	mov	r3, r0
 800a96a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3718      	adds	r7, #24
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	58024400 	.word	0x58024400
 800a97c:	08011350 	.word	0x08011350
 800a980:	24000008 	.word	0x24000008
 800a984:	24000004 	.word	0x24000004
 800a988:	2400000c 	.word	0x2400000c

0800a98c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b089      	sub	sp, #36	; 0x24
 800a990:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a992:	4bb3      	ldr	r3, [pc, #716]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a99a:	2b18      	cmp	r3, #24
 800a99c:	f200 8155 	bhi.w	800ac4a <HAL_RCC_GetSysClockFreq+0x2be>
 800a9a0:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800aa0d 	.word	0x0800aa0d
 800a9ac:	0800ac4b 	.word	0x0800ac4b
 800a9b0:	0800ac4b 	.word	0x0800ac4b
 800a9b4:	0800ac4b 	.word	0x0800ac4b
 800a9b8:	0800ac4b 	.word	0x0800ac4b
 800a9bc:	0800ac4b 	.word	0x0800ac4b
 800a9c0:	0800ac4b 	.word	0x0800ac4b
 800a9c4:	0800ac4b 	.word	0x0800ac4b
 800a9c8:	0800aa33 	.word	0x0800aa33
 800a9cc:	0800ac4b 	.word	0x0800ac4b
 800a9d0:	0800ac4b 	.word	0x0800ac4b
 800a9d4:	0800ac4b 	.word	0x0800ac4b
 800a9d8:	0800ac4b 	.word	0x0800ac4b
 800a9dc:	0800ac4b 	.word	0x0800ac4b
 800a9e0:	0800ac4b 	.word	0x0800ac4b
 800a9e4:	0800ac4b 	.word	0x0800ac4b
 800a9e8:	0800aa39 	.word	0x0800aa39
 800a9ec:	0800ac4b 	.word	0x0800ac4b
 800a9f0:	0800ac4b 	.word	0x0800ac4b
 800a9f4:	0800ac4b 	.word	0x0800ac4b
 800a9f8:	0800ac4b 	.word	0x0800ac4b
 800a9fc:	0800ac4b 	.word	0x0800ac4b
 800aa00:	0800ac4b 	.word	0x0800ac4b
 800aa04:	0800ac4b 	.word	0x0800ac4b
 800aa08:	0800aa3f 	.word	0x0800aa3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa0c:	4b94      	ldr	r3, [pc, #592]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0320 	and.w	r3, r3, #32
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d009      	beq.n	800aa2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa18:	4b91      	ldr	r3, [pc, #580]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	08db      	lsrs	r3, r3, #3
 800aa1e:	f003 0303 	and.w	r3, r3, #3
 800aa22:	4a90      	ldr	r2, [pc, #576]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa24:	fa22 f303 	lsr.w	r3, r2, r3
 800aa28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aa2a:	e111      	b.n	800ac50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa2c:	4b8d      	ldr	r3, [pc, #564]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa2e:	61bb      	str	r3, [r7, #24]
    break;
 800aa30:	e10e      	b.n	800ac50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aa32:	4b8d      	ldr	r3, [pc, #564]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa34:	61bb      	str	r3, [r7, #24]
    break;
 800aa36:	e10b      	b.n	800ac50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aa38:	4b8c      	ldr	r3, [pc, #560]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa3a:	61bb      	str	r3, [r7, #24]
    break;
 800aa3c:	e108      	b.n	800ac50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa3e:	4b88      	ldr	r3, [pc, #544]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aa48:	4b85      	ldr	r3, [pc, #532]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4c:	091b      	lsrs	r3, r3, #4
 800aa4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa54:	4b82      	ldr	r3, [pc, #520]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aa5e:	4b80      	ldr	r3, [pc, #512]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa62:	08db      	lsrs	r3, r3, #3
 800aa64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	fb02 f303 	mul.w	r3, r2, r3
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80e1 	beq.w	800ac44 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	f000 8083 	beq.w	800ab90 <HAL_RCC_GetSysClockFreq+0x204>
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	f200 80a1 	bhi.w	800abd4 <HAL_RCC_GetSysClockFreq+0x248>
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x114>
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d056      	beq.n	800ab4c <HAL_RCC_GetSysClockFreq+0x1c0>
 800aa9e:	e099      	b.n	800abd4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa0:	4b6f      	ldr	r3, [pc, #444]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0320 	and.w	r3, r3, #32
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d02d      	beq.n	800ab08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aaac:	4b6c      	ldr	r3, [pc, #432]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	08db      	lsrs	r3, r3, #3
 800aab2:	f003 0303 	and.w	r3, r3, #3
 800aab6:	4a6b      	ldr	r2, [pc, #428]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aab8:	fa22 f303 	lsr.w	r3, r2, r3
 800aabc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	ee07 3a90 	vmov	s15, r3
 800aac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad6:	4b62      	ldr	r3, [pc, #392]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaea:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ac70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aaee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ab06:	e087      	b.n	800ac18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab12:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1a:	4b51      	ldr	r3, [pc, #324]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ac70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4a:	e065      	b.n	800ac18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab56:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ac78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5e:	4b40      	ldr	r3, [pc, #256]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab8e:	e043      	b.n	800ac18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ab9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba2:	4b2f      	ldr	r3, [pc, #188]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800abb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abd2:	e021      	b.n	800ac18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abde:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ac78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800abe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe6:	4b1e      	ldr	r3, [pc, #120]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800abfa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ac70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ac18:	4b11      	ldr	r3, [pc, #68]	; (800ac60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1c:	0a5b      	lsrs	r3, r3, #9
 800ac1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac22:	3301      	adds	r3, #1
 800ac24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	ee07 3a90 	vmov	s15, r3
 800ac2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3c:	ee17 3a90 	vmov	r3, s15
 800ac40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ac42:	e005      	b.n	800ac50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	61bb      	str	r3, [r7, #24]
    break;
 800ac48:	e002      	b.n	800ac50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ac4a:	4b07      	ldr	r3, [pc, #28]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac4c:	61bb      	str	r3, [r7, #24]
    break;
 800ac4e:	bf00      	nop
  }

  return sysclockfreq;
 800ac50:	69bb      	ldr	r3, [r7, #24]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3724      	adds	r7, #36	; 0x24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	58024400 	.word	0x58024400
 800ac64:	03d09000 	.word	0x03d09000
 800ac68:	003d0900 	.word	0x003d0900
 800ac6c:	007a1200 	.word	0x007a1200
 800ac70:	46000000 	.word	0x46000000
 800ac74:	4c742400 	.word	0x4c742400
 800ac78:	4a742400 	.word	0x4a742400
 800ac7c:	4af42400 	.word	0x4af42400

0800ac80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac86:	f7ff fe81 	bl	800a98c <HAL_RCC_GetSysClockFreq>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	4b10      	ldr	r3, [pc, #64]	; (800acd0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	0a1b      	lsrs	r3, r3, #8
 800ac92:	f003 030f 	and.w	r3, r3, #15
 800ac96:	490f      	ldr	r1, [pc, #60]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac98:	5ccb      	ldrb	r3, [r1, r3]
 800ac9a:	f003 031f 	and.w	r3, r3, #31
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aca4:	4b0a      	ldr	r3, [pc, #40]	; (800acd0 <HAL_RCC_GetHCLKFreq+0x50>)
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	f003 030f 	and.w	r3, r3, #15
 800acac:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x54>)
 800acae:	5cd3      	ldrb	r3, [r2, r3]
 800acb0:	f003 031f 	and.w	r3, r3, #31
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	fa22 f303 	lsr.w	r3, r2, r3
 800acba:	4a07      	ldr	r2, [pc, #28]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x58>)
 800acbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acbe:	4a07      	ldr	r2, [pc, #28]	; (800acdc <HAL_RCC_GetHCLKFreq+0x5c>)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800acc4:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x58>)
 800acc6:	681b      	ldr	r3, [r3, #0]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	58024400 	.word	0x58024400
 800acd4:	08011350 	.word	0x08011350
 800acd8:	24000008 	.word	0x24000008
 800acdc:	24000004 	.word	0x24000004

0800ace0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ace4:	f7ff ffcc 	bl	800ac80 <HAL_RCC_GetHCLKFreq>
 800ace8:	4602      	mov	r2, r0
 800acea:	4b06      	ldr	r3, [pc, #24]	; (800ad04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	091b      	lsrs	r3, r3, #4
 800acf0:	f003 0307 	and.w	r3, r3, #7
 800acf4:	4904      	ldr	r1, [pc, #16]	; (800ad08 <HAL_RCC_GetPCLK1Freq+0x28>)
 800acf6:	5ccb      	ldrb	r3, [r1, r3]
 800acf8:	f003 031f 	and.w	r3, r3, #31
 800acfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	58024400 	.word	0x58024400
 800ad08:	08011350 	.word	0x08011350

0800ad0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad10:	f7ff ffb6 	bl	800ac80 <HAL_RCC_GetHCLKFreq>
 800ad14:	4602      	mov	r2, r0
 800ad16:	4b06      	ldr	r3, [pc, #24]	; (800ad30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	0a1b      	lsrs	r3, r3, #8
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	4904      	ldr	r1, [pc, #16]	; (800ad34 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad22:	5ccb      	ldrb	r3, [r1, r3]
 800ad24:	f003 031f 	and.w	r3, r3, #31
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	58024400 	.word	0x58024400
 800ad34:	08011350 	.word	0x08011350

0800ad38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad40:	2300      	movs	r3, #0
 800ad42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad44:	2300      	movs	r3, #0
 800ad46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d03f      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad5c:	d02a      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ad5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad62:	d824      	bhi.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad68:	d018      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad6e:	d81e      	bhi.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d003      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ad74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad78:	d007      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ad7a:	e018      	b.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad7c:	4ba4      	ldr	r3, [pc, #656]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	4aa3      	ldr	r2, [pc, #652]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ad82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad88:	e015      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	2102      	movs	r1, #2
 800ad90:	4618      	mov	r0, r3
 800ad92:	f001 f989 	bl	800c0a8 <RCCEx_PLL2_Config>
 800ad96:	4603      	mov	r3, r0
 800ad98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad9a:	e00c      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3324      	adds	r3, #36	; 0x24
 800ada0:	2102      	movs	r1, #2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f001 fa32 	bl	800c20c <RCCEx_PLL3_Config>
 800ada8:	4603      	mov	r3, r0
 800adaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800adac:	e003      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	75fb      	strb	r3, [r7, #23]
      break;
 800adb2:	e000      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800adb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d109      	bne.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adbc:	4b94      	ldr	r3, [pc, #592]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800adbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adc8:	4991      	ldr	r1, [pc, #580]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800adca:	4313      	orrs	r3, r2
 800adcc:	650b      	str	r3, [r1, #80]	; 0x50
 800adce:	e001      	b.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
 800add2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800addc:	2b00      	cmp	r3, #0
 800adde:	d03d      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	d826      	bhi.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ade8:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800adea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adee:	bf00      	nop
 800adf0:	0800ae05 	.word	0x0800ae05
 800adf4:	0800ae13 	.word	0x0800ae13
 800adf8:	0800ae25 	.word	0x0800ae25
 800adfc:	0800ae3d 	.word	0x0800ae3d
 800ae00:	0800ae3d 	.word	0x0800ae3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae04:	4b82      	ldr	r3, [pc, #520]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	4a81      	ldr	r2, [pc, #516]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae10:	e015      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3304      	adds	r3, #4
 800ae16:	2100      	movs	r1, #0
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f001 f945 	bl	800c0a8 <RCCEx_PLL2_Config>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae22:	e00c      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3324      	adds	r3, #36	; 0x24
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 f9ee 	bl	800c20c <RCCEx_PLL3_Config>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae34:	e003      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	75fb      	strb	r3, [r7, #23]
      break;
 800ae3a:	e000      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ae3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d109      	bne.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae44:	4b72      	ldr	r3, [pc, #456]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae48:	f023 0207 	bic.w	r2, r3, #7
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae50:	496f      	ldr	r1, [pc, #444]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	650b      	str	r3, [r1, #80]	; 0x50
 800ae56:	e001      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d051      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ae6e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae72:	d036      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ae74:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae78:	d830      	bhi.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ae7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae7e:	d032      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800ae80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae84:	d82a      	bhi.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ae86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae8a:	d02e      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800ae8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae90:	d824      	bhi.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ae92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae96:	d018      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ae98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae9c:	d81e      	bhi.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x172>
 800aea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aea6:	d007      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800aea8:	e018      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeaa:	4b59      	ldr	r3, [pc, #356]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeae:	4a58      	ldr	r2, [pc, #352]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aeb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aeb6:	e019      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3304      	adds	r3, #4
 800aebc:	2100      	movs	r1, #0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f001 f8f2 	bl	800c0a8 <RCCEx_PLL2_Config>
 800aec4:	4603      	mov	r3, r0
 800aec6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aec8:	e010      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3324      	adds	r3, #36	; 0x24
 800aece:	2100      	movs	r1, #0
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 f99b 	bl	800c20c <RCCEx_PLL3_Config>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aeda:	e007      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	75fb      	strb	r3, [r7, #23]
      break;
 800aee0:	e004      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aee2:	bf00      	nop
 800aee4:	e002      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aee6:	bf00      	nop
 800aee8:	e000      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aeea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10a      	bne.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aef2:	4b47      	ldr	r3, [pc, #284]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af00:	4943      	ldr	r1, [pc, #268]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af02:	4313      	orrs	r3, r2
 800af04:	658b      	str	r3, [r1, #88]	; 0x58
 800af06:	e001      	b.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af08:	7dfb      	ldrb	r3, [r7, #23]
 800af0a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af14:	2b00      	cmp	r3, #0
 800af16:	d051      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af1e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800af22:	d036      	beq.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800af24:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800af28:	d830      	bhi.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af2e:	d032      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800af30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af34:	d82a      	bhi.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af3a:	d02e      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800af3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af40:	d824      	bhi.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af46:	d018      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800af48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4c:	d81e      	bhi.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800af52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af56:	d007      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800af58:	e018      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af5a:	4b2d      	ldr	r3, [pc, #180]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5e:	4a2c      	ldr	r2, [pc, #176]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af66:	e019      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3304      	adds	r3, #4
 800af6c:	2100      	movs	r1, #0
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 f89a 	bl	800c0a8 <RCCEx_PLL2_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af78:	e010      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3324      	adds	r3, #36	; 0x24
 800af7e:	2100      	movs	r1, #0
 800af80:	4618      	mov	r0, r3
 800af82:	f001 f943 	bl	800c20c <RCCEx_PLL3_Config>
 800af86:	4603      	mov	r3, r0
 800af88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af8a:	e007      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	75fb      	strb	r3, [r7, #23]
      break;
 800af90:	e004      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800af92:	bf00      	nop
 800af94:	e002      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800af96:	bf00      	nop
 800af98:	e000      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800af9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800afa2:	4b1b      	ldr	r3, [pc, #108]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afa6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800afb0:	4917      	ldr	r1, [pc, #92]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afb2:	4313      	orrs	r3, r2
 800afb4:	658b      	str	r3, [r1, #88]	; 0x58
 800afb6:	e001      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d035      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afcc:	2b30      	cmp	r3, #48	; 0x30
 800afce:	d01c      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afd0:	2b30      	cmp	r3, #48	; 0x30
 800afd2:	d817      	bhi.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	d00c      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800afd8:	2b20      	cmp	r3, #32
 800afda:	d813      	bhi.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d019      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800afe0:	2b10      	cmp	r3, #16
 800afe2:	d10f      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afe4:	4b0a      	ldr	r3, [pc, #40]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	4a09      	ldr	r2, [pc, #36]	; (800b010 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800aff0:	e011      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3304      	adds	r3, #4
 800aff6:	2102      	movs	r1, #2
 800aff8:	4618      	mov	r0, r3
 800affa:	f001 f855 	bl	800c0a8 <RCCEx_PLL2_Config>
 800affe:	4603      	mov	r3, r0
 800b000:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b002:	e008      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	75fb      	strb	r3, [r7, #23]
      break;
 800b008:	e005      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800b00a:	bf00      	nop
 800b00c:	e003      	b.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400
      break;
 800b014:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d109      	bne.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b01c:	4ba3      	ldr	r3, [pc, #652]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b020:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b028:	49a0      	ldr	r1, [pc, #640]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b02e:	e001      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d047      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b048:	d030      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x374>
 800b04a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b04e:	d82a      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b050:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b054:	d02c      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800b056:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b05a:	d824      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b05c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b060:	d018      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b066:	d81e      	bhi.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b070:	d007      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b072:	e018      	b.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b074:	4b8d      	ldr	r3, [pc, #564]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	4a8c      	ldr	r2, [pc, #560]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b07a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b07e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b080:	e017      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3304      	adds	r3, #4
 800b086:	2100      	movs	r1, #0
 800b088:	4618      	mov	r0, r3
 800b08a:	f001 f80d 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b08e:	4603      	mov	r3, r0
 800b090:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b092:	e00e      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3324      	adds	r3, #36	; 0x24
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 f8b6 	bl	800c20c <RCCEx_PLL3_Config>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b0a4:	e005      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0aa:	e002      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b0ac:	bf00      	nop
 800b0ae:	e000      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b0b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d109      	bne.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0b8:	4b7c      	ldr	r3, [pc, #496]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c4:	4979      	ldr	r1, [pc, #484]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	650b      	str	r3, [r1, #80]	; 0x50
 800b0ca:	e001      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
 800b0ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d049      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0e4:	d02e      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800b0e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0ea:	d828      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b0ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0f0:	d02a      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b0f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0f6:	d822      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b0f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0fc:	d026      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b0fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b102:	d81c      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b108:	d010      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b10a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b10e:	d816      	bhi.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b110:	2b00      	cmp	r3, #0
 800b112:	d01d      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b118:	d111      	bne.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3304      	adds	r3, #4
 800b11e:	2101      	movs	r1, #1
 800b120:	4618      	mov	r0, r3
 800b122:	f000 ffc1 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b12a:	e012      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3324      	adds	r3, #36	; 0x24
 800b130:	2101      	movs	r1, #1
 800b132:	4618      	mov	r0, r3
 800b134:	f001 f86a 	bl	800c20c <RCCEx_PLL3_Config>
 800b138:	4603      	mov	r3, r0
 800b13a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b13c:	e009      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	75fb      	strb	r3, [r7, #23]
      break;
 800b142:	e006      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b144:	bf00      	nop
 800b146:	e004      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b148:	bf00      	nop
 800b14a:	e002      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b14c:	bf00      	nop
 800b14e:	e000      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b150:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d109      	bne.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b158:	4b54      	ldr	r3, [pc, #336]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b15c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b164:	4951      	ldr	r1, [pc, #324]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b166:	4313      	orrs	r3, r2
 800b168:	650b      	str	r3, [r1, #80]	; 0x50
 800b16a:	e001      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d04b      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b186:	d02e      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b18c:	d828      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b18e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b192:	d02a      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b198:	d822      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b19a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b19e:	d026      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800b1a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1a4:	d81c      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b1a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1aa:	d010      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x496>
 800b1ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1b0:	d816      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d01d      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800b1b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ba:	d111      	bne.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 ff70 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b1cc:	e012      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3324      	adds	r3, #36	; 0x24
 800b1d2:	2101      	movs	r1, #1
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f001 f819 	bl	800c20c <RCCEx_PLL3_Config>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b1de:	e009      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e4:	e006      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1e6:	bf00      	nop
 800b1e8:	e004      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1ea:	bf00      	nop
 800b1ec:	e002      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b1fa:	4b2c      	ldr	r3, [pc, #176]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b1fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b208:	4928      	ldr	r1, [pc, #160]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	658b      	str	r3, [r1, #88]	; 0x58
 800b20e:	e001      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d02f      	beq.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b228:	d00e      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800b22a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b22e:	d814      	bhi.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b230:	2b00      	cmp	r3, #0
 800b232:	d015      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b238:	d10f      	bne.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b23a:	4b1c      	ldr	r3, [pc, #112]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23e:	4a1b      	ldr	r2, [pc, #108]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b244:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b246:	e00c      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3304      	adds	r3, #4
 800b24c:	2101      	movs	r1, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 ff2a 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b258:	e003      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	75fb      	strb	r3, [r7, #23]
      break;
 800b25e:	e000      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800b260:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b262:	7dfb      	ldrb	r3, [r7, #23]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b268:	4b10      	ldr	r3, [pc, #64]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b274:	490d      	ldr	r1, [pc, #52]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b276:	4313      	orrs	r3, r2
 800b278:	650b      	str	r3, [r1, #80]	; 0x50
 800b27a:	e001      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d034      	beq.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b290:	2b03      	cmp	r3, #3
 800b292:	d81d      	bhi.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800b294:	a201      	add	r2, pc, #4	; (adr r2, 800b29c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800b296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29a:	bf00      	nop
 800b29c:	0800b2d7 	.word	0x0800b2d7
 800b2a0:	0800b2b1 	.word	0x0800b2b1
 800b2a4:	0800b2bf 	.word	0x0800b2bf
 800b2a8:	0800b2d7 	.word	0x0800b2d7
 800b2ac:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b0:	4bb1      	ldr	r3, [pc, #708]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	4ab0      	ldr	r2, [pc, #704]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b2bc:	e00c      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	2102      	movs	r1, #2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f000 feef 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b2ce:	e003      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d4:	e000      	b.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800b2d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b2de:	4ba6      	ldr	r3, [pc, #664]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e2:	f023 0203 	bic.w	r2, r3, #3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ea:	49a3      	ldr	r1, [pc, #652]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b2f0:	e001      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 8086 	beq.w	800b410 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b304:	4b9d      	ldr	r3, [pc, #628]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a9c      	ldr	r2, [pc, #624]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b30a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b30e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b310:	f7fb fc4a 	bl	8006ba8 <HAL_GetTick>
 800b314:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b316:	e009      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b318:	f7fb fc46 	bl	8006ba8 <HAL_GetTick>
 800b31c:	4602      	mov	r2, r0
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	2b64      	cmp	r3, #100	; 0x64
 800b324:	d902      	bls.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	75fb      	strb	r3, [r7, #23]
        break;
 800b32a:	e005      	b.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b32c:	4b93      	ldr	r3, [pc, #588]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b334:	2b00      	cmp	r3, #0
 800b336:	d0ef      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d166      	bne.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b33e:	4b8e      	ldr	r3, [pc, #568]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b348:	4053      	eors	r3, r2
 800b34a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d013      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b352:	4b89      	ldr	r3, [pc, #548]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b35a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b35c:	4b86      	ldr	r3, [pc, #536]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b360:	4a85      	ldr	r2, [pc, #532]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b366:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b368:	4b83      	ldr	r3, [pc, #524]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b36c:	4a82      	ldr	r2, [pc, #520]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b36e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b372:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b374:	4a80      	ldr	r2, [pc, #512]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b384:	d115      	bne.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b386:	f7fb fc0f 	bl	8006ba8 <HAL_GetTick>
 800b38a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b38c:	e00b      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b38e:	f7fb fc0b 	bl	8006ba8 <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	f241 3288 	movw	r2, #5000	; 0x1388
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d902      	bls.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800b3a0:	2303      	movs	r3, #3
 800b3a2:	75fb      	strb	r3, [r7, #23]
            break;
 800b3a4:	e005      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3a6:	4b74      	ldr	r3, [pc, #464]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3aa:	f003 0302 	and.w	r3, r3, #2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0ed      	beq.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d126      	bne.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3c6:	d10d      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800b3c8:	4b6b      	ldr	r3, [pc, #428]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3d6:	0919      	lsrs	r1, r3, #4
 800b3d8:	4b69      	ldr	r3, [pc, #420]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b3da:	400b      	ands	r3, r1
 800b3dc:	4966      	ldr	r1, [pc, #408]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	610b      	str	r3, [r1, #16]
 800b3e2:	e005      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b3e4:	4b64      	ldr	r3, [pc, #400]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	4a63      	ldr	r2, [pc, #396]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3ee:	6113      	str	r3, [r2, #16]
 800b3f0:	4b61      	ldr	r3, [pc, #388]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3fe:	495e      	ldr	r1, [pc, #376]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b400:	4313      	orrs	r3, r2
 800b402:	670b      	str	r3, [r1, #112]	; 0x70
 800b404:	e004      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b406:	7dfb      	ldrb	r3, [r7, #23]
 800b408:	75bb      	strb	r3, [r7, #22]
 800b40a:	e001      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
 800b40e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0301 	and.w	r3, r3, #1
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d07e      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b420:	2b28      	cmp	r3, #40	; 0x28
 800b422:	d867      	bhi.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800b424:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800b426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42a:	bf00      	nop
 800b42c:	0800b4fb 	.word	0x0800b4fb
 800b430:	0800b4f5 	.word	0x0800b4f5
 800b434:	0800b4f5 	.word	0x0800b4f5
 800b438:	0800b4f5 	.word	0x0800b4f5
 800b43c:	0800b4f5 	.word	0x0800b4f5
 800b440:	0800b4f5 	.word	0x0800b4f5
 800b444:	0800b4f5 	.word	0x0800b4f5
 800b448:	0800b4f5 	.word	0x0800b4f5
 800b44c:	0800b4d1 	.word	0x0800b4d1
 800b450:	0800b4f5 	.word	0x0800b4f5
 800b454:	0800b4f5 	.word	0x0800b4f5
 800b458:	0800b4f5 	.word	0x0800b4f5
 800b45c:	0800b4f5 	.word	0x0800b4f5
 800b460:	0800b4f5 	.word	0x0800b4f5
 800b464:	0800b4f5 	.word	0x0800b4f5
 800b468:	0800b4f5 	.word	0x0800b4f5
 800b46c:	0800b4e3 	.word	0x0800b4e3
 800b470:	0800b4f5 	.word	0x0800b4f5
 800b474:	0800b4f5 	.word	0x0800b4f5
 800b478:	0800b4f5 	.word	0x0800b4f5
 800b47c:	0800b4f5 	.word	0x0800b4f5
 800b480:	0800b4f5 	.word	0x0800b4f5
 800b484:	0800b4f5 	.word	0x0800b4f5
 800b488:	0800b4f5 	.word	0x0800b4f5
 800b48c:	0800b4fb 	.word	0x0800b4fb
 800b490:	0800b4f5 	.word	0x0800b4f5
 800b494:	0800b4f5 	.word	0x0800b4f5
 800b498:	0800b4f5 	.word	0x0800b4f5
 800b49c:	0800b4f5 	.word	0x0800b4f5
 800b4a0:	0800b4f5 	.word	0x0800b4f5
 800b4a4:	0800b4f5 	.word	0x0800b4f5
 800b4a8:	0800b4f5 	.word	0x0800b4f5
 800b4ac:	0800b4fb 	.word	0x0800b4fb
 800b4b0:	0800b4f5 	.word	0x0800b4f5
 800b4b4:	0800b4f5 	.word	0x0800b4f5
 800b4b8:	0800b4f5 	.word	0x0800b4f5
 800b4bc:	0800b4f5 	.word	0x0800b4f5
 800b4c0:	0800b4f5 	.word	0x0800b4f5
 800b4c4:	0800b4f5 	.word	0x0800b4f5
 800b4c8:	0800b4f5 	.word	0x0800b4f5
 800b4cc:	0800b4fb 	.word	0x0800b4fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f000 fde6 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b4e0:	e00c      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3324      	adds	r3, #36	; 0x24
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f000 fe8f 	bl	800c20c <RCCEx_PLL3_Config>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b4f2:	e003      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f8:	e000      	b.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800b4fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b502:	4b1d      	ldr	r3, [pc, #116]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b506:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b50e:	491a      	ldr	r1, [pc, #104]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b510:	4313      	orrs	r3, r2
 800b512:	654b      	str	r3, [r1, #84]	; 0x54
 800b514:	e001      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0302 	and.w	r3, r3, #2
 800b522:	2b00      	cmp	r3, #0
 800b524:	d03e      	beq.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d820      	bhi.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800b52e:	a201      	add	r2, pc, #4	; (adr r2, 800b534 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800b530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b534:	0800b585 	.word	0x0800b585
 800b538:	0800b54d 	.word	0x0800b54d
 800b53c:	0800b55f 	.word	0x0800b55f
 800b540:	0800b585 	.word	0x0800b585
 800b544:	0800b585 	.word	0x0800b585
 800b548:	0800b585 	.word	0x0800b585
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3304      	adds	r3, #4
 800b550:	2101      	movs	r1, #1
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fda8 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b558:	4603      	mov	r3, r0
 800b55a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b55c:	e013      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3324      	adds	r3, #36	; 0x24
 800b562:	2101      	movs	r1, #1
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fe51 	bl	800c20c <RCCEx_PLL3_Config>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b56e:	e00a      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	75fb      	strb	r3, [r7, #23]
      break;
 800b574:	e007      	b.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800b576:	bf00      	nop
 800b578:	58024400 	.word	0x58024400
 800b57c:	58024800 	.word	0x58024800
 800b580:	00ffffcf 	.word	0x00ffffcf
      break;
 800b584:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b586:	7dfb      	ldrb	r3, [r7, #23]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d109      	bne.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b58c:	4b9f      	ldr	r3, [pc, #636]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b590:	f023 0207 	bic.w	r2, r3, #7
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b598:	499c      	ldr	r1, [pc, #624]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b59a:	4313      	orrs	r3, r2
 800b59c:	654b      	str	r3, [r1, #84]	; 0x54
 800b59e:	e001      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a0:	7dfb      	ldrb	r3, [r7, #23]
 800b5a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d039      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5b6:	2b05      	cmp	r3, #5
 800b5b8:	d820      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800b5ba:	a201      	add	r2, pc, #4	; (adr r2, 800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c0:	0800b603 	.word	0x0800b603
 800b5c4:	0800b5d9 	.word	0x0800b5d9
 800b5c8:	0800b5eb 	.word	0x0800b5eb
 800b5cc:	0800b603 	.word	0x0800b603
 800b5d0:	0800b603 	.word	0x0800b603
 800b5d4:	0800b603 	.word	0x0800b603
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	2101      	movs	r1, #1
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 fd62 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b5e8:	e00c      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3324      	adds	r3, #36	; 0x24
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 fe0b 	bl	800c20c <RCCEx_PLL3_Config>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b5fa:	e003      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b600:	e000      	b.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800b602:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b60a:	4b80      	ldr	r3, [pc, #512]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b60e:	f023 0207 	bic.w	r2, r3, #7
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b618:	497c      	ldr	r1, [pc, #496]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	658b      	str	r3, [r1, #88]	; 0x58
 800b61e:	e001      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 0320 	and.w	r3, r3, #32
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d04b      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b63a:	d02e      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800b63c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b640:	d828      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b646:	d02a      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b64c:	d822      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b64e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b652:	d026      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800b654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b658:	d81c      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b65a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b65e:	d010      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800b660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b664:	d816      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b666:	2b00      	cmp	r3, #0
 800b668:	d01d      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b66a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b66e:	d111      	bne.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3304      	adds	r3, #4
 800b674:	2100      	movs	r1, #0
 800b676:	4618      	mov	r0, r3
 800b678:	f000 fd16 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b67c:	4603      	mov	r3, r0
 800b67e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b680:	e012      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3324      	adds	r3, #36	; 0x24
 800b686:	2102      	movs	r1, #2
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 fdbf 	bl	800c20c <RCCEx_PLL3_Config>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b692:	e009      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	75fb      	strb	r3, [r7, #23]
      break;
 800b698:	e006      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b69a:	bf00      	nop
 800b69c:	e004      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b69e:	bf00      	nop
 800b6a0:	e002      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b6a2:	bf00      	nop
 800b6a4:	e000      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b6a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6a8:	7dfb      	ldrb	r3, [r7, #23]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10a      	bne.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6ae:	4b57      	ldr	r3, [pc, #348]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6bc:	4953      	ldr	r1, [pc, #332]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	654b      	str	r3, [r1, #84]	; 0x54
 800b6c2:	e001      	b.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d04b      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6de:	d02e      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800b6e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6e4:	d828      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ea:	d02a      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800b6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f0:	d822      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b6f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6f6:	d026      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b6f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6fc:	d81c      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b6fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b702:	d010      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b708:	d816      	bhi.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d01d      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b70e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b712:	d111      	bne.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	3304      	adds	r3, #4
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f000 fcc4 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b720:	4603      	mov	r3, r0
 800b722:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b724:	e012      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	3324      	adds	r3, #36	; 0x24
 800b72a:	2102      	movs	r1, #2
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fd6d 	bl	800c20c <RCCEx_PLL3_Config>
 800b732:	4603      	mov	r3, r0
 800b734:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b736:	e009      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	75fb      	strb	r3, [r7, #23]
      break;
 800b73c:	e006      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b73e:	bf00      	nop
 800b740:	e004      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b742:	bf00      	nop
 800b744:	e002      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b746:	bf00      	nop
 800b748:	e000      	b.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b74a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b74c:	7dfb      	ldrb	r3, [r7, #23]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b752:	4b2e      	ldr	r3, [pc, #184]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b756:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b760:	492a      	ldr	r1, [pc, #168]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b762:	4313      	orrs	r3, r2
 800b764:	658b      	str	r3, [r1, #88]	; 0x58
 800b766:	e001      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b768:	7dfb      	ldrb	r3, [r7, #23]
 800b76a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b774:	2b00      	cmp	r3, #0
 800b776:	d04d      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b77e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b782:	d02e      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800b784:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b788:	d828      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b78a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b78e:	d02a      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800b790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b794:	d822      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b796:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b79a:	d026      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800b79c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7a0:	d81c      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b7a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7a6:	d010      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800b7a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7ac:	d816      	bhi.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01d      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800b7b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b6:	d111      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 fc72 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b7c8:	e012      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3324      	adds	r3, #36	; 0x24
 800b7ce:	2102      	movs	r1, #2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 fd1b 	bl	800c20c <RCCEx_PLL3_Config>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b7da:	e009      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	75fb      	strb	r3, [r7, #23]
      break;
 800b7e0:	e006      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7e2:	bf00      	nop
 800b7e4:	e004      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7e6:	bf00      	nop
 800b7e8:	e002      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7ea:	bf00      	nop
 800b7ec:	e000      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10c      	bne.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7f6:	4b05      	ldr	r3, [pc, #20]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b804:	4901      	ldr	r1, [pc, #4]	; (800b80c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b806:	4313      	orrs	r3, r2
 800b808:	658b      	str	r3, [r1, #88]	; 0x58
 800b80a:	e003      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b80c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b810:	7dfb      	ldrb	r3, [r7, #23]
 800b812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0308 	and.w	r3, r3, #8
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d018      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b828:	d10a      	bne.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3324      	adds	r3, #36	; 0x24
 800b82e:	2102      	movs	r1, #2
 800b830:	4618      	mov	r0, r3
 800b832:	f000 fceb 	bl	800c20c <RCCEx_PLL3_Config>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b840:	4b8a      	ldr	r3, [pc, #552]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b84c:	4987      	ldr	r1, [pc, #540]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b84e:	4313      	orrs	r3, r2
 800b850:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 0310 	and.w	r3, r3, #16
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d01a      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b868:	d10a      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3324      	adds	r3, #36	; 0x24
 800b86e:	2102      	movs	r1, #2
 800b870:	4618      	mov	r0, r3
 800b872:	f000 fccb 	bl	800c20c <RCCEx_PLL3_Config>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b880:	4b7a      	ldr	r3, [pc, #488]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b88e:	4977      	ldr	r1, [pc, #476]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b890:	4313      	orrs	r3, r2
 800b892:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d034      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8aa:	d01d      	beq.n	800b8e8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b8ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8b0:	d817      	bhi.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d003      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b8b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ba:	d009      	beq.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8bc:	e011      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 fbef 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b8ce:	e00c      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	3324      	adds	r3, #36	; 0x24
 800b8d4:	2102      	movs	r1, #2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fc98 	bl	800c20c <RCCEx_PLL3_Config>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b8e0:	e003      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b8e6:	e000      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800b8e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8f0:	4b5e      	ldr	r3, [pc, #376]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b8f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8fe:	495b      	ldr	r1, [pc, #364]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b900:	4313      	orrs	r3, r2
 800b902:	658b      	str	r3, [r1, #88]	; 0x58
 800b904:	e001      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b912:	2b00      	cmp	r3, #0
 800b914:	d033      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b91c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b920:	d01c      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b926:	d816      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b92c:	d003      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b92e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b932:	d007      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800b934:	e00f      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b936:	4b4d      	ldr	r3, [pc, #308]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93a:	4a4c      	ldr	r2, [pc, #304]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b93c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b942:	e00c      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3324      	adds	r3, #36	; 0x24
 800b948:	2101      	movs	r1, #1
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 fc5e 	bl	800c20c <RCCEx_PLL3_Config>
 800b950:	4603      	mov	r3, r0
 800b952:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b954:	e003      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	75fb      	strb	r3, [r7, #23]
      break;
 800b95a:	e000      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800b95c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b964:	4b41      	ldr	r3, [pc, #260]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b972:	493e      	ldr	r1, [pc, #248]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b974:	4313      	orrs	r3, r2
 800b976:	654b      	str	r3, [r1, #84]	; 0x54
 800b978:	e001      	b.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b986:	2b00      	cmp	r3, #0
 800b988:	d029      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b996:	d007      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b998:	e00f      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99a:	4b34      	ldr	r3, [pc, #208]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	4a33      	ldr	r2, [pc, #204]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b9a6:	e00b      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	2102      	movs	r1, #2
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 fb7a 	bl	800c0a8 <RCCEx_PLL2_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b9b8:	e002      	b.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b9be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d109      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b9c6:	4b29      	ldr	r3, [pc, #164]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d2:	4926      	ldr	r1, [pc, #152]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b9d8:	e001      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3324      	adds	r3, #36	; 0x24
 800b9ee:	2102      	movs	r1, #2
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 fc0b 	bl	800c20c <RCCEx_PLL3_Config>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d033      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba14:	d017      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ba16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba1a:	d811      	bhi.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ba1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba20:	d013      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800ba22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba26:	d80b      	bhi.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d010      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800ba2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba30:	d106      	bne.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba32:	4b0e      	ldr	r3, [pc, #56]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba36:	4a0d      	ldr	r2, [pc, #52]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ba3e:	e007      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	75fb      	strb	r3, [r7, #23]
      break;
 800ba44:	e004      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ba46:	bf00      	nop
 800ba48:	e002      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ba4a:	bf00      	nop
 800ba4c:	e000      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ba4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10c      	bne.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba56:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba62:	4902      	ldr	r1, [pc, #8]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba64:	4313      	orrs	r3, r2
 800ba66:	654b      	str	r3, [r1, #84]	; 0x54
 800ba68:	e004      	b.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800ba6a:	bf00      	nop
 800ba6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d008      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba80:	4b29      	ldr	r3, [pc, #164]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ba82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba8c:	4926      	ldr	r1, [pc, #152]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d008      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba9e:	4b22      	ldr	r3, [pc, #136]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800baa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baaa:	491f      	ldr	r1, [pc, #124]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800baac:	4313      	orrs	r3, r2
 800baae:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00d      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800babc:	4b1a      	ldr	r3, [pc, #104]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	4a19      	ldr	r2, [pc, #100]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bac6:	6113      	str	r3, [r2, #16]
 800bac8:	4b17      	ldr	r3, [pc, #92]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800baca:	691a      	ldr	r2, [r3, #16]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bad2:	4915      	ldr	r1, [pc, #84]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	da08      	bge.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bae0:	4b11      	ldr	r3, [pc, #68]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baec:	490e      	ldr	r1, [pc, #56]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800baee:	4313      	orrs	r3, r2
 800baf0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d009      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bafe:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb0c:	4906      	ldr	r1, [pc, #24]	; (800bb28 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bb12:	7dbb      	ldrb	r3, [r7, #22]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e000      	b.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	58024400 	.word	0x58024400

0800bb2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb30:	f7ff f8a6 	bl	800ac80 <HAL_RCC_GetHCLKFreq>
 800bb34:	4602      	mov	r2, r0
 800bb36:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	091b      	lsrs	r3, r3, #4
 800bb3c:	f003 0307 	and.w	r3, r3, #7
 800bb40:	4904      	ldr	r1, [pc, #16]	; (800bb54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb42:	5ccb      	ldrb	r3, [r1, r3]
 800bb44:	f003 031f 	and.w	r3, r3, #31
 800bb48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	58024400 	.word	0x58024400
 800bb54:	08011350 	.word	0x08011350

0800bb58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b089      	sub	sp, #36	; 0x24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb60:	4ba1      	ldr	r3, [pc, #644]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb64:	f003 0303 	and.w	r3, r3, #3
 800bb68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bb6a:	4b9f      	ldr	r3, [pc, #636]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6e:	0b1b      	lsrs	r3, r3, #12
 800bb70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb76:	4b9c      	ldr	r3, [pc, #624]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7a:	091b      	lsrs	r3, r3, #4
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bb82:	4b99      	ldr	r3, [pc, #612]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb86:	08db      	lsrs	r3, r3, #3
 800bb88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	fb02 f303 	mul.w	r3, r2, r3
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 8111 	beq.w	800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	f000 8083 	beq.w	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	f200 80a1 	bhi.w	800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d056      	beq.n	800bc70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbc2:	e099      	b.n	800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbc4:	4b88      	ldr	r3, [pc, #544]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0320 	and.w	r3, r3, #32
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d02d      	beq.n	800bc2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbd0:	4b85      	ldr	r3, [pc, #532]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	08db      	lsrs	r3, r3, #3
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	4a84      	ldr	r2, [pc, #528]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bbdc:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	ee07 3a90 	vmov	s15, r3
 800bbe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbfa:	4b7b      	ldr	r3, [pc, #492]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc02:	ee07 3a90 	vmov	s15, r3
 800bc06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc2a:	e087      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc3e:	4b6a      	ldr	r3, [pc, #424]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc52:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc6e:	e065      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc82:	4b59      	ldr	r3, [pc, #356]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc96:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcb2:	e043      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bdfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bcc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcc6:	4b48      	ldr	r3, [pc, #288]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcce:	ee07 3a90 	vmov	s15, r3
 800bcd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcda:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcf6:	e021      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0a:	4b37      	ldr	r3, [pc, #220]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd12:	ee07 3a90 	vmov	s15, r3
 800bd16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bd3c:	4b2a      	ldr	r3, [pc, #168]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd40:	0a5b      	lsrs	r3, r3, #9
 800bd42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd62:	ee17 2a90 	vmov	r2, s15
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bd6a:	4b1f      	ldr	r3, [pc, #124]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6e:	0c1b      	lsrs	r3, r3, #16
 800bd70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd74:	ee07 3a90 	vmov	s15, r3
 800bd78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd84:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd90:	ee17 2a90 	vmov	r2, s15
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bd98:	4b13      	ldr	r3, [pc, #76]	; (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9c:	0e1b      	lsrs	r3, r3, #24
 800bd9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdbe:	ee17 2a90 	vmov	r2, s15
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bdc6:	e008      	b.n	800bdda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	609a      	str	r2, [r3, #8]
}
 800bdda:	bf00      	nop
 800bddc:	3724      	adds	r7, #36	; 0x24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	58024400 	.word	0x58024400
 800bdec:	03d09000 	.word	0x03d09000
 800bdf0:	46000000 	.word	0x46000000
 800bdf4:	4c742400 	.word	0x4c742400
 800bdf8:	4a742400 	.word	0x4a742400
 800bdfc:	4af42400 	.word	0x4af42400

0800be00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800be00:	b480      	push	{r7}
 800be02:	b089      	sub	sp, #36	; 0x24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be08:	4ba1      	ldr	r3, [pc, #644]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800be12:	4b9f      	ldr	r3, [pc, #636]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be16:	0d1b      	lsrs	r3, r3, #20
 800be18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be1e:	4b9c      	ldr	r3, [pc, #624]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be22:	0a1b      	lsrs	r3, r3, #8
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800be2a:	4b99      	ldr	r3, [pc, #612]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be2e:	08db      	lsrs	r3, r3, #3
 800be30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	fb02 f303 	mul.w	r3, r2, r3
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 8111 	beq.w	800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	2b02      	cmp	r3, #2
 800be52:	f000 8083 	beq.w	800bf5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	f200 80a1 	bhi.w	800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d056      	beq.n	800bf18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be6a:	e099      	b.n	800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be6c:	4b88      	ldr	r3, [pc, #544]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 0320 	and.w	r3, r3, #32
 800be74:	2b00      	cmp	r3, #0
 800be76:	d02d      	beq.n	800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be78:	4b85      	ldr	r3, [pc, #532]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	08db      	lsrs	r3, r3, #3
 800be7e:	f003 0303 	and.w	r3, r3, #3
 800be82:	4a84      	ldr	r2, [pc, #528]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be84:	fa22 f303 	lsr.w	r3, r2, r3
 800be88:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	ee07 3a90 	vmov	s15, r3
 800be90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bea2:	4b7b      	ldr	r3, [pc, #492]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800beb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bece:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bed2:	e087      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bee6:	4b6a      	ldr	r3, [pc, #424]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800befa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800befe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf16:	e065      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2a:	4b59      	ldr	r3, [pc, #356]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf5a:	e043      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf6e:	4b48      	ldr	r3, [pc, #288]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf9e:	e021      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb2:	4b37      	ldr	r3, [pc, #220]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfba:	ee07 3a90 	vmov	s15, r3
 800bfbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfe2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bfe4:	4b2a      	ldr	r3, [pc, #168]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe8:	0a5b      	lsrs	r3, r3, #9
 800bfea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bffe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00a:	ee17 2a90 	vmov	r2, s15
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c012:	4b1f      	ldr	r3, [pc, #124]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	0c1b      	lsrs	r3, r3, #16
 800c018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c01c:	ee07 3a90 	vmov	s15, r3
 800c020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c02c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c038:	ee17 2a90 	vmov	r2, s15
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c040:	4b13      	ldr	r3, [pc, #76]	; (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c044:	0e1b      	lsrs	r3, r3, #24
 800c046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c052:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c05a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c05e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c066:	ee17 2a90 	vmov	r2, s15
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c06e:	e008      	b.n	800c082 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	609a      	str	r2, [r3, #8]
}
 800c082:	bf00      	nop
 800c084:	3724      	adds	r7, #36	; 0x24
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	58024400 	.word	0x58024400
 800c094:	03d09000 	.word	0x03d09000
 800c098:	46000000 	.word	0x46000000
 800c09c:	4c742400 	.word	0x4c742400
 800c0a0:	4a742400 	.word	0x4a742400
 800c0a4:	4af42400 	.word	0x4af42400

0800c0a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0b6:	4b53      	ldr	r3, [pc, #332]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d101      	bne.n	800c0c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e099      	b.n	800c1fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c0c6:	4b4f      	ldr	r3, [pc, #316]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a4e      	ldr	r2, [pc, #312]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c0cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0d2:	f7fa fd69 	bl	8006ba8 <HAL_GetTick>
 800c0d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0d8:	e008      	b.n	800c0ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c0da:	f7fa fd65 	bl	8006ba8 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	2b02      	cmp	r3, #2
 800c0e6:	d901      	bls.n	800c0ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	e086      	b.n	800c1fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0ec:	4b45      	ldr	r3, [pc, #276]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1f0      	bne.n	800c0da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c0f8:	4b42      	ldr	r3, [pc, #264]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	031b      	lsls	r3, r3, #12
 800c106:	493f      	ldr	r1, [pc, #252]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c108:	4313      	orrs	r3, r2
 800c10a:	628b      	str	r3, [r1, #40]	; 0x28
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	3b01      	subs	r3, #1
 800c112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	025b      	lsls	r3, r3, #9
 800c11e:	b29b      	uxth	r3, r3
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	3b01      	subs	r3, #1
 800c128:	041b      	lsls	r3, r3, #16
 800c12a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	3b01      	subs	r3, #1
 800c136:	061b      	lsls	r3, r3, #24
 800c138:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c13c:	4931      	ldr	r1, [pc, #196]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c13e:	4313      	orrs	r3, r2
 800c140:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c142:	4b30      	ldr	r3, [pc, #192]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	695b      	ldr	r3, [r3, #20]
 800c14e:	492d      	ldr	r1, [pc, #180]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c150:	4313      	orrs	r3, r2
 800c152:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c154:	4b2b      	ldr	r3, [pc, #172]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	f023 0220 	bic.w	r2, r3, #32
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	4928      	ldr	r1, [pc, #160]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c162:	4313      	orrs	r3, r2
 800c164:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c166:	4b27      	ldr	r3, [pc, #156]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16a:	4a26      	ldr	r2, [pc, #152]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c16c:	f023 0310 	bic.w	r3, r3, #16
 800c170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c172:	4b24      	ldr	r3, [pc, #144]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c176:	4b24      	ldr	r3, [pc, #144]	; (800c208 <RCCEx_PLL2_Config+0x160>)
 800c178:	4013      	ands	r3, r2
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	69d2      	ldr	r2, [r2, #28]
 800c17e:	00d2      	lsls	r2, r2, #3
 800c180:	4920      	ldr	r1, [pc, #128]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c182:	4313      	orrs	r3, r2
 800c184:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c186:	4b1f      	ldr	r3, [pc, #124]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	4a1e      	ldr	r2, [pc, #120]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c18c:	f043 0310 	orr.w	r3, r3, #16
 800c190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c198:	4b1a      	ldr	r3, [pc, #104]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	4a19      	ldr	r2, [pc, #100]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c19e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1a4:	e00f      	b.n	800c1c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d106      	bne.n	800c1ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c1ac:	4b15      	ldr	r3, [pc, #84]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	4a14      	ldr	r2, [pc, #80]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c1b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1b8:	e005      	b.n	800c1c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c1ba:	4b12      	ldr	r3, [pc, #72]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	4a11      	ldr	r2, [pc, #68]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c1c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c1c6:	4b0f      	ldr	r3, [pc, #60]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a0e      	ldr	r2, [pc, #56]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c1cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1d2:	f7fa fce9 	bl	8006ba8 <HAL_GetTick>
 800c1d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1d8:	e008      	b.n	800c1ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1da:	f7fa fce5 	bl	8006ba8 <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d901      	bls.n	800c1ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e006      	b.n	800c1fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1ec:	4b05      	ldr	r3, [pc, #20]	; (800c204 <RCCEx_PLL2_Config+0x15c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0f0      	beq.n	800c1da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	58024400 	.word	0x58024400
 800c208:	ffff0007 	.word	0xffff0007

0800c20c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c21a:	4b53      	ldr	r3, [pc, #332]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21e:	f003 0303 	and.w	r3, r3, #3
 800c222:	2b03      	cmp	r3, #3
 800c224:	d101      	bne.n	800c22a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e099      	b.n	800c35e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c22a:	4b4f      	ldr	r3, [pc, #316]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a4e      	ldr	r2, [pc, #312]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c236:	f7fa fcb7 	bl	8006ba8 <HAL_GetTick>
 800c23a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c23c:	e008      	b.n	800c250 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c23e:	f7fa fcb3 	bl	8006ba8 <HAL_GetTick>
 800c242:	4602      	mov	r2, r0
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d901      	bls.n	800c250 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e086      	b.n	800c35e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c250:	4b45      	ldr	r3, [pc, #276]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d1f0      	bne.n	800c23e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c25c:	4b42      	ldr	r3, [pc, #264]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c260:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	051b      	lsls	r3, r3, #20
 800c26a:	493f      	ldr	r1, [pc, #252]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c26c:	4313      	orrs	r3, r2
 800c26e:	628b      	str	r3, [r1, #40]	; 0x28
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	3b01      	subs	r3, #1
 800c276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	3b01      	subs	r3, #1
 800c280:	025b      	lsls	r3, r3, #9
 800c282:	b29b      	uxth	r3, r3
 800c284:	431a      	orrs	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	041b      	lsls	r3, r3, #16
 800c28e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c292:	431a      	orrs	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	3b01      	subs	r3, #1
 800c29a:	061b      	lsls	r3, r3, #24
 800c29c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2a0:	4931      	ldr	r1, [pc, #196]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c2a6:	4b30      	ldr	r3, [pc, #192]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	492d      	ldr	r1, [pc, #180]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2b8:	4b2b      	ldr	r3, [pc, #172]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	4928      	ldr	r1, [pc, #160]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2ca:	4b27      	ldr	r3, [pc, #156]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ce:	4a26      	ldr	r2, [pc, #152]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c2d6:	4b24      	ldr	r3, [pc, #144]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2da:	4b24      	ldr	r3, [pc, #144]	; (800c36c <RCCEx_PLL3_Config+0x160>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	69d2      	ldr	r2, [r2, #28]
 800c2e2:	00d2      	lsls	r2, r2, #3
 800c2e4:	4920      	ldr	r1, [pc, #128]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c2ea:	4b1f      	ldr	r3, [pc, #124]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ee:	4a1e      	ldr	r2, [pc, #120]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c2fc:	4b1a      	ldr	r3, [pc, #104]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	4a19      	ldr	r2, [pc, #100]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c306:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c308:	e00f      	b.n	800c32a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d106      	bne.n	800c31e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c310:	4b15      	ldr	r3, [pc, #84]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c314:	4a14      	ldr	r2, [pc, #80]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c316:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c31a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c31c:	e005      	b.n	800c32a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c31e:	4b12      	ldr	r3, [pc, #72]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c322:	4a11      	ldr	r2, [pc, #68]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c328:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c32a:	4b0f      	ldr	r3, [pc, #60]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a0e      	ldr	r2, [pc, #56]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c336:	f7fa fc37 	bl	8006ba8 <HAL_GetTick>
 800c33a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c33c:	e008      	b.n	800c350 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c33e:	f7fa fc33 	bl	8006ba8 <HAL_GetTick>
 800c342:	4602      	mov	r2, r0
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d901      	bls.n	800c350 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e006      	b.n	800c35e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <RCCEx_PLL3_Config+0x15c>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d0f0      	beq.n	800c33e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	58024400 	.word	0x58024400
 800c36c:	ffff0007 	.word	0xffff0007

0800c370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e049      	b.n	800c416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7f9 fd56 	bl	8005e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	f001 f820 	bl	800d3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
	...

0800c420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b01      	cmp	r3, #1
 800c432:	d001      	beq.n	800c438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e05e      	b.n	800c4f6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	68da      	ldr	r2, [r3, #12]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f042 0201 	orr.w	r2, r2, #1
 800c44e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a2b      	ldr	r2, [pc, #172]	; (800c504 <HAL_TIM_Base_Start_IT+0xe4>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d02c      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c462:	d027      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a27      	ldr	r2, [pc, #156]	; (800c508 <HAL_TIM_Base_Start_IT+0xe8>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d022      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a26      	ldr	r2, [pc, #152]	; (800c50c <HAL_TIM_Base_Start_IT+0xec>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d01d      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a24      	ldr	r2, [pc, #144]	; (800c510 <HAL_TIM_Base_Start_IT+0xf0>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d018      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a23      	ldr	r2, [pc, #140]	; (800c514 <HAL_TIM_Base_Start_IT+0xf4>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d013      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a21      	ldr	r2, [pc, #132]	; (800c518 <HAL_TIM_Base_Start_IT+0xf8>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d00e      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a20      	ldr	r2, [pc, #128]	; (800c51c <HAL_TIM_Base_Start_IT+0xfc>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d009      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a1e      	ldr	r2, [pc, #120]	; (800c520 <HAL_TIM_Base_Start_IT+0x100>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d004      	beq.n	800c4b4 <HAL_TIM_Base_Start_IT+0x94>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a1d      	ldr	r2, [pc, #116]	; (800c524 <HAL_TIM_Base_Start_IT+0x104>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d115      	bne.n	800c4e0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	689a      	ldr	r2, [r3, #8]
 800c4ba:	4b1b      	ldr	r3, [pc, #108]	; (800c528 <HAL_TIM_Base_Start_IT+0x108>)
 800c4bc:	4013      	ands	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2b06      	cmp	r3, #6
 800c4c4:	d015      	beq.n	800c4f2 <HAL_TIM_Base_Start_IT+0xd2>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4cc:	d011      	beq.n	800c4f2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f042 0201 	orr.w	r2, r2, #1
 800c4dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4de:	e008      	b.n	800c4f2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0201 	orr.w	r2, r2, #1
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	e000      	b.n	800c4f4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	40010000 	.word	0x40010000
 800c508:	40000400 	.word	0x40000400
 800c50c:	40000800 	.word	0x40000800
 800c510:	40000c00 	.word	0x40000c00
 800c514:	40010400 	.word	0x40010400
 800c518:	40001800 	.word	0x40001800
 800c51c:	40014000 	.word	0x40014000
 800c520:	4000e000 	.word	0x4000e000
 800c524:	4000e400 	.word	0x4000e400
 800c528:	00010007 	.word	0x00010007

0800c52c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e049      	b.n	800c5d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b00      	cmp	r3, #0
 800c548:	d106      	bne.n	800c558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7f9 fd0e 	bl	8005f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3304      	adds	r3, #4
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f000 ff42 	bl	800d3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d109      	bne.n	800c600 <HAL_TIM_PWM_Start+0x24>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	bf14      	ite	ne
 800c5f8:	2301      	movne	r3, #1
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	e03c      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b04      	cmp	r3, #4
 800c604:	d109      	bne.n	800c61a <HAL_TIM_PWM_Start+0x3e>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b01      	cmp	r3, #1
 800c610:	bf14      	ite	ne
 800c612:	2301      	movne	r3, #1
 800c614:	2300      	moveq	r3, #0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	e02f      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b08      	cmp	r3, #8
 800c61e:	d109      	bne.n	800c634 <HAL_TIM_PWM_Start+0x58>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b01      	cmp	r3, #1
 800c62a:	bf14      	ite	ne
 800c62c:	2301      	movne	r3, #1
 800c62e:	2300      	moveq	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	e022      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b0c      	cmp	r3, #12
 800c638:	d109      	bne.n	800c64e <HAL_TIM_PWM_Start+0x72>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b01      	cmp	r3, #1
 800c644:	bf14      	ite	ne
 800c646:	2301      	movne	r3, #1
 800c648:	2300      	moveq	r3, #0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	e015      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b10      	cmp	r3, #16
 800c652:	d109      	bne.n	800c668 <HAL_TIM_PWM_Start+0x8c>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	e008      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b01      	cmp	r3, #1
 800c672:	bf14      	ite	ne
 800c674:	2301      	movne	r3, #1
 800c676:	2300      	moveq	r3, #0
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e0ab      	b.n	800c7da <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d104      	bne.n	800c692 <HAL_TIM_PWM_Start+0xb6>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c690:	e023      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b04      	cmp	r3, #4
 800c696:	d104      	bne.n	800c6a2 <HAL_TIM_PWM_Start+0xc6>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2202      	movs	r2, #2
 800c69c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6a0:	e01b      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b08      	cmp	r3, #8
 800c6a6:	d104      	bne.n	800c6b2 <HAL_TIM_PWM_Start+0xd6>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6b0:	e013      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b0c      	cmp	r3, #12
 800c6b6:	d104      	bne.n	800c6c2 <HAL_TIM_PWM_Start+0xe6>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6c0:	e00b      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	d104      	bne.n	800c6d2 <HAL_TIM_PWM_Start+0xf6>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6d0:	e003      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f001 faa0 	bl	800dc28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a3d      	ldr	r2, [pc, #244]	; (800c7e4 <HAL_TIM_PWM_Start+0x208>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d013      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a3c      	ldr	r2, [pc, #240]	; (800c7e8 <HAL_TIM_PWM_Start+0x20c>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d00e      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a3a      	ldr	r2, [pc, #232]	; (800c7ec <HAL_TIM_PWM_Start+0x210>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d009      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a39      	ldr	r2, [pc, #228]	; (800c7f0 <HAL_TIM_PWM_Start+0x214>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d004      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a37      	ldr	r2, [pc, #220]	; (800c7f4 <HAL_TIM_PWM_Start+0x218>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d101      	bne.n	800c71e <HAL_TIM_PWM_Start+0x142>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e000      	b.n	800c720 <HAL_TIM_PWM_Start+0x144>
 800c71e:	2300      	movs	r3, #0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d007      	beq.n	800c734 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c732:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a2a      	ldr	r2, [pc, #168]	; (800c7e4 <HAL_TIM_PWM_Start+0x208>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d02c      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c746:	d027      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a2a      	ldr	r2, [pc, #168]	; (800c7f8 <HAL_TIM_PWM_Start+0x21c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d022      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a29      	ldr	r2, [pc, #164]	; (800c7fc <HAL_TIM_PWM_Start+0x220>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d01d      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a27      	ldr	r2, [pc, #156]	; (800c800 <HAL_TIM_PWM_Start+0x224>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d018      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a1f      	ldr	r2, [pc, #124]	; (800c7e8 <HAL_TIM_PWM_Start+0x20c>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d013      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a23      	ldr	r2, [pc, #140]	; (800c804 <HAL_TIM_PWM_Start+0x228>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d00e      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a1b      	ldr	r2, [pc, #108]	; (800c7ec <HAL_TIM_PWM_Start+0x210>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d009      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a1f      	ldr	r2, [pc, #124]	; (800c808 <HAL_TIM_PWM_Start+0x22c>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d004      	beq.n	800c798 <HAL_TIM_PWM_Start+0x1bc>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a1e      	ldr	r2, [pc, #120]	; (800c80c <HAL_TIM_PWM_Start+0x230>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d115      	bne.n	800c7c4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689a      	ldr	r2, [r3, #8]
 800c79e:	4b1c      	ldr	r3, [pc, #112]	; (800c810 <HAL_TIM_PWM_Start+0x234>)
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b06      	cmp	r3, #6
 800c7a8:	d015      	beq.n	800c7d6 <HAL_TIM_PWM_Start+0x1fa>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7b0:	d011      	beq.n	800c7d6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f042 0201 	orr.w	r2, r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c2:	e008      	b.n	800c7d6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f042 0201 	orr.w	r2, r2, #1
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	e000      	b.n	800c7d8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	40010000 	.word	0x40010000
 800c7e8:	40010400 	.word	0x40010400
 800c7ec:	40014000 	.word	0x40014000
 800c7f0:	40014400 	.word	0x40014400
 800c7f4:	40014800 	.word	0x40014800
 800c7f8:	40000400 	.word	0x40000400
 800c7fc:	40000800 	.word	0x40000800
 800c800:	40000c00 	.word	0x40000c00
 800c804:	40001800 	.word	0x40001800
 800c808:	4000e000 	.word	0x4000e000
 800c80c:	4000e400 	.word	0x4000e400
 800c810:	00010007 	.word	0x00010007

0800c814 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c81e:	2300      	movs	r3, #0
 800c820:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d109      	bne.n	800c83c <HAL_TIM_PWM_Start_IT+0x28>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	2b01      	cmp	r3, #1
 800c832:	bf14      	ite	ne
 800c834:	2301      	movne	r3, #1
 800c836:	2300      	moveq	r3, #0
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	e03c      	b.n	800c8b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d109      	bne.n	800c856 <HAL_TIM_PWM_Start_IT+0x42>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	bf14      	ite	ne
 800c84e:	2301      	movne	r3, #1
 800c850:	2300      	moveq	r3, #0
 800c852:	b2db      	uxtb	r3, r3
 800c854:	e02f      	b.n	800c8b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b08      	cmp	r3, #8
 800c85a:	d109      	bne.n	800c870 <HAL_TIM_PWM_Start_IT+0x5c>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b01      	cmp	r3, #1
 800c866:	bf14      	ite	ne
 800c868:	2301      	movne	r3, #1
 800c86a:	2300      	moveq	r3, #0
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	e022      	b.n	800c8b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2b0c      	cmp	r3, #12
 800c874:	d109      	bne.n	800c88a <HAL_TIM_PWM_Start_IT+0x76>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	2b01      	cmp	r3, #1
 800c880:	bf14      	ite	ne
 800c882:	2301      	movne	r3, #1
 800c884:	2300      	moveq	r3, #0
 800c886:	b2db      	uxtb	r3, r3
 800c888:	e015      	b.n	800c8b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	2b10      	cmp	r3, #16
 800c88e:	d109      	bne.n	800c8a4 <HAL_TIM_PWM_Start_IT+0x90>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b01      	cmp	r3, #1
 800c89a:	bf14      	ite	ne
 800c89c:	2301      	movne	r3, #1
 800c89e:	2300      	moveq	r3, #0
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	e008      	b.n	800c8b6 <HAL_TIM_PWM_Start_IT+0xa2>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	bf14      	ite	ne
 800c8b0:	2301      	movne	r3, #1
 800c8b2:	2300      	moveq	r3, #0
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d001      	beq.n	800c8be <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e0f6      	b.n	800caac <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d104      	bne.n	800c8ce <HAL_TIM_PWM_Start_IT+0xba>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2202      	movs	r2, #2
 800c8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8cc:	e023      	b.n	800c916 <HAL_TIM_PWM_Start_IT+0x102>
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b04      	cmp	r3, #4
 800c8d2:	d104      	bne.n	800c8de <HAL_TIM_PWM_Start_IT+0xca>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8dc:	e01b      	b.n	800c916 <HAL_TIM_PWM_Start_IT+0x102>
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b08      	cmp	r3, #8
 800c8e2:	d104      	bne.n	800c8ee <HAL_TIM_PWM_Start_IT+0xda>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2202      	movs	r2, #2
 800c8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8ec:	e013      	b.n	800c916 <HAL_TIM_PWM_Start_IT+0x102>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	2b0c      	cmp	r3, #12
 800c8f2:	d104      	bne.n	800c8fe <HAL_TIM_PWM_Start_IT+0xea>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8fc:	e00b      	b.n	800c916 <HAL_TIM_PWM_Start_IT+0x102>
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b10      	cmp	r3, #16
 800c902:	d104      	bne.n	800c90e <HAL_TIM_PWM_Start_IT+0xfa>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2202      	movs	r2, #2
 800c908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c90c:	e003      	b.n	800c916 <HAL_TIM_PWM_Start_IT+0x102>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2202      	movs	r2, #2
 800c912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	2b0c      	cmp	r3, #12
 800c91a:	d841      	bhi.n	800c9a0 <HAL_TIM_PWM_Start_IT+0x18c>
 800c91c:	a201      	add	r2, pc, #4	; (adr r2, 800c924 <HAL_TIM_PWM_Start_IT+0x110>)
 800c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c922:	bf00      	nop
 800c924:	0800c959 	.word	0x0800c959
 800c928:	0800c9a1 	.word	0x0800c9a1
 800c92c:	0800c9a1 	.word	0x0800c9a1
 800c930:	0800c9a1 	.word	0x0800c9a1
 800c934:	0800c96b 	.word	0x0800c96b
 800c938:	0800c9a1 	.word	0x0800c9a1
 800c93c:	0800c9a1 	.word	0x0800c9a1
 800c940:	0800c9a1 	.word	0x0800c9a1
 800c944:	0800c97d 	.word	0x0800c97d
 800c948:	0800c9a1 	.word	0x0800c9a1
 800c94c:	0800c9a1 	.word	0x0800c9a1
 800c950:	0800c9a1 	.word	0x0800c9a1
 800c954:	0800c98f 	.word	0x0800c98f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68da      	ldr	r2, [r3, #12]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f042 0202 	orr.w	r2, r2, #2
 800c966:	60da      	str	r2, [r3, #12]
      break;
 800c968:	e01d      	b.n	800c9a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f042 0204 	orr.w	r2, r2, #4
 800c978:	60da      	str	r2, [r3, #12]
      break;
 800c97a:	e014      	b.n	800c9a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68da      	ldr	r2, [r3, #12]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f042 0208 	orr.w	r2, r2, #8
 800c98a:	60da      	str	r2, [r3, #12]
      break;
 800c98c:	e00b      	b.n	800c9a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68da      	ldr	r2, [r3, #12]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f042 0210 	orr.w	r2, r2, #16
 800c99c:	60da      	str	r2, [r3, #12]
      break;
 800c99e:	e002      	b.n	800c9a6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d17e      	bne.n	800caaa <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f001 f937 	bl	800dc28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a3d      	ldr	r2, [pc, #244]	; (800cab4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d013      	beq.n	800c9ec <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a3b      	ldr	r2, [pc, #236]	; (800cab8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d00e      	beq.n	800c9ec <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a3a      	ldr	r2, [pc, #232]	; (800cabc <HAL_TIM_PWM_Start_IT+0x2a8>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d009      	beq.n	800c9ec <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a38      	ldr	r2, [pc, #224]	; (800cac0 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d004      	beq.n	800c9ec <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a37      	ldr	r2, [pc, #220]	; (800cac4 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d101      	bne.n	800c9f0 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e000      	b.n	800c9f2 <HAL_TIM_PWM_Start_IT+0x1de>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a2a      	ldr	r2, [pc, #168]	; (800cab4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d02c      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca18:	d027      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a2a      	ldr	r2, [pc, #168]	; (800cac8 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d022      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a28      	ldr	r2, [pc, #160]	; (800cacc <HAL_TIM_PWM_Start_IT+0x2b8>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d01d      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a27      	ldr	r2, [pc, #156]	; (800cad0 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d018      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a1e      	ldr	r2, [pc, #120]	; (800cab8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d013      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a23      	ldr	r2, [pc, #140]	; (800cad4 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d00e      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a1a      	ldr	r2, [pc, #104]	; (800cabc <HAL_TIM_PWM_Start_IT+0x2a8>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d009      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a1f      	ldr	r2, [pc, #124]	; (800cad8 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d004      	beq.n	800ca6a <HAL_TIM_PWM_Start_IT+0x256>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a1d      	ldr	r2, [pc, #116]	; (800cadc <HAL_TIM_PWM_Start_IT+0x2c8>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d115      	bne.n	800ca96 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	4b1b      	ldr	r3, [pc, #108]	; (800cae0 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800ca72:	4013      	ands	r3, r2
 800ca74:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	2b06      	cmp	r3, #6
 800ca7a:	d015      	beq.n	800caa8 <HAL_TIM_PWM_Start_IT+0x294>
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca82:	d011      	beq.n	800caa8 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f042 0201 	orr.w	r2, r2, #1
 800ca92:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca94:	e008      	b.n	800caa8 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f042 0201 	orr.w	r2, r2, #1
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	e000      	b.n	800caaa <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caa8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	40010000 	.word	0x40010000
 800cab8:	40010400 	.word	0x40010400
 800cabc:	40014000 	.word	0x40014000
 800cac0:	40014400 	.word	0x40014400
 800cac4:	40014800 	.word	0x40014800
 800cac8:	40000400 	.word	0x40000400
 800cacc:	40000800 	.word	0x40000800
 800cad0:	40000c00 	.word	0x40000c00
 800cad4:	40001800 	.word	0x40001800
 800cad8:	4000e000 	.word	0x4000e000
 800cadc:	4000e400 	.word	0x4000e400
 800cae0:	00010007 	.word	0x00010007

0800cae4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e08f      	b.n	800cc18 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d106      	bne.n	800cb12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7f9 f88d 	bl	8005c2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2202      	movs	r2, #2
 800cb16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6899      	ldr	r1, [r3, #8]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	4b3e      	ldr	r3, [pc, #248]	; (800cc20 <HAL_TIM_Encoder_Init+0x13c>)
 800cb26:	400b      	ands	r3, r1
 800cb28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3304      	adds	r3, #4
 800cb32:	4619      	mov	r1, r3
 800cb34:	4610      	mov	r0, r2
 800cb36:	f000 fc5d 	bl	800d3f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	4b31      	ldr	r3, [pc, #196]	; (800cc24 <HAL_TIM_Encoder_Init+0x140>)
 800cb60:	4013      	ands	r3, r2
 800cb62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	689a      	ldr	r2, [r3, #8]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	021b      	lsls	r3, r3, #8
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cb76:	693a      	ldr	r2, [r7, #16]
 800cb78:	4b2b      	ldr	r3, [pc, #172]	; (800cc28 <HAL_TIM_Encoder_Init+0x144>)
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	4b2a      	ldr	r3, [pc, #168]	; (800cc2c <HAL_TIM_Encoder_Init+0x148>)
 800cb82:	4013      	ands	r3, r2
 800cb84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	69db      	ldr	r3, [r3, #28]
 800cb8e:	021b      	lsls	r3, r3, #8
 800cb90:	4313      	orrs	r3, r2
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	4313      	orrs	r3, r2
 800cb96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	011a      	lsls	r2, r3, #4
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	031b      	lsls	r3, r3, #12
 800cba4:	4313      	orrs	r3, r2
 800cba6:	693a      	ldr	r2, [r7, #16]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cbb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cbba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	695b      	ldr	r3, [r3, #20]
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2201      	movs	r2, #1
 800cc12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	fffebff8 	.word	0xfffebff8
 800cc24:	fffffcfc 	.word	0xfffffcfc
 800cc28:	fffff3f3 	.word	0xfffff3f3
 800cc2c:	ffff0f0f 	.word	0xffff0f0f

0800cc30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d110      	bne.n	800cc82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d102      	bne.n	800cc6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc66:	7b7b      	ldrb	r3, [r7, #13]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d001      	beq.n	800cc70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e069      	b.n	800cd44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2202      	movs	r2, #2
 800cc74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2202      	movs	r2, #2
 800cc7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc80:	e031      	b.n	800cce6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b04      	cmp	r3, #4
 800cc86:	d110      	bne.n	800ccaa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc88:	7bbb      	ldrb	r3, [r7, #14]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d102      	bne.n	800cc94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc8e:	7b3b      	ldrb	r3, [r7, #12]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d001      	beq.n	800cc98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e055      	b.n	800cd44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2202      	movs	r2, #2
 800cca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cca8:	e01d      	b.n	800cce6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d108      	bne.n	800ccc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d105      	bne.n	800ccc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ccb6:	7b7b      	ldrb	r3, [r7, #13]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d102      	bne.n	800ccc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ccbc:	7b3b      	ldrb	r3, [r7, #12]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d001      	beq.n	800ccc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e03e      	b.n	800cd44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2202      	movs	r2, #2
 800ccca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2202      	movs	r2, #2
 800ccda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2202      	movs	r2, #2
 800cce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d003      	beq.n	800ccf4 <HAL_TIM_Encoder_Start+0xc4>
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2b04      	cmp	r3, #4
 800ccf0:	d008      	beq.n	800cd04 <HAL_TIM_Encoder_Start+0xd4>
 800ccf2:	e00f      	b.n	800cd14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 ff93 	bl	800dc28 <TIM_CCxChannelCmd>
      break;
 800cd02:	e016      	b.n	800cd32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	2104      	movs	r1, #4
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f000 ff8b 	bl	800dc28 <TIM_CCxChannelCmd>
      break;
 800cd12:	e00e      	b.n	800cd32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 ff83 	bl	800dc28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2201      	movs	r2, #1
 800cd28:	2104      	movs	r1, #4
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 ff7c 	bl	800dc28 <TIM_CCxChannelCmd>
      break;
 800cd30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f042 0201 	orr.w	r2, r2, #1
 800cd40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	691b      	ldr	r3, [r3, #16]
 800cd5a:	f003 0302 	and.w	r3, r3, #2
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d122      	bne.n	800cda8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	f003 0302 	and.w	r3, r3, #2
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d11b      	bne.n	800cda8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f06f 0202 	mvn.w	r2, #2
 800cd78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	699b      	ldr	r3, [r3, #24]
 800cd86:	f003 0303 	and.w	r3, r3, #3
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 fb12 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800cd94:	e005      	b.n	800cda2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fb04 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fb15 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	f003 0304 	and.w	r3, r3, #4
 800cdb2:	2b04      	cmp	r3, #4
 800cdb4:	d122      	bne.n	800cdfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f003 0304 	and.w	r3, r3, #4
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	d11b      	bne.n	800cdfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f06f 0204 	mvn.w	r2, #4
 800cdcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d003      	beq.n	800cdea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fae8 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800cde8:	e005      	b.n	800cdf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fada 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 faeb 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	f003 0308 	and.w	r3, r3, #8
 800ce06:	2b08      	cmp	r3, #8
 800ce08:	d122      	bne.n	800ce50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	f003 0308 	and.w	r3, r3, #8
 800ce14:	2b08      	cmp	r3, #8
 800ce16:	d11b      	bne.n	800ce50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f06f 0208 	mvn.w	r2, #8
 800ce20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2204      	movs	r2, #4
 800ce26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 fabe 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800ce3c:	e005      	b.n	800ce4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 fab0 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fac1 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	f003 0310 	and.w	r3, r3, #16
 800ce5a:	2b10      	cmp	r3, #16
 800ce5c:	d122      	bne.n	800cea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b10      	cmp	r3, #16
 800ce6a:	d11b      	bne.n	800cea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f06f 0210 	mvn.w	r2, #16
 800ce74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2208      	movs	r2, #8
 800ce7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d003      	beq.n	800ce92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 fa94 	bl	800d3b8 <HAL_TIM_IC_CaptureCallback>
 800ce90:	e005      	b.n	800ce9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fa86 	bl	800d3a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fa97 	bl	800d3cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	f003 0301 	and.w	r3, r3, #1
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d10e      	bne.n	800ced0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	f003 0301 	and.w	r3, r3, #1
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d107      	bne.n	800ced0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f06f 0201 	mvn.w	r2, #1
 800cec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7f9 fb86 	bl	80065dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceda:	2b80      	cmp	r3, #128	; 0x80
 800cedc:	d10e      	bne.n	800cefc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cee8:	2b80      	cmp	r3, #128	; 0x80
 800ceea:	d107      	bne.n	800cefc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f001 f802 	bl	800df00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf0a:	d10e      	bne.n	800cf2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf16:	2b80      	cmp	r3, #128	; 0x80
 800cf18:	d107      	bne.n	800cf2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cf22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fff5 	bl	800df14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf34:	2b40      	cmp	r3, #64	; 0x40
 800cf36:	d10e      	bne.n	800cf56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf42:	2b40      	cmp	r3, #64	; 0x40
 800cf44:	d107      	bne.n	800cf56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cf4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fa45 	bl	800d3e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	f003 0320 	and.w	r3, r3, #32
 800cf60:	2b20      	cmp	r3, #32
 800cf62:	d10e      	bne.n	800cf82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	f003 0320 	and.w	r3, r3, #32
 800cf6e:	2b20      	cmp	r3, #32
 800cf70:	d107      	bne.n	800cf82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f06f 0220 	mvn.w	r2, #32
 800cf7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 ffb5 	bl	800deec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf82:	bf00      	nop
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
	...

0800cf8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d101      	bne.n	800cfaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cfa6:	2302      	movs	r3, #2
 800cfa8:	e0ff      	b.n	800d1aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2201      	movs	r2, #1
 800cfae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b14      	cmp	r3, #20
 800cfb6:	f200 80f0 	bhi.w	800d19a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cfba:	a201      	add	r2, pc, #4	; (adr r2, 800cfc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800d015 	.word	0x0800d015
 800cfc4:	0800d19b 	.word	0x0800d19b
 800cfc8:	0800d19b 	.word	0x0800d19b
 800cfcc:	0800d19b 	.word	0x0800d19b
 800cfd0:	0800d055 	.word	0x0800d055
 800cfd4:	0800d19b 	.word	0x0800d19b
 800cfd8:	0800d19b 	.word	0x0800d19b
 800cfdc:	0800d19b 	.word	0x0800d19b
 800cfe0:	0800d097 	.word	0x0800d097
 800cfe4:	0800d19b 	.word	0x0800d19b
 800cfe8:	0800d19b 	.word	0x0800d19b
 800cfec:	0800d19b 	.word	0x0800d19b
 800cff0:	0800d0d7 	.word	0x0800d0d7
 800cff4:	0800d19b 	.word	0x0800d19b
 800cff8:	0800d19b 	.word	0x0800d19b
 800cffc:	0800d19b 	.word	0x0800d19b
 800d000:	0800d119 	.word	0x0800d119
 800d004:	0800d19b 	.word	0x0800d19b
 800d008:	0800d19b 	.word	0x0800d19b
 800d00c:	0800d19b 	.word	0x0800d19b
 800d010:	0800d159 	.word	0x0800d159
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68b9      	ldr	r1, [r7, #8]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f000 fa90 	bl	800d540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	699a      	ldr	r2, [r3, #24]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f042 0208 	orr.w	r2, r2, #8
 800d02e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	699a      	ldr	r2, [r3, #24]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f022 0204 	bic.w	r2, r2, #4
 800d03e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6999      	ldr	r1, [r3, #24]
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	691a      	ldr	r2, [r3, #16]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	430a      	orrs	r2, r1
 800d050:	619a      	str	r2, [r3, #24]
      break;
 800d052:	e0a5      	b.n	800d1a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68b9      	ldr	r1, [r7, #8]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 fb00 	bl	800d660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	699a      	ldr	r2, [r3, #24]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d06e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	699a      	ldr	r2, [r3, #24]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d07e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6999      	ldr	r1, [r3, #24]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	021a      	lsls	r2, r3, #8
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	430a      	orrs	r2, r1
 800d092:	619a      	str	r2, [r3, #24]
      break;
 800d094:	e084      	b.n	800d1a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68b9      	ldr	r1, [r7, #8]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f000 fb69 	bl	800d774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	69da      	ldr	r2, [r3, #28]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f042 0208 	orr.w	r2, r2, #8
 800d0b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	69da      	ldr	r2, [r3, #28]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f022 0204 	bic.w	r2, r2, #4
 800d0c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	69d9      	ldr	r1, [r3, #28]
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	691a      	ldr	r2, [r3, #16]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	61da      	str	r2, [r3, #28]
      break;
 800d0d4:	e064      	b.n	800d1a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 fbd1 	bl	800d884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	69da      	ldr	r2, [r3, #28]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	69da      	ldr	r2, [r3, #28]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	69d9      	ldr	r1, [r3, #28]
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	021a      	lsls	r2, r3, #8
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	430a      	orrs	r2, r1
 800d114:	61da      	str	r2, [r3, #28]
      break;
 800d116:	e043      	b.n	800d1a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	68b9      	ldr	r1, [r7, #8]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 fc1a 	bl	800d958 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f042 0208 	orr.w	r2, r2, #8
 800d132:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f022 0204 	bic.w	r2, r2, #4
 800d142:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	691a      	ldr	r2, [r3, #16]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	430a      	orrs	r2, r1
 800d154:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d156:	e023      	b.n	800d1a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68b9      	ldr	r1, [r7, #8]
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 fc5e 	bl	800da20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d172:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d182:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	021a      	lsls	r2, r3, #8
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	430a      	orrs	r2, r1
 800d196:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d198:	e002      	b.n	800d1a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	75fb      	strb	r3, [r7, #23]
      break;
 800d19e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop

0800d1b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d101      	bne.n	800d1d0 <HAL_TIM_ConfigClockSource+0x1c>
 800d1cc:	2302      	movs	r3, #2
 800d1ce:	e0dc      	b.n	800d38a <HAL_TIM_ConfigClockSource+0x1d6>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	4b6a      	ldr	r3, [pc, #424]	; (800d394 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d1ec:	4013      	ands	r3, r2
 800d1ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68ba      	ldr	r2, [r7, #8]
 800d1fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a64      	ldr	r2, [pc, #400]	; (800d398 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d206:	4293      	cmp	r3, r2
 800d208:	f000 80a9 	beq.w	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d20c:	4a62      	ldr	r2, [pc, #392]	; (800d398 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	f200 80ae 	bhi.w	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d214:	4a61      	ldr	r2, [pc, #388]	; (800d39c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d216:	4293      	cmp	r3, r2
 800d218:	f000 80a1 	beq.w	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d21c:	4a5f      	ldr	r2, [pc, #380]	; (800d39c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	f200 80a6 	bhi.w	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d224:	4a5e      	ldr	r2, [pc, #376]	; (800d3a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d226:	4293      	cmp	r3, r2
 800d228:	f000 8099 	beq.w	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d22c:	4a5c      	ldr	r2, [pc, #368]	; (800d3a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	f200 809e 	bhi.w	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d234:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d238:	f000 8091 	beq.w	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d23c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d240:	f200 8096 	bhi.w	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d248:	f000 8089 	beq.w	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d24c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d250:	f200 808e 	bhi.w	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d258:	d03e      	beq.n	800d2d8 <HAL_TIM_ConfigClockSource+0x124>
 800d25a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d25e:	f200 8087 	bhi.w	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d266:	f000 8086 	beq.w	800d376 <HAL_TIM_ConfigClockSource+0x1c2>
 800d26a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d26e:	d87f      	bhi.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d270:	2b70      	cmp	r3, #112	; 0x70
 800d272:	d01a      	beq.n	800d2aa <HAL_TIM_ConfigClockSource+0xf6>
 800d274:	2b70      	cmp	r3, #112	; 0x70
 800d276:	d87b      	bhi.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d278:	2b60      	cmp	r3, #96	; 0x60
 800d27a:	d050      	beq.n	800d31e <HAL_TIM_ConfigClockSource+0x16a>
 800d27c:	2b60      	cmp	r3, #96	; 0x60
 800d27e:	d877      	bhi.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d280:	2b50      	cmp	r3, #80	; 0x50
 800d282:	d03c      	beq.n	800d2fe <HAL_TIM_ConfigClockSource+0x14a>
 800d284:	2b50      	cmp	r3, #80	; 0x50
 800d286:	d873      	bhi.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d288:	2b40      	cmp	r3, #64	; 0x40
 800d28a:	d058      	beq.n	800d33e <HAL_TIM_ConfigClockSource+0x18a>
 800d28c:	2b40      	cmp	r3, #64	; 0x40
 800d28e:	d86f      	bhi.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d290:	2b30      	cmp	r3, #48	; 0x30
 800d292:	d064      	beq.n	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d294:	2b30      	cmp	r3, #48	; 0x30
 800d296:	d86b      	bhi.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d298:	2b20      	cmp	r3, #32
 800d29a:	d060      	beq.n	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d29c:	2b20      	cmp	r3, #32
 800d29e:	d867      	bhi.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d05c      	beq.n	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d2a4:	2b10      	cmp	r3, #16
 800d2a6:	d05a      	beq.n	800d35e <HAL_TIM_ConfigClockSource+0x1aa>
 800d2a8:	e062      	b.n	800d370 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6818      	ldr	r0, [r3, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	6899      	ldr	r1, [r3, #8]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	f000 fc95 	bl	800dbe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	609a      	str	r2, [r3, #8]
      break;
 800d2d6:	e04f      	b.n	800d378 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	6899      	ldr	r1, [r3, #8]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	f000 fc7e 	bl	800dbe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	689a      	ldr	r2, [r3, #8]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2fa:	609a      	str	r2, [r3, #8]
      break;
 800d2fc:	e03c      	b.n	800d378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6818      	ldr	r0, [r3, #0]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	6859      	ldr	r1, [r3, #4]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	461a      	mov	r2, r3
 800d30c:	f000 fbee 	bl	800daec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2150      	movs	r1, #80	; 0x50
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fc48 	bl	800dbac <TIM_ITRx_SetConfig>
      break;
 800d31c:	e02c      	b.n	800d378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	6859      	ldr	r1, [r3, #4]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	461a      	mov	r2, r3
 800d32c:	f000 fc0d 	bl	800db4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2160      	movs	r1, #96	; 0x60
 800d336:	4618      	mov	r0, r3
 800d338:	f000 fc38 	bl	800dbac <TIM_ITRx_SetConfig>
      break;
 800d33c:	e01c      	b.n	800d378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6818      	ldr	r0, [r3, #0]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	6859      	ldr	r1, [r3, #4]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	461a      	mov	r2, r3
 800d34c:	f000 fbce 	bl	800daec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2140      	movs	r1, #64	; 0x40
 800d356:	4618      	mov	r0, r3
 800d358:	f000 fc28 	bl	800dbac <TIM_ITRx_SetConfig>
      break;
 800d35c:	e00c      	b.n	800d378 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4619      	mov	r1, r3
 800d368:	4610      	mov	r0, r2
 800d36a:	f000 fc1f 	bl	800dbac <TIM_ITRx_SetConfig>
      break;
 800d36e:	e003      	b.n	800d378 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	73fb      	strb	r3, [r7, #15]
      break;
 800d374:	e000      	b.n	800d378 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d388:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	ffceff88 	.word	0xffceff88
 800d398:	00100040 	.word	0x00100040
 800d39c:	00100030 	.word	0x00100030
 800d3a0:	00100020 	.word	0x00100020

0800d3a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3e8:	bf00      	nop
 800d3ea:	370c      	adds	r7, #12
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f2:	4770      	bx	lr

0800d3f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a44      	ldr	r2, [pc, #272]	; (800d518 <TIM_Base_SetConfig+0x124>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d013      	beq.n	800d434 <TIM_Base_SetConfig+0x40>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d412:	d00f      	beq.n	800d434 <TIM_Base_SetConfig+0x40>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a41      	ldr	r2, [pc, #260]	; (800d51c <TIM_Base_SetConfig+0x128>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d00b      	beq.n	800d434 <TIM_Base_SetConfig+0x40>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a40      	ldr	r2, [pc, #256]	; (800d520 <TIM_Base_SetConfig+0x12c>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d007      	beq.n	800d434 <TIM_Base_SetConfig+0x40>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a3f      	ldr	r2, [pc, #252]	; (800d524 <TIM_Base_SetConfig+0x130>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d003      	beq.n	800d434 <TIM_Base_SetConfig+0x40>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a3e      	ldr	r2, [pc, #248]	; (800d528 <TIM_Base_SetConfig+0x134>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d108      	bne.n	800d446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d43a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	4313      	orrs	r3, r2
 800d444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a33      	ldr	r2, [pc, #204]	; (800d518 <TIM_Base_SetConfig+0x124>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d027      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d454:	d023      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a30      	ldr	r2, [pc, #192]	; (800d51c <TIM_Base_SetConfig+0x128>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d01f      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a2f      	ldr	r2, [pc, #188]	; (800d520 <TIM_Base_SetConfig+0x12c>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d01b      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a2e      	ldr	r2, [pc, #184]	; (800d524 <TIM_Base_SetConfig+0x130>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d017      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a2d      	ldr	r2, [pc, #180]	; (800d528 <TIM_Base_SetConfig+0x134>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d013      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a2c      	ldr	r2, [pc, #176]	; (800d52c <TIM_Base_SetConfig+0x138>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d00f      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a2b      	ldr	r2, [pc, #172]	; (800d530 <TIM_Base_SetConfig+0x13c>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d00b      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a2a      	ldr	r2, [pc, #168]	; (800d534 <TIM_Base_SetConfig+0x140>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d007      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a29      	ldr	r2, [pc, #164]	; (800d538 <TIM_Base_SetConfig+0x144>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d003      	beq.n	800d49e <TIM_Base_SetConfig+0xaa>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a28      	ldr	r2, [pc, #160]	; (800d53c <TIM_Base_SetConfig+0x148>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d108      	bne.n	800d4b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	689a      	ldr	r2, [r3, #8]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a10      	ldr	r2, [pc, #64]	; (800d518 <TIM_Base_SetConfig+0x124>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d00f      	beq.n	800d4fc <TIM_Base_SetConfig+0x108>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a12      	ldr	r2, [pc, #72]	; (800d528 <TIM_Base_SetConfig+0x134>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d00b      	beq.n	800d4fc <TIM_Base_SetConfig+0x108>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a11      	ldr	r2, [pc, #68]	; (800d52c <TIM_Base_SetConfig+0x138>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d007      	beq.n	800d4fc <TIM_Base_SetConfig+0x108>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a10      	ldr	r2, [pc, #64]	; (800d530 <TIM_Base_SetConfig+0x13c>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d003      	beq.n	800d4fc <TIM_Base_SetConfig+0x108>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a0f      	ldr	r2, [pc, #60]	; (800d534 <TIM_Base_SetConfig+0x140>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d103      	bne.n	800d504 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	691a      	ldr	r2, [r3, #16]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	615a      	str	r2, [r3, #20]
}
 800d50a:	bf00      	nop
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	40010000 	.word	0x40010000
 800d51c:	40000400 	.word	0x40000400
 800d520:	40000800 	.word	0x40000800
 800d524:	40000c00 	.word	0x40000c00
 800d528:	40010400 	.word	0x40010400
 800d52c:	40014000 	.word	0x40014000
 800d530:	40014400 	.word	0x40014400
 800d534:	40014800 	.word	0x40014800
 800d538:	4000e000 	.word	0x4000e000
 800d53c:	4000e400 	.word	0x4000e400

0800d540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	f023 0201 	bic.w	r2, r3, #1
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	4b37      	ldr	r3, [pc, #220]	; (800d648 <TIM_OC1_SetConfig+0x108>)
 800d56c:	4013      	ands	r3, r2
 800d56e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f023 0303 	bic.w	r3, r3, #3
 800d576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	4313      	orrs	r3, r2
 800d580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f023 0302 	bic.w	r3, r3, #2
 800d588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	4313      	orrs	r3, r2
 800d592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a2d      	ldr	r2, [pc, #180]	; (800d64c <TIM_OC1_SetConfig+0x10c>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d00f      	beq.n	800d5bc <TIM_OC1_SetConfig+0x7c>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a2c      	ldr	r2, [pc, #176]	; (800d650 <TIM_OC1_SetConfig+0x110>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d00b      	beq.n	800d5bc <TIM_OC1_SetConfig+0x7c>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a2b      	ldr	r2, [pc, #172]	; (800d654 <TIM_OC1_SetConfig+0x114>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d007      	beq.n	800d5bc <TIM_OC1_SetConfig+0x7c>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a2a      	ldr	r2, [pc, #168]	; (800d658 <TIM_OC1_SetConfig+0x118>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d003      	beq.n	800d5bc <TIM_OC1_SetConfig+0x7c>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a29      	ldr	r2, [pc, #164]	; (800d65c <TIM_OC1_SetConfig+0x11c>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d10c      	bne.n	800d5d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	f023 0308 	bic.w	r3, r3, #8
 800d5c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f023 0304 	bic.w	r3, r3, #4
 800d5d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a1c      	ldr	r2, [pc, #112]	; (800d64c <TIM_OC1_SetConfig+0x10c>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d00f      	beq.n	800d5fe <TIM_OC1_SetConfig+0xbe>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a1b      	ldr	r2, [pc, #108]	; (800d650 <TIM_OC1_SetConfig+0x110>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d00b      	beq.n	800d5fe <TIM_OC1_SetConfig+0xbe>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a1a      	ldr	r2, [pc, #104]	; (800d654 <TIM_OC1_SetConfig+0x114>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d007      	beq.n	800d5fe <TIM_OC1_SetConfig+0xbe>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a19      	ldr	r2, [pc, #100]	; (800d658 <TIM_OC1_SetConfig+0x118>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d003      	beq.n	800d5fe <TIM_OC1_SetConfig+0xbe>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a18      	ldr	r2, [pc, #96]	; (800d65c <TIM_OC1_SetConfig+0x11c>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d111      	bne.n	800d622 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d60c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	693a      	ldr	r2, [r7, #16]
 800d614:	4313      	orrs	r3, r2
 800d616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	4313      	orrs	r3, r2
 800d620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	697a      	ldr	r2, [r7, #20]
 800d63a:	621a      	str	r2, [r3, #32]
}
 800d63c:	bf00      	nop
 800d63e:	371c      	adds	r7, #28
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr
 800d648:	fffeff8f 	.word	0xfffeff8f
 800d64c:	40010000 	.word	0x40010000
 800d650:	40010400 	.word	0x40010400
 800d654:	40014000 	.word	0x40014000
 800d658:	40014400 	.word	0x40014400
 800d65c:	40014800 	.word	0x40014800

0800d660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d660:	b480      	push	{r7}
 800d662:	b087      	sub	sp, #28
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	f023 0210 	bic.w	r2, r3, #16
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	4b34      	ldr	r3, [pc, #208]	; (800d75c <TIM_OC2_SetConfig+0xfc>)
 800d68c:	4013      	ands	r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	021b      	lsls	r3, r3, #8
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	f023 0320 	bic.w	r3, r3, #32
 800d6aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	011b      	lsls	r3, r3, #4
 800d6b2:	697a      	ldr	r2, [r7, #20]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a29      	ldr	r2, [pc, #164]	; (800d760 <TIM_OC2_SetConfig+0x100>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d003      	beq.n	800d6c8 <TIM_OC2_SetConfig+0x68>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a28      	ldr	r2, [pc, #160]	; (800d764 <TIM_OC2_SetConfig+0x104>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d10d      	bne.n	800d6e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	011b      	lsls	r3, r3, #4
 800d6d6:	697a      	ldr	r2, [r7, #20]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a1e      	ldr	r2, [pc, #120]	; (800d760 <TIM_OC2_SetConfig+0x100>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d00f      	beq.n	800d70c <TIM_OC2_SetConfig+0xac>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a1d      	ldr	r2, [pc, #116]	; (800d764 <TIM_OC2_SetConfig+0x104>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d00b      	beq.n	800d70c <TIM_OC2_SetConfig+0xac>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a1c      	ldr	r2, [pc, #112]	; (800d768 <TIM_OC2_SetConfig+0x108>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d007      	beq.n	800d70c <TIM_OC2_SetConfig+0xac>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a1b      	ldr	r2, [pc, #108]	; (800d76c <TIM_OC2_SetConfig+0x10c>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d003      	beq.n	800d70c <TIM_OC2_SetConfig+0xac>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a1a      	ldr	r2, [pc, #104]	; (800d770 <TIM_OC2_SetConfig+0x110>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d113      	bne.n	800d734 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d71a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	695b      	ldr	r3, [r3, #20]
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	4313      	orrs	r3, r2
 800d726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	699b      	ldr	r3, [r3, #24]
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	693a      	ldr	r2, [r7, #16]
 800d730:	4313      	orrs	r3, r2
 800d732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	685a      	ldr	r2, [r3, #4]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	621a      	str	r2, [r3, #32]
}
 800d74e:	bf00      	nop
 800d750:	371c      	adds	r7, #28
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	feff8fff 	.word	0xfeff8fff
 800d760:	40010000 	.word	0x40010000
 800d764:	40010400 	.word	0x40010400
 800d768:	40014000 	.word	0x40014000
 800d76c:	40014400 	.word	0x40014400
 800d770:	40014800 	.word	0x40014800

0800d774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d774:	b480      	push	{r7}
 800d776:	b087      	sub	sp, #28
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	4b33      	ldr	r3, [pc, #204]	; (800d86c <TIM_OC3_SetConfig+0xf8>)
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 0303 	bic.w	r3, r3, #3
 800d7aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	021b      	lsls	r3, r3, #8
 800d7c4:	697a      	ldr	r2, [r7, #20]
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	4a28      	ldr	r2, [pc, #160]	; (800d870 <TIM_OC3_SetConfig+0xfc>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d003      	beq.n	800d7da <TIM_OC3_SetConfig+0x66>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	4a27      	ldr	r2, [pc, #156]	; (800d874 <TIM_OC3_SetConfig+0x100>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d10d      	bne.n	800d7f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	021b      	lsls	r3, r3, #8
 800d7e8:	697a      	ldr	r2, [r7, #20]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a1d      	ldr	r2, [pc, #116]	; (800d870 <TIM_OC3_SetConfig+0xfc>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d00f      	beq.n	800d81e <TIM_OC3_SetConfig+0xaa>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a1c      	ldr	r2, [pc, #112]	; (800d874 <TIM_OC3_SetConfig+0x100>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d00b      	beq.n	800d81e <TIM_OC3_SetConfig+0xaa>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a1b      	ldr	r2, [pc, #108]	; (800d878 <TIM_OC3_SetConfig+0x104>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d007      	beq.n	800d81e <TIM_OC3_SetConfig+0xaa>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a1a      	ldr	r2, [pc, #104]	; (800d87c <TIM_OC3_SetConfig+0x108>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d003      	beq.n	800d81e <TIM_OC3_SetConfig+0xaa>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a19      	ldr	r2, [pc, #100]	; (800d880 <TIM_OC3_SetConfig+0x10c>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d113      	bne.n	800d846 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d82c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	011b      	lsls	r3, r3, #4
 800d834:	693a      	ldr	r2, [r7, #16]
 800d836:	4313      	orrs	r3, r2
 800d838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	011b      	lsls	r3, r3, #4
 800d840:	693a      	ldr	r2, [r7, #16]
 800d842:	4313      	orrs	r3, r2
 800d844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	693a      	ldr	r2, [r7, #16]
 800d84a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	697a      	ldr	r2, [r7, #20]
 800d85e:	621a      	str	r2, [r3, #32]
}
 800d860:	bf00      	nop
 800d862:	371c      	adds	r7, #28
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	fffeff8f 	.word	0xfffeff8f
 800d870:	40010000 	.word	0x40010000
 800d874:	40010400 	.word	0x40010400
 800d878:	40014000 	.word	0x40014000
 800d87c:	40014400 	.word	0x40014400
 800d880:	40014800 	.word	0x40014800

0800d884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d884:	b480      	push	{r7}
 800d886:	b087      	sub	sp, #28
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	4b24      	ldr	r3, [pc, #144]	; (800d940 <TIM_OC4_SetConfig+0xbc>)
 800d8b0:	4013      	ands	r3, r2
 800d8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	021b      	lsls	r3, r3, #8
 800d8c2:	68fa      	ldr	r2, [r7, #12]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	031b      	lsls	r3, r3, #12
 800d8d6:	693a      	ldr	r2, [r7, #16]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a19      	ldr	r2, [pc, #100]	; (800d944 <TIM_OC4_SetConfig+0xc0>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d00f      	beq.n	800d904 <TIM_OC4_SetConfig+0x80>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a18      	ldr	r2, [pc, #96]	; (800d948 <TIM_OC4_SetConfig+0xc4>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d00b      	beq.n	800d904 <TIM_OC4_SetConfig+0x80>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a17      	ldr	r2, [pc, #92]	; (800d94c <TIM_OC4_SetConfig+0xc8>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d007      	beq.n	800d904 <TIM_OC4_SetConfig+0x80>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4a16      	ldr	r2, [pc, #88]	; (800d950 <TIM_OC4_SetConfig+0xcc>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d003      	beq.n	800d904 <TIM_OC4_SetConfig+0x80>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4a15      	ldr	r2, [pc, #84]	; (800d954 <TIM_OC4_SetConfig+0xd0>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d109      	bne.n	800d918 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d90a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	695b      	ldr	r3, [r3, #20]
 800d910:	019b      	lsls	r3, r3, #6
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	4313      	orrs	r3, r2
 800d916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	685a      	ldr	r2, [r3, #4]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	693a      	ldr	r2, [r7, #16]
 800d930:	621a      	str	r2, [r3, #32]
}
 800d932:	bf00      	nop
 800d934:	371c      	adds	r7, #28
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	feff8fff 	.word	0xfeff8fff
 800d944:	40010000 	.word	0x40010000
 800d948:	40010400 	.word	0x40010400
 800d94c:	40014000 	.word	0x40014000
 800d950:	40014400 	.word	0x40014400
 800d954:	40014800 	.word	0x40014800

0800d958 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d958:	b480      	push	{r7}
 800d95a:	b087      	sub	sp, #28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4b21      	ldr	r3, [pc, #132]	; (800da08 <TIM_OC5_SetConfig+0xb0>)
 800d984:	4013      	ands	r3, r2
 800d986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	4313      	orrs	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	041b      	lsls	r3, r3, #16
 800d9a0:	693a      	ldr	r2, [r7, #16]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a18      	ldr	r2, [pc, #96]	; (800da0c <TIM_OC5_SetConfig+0xb4>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d00f      	beq.n	800d9ce <TIM_OC5_SetConfig+0x76>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a17      	ldr	r2, [pc, #92]	; (800da10 <TIM_OC5_SetConfig+0xb8>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d00b      	beq.n	800d9ce <TIM_OC5_SetConfig+0x76>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4a16      	ldr	r2, [pc, #88]	; (800da14 <TIM_OC5_SetConfig+0xbc>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d007      	beq.n	800d9ce <TIM_OC5_SetConfig+0x76>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a15      	ldr	r2, [pc, #84]	; (800da18 <TIM_OC5_SetConfig+0xc0>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d003      	beq.n	800d9ce <TIM_OC5_SetConfig+0x76>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a14      	ldr	r2, [pc, #80]	; (800da1c <TIM_OC5_SetConfig+0xc4>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d109      	bne.n	800d9e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	021b      	lsls	r3, r3, #8
 800d9dc:	697a      	ldr	r2, [r7, #20]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	697a      	ldr	r2, [r7, #20]
 800d9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	685a      	ldr	r2, [r3, #4]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	693a      	ldr	r2, [r7, #16]
 800d9fa:	621a      	str	r2, [r3, #32]
}
 800d9fc:	bf00      	nop
 800d9fe:	371c      	adds	r7, #28
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr
 800da08:	fffeff8f 	.word	0xfffeff8f
 800da0c:	40010000 	.word	0x40010000
 800da10:	40010400 	.word	0x40010400
 800da14:	40014000 	.word	0x40014000
 800da18:	40014400 	.word	0x40014400
 800da1c:	40014800 	.word	0x40014800

0800da20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800da20:	b480      	push	{r7}
 800da22:	b087      	sub	sp, #28
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6a1b      	ldr	r3, [r3, #32]
 800da2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a1b      	ldr	r3, [r3, #32]
 800da3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	4b22      	ldr	r3, [pc, #136]	; (800dad4 <TIM_OC6_SetConfig+0xb4>)
 800da4c:	4013      	ands	r3, r2
 800da4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	021b      	lsls	r3, r3, #8
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	4313      	orrs	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	051b      	lsls	r3, r3, #20
 800da6a:	693a      	ldr	r2, [r7, #16]
 800da6c:	4313      	orrs	r3, r2
 800da6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a19      	ldr	r2, [pc, #100]	; (800dad8 <TIM_OC6_SetConfig+0xb8>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d00f      	beq.n	800da98 <TIM_OC6_SetConfig+0x78>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a18      	ldr	r2, [pc, #96]	; (800dadc <TIM_OC6_SetConfig+0xbc>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d00b      	beq.n	800da98 <TIM_OC6_SetConfig+0x78>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a17      	ldr	r2, [pc, #92]	; (800dae0 <TIM_OC6_SetConfig+0xc0>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d007      	beq.n	800da98 <TIM_OC6_SetConfig+0x78>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4a16      	ldr	r2, [pc, #88]	; (800dae4 <TIM_OC6_SetConfig+0xc4>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d003      	beq.n	800da98 <TIM_OC6_SetConfig+0x78>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	4a15      	ldr	r2, [pc, #84]	; (800dae8 <TIM_OC6_SetConfig+0xc8>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d109      	bne.n	800daac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800da9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	695b      	ldr	r3, [r3, #20]
 800daa4:	029b      	lsls	r3, r3, #10
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	685a      	ldr	r2, [r3, #4]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	621a      	str	r2, [r3, #32]
}
 800dac6:	bf00      	nop
 800dac8:	371c      	adds	r7, #28
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	feff8fff 	.word	0xfeff8fff
 800dad8:	40010000 	.word	0x40010000
 800dadc:	40010400 	.word	0x40010400
 800dae0:	40014000 	.word	0x40014000
 800dae4:	40014400 	.word	0x40014400
 800dae8:	40014800 	.word	0x40014800

0800daec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800daec:	b480      	push	{r7}
 800daee:	b087      	sub	sp, #28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6a1b      	ldr	r3, [r3, #32]
 800dafc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6a1b      	ldr	r3, [r3, #32]
 800db02:	f023 0201 	bic.w	r2, r3, #1
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	699b      	ldr	r3, [r3, #24]
 800db0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	011b      	lsls	r3, r3, #4
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	4313      	orrs	r3, r2
 800db20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	f023 030a 	bic.w	r3, r3, #10
 800db28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	4313      	orrs	r3, r2
 800db30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	693a      	ldr	r2, [r7, #16]
 800db36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	621a      	str	r2, [r3, #32]
}
 800db3e:	bf00      	nop
 800db40:	371c      	adds	r7, #28
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b087      	sub	sp, #28
 800db4e:	af00      	add	r7, sp, #0
 800db50:	60f8      	str	r0, [r7, #12]
 800db52:	60b9      	str	r1, [r7, #8]
 800db54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	f023 0210 	bic.w	r2, r3, #16
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	031b      	lsls	r3, r3, #12
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	4313      	orrs	r3, r2
 800db90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	697a      	ldr	r2, [r7, #20]
 800db96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	621a      	str	r2, [r3, #32]
}
 800db9e:	bf00      	nop
 800dba0:	371c      	adds	r7, #28
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
	...

0800dbac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	4b09      	ldr	r3, [pc, #36]	; (800dbe4 <TIM_ITRx_SetConfig+0x38>)
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbc4:	683a      	ldr	r2, [r7, #0]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	f043 0307 	orr.w	r3, r3, #7
 800dbce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	609a      	str	r2, [r3, #8]
}
 800dbd6:	bf00      	nop
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	ffcfff8f 	.word	0xffcfff8f

0800dbe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b087      	sub	sp, #28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	607a      	str	r2, [r7, #4]
 800dbf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	021a      	lsls	r2, r3, #8
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	697a      	ldr	r2, [r7, #20]
 800dc1a:	609a      	str	r2, [r3, #8]
}
 800dc1c:	bf00      	nop
 800dc1e:	371c      	adds	r7, #28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f003 031f 	and.w	r3, r3, #31
 800dc3a:	2201      	movs	r2, #1
 800dc3c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6a1a      	ldr	r2, [r3, #32]
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	43db      	mvns	r3, r3
 800dc4a:	401a      	ands	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6a1a      	ldr	r2, [r3, #32]
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	f003 031f 	and.w	r3, r3, #31
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc60:	431a      	orrs	r2, r3
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	621a      	str	r2, [r3, #32]
}
 800dc66:	bf00      	nop
 800dc68:	371c      	adds	r7, #28
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
	...

0800dc74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d101      	bne.n	800dc8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc88:	2302      	movs	r3, #2
 800dc8a:	e077      	b.n	800dd7c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2202      	movs	r2, #2
 800dc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a35      	ldr	r2, [pc, #212]	; (800dd88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d004      	beq.n	800dcc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a34      	ldr	r2, [pc, #208]	; (800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d108      	bne.n	800dcd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dcc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	4313      	orrs	r3, r2
 800dce2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68fa      	ldr	r2, [r7, #12]
 800dcea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a25      	ldr	r2, [pc, #148]	; (800dd88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d02c      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcfe:	d027      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a22      	ldr	r2, [pc, #136]	; (800dd90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d022      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a21      	ldr	r2, [pc, #132]	; (800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d01d      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a1f      	ldr	r2, [pc, #124]	; (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d018      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a1a      	ldr	r2, [pc, #104]	; (800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d013      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a1b      	ldr	r2, [pc, #108]	; (800dd9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d00e      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a1a      	ldr	r2, [pc, #104]	; (800dda0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d009      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a18      	ldr	r2, [pc, #96]	; (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d004      	beq.n	800dd50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a17      	ldr	r2, [pc, #92]	; (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d10c      	bne.n	800dd6a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	4313      	orrs	r3, r2
 800dd60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	40010000 	.word	0x40010000
 800dd8c:	40010400 	.word	0x40010400
 800dd90:	40000400 	.word	0x40000400
 800dd94:	40000800 	.word	0x40000800
 800dd98:	40000c00 	.word	0x40000c00
 800dd9c:	40001800 	.word	0x40001800
 800dda0:	40014000 	.word	0x40014000
 800dda4:	4000e000 	.word	0x4000e000
 800dda8:	4000e400 	.word	0x4000e400

0800ddac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b085      	sub	sp, #20
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d101      	bne.n	800ddc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e087      	b.n	800ded8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4313      	orrs	r3, r2
 800de06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	4313      	orrs	r3, r2
 800de14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	695b      	ldr	r3, [r3, #20]
 800de20:	4313      	orrs	r3, r2
 800de22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2e:	4313      	orrs	r3, r2
 800de30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	041b      	lsls	r3, r3, #16
 800de3e:	4313      	orrs	r3, r2
 800de40:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a27      	ldr	r2, [pc, #156]	; (800dee4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d004      	beq.n	800de56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a25      	ldr	r2, [pc, #148]	; (800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d106      	bne.n	800de64 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	69db      	ldr	r3, [r3, #28]
 800de60:	4313      	orrs	r3, r2
 800de62:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a1e      	ldr	r2, [pc, #120]	; (800dee4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d004      	beq.n	800de78 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a1d      	ldr	r2, [pc, #116]	; (800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d126      	bne.n	800dec6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de82:	051b      	lsls	r3, r3, #20
 800de84:	4313      	orrs	r3, r2
 800de86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	6a1b      	ldr	r3, [r3, #32]
 800de92:	4313      	orrs	r3, r2
 800de94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a0e      	ldr	r2, [pc, #56]	; (800dee4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d004      	beq.n	800deb8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a0d      	ldr	r2, [pc, #52]	; (800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d106      	bne.n	800dec6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec2:	4313      	orrs	r3, r2
 800dec4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr
 800dee4:	40010000 	.word	0x40010000
 800dee8:	40010400 	.word	0x40010400

0800deec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	e042      	b.n	800dfc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df40:	2b00      	cmp	r3, #0
 800df42:	d106      	bne.n	800df52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7f8 f905 	bl	800615c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2224      	movs	r2, #36	; 0x24
 800df56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f022 0201 	bic.w	r2, r2, #1
 800df68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 fcdc 	bl	800e928 <UART_SetConfig>
 800df70:	4603      	mov	r3, r0
 800df72:	2b01      	cmp	r3, #1
 800df74:	d101      	bne.n	800df7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	e022      	b.n	800dfc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d002      	beq.n	800df88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f001 fb3c 	bl	800f600 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	685a      	ldr	r2, [r3, #4]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	689a      	ldr	r2, [r3, #8]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dfa6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f042 0201 	orr.w	r2, r2, #1
 800dfb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f001 fbc3 	bl	800f744 <UART_CheckIdleState>
 800dfbe:	4603      	mov	r3, r0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08a      	sub	sp, #40	; 0x28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfdc:	2b20      	cmp	r3, #32
 800dfde:	d17a      	bne.n	800e0d6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d002      	beq.n	800dfec <HAL_UART_Transmit_DMA+0x24>
 800dfe6:	88fb      	ldrh	r3, [r7, #6]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d101      	bne.n	800dff0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dfec:	2301      	movs	r3, #1
 800dfee:	e073      	b.n	800e0d8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d101      	bne.n	800dffe <HAL_UART_Transmit_DMA+0x36>
 800dffa:	2302      	movs	r3, #2
 800dffc:	e06c      	b.n	800e0d8 <HAL_UART_Transmit_DMA+0x110>
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	68ba      	ldr	r2, [r7, #8]
 800e00a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	88fa      	ldrh	r2, [r7, #6]
 800e010:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	88fa      	ldrh	r2, [r7, #6]
 800e018:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2200      	movs	r2, #0
 800e020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2221      	movs	r2, #33	; 0x21
 800e028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e030:	2b00      	cmp	r3, #0
 800e032:	d02c      	beq.n	800e08e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e038:	4a29      	ldr	r2, [pc, #164]	; (800e0e0 <HAL_UART_Transmit_DMA+0x118>)
 800e03a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e040:	4a28      	ldr	r2, [pc, #160]	; (800e0e4 <HAL_UART_Transmit_DMA+0x11c>)
 800e042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e048:	4a27      	ldr	r2, [pc, #156]	; (800e0e8 <HAL_UART_Transmit_DMA+0x120>)
 800e04a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e050:	2200      	movs	r2, #0
 800e052:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e05c:	4619      	mov	r1, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3328      	adds	r3, #40	; 0x28
 800e064:	461a      	mov	r2, r3
 800e066:	88fb      	ldrh	r3, [r7, #6]
 800e068:	f7f9 fa38 	bl	80074dc <HAL_DMA_Start_IT>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00d      	beq.n	800e08e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2210      	movs	r2, #16
 800e076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2220      	movs	r2, #32
 800e086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e024      	b.n	800e0d8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2240      	movs	r2, #64	; 0x40
 800e094:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2200      	movs	r2, #0
 800e09a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	3308      	adds	r3, #8
 800e0a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	e853 3f00 	ldrex	r3, [r3]
 800e0ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3308      	adds	r3, #8
 800e0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0be:	623a      	str	r2, [r7, #32]
 800e0c0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c2:	69f9      	ldr	r1, [r7, #28]
 800e0c4:	6a3a      	ldr	r2, [r7, #32]
 800e0c6:	e841 2300 	strex	r3, r2, [r1]
 800e0ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1e5      	bne.n	800e09e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	e000      	b.n	800e0d8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e0d6:	2302      	movs	r3, #2
  }
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3728      	adds	r7, #40	; 0x28
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	0800fc0d 	.word	0x0800fc0d
 800e0e4:	0800fca3 	.word	0x0800fca3
 800e0e8:	0800fe19 	.word	0x0800fe19

0800e0ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b08a      	sub	sp, #40	; 0x28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e100:	2b20      	cmp	r3, #32
 800e102:	d142      	bne.n	800e18a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <HAL_UART_Receive_DMA+0x24>
 800e10a:	88fb      	ldrh	r3, [r7, #6]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d101      	bne.n	800e114 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	e03b      	b.n	800e18c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d101      	bne.n	800e122 <HAL_UART_Receive_DMA+0x36>
 800e11e:	2302      	movs	r3, #2
 800e120:	e034      	b.n	800e18c <HAL_UART_Receive_DMA+0xa0>
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a17      	ldr	r2, [pc, #92]	; (800e194 <HAL_UART_Receive_DMA+0xa8>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d01f      	beq.n	800e17a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e144:	2b00      	cmp	r3, #0
 800e146:	d018      	beq.n	800e17a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	e853 3f00 	ldrex	r3, [r3]
 800e154:	613b      	str	r3, [r7, #16]
   return(result);
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e15c:	627b      	str	r3, [r7, #36]	; 0x24
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	461a      	mov	r2, r3
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	623b      	str	r3, [r7, #32]
 800e168:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e16a:	69f9      	ldr	r1, [r7, #28]
 800e16c:	6a3a      	ldr	r2, [r7, #32]
 800e16e:	e841 2300 	strex	r3, r2, [r1]
 800e172:	61bb      	str	r3, [r7, #24]
   return(result);
 800e174:	69bb      	ldr	r3, [r7, #24]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d1e6      	bne.n	800e148 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e17a:	88fb      	ldrh	r3, [r7, #6]
 800e17c:	461a      	mov	r2, r3
 800e17e:	68b9      	ldr	r1, [r7, #8]
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f001 fbf3 	bl	800f96c <UART_Start_Receive_DMA>
 800e186:	4603      	mov	r3, r0
 800e188:	e000      	b.n	800e18c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e18a:	2302      	movs	r3, #2
  }
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3728      	adds	r7, #40	; 0x28
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	58000c00 	.word	0x58000c00

0800e198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b0ba      	sub	sp, #232	; 0xe8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	69db      	ldr	r3, [r3, #28]
 800e1a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d11b      	bne.n	800e20c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1d8:	f003 0320 	and.w	r3, r3, #32
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d015      	beq.n	800e20c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1e4:	f003 0320 	and.w	r3, r3, #32
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d105      	bne.n	800e1f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d009      	beq.n	800e20c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f000 835a 	beq.w	800e8b6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	4798      	blx	r3
      }
      return;
 800e20a:	e354      	b.n	800e8b6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e20c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e210:	2b00      	cmp	r3, #0
 800e212:	f000 811f 	beq.w	800e454 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e216:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e21a:	4b8b      	ldr	r3, [pc, #556]	; (800e448 <HAL_UART_IRQHandler+0x2b0>)
 800e21c:	4013      	ands	r3, r2
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d106      	bne.n	800e230 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e222:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e226:	4b89      	ldr	r3, [pc, #548]	; (800e44c <HAL_UART_IRQHandler+0x2b4>)
 800e228:	4013      	ands	r3, r2
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 8112 	beq.w	800e454 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d011      	beq.n	800e260 <HAL_UART_IRQHandler+0xc8>
 800e23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2201      	movs	r2, #1
 800e24e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e256:	f043 0201 	orr.w	r2, r3, #1
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e264:	f003 0302 	and.w	r3, r3, #2
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d011      	beq.n	800e290 <HAL_UART_IRQHandler+0xf8>
 800e26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e270:	f003 0301 	and.w	r3, r3, #1
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00b      	beq.n	800e290 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	2202      	movs	r2, #2
 800e27e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e286:	f043 0204 	orr.w	r2, r3, #4
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e294:	f003 0304 	and.w	r3, r3, #4
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d011      	beq.n	800e2c0 <HAL_UART_IRQHandler+0x128>
 800e29c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00b      	beq.n	800e2c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2204      	movs	r2, #4
 800e2ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2b6:	f043 0202 	orr.w	r2, r3, #2
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2c4:	f003 0308 	and.w	r3, r3, #8
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d017      	beq.n	800e2fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2d0:	f003 0320 	and.w	r3, r3, #32
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d105      	bne.n	800e2e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e2d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e2dc:	4b5a      	ldr	r3, [pc, #360]	; (800e448 <HAL_UART_IRQHandler+0x2b0>)
 800e2de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00b      	beq.n	800e2fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2208      	movs	r2, #8
 800e2ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2f2:	f043 0208 	orr.w	r2, r3, #8
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e304:	2b00      	cmp	r3, #0
 800e306:	d012      	beq.n	800e32e <HAL_UART_IRQHandler+0x196>
 800e308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e30c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00c      	beq.n	800e32e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e31c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e324:	f043 0220 	orr.w	r2, r3, #32
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 82c0 	beq.w	800e8ba <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e33e:	f003 0320 	and.w	r3, r3, #32
 800e342:	2b00      	cmp	r3, #0
 800e344:	d013      	beq.n	800e36e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e34a:	f003 0320 	and.w	r3, r3, #32
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d105      	bne.n	800e35e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d007      	beq.n	800e36e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e362:	2b00      	cmp	r3, #0
 800e364:	d003      	beq.n	800e36e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e374:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e382:	2b40      	cmp	r3, #64	; 0x40
 800e384:	d005      	beq.n	800e392 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e38a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d04f      	beq.n	800e432 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f001 fbd4 	bl	800fb40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a2:	2b40      	cmp	r3, #64	; 0x40
 800e3a4:	d141      	bne.n	800e42a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3b4:	e853 3f00 	ldrex	r3, [r3]
 800e3b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3308      	adds	r3, #8
 800e3ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3e2:	e841 2300 	strex	r3, r2, [r1]
 800e3e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1d9      	bne.n	800e3a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d013      	beq.n	800e422 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3fe:	4a14      	ldr	r2, [pc, #80]	; (800e450 <HAL_UART_IRQHandler+0x2b8>)
 800e400:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e406:	4618      	mov	r0, r3
 800e408:	f7f9 fdf0 	bl	8007fec <HAL_DMA_Abort_IT>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d017      	beq.n	800e442 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e420:	e00f      	b.n	800e442 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fa6a 	bl	800e8fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e428:	e00b      	b.n	800e442 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fa66 	bl	800e8fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e430:	e007      	b.n	800e442 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 fa62 	bl	800e8fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e440:	e23b      	b.n	800e8ba <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e442:	bf00      	nop
    return;
 800e444:	e239      	b.n	800e8ba <HAL_UART_IRQHandler+0x722>
 800e446:	bf00      	nop
 800e448:	10000001 	.word	0x10000001
 800e44c:	04000120 	.word	0x04000120
 800e450:	0800fe99 	.word	0x0800fe99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e458:	2b01      	cmp	r3, #1
 800e45a:	f040 81ce 	bne.w	800e7fa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e462:	f003 0310 	and.w	r3, r3, #16
 800e466:	2b00      	cmp	r3, #0
 800e468:	f000 81c7 	beq.w	800e7fa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e470:	f003 0310 	and.w	r3, r3, #16
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 81c0 	beq.w	800e7fa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2210      	movs	r2, #16
 800e480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e48c:	2b40      	cmp	r3, #64	; 0x40
 800e48e:	f040 813b 	bne.w	800e708 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a8b      	ldr	r2, [pc, #556]	; (800e6c8 <HAL_UART_IRQHandler+0x530>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d059      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a89      	ldr	r2, [pc, #548]	; (800e6cc <HAL_UART_IRQHandler+0x534>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d053      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a87      	ldr	r2, [pc, #540]	; (800e6d0 <HAL_UART_IRQHandler+0x538>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d04d      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a85      	ldr	r2, [pc, #532]	; (800e6d4 <HAL_UART_IRQHandler+0x53c>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d047      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a83      	ldr	r2, [pc, #524]	; (800e6d8 <HAL_UART_IRQHandler+0x540>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d041      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a81      	ldr	r2, [pc, #516]	; (800e6dc <HAL_UART_IRQHandler+0x544>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d03b      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a7f      	ldr	r2, [pc, #508]	; (800e6e0 <HAL_UART_IRQHandler+0x548>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d035      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a7d      	ldr	r2, [pc, #500]	; (800e6e4 <HAL_UART_IRQHandler+0x54c>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d02f      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a7b      	ldr	r2, [pc, #492]	; (800e6e8 <HAL_UART_IRQHandler+0x550>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d029      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a79      	ldr	r2, [pc, #484]	; (800e6ec <HAL_UART_IRQHandler+0x554>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d023      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a77      	ldr	r2, [pc, #476]	; (800e6f0 <HAL_UART_IRQHandler+0x558>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d01d      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a75      	ldr	r2, [pc, #468]	; (800e6f4 <HAL_UART_IRQHandler+0x55c>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d017      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a73      	ldr	r2, [pc, #460]	; (800e6f8 <HAL_UART_IRQHandler+0x560>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d011      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a71      	ldr	r2, [pc, #452]	; (800e6fc <HAL_UART_IRQHandler+0x564>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d00b      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a6f      	ldr	r2, [pc, #444]	; (800e700 <HAL_UART_IRQHandler+0x568>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d005      	beq.n	800e552 <HAL_UART_IRQHandler+0x3ba>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a6d      	ldr	r2, [pc, #436]	; (800e704 <HAL_UART_IRQHandler+0x56c>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d105      	bne.n	800e55e <HAL_UART_IRQHandler+0x3c6>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	e004      	b.n	800e568 <HAL_UART_IRQHandler+0x3d0>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	b29b      	uxth	r3, r3
 800e568:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e56c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 81a4 	beq.w	800e8be <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e57c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e580:	429a      	cmp	r2, r3
 800e582:	f080 819c 	bcs.w	800e8be <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e58c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e594:	69db      	ldr	r3, [r3, #28]
 800e596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e59a:	f000 8086 	beq.w	800e6aa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e5aa:	e853 3f00 	ldrex	r3, [r3]
 800e5ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e5b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e5c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e5cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e5d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e5d8:	e841 2300 	strex	r3, r2, [r1]
 800e5dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1da      	bne.n	800e59e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e5f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5fa:	f023 0301 	bic.w	r3, r3, #1
 800e5fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	3308      	adds	r3, #8
 800e608:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e60c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e610:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e612:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e614:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e618:	e841 2300 	strex	r3, r2, [r1]
 800e61c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e61e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e1      	bne.n	800e5e8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3308      	adds	r3, #8
 800e62a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e62e:	e853 3f00 	ldrex	r3, [r3]
 800e632:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e63a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e648:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e64a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e64e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e650:	e841 2300 	strex	r3, r2, [r1]
 800e654:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1e3      	bne.n	800e624 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2220      	movs	r2, #32
 800e660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e672:	e853 3f00 	ldrex	r3, [r3]
 800e676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e67a:	f023 0310 	bic.w	r3, r3, #16
 800e67e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e68c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e68e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e694:	e841 2300 	strex	r3, r2, [r1]
 800e698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1e4      	bne.n	800e66a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7f9 f983 	bl	80079b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	4619      	mov	r1, r3
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 f926 	bl	800e910 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6c4:	e0fb      	b.n	800e8be <HAL_UART_IRQHandler+0x726>
 800e6c6:	bf00      	nop
 800e6c8:	40020010 	.word	0x40020010
 800e6cc:	40020028 	.word	0x40020028
 800e6d0:	40020040 	.word	0x40020040
 800e6d4:	40020058 	.word	0x40020058
 800e6d8:	40020070 	.word	0x40020070
 800e6dc:	40020088 	.word	0x40020088
 800e6e0:	400200a0 	.word	0x400200a0
 800e6e4:	400200b8 	.word	0x400200b8
 800e6e8:	40020410 	.word	0x40020410
 800e6ec:	40020428 	.word	0x40020428
 800e6f0:	40020440 	.word	0x40020440
 800e6f4:	40020458 	.word	0x40020458
 800e6f8:	40020470 	.word	0x40020470
 800e6fc:	40020488 	.word	0x40020488
 800e700:	400204a0 	.word	0x400204a0
 800e704:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e714:	b29b      	uxth	r3, r3
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e722:	b29b      	uxth	r3, r3
 800e724:	2b00      	cmp	r3, #0
 800e726:	f000 80cc 	beq.w	800e8c2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e72a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f000 80c7 	beq.w	800e8c2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73c:	e853 3f00 	ldrex	r3, [r3]
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	461a      	mov	r2, r3
 800e752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e756:	647b      	str	r3, [r7, #68]	; 0x44
 800e758:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e75c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e75e:	e841 2300 	strex	r3, r2, [r1]
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1e4      	bne.n	800e734 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	3308      	adds	r3, #8
 800e770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e774:	e853 3f00 	ldrex	r3, [r3]
 800e778:	623b      	str	r3, [r7, #32]
   return(result);
 800e77a:	6a3a      	ldr	r2, [r7, #32]
 800e77c:	4b54      	ldr	r3, [pc, #336]	; (800e8d0 <HAL_UART_IRQHandler+0x738>)
 800e77e:	4013      	ands	r3, r2
 800e780:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	3308      	adds	r3, #8
 800e78a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e78e:	633a      	str	r2, [r7, #48]	; 0x30
 800e790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e796:	e841 2300 	strex	r3, r2, [r1]
 800e79a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1e3      	bne.n	800e76a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	e853 3f00 	ldrex	r3, [r3]
 800e7c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f023 0310 	bic.w	r3, r3, #16
 800e7ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e7d8:	61fb      	str	r3, [r7, #28]
 800e7da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7dc:	69b9      	ldr	r1, [r7, #24]
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	e841 2300 	strex	r3, r2, [r1]
 800e7e4:	617b      	str	r3, [r7, #20]
   return(result);
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1e4      	bne.n	800e7b6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e7ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f88c 	bl	800e910 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7f8:	e063      	b.n	800e8c2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e7fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00e      	beq.n	800e824 <HAL_UART_IRQHandler+0x68c>
 800e806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e80a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d008      	beq.n	800e824 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e81a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f001 fb7c 	bl	800ff1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e822:	e051      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d014      	beq.n	800e85a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d105      	bne.n	800e848 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e844:	2b00      	cmp	r3, #0
 800e846:	d008      	beq.n	800e85a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d03a      	beq.n	800e8c6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	4798      	blx	r3
    }
    return;
 800e858:	e035      	b.n	800e8c6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e862:	2b00      	cmp	r3, #0
 800e864:	d009      	beq.n	800e87a <HAL_UART_IRQHandler+0x6e2>
 800e866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d003      	beq.n	800e87a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f001 fb26 	bl	800fec4 <UART_EndTransmit_IT>
    return;
 800e878:	e026      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e87a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e87e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e882:	2b00      	cmp	r3, #0
 800e884:	d009      	beq.n	800e89a <HAL_UART_IRQHandler+0x702>
 800e886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e88a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d003      	beq.n	800e89a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f001 fb55 	bl	800ff42 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e898:	e016      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e89e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d010      	beq.n	800e8c8 <HAL_UART_IRQHandler+0x730>
 800e8a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	da0c      	bge.n	800e8c8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f001 fb3d 	bl	800ff2e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8b4:	e008      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
      return;
 800e8b6:	bf00      	nop
 800e8b8:	e006      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
    return;
 800e8ba:	bf00      	nop
 800e8bc:	e004      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
      return;
 800e8be:	bf00      	nop
 800e8c0:	e002      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
      return;
 800e8c2:	bf00      	nop
 800e8c4:	e000      	b.n	800e8c8 <HAL_UART_IRQHandler+0x730>
    return;
 800e8c6:	bf00      	nop
  }
}
 800e8c8:	37e8      	adds	r7, #232	; 0xe8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	effffffe 	.word	0xeffffffe

0800e8d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e91c:	bf00      	nop
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e92c:	b092      	sub	sp, #72	; 0x48
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	689a      	ldr	r2, [r3, #8]
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	431a      	orrs	r2, r3
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	695b      	ldr	r3, [r3, #20]
 800e946:	431a      	orrs	r2, r3
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	69db      	ldr	r3, [r3, #28]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	4bbe      	ldr	r3, [pc, #760]	; (800ec50 <UART_SetConfig+0x328>)
 800e958:	4013      	ands	r3, r2
 800e95a:	697a      	ldr	r2, [r7, #20]
 800e95c:	6812      	ldr	r2, [r2, #0]
 800e95e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e960:	430b      	orrs	r3, r1
 800e962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	68da      	ldr	r2, [r3, #12]
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	699b      	ldr	r3, [r3, #24]
 800e97e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4ab3      	ldr	r2, [pc, #716]	; (800ec54 <UART_SetConfig+0x32c>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d004      	beq.n	800e994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e990:	4313      	orrs	r3, r2
 800e992:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	689a      	ldr	r2, [r3, #8]
 800e99a:	4baf      	ldr	r3, [pc, #700]	; (800ec58 <UART_SetConfig+0x330>)
 800e99c:	4013      	ands	r3, r2
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	6812      	ldr	r2, [r2, #0]
 800e9a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9a4:	430b      	orrs	r3, r1
 800e9a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ae:	f023 010f 	bic.w	r1, r3, #15
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4aa6      	ldr	r2, [pc, #664]	; (800ec5c <UART_SetConfig+0x334>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d177      	bne.n	800eab8 <UART_SetConfig+0x190>
 800e9c8:	4ba5      	ldr	r3, [pc, #660]	; (800ec60 <UART_SetConfig+0x338>)
 800e9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9d0:	2b28      	cmp	r3, #40	; 0x28
 800e9d2:	d86d      	bhi.n	800eab0 <UART_SetConfig+0x188>
 800e9d4:	a201      	add	r2, pc, #4	; (adr r2, 800e9dc <UART_SetConfig+0xb4>)
 800e9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9da:	bf00      	nop
 800e9dc:	0800ea81 	.word	0x0800ea81
 800e9e0:	0800eab1 	.word	0x0800eab1
 800e9e4:	0800eab1 	.word	0x0800eab1
 800e9e8:	0800eab1 	.word	0x0800eab1
 800e9ec:	0800eab1 	.word	0x0800eab1
 800e9f0:	0800eab1 	.word	0x0800eab1
 800e9f4:	0800eab1 	.word	0x0800eab1
 800e9f8:	0800eab1 	.word	0x0800eab1
 800e9fc:	0800ea89 	.word	0x0800ea89
 800ea00:	0800eab1 	.word	0x0800eab1
 800ea04:	0800eab1 	.word	0x0800eab1
 800ea08:	0800eab1 	.word	0x0800eab1
 800ea0c:	0800eab1 	.word	0x0800eab1
 800ea10:	0800eab1 	.word	0x0800eab1
 800ea14:	0800eab1 	.word	0x0800eab1
 800ea18:	0800eab1 	.word	0x0800eab1
 800ea1c:	0800ea91 	.word	0x0800ea91
 800ea20:	0800eab1 	.word	0x0800eab1
 800ea24:	0800eab1 	.word	0x0800eab1
 800ea28:	0800eab1 	.word	0x0800eab1
 800ea2c:	0800eab1 	.word	0x0800eab1
 800ea30:	0800eab1 	.word	0x0800eab1
 800ea34:	0800eab1 	.word	0x0800eab1
 800ea38:	0800eab1 	.word	0x0800eab1
 800ea3c:	0800ea99 	.word	0x0800ea99
 800ea40:	0800eab1 	.word	0x0800eab1
 800ea44:	0800eab1 	.word	0x0800eab1
 800ea48:	0800eab1 	.word	0x0800eab1
 800ea4c:	0800eab1 	.word	0x0800eab1
 800ea50:	0800eab1 	.word	0x0800eab1
 800ea54:	0800eab1 	.word	0x0800eab1
 800ea58:	0800eab1 	.word	0x0800eab1
 800ea5c:	0800eaa1 	.word	0x0800eaa1
 800ea60:	0800eab1 	.word	0x0800eab1
 800ea64:	0800eab1 	.word	0x0800eab1
 800ea68:	0800eab1 	.word	0x0800eab1
 800ea6c:	0800eab1 	.word	0x0800eab1
 800ea70:	0800eab1 	.word	0x0800eab1
 800ea74:	0800eab1 	.word	0x0800eab1
 800ea78:	0800eab1 	.word	0x0800eab1
 800ea7c:	0800eaa9 	.word	0x0800eaa9
 800ea80:	2301      	movs	r3, #1
 800ea82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea86:	e326      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ea88:	2304      	movs	r3, #4
 800ea8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8e:	e322      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ea90:	2308      	movs	r3, #8
 800ea92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea96:	e31e      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ea98:	2310      	movs	r3, #16
 800ea9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9e:	e31a      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eaa0:	2320      	movs	r3, #32
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa6:	e316      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eaa8:	2340      	movs	r3, #64	; 0x40
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaae:	e312      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eab0:	2380      	movs	r3, #128	; 0x80
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e30e      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a69      	ldr	r2, [pc, #420]	; (800ec64 <UART_SetConfig+0x33c>)
 800eabe:	4293      	cmp	r3, r2
 800eac0:	d130      	bne.n	800eb24 <UART_SetConfig+0x1fc>
 800eac2:	4b67      	ldr	r3, [pc, #412]	; (800ec60 <UART_SetConfig+0x338>)
 800eac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eac6:	f003 0307 	and.w	r3, r3, #7
 800eaca:	2b05      	cmp	r3, #5
 800eacc:	d826      	bhi.n	800eb1c <UART_SetConfig+0x1f4>
 800eace:	a201      	add	r2, pc, #4	; (adr r2, 800ead4 <UART_SetConfig+0x1ac>)
 800ead0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead4:	0800eaed 	.word	0x0800eaed
 800ead8:	0800eaf5 	.word	0x0800eaf5
 800eadc:	0800eafd 	.word	0x0800eafd
 800eae0:	0800eb05 	.word	0x0800eb05
 800eae4:	0800eb0d 	.word	0x0800eb0d
 800eae8:	0800eb15 	.word	0x0800eb15
 800eaec:	2300      	movs	r3, #0
 800eaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf2:	e2f0      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eaf4:	2304      	movs	r3, #4
 800eaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafa:	e2ec      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eafc:	2308      	movs	r3, #8
 800eafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb02:	e2e8      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb04:	2310      	movs	r3, #16
 800eb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0a:	e2e4      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb0c:	2320      	movs	r3, #32
 800eb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb12:	e2e0      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb14:	2340      	movs	r3, #64	; 0x40
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1a:	e2dc      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb1c:	2380      	movs	r3, #128	; 0x80
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb22:	e2d8      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4a4f      	ldr	r2, [pc, #316]	; (800ec68 <UART_SetConfig+0x340>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d130      	bne.n	800eb90 <UART_SetConfig+0x268>
 800eb2e:	4b4c      	ldr	r3, [pc, #304]	; (800ec60 <UART_SetConfig+0x338>)
 800eb30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb32:	f003 0307 	and.w	r3, r3, #7
 800eb36:	2b05      	cmp	r3, #5
 800eb38:	d826      	bhi.n	800eb88 <UART_SetConfig+0x260>
 800eb3a:	a201      	add	r2, pc, #4	; (adr r2, 800eb40 <UART_SetConfig+0x218>)
 800eb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb40:	0800eb59 	.word	0x0800eb59
 800eb44:	0800eb61 	.word	0x0800eb61
 800eb48:	0800eb69 	.word	0x0800eb69
 800eb4c:	0800eb71 	.word	0x0800eb71
 800eb50:	0800eb79 	.word	0x0800eb79
 800eb54:	0800eb81 	.word	0x0800eb81
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5e:	e2ba      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb60:	2304      	movs	r3, #4
 800eb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb66:	e2b6      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb68:	2308      	movs	r3, #8
 800eb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6e:	e2b2      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb70:	2310      	movs	r3, #16
 800eb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb76:	e2ae      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb78:	2320      	movs	r3, #32
 800eb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7e:	e2aa      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb80:	2340      	movs	r3, #64	; 0x40
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb86:	e2a6      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb88:	2380      	movs	r3, #128	; 0x80
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8e:	e2a2      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a35      	ldr	r2, [pc, #212]	; (800ec6c <UART_SetConfig+0x344>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d130      	bne.n	800ebfc <UART_SetConfig+0x2d4>
 800eb9a:	4b31      	ldr	r3, [pc, #196]	; (800ec60 <UART_SetConfig+0x338>)
 800eb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9e:	f003 0307 	and.w	r3, r3, #7
 800eba2:	2b05      	cmp	r3, #5
 800eba4:	d826      	bhi.n	800ebf4 <UART_SetConfig+0x2cc>
 800eba6:	a201      	add	r2, pc, #4	; (adr r2, 800ebac <UART_SetConfig+0x284>)
 800eba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebac:	0800ebc5 	.word	0x0800ebc5
 800ebb0:	0800ebcd 	.word	0x0800ebcd
 800ebb4:	0800ebd5 	.word	0x0800ebd5
 800ebb8:	0800ebdd 	.word	0x0800ebdd
 800ebbc:	0800ebe5 	.word	0x0800ebe5
 800ebc0:	0800ebed 	.word	0x0800ebed
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebca:	e284      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ebcc:	2304      	movs	r3, #4
 800ebce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd2:	e280      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ebd4:	2308      	movs	r3, #8
 800ebd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebda:	e27c      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ebdc:	2310      	movs	r3, #16
 800ebde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe2:	e278      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ebe4:	2320      	movs	r3, #32
 800ebe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebea:	e274      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ebec:	2340      	movs	r3, #64	; 0x40
 800ebee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf2:	e270      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ebf4:	2380      	movs	r3, #128	; 0x80
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfa:	e26c      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a1b      	ldr	r2, [pc, #108]	; (800ec70 <UART_SetConfig+0x348>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d142      	bne.n	800ec8c <UART_SetConfig+0x364>
 800ec06:	4b16      	ldr	r3, [pc, #88]	; (800ec60 <UART_SetConfig+0x338>)
 800ec08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec0a:	f003 0307 	and.w	r3, r3, #7
 800ec0e:	2b05      	cmp	r3, #5
 800ec10:	d838      	bhi.n	800ec84 <UART_SetConfig+0x35c>
 800ec12:	a201      	add	r2, pc, #4	; (adr r2, 800ec18 <UART_SetConfig+0x2f0>)
 800ec14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec18:	0800ec31 	.word	0x0800ec31
 800ec1c:	0800ec39 	.word	0x0800ec39
 800ec20:	0800ec41 	.word	0x0800ec41
 800ec24:	0800ec49 	.word	0x0800ec49
 800ec28:	0800ec75 	.word	0x0800ec75
 800ec2c:	0800ec7d 	.word	0x0800ec7d
 800ec30:	2300      	movs	r3, #0
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec36:	e24e      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ec38:	2304      	movs	r3, #4
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e24a      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ec40:	2308      	movs	r3, #8
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e246      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ec48:	2310      	movs	r3, #16
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e242      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ec50:	cfff69f3 	.word	0xcfff69f3
 800ec54:	58000c00 	.word	0x58000c00
 800ec58:	11fff4ff 	.word	0x11fff4ff
 800ec5c:	40011000 	.word	0x40011000
 800ec60:	58024400 	.word	0x58024400
 800ec64:	40004400 	.word	0x40004400
 800ec68:	40004800 	.word	0x40004800
 800ec6c:	40004c00 	.word	0x40004c00
 800ec70:	40005000 	.word	0x40005000
 800ec74:	2320      	movs	r3, #32
 800ec76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec7a:	e22c      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ec7c:	2340      	movs	r3, #64	; 0x40
 800ec7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec82:	e228      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ec84:	2380      	movs	r3, #128	; 0x80
 800ec86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8a:	e224      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4ab1      	ldr	r2, [pc, #708]	; (800ef58 <UART_SetConfig+0x630>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d176      	bne.n	800ed84 <UART_SetConfig+0x45c>
 800ec96:	4bb1      	ldr	r3, [pc, #708]	; (800ef5c <UART_SetConfig+0x634>)
 800ec98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec9e:	2b28      	cmp	r3, #40	; 0x28
 800eca0:	d86c      	bhi.n	800ed7c <UART_SetConfig+0x454>
 800eca2:	a201      	add	r2, pc, #4	; (adr r2, 800eca8 <UART_SetConfig+0x380>)
 800eca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eca8:	0800ed4d 	.word	0x0800ed4d
 800ecac:	0800ed7d 	.word	0x0800ed7d
 800ecb0:	0800ed7d 	.word	0x0800ed7d
 800ecb4:	0800ed7d 	.word	0x0800ed7d
 800ecb8:	0800ed7d 	.word	0x0800ed7d
 800ecbc:	0800ed7d 	.word	0x0800ed7d
 800ecc0:	0800ed7d 	.word	0x0800ed7d
 800ecc4:	0800ed7d 	.word	0x0800ed7d
 800ecc8:	0800ed55 	.word	0x0800ed55
 800eccc:	0800ed7d 	.word	0x0800ed7d
 800ecd0:	0800ed7d 	.word	0x0800ed7d
 800ecd4:	0800ed7d 	.word	0x0800ed7d
 800ecd8:	0800ed7d 	.word	0x0800ed7d
 800ecdc:	0800ed7d 	.word	0x0800ed7d
 800ece0:	0800ed7d 	.word	0x0800ed7d
 800ece4:	0800ed7d 	.word	0x0800ed7d
 800ece8:	0800ed5d 	.word	0x0800ed5d
 800ecec:	0800ed7d 	.word	0x0800ed7d
 800ecf0:	0800ed7d 	.word	0x0800ed7d
 800ecf4:	0800ed7d 	.word	0x0800ed7d
 800ecf8:	0800ed7d 	.word	0x0800ed7d
 800ecfc:	0800ed7d 	.word	0x0800ed7d
 800ed00:	0800ed7d 	.word	0x0800ed7d
 800ed04:	0800ed7d 	.word	0x0800ed7d
 800ed08:	0800ed65 	.word	0x0800ed65
 800ed0c:	0800ed7d 	.word	0x0800ed7d
 800ed10:	0800ed7d 	.word	0x0800ed7d
 800ed14:	0800ed7d 	.word	0x0800ed7d
 800ed18:	0800ed7d 	.word	0x0800ed7d
 800ed1c:	0800ed7d 	.word	0x0800ed7d
 800ed20:	0800ed7d 	.word	0x0800ed7d
 800ed24:	0800ed7d 	.word	0x0800ed7d
 800ed28:	0800ed6d 	.word	0x0800ed6d
 800ed2c:	0800ed7d 	.word	0x0800ed7d
 800ed30:	0800ed7d 	.word	0x0800ed7d
 800ed34:	0800ed7d 	.word	0x0800ed7d
 800ed38:	0800ed7d 	.word	0x0800ed7d
 800ed3c:	0800ed7d 	.word	0x0800ed7d
 800ed40:	0800ed7d 	.word	0x0800ed7d
 800ed44:	0800ed7d 	.word	0x0800ed7d
 800ed48:	0800ed75 	.word	0x0800ed75
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed52:	e1c0      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ed54:	2304      	movs	r3, #4
 800ed56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5a:	e1bc      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ed5c:	2308      	movs	r3, #8
 800ed5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed62:	e1b8      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ed64:	2310      	movs	r3, #16
 800ed66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6a:	e1b4      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ed6c:	2320      	movs	r3, #32
 800ed6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed72:	e1b0      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ed74:	2340      	movs	r3, #64	; 0x40
 800ed76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7a:	e1ac      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ed7c:	2380      	movs	r3, #128	; 0x80
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e1a8      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a75      	ldr	r2, [pc, #468]	; (800ef60 <UART_SetConfig+0x638>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d130      	bne.n	800edf0 <UART_SetConfig+0x4c8>
 800ed8e:	4b73      	ldr	r3, [pc, #460]	; (800ef5c <UART_SetConfig+0x634>)
 800ed90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed92:	f003 0307 	and.w	r3, r3, #7
 800ed96:	2b05      	cmp	r3, #5
 800ed98:	d826      	bhi.n	800ede8 <UART_SetConfig+0x4c0>
 800ed9a:	a201      	add	r2, pc, #4	; (adr r2, 800eda0 <UART_SetConfig+0x478>)
 800ed9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda0:	0800edb9 	.word	0x0800edb9
 800eda4:	0800edc1 	.word	0x0800edc1
 800eda8:	0800edc9 	.word	0x0800edc9
 800edac:	0800edd1 	.word	0x0800edd1
 800edb0:	0800edd9 	.word	0x0800edd9
 800edb4:	0800ede1 	.word	0x0800ede1
 800edb8:	2300      	movs	r3, #0
 800edba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edbe:	e18a      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800edc0:	2304      	movs	r3, #4
 800edc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc6:	e186      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800edc8:	2308      	movs	r3, #8
 800edca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edce:	e182      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800edd0:	2310      	movs	r3, #16
 800edd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd6:	e17e      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800edd8:	2320      	movs	r3, #32
 800edda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edde:	e17a      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ede0:	2340      	movs	r3, #64	; 0x40
 800ede2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede6:	e176      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ede8:	2380      	movs	r3, #128	; 0x80
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edee:	e172      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a5b      	ldr	r2, [pc, #364]	; (800ef64 <UART_SetConfig+0x63c>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d130      	bne.n	800ee5c <UART_SetConfig+0x534>
 800edfa:	4b58      	ldr	r3, [pc, #352]	; (800ef5c <UART_SetConfig+0x634>)
 800edfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edfe:	f003 0307 	and.w	r3, r3, #7
 800ee02:	2b05      	cmp	r3, #5
 800ee04:	d826      	bhi.n	800ee54 <UART_SetConfig+0x52c>
 800ee06:	a201      	add	r2, pc, #4	; (adr r2, 800ee0c <UART_SetConfig+0x4e4>)
 800ee08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0c:	0800ee25 	.word	0x0800ee25
 800ee10:	0800ee2d 	.word	0x0800ee2d
 800ee14:	0800ee35 	.word	0x0800ee35
 800ee18:	0800ee3d 	.word	0x0800ee3d
 800ee1c:	0800ee45 	.word	0x0800ee45
 800ee20:	0800ee4d 	.word	0x0800ee4d
 800ee24:	2300      	movs	r3, #0
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2a:	e154      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ee2c:	2304      	movs	r3, #4
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee32:	e150      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ee34:	2308      	movs	r3, #8
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3a:	e14c      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ee3c:	2310      	movs	r3, #16
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee42:	e148      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ee44:	2320      	movs	r3, #32
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4a:	e144      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ee4c:	2340      	movs	r3, #64	; 0x40
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee52:	e140      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ee54:	2380      	movs	r3, #128	; 0x80
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5a:	e13c      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a41      	ldr	r2, [pc, #260]	; (800ef68 <UART_SetConfig+0x640>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	f040 8082 	bne.w	800ef6c <UART_SetConfig+0x644>
 800ee68:	4b3c      	ldr	r3, [pc, #240]	; (800ef5c <UART_SetConfig+0x634>)
 800ee6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee70:	2b28      	cmp	r3, #40	; 0x28
 800ee72:	d86d      	bhi.n	800ef50 <UART_SetConfig+0x628>
 800ee74:	a201      	add	r2, pc, #4	; (adr r2, 800ee7c <UART_SetConfig+0x554>)
 800ee76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7a:	bf00      	nop
 800ee7c:	0800ef21 	.word	0x0800ef21
 800ee80:	0800ef51 	.word	0x0800ef51
 800ee84:	0800ef51 	.word	0x0800ef51
 800ee88:	0800ef51 	.word	0x0800ef51
 800ee8c:	0800ef51 	.word	0x0800ef51
 800ee90:	0800ef51 	.word	0x0800ef51
 800ee94:	0800ef51 	.word	0x0800ef51
 800ee98:	0800ef51 	.word	0x0800ef51
 800ee9c:	0800ef29 	.word	0x0800ef29
 800eea0:	0800ef51 	.word	0x0800ef51
 800eea4:	0800ef51 	.word	0x0800ef51
 800eea8:	0800ef51 	.word	0x0800ef51
 800eeac:	0800ef51 	.word	0x0800ef51
 800eeb0:	0800ef51 	.word	0x0800ef51
 800eeb4:	0800ef51 	.word	0x0800ef51
 800eeb8:	0800ef51 	.word	0x0800ef51
 800eebc:	0800ef31 	.word	0x0800ef31
 800eec0:	0800ef51 	.word	0x0800ef51
 800eec4:	0800ef51 	.word	0x0800ef51
 800eec8:	0800ef51 	.word	0x0800ef51
 800eecc:	0800ef51 	.word	0x0800ef51
 800eed0:	0800ef51 	.word	0x0800ef51
 800eed4:	0800ef51 	.word	0x0800ef51
 800eed8:	0800ef51 	.word	0x0800ef51
 800eedc:	0800ef39 	.word	0x0800ef39
 800eee0:	0800ef51 	.word	0x0800ef51
 800eee4:	0800ef51 	.word	0x0800ef51
 800eee8:	0800ef51 	.word	0x0800ef51
 800eeec:	0800ef51 	.word	0x0800ef51
 800eef0:	0800ef51 	.word	0x0800ef51
 800eef4:	0800ef51 	.word	0x0800ef51
 800eef8:	0800ef51 	.word	0x0800ef51
 800eefc:	0800ef41 	.word	0x0800ef41
 800ef00:	0800ef51 	.word	0x0800ef51
 800ef04:	0800ef51 	.word	0x0800ef51
 800ef08:	0800ef51 	.word	0x0800ef51
 800ef0c:	0800ef51 	.word	0x0800ef51
 800ef10:	0800ef51 	.word	0x0800ef51
 800ef14:	0800ef51 	.word	0x0800ef51
 800ef18:	0800ef51 	.word	0x0800ef51
 800ef1c:	0800ef49 	.word	0x0800ef49
 800ef20:	2301      	movs	r3, #1
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e0d6      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ef28:	2304      	movs	r3, #4
 800ef2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2e:	e0d2      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ef30:	2308      	movs	r3, #8
 800ef32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef36:	e0ce      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ef38:	2310      	movs	r3, #16
 800ef3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3e:	e0ca      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ef40:	2320      	movs	r3, #32
 800ef42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef46:	e0c6      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ef48:	2340      	movs	r3, #64	; 0x40
 800ef4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4e:	e0c2      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ef50:	2380      	movs	r3, #128	; 0x80
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e0be      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800ef58:	40011400 	.word	0x40011400
 800ef5c:	58024400 	.word	0x58024400
 800ef60:	40007800 	.word	0x40007800
 800ef64:	40007c00 	.word	0x40007c00
 800ef68:	40011800 	.word	0x40011800
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4aad      	ldr	r2, [pc, #692]	; (800f228 <UART_SetConfig+0x900>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d176      	bne.n	800f064 <UART_SetConfig+0x73c>
 800ef76:	4bad      	ldr	r3, [pc, #692]	; (800f22c <UART_SetConfig+0x904>)
 800ef78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef7e:	2b28      	cmp	r3, #40	; 0x28
 800ef80:	d86c      	bhi.n	800f05c <UART_SetConfig+0x734>
 800ef82:	a201      	add	r2, pc, #4	; (adr r2, 800ef88 <UART_SetConfig+0x660>)
 800ef84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef88:	0800f02d 	.word	0x0800f02d
 800ef8c:	0800f05d 	.word	0x0800f05d
 800ef90:	0800f05d 	.word	0x0800f05d
 800ef94:	0800f05d 	.word	0x0800f05d
 800ef98:	0800f05d 	.word	0x0800f05d
 800ef9c:	0800f05d 	.word	0x0800f05d
 800efa0:	0800f05d 	.word	0x0800f05d
 800efa4:	0800f05d 	.word	0x0800f05d
 800efa8:	0800f035 	.word	0x0800f035
 800efac:	0800f05d 	.word	0x0800f05d
 800efb0:	0800f05d 	.word	0x0800f05d
 800efb4:	0800f05d 	.word	0x0800f05d
 800efb8:	0800f05d 	.word	0x0800f05d
 800efbc:	0800f05d 	.word	0x0800f05d
 800efc0:	0800f05d 	.word	0x0800f05d
 800efc4:	0800f05d 	.word	0x0800f05d
 800efc8:	0800f03d 	.word	0x0800f03d
 800efcc:	0800f05d 	.word	0x0800f05d
 800efd0:	0800f05d 	.word	0x0800f05d
 800efd4:	0800f05d 	.word	0x0800f05d
 800efd8:	0800f05d 	.word	0x0800f05d
 800efdc:	0800f05d 	.word	0x0800f05d
 800efe0:	0800f05d 	.word	0x0800f05d
 800efe4:	0800f05d 	.word	0x0800f05d
 800efe8:	0800f045 	.word	0x0800f045
 800efec:	0800f05d 	.word	0x0800f05d
 800eff0:	0800f05d 	.word	0x0800f05d
 800eff4:	0800f05d 	.word	0x0800f05d
 800eff8:	0800f05d 	.word	0x0800f05d
 800effc:	0800f05d 	.word	0x0800f05d
 800f000:	0800f05d 	.word	0x0800f05d
 800f004:	0800f05d 	.word	0x0800f05d
 800f008:	0800f04d 	.word	0x0800f04d
 800f00c:	0800f05d 	.word	0x0800f05d
 800f010:	0800f05d 	.word	0x0800f05d
 800f014:	0800f05d 	.word	0x0800f05d
 800f018:	0800f05d 	.word	0x0800f05d
 800f01c:	0800f05d 	.word	0x0800f05d
 800f020:	0800f05d 	.word	0x0800f05d
 800f024:	0800f05d 	.word	0x0800f05d
 800f028:	0800f055 	.word	0x0800f055
 800f02c:	2301      	movs	r3, #1
 800f02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f032:	e050      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f034:	2304      	movs	r3, #4
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03a:	e04c      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f03c:	2308      	movs	r3, #8
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f042:	e048      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f044:	2310      	movs	r3, #16
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e044      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f04c:	2320      	movs	r3, #32
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f052:	e040      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f054:	2340      	movs	r3, #64	; 0x40
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e03c      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f05c:	2380      	movs	r3, #128	; 0x80
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e038      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a71      	ldr	r2, [pc, #452]	; (800f230 <UART_SetConfig+0x908>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d130      	bne.n	800f0d0 <UART_SetConfig+0x7a8>
 800f06e:	4b6f      	ldr	r3, [pc, #444]	; (800f22c <UART_SetConfig+0x904>)
 800f070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f072:	f003 0307 	and.w	r3, r3, #7
 800f076:	2b05      	cmp	r3, #5
 800f078:	d826      	bhi.n	800f0c8 <UART_SetConfig+0x7a0>
 800f07a:	a201      	add	r2, pc, #4	; (adr r2, 800f080 <UART_SetConfig+0x758>)
 800f07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f080:	0800f099 	.word	0x0800f099
 800f084:	0800f0a1 	.word	0x0800f0a1
 800f088:	0800f0a9 	.word	0x0800f0a9
 800f08c:	0800f0b1 	.word	0x0800f0b1
 800f090:	0800f0b9 	.word	0x0800f0b9
 800f094:	0800f0c1 	.word	0x0800f0c1
 800f098:	2302      	movs	r3, #2
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09e:	e01a      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a6:	e016      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f0a8:	2308      	movs	r3, #8
 800f0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ae:	e012      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f0b0:	2310      	movs	r3, #16
 800f0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b6:	e00e      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f0b8:	2320      	movs	r3, #32
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0be:	e00a      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f0c0:	2340      	movs	r3, #64	; 0x40
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e006      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f0c8:	2380      	movs	r3, #128	; 0x80
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e002      	b.n	800f0d6 <UART_SetConfig+0x7ae>
 800f0d0:	2380      	movs	r3, #128	; 0x80
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a55      	ldr	r2, [pc, #340]	; (800f230 <UART_SetConfig+0x908>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	f040 80f8 	bne.w	800f2d2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f0e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0e6:	2b20      	cmp	r3, #32
 800f0e8:	dc46      	bgt.n	800f178 <UART_SetConfig+0x850>
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	db75      	blt.n	800f1da <UART_SetConfig+0x8b2>
 800f0ee:	3b02      	subs	r3, #2
 800f0f0:	2b1e      	cmp	r3, #30
 800f0f2:	d872      	bhi.n	800f1da <UART_SetConfig+0x8b2>
 800f0f4:	a201      	add	r2, pc, #4	; (adr r2, 800f0fc <UART_SetConfig+0x7d4>)
 800f0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fa:	bf00      	nop
 800f0fc:	0800f17f 	.word	0x0800f17f
 800f100:	0800f1db 	.word	0x0800f1db
 800f104:	0800f187 	.word	0x0800f187
 800f108:	0800f1db 	.word	0x0800f1db
 800f10c:	0800f1db 	.word	0x0800f1db
 800f110:	0800f1db 	.word	0x0800f1db
 800f114:	0800f197 	.word	0x0800f197
 800f118:	0800f1db 	.word	0x0800f1db
 800f11c:	0800f1db 	.word	0x0800f1db
 800f120:	0800f1db 	.word	0x0800f1db
 800f124:	0800f1db 	.word	0x0800f1db
 800f128:	0800f1db 	.word	0x0800f1db
 800f12c:	0800f1db 	.word	0x0800f1db
 800f130:	0800f1db 	.word	0x0800f1db
 800f134:	0800f1a7 	.word	0x0800f1a7
 800f138:	0800f1db 	.word	0x0800f1db
 800f13c:	0800f1db 	.word	0x0800f1db
 800f140:	0800f1db 	.word	0x0800f1db
 800f144:	0800f1db 	.word	0x0800f1db
 800f148:	0800f1db 	.word	0x0800f1db
 800f14c:	0800f1db 	.word	0x0800f1db
 800f150:	0800f1db 	.word	0x0800f1db
 800f154:	0800f1db 	.word	0x0800f1db
 800f158:	0800f1db 	.word	0x0800f1db
 800f15c:	0800f1db 	.word	0x0800f1db
 800f160:	0800f1db 	.word	0x0800f1db
 800f164:	0800f1db 	.word	0x0800f1db
 800f168:	0800f1db 	.word	0x0800f1db
 800f16c:	0800f1db 	.word	0x0800f1db
 800f170:	0800f1db 	.word	0x0800f1db
 800f174:	0800f1cd 	.word	0x0800f1cd
 800f178:	2b40      	cmp	r3, #64	; 0x40
 800f17a:	d02a      	beq.n	800f1d2 <UART_SetConfig+0x8aa>
 800f17c:	e02d      	b.n	800f1da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f17e:	f7fc fcd5 	bl	800bb2c <HAL_RCCEx_GetD3PCLK1Freq>
 800f182:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f184:	e02f      	b.n	800f1e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fc fce4 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f194:	e027      	b.n	800f1e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f196:	f107 0318 	add.w	r3, r7, #24
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fc fe30 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1a4:	e01f      	b.n	800f1e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1a6:	4b21      	ldr	r3, [pc, #132]	; (800f22c <UART_SetConfig+0x904>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f003 0320 	and.w	r3, r3, #32
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d009      	beq.n	800f1c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1b2:	4b1e      	ldr	r3, [pc, #120]	; (800f22c <UART_SetConfig+0x904>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	08db      	lsrs	r3, r3, #3
 800f1b8:	f003 0303 	and.w	r3, r3, #3
 800f1bc:	4a1d      	ldr	r2, [pc, #116]	; (800f234 <UART_SetConfig+0x90c>)
 800f1be:	fa22 f303 	lsr.w	r3, r2, r3
 800f1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1c4:	e00f      	b.n	800f1e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f1c6:	4b1b      	ldr	r3, [pc, #108]	; (800f234 <UART_SetConfig+0x90c>)
 800f1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ca:	e00c      	b.n	800f1e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1cc:	4b1a      	ldr	r3, [pc, #104]	; (800f238 <UART_SetConfig+0x910>)
 800f1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d0:	e009      	b.n	800f1e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d8:	e005      	b.n	800f1e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	f000 81ee 	beq.w	800f5ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f2:	4a12      	ldr	r2, [pc, #72]	; (800f23c <UART_SetConfig+0x914>)
 800f1f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f200:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	685a      	ldr	r2, [r3, #4]
 800f206:	4613      	mov	r3, r2
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	4413      	add	r3, r2
 800f20c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f20e:	429a      	cmp	r2, r3
 800f210:	d305      	bcc.n	800f21e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d910      	bls.n	800f240 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f224:	e1d1      	b.n	800f5ca <UART_SetConfig+0xca2>
 800f226:	bf00      	nop
 800f228:	40011c00 	.word	0x40011c00
 800f22c:	58024400 	.word	0x58024400
 800f230:	58000c00 	.word	0x58000c00
 800f234:	03d09000 	.word	0x03d09000
 800f238:	003d0900 	.word	0x003d0900
 800f23c:	08011368 	.word	0x08011368
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f242:	2200      	movs	r2, #0
 800f244:	60bb      	str	r3, [r7, #8]
 800f246:	60fa      	str	r2, [r7, #12]
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24c:	4ac0      	ldr	r2, [pc, #768]	; (800f550 <UART_SetConfig+0xc28>)
 800f24e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f252:	b29b      	uxth	r3, r3
 800f254:	2200      	movs	r2, #0
 800f256:	603b      	str	r3, [r7, #0]
 800f258:	607a      	str	r2, [r7, #4]
 800f25a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f25e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f262:	f7f1 fa19 	bl	8000698 <__aeabi_uldivmod>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4610      	mov	r0, r2
 800f26c:	4619      	mov	r1, r3
 800f26e:	f04f 0200 	mov.w	r2, #0
 800f272:	f04f 0300 	mov.w	r3, #0
 800f276:	020b      	lsls	r3, r1, #8
 800f278:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f27c:	0202      	lsls	r2, r0, #8
 800f27e:	6979      	ldr	r1, [r7, #20]
 800f280:	6849      	ldr	r1, [r1, #4]
 800f282:	0849      	lsrs	r1, r1, #1
 800f284:	2000      	movs	r0, #0
 800f286:	460c      	mov	r4, r1
 800f288:	4605      	mov	r5, r0
 800f28a:	eb12 0804 	adds.w	r8, r2, r4
 800f28e:	eb43 0905 	adc.w	r9, r3, r5
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	469a      	mov	sl, r3
 800f29a:	4693      	mov	fp, r2
 800f29c:	4652      	mov	r2, sl
 800f29e:	465b      	mov	r3, fp
 800f2a0:	4640      	mov	r0, r8
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	f7f1 f9f8 	bl	8000698 <__aeabi_uldivmod>
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2b6:	d308      	bcc.n	800f2ca <UART_SetConfig+0x9a2>
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2be:	d204      	bcs.n	800f2ca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2c6:	60da      	str	r2, [r3, #12]
 800f2c8:	e17f      	b.n	800f5ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2d0:	e17b      	b.n	800f5ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	69db      	ldr	r3, [r3, #28]
 800f2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2da:	f040 80bd 	bne.w	800f458 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f2de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2e2:	2b20      	cmp	r3, #32
 800f2e4:	dc48      	bgt.n	800f378 <UART_SetConfig+0xa50>
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	db7b      	blt.n	800f3e2 <UART_SetConfig+0xaba>
 800f2ea:	2b20      	cmp	r3, #32
 800f2ec:	d879      	bhi.n	800f3e2 <UART_SetConfig+0xaba>
 800f2ee:	a201      	add	r2, pc, #4	; (adr r2, 800f2f4 <UART_SetConfig+0x9cc>)
 800f2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f4:	0800f37f 	.word	0x0800f37f
 800f2f8:	0800f387 	.word	0x0800f387
 800f2fc:	0800f3e3 	.word	0x0800f3e3
 800f300:	0800f3e3 	.word	0x0800f3e3
 800f304:	0800f38f 	.word	0x0800f38f
 800f308:	0800f3e3 	.word	0x0800f3e3
 800f30c:	0800f3e3 	.word	0x0800f3e3
 800f310:	0800f3e3 	.word	0x0800f3e3
 800f314:	0800f39f 	.word	0x0800f39f
 800f318:	0800f3e3 	.word	0x0800f3e3
 800f31c:	0800f3e3 	.word	0x0800f3e3
 800f320:	0800f3e3 	.word	0x0800f3e3
 800f324:	0800f3e3 	.word	0x0800f3e3
 800f328:	0800f3e3 	.word	0x0800f3e3
 800f32c:	0800f3e3 	.word	0x0800f3e3
 800f330:	0800f3e3 	.word	0x0800f3e3
 800f334:	0800f3af 	.word	0x0800f3af
 800f338:	0800f3e3 	.word	0x0800f3e3
 800f33c:	0800f3e3 	.word	0x0800f3e3
 800f340:	0800f3e3 	.word	0x0800f3e3
 800f344:	0800f3e3 	.word	0x0800f3e3
 800f348:	0800f3e3 	.word	0x0800f3e3
 800f34c:	0800f3e3 	.word	0x0800f3e3
 800f350:	0800f3e3 	.word	0x0800f3e3
 800f354:	0800f3e3 	.word	0x0800f3e3
 800f358:	0800f3e3 	.word	0x0800f3e3
 800f35c:	0800f3e3 	.word	0x0800f3e3
 800f360:	0800f3e3 	.word	0x0800f3e3
 800f364:	0800f3e3 	.word	0x0800f3e3
 800f368:	0800f3e3 	.word	0x0800f3e3
 800f36c:	0800f3e3 	.word	0x0800f3e3
 800f370:	0800f3e3 	.word	0x0800f3e3
 800f374:	0800f3d5 	.word	0x0800f3d5
 800f378:	2b40      	cmp	r3, #64	; 0x40
 800f37a:	d02e      	beq.n	800f3da <UART_SetConfig+0xab2>
 800f37c:	e031      	b.n	800f3e2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f37e:	f7fb fcaf 	bl	800ace0 <HAL_RCC_GetPCLK1Freq>
 800f382:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f384:	e033      	b.n	800f3ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f386:	f7fb fcc1 	bl	800ad0c <HAL_RCC_GetPCLK2Freq>
 800f38a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f38c:	e02f      	b.n	800f3ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f38e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f392:	4618      	mov	r0, r3
 800f394:	f7fc fbe0 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f39c:	e027      	b.n	800f3ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f39e:	f107 0318 	add.w	r3, r7, #24
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fc fd2c 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3ac:	e01f      	b.n	800f3ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3ae:	4b69      	ldr	r3, [pc, #420]	; (800f554 <UART_SetConfig+0xc2c>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f003 0320 	and.w	r3, r3, #32
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d009      	beq.n	800f3ce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3ba:	4b66      	ldr	r3, [pc, #408]	; (800f554 <UART_SetConfig+0xc2c>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	08db      	lsrs	r3, r3, #3
 800f3c0:	f003 0303 	and.w	r3, r3, #3
 800f3c4:	4a64      	ldr	r2, [pc, #400]	; (800f558 <UART_SetConfig+0xc30>)
 800f3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3cc:	e00f      	b.n	800f3ee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f3ce:	4b62      	ldr	r3, [pc, #392]	; (800f558 <UART_SetConfig+0xc30>)
 800f3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3d2:	e00c      	b.n	800f3ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3d4:	4b61      	ldr	r3, [pc, #388]	; (800f55c <UART_SetConfig+0xc34>)
 800f3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3d8:	e009      	b.n	800f3ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e0:	e005      	b.n	800f3ee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f3ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f000 80ea 	beq.w	800f5ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3fa:	4a55      	ldr	r2, [pc, #340]	; (800f550 <UART_SetConfig+0xc28>)
 800f3fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f400:	461a      	mov	r2, r3
 800f402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f404:	fbb3 f3f2 	udiv	r3, r3, r2
 800f408:	005a      	lsls	r2, r3, #1
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	085b      	lsrs	r3, r3, #1
 800f410:	441a      	add	r2, r3
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	fbb2 f3f3 	udiv	r3, r2, r3
 800f41a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41e:	2b0f      	cmp	r3, #15
 800f420:	d916      	bls.n	800f450 <UART_SetConfig+0xb28>
 800f422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f428:	d212      	bcs.n	800f450 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	f023 030f 	bic.w	r3, r3, #15
 800f432:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f436:	085b      	lsrs	r3, r3, #1
 800f438:	b29b      	uxth	r3, r3
 800f43a:	f003 0307 	and.w	r3, r3, #7
 800f43e:	b29a      	uxth	r2, r3
 800f440:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f442:	4313      	orrs	r3, r2
 800f444:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f44c:	60da      	str	r2, [r3, #12]
 800f44e:	e0bc      	b.n	800f5ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f450:	2301      	movs	r3, #1
 800f452:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f456:	e0b8      	b.n	800f5ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f458:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f45c:	2b20      	cmp	r3, #32
 800f45e:	dc4b      	bgt.n	800f4f8 <UART_SetConfig+0xbd0>
 800f460:	2b00      	cmp	r3, #0
 800f462:	f2c0 8087 	blt.w	800f574 <UART_SetConfig+0xc4c>
 800f466:	2b20      	cmp	r3, #32
 800f468:	f200 8084 	bhi.w	800f574 <UART_SetConfig+0xc4c>
 800f46c:	a201      	add	r2, pc, #4	; (adr r2, 800f474 <UART_SetConfig+0xb4c>)
 800f46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f472:	bf00      	nop
 800f474:	0800f4ff 	.word	0x0800f4ff
 800f478:	0800f507 	.word	0x0800f507
 800f47c:	0800f575 	.word	0x0800f575
 800f480:	0800f575 	.word	0x0800f575
 800f484:	0800f50f 	.word	0x0800f50f
 800f488:	0800f575 	.word	0x0800f575
 800f48c:	0800f575 	.word	0x0800f575
 800f490:	0800f575 	.word	0x0800f575
 800f494:	0800f51f 	.word	0x0800f51f
 800f498:	0800f575 	.word	0x0800f575
 800f49c:	0800f575 	.word	0x0800f575
 800f4a0:	0800f575 	.word	0x0800f575
 800f4a4:	0800f575 	.word	0x0800f575
 800f4a8:	0800f575 	.word	0x0800f575
 800f4ac:	0800f575 	.word	0x0800f575
 800f4b0:	0800f575 	.word	0x0800f575
 800f4b4:	0800f52f 	.word	0x0800f52f
 800f4b8:	0800f575 	.word	0x0800f575
 800f4bc:	0800f575 	.word	0x0800f575
 800f4c0:	0800f575 	.word	0x0800f575
 800f4c4:	0800f575 	.word	0x0800f575
 800f4c8:	0800f575 	.word	0x0800f575
 800f4cc:	0800f575 	.word	0x0800f575
 800f4d0:	0800f575 	.word	0x0800f575
 800f4d4:	0800f575 	.word	0x0800f575
 800f4d8:	0800f575 	.word	0x0800f575
 800f4dc:	0800f575 	.word	0x0800f575
 800f4e0:	0800f575 	.word	0x0800f575
 800f4e4:	0800f575 	.word	0x0800f575
 800f4e8:	0800f575 	.word	0x0800f575
 800f4ec:	0800f575 	.word	0x0800f575
 800f4f0:	0800f575 	.word	0x0800f575
 800f4f4:	0800f567 	.word	0x0800f567
 800f4f8:	2b40      	cmp	r3, #64	; 0x40
 800f4fa:	d037      	beq.n	800f56c <UART_SetConfig+0xc44>
 800f4fc:	e03a      	b.n	800f574 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4fe:	f7fb fbef 	bl	800ace0 <HAL_RCC_GetPCLK1Freq>
 800f502:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f504:	e03c      	b.n	800f580 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f506:	f7fb fc01 	bl	800ad0c <HAL_RCC_GetPCLK2Freq>
 800f50a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f50c:	e038      	b.n	800f580 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f50e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f512:	4618      	mov	r0, r3
 800f514:	f7fc fb20 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f51c:	e030      	b.n	800f580 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f51e:	f107 0318 	add.w	r3, r7, #24
 800f522:	4618      	mov	r0, r3
 800f524:	f7fc fc6c 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f52c:	e028      	b.n	800f580 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f52e:	4b09      	ldr	r3, [pc, #36]	; (800f554 <UART_SetConfig+0xc2c>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f003 0320 	and.w	r3, r3, #32
 800f536:	2b00      	cmp	r3, #0
 800f538:	d012      	beq.n	800f560 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f53a:	4b06      	ldr	r3, [pc, #24]	; (800f554 <UART_SetConfig+0xc2c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	08db      	lsrs	r3, r3, #3
 800f540:	f003 0303 	and.w	r3, r3, #3
 800f544:	4a04      	ldr	r2, [pc, #16]	; (800f558 <UART_SetConfig+0xc30>)
 800f546:	fa22 f303 	lsr.w	r3, r2, r3
 800f54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f54c:	e018      	b.n	800f580 <UART_SetConfig+0xc58>
 800f54e:	bf00      	nop
 800f550:	08011368 	.word	0x08011368
 800f554:	58024400 	.word	0x58024400
 800f558:	03d09000 	.word	0x03d09000
 800f55c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f560:	4b24      	ldr	r3, [pc, #144]	; (800f5f4 <UART_SetConfig+0xccc>)
 800f562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f564:	e00c      	b.n	800f580 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f566:	4b24      	ldr	r3, [pc, #144]	; (800f5f8 <UART_SetConfig+0xcd0>)
 800f568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f56a:	e009      	b.n	800f580 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f56c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f572:	e005      	b.n	800f580 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f574:	2300      	movs	r3, #0
 800f576:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f578:	2301      	movs	r3, #1
 800f57a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f57e:	bf00      	nop
    }

    if (pclk != 0U)
 800f580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f582:	2b00      	cmp	r3, #0
 800f584:	d021      	beq.n	800f5ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58a:	4a1c      	ldr	r2, [pc, #112]	; (800f5fc <UART_SetConfig+0xcd4>)
 800f58c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f590:	461a      	mov	r2, r3
 800f592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f594:	fbb3 f2f2 	udiv	r2, r3, r2
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	085b      	lsrs	r3, r3, #1
 800f59e:	441a      	add	r2, r3
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5a8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ac:	2b0f      	cmp	r3, #15
 800f5ae:	d909      	bls.n	800f5c4 <UART_SetConfig+0xc9c>
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5b6:	d205      	bcs.n	800f5c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	60da      	str	r2, [r3, #12]
 800f5c2:	e002      	b.n	800f5ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f5e6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3748      	adds	r7, #72	; 0x48
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5f4:	03d09000 	.word	0x03d09000
 800f5f8:	003d0900 	.word	0x003d0900
 800f5fc:	08011368 	.word	0x08011368

0800f600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f60c:	f003 0301 	and.w	r3, r3, #1
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00a      	beq.n	800f62a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	430a      	orrs	r2, r1
 800f628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f62e:	f003 0302 	and.w	r3, r3, #2
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00a      	beq.n	800f64c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	430a      	orrs	r2, r1
 800f64a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f650:	f003 0304 	and.w	r3, r3, #4
 800f654:	2b00      	cmp	r3, #0
 800f656:	d00a      	beq.n	800f66e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	430a      	orrs	r2, r1
 800f66c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f672:	f003 0308 	and.w	r3, r3, #8
 800f676:	2b00      	cmp	r3, #0
 800f678:	d00a      	beq.n	800f690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	430a      	orrs	r2, r1
 800f68e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f694:	f003 0310 	and.w	r3, r3, #16
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00a      	beq.n	800f6b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	689b      	ldr	r3, [r3, #8]
 800f6a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b6:	f003 0320 	and.w	r3, r3, #32
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00a      	beq.n	800f6d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	430a      	orrs	r2, r1
 800f6d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d01a      	beq.n	800f716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	430a      	orrs	r2, r1
 800f6f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6fe:	d10a      	bne.n	800f716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	430a      	orrs	r2, r1
 800f714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00a      	beq.n	800f738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	430a      	orrs	r2, r1
 800f736:	605a      	str	r2, [r3, #4]
  }
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af02      	add	r7, sp, #8
 800f74a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f754:	f7f7 fa28 	bl	8006ba8 <HAL_GetTick>
 800f758:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f003 0308 	and.w	r3, r3, #8
 800f764:	2b08      	cmp	r3, #8
 800f766:	d10e      	bne.n	800f786 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2200      	movs	r2, #0
 800f772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 f82f 	bl	800f7da <UART_WaitOnFlagUntilTimeout>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d001      	beq.n	800f786 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f782:	2303      	movs	r3, #3
 800f784:	e025      	b.n	800f7d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f003 0304 	and.w	r3, r3, #4
 800f790:	2b04      	cmp	r3, #4
 800f792:	d10e      	bne.n	800f7b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2200      	movs	r2, #0
 800f79e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 f819 	bl	800f7da <UART_WaitOnFlagUntilTimeout>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d001      	beq.n	800f7b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7ae:	2303      	movs	r3, #3
 800f7b0:	e00f      	b.n	800f7d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2220      	movs	r2, #32
 800f7b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2220      	movs	r2, #32
 800f7be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b09c      	sub	sp, #112	; 0x70
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	60f8      	str	r0, [r7, #12]
 800f7e2:	60b9      	str	r1, [r7, #8]
 800f7e4:	603b      	str	r3, [r7, #0]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7ea:	e0a9      	b.n	800f940 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f2:	f000 80a5 	beq.w	800f940 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7f6:	f7f7 f9d7 	bl	8006ba8 <HAL_GetTick>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f802:	429a      	cmp	r2, r3
 800f804:	d302      	bcc.n	800f80c <UART_WaitOnFlagUntilTimeout+0x32>
 800f806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d140      	bne.n	800f88e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f814:	e853 3f00 	ldrex	r3, [r3]
 800f818:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f81c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f820:	667b      	str	r3, [r7, #100]	; 0x64
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f82a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f82c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f830:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f832:	e841 2300 	strex	r3, r2, [r1]
 800f836:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d1e6      	bne.n	800f80c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	3308      	adds	r3, #8
 800f844:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f848:	e853 3f00 	ldrex	r3, [r3]
 800f84c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f850:	f023 0301 	bic.w	r3, r3, #1
 800f854:	663b      	str	r3, [r7, #96]	; 0x60
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	3308      	adds	r3, #8
 800f85c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f85e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f860:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f866:	e841 2300 	strex	r3, r2, [r1]
 800f86a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d1e5      	bne.n	800f83e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2220      	movs	r2, #32
 800f876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2220      	movs	r2, #32
 800f87e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2200      	movs	r2, #0
 800f886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f88a:	2303      	movs	r3, #3
 800f88c:	e069      	b.n	800f962 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 0304 	and.w	r3, r3, #4
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d051      	beq.n	800f940 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	69db      	ldr	r3, [r3, #28]
 800f8a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8aa:	d149      	bne.n	800f940 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	e853 3f00 	ldrex	r3, [r3]
 800f8c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f8d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8dc:	e841 2300 	strex	r3, r2, [r1]
 800f8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1e6      	bne.n	800f8b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	3308      	adds	r3, #8
 800f8ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	e853 3f00 	ldrex	r3, [r3]
 800f8f6:	613b      	str	r3, [r7, #16]
   return(result);
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	f023 0301 	bic.w	r3, r3, #1
 800f8fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	3308      	adds	r3, #8
 800f906:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f908:	623a      	str	r2, [r7, #32]
 800f90a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f90c:	69f9      	ldr	r1, [r7, #28]
 800f90e:	6a3a      	ldr	r2, [r7, #32]
 800f910:	e841 2300 	strex	r3, r2, [r1]
 800f914:	61bb      	str	r3, [r7, #24]
   return(result);
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1e5      	bne.n	800f8e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2220      	movs	r2, #32
 800f920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2220      	movs	r2, #32
 800f928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2220      	movs	r2, #32
 800f930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f93c:	2303      	movs	r3, #3
 800f93e:	e010      	b.n	800f962 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	69da      	ldr	r2, [r3, #28]
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	4013      	ands	r3, r2
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	bf0c      	ite	eq
 800f950:	2301      	moveq	r3, #1
 800f952:	2300      	movne	r3, #0
 800f954:	b2db      	uxtb	r3, r3
 800f956:	461a      	mov	r2, r3
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	f43f af46 	beq.w	800f7ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3770      	adds	r7, #112	; 0x70
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
	...

0800f96c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b096      	sub	sp, #88	; 0x58
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	4613      	mov	r3, r2
 800f978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	68ba      	ldr	r2, [r7, #8]
 800f97e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	88fa      	ldrh	r2, [r7, #6]
 800f984:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2222      	movs	r2, #34	; 0x22
 800f994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d02c      	beq.n	800f9fa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9a4:	4a42      	ldr	r2, [pc, #264]	; (800fab0 <UART_Start_Receive_DMA+0x144>)
 800f9a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9ac:	4a41      	ldr	r2, [pc, #260]	; (800fab4 <UART_Start_Receive_DMA+0x148>)
 800f9ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9b4:	4a40      	ldr	r2, [pc, #256]	; (800fab8 <UART_Start_Receive_DMA+0x14c>)
 800f9b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9bc:	2200      	movs	r2, #0
 800f9be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3324      	adds	r3, #36	; 0x24
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	88fb      	ldrh	r3, [r7, #6]
 800f9d4:	f7f7 fd82 	bl	80074dc <HAL_DMA_Start_IT>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00d      	beq.n	800f9fa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2210      	movs	r2, #16
 800f9e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2220      	movs	r2, #32
 800f9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e055      	b.n	800faa6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	691b      	ldr	r3, [r3, #16]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d018      	beq.n	800fa3c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa12:	e853 3f00 	ldrex	r3, [r3]
 800fa16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa1e:	657b      	str	r3, [r7, #84]	; 0x54
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	461a      	mov	r2, r3
 800fa26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa28:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa2a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa30:	e841 2300 	strex	r3, r2, [r1]
 800fa34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d1e6      	bne.n	800fa0a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	3308      	adds	r3, #8
 800fa42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa46:	e853 3f00 	ldrex	r3, [r3]
 800fa4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4e:	f043 0301 	orr.w	r3, r3, #1
 800fa52:	653b      	str	r3, [r7, #80]	; 0x50
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	3308      	adds	r3, #8
 800fa5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa5c:	637a      	str	r2, [r7, #52]	; 0x34
 800fa5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa64:	e841 2300 	strex	r3, r2, [r1]
 800fa68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d1e5      	bne.n	800fa3c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3308      	adds	r3, #8
 800fa76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	e853 3f00 	ldrex	r3, [r3]
 800fa7e:	613b      	str	r3, [r7, #16]
   return(result);
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	3308      	adds	r3, #8
 800fa8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa90:	623a      	str	r2, [r7, #32]
 800fa92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa94:	69f9      	ldr	r1, [r7, #28]
 800fa96:	6a3a      	ldr	r2, [r7, #32]
 800fa98:	e841 2300 	strex	r3, r2, [r1]
 800fa9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d1e5      	bne.n	800fa70 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3758      	adds	r7, #88	; 0x58
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	0800fcbf 	.word	0x0800fcbf
 800fab4:	0800fde1 	.word	0x0800fde1
 800fab8:	0800fe19 	.word	0x0800fe19

0800fabc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b08f      	sub	sp, #60	; 0x3c
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faca:	6a3b      	ldr	r3, [r7, #32]
 800facc:	e853 3f00 	ldrex	r3, [r3]
 800fad0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fad2:	69fb      	ldr	r3, [r7, #28]
 800fad4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fad8:	637b      	str	r3, [r7, #52]	; 0x34
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	461a      	mov	r2, r3
 800fae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fae4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faea:	e841 2300 	strex	r3, r2, [r1]
 800faee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1e6      	bne.n	800fac4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3308      	adds	r3, #8
 800fafc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	e853 3f00 	ldrex	r3, [r3]
 800fb04:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb0c:	633b      	str	r3, [r7, #48]	; 0x30
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb16:	61ba      	str	r2, [r7, #24]
 800fb18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1a:	6979      	ldr	r1, [r7, #20]
 800fb1c:	69ba      	ldr	r2, [r7, #24]
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	613b      	str	r3, [r7, #16]
   return(result);
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1e5      	bne.n	800faf6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2220      	movs	r2, #32
 800fb2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fb32:	bf00      	nop
 800fb34:	373c      	adds	r7, #60	; 0x3c
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
	...

0800fb40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b095      	sub	sp, #84	; 0x54
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb50:	e853 3f00 	ldrex	r3, [r3]
 800fb54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	461a      	mov	r2, r3
 800fb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb66:	643b      	str	r3, [r7, #64]	; 0x40
 800fb68:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb6e:	e841 2300 	strex	r3, r2, [r1]
 800fb72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1e6      	bne.n	800fb48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	3308      	adds	r3, #8
 800fb80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb82:	6a3b      	ldr	r3, [r7, #32]
 800fb84:	e853 3f00 	ldrex	r3, [r3]
 800fb88:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb8a:	69fa      	ldr	r2, [r7, #28]
 800fb8c:	4b1e      	ldr	r3, [pc, #120]	; (800fc08 <UART_EndRxTransfer+0xc8>)
 800fb8e:	4013      	ands	r3, r2
 800fb90:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	3308      	adds	r3, #8
 800fb98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fb9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba2:	e841 2300 	strex	r3, r2, [r1]
 800fba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1e5      	bne.n	800fb7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb2:	2b01      	cmp	r3, #1
 800fbb4:	d118      	bne.n	800fbe8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	e853 3f00 	ldrex	r3, [r3]
 800fbc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	f023 0310 	bic.w	r3, r3, #16
 800fbca:	647b      	str	r3, [r7, #68]	; 0x44
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd4:	61bb      	str	r3, [r7, #24]
 800fbd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd8:	6979      	ldr	r1, [r7, #20]
 800fbda:	69ba      	ldr	r2, [r7, #24]
 800fbdc:	e841 2300 	strex	r3, r2, [r1]
 800fbe0:	613b      	str	r3, [r7, #16]
   return(result);
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1e6      	bne.n	800fbb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2220      	movs	r2, #32
 800fbec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fbfc:	bf00      	nop
 800fbfe:	3754      	adds	r7, #84	; 0x54
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr
 800fc08:	effffffe 	.word	0xeffffffe

0800fc0c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b090      	sub	sp, #64	; 0x40
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc18:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	69db      	ldr	r3, [r3, #28]
 800fc1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc22:	d037      	beq.n	800fc94 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fc24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc26:	2200      	movs	r2, #0
 800fc28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	3308      	adds	r3, #8
 800fc32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	e853 3f00 	ldrex	r3, [r3]
 800fc3a:	623b      	str	r3, [r7, #32]
   return(result);
 800fc3c:	6a3b      	ldr	r3, [r7, #32]
 800fc3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc42:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3308      	adds	r3, #8
 800fc4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc4c:	633a      	str	r2, [r7, #48]	; 0x30
 800fc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc54:	e841 2300 	strex	r3, r2, [r1]
 800fc58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d1e5      	bne.n	800fc2c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	e853 3f00 	ldrex	r3, [r3]
 800fc6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc74:	637b      	str	r3, [r7, #52]	; 0x34
 800fc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc7e:	61fb      	str	r3, [r7, #28]
 800fc80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc82:	69b9      	ldr	r1, [r7, #24]
 800fc84:	69fa      	ldr	r2, [r7, #28]
 800fc86:	e841 2300 	strex	r3, r2, [r1]
 800fc8a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1e6      	bne.n	800fc60 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc92:	e002      	b.n	800fc9a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fc94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fc96:	f7f4 f827 	bl	8003ce8 <HAL_UART_TxCpltCallback>
}
 800fc9a:	bf00      	nop
 800fc9c:	3740      	adds	r7, #64	; 0x40
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b084      	sub	sp, #16
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f7fe fe0f 	bl	800e8d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcb6:	bf00      	nop
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b09c      	sub	sp, #112	; 0x70
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	69db      	ldr	r3, [r3, #28]
 800fcd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcd4:	d071      	beq.n	800fdba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fcd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcd8:	2200      	movs	r2, #0
 800fcda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fce6:	e853 3f00 	ldrex	r3, [r3]
 800fcea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcf2:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcfc:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcfe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd04:	e841 2300 	strex	r3, r2, [r1]
 800fd08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d1e6      	bne.n	800fcde <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	3308      	adds	r3, #8
 800fd16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1a:	e853 3f00 	ldrex	r3, [r3]
 800fd1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd22:	f023 0301 	bic.w	r3, r3, #1
 800fd26:	667b      	str	r3, [r7, #100]	; 0x64
 800fd28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd30:	647a      	str	r2, [r7, #68]	; 0x44
 800fd32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd38:	e841 2300 	strex	r3, r2, [r1]
 800fd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d1e5      	bne.n	800fd10 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	3308      	adds	r3, #8
 800fd4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	e853 3f00 	ldrex	r3, [r3]
 800fd52:	623b      	str	r3, [r7, #32]
   return(result);
 800fd54:	6a3b      	ldr	r3, [r7, #32]
 800fd56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd5a:	663b      	str	r3, [r7, #96]	; 0x60
 800fd5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3308      	adds	r3, #8
 800fd62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd64:	633a      	str	r2, [r7, #48]	; 0x30
 800fd66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd6c:	e841 2300 	strex	r3, r2, [r1]
 800fd70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d1e5      	bne.n	800fd44 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd7a:	2220      	movs	r2, #32
 800fd7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d118      	bne.n	800fdba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	e853 3f00 	ldrex	r3, [r3]
 800fd94:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f023 0310 	bic.w	r3, r3, #16
 800fd9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	461a      	mov	r2, r3
 800fda4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fda6:	61fb      	str	r3, [r7, #28]
 800fda8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdaa:	69b9      	ldr	r1, [r7, #24]
 800fdac:	69fa      	ldr	r2, [r7, #28]
 800fdae:	e841 2300 	strex	r3, r2, [r1]
 800fdb2:	617b      	str	r3, [r7, #20]
   return(result);
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d1e6      	bne.n	800fd88 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d107      	bne.n	800fdd2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdc8:	4619      	mov	r1, r3
 800fdca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fdcc:	f7fe fda0 	bl	800e910 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdd0:	e002      	b.n	800fdd8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fdd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fdd4:	f7f3 ff9a 	bl	8003d0c <HAL_UART_RxCpltCallback>
}
 800fdd8:	bf00      	nop
 800fdda:	3770      	adds	r7, #112	; 0x70
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d109      	bne.n	800fe0a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdfc:	085b      	lsrs	r3, r3, #1
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	4619      	mov	r1, r3
 800fe02:	68f8      	ldr	r0, [r7, #12]
 800fe04:	f7fe fd84 	bl	800e910 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe08:	e002      	b.n	800fe10 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f7fe fd6c 	bl	800e8e8 <HAL_UART_RxHalfCpltCallback>
}
 800fe10:	bf00      	nop
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe40:	2b80      	cmp	r3, #128	; 0x80
 800fe42:	d109      	bne.n	800fe58 <UART_DMAError+0x40>
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	2b21      	cmp	r3, #33	; 0x21
 800fe48:	d106      	bne.n	800fe58 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fe52:	6978      	ldr	r0, [r7, #20]
 800fe54:	f7ff fe32 	bl	800fabc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe62:	2b40      	cmp	r3, #64	; 0x40
 800fe64:	d109      	bne.n	800fe7a <UART_DMAError+0x62>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2b22      	cmp	r3, #34	; 0x22
 800fe6a:	d106      	bne.n	800fe7a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fe74:	6978      	ldr	r0, [r7, #20]
 800fe76:	f7ff fe63 	bl	800fb40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe80:	f043 0210 	orr.w	r2, r3, #16
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe8a:	6978      	ldr	r0, [r7, #20]
 800fe8c:	f7fe fd36 	bl	800e8fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe90:	bf00      	nop
 800fe92:	3718      	adds	r7, #24
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2200      	movs	r2, #0
 800feaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2200      	movs	r2, #0
 800feb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f7fe fd20 	bl	800e8fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800febc:	bf00      	nop
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b088      	sub	sp, #32
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	e853 3f00 	ldrex	r3, [r3]
 800fed8:	60bb      	str	r3, [r7, #8]
   return(result);
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fee0:	61fb      	str	r3, [r7, #28]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	461a      	mov	r2, r3
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	61bb      	str	r3, [r7, #24]
 800feec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feee:	6979      	ldr	r1, [r7, #20]
 800fef0:	69ba      	ldr	r2, [r7, #24]
 800fef2:	e841 2300 	strex	r3, r2, [r1]
 800fef6:	613b      	str	r3, [r7, #16]
   return(result);
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1e6      	bne.n	800fecc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2220      	movs	r2, #32
 800ff02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7f3 feeb 	bl	8003ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff12:	bf00      	nop
 800ff14:	3720      	adds	r7, #32
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}

0800ff1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff1a:	b480      	push	{r7}
 800ff1c:	b083      	sub	sp, #12
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff22:	bf00      	nop
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr

0800ff2e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff2e:	b480      	push	{r7}
 800ff30:	b083      	sub	sp, #12
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff36:	bf00      	nop
 800ff38:	370c      	adds	r7, #12
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr

0800ff42 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff42:	b480      	push	{r7}
 800ff44:	b083      	sub	sp, #12
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff4a:	bf00      	nop
 800ff4c:	370c      	adds	r7, #12
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff54:	4770      	bx	lr

0800ff56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff56:	b480      	push	{r7}
 800ff58:	b085      	sub	sp, #20
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d101      	bne.n	800ff6c <HAL_UARTEx_DisableFifoMode+0x16>
 800ff68:	2302      	movs	r3, #2
 800ff6a:	e027      	b.n	800ffbc <HAL_UARTEx_DisableFifoMode+0x66>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2224      	movs	r2, #36	; 0x24
 800ff78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f022 0201 	bic.w	r2, r2, #1
 800ff92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2220      	movs	r2, #32
 800ffae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3714      	adds	r7, #20
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d101      	bne.n	800ffe0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffdc:	2302      	movs	r3, #2
 800ffde:	e02d      	b.n	801003c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2224      	movs	r2, #36	; 0x24
 800ffec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f022 0201 	bic.w	r2, r2, #1
 8010006:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	430a      	orrs	r2, r1
 801001a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 f84f 	bl	80100c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68fa      	ldr	r2, [r7, #12]
 8010028:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2220      	movs	r2, #32
 801002e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2200      	movs	r2, #0
 8010036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801003a:	2300      	movs	r3, #0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3710      	adds	r7, #16
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010054:	2b01      	cmp	r3, #1
 8010056:	d101      	bne.n	801005c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010058:	2302      	movs	r3, #2
 801005a:	e02d      	b.n	80100b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2201      	movs	r2, #1
 8010060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2224      	movs	r2, #36	; 0x24
 8010068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f022 0201 	bic.w	r2, r2, #1
 8010082:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	689b      	ldr	r3, [r3, #8]
 801008a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	683a      	ldr	r2, [r7, #0]
 8010094:	430a      	orrs	r2, r1
 8010096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 f811 	bl	80100c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	68fa      	ldr	r2, [r7, #12]
 80100a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2220      	movs	r2, #32
 80100aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2200      	movs	r2, #0
 80100b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100b6:	2300      	movs	r3, #0
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3710      	adds	r7, #16
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b085      	sub	sp, #20
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d108      	bne.n	80100e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2201      	movs	r2, #1
 80100dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100e0:	e031      	b.n	8010146 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100e2:	2310      	movs	r3, #16
 80100e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100e6:	2310      	movs	r3, #16
 80100e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	0e5b      	lsrs	r3, r3, #25
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	f003 0307 	and.w	r3, r3, #7
 80100f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	0f5b      	lsrs	r3, r3, #29
 8010102:	b2db      	uxtb	r3, r3
 8010104:	f003 0307 	and.w	r3, r3, #7
 8010108:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801010a:	7bbb      	ldrb	r3, [r7, #14]
 801010c:	7b3a      	ldrb	r2, [r7, #12]
 801010e:	4911      	ldr	r1, [pc, #68]	; (8010154 <UARTEx_SetNbDataToProcess+0x94>)
 8010110:	5c8a      	ldrb	r2, [r1, r2]
 8010112:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010116:	7b3a      	ldrb	r2, [r7, #12]
 8010118:	490f      	ldr	r1, [pc, #60]	; (8010158 <UARTEx_SetNbDataToProcess+0x98>)
 801011a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801011c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010120:	b29a      	uxth	r2, r3
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010128:	7bfb      	ldrb	r3, [r7, #15]
 801012a:	7b7a      	ldrb	r2, [r7, #13]
 801012c:	4909      	ldr	r1, [pc, #36]	; (8010154 <UARTEx_SetNbDataToProcess+0x94>)
 801012e:	5c8a      	ldrb	r2, [r1, r2]
 8010130:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010134:	7b7a      	ldrb	r2, [r7, #13]
 8010136:	4908      	ldr	r1, [pc, #32]	; (8010158 <UARTEx_SetNbDataToProcess+0x98>)
 8010138:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801013a:	fb93 f3f2 	sdiv	r3, r3, r2
 801013e:	b29a      	uxth	r2, r3
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010146:	bf00      	nop
 8010148:	3714      	adds	r7, #20
 801014a:	46bd      	mov	sp, r7
 801014c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	08011380 	.word	0x08011380
 8010158:	08011388 	.word	0x08011388

0801015c <__cxa_pure_virtual>:
 801015c:	b508      	push	{r3, lr}
 801015e:	f000 f80d 	bl	801017c <_ZSt9terminatev>

08010162 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010162:	b508      	push	{r3, lr}
 8010164:	4780      	blx	r0
 8010166:	f000 fd93 	bl	8010c90 <abort>
	...

0801016c <_ZSt13get_terminatev>:
 801016c:	4b02      	ldr	r3, [pc, #8]	; (8010178 <_ZSt13get_terminatev+0xc>)
 801016e:	6818      	ldr	r0, [r3, #0]
 8010170:	f3bf 8f5b 	dmb	ish
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop
 8010178:	24000014 	.word	0x24000014

0801017c <_ZSt9terminatev>:
 801017c:	b508      	push	{r3, lr}
 801017e:	f7ff fff5 	bl	801016c <_ZSt13get_terminatev>
 8010182:	f7ff ffee 	bl	8010162 <_ZN10__cxxabiv111__terminateEPFvvE>

08010186 <checkint>:
 8010186:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801018a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801018e:	429a      	cmp	r2, r3
 8010190:	b570      	push	{r4, r5, r6, lr}
 8010192:	dd2a      	ble.n	80101ea <checkint+0x64>
 8010194:	f240 4333 	movw	r3, #1075	; 0x433
 8010198:	429a      	cmp	r2, r3
 801019a:	dc24      	bgt.n	80101e6 <checkint+0x60>
 801019c:	1a9b      	subs	r3, r3, r2
 801019e:	f1a3 0620 	sub.w	r6, r3, #32
 80101a2:	f04f 32ff 	mov.w	r2, #4294967295
 80101a6:	fa02 f403 	lsl.w	r4, r2, r3
 80101aa:	fa02 f606 	lsl.w	r6, r2, r6
 80101ae:	f1c3 0520 	rsb	r5, r3, #32
 80101b2:	fa22 f505 	lsr.w	r5, r2, r5
 80101b6:	4334      	orrs	r4, r6
 80101b8:	432c      	orrs	r4, r5
 80101ba:	409a      	lsls	r2, r3
 80101bc:	ea20 0202 	bic.w	r2, r0, r2
 80101c0:	ea21 0404 	bic.w	r4, r1, r4
 80101c4:	4322      	orrs	r2, r4
 80101c6:	f1a3 0420 	sub.w	r4, r3, #32
 80101ca:	f1c3 0220 	rsb	r2, r3, #32
 80101ce:	d10c      	bne.n	80101ea <checkint+0x64>
 80101d0:	40d8      	lsrs	r0, r3
 80101d2:	fa01 f302 	lsl.w	r3, r1, r2
 80101d6:	4318      	orrs	r0, r3
 80101d8:	40e1      	lsrs	r1, r4
 80101da:	4308      	orrs	r0, r1
 80101dc:	f000 0001 	and.w	r0, r0, #1
 80101e0:	f1d0 0002 	rsbs	r0, r0, #2
 80101e4:	bd70      	pop	{r4, r5, r6, pc}
 80101e6:	2002      	movs	r0, #2
 80101e8:	e7fc      	b.n	80101e4 <checkint+0x5e>
 80101ea:	2000      	movs	r0, #0
 80101ec:	e7fa      	b.n	80101e4 <checkint+0x5e>
	...

080101f0 <pow>:
 80101f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f4:	ee10 4a90 	vmov	r4, s1
 80101f8:	ed2d 8b0a 	vpush	{d8-d12}
 80101fc:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010200:	ee11 7a90 	vmov	r7, s3
 8010204:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010208:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801020c:	429a      	cmp	r2, r3
 801020e:	ee10 6a10 	vmov	r6, s0
 8010212:	ee11 0a10 	vmov	r0, s2
 8010216:	b086      	sub	sp, #24
 8010218:	46d4      	mov	ip, sl
 801021a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801021e:	d806      	bhi.n	801022e <pow+0x3e>
 8010220:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010224:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010228:	2b7f      	cmp	r3, #127	; 0x7f
 801022a:	f240 8156 	bls.w	80104da <pow+0x2ea>
 801022e:	1802      	adds	r2, r0, r0
 8010230:	eb47 0107 	adc.w	r1, r7, r7
 8010234:	f06f 0e01 	mvn.w	lr, #1
 8010238:	f112 39ff 	adds.w	r9, r2, #4294967295
 801023c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8010240:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010244:	45ce      	cmp	lr, r9
 8010246:	eb73 0808 	sbcs.w	r8, r3, r8
 801024a:	d23f      	bcs.n	80102cc <pow+0xdc>
 801024c:	ea52 0301 	orrs.w	r3, r2, r1
 8010250:	f04f 0300 	mov.w	r3, #0
 8010254:	d10c      	bne.n	8010270 <pow+0x80>
 8010256:	19b6      	adds	r6, r6, r6
 8010258:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801025c:	4164      	adcs	r4, r4
 801025e:	42b3      	cmp	r3, r6
 8010260:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010264:	41a3      	sbcs	r3, r4
 8010266:	f0c0 808c 	bcc.w	8010382 <pow+0x192>
 801026a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801026e:	e028      	b.n	80102c2 <pow+0xd2>
 8010270:	4da3      	ldr	r5, [pc, #652]	; (8010500 <pow+0x310>)
 8010272:	42ac      	cmp	r4, r5
 8010274:	bf08      	it	eq
 8010276:	429e      	cmpeq	r6, r3
 8010278:	d107      	bne.n	801028a <pow+0x9a>
 801027a:	1800      	adds	r0, r0, r0
 801027c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010280:	417f      	adcs	r7, r7
 8010282:	4283      	cmp	r3, r0
 8010284:	4b9f      	ldr	r3, [pc, #636]	; (8010504 <pow+0x314>)
 8010286:	41bb      	sbcs	r3, r7
 8010288:	e7ed      	b.n	8010266 <pow+0x76>
 801028a:	19b6      	adds	r6, r6, r6
 801028c:	489e      	ldr	r0, [pc, #632]	; (8010508 <pow+0x318>)
 801028e:	4164      	adcs	r4, r4
 8010290:	42b3      	cmp	r3, r6
 8010292:	eb70 0504 	sbcs.w	r5, r0, r4
 8010296:	d374      	bcc.n	8010382 <pow+0x192>
 8010298:	4281      	cmp	r1, r0
 801029a:	bf08      	it	eq
 801029c:	429a      	cmpeq	r2, r3
 801029e:	d170      	bne.n	8010382 <pow+0x192>
 80102a0:	4a9a      	ldr	r2, [pc, #616]	; (801050c <pow+0x31c>)
 80102a2:	4294      	cmp	r4, r2
 80102a4:	bf08      	it	eq
 80102a6:	429e      	cmpeq	r6, r3
 80102a8:	d0df      	beq.n	801026a <pow+0x7a>
 80102aa:	4294      	cmp	r4, r2
 80102ac:	ea6f 0707 	mvn.w	r7, r7
 80102b0:	bf34      	ite	cc
 80102b2:	2400      	movcc	r4, #0
 80102b4:	2401      	movcs	r4, #1
 80102b6:	0fff      	lsrs	r7, r7, #31
 80102b8:	42bc      	cmp	r4, r7
 80102ba:	f040 81d9 	bne.w	8010670 <pow+0x480>
 80102be:	ee21 0b01 	vmul.f64	d0, d1, d1
 80102c2:	b006      	add	sp, #24
 80102c4:	ecbd 8b0a 	vpop	{d8-d12}
 80102c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102cc:	eb16 0806 	adds.w	r8, r6, r6
 80102d0:	eb44 0904 	adc.w	r9, r4, r4
 80102d4:	f118 31ff 	adds.w	r1, r8, #4294967295
 80102d8:	f169 0200 	sbc.w	r2, r9, #0
 80102dc:	458e      	cmp	lr, r1
 80102de:	4193      	sbcs	r3, r2
 80102e0:	d223      	bcs.n	801032a <pow+0x13a>
 80102e2:	ee20 0b00 	vmul.f64	d0, d0, d0
 80102e6:	2c00      	cmp	r4, #0
 80102e8:	da12      	bge.n	8010310 <pow+0x120>
 80102ea:	4639      	mov	r1, r7
 80102ec:	f7ff ff4b 	bl	8010186 <checkint>
 80102f0:	2801      	cmp	r0, #1
 80102f2:	d10d      	bne.n	8010310 <pow+0x120>
 80102f4:	eeb1 0b40 	vneg.f64	d0, d0
 80102f8:	ea58 0309 	orrs.w	r3, r8, r9
 80102fc:	d10a      	bne.n	8010314 <pow+0x124>
 80102fe:	2f00      	cmp	r7, #0
 8010300:	dadf      	bge.n	80102c2 <pow+0xd2>
 8010302:	b006      	add	sp, #24
 8010304:	ecbd 8b0a 	vpop	{d8-d12}
 8010308:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801030c:	f000 bc74 	b.w	8010bf8 <__math_divzero>
 8010310:	2000      	movs	r0, #0
 8010312:	e7f1      	b.n	80102f8 <pow+0x108>
 8010314:	2f00      	cmp	r7, #0
 8010316:	dad4      	bge.n	80102c2 <pow+0xd2>
 8010318:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801031c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010320:	ed8d 7b00 	vstr	d7, [sp]
 8010324:	ed9d 0b00 	vldr	d0, [sp]
 8010328:	e7cb      	b.n	80102c2 <pow+0xd2>
 801032a:	2c00      	cmp	r4, #0
 801032c:	da2c      	bge.n	8010388 <pow+0x198>
 801032e:	4639      	mov	r1, r7
 8010330:	f7ff ff29 	bl	8010186 <checkint>
 8010334:	b930      	cbnz	r0, 8010344 <pow+0x154>
 8010336:	b006      	add	sp, #24
 8010338:	ecbd 8b0a 	vpop	{d8-d12}
 801033c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010340:	f000 bc72 	b.w	8010c28 <__math_invalid>
 8010344:	2801      	cmp	r0, #1
 8010346:	bf14      	ite	ne
 8010348:	2000      	movne	r0, #0
 801034a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801034e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010352:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010356:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801035a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801035e:	2b7f      	cmp	r3, #127	; 0x7f
 8010360:	d92d      	bls.n	80103be <pow+0x1ce>
 8010362:	4b67      	ldr	r3, [pc, #412]	; (8010500 <pow+0x310>)
 8010364:	2000      	movs	r0, #0
 8010366:	429c      	cmp	r4, r3
 8010368:	bf08      	it	eq
 801036a:	4286      	cmpeq	r6, r0
 801036c:	f43f af7d 	beq.w	801026a <pow+0x7a>
 8010370:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010374:	428a      	cmp	r2, r1
 8010376:	d80c      	bhi.n	8010392 <pow+0x1a2>
 8010378:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801037c:	42b0      	cmp	r0, r6
 801037e:	41a3      	sbcs	r3, r4
 8010380:	d204      	bcs.n	801038c <pow+0x19c>
 8010382:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010386:	e79c      	b.n	80102c2 <pow+0xd2>
 8010388:	2000      	movs	r0, #0
 801038a:	e7e4      	b.n	8010356 <pow+0x166>
 801038c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010390:	e797      	b.n	80102c2 <pow+0xd2>
 8010392:	2e01      	cmp	r6, #1
 8010394:	eb74 0303 	sbcs.w	r3, r4, r3
 8010398:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801039c:	bf34      	ite	cc
 801039e:	2301      	movcc	r3, #1
 80103a0:	2300      	movcs	r3, #0
 80103a2:	4295      	cmp	r5, r2
 80103a4:	bf8c      	ite	hi
 80103a6:	2500      	movhi	r5, #0
 80103a8:	2501      	movls	r5, #1
 80103aa:	42ab      	cmp	r3, r5
 80103ac:	f000 809d 	beq.w	80104ea <pow+0x2fa>
 80103b0:	b006      	add	sp, #24
 80103b2:	ecbd 8b0a 	vpop	{d8-d12}
 80103b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103ba:	f000 bc15 	b.w	8010be8 <__math_oflow>
 80103be:	f1bc 0f00 	cmp.w	ip, #0
 80103c2:	d10b      	bne.n	80103dc <pow+0x1ec>
 80103c4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80104f8 <pow+0x308>
 80103c8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80103cc:	ec53 2b17 	vmov	r2, r3, d7
 80103d0:	ee17 6a10 	vmov	r6, s14
 80103d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80103d8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80103dc:	4b4c      	ldr	r3, [pc, #304]	; (8010510 <pow+0x320>)
 80103de:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80103e2:	4423      	add	r3, r4
 80103e4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80103e8:	1519      	asrs	r1, r3, #20
 80103ea:	0d1b      	lsrs	r3, r3, #20
 80103ec:	051b      	lsls	r3, r3, #20
 80103ee:	eba4 0903 	sub.w	r9, r4, r3
 80103f2:	4b48      	ldr	r3, [pc, #288]	; (8010514 <pow+0x324>)
 80103f4:	ee04 1a10 	vmov	s8, r1
 80103f8:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 80103fc:	f1b6 0800 	subs.w	r8, r6, #0
 8010400:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010404:	ec49 8b15 	vmov	d5, r8, r9
 8010408:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801040c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010410:	ed93 7b00 	vldr	d7, [r3]
 8010414:	ed93 5b02 	vldr	d5, [r3, #8]
 8010418:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801041c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010420:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010424:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010428:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801042c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010430:	ed93 5b04 	vldr	d5, [r3, #16]
 8010434:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010438:	ee37 7b02 	vadd.f64	d7, d7, d2
 801043c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010440:	ed93 4b08 	vldr	d4, [r3, #32]
 8010444:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010448:	eeb0 9b40 	vmov.f64	d9, d0
 801044c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010450:	ed93 5b06 	vldr	d5, [r3, #24]
 8010454:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010458:	ee26 bb00 	vmul.f64	d11, d6, d0
 801045c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010460:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010464:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010468:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801046c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010470:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010474:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010478:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801047c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010480:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010484:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010488:	eea0 4b03 	vfma.f64	d4, d0, d3
 801048c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010490:	eeab ab05 	vfma.f64	d10, d11, d5
 8010494:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8010498:	ee21 7b06 	vmul.f64	d7, d1, d6
 801049c:	ee17 3a90 	vmov	r3, s15
 80104a0:	eeb0 5b47 	vmov.f64	d5, d7
 80104a4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80104a8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80104ac:	18b2      	adds	r2, r6, r2
 80104ae:	2a3e      	cmp	r2, #62	; 0x3e
 80104b0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80104b4:	ee38 8b46 	vsub.f64	d8, d8, d6
 80104b8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80104bc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80104c0:	d92b      	bls.n	801051a <pow+0x32a>
 80104c2:	2a00      	cmp	r2, #0
 80104c4:	da0b      	bge.n	80104de <pow+0x2ee>
 80104c6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80104ca:	ee37 0b00 	vadd.f64	d0, d7, d0
 80104ce:	2800      	cmp	r0, #0
 80104d0:	f43f aef7 	beq.w	80102c2 <pow+0xd2>
 80104d4:	eeb1 0b40 	vneg.f64	d0, d0
 80104d8:	e6f3      	b.n	80102c2 <pow+0xd2>
 80104da:	2000      	movs	r0, #0
 80104dc:	e77e      	b.n	80103dc <pow+0x1ec>
 80104de:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80104e2:	d919      	bls.n	8010518 <pow+0x328>
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f6bf af63 	bge.w	80103b0 <pow+0x1c0>
 80104ea:	b006      	add	sp, #24
 80104ec:	ecbd 8b0a 	vpop	{d8-d12}
 80104f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104f4:	f000 bb70 	b.w	8010bd8 <__math_uflow>
 80104f8:	00000000 	.word	0x00000000
 80104fc:	43300000 	.word	0x43300000
 8010500:	3ff00000 	.word	0x3ff00000
 8010504:	fff00000 	.word	0xfff00000
 8010508:	ffe00000 	.word	0xffe00000
 801050c:	7fe00000 	.word	0x7fe00000
 8010510:	c0196aab 	.word	0xc0196aab
 8010514:	08011390 	.word	0x08011390
 8010518:	2600      	movs	r6, #0
 801051a:	495d      	ldr	r1, [pc, #372]	; (8010690 <pow+0x4a0>)
 801051c:	ed91 4b02 	vldr	d4, [r1, #8]
 8010520:	ed91 3b00 	vldr	d3, [r1]
 8010524:	eeb0 6b44 	vmov.f64	d6, d4
 8010528:	eea7 6b03 	vfma.f64	d6, d7, d3
 801052c:	ee16 5a10 	vmov	r5, s12
 8010530:	ee36 6b44 	vsub.f64	d6, d6, d4
 8010534:	ed91 4b04 	vldr	d4, [r1, #16]
 8010538:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801053c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010540:	eeb0 0b47 	vmov.f64	d0, d7
 8010544:	ed91 7b06 	vldr	d7, [r1, #24]
 8010548:	18dc      	adds	r4, r3, r3
 801054a:	f104 030f 	add.w	r3, r4, #15
 801054e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8010552:	eea6 0b07 	vfma.f64	d0, d6, d7
 8010556:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801055a:	ee35 0b00 	vadd.f64	d0, d5, d0
 801055e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010562:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8010566:	ed91 5b08 	vldr	d5, [r1, #32]
 801056a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801056e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8010572:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010576:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801057a:	eea6 7b05 	vfma.f64	d7, d6, d5
 801057e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8010582:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8010586:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801058a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801058e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010592:	1940      	adds	r0, r0, r5
 8010594:	2700      	movs	r7, #0
 8010596:	eb17 020c 	adds.w	r2, r7, ip
 801059a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801059e:	eea6 7b05 	vfma.f64	d7, d6, d5
 80105a2:	2e00      	cmp	r6, #0
 80105a4:	d15f      	bne.n	8010666 <pow+0x476>
 80105a6:	42bd      	cmp	r5, r7
 80105a8:	db13      	blt.n	80105d2 <pow+0x3e2>
 80105aa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80105ae:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80105b2:	4610      	mov	r0, r2
 80105b4:	ec41 0b10 	vmov	d0, r0, r1
 80105b8:	eea7 0b00 	vfma.f64	d0, d7, d0
 80105bc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010678 <pow+0x488>
 80105c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80105c4:	b006      	add	sp, #24
 80105c6:	ecbd 8b0a 	vpop	{d8-d12}
 80105ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105ce:	f000 bb43 	b.w	8010c58 <__math_check_oflow>
 80105d2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80105d6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80105da:	4610      	mov	r0, r2
 80105dc:	ec41 0b15 	vmov	d5, r0, r1
 80105e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80105e4:	ee27 6b05 	vmul.f64	d6, d7, d5
 80105e8:	ee35 7b06 	vadd.f64	d7, d5, d6
 80105ec:	eeb0 3bc7 	vabs.f64	d3, d7
 80105f0:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80105f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010680 <pow+0x490>
 80105fc:	d52a      	bpl.n	8010654 <pow+0x464>
 80105fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010602:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801060e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8010612:	bf48      	it	mi
 8010614:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010618:	ee37 3b04 	vadd.f64	d3, d7, d4
 801061c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010620:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010624:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010628:	ee37 7b03 	vadd.f64	d7, d7, d3
 801062c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010638:	d104      	bne.n	8010644 <pow+0x454>
 801063a:	4632      	mov	r2, r6
 801063c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010640:	ec43 2b17 	vmov	d7, r2, r3
 8010644:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010648:	ed9d 6b02 	vldr	d6, [sp, #8]
 801064c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010650:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010654:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010658:	b006      	add	sp, #24
 801065a:	ecbd 8b0a 	vpop	{d8-d12}
 801065e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010662:	f000 baf0 	b.w	8010c46 <__math_check_uflow>
 8010666:	ec43 2b10 	vmov	d0, r2, r3
 801066a:	eea7 0b00 	vfma.f64	d0, d7, d0
 801066e:	e628      	b.n	80102c2 <pow+0xd2>
 8010670:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010688 <pow+0x498>
 8010674:	e625      	b.n	80102c2 <pow+0xd2>
 8010676:	bf00      	nop
 8010678:	00000000 	.word	0x00000000
 801067c:	7f000000 	.word	0x7f000000
 8010680:	00000000 	.word	0x00000000
 8010684:	00100000 	.word	0x00100000
	...
 8010690:	08012420 	.word	0x08012420
 8010694:	00000000 	.word	0x00000000

08010698 <atan>:
 8010698:	b538      	push	{r3, r4, r5, lr}
 801069a:	eeb0 7b40 	vmov.f64	d7, d0
 801069e:	ee17 5a90 	vmov	r5, s15
 80106a2:	4b73      	ldr	r3, [pc, #460]	; (8010870 <atan+0x1d8>)
 80106a4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80106a8:	429c      	cmp	r4, r3
 80106aa:	dd13      	ble.n	80106d4 <atan+0x3c>
 80106ac:	4b71      	ldr	r3, [pc, #452]	; (8010874 <atan+0x1dc>)
 80106ae:	429c      	cmp	r4, r3
 80106b0:	dc03      	bgt.n	80106ba <atan+0x22>
 80106b2:	d107      	bne.n	80106c4 <atan+0x2c>
 80106b4:	ee10 3a10 	vmov	r3, s0
 80106b8:	b123      	cbz	r3, 80106c4 <atan+0x2c>
 80106ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106be:	eeb0 0b47 	vmov.f64	d0, d7
 80106c2:	bd38      	pop	{r3, r4, r5, pc}
 80106c4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010800 <atan+0x168>
 80106c8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010808 <atan+0x170>
 80106cc:	2d00      	cmp	r5, #0
 80106ce:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80106d2:	e7f4      	b.n	80106be <atan+0x26>
 80106d4:	4b68      	ldr	r3, [pc, #416]	; (8010878 <atan+0x1e0>)
 80106d6:	429c      	cmp	r4, r3
 80106d8:	dc11      	bgt.n	80106fe <atan+0x66>
 80106da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80106de:	429c      	cmp	r4, r3
 80106e0:	dc0a      	bgt.n	80106f8 <atan+0x60>
 80106e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80106e6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8010810 <atan+0x178>
 80106ea:	ee30 6b06 	vadd.f64	d6, d0, d6
 80106ee:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80106f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f6:	dce2      	bgt.n	80106be <atan+0x26>
 80106f8:	f04f 33ff 	mov.w	r3, #4294967295
 80106fc:	e013      	b.n	8010726 <atan+0x8e>
 80106fe:	f000 f8c5 	bl	801088c <fabs>
 8010702:	4b5e      	ldr	r3, [pc, #376]	; (801087c <atan+0x1e4>)
 8010704:	429c      	cmp	r4, r3
 8010706:	dc4f      	bgt.n	80107a8 <atan+0x110>
 8010708:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801070c:	429c      	cmp	r4, r3
 801070e:	dc41      	bgt.n	8010794 <atan+0xfc>
 8010710:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010714:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010718:	2300      	movs	r3, #0
 801071a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801071e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010722:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010726:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010818 <atan+0x180>
 801072a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801072e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010732:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010820 <atan+0x188>
 8010736:	eea5 3b06 	vfma.f64	d3, d5, d6
 801073a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010828 <atan+0x190>
 801073e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010742:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010830 <atan+0x198>
 8010746:	eea6 3b05 	vfma.f64	d3, d6, d5
 801074a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010838 <atan+0x1a0>
 801074e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010752:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010840 <atan+0x1a8>
 8010756:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010848 <atan+0x1b0>
 801075a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801075e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010850 <atan+0x1b8>
 8010762:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010766:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010858 <atan+0x1c0>
 801076a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801076e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010860 <atan+0x1c8>
 8010772:	eea6 2b05 	vfma.f64	d2, d6, d5
 8010776:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010868 <atan+0x1d0>
 801077a:	1c5a      	adds	r2, r3, #1
 801077c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010780:	ee26 6b05 	vmul.f64	d6, d6, d5
 8010784:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010788:	ee27 6b06 	vmul.f64	d6, d7, d6
 801078c:	d121      	bne.n	80107d2 <atan+0x13a>
 801078e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010792:	e794      	b.n	80106be <atan+0x26>
 8010794:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010798:	2301      	movs	r3, #1
 801079a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801079e:	ee30 0b07 	vadd.f64	d0, d0, d7
 80107a2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80107a6:	e7be      	b.n	8010726 <atan+0x8e>
 80107a8:	4b35      	ldr	r3, [pc, #212]	; (8010880 <atan+0x1e8>)
 80107aa:	429c      	cmp	r4, r3
 80107ac:	da0b      	bge.n	80107c6 <atan+0x12e>
 80107ae:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80107b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80107b6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80107ba:	eea0 6b07 	vfma.f64	d6, d0, d7
 80107be:	2302      	movs	r3, #2
 80107c0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80107c4:	e7af      	b.n	8010726 <atan+0x8e>
 80107c6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80107ca:	2303      	movs	r3, #3
 80107cc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80107d0:	e7a9      	b.n	8010726 <atan+0x8e>
 80107d2:	4a2c      	ldr	r2, [pc, #176]	; (8010884 <atan+0x1ec>)
 80107d4:	492c      	ldr	r1, [pc, #176]	; (8010888 <atan+0x1f0>)
 80107d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80107da:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80107de:	ed93 5b00 	vldr	d5, [r3]
 80107e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80107ea:	ed92 6b00 	vldr	d6, [r2]
 80107ee:	2d00      	cmp	r5, #0
 80107f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80107f4:	bfb8      	it	lt
 80107f6:	eeb1 7b47 	vneglt.f64	d7, d7
 80107fa:	e760      	b.n	80106be <atan+0x26>
 80107fc:	f3af 8000 	nop.w
 8010800:	54442d18 	.word	0x54442d18
 8010804:	3ff921fb 	.word	0x3ff921fb
 8010808:	54442d18 	.word	0x54442d18
 801080c:	bff921fb 	.word	0xbff921fb
 8010810:	8800759c 	.word	0x8800759c
 8010814:	7e37e43c 	.word	0x7e37e43c
 8010818:	e322da11 	.word	0xe322da11
 801081c:	3f90ad3a 	.word	0x3f90ad3a
 8010820:	24760deb 	.word	0x24760deb
 8010824:	3fa97b4b 	.word	0x3fa97b4b
 8010828:	a0d03d51 	.word	0xa0d03d51
 801082c:	3fb10d66 	.word	0x3fb10d66
 8010830:	c54c206e 	.word	0xc54c206e
 8010834:	3fb745cd 	.word	0x3fb745cd
 8010838:	920083ff 	.word	0x920083ff
 801083c:	3fc24924 	.word	0x3fc24924
 8010840:	5555550d 	.word	0x5555550d
 8010844:	3fd55555 	.word	0x3fd55555
 8010848:	52defd9a 	.word	0x52defd9a
 801084c:	bfadde2d 	.word	0xbfadde2d
 8010850:	2c6a6c2f 	.word	0x2c6a6c2f
 8010854:	bfa2b444 	.word	0xbfa2b444
 8010858:	af749a6d 	.word	0xaf749a6d
 801085c:	bfb3b0f2 	.word	0xbfb3b0f2
 8010860:	fe231671 	.word	0xfe231671
 8010864:	bfbc71c6 	.word	0xbfbc71c6
 8010868:	9998ebc4 	.word	0x9998ebc4
 801086c:	bfc99999 	.word	0xbfc99999
 8010870:	440fffff 	.word	0x440fffff
 8010874:	7ff00000 	.word	0x7ff00000
 8010878:	3fdbffff 	.word	0x3fdbffff
 801087c:	3ff2ffff 	.word	0x3ff2ffff
 8010880:	40038000 	.word	0x40038000
 8010884:	080123d8 	.word	0x080123d8
 8010888:	080123f8 	.word	0x080123f8

0801088c <fabs>:
 801088c:	ec51 0b10 	vmov	r0, r1, d0
 8010890:	ee10 2a10 	vmov	r2, s0
 8010894:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010898:	ec43 2b10 	vmov	d0, r2, r3
 801089c:	4770      	bx	lr
	...

080108a0 <acos>:
 80108a0:	b508      	push	{r3, lr}
 80108a2:	ed2d 8b04 	vpush	{d8-d9}
 80108a6:	eeb0 8b40 	vmov.f64	d8, d0
 80108aa:	f000 f845 	bl	8010938 <__ieee754_acos>
 80108ae:	eeb4 8b48 	vcmp.f64	d8, d8
 80108b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b6:	eeb0 9b40 	vmov.f64	d9, d0
 80108ba:	d615      	bvs.n	80108e8 <acos+0x48>
 80108bc:	eeb0 0b48 	vmov.f64	d0, d8
 80108c0:	f7ff ffe4 	bl	801088c <fabs>
 80108c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80108c8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80108cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d0:	dd0a      	ble.n	80108e8 <acos+0x48>
 80108d2:	f000 f9e5 	bl	8010ca0 <__errno>
 80108d6:	ecbd 8b04 	vpop	{d8-d9}
 80108da:	2321      	movs	r3, #33	; 0x21
 80108dc:	6003      	str	r3, [r0, #0]
 80108de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80108e2:	4804      	ldr	r0, [pc, #16]	; (80108f4 <acos+0x54>)
 80108e4:	f000 b9cc 	b.w	8010c80 <nan>
 80108e8:	eeb0 0b49 	vmov.f64	d0, d9
 80108ec:	ecbd 8b04 	vpop	{d8-d9}
 80108f0:	bd08      	pop	{r3, pc}
 80108f2:	bf00      	nop
 80108f4:	08012418 	.word	0x08012418

080108f8 <sqrt>:
 80108f8:	b508      	push	{r3, lr}
 80108fa:	ed2d 8b04 	vpush	{d8-d9}
 80108fe:	eeb0 8b40 	vmov.f64	d8, d0
 8010902:	f000 f947 	bl	8010b94 <__ieee754_sqrt>
 8010906:	eeb4 8b48 	vcmp.f64	d8, d8
 801090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801090e:	d60c      	bvs.n	801092a <sqrt+0x32>
 8010910:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010930 <sqrt+0x38>
 8010914:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801091c:	d505      	bpl.n	801092a <sqrt+0x32>
 801091e:	f000 f9bf 	bl	8010ca0 <__errno>
 8010922:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010926:	2321      	movs	r3, #33	; 0x21
 8010928:	6003      	str	r3, [r0, #0]
 801092a:	ecbd 8b04 	vpop	{d8-d9}
 801092e:	bd08      	pop	{r3, pc}
	...

08010938 <__ieee754_acos>:
 8010938:	b500      	push	{lr}
 801093a:	ee10 2a90 	vmov	r2, s1
 801093e:	ed2d 8b10 	vpush	{d8-d15}
 8010942:	4991      	ldr	r1, [pc, #580]	; (8010b88 <__ieee754_acos+0x250>)
 8010944:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010948:	428b      	cmp	r3, r1
 801094a:	b087      	sub	sp, #28
 801094c:	dd18      	ble.n	8010980 <__ieee754_acos+0x48>
 801094e:	ee10 1a10 	vmov	r1, s0
 8010952:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010956:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801095a:	430b      	orrs	r3, r1
 801095c:	d10b      	bne.n	8010976 <__ieee754_acos+0x3e>
 801095e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8010b10 <__ieee754_acos+0x1d8>
 8010962:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 8010b18 <__ieee754_acos+0x1e0>
 8010966:	2a00      	cmp	r2, #0
 8010968:	fe30 0b07 	vselgt.f64	d0, d0, d7
 801096c:	b007      	add	sp, #28
 801096e:	ecbd 8b10 	vpop	{d8-d15}
 8010972:	f85d fb04 	ldr.w	pc, [sp], #4
 8010976:	ee30 8b40 	vsub.f64	d8, d0, d0
 801097a:	ee88 0b08 	vdiv.f64	d0, d8, d8
 801097e:	e7f5      	b.n	801096c <__ieee754_acos+0x34>
 8010980:	4982      	ldr	r1, [pc, #520]	; (8010b8c <__ieee754_acos+0x254>)
 8010982:	428b      	cmp	r3, r1
 8010984:	dc3c      	bgt.n	8010a00 <__ieee754_acos+0xc8>
 8010986:	4a82      	ldr	r2, [pc, #520]	; (8010b90 <__ieee754_acos+0x258>)
 8010988:	4293      	cmp	r3, r2
 801098a:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8010b20 <__ieee754_acos+0x1e8>
 801098e:	f340 80bc 	ble.w	8010b0a <__ieee754_acos+0x1d2>
 8010992:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010996:	ed9f 4b64 	vldr	d4, [pc, #400]	; 8010b28 <__ieee754_acos+0x1f0>
 801099a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010b30 <__ieee754_acos+0x1f8>
 801099e:	eea6 5b04 	vfma.f64	d5, d6, d4
 80109a2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b38 <__ieee754_acos+0x200>
 80109a6:	eea5 4b06 	vfma.f64	d4, d5, d6
 80109aa:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010b40 <__ieee754_acos+0x208>
 80109ae:	eea4 5b06 	vfma.f64	d5, d4, d6
 80109b2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b48 <__ieee754_acos+0x210>
 80109b6:	eea5 4b06 	vfma.f64	d4, d5, d6
 80109ba:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010b50 <__ieee754_acos+0x218>
 80109be:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8010b58 <__ieee754_acos+0x220>
 80109c2:	eea4 5b06 	vfma.f64	d5, d4, d6
 80109c6:	ee25 5b06 	vmul.f64	d5, d5, d6
 80109ca:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b60 <__ieee754_acos+0x228>
 80109ce:	eea6 3b04 	vfma.f64	d3, d6, d4
 80109d2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b68 <__ieee754_acos+0x230>
 80109d6:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8010b70 <__ieee754_acos+0x238>
 80109da:	eea3 4b06 	vfma.f64	d4, d3, d6
 80109de:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8010b78 <__ieee754_acos+0x240>
 80109e2:	eea4 3b06 	vfma.f64	d3, d4, d6
 80109e6:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80109ea:	eea3 4b06 	vfma.f64	d4, d3, d6
 80109ee:	ee85 6b04 	vdiv.f64	d6, d5, d4
 80109f2:	eea0 8b46 	vfms.f64	d8, d0, d6
 80109f6:	ee30 0b48 	vsub.f64	d0, d0, d8
 80109fa:	ee37 0b40 	vsub.f64	d0, d7, d0
 80109fe:	e7b5      	b.n	801096c <__ieee754_acos+0x34>
 8010a00:	2a00      	cmp	r2, #0
 8010a02:	ed9f eb49 	vldr	d14, [pc, #292]	; 8010b28 <__ieee754_acos+0x1f0>
 8010a06:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010a0a:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010a0e:	ed9f db48 	vldr	d13, [pc, #288]	; 8010b30 <__ieee754_acos+0x1f8>
 8010a12:	ed9f cb49 	vldr	d12, [pc, #292]	; 8010b38 <__ieee754_acos+0x200>
 8010a16:	ed9f bb4a 	vldr	d11, [pc, #296]	; 8010b40 <__ieee754_acos+0x208>
 8010a1a:	ed9f ab4b 	vldr	d10, [pc, #300]	; 8010b48 <__ieee754_acos+0x210>
 8010a1e:	ed9f fb4c 	vldr	d15, [pc, #304]	; 8010b50 <__ieee754_acos+0x218>
 8010a22:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010b58 <__ieee754_acos+0x220>
 8010a26:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8010b68 <__ieee754_acos+0x230>
 8010a2a:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8010b78 <__ieee754_acos+0x240>
 8010a2e:	da2a      	bge.n	8010a86 <__ieee754_acos+0x14e>
 8010a30:	ee30 0b09 	vadd.f64	d0, d0, d9
 8010a34:	ee20 0b08 	vmul.f64	d0, d0, d8
 8010a38:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8010b60 <__ieee754_acos+0x228>
 8010a3c:	eea0 db0e 	vfma.f64	d13, d0, d14
 8010a40:	eead cb00 	vfma.f64	d12, d13, d0
 8010a44:	eea0 3b07 	vfma.f64	d3, d0, d7
 8010a48:	eeac bb00 	vfma.f64	d11, d12, d0
 8010a4c:	eea3 2b00 	vfma.f64	d2, d3, d0
 8010a50:	eeab ab00 	vfma.f64	d10, d11, d0
 8010a54:	eea2 1b00 	vfma.f64	d1, d2, d0
 8010a58:	eeaa fb00 	vfma.f64	d15, d10, d0
 8010a5c:	eea1 9b00 	vfma.f64	d9, d1, d0
 8010a60:	ee2f fb00 	vmul.f64	d15, d15, d0
 8010a64:	f000 f896 	bl	8010b94 <__ieee754_sqrt>
 8010a68:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 8010a6c:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8010b80 <__ieee754_acos+0x248>
 8010a70:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010a74:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010a78:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8010b18 <__ieee754_acos+0x1e0>
 8010a7c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8010a80:	eea7 0b46 	vfms.f64	d0, d7, d6
 8010a84:	e772      	b.n	801096c <__ieee754_acos+0x34>
 8010a86:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010a8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010a8e:	eeb0 0b48 	vmov.f64	d0, d8
 8010a92:	ed8d 1b04 	vstr	d1, [sp, #16]
 8010a96:	ed8d 2b02 	vstr	d2, [sp, #8]
 8010a9a:	ed8d 3b00 	vstr	d3, [sp]
 8010a9e:	f000 f879 	bl	8010b94 <__ieee754_sqrt>
 8010aa2:	eeb0 5b48 	vmov.f64	d5, d8
 8010aa6:	eea8 db0e 	vfma.f64	d13, d8, d14
 8010aaa:	ec53 2b10 	vmov	r2, r3, d0
 8010aae:	eead cb08 	vfma.f64	d12, d13, d8
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	ec43 2b17 	vmov	d7, r2, r3
 8010ab8:	eeac bb08 	vfma.f64	d11, d12, d8
 8010abc:	ee30 6b07 	vadd.f64	d6, d0, d7
 8010ac0:	eea7 5b47 	vfms.f64	d5, d7, d7
 8010ac4:	ed9d 3b00 	vldr	d3, [sp]
 8010ac8:	ee85 4b06 	vdiv.f64	d4, d5, d6
 8010acc:	eeab ab08 	vfma.f64	d10, d11, d8
 8010ad0:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8010b60 <__ieee754_acos+0x228>
 8010ad4:	eeaa fb08 	vfma.f64	d15, d10, d8
 8010ad8:	ee2f fb08 	vmul.f64	d15, d15, d8
 8010adc:	ed9d 2b02 	vldr	d2, [sp, #8]
 8010ae0:	eea8 3b06 	vfma.f64	d3, d8, d6
 8010ae4:	eeb0 6b44 	vmov.f64	d6, d4
 8010ae8:	ed9d 1b04 	vldr	d1, [sp, #16]
 8010aec:	eea3 2b08 	vfma.f64	d2, d3, d8
 8010af0:	eea2 1b08 	vfma.f64	d1, d2, d8
 8010af4:	eea1 9b08 	vfma.f64	d9, d1, d8
 8010af8:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 8010afc:	eea0 6b05 	vfma.f64	d6, d0, d5
 8010b00:	ee37 0b06 	vadd.f64	d0, d7, d6
 8010b04:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010b08:	e730      	b.n	801096c <__ieee754_acos+0x34>
 8010b0a:	eeb0 0b47 	vmov.f64	d0, d7
 8010b0e:	e72d      	b.n	801096c <__ieee754_acos+0x34>
	...
 8010b18:	54442d18 	.word	0x54442d18
 8010b1c:	400921fb 	.word	0x400921fb
 8010b20:	54442d18 	.word	0x54442d18
 8010b24:	3ff921fb 	.word	0x3ff921fb
 8010b28:	0dfdf709 	.word	0x0dfdf709
 8010b2c:	3f023de1 	.word	0x3f023de1
 8010b30:	7501b288 	.word	0x7501b288
 8010b34:	3f49efe0 	.word	0x3f49efe0
 8010b38:	b5688f3b 	.word	0xb5688f3b
 8010b3c:	bfa48228 	.word	0xbfa48228
 8010b40:	0e884455 	.word	0x0e884455
 8010b44:	3fc9c155 	.word	0x3fc9c155
 8010b48:	03eb6f7d 	.word	0x03eb6f7d
 8010b4c:	bfd4d612 	.word	0xbfd4d612
 8010b50:	55555555 	.word	0x55555555
 8010b54:	3fc55555 	.word	0x3fc55555
 8010b58:	1b8d0159 	.word	0x1b8d0159
 8010b5c:	bfe6066c 	.word	0xbfe6066c
 8010b60:	b12e9282 	.word	0xb12e9282
 8010b64:	3fb3b8c5 	.word	0x3fb3b8c5
 8010b68:	9c598ac8 	.word	0x9c598ac8
 8010b6c:	40002ae5 	.word	0x40002ae5
 8010b70:	33145c07 	.word	0x33145c07
 8010b74:	3c91a626 	.word	0x3c91a626
 8010b78:	1c8a2d4b 	.word	0x1c8a2d4b
 8010b7c:	c0033a27 	.word	0xc0033a27
 8010b80:	33145c07 	.word	0x33145c07
 8010b84:	bc91a626 	.word	0xbc91a626
 8010b88:	3fefffff 	.word	0x3fefffff
 8010b8c:	3fdfffff 	.word	0x3fdfffff
 8010b90:	3c600000 	.word	0x3c600000

08010b94 <__ieee754_sqrt>:
 8010b94:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010b98:	4770      	bx	lr

08010b9a <with_errno>:
 8010b9a:	b513      	push	{r0, r1, r4, lr}
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	ed8d 0b00 	vstr	d0, [sp]
 8010ba2:	f000 f87d 	bl	8010ca0 <__errno>
 8010ba6:	ed9d 0b00 	vldr	d0, [sp]
 8010baa:	6004      	str	r4, [r0, #0]
 8010bac:	b002      	add	sp, #8
 8010bae:	bd10      	pop	{r4, pc}

08010bb0 <xflow>:
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	b158      	cbz	r0, 8010bcc <xflow+0x1c>
 8010bb4:	eeb1 7b40 	vneg.f64	d7, d0
 8010bb8:	ed8d 7b00 	vstr	d7, [sp]
 8010bbc:	ed9d 7b00 	vldr	d7, [sp]
 8010bc0:	2022      	movs	r0, #34	; 0x22
 8010bc2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010bc6:	b002      	add	sp, #8
 8010bc8:	f7ff bfe7 	b.w	8010b9a <with_errno>
 8010bcc:	eeb0 7b40 	vmov.f64	d7, d0
 8010bd0:	e7f2      	b.n	8010bb8 <xflow+0x8>
 8010bd2:	0000      	movs	r0, r0
 8010bd4:	0000      	movs	r0, r0
	...

08010bd8 <__math_uflow>:
 8010bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010be0 <__math_uflow+0x8>
 8010bdc:	f7ff bfe8 	b.w	8010bb0 <xflow>
 8010be0:	00000000 	.word	0x00000000
 8010be4:	10000000 	.word	0x10000000

08010be8 <__math_oflow>:
 8010be8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010bf0 <__math_oflow+0x8>
 8010bec:	f7ff bfe0 	b.w	8010bb0 <xflow>
 8010bf0:	00000000 	.word	0x00000000
 8010bf4:	70000000 	.word	0x70000000

08010bf8 <__math_divzero>:
 8010bf8:	b082      	sub	sp, #8
 8010bfa:	2800      	cmp	r0, #0
 8010bfc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010c00:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010c04:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010c08:	ed8d 7b00 	vstr	d7, [sp]
 8010c0c:	ed9d 0b00 	vldr	d0, [sp]
 8010c10:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010c20 <__math_divzero+0x28>
 8010c14:	2022      	movs	r0, #34	; 0x22
 8010c16:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010c1a:	b002      	add	sp, #8
 8010c1c:	f7ff bfbd 	b.w	8010b9a <with_errno>
	...

08010c28 <__math_invalid>:
 8010c28:	eeb0 7b40 	vmov.f64	d7, d0
 8010c2c:	eeb4 7b47 	vcmp.f64	d7, d7
 8010c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c34:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010c38:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010c3c:	d602      	bvs.n	8010c44 <__math_invalid+0x1c>
 8010c3e:	2021      	movs	r0, #33	; 0x21
 8010c40:	f7ff bfab 	b.w	8010b9a <with_errno>
 8010c44:	4770      	bx	lr

08010c46 <__math_check_uflow>:
 8010c46:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c4e:	d102      	bne.n	8010c56 <__math_check_uflow+0x10>
 8010c50:	2022      	movs	r0, #34	; 0x22
 8010c52:	f7ff bfa2 	b.w	8010b9a <with_errno>
 8010c56:	4770      	bx	lr

08010c58 <__math_check_oflow>:
 8010c58:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010c78 <__math_check_oflow+0x20>
 8010c5c:	eeb0 7bc0 	vabs.f64	d7, d0
 8010c60:	eeb4 7b46 	vcmp.f64	d7, d6
 8010c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c68:	dd02      	ble.n	8010c70 <__math_check_oflow+0x18>
 8010c6a:	2022      	movs	r0, #34	; 0x22
 8010c6c:	f7ff bf95 	b.w	8010b9a <with_errno>
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	f3af 8000 	nop.w
 8010c78:	ffffffff 	.word	0xffffffff
 8010c7c:	7fefffff 	.word	0x7fefffff

08010c80 <nan>:
 8010c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010c88 <nan+0x8>
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop
 8010c88:	00000000 	.word	0x00000000
 8010c8c:	7ff80000 	.word	0x7ff80000

08010c90 <abort>:
 8010c90:	b508      	push	{r3, lr}
 8010c92:	2006      	movs	r0, #6
 8010c94:	f000 f874 	bl	8010d80 <raise>
 8010c98:	2001      	movs	r0, #1
 8010c9a:	f7f5 fbe7 	bl	800646c <_exit>
	...

08010ca0 <__errno>:
 8010ca0:	4b01      	ldr	r3, [pc, #4]	; (8010ca8 <__errno+0x8>)
 8010ca2:	6818      	ldr	r0, [r3, #0]
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop
 8010ca8:	24000018 	.word	0x24000018

08010cac <__libc_init_array>:
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	4d0d      	ldr	r5, [pc, #52]	; (8010ce4 <__libc_init_array+0x38>)
 8010cb0:	4c0d      	ldr	r4, [pc, #52]	; (8010ce8 <__libc_init_array+0x3c>)
 8010cb2:	1b64      	subs	r4, r4, r5
 8010cb4:	10a4      	asrs	r4, r4, #2
 8010cb6:	2600      	movs	r6, #0
 8010cb8:	42a6      	cmp	r6, r4
 8010cba:	d109      	bne.n	8010cd0 <__libc_init_array+0x24>
 8010cbc:	4d0b      	ldr	r5, [pc, #44]	; (8010cec <__libc_init_array+0x40>)
 8010cbe:	4c0c      	ldr	r4, [pc, #48]	; (8010cf0 <__libc_init_array+0x44>)
 8010cc0:	f000 f9b0 	bl	8011024 <_init>
 8010cc4:	1b64      	subs	r4, r4, r5
 8010cc6:	10a4      	asrs	r4, r4, #2
 8010cc8:	2600      	movs	r6, #0
 8010cca:	42a6      	cmp	r6, r4
 8010ccc:	d105      	bne.n	8010cda <__libc_init_array+0x2e>
 8010cce:	bd70      	pop	{r4, r5, r6, pc}
 8010cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cd4:	4798      	blx	r3
 8010cd6:	3601      	adds	r6, #1
 8010cd8:	e7ee      	b.n	8010cb8 <__libc_init_array+0xc>
 8010cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cde:	4798      	blx	r3
 8010ce0:	3601      	adds	r6, #1
 8010ce2:	e7f2      	b.n	8010cca <__libc_init_array+0x1e>
 8010ce4:	08012c98 	.word	0x08012c98
 8010ce8:	08012c98 	.word	0x08012c98
 8010cec:	08012c98 	.word	0x08012c98
 8010cf0:	08012cac 	.word	0x08012cac

08010cf4 <memcpy>:
 8010cf4:	440a      	add	r2, r1
 8010cf6:	4291      	cmp	r1, r2
 8010cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8010cfc:	d100      	bne.n	8010d00 <memcpy+0xc>
 8010cfe:	4770      	bx	lr
 8010d00:	b510      	push	{r4, lr}
 8010d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d0a:	4291      	cmp	r1, r2
 8010d0c:	d1f9      	bne.n	8010d02 <memcpy+0xe>
 8010d0e:	bd10      	pop	{r4, pc}

08010d10 <memset>:
 8010d10:	4402      	add	r2, r0
 8010d12:	4603      	mov	r3, r0
 8010d14:	4293      	cmp	r3, r2
 8010d16:	d100      	bne.n	8010d1a <memset+0xa>
 8010d18:	4770      	bx	lr
 8010d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8010d1e:	e7f9      	b.n	8010d14 <memset+0x4>

08010d20 <realloc>:
 8010d20:	4b02      	ldr	r3, [pc, #8]	; (8010d2c <realloc+0xc>)
 8010d22:	460a      	mov	r2, r1
 8010d24:	4601      	mov	r1, r0
 8010d26:	6818      	ldr	r0, [r3, #0]
 8010d28:	f000 b8da 	b.w	8010ee0 <_realloc_r>
 8010d2c:	24000018 	.word	0x24000018

08010d30 <_raise_r>:
 8010d30:	291f      	cmp	r1, #31
 8010d32:	b538      	push	{r3, r4, r5, lr}
 8010d34:	4604      	mov	r4, r0
 8010d36:	460d      	mov	r5, r1
 8010d38:	d904      	bls.n	8010d44 <_raise_r+0x14>
 8010d3a:	2316      	movs	r3, #22
 8010d3c:	6003      	str	r3, [r0, #0]
 8010d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d42:	bd38      	pop	{r3, r4, r5, pc}
 8010d44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d46:	b112      	cbz	r2, 8010d4e <_raise_r+0x1e>
 8010d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d4c:	b94b      	cbnz	r3, 8010d62 <_raise_r+0x32>
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f000 f830 	bl	8010db4 <_getpid_r>
 8010d54:	462a      	mov	r2, r5
 8010d56:	4601      	mov	r1, r0
 8010d58:	4620      	mov	r0, r4
 8010d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d5e:	f000 b817 	b.w	8010d90 <_kill_r>
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d00a      	beq.n	8010d7c <_raise_r+0x4c>
 8010d66:	1c59      	adds	r1, r3, #1
 8010d68:	d103      	bne.n	8010d72 <_raise_r+0x42>
 8010d6a:	2316      	movs	r3, #22
 8010d6c:	6003      	str	r3, [r0, #0]
 8010d6e:	2001      	movs	r0, #1
 8010d70:	e7e7      	b.n	8010d42 <_raise_r+0x12>
 8010d72:	2400      	movs	r4, #0
 8010d74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d78:	4628      	mov	r0, r5
 8010d7a:	4798      	blx	r3
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	e7e0      	b.n	8010d42 <_raise_r+0x12>

08010d80 <raise>:
 8010d80:	4b02      	ldr	r3, [pc, #8]	; (8010d8c <raise+0xc>)
 8010d82:	4601      	mov	r1, r0
 8010d84:	6818      	ldr	r0, [r3, #0]
 8010d86:	f7ff bfd3 	b.w	8010d30 <_raise_r>
 8010d8a:	bf00      	nop
 8010d8c:	24000018 	.word	0x24000018

08010d90 <_kill_r>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	4d07      	ldr	r5, [pc, #28]	; (8010db0 <_kill_r+0x20>)
 8010d94:	2300      	movs	r3, #0
 8010d96:	4604      	mov	r4, r0
 8010d98:	4608      	mov	r0, r1
 8010d9a:	4611      	mov	r1, r2
 8010d9c:	602b      	str	r3, [r5, #0]
 8010d9e:	f7f5 fb55 	bl	800644c <_kill>
 8010da2:	1c43      	adds	r3, r0, #1
 8010da4:	d102      	bne.n	8010dac <_kill_r+0x1c>
 8010da6:	682b      	ldr	r3, [r5, #0]
 8010da8:	b103      	cbz	r3, 8010dac <_kill_r+0x1c>
 8010daa:	6023      	str	r3, [r4, #0]
 8010dac:	bd38      	pop	{r3, r4, r5, pc}
 8010dae:	bf00      	nop
 8010db0:	24001b18 	.word	0x24001b18

08010db4 <_getpid_r>:
 8010db4:	f7f5 bb42 	b.w	800643c <_getpid>

08010db8 <sbrk_aligned>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	4e0e      	ldr	r6, [pc, #56]	; (8010df4 <sbrk_aligned+0x3c>)
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	6831      	ldr	r1, [r6, #0]
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	b911      	cbnz	r1, 8010dca <sbrk_aligned+0x12>
 8010dc4:	f000 f8bc 	bl	8010f40 <_sbrk_r>
 8010dc8:	6030      	str	r0, [r6, #0]
 8010dca:	4621      	mov	r1, r4
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f000 f8b7 	bl	8010f40 <_sbrk_r>
 8010dd2:	1c43      	adds	r3, r0, #1
 8010dd4:	d00a      	beq.n	8010dec <sbrk_aligned+0x34>
 8010dd6:	1cc4      	adds	r4, r0, #3
 8010dd8:	f024 0403 	bic.w	r4, r4, #3
 8010ddc:	42a0      	cmp	r0, r4
 8010dde:	d007      	beq.n	8010df0 <sbrk_aligned+0x38>
 8010de0:	1a21      	subs	r1, r4, r0
 8010de2:	4628      	mov	r0, r5
 8010de4:	f000 f8ac 	bl	8010f40 <_sbrk_r>
 8010de8:	3001      	adds	r0, #1
 8010dea:	d101      	bne.n	8010df0 <sbrk_aligned+0x38>
 8010dec:	f04f 34ff 	mov.w	r4, #4294967295
 8010df0:	4620      	mov	r0, r4
 8010df2:	bd70      	pop	{r4, r5, r6, pc}
 8010df4:	24001b14 	.word	0x24001b14

08010df8 <_malloc_r>:
 8010df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfc:	1ccd      	adds	r5, r1, #3
 8010dfe:	f025 0503 	bic.w	r5, r5, #3
 8010e02:	3508      	adds	r5, #8
 8010e04:	2d0c      	cmp	r5, #12
 8010e06:	bf38      	it	cc
 8010e08:	250c      	movcc	r5, #12
 8010e0a:	2d00      	cmp	r5, #0
 8010e0c:	4607      	mov	r7, r0
 8010e0e:	db01      	blt.n	8010e14 <_malloc_r+0x1c>
 8010e10:	42a9      	cmp	r1, r5
 8010e12:	d905      	bls.n	8010e20 <_malloc_r+0x28>
 8010e14:	230c      	movs	r3, #12
 8010e16:	603b      	str	r3, [r7, #0]
 8010e18:	2600      	movs	r6, #0
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e20:	4e2e      	ldr	r6, [pc, #184]	; (8010edc <_malloc_r+0xe4>)
 8010e22:	f000 f89d 	bl	8010f60 <__malloc_lock>
 8010e26:	6833      	ldr	r3, [r6, #0]
 8010e28:	461c      	mov	r4, r3
 8010e2a:	bb34      	cbnz	r4, 8010e7a <_malloc_r+0x82>
 8010e2c:	4629      	mov	r1, r5
 8010e2e:	4638      	mov	r0, r7
 8010e30:	f7ff ffc2 	bl	8010db8 <sbrk_aligned>
 8010e34:	1c43      	adds	r3, r0, #1
 8010e36:	4604      	mov	r4, r0
 8010e38:	d14d      	bne.n	8010ed6 <_malloc_r+0xde>
 8010e3a:	6834      	ldr	r4, [r6, #0]
 8010e3c:	4626      	mov	r6, r4
 8010e3e:	2e00      	cmp	r6, #0
 8010e40:	d140      	bne.n	8010ec4 <_malloc_r+0xcc>
 8010e42:	6823      	ldr	r3, [r4, #0]
 8010e44:	4631      	mov	r1, r6
 8010e46:	4638      	mov	r0, r7
 8010e48:	eb04 0803 	add.w	r8, r4, r3
 8010e4c:	f000 f878 	bl	8010f40 <_sbrk_r>
 8010e50:	4580      	cmp	r8, r0
 8010e52:	d13a      	bne.n	8010eca <_malloc_r+0xd2>
 8010e54:	6821      	ldr	r1, [r4, #0]
 8010e56:	3503      	adds	r5, #3
 8010e58:	1a6d      	subs	r5, r5, r1
 8010e5a:	f025 0503 	bic.w	r5, r5, #3
 8010e5e:	3508      	adds	r5, #8
 8010e60:	2d0c      	cmp	r5, #12
 8010e62:	bf38      	it	cc
 8010e64:	250c      	movcc	r5, #12
 8010e66:	4629      	mov	r1, r5
 8010e68:	4638      	mov	r0, r7
 8010e6a:	f7ff ffa5 	bl	8010db8 <sbrk_aligned>
 8010e6e:	3001      	adds	r0, #1
 8010e70:	d02b      	beq.n	8010eca <_malloc_r+0xd2>
 8010e72:	6823      	ldr	r3, [r4, #0]
 8010e74:	442b      	add	r3, r5
 8010e76:	6023      	str	r3, [r4, #0]
 8010e78:	e00e      	b.n	8010e98 <_malloc_r+0xa0>
 8010e7a:	6822      	ldr	r2, [r4, #0]
 8010e7c:	1b52      	subs	r2, r2, r5
 8010e7e:	d41e      	bmi.n	8010ebe <_malloc_r+0xc6>
 8010e80:	2a0b      	cmp	r2, #11
 8010e82:	d916      	bls.n	8010eb2 <_malloc_r+0xba>
 8010e84:	1961      	adds	r1, r4, r5
 8010e86:	42a3      	cmp	r3, r4
 8010e88:	6025      	str	r5, [r4, #0]
 8010e8a:	bf18      	it	ne
 8010e8c:	6059      	strne	r1, [r3, #4]
 8010e8e:	6863      	ldr	r3, [r4, #4]
 8010e90:	bf08      	it	eq
 8010e92:	6031      	streq	r1, [r6, #0]
 8010e94:	5162      	str	r2, [r4, r5]
 8010e96:	604b      	str	r3, [r1, #4]
 8010e98:	4638      	mov	r0, r7
 8010e9a:	f104 060b 	add.w	r6, r4, #11
 8010e9e:	f000 f865 	bl	8010f6c <__malloc_unlock>
 8010ea2:	f026 0607 	bic.w	r6, r6, #7
 8010ea6:	1d23      	adds	r3, r4, #4
 8010ea8:	1af2      	subs	r2, r6, r3
 8010eaa:	d0b6      	beq.n	8010e1a <_malloc_r+0x22>
 8010eac:	1b9b      	subs	r3, r3, r6
 8010eae:	50a3      	str	r3, [r4, r2]
 8010eb0:	e7b3      	b.n	8010e1a <_malloc_r+0x22>
 8010eb2:	6862      	ldr	r2, [r4, #4]
 8010eb4:	42a3      	cmp	r3, r4
 8010eb6:	bf0c      	ite	eq
 8010eb8:	6032      	streq	r2, [r6, #0]
 8010eba:	605a      	strne	r2, [r3, #4]
 8010ebc:	e7ec      	b.n	8010e98 <_malloc_r+0xa0>
 8010ebe:	4623      	mov	r3, r4
 8010ec0:	6864      	ldr	r4, [r4, #4]
 8010ec2:	e7b2      	b.n	8010e2a <_malloc_r+0x32>
 8010ec4:	4634      	mov	r4, r6
 8010ec6:	6876      	ldr	r6, [r6, #4]
 8010ec8:	e7b9      	b.n	8010e3e <_malloc_r+0x46>
 8010eca:	230c      	movs	r3, #12
 8010ecc:	603b      	str	r3, [r7, #0]
 8010ece:	4638      	mov	r0, r7
 8010ed0:	f000 f84c 	bl	8010f6c <__malloc_unlock>
 8010ed4:	e7a1      	b.n	8010e1a <_malloc_r+0x22>
 8010ed6:	6025      	str	r5, [r4, #0]
 8010ed8:	e7de      	b.n	8010e98 <_malloc_r+0xa0>
 8010eda:	bf00      	nop
 8010edc:	24001b10 	.word	0x24001b10

08010ee0 <_realloc_r>:
 8010ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee4:	4680      	mov	r8, r0
 8010ee6:	4614      	mov	r4, r2
 8010ee8:	460e      	mov	r6, r1
 8010eea:	b921      	cbnz	r1, 8010ef6 <_realloc_r+0x16>
 8010eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef0:	4611      	mov	r1, r2
 8010ef2:	f7ff bf81 	b.w	8010df8 <_malloc_r>
 8010ef6:	b92a      	cbnz	r2, 8010f04 <_realloc_r+0x24>
 8010ef8:	f000 f83e 	bl	8010f78 <_free_r>
 8010efc:	4625      	mov	r5, r4
 8010efe:	4628      	mov	r0, r5
 8010f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f04:	f000 f884 	bl	8011010 <_malloc_usable_size_r>
 8010f08:	4284      	cmp	r4, r0
 8010f0a:	4607      	mov	r7, r0
 8010f0c:	d802      	bhi.n	8010f14 <_realloc_r+0x34>
 8010f0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f12:	d812      	bhi.n	8010f3a <_realloc_r+0x5a>
 8010f14:	4621      	mov	r1, r4
 8010f16:	4640      	mov	r0, r8
 8010f18:	f7ff ff6e 	bl	8010df8 <_malloc_r>
 8010f1c:	4605      	mov	r5, r0
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d0ed      	beq.n	8010efe <_realloc_r+0x1e>
 8010f22:	42bc      	cmp	r4, r7
 8010f24:	4622      	mov	r2, r4
 8010f26:	4631      	mov	r1, r6
 8010f28:	bf28      	it	cs
 8010f2a:	463a      	movcs	r2, r7
 8010f2c:	f7ff fee2 	bl	8010cf4 <memcpy>
 8010f30:	4631      	mov	r1, r6
 8010f32:	4640      	mov	r0, r8
 8010f34:	f000 f820 	bl	8010f78 <_free_r>
 8010f38:	e7e1      	b.n	8010efe <_realloc_r+0x1e>
 8010f3a:	4635      	mov	r5, r6
 8010f3c:	e7df      	b.n	8010efe <_realloc_r+0x1e>
	...

08010f40 <_sbrk_r>:
 8010f40:	b538      	push	{r3, r4, r5, lr}
 8010f42:	4d06      	ldr	r5, [pc, #24]	; (8010f5c <_sbrk_r+0x1c>)
 8010f44:	2300      	movs	r3, #0
 8010f46:	4604      	mov	r4, r0
 8010f48:	4608      	mov	r0, r1
 8010f4a:	602b      	str	r3, [r5, #0]
 8010f4c:	f7f5 fa98 	bl	8006480 <_sbrk>
 8010f50:	1c43      	adds	r3, r0, #1
 8010f52:	d102      	bne.n	8010f5a <_sbrk_r+0x1a>
 8010f54:	682b      	ldr	r3, [r5, #0]
 8010f56:	b103      	cbz	r3, 8010f5a <_sbrk_r+0x1a>
 8010f58:	6023      	str	r3, [r4, #0]
 8010f5a:	bd38      	pop	{r3, r4, r5, pc}
 8010f5c:	24001b18 	.word	0x24001b18

08010f60 <__malloc_lock>:
 8010f60:	4801      	ldr	r0, [pc, #4]	; (8010f68 <__malloc_lock+0x8>)
 8010f62:	f000 b85d 	b.w	8011020 <__retarget_lock_acquire_recursive>
 8010f66:	bf00      	nop
 8010f68:	24001b1c 	.word	0x24001b1c

08010f6c <__malloc_unlock>:
 8010f6c:	4801      	ldr	r0, [pc, #4]	; (8010f74 <__malloc_unlock+0x8>)
 8010f6e:	f000 b858 	b.w	8011022 <__retarget_lock_release_recursive>
 8010f72:	bf00      	nop
 8010f74:	24001b1c 	.word	0x24001b1c

08010f78 <_free_r>:
 8010f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f7a:	2900      	cmp	r1, #0
 8010f7c:	d044      	beq.n	8011008 <_free_r+0x90>
 8010f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f82:	9001      	str	r0, [sp, #4]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	f1a1 0404 	sub.w	r4, r1, #4
 8010f8a:	bfb8      	it	lt
 8010f8c:	18e4      	addlt	r4, r4, r3
 8010f8e:	f7ff ffe7 	bl	8010f60 <__malloc_lock>
 8010f92:	4a1e      	ldr	r2, [pc, #120]	; (801100c <_free_r+0x94>)
 8010f94:	9801      	ldr	r0, [sp, #4]
 8010f96:	6813      	ldr	r3, [r2, #0]
 8010f98:	b933      	cbnz	r3, 8010fa8 <_free_r+0x30>
 8010f9a:	6063      	str	r3, [r4, #4]
 8010f9c:	6014      	str	r4, [r2, #0]
 8010f9e:	b003      	add	sp, #12
 8010fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fa4:	f7ff bfe2 	b.w	8010f6c <__malloc_unlock>
 8010fa8:	42a3      	cmp	r3, r4
 8010faa:	d908      	bls.n	8010fbe <_free_r+0x46>
 8010fac:	6825      	ldr	r5, [r4, #0]
 8010fae:	1961      	adds	r1, r4, r5
 8010fb0:	428b      	cmp	r3, r1
 8010fb2:	bf01      	itttt	eq
 8010fb4:	6819      	ldreq	r1, [r3, #0]
 8010fb6:	685b      	ldreq	r3, [r3, #4]
 8010fb8:	1949      	addeq	r1, r1, r5
 8010fba:	6021      	streq	r1, [r4, #0]
 8010fbc:	e7ed      	b.n	8010f9a <_free_r+0x22>
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	b10b      	cbz	r3, 8010fc8 <_free_r+0x50>
 8010fc4:	42a3      	cmp	r3, r4
 8010fc6:	d9fa      	bls.n	8010fbe <_free_r+0x46>
 8010fc8:	6811      	ldr	r1, [r2, #0]
 8010fca:	1855      	adds	r5, r2, r1
 8010fcc:	42a5      	cmp	r5, r4
 8010fce:	d10b      	bne.n	8010fe8 <_free_r+0x70>
 8010fd0:	6824      	ldr	r4, [r4, #0]
 8010fd2:	4421      	add	r1, r4
 8010fd4:	1854      	adds	r4, r2, r1
 8010fd6:	42a3      	cmp	r3, r4
 8010fd8:	6011      	str	r1, [r2, #0]
 8010fda:	d1e0      	bne.n	8010f9e <_free_r+0x26>
 8010fdc:	681c      	ldr	r4, [r3, #0]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	6053      	str	r3, [r2, #4]
 8010fe2:	4421      	add	r1, r4
 8010fe4:	6011      	str	r1, [r2, #0]
 8010fe6:	e7da      	b.n	8010f9e <_free_r+0x26>
 8010fe8:	d902      	bls.n	8010ff0 <_free_r+0x78>
 8010fea:	230c      	movs	r3, #12
 8010fec:	6003      	str	r3, [r0, #0]
 8010fee:	e7d6      	b.n	8010f9e <_free_r+0x26>
 8010ff0:	6825      	ldr	r5, [r4, #0]
 8010ff2:	1961      	adds	r1, r4, r5
 8010ff4:	428b      	cmp	r3, r1
 8010ff6:	bf04      	itt	eq
 8010ff8:	6819      	ldreq	r1, [r3, #0]
 8010ffa:	685b      	ldreq	r3, [r3, #4]
 8010ffc:	6063      	str	r3, [r4, #4]
 8010ffe:	bf04      	itt	eq
 8011000:	1949      	addeq	r1, r1, r5
 8011002:	6021      	streq	r1, [r4, #0]
 8011004:	6054      	str	r4, [r2, #4]
 8011006:	e7ca      	b.n	8010f9e <_free_r+0x26>
 8011008:	b003      	add	sp, #12
 801100a:	bd30      	pop	{r4, r5, pc}
 801100c:	24001b10 	.word	0x24001b10

08011010 <_malloc_usable_size_r>:
 8011010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011014:	1f18      	subs	r0, r3, #4
 8011016:	2b00      	cmp	r3, #0
 8011018:	bfbc      	itt	lt
 801101a:	580b      	ldrlt	r3, [r1, r0]
 801101c:	18c0      	addlt	r0, r0, r3
 801101e:	4770      	bx	lr

08011020 <__retarget_lock_acquire_recursive>:
 8011020:	4770      	bx	lr

08011022 <__retarget_lock_release_recursive>:
 8011022:	4770      	bx	lr

08011024 <_init>:
 8011024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011026:	bf00      	nop
 8011028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801102a:	bc08      	pop	{r3}
 801102c:	469e      	mov	lr, r3
 801102e:	4770      	bx	lr

08011030 <_fini>:
 8011030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011032:	bf00      	nop
 8011034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011036:	bc08      	pop	{r3}
 8011038:	469e      	mov	lr, r3
 801103a:	4770      	bx	lr
