
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d74  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c88  08011048  08011048  00021048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012cd0  08012cd0  00022cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  08012cd8  08012cd8  00022cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012cec  08012cec  00022cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08012cf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000022bc  24000080  08012d6c  00030080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400233c  08012d6c  0003233c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003094b  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005121  00000000  00000000  000609f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016a0  00000000  00000000  00065b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001508  00000000  00000000  000671b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036ed6  00000000  00000000  000686c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021958  00000000  00000000  0009f596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001549fa  00000000  00000000  000c0eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002158e8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006618  00000000  00000000  00215938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801102c 	.word	0x0801102c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0801102c 	.word	0x0801102c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
//DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
//DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
//DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	4822      	ldr	r0, [pc, #136]	; (800070c <_Z13DC_motor_initv+0x90>)
 8000684:	f00c fad6 	bl	800cc34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <_Z13DC_motor_initv+0x90>)
 800068c:	f00c fad2 	bl	800cc34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	481f      	ldr	r0, [pc, #124]	; (8000710 <_Z13DC_motor_initv+0x94>)
 8000694:	f00c face 	bl	800cc34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	481d      	ldr	r0, [pc, #116]	; (8000710 <_Z13DC_motor_initv+0x94>)
 800069c:	f00c faca 	bl	800cc34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	481c      	ldr	r0, [pc, #112]	; (8000714 <_Z13DC_motor_initv+0x98>)
 80006a4:	f00c fac6 	bl	800cc34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	481a      	ldr	r0, [pc, #104]	; (8000714 <_Z13DC_motor_initv+0x98>)
 80006ac:	f00c fac2 	bl	800cc34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4819      	ldr	r0, [pc, #100]	; (8000718 <_Z13DC_motor_initv+0x9c>)
 80006b4:	f00c fabe 	bl	800cc34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	4817      	ldr	r0, [pc, #92]	; (8000718 <_Z13DC_motor_initv+0x9c>)
 80006bc:	f00c faba 	bl	800cc34 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c0:	2104      	movs	r1, #4
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <_Z13DC_motor_initv+0xa0>)
 80006c4:	f00c f8a8 	bl	800c818 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006c8:	2100      	movs	r1, #0
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <_Z13DC_motor_initv+0xa0>)
 80006cc:	f00c f8a4 	bl	800c818 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d0:	2104      	movs	r1, #4
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <_Z13DC_motor_initv+0xa4>)
 80006d4:	f00c f8a0 	bl	800c818 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006d8:	2100      	movs	r1, #0
 80006da:	4811      	ldr	r0, [pc, #68]	; (8000720 <_Z13DC_motor_initv+0xa4>)
 80006dc:	f00c f89c 	bl	800c818 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 80006e0:	2100      	movs	r1, #0
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <_Z13DC_motor_initv+0xa8>)
 80006e4:	f00b ff7c 	bl	800c5e0 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim7);
 80006e8:	480f      	ldr	r0, [pc, #60]	; (8000728 <_Z13DC_motor_initv+0xac>)
 80006ea:	f00b fe9b 	bl	800c424 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <_Z13DC_motor_initv+0xb0>)
 80006f0:	f00b fe98 	bl	800c424 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <_Z13DC_motor_initv+0xb4>)
 80006f6:	f00b fe95 	bl	800c424 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 80006fa:	480e      	ldr	r0, [pc, #56]	; (8000734 <_Z13DC_motor_initv+0xb8>)
 80006fc:	f00b fe92 	bl	800c424 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <_Z13DC_motor_initv+0xa8>)
 8000702:	f00b fe8f 	bl	800c424 <HAL_TIM_Base_Start_IT>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	24000280 	.word	0x24000280
 8000710:	24000364 	.word	0x24000364
 8000714:	240002cc 	.word	0x240002cc
 8000718:	24000318 	.word	0x24000318
 800071c:	24000448 	.word	0x24000448
 8000720:	2400052c 	.word	0x2400052c
 8000724:	24000578 	.word	0x24000578
 8000728:	240003b0 	.word	0x240003b0
 800072c:	240003fc 	.word	0x240003fc
 8000730:	24000494 	.word	0x24000494
 8000734:	240004e0 	.word	0x240004e0

08000738 <_ZN8DC_motorC1Edddddd>:

DC_motor::DC_motor(double p, double i, double d, double time, double res, double ratio){
 8000738:	b480      	push	{r7}
 800073a:	b08f      	sub	sp, #60	; 0x3c
 800073c:	af00      	add	r7, sp, #0
 800073e:	6378      	str	r0, [r7, #52]	; 0x34
 8000740:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000744:	ed87 1b08 	vstr	d1, [r7, #32]
 8000748:	ed87 2b06 	vstr	d2, [r7, #24]
 800074c:	ed87 3b04 	vstr	d3, [r7, #16]
 8000750:	ed87 4b02 	vstr	d4, [r7, #8]
 8000754:	ed87 5b00 	vstr	d5, [r7]
	this->kp = p;
 8000758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800075a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800075e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	this->ki = i;
 8000762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000764:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000768:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	this->kd = d;
 800076c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800076e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000772:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	this->time = time;
 8000776:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000778:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800077c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->res_encoder = res;
 8000780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000786:	e9c1 2300 	strd	r2, r3, [r1]
	this->sr_ratio = ratio;
 800078a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800078c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000790:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8000794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000796:	4618      	mov	r0, r3
 8000798:	373c      	adds	r7, #60	; 0x3c
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <_ZN8DC_motor10PIDControlEv>:
//	if(PID<-1) PID=-1;
//
//	return rps_now;
//}

void DC_motor::PIDControl(void){
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	rps_now = (double) CountNow / 4 / res_encoder / sr_ratio / time;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80007bc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed93 7b00 	vldr	d7, [r3]
 80007c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80007d0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007da:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	ed83 7b04 	vstr	d7, [r3, #16]
	error_total += error;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	ed93 6b06 	vldr	d6, [r3, #24]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	ed93 7b04 	vldr	d7, [r3, #16]
 8000806:	ee36 7b07 	vadd.f64	d7, d6, d7
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed83 7b06 	vstr	d7, [r3, #24]
	PWM = error*kp + error_total*ki + error_last*kd;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	ed93 6b04 	vldr	d6, [r3, #16]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800081c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	ed93 5b06 	vldr	d5, [r3, #24]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800082c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000830:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	ed93 5b08 	vldr	d5, [r3, #32]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000840:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000844:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	error_last = error;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000854:	6879      	ldr	r1, [r7, #4]
 8000856:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <_Z41__static_initialization_and_destruction_0ii>:
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d140      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087e:	4293      	cmp	r3, r2
 8000880:	d13b      	bne.n	80008fa <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(2700,0.5,0, 0.001,512,20.8);
 8000882:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000886:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800088a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800088e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000892:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000896:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8000928 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800089a:	482f      	ldr	r0, [pc, #188]	; (8000958 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800089c:	f7ff ff4c 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor fl(1700,0.5,0, 0.001,512,20.8);
 80008a0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008a4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008a8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008ac:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008b0:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80008b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8000930 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80008b8:	4828      	ldr	r0, [pc, #160]	; (800095c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80008ba:	f7ff ff3d 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor br(3800,0.6,0.002, 0.001,512,20.8);
 80008be:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008c2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008c6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008ca:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8000938 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80008ce:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8000940 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80008d2:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8000948 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80008d6:	4822      	ldr	r0, [pc, #136]	; (8000960 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80008d8:	f7ff ff2e 	bl	8000738 <_ZN8DC_motorC1Edddddd>
DC_motor bl(3200,0.5,0, 0.001,512,20.8);
 80008dc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000908 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008e0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000910 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008e4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000918 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008e8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000920 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80008ec:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80008f0:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8000950 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80008f6:	f7ff ff1f 	bl	8000738 <_ZN8DC_motorC1Edddddd>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	f3af 8000 	nop.w
 8000908:	cccccccd 	.word	0xcccccccd
 800090c:	4034cccc 	.word	0x4034cccc
 8000910:	00000000 	.word	0x00000000
 8000914:	40800000 	.word	0x40800000
 8000918:	d2f1a9fc 	.word	0xd2f1a9fc
 800091c:	3f50624d 	.word	0x3f50624d
	...
 800092c:	40a51800 	.word	0x40a51800
 8000930:	00000000 	.word	0x00000000
 8000934:	409a9000 	.word	0x409a9000
 8000938:	d2f1a9fc 	.word	0xd2f1a9fc
 800093c:	3f60624d 	.word	0x3f60624d
 8000940:	33333333 	.word	0x33333333
 8000944:	3fe33333 	.word	0x3fe33333
 8000948:	00000000 	.word	0x00000000
 800094c:	40adb000 	.word	0x40adb000
 8000950:	00000000 	.word	0x00000000
 8000954:	40a90000 	.word	0x40a90000
 8000958:	240000a0 	.word	0x240000a0
 800095c:	24000110 	.word	0x24000110
 8000960:	24000180 	.word	0x24000180
 8000964:	240001f0 	.word	0x240001f0

08000968 <_GLOBAL__sub_I_fr>:
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
 800096c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff ff79 	bl	8000868 <_Z41__static_initialization_and_destruction_0ii>
 8000976:	bd80      	pop	{r7, pc}

08000978 <_Z10debug_loopv>:
bool mecanum_debug = false;
bool intake_debug = false;
bool scara_debug = true;


void debug_loop(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <_Z10debug_loopv+0x30>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <_Z10debug_loopv+0x12>
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <_Z10debug_loopv+0x34>)
 8000986:	f000 fef1 	bl	800176c <_ZN7Mecanum3runEv>
		if(intake_debug) INTAKE::run();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <_Z10debug_loopv+0x38>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <_Z10debug_loopv+0x1e>
 8000992:	f000 f813 	bl	80009bc <_ZN6INTAKE3runEv>
		if(scara_debug) sc.run();
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_Z10debug_loopv+0x3c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0ee      	beq.n	800097c <_Z10debug_loopv+0x4>
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <_Z10debug_loopv+0x40>)
 80009a0:	f004 fa76 	bl	8004e90 <_ZN5SCARA3runEv>
		if(mecanum_debug) mecanum.run();
 80009a4:	e7ea      	b.n	800097c <_Z10debug_loopv+0x4>
 80009a6:	bf00      	nop
 80009a8:	24000261 	.word	0x24000261
 80009ac:	24000748 	.word	0x24000748
 80009b0:	24000262 	.word	0x24000262
 80009b4:	24000000 	.word	0x24000000
 80009b8:	24002240 	.word	0x24002240

080009bc <_ZN6INTAKE3runEv>:
namespace INTAKE{
	double tilt, stretch, suck;
}


void INTAKE::run(void){
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	 /*stretch*/
	    if (INTAKE::stretch == 0){
 80009c0:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 80009c2:	ed93 7b00 	vldr	d7, [r3]
 80009c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80009ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ce:	d10a      	bne.n	80009e6 <_ZN6INTAKE3runEv+0x2a>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4858      	ldr	r0, [pc, #352]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 80009d6:	f009 fa23 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4856      	ldr	r0, [pc, #344]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 80009e0:	f009 fa1e 	bl	8009e20 <HAL_GPIO_WritePin>
 80009e4:	e028      	b.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == -1){
 80009e6:	4b53      	ldr	r3, [pc, #332]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 80009e8:	ed93 7b00 	vldr	d7, [r3]
 80009ec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80009f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f8:	d10a      	bne.n	8000a10 <_ZN6INTAKE3runEv+0x54>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	484e      	ldr	r0, [pc, #312]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a00:	f009 fa0e 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	484b      	ldr	r0, [pc, #300]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a0a:	f009 fa09 	bl	8009e20 <HAL_GPIO_WritePin>
 8000a0e:	e013      	b.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    } else if (INTAKE::stretch == 1){
 8000a10:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <_ZN6INTAKE3runEv+0x178>)
 8000a12:	ed93 7b00 	vldr	d7, [r3]
 8000a16:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a1a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a22:	d109      	bne.n	8000a38 <_ZN6INTAKE3runEv+0x7c>
	    	HAL_GPIO_WritePin(STRETCH_INA_PORT, STRETCH_INA_PIN, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	4843      	ldr	r0, [pc, #268]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a2a:	f009 f9f9 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(STRETCH_INB_PORT, STRETCH_INB_PIN, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	4841      	ldr	r0, [pc, #260]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a34:	f009 f9f4 	bl	8009e20 <HAL_GPIO_WritePin>
	    }

	/*tilt*/
	    if (INTAKE::tilt == 0){
 8000a38:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a3a:	ed93 7b00 	vldr	d7, [r3]
 8000a3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a46:	d10b      	bne.n	8000a60 <_ZN6INTAKE3runEv+0xa4>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	483a      	ldr	r0, [pc, #232]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a50:	f009 f9e6 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	4839      	ldr	r0, [pc, #228]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000a5a:	f009 f9e1 	bl	8009e20 <HAL_GPIO_WritePin>
 8000a5e:	e02a      	b.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == 1){
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a62:	ed93 7b00 	vldr	d7, [r3]
 8000a66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a6a:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d10b      	bne.n	8000a8c <_ZN6INTAKE3runEv+0xd0>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	482f      	ldr	r0, [pc, #188]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000a7c:	f009 f9d0 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	482e      	ldr	r0, [pc, #184]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000a86:	f009 f9cb 	bl	8009e20 <HAL_GPIO_WritePin>
 8000a8a:	e014      	b.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    } else if (INTAKE::tilt == -1){
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <_ZN6INTAKE3runEv+0x180>)
 8000a8e:	ed93 7b00 	vldr	d7, [r3]
 8000a92:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000a96:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9e:	d10a      	bne.n	8000ab6 <_ZN6INTAKE3runEv+0xfa>
	    	HAL_GPIO_WritePin(TILT_INA_PORT, TILT_INA_PIN, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <_ZN6INTAKE3runEv+0x17c>)
 8000aa8:	f009 f9ba 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(TILT_INB_PORT, TILT_INB_PIN, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4823      	ldr	r0, [pc, #140]	; (8000b40 <_ZN6INTAKE3runEv+0x184>)
 8000ab2:	f009 f9b5 	bl	8009e20 <HAL_GPIO_WritePin>
	    }

    /*suck*/
	    if (INTAKE::suck == 0){
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000ab8:	ed93 7b00 	vldr	d7, [r3]
 8000abc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	d10a      	bne.n	8000adc <_ZN6INTAKE3runEv+0x120>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	481f      	ldr	r0, [pc, #124]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000acc:	f009 f9a8 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	481c      	ldr	r0, [pc, #112]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000ad6:	f009 f9a3 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
	    } else if (INTAKE::suck == -1){
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
	    }
}
 8000ada:	e028      	b.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == 1){
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000ade:	ed93 7b00 	vldr	d7, [r3]
 8000ae2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ae6:	eeb4 7b46 	vcmp.f64	d7, d6
 8000aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aee:	d10a      	bne.n	8000b06 <_ZN6INTAKE3runEv+0x14a>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000af6:	f009 f993 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	4812      	ldr	r0, [pc, #72]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b00:	f009 f98e 	bl	8009e20 <HAL_GPIO_WritePin>
}
 8000b04:	e013      	b.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    } else if (INTAKE::suck == -1){
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <_ZN6INTAKE3runEv+0x188>)
 8000b08:	ed93 7b00 	vldr	d7, [r3]
 8000b0c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000b10:	eeb4 7b46 	vcmp.f64	d7, d6
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	d109      	bne.n	8000b2e <_ZN6INTAKE3runEv+0x172>
	    	HAL_GPIO_WritePin(SUCK_INA_PORT, SUCK_INA_PIN, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b20:	f009 f97e 	bl	8009e20 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SUCK_INB_PORT, SUCK_INB_PIN, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <_ZN6INTAKE3runEv+0x18c>)
 8000b2a:	f009 f979 	bl	8009e20 <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	24000270 	.word	0x24000270
 8000b38:	58020400 	.word	0x58020400
 8000b3c:	24000268 	.word	0x24000268
 8000b40:	58020800 	.word	0x58020800
 8000b44:	24000278 	.word	0x24000278
 8000b48:	58020000 	.word	0x58020000

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f005 ffca 	bl	8006ae8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f820 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 fc64 	bl	8001424 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b5c:	f000 f88c 	bl	8000c78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b60:	f000 f8de 	bl	8000d20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b64:	f000 f932 	bl	8000dcc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b68:	f000 f986 	bl	8000e78 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000b6c:	f000 fa64 	bl	8001038 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000b70:	f000 fab2 	bl	80010d8 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000b74:	f000 faf6 	bl	8001164 <MX_TIM15_Init>
  MX_DMA_Init();
 8000b78:	f000 fc2c 	bl	80013d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000b7c:	f000 fbde 	bl	800133c <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000b80:	f000 fa06 	bl	8000f90 <MX_TIM8_Init>
  MX_TIM14_Init();
 8000b84:	f000 facc 	bl	8001120 <MX_TIM14_Init>
  MX_TIM7_Init();
 8000b88:	f000 f9cc 	bl	8000f24 <MX_TIM7_Init>
  MX_TIM23_Init();
 8000b8c:	f000 fb7c 	bl	8001288 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000b90:	f000 fd86 	bl	80016a0 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x48>
	...

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09c      	sub	sp, #112	; 0x70
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	224c      	movs	r2, #76	; 0x4c
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f010 f8b6 	bl	8010d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2220      	movs	r2, #32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f010 f8b0 	bl	8010d18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f009 f94b 	bl	8009e54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <SystemClock_Config+0xdc>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bde:	bf00      	nop
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <SystemClock_Config+0xdc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bec:	d1f8      	bne.n	8000be0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000c04:	232a      	movs	r3, #42	; 0x2a
 8000c06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c14:	230c      	movs	r3, #12
 8000c16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 f94f 	bl	8009ec8 <HAL_RCC_OscConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c30:	f000 fd30 	bl	8001694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c34:	233f      	movs	r3, #63	; 0x3f
 8000c36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c42:	2308      	movs	r3, #8
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f009 fce1 	bl	800a624 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c68:	f000 fd14 	bl	8001694 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3770      	adds	r7, #112	; 0x70
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58024800 	.word	0x58024800

08000c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2224      	movs	r2, #36	; 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f010 f846 	bl	8010d18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000cea:	f00b fefd 	bl	800cae8 <HAL_TIM_Encoder_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cf4:	f000 fcce 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM2_Init+0xa4>)
 8000d06:	f00c ffb7 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000d10:	f000 fcc0 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	; 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000280 	.word	0x24000280

08000d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00f fff2 	bl	8010d18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_TIM3_Init+0xa8>)
 8000d42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d64:	2303      	movs	r3, #3
 8000d66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d90:	f00b feaa 	bl	800cae8 <HAL_TIM_Encoder_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d9a:	f000 fc7b 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM3_Init+0xa4>)
 8000dac:	f00c ff64 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000db6:	f000 fc6d 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	; 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	240002cc 	.word	0x240002cc
 8000dc8:	40000400 	.word	0x40000400

08000dcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dd2:	f107 030c 	add.w	r3, r7, #12
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00f ff9c 	bl	8010d18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	463b      	mov	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <MX_TIM4_Init+0xa8>)
 8000dee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e3c:	f00b fe54 	bl	800cae8 <HAL_TIM_Encoder_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e46:	f000 fc25 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	4619      	mov	r1, r3
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <MX_TIM4_Init+0xa4>)
 8000e58:	f00c ff0e 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000e62:	f000 fc17 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	24000318 	.word	0x24000318
 8000e74:	40000800 	.word	0x40000800

08000e78 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2224      	movs	r2, #36	; 0x24
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f00f ff46 	bl	8010d18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000e98:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <MX_TIM5_Init+0xa8>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000ee8:	f00b fdfe 	bl	800cae8 <HAL_TIM_Encoder_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000ef2:	f000 fbcf 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM5_Init+0xa4>)
 8000f04:	f00c feb8 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000f0e:	f000 fbc1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000364 	.word	0x24000364
 8000f20:	40000c00 	.word	0x40000c00

08000f24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f36:	4a15      	ldr	r2, [pc, #84]	; (8000f8c <MX_TIM7_Init+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f3c:	223f      	movs	r2, #63	; 0x3f
 8000f3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f48:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000f4c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f56:	f00b fa0d 	bl	800c374 <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f60:	f000 fb98 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_TIM7_Init+0x64>)
 8000f72:	f00c fe81 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f7c:	f000 fb8a 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	240003b0 	.word	0x240003b0
 8000f8c:	40001400 	.word	0x40001400

08000f90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fb0:	4a20      	ldr	r2, [pc, #128]	; (8001034 <MX_TIM8_Init+0xa4>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fb6:	221f      	movs	r2, #31
 8000fb8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000fdc:	f00b f9ca 	bl	800c374 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000fe6:	f000 fb55 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_TIM8_Init+0xa0>)
 8000ff8:	f00c f8de 	bl	800d1b8 <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001002:	f000 fb47 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_TIM8_Init+0xa0>)
 8001018:	f00c fe2e 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001022:	f000 fb37 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	240003fc 	.word	0x240003fc
 8001034:	40010400 	.word	0x40010400

08001038 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001052:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <MX_TIM12_Init+0x9c>)
 8001054:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 3;
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001058:	2203      	movs	r2, #3
 800105a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_TIM12_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001068:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_TIM12_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001076:	4816      	ldr	r0, [pc, #88]	; (80010d0 <MX_TIM12_Init+0x98>)
 8001078:	f00b fa5a 	bl	800c530 <HAL_TIM_PWM_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001082:	f000 fb07 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	; 0x60
 8001088:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_TIM12_Init+0x98>)
 800109e:	f00b ff77 	bl	800cf90 <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80010a8:	f000 faf4 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2204      	movs	r2, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_TIM12_Init+0x98>)
 80010b4:	f00b ff6c 	bl	800cf90 <HAL_TIM_PWM_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80010be:	f000 fae9 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM12_Init+0x98>)
 80010c4:	f004 ffd8 	bl	8006078 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000448 	.word	0x24000448
 80010d4:	40001800 	.word	0x40001800

080010d8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_TIM13_Init+0x40>)
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <MX_TIM13_Init+0x44>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_TIM13_Init+0x40>)
 80010e4:	2253      	movs	r2, #83	; 0x53
 80010e6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_TIM13_Init+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_TIM13_Init+0x40>)
 80010f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_TIM13_Init+0x40>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_TIM13_Init+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM13_Init+0x40>)
 8001104:	f00b f936 	bl	800c374 <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800110e:	f000 fac1 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	24000494 	.word	0x24000494
 800111c:	40001c00 	.word	0x40001c00

08001120 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_TIM14_Init+0x3c>)
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <MX_TIM14_Init+0x40>)
 8001128:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_TIM14_Init+0x3c>)
 800112c:	223f      	movs	r2, #63	; 0x3f
 800112e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_TIM14_Init+0x3c>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_TIM14_Init+0x3c>)
 8001138:	2263      	movs	r2, #99	; 0x63
 800113a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_TIM14_Init+0x3c>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_TIM14_Init+0x3c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_TIM14_Init+0x3c>)
 800114a:	f00b f913 	bl	800c374 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001154:	f000 fa9e 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	240004e0 	.word	0x240004e0
 8001160:	40002000 	.word	0x40002000

08001164 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b098      	sub	sp, #96	; 0x60
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001176:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2234      	movs	r2, #52	; 0x34
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00f fdc1 	bl	8010d18 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001198:	4a3a      	ldr	r2, [pc, #232]	; (8001284 <MX_TIM15_Init+0x120>)
 800119a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3;
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <MX_TIM15_Init+0x11c>)
 800119e:	2203      	movs	r2, #3
 80011a0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80011c2:	482f      	ldr	r0, [pc, #188]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011c4:	f00b f9b4 	bl	800c530 <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f000 fa61 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011de:	4619      	mov	r1, r3
 80011e0:	4827      	ldr	r0, [pc, #156]	; (8001280 <MX_TIM15_Init+0x11c>)
 80011e2:	f00c fd49 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f000 fa52 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	481a      	ldr	r0, [pc, #104]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001216:	f00b febb 	bl	800cf90 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001220:	f000 fa38 	bl	8001694 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001224:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_TIM15_Init+0x11c>)
 800122e:	f00b feaf 	bl	800cf90 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001238:	f000 fa2c 	bl	8001694 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001264:	f00c fda4 	bl	800ddb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800126e:	f000 fa11 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM15_Init+0x11c>)
 8001274:	f004 ff00 	bl	8006078 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3760      	adds	r7, #96	; 0x60
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400052c 	.word	0x2400052c
 8001284:	40014000 	.word	0x40014000

08001288 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	463b      	mov	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ae:	4a22      	ldr	r2, [pc, #136]	; (8001338 <MX_TIM23_Init+0xb0>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <MX_TIM23_Init+0xac>)
 80012b4:	223f      	movs	r2, #63	; 0x3f
 80012b6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 19999;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM23_Init+0xac>)
 80012c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012c4:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM23_Init+0xac>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM23_Init+0xac>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <MX_TIM23_Init+0xac>)
 80012d4:	f00b f92c 	bl	800c530 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 80012de:	f000 f9d9 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <MX_TIM23_Init+0xac>)
 80012f2:	f00c fcc1 	bl	800dc78 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 80012fc:	f000 f9ca 	bl	8001694 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM23_Init+0xac>)
 8001318:	f00b fe3a 	bl	800cf90 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 8001322:	f000 f9b7 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM23_Init+0xac>)
 8001328:	f004 fea6 	bl	8006078 <HAL_TIM_MspPostInit>

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24000578 	.word	0x24000578
 8001338:	4000e000 	.word	0x4000e000

0800133c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_USART1_UART_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_USART1_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001386:	f00c fdd1 	bl	800df2c <HAL_UART_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f980 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_USART1_UART_Init+0x90>)
 8001398:	f00e fe18 	bl	800ffcc <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f000 f977 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013aa:	f00e fe4d 	bl	8010048 <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f000 f96e 	bl	8001694 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	; (80013cc <MX_USART1_UART_Init+0x90>)
 80013ba:	f00e fdce 	bl	800ff5a <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f966 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	240005c4 	.word	0x240005c4
 80013d0:	40011000 	.word	0x40011000

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_DMA_Init+0x4c>)
 80013dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_DMA_Init+0x4c>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_DMA_Init+0x4c>)
 80013ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	200b      	movs	r0, #11
 80013fe:	f005 fce0 	bl	8006dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001402:	200b      	movs	r0, #11
 8001404:	f005 fcf7 	bl	8006df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	200c      	movs	r0, #12
 800140e:	f005 fcd8 	bl	8006dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001412:	200c      	movs	r0, #12
 8001414:	f005 fcef 	bl	8006df6 <HAL_NVIC_EnableIRQ>

}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58024400 	.word	0x58024400

08001424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143a:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <MX_GPIO_Init+0x250>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a8c      	ldr	r2, [pc, #560]	; (8001674 <MX_GPIO_Init+0x250>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b8a      	ldr	r3, [pc, #552]	; (8001674 <MX_GPIO_Init+0x250>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	623b      	str	r3, [r7, #32]
 8001456:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001458:	4b86      	ldr	r3, [pc, #536]	; (8001674 <MX_GPIO_Init+0x250>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a85      	ldr	r2, [pc, #532]	; (8001674 <MX_GPIO_Init+0x250>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b82      	ldr	r3, [pc, #520]	; (8001674 <MX_GPIO_Init+0x250>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	4b7f      	ldr	r3, [pc, #508]	; (8001674 <MX_GPIO_Init+0x250>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a7d      	ldr	r2, [pc, #500]	; (8001674 <MX_GPIO_Init+0x250>)
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <MX_GPIO_Init+0x250>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001494:	4b77      	ldr	r3, [pc, #476]	; (8001674 <MX_GPIO_Init+0x250>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a76      	ldr	r2, [pc, #472]	; (8001674 <MX_GPIO_Init+0x250>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <MX_GPIO_Init+0x250>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <MX_GPIO_Init+0x250>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <MX_GPIO_Init+0x250>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <MX_GPIO_Init+0x250>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b68      	ldr	r3, [pc, #416]	; (8001674 <MX_GPIO_Init+0x250>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a67      	ldr	r2, [pc, #412]	; (8001674 <MX_GPIO_Init+0x250>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b64      	ldr	r3, [pc, #400]	; (8001674 <MX_GPIO_Init+0x250>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <MX_GPIO_Init+0x250>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	4a5f      	ldr	r2, [pc, #380]	; (8001674 <MX_GPIO_Init+0x250>)
 80014f6:	f043 0308 	orr.w	r3, r3, #8
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <MX_GPIO_Init+0x250>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150c:	4b59      	ldr	r3, [pc, #356]	; (8001674 <MX_GPIO_Init+0x250>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	4a58      	ldr	r2, [pc, #352]	; (8001674 <MX_GPIO_Init+0x250>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151c:	4b55      	ldr	r3, [pc, #340]	; (8001674 <MX_GPIO_Init+0x250>)
 800151e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8001530:	4851      	ldr	r0, [pc, #324]	; (8001678 <MX_GPIO_Init+0x254>)
 8001532:	f008 fc75 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f242 0130 	movw	r1, #8240	; 0x2030
 800153c:	484f      	ldr	r0, [pc, #316]	; (800167c <MX_GPIO_Init+0x258>)
 800153e:	f008 fc6f 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001548:	484d      	ldr	r0, [pc, #308]	; (8001680 <MX_GPIO_Init+0x25c>)
 800154a:	f008 fc69 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	21f0      	movs	r1, #240	; 0xf0
 8001552:	484c      	ldr	r0, [pc, #304]	; (8001684 <MX_GPIO_Init+0x260>)
 8001554:	f008 fc64 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 515f 	mov.w	r1, #14272	; 0x37c0
 800155e:	484a      	ldr	r0, [pc, #296]	; (8001688 <MX_GPIO_Init+0x264>)
 8001560:	f008 fc5e 	bl	8009e20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 800156a:	4848      	ldr	r0, [pc, #288]	; (800168c <MX_GPIO_Init+0x268>)
 800156c:	f008 fc58 	bl	8009e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001570:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	483b      	ldr	r0, [pc, #236]	; (8001678 <MX_GPIO_Init+0x254>)
 800158a:	f008 fa89 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 800158e:	f242 0330 	movw	r3, #8240	; 0x2030
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4835      	ldr	r0, [pc, #212]	; (800167c <MX_GPIO_Init+0x258>)
 80015a8:	f008 fa7a 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ac:	2308      	movs	r3, #8
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4830      	ldr	r0, [pc, #192]	; (8001680 <MX_GPIO_Init+0x25c>)
 80015c0:	f008 fa6e 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80015c4:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MX_GPIO_Init+0x25c>)
 80015de:	f008 fa5f 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4821      	ldr	r0, [pc, #132]	; (800167c <MX_GPIO_Init+0x258>)
 80015f6:	f008 fa53 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23f0      	movs	r3, #240	; 0xf0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <MX_GPIO_Init+0x260>)
 8001612:	f008 fa45 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6
 8001616:	f44f 535f 	mov.w	r3, #14272	; 0x37c0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	4619      	mov	r1, r3
 800162e:	4816      	ldr	r0, [pc, #88]	; (8001688 <MX_GPIO_Init+0x264>)
 8001630:	f008 fa36 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001634:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	480f      	ldr	r0, [pc, #60]	; (800168c <MX_GPIO_Init+0x268>)
 800164e:	f008 fa27 	bl	8009aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001652:	2378      	movs	r3, #120	; 0x78
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <MX_GPIO_Init+0x26c>)
 8001666:	f008 fa1b 	bl	8009aa0 <HAL_GPIO_Init>

}
 800166a:	bf00      	nop
 800166c:	3738      	adds	r7, #56	; 0x38
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	58024400 	.word	0x58024400
 8001678:	58021000 	.word	0x58021000
 800167c:	58020800 	.word	0x58020800
 8001680:	58021400 	.word	0x58021400
 8001684:	58020000 	.word	0x58020000
 8001688:	58020400 	.word	0x58020400
 800168c:	58020c00 	.word	0x58020c00
 8001690:	58021800 	.word	0x58021800

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001698:	b672      	cpsid	i
}
 800169a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169c:	e7fe      	b.n	800169c <Error_Handler+0x8>
	...

080016a0 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	ROS::setup();
 80016a4:	f002 fb8c 	bl	8003dc0 <_ZN3ROS5setupEv>
	STM::setup();
 80016a8:	f004 fede 	bl	8006468 <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <main_function+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <main_function+0x1a>
 80016b4:	f7ff f960 	bl	8000978 <_Z10debug_loopv>
 80016b8:	e7f8      	b.n	80016ac <main_function+0xc>
		else ROS::loop();
 80016ba:	f002 fbaf 	bl	8003e1c <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 80016be:	e7f5      	b.n	80016ac <main_function+0xc>
 80016c0:	24000260 	.word	0x24000260

080016c4 <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9c1 2300 	strd	r2, r3, [r1]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0000      	movs	r0, r0
	...

08001708 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffd6 	bl	80016c4 <_ZN8CAR_INFOC1Ev>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3318      	adds	r3, #24
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ffd1 	bl	80016c4 <_ZN8CAR_INFOC1Ev>
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <_ZN7MecanumC1Ev+0x60>)
 800172a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	a309      	add	r3, pc, #36	; (adr r3, 8001758 <_ZN7MecanumC1Ev+0x50>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	a308      	add	r3, pc, #32	; (adr r3, 8001760 <_ZN7MecanumC1Ev+0x58>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 8001746:	f7fe ff99 	bl	800067c <_Z13DC_motor_initv>
}
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	cccccccd 	.word	0xcccccccd
 800175c:	4020cccc 	.word	0x4020cccc
 8001760:	39581062 	.word	0x39581062
 8001764:	400d48b4 	.word	0x400d48b4
 8001768:	40270000 	.word	0x40270000

0800176c <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	tf2_wheel_speed();
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f807 	bl	8001788 <_ZN7Mecanum15tf2_wheel_speedEv>
	tf2_car_speed();
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f89a 	bl	80018b4 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN7Mecanum15tf2_wheel_speedEv>:


// alter wheel speed
void Mecanum::tf2_wheel_speed(void){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	fl.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	ed93 6b02 	vldr	d6, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 7b00 	vldr	d7, [r3]
 800179c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 5b04 	vldr	d5, [r3, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017b2:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017be:	eeb1 5b47 	vneg.f64	d5, d7
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 80017c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <_ZN7Mecanum15tf2_wheel_speedEv+0x11c>)
 80017ce:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	fr.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	ed93 6b02 	vldr	d6, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	ed93 5b04 	vldr	d5, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80017f4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001800:	eeb1 5b47 	vneg.f64	d5, d7
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800180a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <_ZN7Mecanum15tf2_wheel_speedEv+0x120>)
 8001810:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	bl.rps_goal = -(CAR_Goal.Vy - CAR_Goal.Vx - CAR_Goal.Omega*(a+b) )/radius;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	ed93 6b02 	vldr	d6, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7b00 	vldr	d7, [r3]
 8001820:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	ed93 5b04 	vldr	d5, [r3, #16]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001836:	ee34 7b07 	vadd.f64	d7, d4, d7
 800183a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800183e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001842:	eeb1 5b47 	vneg.f64	d5, d7
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800184c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <_ZN7Mecanum15tf2_wheel_speedEv+0x124>)
 8001852:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	br.rps_goal = -(CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	ed93 6b02 	vldr	d6, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ed93 7b00 	vldr	d7, [r3]
 8001862:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	ed93 5b04 	vldr	d5, [r3, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001878:	ee34 7b07 	vadd.f64	d7, d4, d7
 800187c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001880:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001884:	eeb1 5b47 	vneg.f64	d5, d7
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 800188e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <_ZN7Mecanum15tf2_wheel_speedEv+0x128>)
 8001894:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	24000110 	.word	0x24000110
 80018a8:	240000a0 	.word	0x240000a0
 80018ac:	240001f0 	.word	0x240001f0
 80018b0:	24000180 	.word	0x24000180

080018b4 <_ZN7Mecanum13tf2_car_speedEv>:


// give current car speed
void Mecanum::tf2_car_speed(void){
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	CAR_Now.Vy = -(0.25)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018c2:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 80018c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 80018cc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 80018d2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018d6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 80018dc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018e0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80018e6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018ea:	ee35 7b07 	vadd.f64	d7, d5, d7
 80018ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Vx = -(0.25)*radius*(fl.rps_now - fr.rps_now - bl.rps_now + br.rps_now);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80018fe:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 8001902:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001908:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 800190e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001912:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001918:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800191c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001922:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001926:	ee35 7b07 	vadd.f64	d7, d5, d7
 800192a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Omega = -(0.25)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800193a:	eebd 6b00 	vmov.f64	d6, #208	; 0xbe800000 -0.250
 800193e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800194e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001952:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8001956:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800195a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_ZN7Mecanum13tf2_car_speedEv+0xe8>)
 8001960:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <_ZN7Mecanum13tf2_car_speedEv+0xe4>)
 8001966:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800196a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <_ZN7Mecanum13tf2_car_speedEv+0xec>)
 8001970:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001974:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800197a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800197e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001982:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	24000110 	.word	0x24000110
 800199c:	240000a0 	.word	0x240000a0
 80019a0:	240001f0 	.word	0x240001f0
 80019a4:	24000180 	.word	0x24000180

080019a8 <_Z41__static_initialization_and_destruction_0ii>:
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d107      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019be:	4293      	cmp	r3, r2
 80019c0:	d102      	bne.n	80019c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80019c4:	f7ff fea0 	bl	8001708 <_ZN7MecanumC1Ev>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	24000748 	.word	0x24000748

080019d4 <_GLOBAL__sub_I_mecanum>:
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019dc:	2001      	movs	r0, #1
 80019de:	f7ff ffe3 	bl	80019a8 <_Z41__static_initialization_and_destruction_0ii>
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_ZN7MYRESET7receiveEv>:
	int state=0;
}

int apple =0, banana=0, cookie=0;

void MYRESET::receive(void){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

	apple = HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN);
 80019e8:	2108      	movs	r1, #8
 80019ea:	4825      	ldr	r0, [pc, #148]	; (8001a80 <_ZN7MYRESET7receiveEv+0x9c>)
 80019ec:	f008 fa00 	bl	8009df0 <HAL_GPIO_ReadPin>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <_ZN7MYRESET7receiveEv+0xa0>)
 80019f6:	601a      	str	r2, [r3, #0]
	banana = apple;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <_ZN7MYRESET7receiveEv+0xa0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <_ZN7MYRESET7receiveEv+0xa4>)
 80019fe:	6013      	str	r3, [r2, #0]
	if(banana!=apple)cookie++;
 8001a00:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <_ZN7MYRESET7receiveEv+0xa4>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <_ZN7MYRESET7receiveEv+0xa0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d004      	beq.n	8001a16 <_ZN7MYRESET7receiveEv+0x32>
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <_ZN7MYRESET7receiveEv+0xa8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <_ZN7MYRESET7receiveEv+0xa8>)
 8001a14:	6013      	str	r3, [r2, #0]

	/* first part*/
	if (HAL_GPIO_ReadPin(THIRD_PART_PORT, THIRD_PART_PIN) == 0)MYRESET::state=3;
 8001a16:	2102      	movs	r1, #2
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <_ZN7MYRESET7receiveEv+0xac>)
 8001a1a:	f008 f9e9 	bl	8009df0 <HAL_GPIO_ReadPin>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <_ZN7MYRESET7receiveEv+0x52>
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <_ZN7MYRESET7receiveEv+0xb0>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	601a      	str	r2, [r3, #0]

	/* third part*/
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;

	else MYRESET::state=0;
}
 8001a34:	e022      	b.n	8001a7c <_ZN7MYRESET7receiveEv+0x98>
	else if (HAL_GPIO_ReadPin(SECOND_PART_PORT, SECOND_PART_PIN) == 0) MYRESET::state=2;
 8001a36:	2101      	movs	r1, #1
 8001a38:	4815      	ldr	r0, [pc, #84]	; (8001a90 <_ZN7MYRESET7receiveEv+0xac>)
 8001a3a:	f008 f9d9 	bl	8009df0 <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <_ZN7MYRESET7receiveEv+0x72>
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_ZN7MYRESET7receiveEv+0xb0>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	e012      	b.n	8001a7c <_ZN7MYRESET7receiveEv+0x98>
	else if (HAL_GPIO_ReadPin(FIRST_PART_PORT, FIRST_PART_PIN) == 0) MYRESET::state=1;
 8001a56:	2108      	movs	r1, #8
 8001a58:	4809      	ldr	r0, [pc, #36]	; (8001a80 <_ZN7MYRESET7receiveEv+0x9c>)
 8001a5a:	f008 f9c9 	bl	8009df0 <HAL_GPIO_ReadPin>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <_ZN7MYRESET7receiveEv+0x92>
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <_ZN7MYRESET7receiveEv+0xb0>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
}
 8001a74:	e002      	b.n	8001a7c <_ZN7MYRESET7receiveEv+0x98>
	else MYRESET::state=0;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_ZN7MYRESET7receiveEv+0xb0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	58021400 	.word	0x58021400
 8001a84:	240007ac 	.word	0x240007ac
 8001a88:	240007b0 	.word	0x240007b0
 8001a8c:	240007b4 	.word	0x240007b4
 8001a90:	58020800 	.word	0x58020800
 8001a94:	240007a8 	.word	0x240007a8

08001a98 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	08011380 	.word	0x08011380

08001adc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
      data()
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ffe8 	bl	8001abc <_ZN3ros3MsgC1Ev>
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3304      	adds	r3, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffce 	bl	8001a98 <_ZN3ros4TimeC1Ev>
    {
    }
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	08011368 	.word	0x08011368

08001b0c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6859      	ldr	r1, [r3, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	0a19      	lsrs	r1, r3, #8
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0c19      	lsrs	r1, r3, #16
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3302      	adds	r3, #2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	0e19      	lsrs	r1, r3, #24
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3303      	adds	r3, #3
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3304      	adds	r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a19      	lsrs	r1, r3, #8
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	0c19      	lsrs	r1, r3, #16
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0e19      	lsrs	r1, r3, #24
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3304      	adds	r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
      return offset;
 8001bae:	68fb      	ldr	r3, [r7, #12]
    }
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3301      	adds	r3, #1
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	440b      	add	r3, r1
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	440b      	add	r3, r1
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3303      	adds	r3, #3
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	440b      	add	r3, r1
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	440b      	add	r3, r1
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	440b      	add	r3, r1
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3303      	adds	r3, #3
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	440b      	add	r3, r1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3304      	adds	r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
     return offset;
 8001c76:	68fb      	ldr	r3, [r7, #12]
    }
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	08011048 	.word	0x08011048

08001ca0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	08011058 	.word	0x08011058

08001cbc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fef8 	bl	8001abc <_ZN3ros3MsgC1Ev>
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	809a      	strh	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
    {
    }
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	08011350 	.word	0x08011350
 8001d00:	0801107c 	.word	0x0801107c

08001d04 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8899      	ldrh	r1, [r3, #4]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b2ca      	uxtb	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	b299      	uxth	r1, r3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	3302      	adds	r3, #2
 8001d38:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fae6 	bl	8000310 <strlen>
 8001d44:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	69b9      	ldr	r1, [r7, #24]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 f892 	bl	8003e78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	3304      	adds	r3, #4
 8001d58:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	18d0      	adds	r0, r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4619      	mov	r1, r3
 8001d68:	f00e ffc8 	bl	8010cfc <memcpy>
      offset += length_topic_name;
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4413      	add	r3, r2
 8001d72:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fac9 	bl	8000310 <strlen>
 8001d7e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	6979      	ldr	r1, [r7, #20]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 f875 	bl	8003e78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	18d0      	adds	r0, r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f00e ffab 	bl	8010cfc <memcpy>
      offset += length_message_type;
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4413      	add	r3, r2
 8001dac:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe faac 	bl	8000310 <strlen>
 8001db8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 f858 	bl	8003e78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	18d0      	adds	r0, r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f00e ff8e 	bl	8010cfc <memcpy>
      offset += length_md5sum;
 8001de0:	69fa      	ldr	r2, [r7, #28]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4413      	add	r3, r2
 8001de6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	b2ca      	uxtb	r2, r1
 8001df8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0a19      	lsrs	r1, r3, #8
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	0c19      	lsrs	r1, r3, #16
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3302      	adds	r3, #2
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	b2ca      	uxtb	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0e19      	lsrs	r1, r3, #24
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3303      	adds	r3, #3
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001e30:	69fb      	ldr	r3, [r7, #28]
    }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b08a      	sub	sp, #40	; 0x28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	889b      	ldrh	r3, [r3, #4]
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	6839      	ldr	r1, [r7, #0]
 8001e62:	440b      	add	r3, r1
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	3302      	adds	r3, #2
 8001e78:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	441a      	add	r2, r3
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 f814 	bl	8003eb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d20c      	bcs.n	8001ebc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	441a      	add	r2, r3
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	440b      	add	r3, r1
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	e7ec      	b.n	8001e96 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	441a      	add	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4413      	add	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	441a      	add	r2, r3
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 ffe1 	bl	8003eb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	6a3a      	ldr	r2, [r7, #32]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d20c      	bcs.n	8001f22 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	441a      	add	r2, r3
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	440b      	add	r3, r1
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	623b      	str	r3, [r7, #32]
 8001f20:	e7ec      	b.n	8001efc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	441a      	add	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	441a      	add	r2, r3
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 ffae 	bl	8003eb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d20c      	bcs.n	8001f88 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	441a      	add	r2, r3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	440b      	add	r3, r1
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	3301      	adds	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e7ec      	b.n	8001f62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	441a      	add	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4413      	add	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	440a      	add	r2, r1
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	440b      	add	r3, r1
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	440b      	add	r3, r1
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	440b      	add	r3, r1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	061b      	lsls	r3, r3, #24
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	61bb      	str	r3, [r7, #24]
     return offset;
 8002000:	69bb      	ldr	r3, [r7, #24]
    }
 8002002:	4618      	mov	r0, r3
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	08011080 	.word	0x08011080

08002028 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	0801109c 	.word	0x0801109c

08002044 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fd34 	bl	8001abc <_ZN3ros3MsgC1Ev>
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	711a      	strb	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002064:	609a      	str	r2, [r3, #8]
    {
    }
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08011338 	.word	0x08011338
 8002074:	0801107c 	.word	0x0801107c

08002078 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	7912      	ldrb	r2, [r2, #4]
 8002090:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3301      	adds	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe f937 	bl	8000310 <strlen>
 80020a2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	4413      	add	r3, r2
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 fee3 	bl	8003e78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3304      	adds	r3, #4
 80020b6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	18d0      	adds	r0, r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f00e fe19 	bl	8010cfc <memcpy>
      offset += length_msg;
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80020d2:	68fb      	ldr	r3, [r7, #12]
    }
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	3301      	adds	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	441a      	add	r2, r3
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f001 fed3 	bl	8003eb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	3304      	adds	r3, #4
 8002112:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4413      	add	r3, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	d20c      	bcs.n	800213e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	441a      	add	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3b01      	subs	r3, #1
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	440b      	add	r3, r1
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e7ec      	b.n	8002118 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	3b01      	subs	r3, #1
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	3b01      	subs	r3, #1
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	441a      	add	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
     return offset;
 8002162:	693b      	ldr	r3, [r7, #16]
    }
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	080110c0 	.word	0x080110c0

08002188 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	080110d4 	.word	0x080110d4

080021a4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fc84 	bl	8001abc <_ZN3ros3MsgC1Ev>
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	61da      	str	r2, [r3, #28]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	08011320 	.word	0x08011320

080021ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4413      	add	r3, r2
 8002204:	b2ca      	uxtb	r2, r1
 8002206:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	0a19      	lsrs	r1, r3, #8
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	3301      	adds	r3, #1
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	b2ca      	uxtb	r2, r1
 8002218:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0c19      	lsrs	r1, r3, #16
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	3302      	adds	r3, #2
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	4413      	add	r3, r2
 8002228:	b2ca      	uxtb	r2, r1
 800222a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0e19      	lsrs	r1, r3, #24
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	3303      	adds	r3, #3
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	4413      	add	r3, r2
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	3304      	adds	r3, #4
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	429a      	cmp	r2, r3
 8002250:	d22b      	bcs.n	80022aa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	4413      	add	r3, r2
 8002268:	b2ca      	uxtb	r2, r1
 800226a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	0a19      	lsrs	r1, r3, #8
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	3301      	adds	r3, #1
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	4413      	add	r3, r2
 8002278:	b2ca      	uxtb	r2, r1
 800227a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	0c19      	lsrs	r1, r3, #16
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	3302      	adds	r3, #2
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	b2ca      	uxtb	r2, r1
 800228a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	0e19      	lsrs	r1, r3, #24
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3303      	adds	r3, #3
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	b2ca      	uxtb	r2, r1
 800229a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3304      	adds	r3, #4
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	3301      	adds	r3, #1
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	e7ce      	b.n	8002248 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6919      	ldr	r1, [r3, #16]
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	b2ca      	uxtb	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	0a19      	lsrs	r1, r3, #8
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	b2ca      	uxtb	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	0c19      	lsrs	r1, r3, #16
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	3302      	adds	r3, #2
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	b2ca      	uxtb	r2, r1
 80022da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	0e19      	lsrs	r1, r3, #24
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	3303      	adds	r3, #3
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	b2ca      	uxtb	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	3304      	adds	r3, #4
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d22b      	bcs.n	800235a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4413      	add	r3, r2
 8002318:	b2ca      	uxtb	r2, r1
 800231a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	0a19      	lsrs	r1, r3, #8
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	3301      	adds	r3, #1
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	4413      	add	r3, r2
 8002328:	b2ca      	uxtb	r2, r1
 800232a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	0c19      	lsrs	r1, r3, #16
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	3302      	adds	r3, #2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	b2ca      	uxtb	r2, r1
 800233a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	0e19      	lsrs	r1, r3, #24
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	3303      	adds	r3, #3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	b2ca      	uxtb	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	3304      	adds	r3, #4
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e7ce      	b.n	80022f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69d9      	ldr	r1, [r3, #28]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	0a19      	lsrs	r1, r3, #8
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	3301      	adds	r3, #1
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	4413      	add	r3, r2
 8002376:	b2ca      	uxtb	r2, r1
 8002378:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	0c19      	lsrs	r1, r3, #16
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3302      	adds	r3, #2
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	4413      	add	r3, r2
 8002388:	b2ca      	uxtb	r2, r1
 800238a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	0e19      	lsrs	r1, r3, #24
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	3303      	adds	r3, #3
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3304      	adds	r3, #4
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d228      	bcs.n	8002404 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fd ffa6 	bl	8000310 <strlen>
 80023c4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	6979      	ldr	r1, [r7, #20]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f001 fd52 	bl	8003e78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	3304      	adds	r3, #4
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	18d0      	adds	r0, r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4619      	mov	r1, r3
 80023f0:	f00e fc84 	bl	8010cfc <memcpy>
      offset += length_stringsi;
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4413      	add	r3, r2
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	3301      	adds	r3, #1
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	e7d1      	b.n	80023a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002406:	4618      	mov	r0, r3
 8002408:	3728      	adds	r7, #40	; 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800240e:	b580      	push	{r7, lr}
 8002410:	b08e      	sub	sp, #56	; 0x38
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800241c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	3301      	adds	r3, #1
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	6a3a      	ldr	r2, [r7, #32]
 8002434:	4313      	orrs	r3, r2
 8002436:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	3302      	adds	r3, #2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	4313      	orrs	r3, r2
 8002448:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800244a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244c:	3303      	adds	r3, #3
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	6a3a      	ldr	r2, [r7, #32]
 8002458:	4313      	orrs	r3, r2
 800245a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800245c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245e:	3304      	adds	r3, #4
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	6a3a      	ldr	r2, [r7, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d90a      	bls.n	8002482 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f00e fc56 	bl	8010d28 <realloc>
 800247c:	4602      	mov	r2, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002492:	429a      	cmp	r2, r3
 8002494:	d236      	bcs.n	8002504 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	440a      	add	r2, r1
 80024a2:	7812      	ldrb	r2, [r2, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ac:	3301      	adds	r3, #1
 80024ae:	6839      	ldr	r1, [r7, #0]
 80024b0:	440b      	add	r3, r1
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	021b      	lsls	r3, r3, #8
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	3302      	adds	r3, #2
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	440b      	add	r3, r1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d0:	3303      	adds	r3, #3
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	440b      	add	r3, r1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	4313      	orrs	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80024e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e6:	3304      	adds	r3, #4
 80024e8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	3301      	adds	r3, #1
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
 8002502:	e7c3      	b.n	800248c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4413      	add	r3, r2
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	3301      	adds	r3, #1
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4313      	orrs	r3, r2
 800251e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002522:	3302      	adds	r3, #2
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	4413      	add	r3, r2
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	4313      	orrs	r3, r2
 8002530:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002534:	3303      	adds	r3, #3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	4313      	orrs	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002546:	3304      	adds	r3, #4
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	429a      	cmp	r2, r3
 8002552:	d90a      	bls.n	800256a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f00e fbe2 	bl	8010d28 <realloc>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257a:	429a      	cmp	r2, r3
 800257c:	d236      	bcs.n	80025ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	440a      	add	r2, r1
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	3301      	adds	r3, #1
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	440b      	add	r3, r1
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a6:	3302      	adds	r3, #2
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	440b      	add	r3, r1
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	041b      	lsls	r3, r3, #16
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	3303      	adds	r3, #3
 80025ba:	6839      	ldr	r1, [r7, #0]
 80025bc:	440b      	add	r3, r1
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	3304      	adds	r3, #4
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	3214      	adds	r2, #20
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	3301      	adds	r3, #1
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ea:	e7c3      	b.n	8002574 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f8:	3301      	adds	r3, #1
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	3302      	adds	r3, #2
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261c:	3303      	adds	r3, #3
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	3304      	adds	r3, #4
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	429a      	cmp	r2, r3
 800263a:	d90a      	bls.n	8002652 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f00e fb6e 	bl	8010d28 <realloc>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002662:	429a      	cmp	r2, r3
 8002664:	d23f      	bcs.n	80026e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	441a      	add	r2, r3
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f001 fc1e 	bl	8003eb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	3304      	adds	r3, #4
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	441a      	add	r2, r3
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	3b01      	subs	r3, #1
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	440b      	add	r3, r1
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3301      	adds	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	e7ec      	b.n	8002682 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80026a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	3b01      	subs	r3, #1
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80026b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ba:	3b01      	subs	r3, #1
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	441a      	add	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80026c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	3220      	adds	r2, #32
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	3301      	adds	r3, #1
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e4:	e7ba      	b.n	800265c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80026e8:	4618      	mov	r0, r3
 80026ea:	3738      	adds	r7, #56	; 0x38
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	0801125c 	.word	0x0801125c

0800270c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	080110f8 	.word	0x080110f8

08002728 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68d8      	ldr	r0, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6891      	ldr	r1, [r2, #8]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4798      	blx	r3
 8002774:	4603      	mov	r3, r0
  };
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
  }
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d068      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d061      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3d      	ldr	r2, [pc, #244]	; (80028bc <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d05a      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d053      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d04c      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a36      	ldr	r2, [pc, #216]	; (80028c8 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d045      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a33      	ldr	r2, [pc, #204]	; (80028cc <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d03e      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d037      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d030      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2c      	ldr	r2, [pc, #176]	; (80028d8 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d029      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d022      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d01b      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d014      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00d      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d006      	beq.n	8002880 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d109      	bne.n	8002894 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800288e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002892:	e008      	b.n	80028a6 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80028a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40020010 	.word	0x40020010
 80028b8:	40020028 	.word	0x40020028
 80028bc:	40020040 	.word	0x40020040
 80028c0:	40020058 	.word	0x40020058
 80028c4:	40020070 	.word	0x40020070
 80028c8:	40020088 	.word	0x40020088
 80028cc:	400200a0 	.word	0x400200a0
 80028d0:	400200b8 	.word	0x400200b8
 80028d4:	40020410 	.word	0x40020410
 80028d8:	40020428 	.word	0x40020428
 80028dc:	40020440 	.word	0x40020440
 80028e0:	40020458 	.word	0x40020458
 80028e4:	40020470 	.word	0x40020470
 80028e8:	40020488 	.word	0x40020488
 80028ec:	400204a0 	.word	0x400204a0
 80028f0:	400204b8 	.word	0x400204b8

080028f4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	461a      	mov	r2, r3
 8002912:	2300      	movs	r3, #0
 8002914:	6093      	str	r3, [r2, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291c:	461a      	mov	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	60d3      	str	r3, [r2, #12]
    }
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	240005c4 	.word	0x240005c4

08002934 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f804 	bl	800294a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800295e:	4619      	mov	r1, r3
 8002960:	f00b fbc6 	bl	800e0f0 <HAL_UART_Receive_DMA>
    }
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZN13STM32Hardware4readEv>:

    int read(){
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff09 	bl	8002798 <_ZN13STM32Hardware10getRdmaIndEv>
 8002986:	4603      	mov	r3, r0
 8002988:	429c      	cmp	r4, r3
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800299c:	1c59      	adds	r1, r3, #1
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80029b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 80029bc:	68fb      	ldr	r3, [r7, #12]
    }
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
	...

080029c8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d108      	bne.n	80029ee <_ZN13STM32Hardware5flushEv+0x26>
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <_ZN13STM32Hardware5flushEv+0xc8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <_ZN13STM32Hardware5flushEv+0x26>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <_ZN13STM32Hardware5flushEv+0x28>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d049      	beq.n	8002a88 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <_ZN13STM32Hardware5flushEv+0xc8>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d039      	beq.n	8002a82 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d20c      	bcs.n	8002a3c <_ZN13STM32Hardware5flushEv+0x74>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	e007      	b.n	8002a4c <_ZN13STM32Hardware5flushEv+0x84>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	89fa      	ldrh	r2, [r7, #14]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f00b fab1 	bl	800dfcc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	89fb      	ldrh	r3, [r7, #14]
 8002a74:	4413      	add	r3, r2
 8002a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a80:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002a82:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
      }
    }
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	240007b8 	.word	0x240007b8

08002a94 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aaa:	bfa8      	it	ge
 8002aac:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002ab0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	bf28      	it	cs
 8002ac4:	4613      	movcs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00e f90d 	bl	8010cfc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	4413      	add	r3, r2
 8002aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002af8:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d00b      	beq.n	8002b1a <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	18d1      	adds	r1, r2, r3
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	f00e f8f1 	bl	8010cfc <memcpy>
      }

      flush();
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff ff54 	bl	80029c8 <_ZN13STM32Hardware5flushEv>
    }
 8002b20:	bf00      	nop
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	f004 f860 	bl	8006bf4 <HAL_GetTick>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe ffb6 	bl	8001abc <_ZN3ros3MsgC1Ev>
 8002b50:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	080112dc 	.word	0x080112dc

08002b90 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b90:	b480      	push	{r7}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	4401      	add	r1, r0
 8002bb2:	b2d3      	uxtb	r3, r2
 8002bb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002bb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	0a02      	lsrs	r2, r0, #8
 8002bc4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002bc8:	0a0b      	lsrs	r3, r1, #8
 8002bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bcc:	3101      	adds	r1, #1
 8002bce:	6838      	ldr	r0, [r7, #0]
 8002bd0:	4401      	add	r1, r0
 8002bd2:	b2d3      	uxtb	r3, r2
 8002bd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002bd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	0c02      	lsrs	r2, r0, #16
 8002be4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002be8:	0c0b      	lsrs	r3, r1, #16
 8002bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bec:	3102      	adds	r1, #2
 8002bee:	6838      	ldr	r0, [r7, #0]
 8002bf0:	4401      	add	r1, r0
 8002bf2:	b2d3      	uxtb	r3, r2
 8002bf4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002bf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	0e02      	lsrs	r2, r0, #24
 8002c04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c08:	0e0b      	lsrs	r3, r1, #24
 8002c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c0c:	3103      	adds	r1, #3
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	4401      	add	r1, r0
 8002c12:	b2d3      	uxtb	r3, r2
 8002c14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	000a      	movs	r2, r1
 8002c24:	2300      	movs	r3, #0
 8002c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c28:	3104      	adds	r1, #4
 8002c2a:	6838      	ldr	r0, [r7, #0]
 8002c2c:	4401      	add	r1, r0
 8002c2e:	b2d3      	uxtb	r3, r2
 8002c30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	0a0a      	lsrs	r2, r1, #8
 8002c40:	2300      	movs	r3, #0
 8002c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c44:	3105      	adds	r1, #5
 8002c46:	6838      	ldr	r0, [r7, #0]
 8002c48:	4401      	add	r1, r0
 8002c4a:	b2d3      	uxtb	r3, r2
 8002c4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002c4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	0c0a      	lsrs	r2, r1, #16
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c60:	3106      	adds	r1, #6
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	4401      	add	r1, r0
 8002c66:	b2d3      	uxtb	r3, r2
 8002c68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	0e0a      	lsrs	r2, r1, #24
 8002c78:	2300      	movs	r3, #0
 8002c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c7c:	3107      	adds	r1, #7
 8002c7e:	6838      	ldr	r0, [r7, #0]
 8002c80:	4401      	add	r1, r0
 8002c82:	b2d3      	uxtb	r3, r2
 8002c84:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3308      	adds	r3, #8
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c92:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002c96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	4401      	add	r1, r0
 8002ca0:	b2d3      	uxtb	r3, r2
 8002ca2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002ca4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	0a02      	lsrs	r2, r0, #8
 8002cb2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002cb6:	0a0b      	lsrs	r3, r1, #8
 8002cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cba:	3101      	adds	r1, #1
 8002cbc:	6838      	ldr	r0, [r7, #0]
 8002cbe:	4401      	add	r1, r0
 8002cc0:	b2d3      	uxtb	r3, r2
 8002cc2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002cc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	0c02      	lsrs	r2, r0, #16
 8002cd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cd6:	0c0b      	lsrs	r3, r1, #16
 8002cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cda:	3102      	adds	r1, #2
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	4401      	add	r1, r0
 8002ce0:	b2d3      	uxtb	r3, r2
 8002ce2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002ce4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	0e02      	lsrs	r2, r0, #24
 8002cf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cf6:	0e0b      	lsrs	r3, r1, #24
 8002cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cfa:	3103      	adds	r1, #3
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	4401      	add	r1, r0
 8002d00:	b2d3      	uxtb	r3, r2
 8002d02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002d04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	000a      	movs	r2, r1
 8002d12:	2300      	movs	r3, #0
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	3104      	adds	r1, #4
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	4401      	add	r1, r0
 8002d1c:	b2d3      	uxtb	r3, r2
 8002d1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	0a0a      	lsrs	r2, r1, #8
 8002d2e:	2300      	movs	r3, #0
 8002d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d32:	3105      	adds	r1, #5
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	4401      	add	r1, r0
 8002d38:	b2d3      	uxtb	r3, r2
 8002d3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002d3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	0c0a      	lsrs	r2, r1, #16
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d4e:	3106      	adds	r1, #6
 8002d50:	6838      	ldr	r0, [r7, #0]
 8002d52:	4401      	add	r1, r0
 8002d54:	b2d3      	uxtb	r3, r2
 8002d56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	0e0a      	lsrs	r2, r1, #24
 8002d66:	2300      	movs	r3, #0
 8002d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6a:	3107      	adds	r1, #7
 8002d6c:	6838      	ldr	r0, [r7, #0]
 8002d6e:	4401      	add	r1, r0
 8002d70:	b2d3      	uxtb	r3, r2
 8002d72:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	3308      	adds	r3, #8
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d80:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	4401      	add	r1, r0
 8002d8e:	b2d3      	uxtb	r3, r2
 8002d90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	0a02      	lsrs	r2, r0, #8
 8002da0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002da4:	0a0b      	lsrs	r3, r1, #8
 8002da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da8:	3101      	adds	r1, #1
 8002daa:	6838      	ldr	r0, [r7, #0]
 8002dac:	4401      	add	r1, r0
 8002dae:	b2d3      	uxtb	r3, r2
 8002db0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002db2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	0c02      	lsrs	r2, r0, #16
 8002dc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dc4:	0c0b      	lsrs	r3, r1, #16
 8002dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc8:	3102      	adds	r1, #2
 8002dca:	6838      	ldr	r0, [r7, #0]
 8002dcc:	4401      	add	r1, r0
 8002dce:	b2d3      	uxtb	r3, r2
 8002dd0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002dd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	0e02      	lsrs	r2, r0, #24
 8002de0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002de4:	0e0b      	lsrs	r3, r1, #24
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	3103      	adds	r1, #3
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	4401      	add	r1, r0
 8002dee:	b2d3      	uxtb	r3, r2
 8002df0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002df2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	000a      	movs	r2, r1
 8002e00:	2300      	movs	r3, #0
 8002e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e04:	3104      	adds	r1, #4
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	4401      	add	r1, r0
 8002e0a:	b2d3      	uxtb	r3, r2
 8002e0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	0a0a      	lsrs	r2, r1, #8
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e20:	3105      	adds	r1, #5
 8002e22:	6838      	ldr	r0, [r7, #0]
 8002e24:	4401      	add	r1, r0
 8002e26:	b2d3      	uxtb	r3, r2
 8002e28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	0c0a      	lsrs	r2, r1, #16
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e3c:	3106      	adds	r1, #6
 8002e3e:	6838      	ldr	r0, [r7, #0]
 8002e40:	4401      	add	r1, r0
 8002e42:	b2d3      	uxtb	r3, r2
 8002e44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	0e0a      	lsrs	r2, r1, #24
 8002e54:	2300      	movs	r3, #0
 8002e56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e58:	3107      	adds	r1, #7
 8002e5a:	6838      	ldr	r0, [r7, #0]
 8002e5c:	4401      	add	r1, r0
 8002e5e:	b2d3      	uxtb	r3, r2
 8002e60:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	3308      	adds	r3, #8
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	372c      	adds	r7, #44	; 0x2c
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e76:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e7a:	b0eb      	sub	sp, #428	; 0x1ac
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002e82:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002e9c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ea0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	461c      	mov	r4, r3
 8002eae:	4615      	mov	r5, r2
 8002eb0:	ea40 0804 	orr.w	r8, r0, r4
 8002eb4:	ea41 0905 	orr.w	r9, r1, r5
 8002eb8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ebc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ec0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	469a      	mov	sl, r3
 8002ed4:	4693      	mov	fp, r2
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002ee2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002ee6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002eea:	ea40 0402 	orr.w	r4, r0, r2
 8002eee:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ef8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002efc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f00:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f08:	1c9a      	adds	r2, r3, #2
 8002f0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f0e:	4413      	add	r3, r2
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002f1a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002f2a:	464c      	mov	r4, r9
 8002f2c:	0423      	lsls	r3, r4, #16
 8002f2e:	4644      	mov	r4, r8
 8002f30:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f34:	4644      	mov	r4, r8
 8002f36:	0422      	lsls	r2, r4, #16
 8002f38:	ea40 0402 	orr.w	r4, r0, r2
 8002f3c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002f40:	430b      	orrs	r3, r1
 8002f42:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002f46:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002f4a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f4e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002f52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f56:	1cda      	adds	r2, r3, #3
 8002f58:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f5c:	4413      	add	r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002f68:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002f6c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002f70:	4623      	mov	r3, r4
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002f78:	4623      	mov	r3, r4
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002f80:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002f84:	4623      	mov	r3, r4
 8002f86:	4303      	orrs	r3, r0
 8002f88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f94:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002f98:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f9c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fa0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fa4:	1d1a      	adds	r2, r3, #4
 8002fa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002fb6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002fc6:	0023      	movs	r3, r4
 8002fc8:	2200      	movs	r2, #0
 8002fca:	ea40 0402 	orr.w	r4, r0, r2
 8002fce:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002fd8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002fdc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002fe0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002fe4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fe8:	1d5a      	adds	r2, r3, #5
 8002fea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002ffa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800300a:	0223      	lsls	r3, r4, #8
 800300c:	2200      	movs	r2, #0
 800300e:	ea40 0402 	orr.w	r4, r0, r2
 8003012:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003016:	430b      	orrs	r3, r1
 8003018:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800301c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003020:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003024:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003028:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800302c:	1d9a      	adds	r2, r3, #6
 800302e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2200      	movs	r2, #0
 800303a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800303e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800304e:	0423      	lsls	r3, r4, #16
 8003050:	2200      	movs	r2, #0
 8003052:	ea40 0402 	orr.w	r4, r0, r2
 8003056:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800305a:	430b      	orrs	r3, r1
 800305c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003060:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003064:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003068:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800306c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003070:	1dda      	adds	r2, r3, #7
 8003072:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003082:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003092:	0623      	lsls	r3, r4, #24
 8003094:	2200      	movs	r2, #0
 8003096:	ea40 0402 	orr.w	r4, r0, r2
 800309a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800309e:	430b      	orrs	r3, r1
 80030a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80030a4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80030a8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80030ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030b0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80030b8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030bc:	3308      	adds	r3, #8
 80030be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030ce:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80030d2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80030d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80030e6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80030ea:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80030ee:	4623      	mov	r3, r4
 80030f0:	4303      	orrs	r3, r0
 80030f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030f6:	462b      	mov	r3, r5
 80030f8:	430b      	orrs	r3, r1
 80030fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030fe:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003102:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003106:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800310a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003114:	4413      	add	r3, r2
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003120:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003130:	464c      	mov	r4, r9
 8003132:	0223      	lsls	r3, r4, #8
 8003134:	4644      	mov	r4, r8
 8003136:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800313a:	4644      	mov	r4, r8
 800313c:	0222      	lsls	r2, r4, #8
 800313e:	ea40 0402 	orr.w	r4, r0, r2
 8003142:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003146:	430b      	orrs	r3, r1
 8003148:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800314c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003150:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003154:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003158:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800315c:	1c9a      	adds	r2, r3, #2
 800315e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003162:	4413      	add	r3, r2
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2200      	movs	r2, #0
 800316a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800316e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800317e:	464c      	mov	r4, r9
 8003180:	0423      	lsls	r3, r4, #16
 8003182:	4644      	mov	r4, r8
 8003184:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003188:	4644      	mov	r4, r8
 800318a:	0422      	lsls	r2, r4, #16
 800318c:	ea40 0402 	orr.w	r4, r0, r2
 8003190:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003194:	430b      	orrs	r3, r1
 8003196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800319a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800319e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031a2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031aa:	1cda      	adds	r2, r3, #3
 80031ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031b0:	4413      	add	r3, r2
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031bc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031c0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80031c4:	4623      	mov	r3, r4
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80031cc:	4623      	mov	r3, r4
 80031ce:	061b      	lsls	r3, r3, #24
 80031d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031d4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80031d8:	4623      	mov	r3, r4
 80031da:	4303      	orrs	r3, r0
 80031dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031e0:	462b      	mov	r3, r5
 80031e2:	430b      	orrs	r3, r1
 80031e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031e8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80031ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80031f0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031f8:	1d1a      	adds	r2, r3, #4
 80031fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031fe:	4413      	add	r3, r2
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2200      	movs	r2, #0
 8003206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800320a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800321a:	0023      	movs	r3, r4
 800321c:	2200      	movs	r2, #0
 800321e:	ea40 0402 	orr.w	r4, r0, r2
 8003222:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003226:	430b      	orrs	r3, r1
 8003228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800322c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003230:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003234:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003238:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800323c:	1d5a      	adds	r2, r3, #5
 800323e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800324e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800325e:	0223      	lsls	r3, r4, #8
 8003260:	2200      	movs	r2, #0
 8003262:	ea40 0402 	orr.w	r4, r0, r2
 8003266:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800326a:	430b      	orrs	r3, r1
 800326c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003270:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003274:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003278:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800327c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003280:	1d9a      	adds	r2, r3, #6
 8003282:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003292:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80032a2:	0423      	lsls	r3, r4, #16
 80032a4:	2200      	movs	r2, #0
 80032a6:	ea40 0402 	orr.w	r4, r0, r2
 80032aa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80032ae:	430b      	orrs	r3, r1
 80032b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032b4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80032b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80032bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032c4:	1dda      	adds	r2, r3, #7
 80032c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80032e6:	0623      	lsls	r3, r4, #24
 80032e8:	2200      	movs	r2, #0
 80032ea:	ea40 0402 	orr.w	r4, r0, r2
 80032ee:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80032f2:	430b      	orrs	r3, r1
 80032f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032f8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80032fc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003300:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003304:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003308:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800330c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003310:	3308      	adds	r3, #8
 8003312:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003322:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003326:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800332a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2200      	movs	r2, #0
 8003336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800333a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800333e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003342:	4623      	mov	r3, r4
 8003344:	4303      	orrs	r3, r0
 8003346:	67bb      	str	r3, [r7, #120]	; 0x78
 8003348:	462b      	mov	r3, r5
 800334a:	430b      	orrs	r3, r1
 800334c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800334e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003352:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003356:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800335a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003364:	4413      	add	r3, r2
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2200      	movs	r2, #0
 800336c:	673b      	str	r3, [r7, #112]	; 0x70
 800336e:	677a      	str	r2, [r7, #116]	; 0x74
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800337c:	464c      	mov	r4, r9
 800337e:	0223      	lsls	r3, r4, #8
 8003380:	4644      	mov	r4, r8
 8003382:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003386:	4644      	mov	r4, r8
 8003388:	0222      	lsls	r2, r4, #8
 800338a:	ea40 0402 	orr.w	r4, r0, r2
 800338e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003390:	430b      	orrs	r3, r1
 8003392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003394:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003398:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800339c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033aa:	4413      	add	r3, r2
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	663b      	str	r3, [r7, #96]	; 0x60
 80033b4:	667a      	str	r2, [r7, #100]	; 0x64
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033c2:	464c      	mov	r4, r9
 80033c4:	0423      	lsls	r3, r4, #16
 80033c6:	4644      	mov	r4, r8
 80033c8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80033cc:	4644      	mov	r4, r8
 80033ce:	0422      	lsls	r2, r4, #16
 80033d0:	ea40 0402 	orr.w	r4, r0, r2
 80033d4:	65bc      	str	r4, [r7, #88]	; 0x58
 80033d6:	430b      	orrs	r3, r1
 80033d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033da:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80033de:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80033e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033ea:	1cda      	adds	r2, r3, #3
 80033ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2200      	movs	r2, #0
 80033f8:	653b      	str	r3, [r7, #80]	; 0x50
 80033fa:	657a      	str	r2, [r7, #84]	; 0x54
 80033fc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003400:	4623      	mov	r3, r4
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003406:	4623      	mov	r3, r4
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
 800340c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003410:	4623      	mov	r3, r4
 8003412:	4303      	orrs	r3, r0
 8003414:	643b      	str	r3, [r7, #64]	; 0x40
 8003416:	462b      	mov	r3, r5
 8003418:	430b      	orrs	r3, r1
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
 800341c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003420:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003424:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003428:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800342c:	1d1a      	adds	r2, r3, #4
 800342e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2200      	movs	r2, #0
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
 800343c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003448:	0023      	movs	r3, r4
 800344a:	2200      	movs	r2, #0
 800344c:	ea40 0402 	orr.w	r4, r0, r2
 8003450:	633c      	str	r4, [r7, #48]	; 0x30
 8003452:	430b      	orrs	r3, r1
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
 8003456:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800345a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800345e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003462:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003466:	1d5a      	adds	r2, r3, #5
 8003468:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800346c:	4413      	add	r3, r2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2200      	movs	r2, #0
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
 8003476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003482:	0223      	lsls	r3, r4, #8
 8003484:	2200      	movs	r2, #0
 8003486:	ea40 0402 	orr.w	r4, r0, r2
 800348a:	623c      	str	r4, [r7, #32]
 800348c:	430b      	orrs	r3, r1
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003494:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003498:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800349c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034a0:	3306      	adds	r3, #6
 80034a2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	61fa      	str	r2, [r7, #28]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	69bc      	ldr	r4, [r7, #24]
 80034bc:	0423      	lsls	r3, r4, #16
 80034be:	2200      	movs	r2, #0
 80034c0:	ea40 0402 	orr.w	r4, r0, r2
 80034c4:	613c      	str	r4, [r7, #16]
 80034c6:	430b      	orrs	r3, r1
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80034ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80034d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034da:	3307      	adds	r3, #7
 80034dc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80034e0:	4413      	add	r3, r2
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2200      	movs	r2, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	60fa      	str	r2, [r7, #12]
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	68bc      	ldr	r4, [r7, #8]
 80034f6:	0623      	lsls	r3, r4, #24
 80034f8:	2200      	movs	r2, #0
 80034fa:	ea40 0402 	orr.w	r4, r0, r2
 80034fe:	603c      	str	r4, [r7, #0]
 8003500:	430b      	orrs	r3, r1
 8003502:	607b      	str	r3, [r7, #4]
 8003504:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003508:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 800350c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003510:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003514:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003518:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800351c:	3308      	adds	r3, #8
 800351e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003522:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003526:	4618      	mov	r0, r3
 8003528:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 800352c:	46bd      	mov	sp, r7
 800352e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003532:	4770      	bx	lr

08003534 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	0801111c 	.word	0x0801111c

08003550 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	08011130 	.word	0x08011130

0800356c <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
      data(0)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe faa0 	bl	8001abc <_ZN3ros3MsgC1Ev>
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <_ZN8std_msgs5Int64C1Ev+0x30>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	080112c4 	.word	0x080112c4

080035a0 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80035b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035bc:	6979      	ldr	r1, [r7, #20]
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	4401      	add	r1, r0
 80035c2:	b2d3      	uxtb	r3, r2
 80035c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80035c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	0a02      	lsrs	r2, r0, #8
 80035d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035d8:	0a0b      	lsrs	r3, r1, #8
 80035da:	6979      	ldr	r1, [r7, #20]
 80035dc:	3101      	adds	r1, #1
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	4401      	add	r1, r0
 80035e2:	b2d3      	uxtb	r3, r2
 80035e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80035e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	0c02      	lsrs	r2, r0, #16
 80035f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035f8:	0c0b      	lsrs	r3, r1, #16
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	3102      	adds	r1, #2
 80035fe:	6838      	ldr	r0, [r7, #0]
 8003600:	4401      	add	r1, r0
 8003602:	b2d3      	uxtb	r3, r2
 8003604:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	0e02      	lsrs	r2, r0, #24
 8003614:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003618:	0e0b      	lsrs	r3, r1, #24
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	3103      	adds	r1, #3
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	4401      	add	r1, r0
 8003622:	b2d3      	uxtb	r3, r2
 8003624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8003626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	000a      	movs	r2, r1
 8003634:	2300      	movs	r3, #0
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	3104      	adds	r1, #4
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	4401      	add	r1, r0
 800363e:	b2d3      	uxtb	r3, r2
 8003640:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8003642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	0a0a      	lsrs	r2, r1, #8
 8003650:	2300      	movs	r3, #0
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	3105      	adds	r1, #5
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	4401      	add	r1, r0
 800365a:	b2d3      	uxtb	r3, r2
 800365c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 800365e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	0c0a      	lsrs	r2, r1, #16
 800366c:	2300      	movs	r3, #0
 800366e:	6979      	ldr	r1, [r7, #20]
 8003670:	3106      	adds	r1, #6
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	4401      	add	r1, r0
 8003676:	b2d3      	uxtb	r3, r2
 8003678:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800367a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	0e0a      	lsrs	r2, r1, #24
 8003688:	2300      	movs	r3, #0
 800368a:	6979      	ldr	r1, [r7, #20]
 800368c:	3107      	adds	r1, #7
 800368e:	6838      	ldr	r0, [r7, #0]
 8003690:	4401      	add	r1, r0
 8003692:	b2d3      	uxtb	r3, r2
 8003694:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3308      	adds	r3, #8
 800369a:	617b      	str	r3, [r7, #20]
      return offset;
 800369c:	697b      	ldr	r3, [r7, #20]
    }
 800369e:	4618      	mov	r0, r3
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80036aa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80036ae:	b0a3      	sub	sp, #140	; 0x8c
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6778      	str	r0, [r7, #116]	; 0x74
 80036b4:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80036d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	461c      	mov	r4, r3
 80036dc:	4615      	mov	r5, r2
 80036de:	ea40 0804 	orr.w	r8, r0, r4
 80036e2:	ea41 0905 	orr.w	r9, r1, r5
 80036e6:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036ea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80036ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2200      	movs	r2, #0
 80036fe:	469a      	mov	sl, r3
 8003700:	4693      	mov	fp, r2
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800370e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003712:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003716:	ea40 0402 	orr.w	r4, r0, r2
 800371a:	66bc      	str	r4, [r7, #104]	; 0x68
 800371c:	430b      	orrs	r3, r1
 800371e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003720:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003724:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003728:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800372c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003730:	1c9a      	adds	r2, r3, #2
 8003732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003734:	4413      	add	r3, r2
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2200      	movs	r2, #0
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
 800373e:	667a      	str	r2, [r7, #100]	; 0x64
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800374c:	464c      	mov	r4, r9
 800374e:	0423      	lsls	r3, r4, #16
 8003750:	4644      	mov	r4, r8
 8003752:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003756:	4644      	mov	r4, r8
 8003758:	0422      	lsls	r2, r4, #16
 800375a:	ea40 0402 	orr.w	r4, r0, r2
 800375e:	65bc      	str	r4, [r7, #88]	; 0x58
 8003760:	430b      	orrs	r3, r1
 8003762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003764:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003768:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800376c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003774:	1cda      	adds	r2, r3, #3
 8003776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003778:	4413      	add	r3, r2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2200      	movs	r2, #0
 8003780:	653b      	str	r3, [r7, #80]	; 0x50
 8003782:	657a      	str	r2, [r7, #84]	; 0x54
 8003784:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003788:	4623      	mov	r3, r4
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800378e:	4623      	mov	r3, r4
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	64bb      	str	r3, [r7, #72]	; 0x48
 8003794:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003798:	4623      	mov	r3, r4
 800379a:	4303      	orrs	r3, r0
 800379c:	643b      	str	r3, [r7, #64]	; 0x40
 800379e:	462b      	mov	r3, r5
 80037a0:	430b      	orrs	r3, r1
 80037a2:	647b      	str	r3, [r7, #68]	; 0x44
 80037a4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80037a8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80037ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b4:	1d1a      	adds	r2, r3, #4
 80037b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b8:	4413      	add	r3, r2
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80037ce:	0023      	movs	r3, r4
 80037d0:	2200      	movs	r2, #0
 80037d2:	ea40 0402 	orr.w	r4, r0, r2
 80037d6:	633c      	str	r4, [r7, #48]	; 0x30
 80037d8:	430b      	orrs	r3, r1
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80037e0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80037e4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80037e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037ec:	1d5a      	adds	r2, r3, #5
 80037ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003806:	0223      	lsls	r3, r4, #8
 8003808:	2200      	movs	r2, #0
 800380a:	ea40 0402 	orr.w	r4, r0, r2
 800380e:	623c      	str	r4, [r7, #32]
 8003810:	430b      	orrs	r3, r1
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
 8003814:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003818:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800381c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003824:	3306      	adds	r3, #6
 8003826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003828:	4413      	add	r3, r2
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2200      	movs	r2, #0
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	61fa      	str	r2, [r7, #28]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	69bc      	ldr	r4, [r7, #24]
 800383e:	0423      	lsls	r3, r4, #16
 8003840:	2200      	movs	r2, #0
 8003842:	ea40 0402 	orr.w	r4, r0, r2
 8003846:	613c      	str	r4, [r7, #16]
 8003848:	430b      	orrs	r3, r1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003850:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003854:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385c:	3307      	adds	r3, #7
 800385e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003860:	4413      	add	r3, r2
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2200      	movs	r2, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	60fa      	str	r2, [r7, #12]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	68bc      	ldr	r4, [r7, #8]
 8003876:	0623      	lsls	r3, r4, #24
 8003878:	2200      	movs	r2, #0
 800387a:	ea40 0402 	orr.w	r4, r0, r2
 800387e:	603c      	str	r4, [r7, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003888:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 800388c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003890:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003892:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800389a:	3308      	adds	r3, #8
 800389c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 80038a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 80038a4:	4618      	mov	r0, r3
 80038a6:	378c      	adds	r7, #140	; 0x8c
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80038ae:	4770      	bx	lr

080038b0 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	08011154 	.word	0x08011154

080038cc <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	08011164 	.word	0x08011164

080038e8 <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
      data(0)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe f8e2 	bl	8001abc <_ZN3ros3MsgC1Ev>
 80038f8:	4a07      	ldr	r2, [pc, #28]	; (8003918 <_ZN8std_msgs7Float64C1Ev+0x30>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	080112ac 	.word	0x080112ac

0800391c <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003930:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003938:	6979      	ldr	r1, [r7, #20]
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	4401      	add	r1, r0
 800393e:	b2d3      	uxtb	r3, r2
 8003940:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	0a02      	lsrs	r2, r0, #8
 8003950:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003954:	0a0b      	lsrs	r3, r1, #8
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	3101      	adds	r1, #1
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	4401      	add	r1, r0
 800395e:	b2d3      	uxtb	r3, r2
 8003960:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	0c02      	lsrs	r2, r0, #16
 8003970:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003974:	0c0b      	lsrs	r3, r1, #16
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	3102      	adds	r1, #2
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	4401      	add	r1, r0
 800397e:	b2d3      	uxtb	r3, r2
 8003980:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	0e02      	lsrs	r2, r0, #24
 8003990:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003994:	0e0b      	lsrs	r3, r1, #24
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	3103      	adds	r1, #3
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	4401      	add	r1, r0
 800399e:	b2d3      	uxtb	r3, r2
 80039a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80039a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	000a      	movs	r2, r1
 80039b0:	2300      	movs	r3, #0
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	3104      	adds	r1, #4
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	4401      	add	r1, r0
 80039ba:	b2d3      	uxtb	r3, r2
 80039bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80039be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	0a0a      	lsrs	r2, r1, #8
 80039cc:	2300      	movs	r3, #0
 80039ce:	6979      	ldr	r1, [r7, #20]
 80039d0:	3105      	adds	r1, #5
 80039d2:	6838      	ldr	r0, [r7, #0]
 80039d4:	4401      	add	r1, r0
 80039d6:	b2d3      	uxtb	r3, r2
 80039d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80039da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039de:	f04f 0200 	mov.w	r2, #0
 80039e2:	f04f 0300 	mov.w	r3, #0
 80039e6:	0c0a      	lsrs	r2, r1, #16
 80039e8:	2300      	movs	r3, #0
 80039ea:	6979      	ldr	r1, [r7, #20]
 80039ec:	3106      	adds	r1, #6
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	4401      	add	r1, r0
 80039f2:	b2d3      	uxtb	r3, r2
 80039f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80039f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	0e0a      	lsrs	r2, r1, #24
 8003a04:	2300      	movs	r3, #0
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	3107      	adds	r1, #7
 8003a0a:	6838      	ldr	r0, [r7, #0]
 8003a0c:	4401      	add	r1, r0
 8003a0e:	b2d3      	uxtb	r3, r2
 8003a10:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3308      	adds	r3, #8
 8003a16:	617b      	str	r3, [r7, #20]
      return offset;
 8003a18:	697b      	ldr	r3, [r7, #20]
    }
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a26:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003a2a:	b0a3      	sub	sp, #140	; 0x8c
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6778      	str	r0, [r7, #116]	; 0x74
 8003a30:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a44:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a4e:	4413      	add	r3, r2
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2200      	movs	r2, #0
 8003a56:	461c      	mov	r4, r3
 8003a58:	4615      	mov	r5, r2
 8003a5a:	ea40 0804 	orr.w	r8, r0, r4
 8003a5e:	ea41 0905 	orr.w	r9, r1, r5
 8003a62:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a66:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a72:	4413      	add	r3, r2
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	469a      	mov	sl, r3
 8003a7c:	4693      	mov	fp, r2
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003a8a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003a8e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003a92:	ea40 0402 	orr.w	r4, r0, r2
 8003a96:	66bc      	str	r4, [r7, #104]	; 0x68
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a9c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003aa0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003aa4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab0:	4413      	add	r3, r2
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aba:	667a      	str	r2, [r7, #100]	; 0x64
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ac8:	464c      	mov	r4, r9
 8003aca:	0423      	lsls	r3, r4, #16
 8003acc:	4644      	mov	r4, r8
 8003ace:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003ad2:	4644      	mov	r4, r8
 8003ad4:	0422      	lsls	r2, r4, #16
 8003ad6:	ea40 0402 	orr.w	r4, r0, r2
 8003ada:	65bc      	str	r4, [r7, #88]	; 0x58
 8003adc:	430b      	orrs	r3, r1
 8003ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003ae4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ae8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003af0:	1cda      	adds	r2, r3, #3
 8003af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2200      	movs	r2, #0
 8003afc:	653b      	str	r3, [r7, #80]	; 0x50
 8003afe:	657a      	str	r2, [r7, #84]	; 0x54
 8003b00:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003b04:	4623      	mov	r3, r4
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b10:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b14:	4623      	mov	r3, r4
 8003b16:	4303      	orrs	r3, r0
 8003b18:	643b      	str	r3, [r7, #64]	; 0x40
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b24:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b30:	1d1a      	adds	r2, r3, #4
 8003b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b34:	4413      	add	r3, r2
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b4a:	0023      	movs	r3, r4
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	ea40 0402 	orr.w	r4, r0, r2
 8003b52:	633c      	str	r4, [r7, #48]	; 0x30
 8003b54:	430b      	orrs	r3, r1
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b5c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b60:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b68:	1d5a      	adds	r2, r3, #5
 8003b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2200      	movs	r2, #0
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003b82:	0223      	lsls	r3, r4, #8
 8003b84:	2200      	movs	r2, #0
 8003b86:	ea40 0402 	orr.w	r4, r0, r2
 8003b8a:	623c      	str	r4, [r7, #32]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b94:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b98:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba0:	3306      	adds	r3, #6
 8003ba2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2200      	movs	r2, #0
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	61fa      	str	r2, [r7, #28]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	69bc      	ldr	r4, [r7, #24]
 8003bba:	0423      	lsls	r3, r4, #16
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	ea40 0402 	orr.w	r4, r0, r2
 8003bc2:	613c      	str	r4, [r7, #16]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003bcc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bd0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bd8:	3307      	adds	r3, #7
 8003bda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	60fa      	str	r2, [r7, #12]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	68bc      	ldr	r4, [r7, #8]
 8003bf2:	0623      	lsls	r3, r4, #24
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	ea40 0402 	orr.w	r4, r0, r2
 8003bfa:	603c      	str	r4, [r7, #0]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c04:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003c08:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003c0c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003c0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c16:	3308      	adds	r3, #8
 8003c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003c20:	4618      	mov	r0, r3
 8003c22:	378c      	adds	r7, #140	; 0x8c
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003c2a:	4770      	bx	lr

08003c2c <_ZN8std_msgs7Float647getTypeEv>:

    const char * getType(){ return "std_msgs/Float64"; };
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	08011188 	.word	0x08011188

08003c48 <_ZN8std_msgs7Float646getMD5Ev>:
    const char * getMD5(){ return "fdb28210bfa9d7c91146260178d9a584"; };
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	0801119c 	.word	0x0801119c

08003c64 <_ZN3ROS9pub_resetEv>:
ros::Publisher reset_pub("reset_fromSTM", &reset);
//ros::Publisher micro_pub("microswitch_fromSTM", &microswitch);
ros::Publisher scara_pub("scaraflag_fromSTM", &scaraflag);

/** RESET **/
void ROS::pub_reset(void){
 8003c64:	b5b0      	push	{r4, r5, r7, lr}
 8003c66:	af00      	add	r7, sp, #0
	MYRESET::receive();
 8003c68:	f7fd febc 	bl	80019e4 <_ZN7MYRESET7receiveEv>
	reset.data = MYRESET::state;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <_ZN3ROS9pub_resetEv+0x24>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	17da      	asrs	r2, r3, #31
 8003c72:	461c      	mov	r4, r3
 8003c74:	4615      	mov	r5, r2
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <_ZN3ROS9pub_resetEv+0x28>)
 8003c78:	e9c3 4502 	strd	r4, r5, [r3, #8]
	reset_pub.publish(&reset);
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <_ZN3ROS9pub_resetEv+0x28>)
 8003c7e:	4804      	ldr	r0, [pc, #16]	; (8003c90 <_ZN3ROS9pub_resetEv+0x2c>)
 8003c80:	f7fe fd69 	bl	8002756 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003c84:	bf00      	nop
 8003c86:	bdb0      	pop	{r4, r5, r7, pc}
 8003c88:	240007a8 	.word	0x240007a8
 8003c8c:	24002138 	.word	0x24002138
 8003c90:	24002214 	.word	0x24002214

08003c94 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE>:


/** SCARA **/
void ROS::scara_callback(const geometry_msgs::Point &msg){
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	sc.x = msg.x;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003ca2:	490b      	ldr	r1, [pc, #44]	; (8003cd0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003ca4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sc.y = msg.y;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003cb0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	sc.flag = msg.z;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cba:	4905      	ldr	r1, [pc, #20]	; (8003cd0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003cbc:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	sc.run();
 8003cc0:	4803      	ldr	r0, [pc, #12]	; (8003cd0 <_ZN3ROS14scara_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003cc2:	f001 f8e5 	bl	8004e90 <_ZN5SCARA3runEv>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	24002240 	.word	0x24002240

08003cd4 <_ZN3ROS13pub_scaraflagEv>:

void ROS::pub_scaraflag(void){
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	scaraflag.data = sc.flag;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <_ZN3ROS13pub_scaraflagEv+0x1c>)
 8003cda:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003cde:	4905      	ldr	r1, [pc, #20]	; (8003cf4 <_ZN3ROS13pub_scaraflagEv+0x20>)
 8003ce0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	scara_pub.publish(&scaraflag);
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <_ZN3ROS13pub_scaraflagEv+0x20>)
 8003ce6:	4804      	ldr	r0, [pc, #16]	; (8003cf8 <_ZN3ROS13pub_scaraflagEv+0x24>)
 8003ce8:	f7fe fd35 	bl	8002756 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	24002240 	.word	0x24002240
 8003cf4:	24002148 	.word	0x24002148
 8003cf8:	24002228 	.word	0x24002228

08003cfc <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE>:

/** INTAKE **/
void ROS::intake_callback(const geometry_msgs::Point &msg){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	INTAKE::tilt = msg.x;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d0a:	490a      	ldr	r1, [pc, #40]	; (8003d34 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x38>)
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::stretch = msg.y;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d16:	4908      	ldr	r1, [pc, #32]	; (8003d38 <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d18:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::suck = msg.z;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d22:	4906      	ldr	r1, [pc, #24]	; (8003d3c <_ZN3ROS15intake_callbackERKN13geometry_msgs5PointE+0x40>)
 8003d24:	e9c1 2300 	strd	r2, r3, [r1]
	INTAKE::run();
 8003d28:	f7fc fe48 	bl	80009bc <_ZN6INTAKE3runEv>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	24000268 	.word	0x24000268
 8003d38:	24000270 	.word	0x24000270
 8003d3c:	24000278 	.word	0x24000278

08003d40 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:
//}



/** CHASSIS -- mecanum **/
void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d4e:	490b      	ldr	r1, [pc, #44]	; (8003d7c <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d50:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d5a:	4908      	ldr	r1, [pc, #32]	; (8003d7c <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d66:	4905      	ldr	r1, [pc, #20]	; (8003d7c <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d68:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003d6c:	4803      	ldr	r0, [pc, #12]	; (8003d7c <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003d6e:	f7fd fcfd 	bl	800176c <_ZN7Mecanum3runEv>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000748 	.word	0x24000748

08003d80 <_ZN3ROS11pub_car_velEv>:

void ROS::pub_car_vel(void){
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
	car_speed.x = mecanum.CAR_Now.Vx;
 8003d84:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <_ZN3ROS11pub_car_velEv+0x34>)
 8003d86:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d8a:	490b      	ldr	r1, [pc, #44]	; (8003db8 <_ZN3ROS11pub_car_velEv+0x38>)
 8003d8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <_ZN3ROS11pub_car_velEv+0x34>)
 8003d92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003d96:	4908      	ldr	r1, [pc, #32]	; (8003db8 <_ZN3ROS11pub_car_velEv+0x38>)
 8003d98:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <_ZN3ROS11pub_car_velEv+0x34>)
 8003d9e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003da2:	4905      	ldr	r1, [pc, #20]	; (8003db8 <_ZN3ROS11pub_car_velEv+0x38>)
 8003da4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <_ZN3ROS11pub_car_velEv+0x38>)
 8003daa:	4804      	ldr	r0, [pc, #16]	; (8003dbc <_ZN3ROS11pub_car_velEv+0x3c>)
 8003dac:	f7fe fcd3 	bl	8002756 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	24000748 	.word	0x24000748
 8003db8:	24002118 	.word	0x24002118
 8003dbc:	24002200 	.word	0x24002200

08003dc0 <_ZN3ROS5setupEv>:


/** ROS setup and loop **/
void ROS::setup(void){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
	nh.initNode();
 8003dc4:	480e      	ldr	r0, [pc, #56]	; (8003e00 <_ZN3ROS5setupEv+0x40>)
 8003dc6:	f000 f979 	bl	80040bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.advertise(mecanum_pub);
 8003dca:	490e      	ldr	r1, [pc, #56]	; (8003e04 <_ZN3ROS5setupEv+0x44>)
 8003dcc:	480c      	ldr	r0, [pc, #48]	; (8003e00 <_ZN3ROS5setupEv+0x40>)
 8003dce:	f000 f99e 	bl	800410e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.advertise(reset_pub);
 8003dd2:	490d      	ldr	r1, [pc, #52]	; (8003e08 <_ZN3ROS5setupEv+0x48>)
 8003dd4:	480a      	ldr	r0, [pc, #40]	; (8003e00 <_ZN3ROS5setupEv+0x40>)
 8003dd6:	f000 f99a 	bl	800410e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
    nh.advertise(scara_pub);
 8003dda:	490c      	ldr	r1, [pc, #48]	; (8003e0c <_ZN3ROS5setupEv+0x4c>)
 8003ddc:	4808      	ldr	r0, [pc, #32]	; (8003e00 <_ZN3ROS5setupEv+0x40>)
 8003dde:	f000 f996 	bl	800410e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
//    nh.advertise(micro_pub);
    nh.subscribe(mecanum_sub);
 8003de2:	490b      	ldr	r1, [pc, #44]	; (8003e10 <_ZN3ROS5setupEv+0x50>)
 8003de4:	4806      	ldr	r0, [pc, #24]	; (8003e00 <_ZN3ROS5setupEv+0x40>)
 8003de6:	f000 f9c2 	bl	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(intake_sub);
 8003dea:	490a      	ldr	r1, [pc, #40]	; (8003e14 <_ZN3ROS5setupEv+0x54>)
 8003dec:	4804      	ldr	r0, [pc, #16]	; (8003e00 <_ZN3ROS5setupEv+0x40>)
 8003dee:	f000 f9be 	bl	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.subscribe(scara_sub);
 8003df2:	4909      	ldr	r1, [pc, #36]	; (8003e18 <_ZN3ROS5setupEv+0x58>)
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <_ZN3ROS5setupEv+0x40>)
 8003df6:	f000 f9ba 	bl	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	240007bc 	.word	0x240007bc
 8003e04:	24002200 	.word	0x24002200
 8003e08:	24002214 	.word	0x24002214
 8003e0c:	24002228 	.word	0x24002228
 8003e10:	24002158 	.word	0x24002158
 8003e14:	24002190 	.word	0x24002190
 8003e18:	240021c8 	.word	0x240021c8

08003e1c <_ZN3ROS4loopEv>:

void ROS::loop(void){
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <_ZN3ROS4loopEv+0x10>)
 8003e22:	f000 f9cf 	bl	80041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	240007bc 	.word	0x240007bc

08003e30 <HAL_UART_TxCpltCallback>:


/* UART Communication */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003e38:	4805      	ldr	r0, [pc, #20]	; (8003e50 <HAL_UART_TxCpltCallback+0x20>)
 8003e3a:	f000 fc3b 	bl	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe fdc1 	bl	80029c8 <_ZN13STM32Hardware5flushEv>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	240007bc 	.word	0x240007bc

08003e54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003e5c:	4805      	ldr	r0, [pc, #20]	; (8003e74 <HAL_UART_RxCpltCallback+0x20>)
 8003e5e:	f000 fc29 	bl	80046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fd70 	bl	800294a <_ZN13STM32Hardware10reset_rbufEv>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	240007bc 	.word	0x240007bc

08003e78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d80d      	bhi.n	8003ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	fa22 f103 	lsr.w	r1, r2, r3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	b2ca      	uxtb	r2, r1
 8003e9e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e7ee      	b.n	8003e86 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d811      	bhi.n	8003ef2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	4611      	mov	r1, r2
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	00d2      	lsls	r2, r2, #3
 8003ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3301      	adds	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e7ea      	b.n	8003ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	0801130c 	.word	0x0801130c

08003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ffe8 	bl	8003f00 <_ZN3ros15NodeHandleBase_C1Ev>
 8003f30:	4a47      	ldr	r2, [pc, #284]	; (8004050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x130>)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fcda 	bl	80028f4 <_ZN13STM32HardwareC1Ev>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	f641 1314 	movw	r3, #6420	; 0x1914
 8003f52:	4413      	add	r3, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f925 	bl	80021a4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b18      	cmp	r3, #24
 8003f62:	d80b      	bhi.n	8003f7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	3301      	adds	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e7f0      	b.n	8003f5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b18      	cmp	r3, #24
 8003f84:	d80a      	bhi.n	8003f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	3301      	adds	r3, #1
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	e7f1      	b.n	8003f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa6:	d20b      	bcs.n	8003fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa0>
      message_in[i] = 0;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	441a      	add	r2, r3
 8003fae:	f241 0324 	movw	r3, #4132	; 0x1024
 8003fb2:	4413      	add	r3, r2
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e7ef      	b.n	8003fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d20b      	bcs.n	8003fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc4>
      message_out[i] = 0;
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	f241 4324 	movw	r3, #5156	; 0x1424
 8003fd6:	4413      	add	r3, r2
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	e7ef      	b.n	8003fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004006:	461a      	mov	r2, r3
 8004008:	2300      	movs	r3, #0
 800400a:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
    req_param_resp.floats = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	461a      	mov	r2, r3
 8004016:	2300      	movs	r3, #0
 8004018:	f8c2 392c 	str.w	r3, [r2, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
    req_param_resp.ints = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004030:	461a      	mov	r2, r3
 8004032:	2300      	movs	r3, #0
 8004034:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920

    spin_timeout_ = 0;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403e:	461a      	mov	r2, r3
 8004040:	2300      	movs	r3, #0
 8004042:	6213      	str	r3, [r2, #32]
  }
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	08011298 	.word	0x08011298

08004054 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	080112f4 	.word	0x080112f4

08004074 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ffe5 	bl	8004054 <_ZN3ros11Subscriber_C1Ev>
 800408a:	4a0b      	ldr	r2, [pc, #44]	; (80040b8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3310      	adds	r3, #16
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe fd53 	bl	8002b40 <_ZN13geometry_msgs5PointC1Ev>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
  };
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	08011280 	.word	0x08011280

080040bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fc33 	bl	8002934 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d4:	461a      	mov	r2, r3
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
    bytes_ = 0;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
    index_ = 0;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f0:	461a      	mov	r2, r3
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
    topic_ = 0;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  };
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b18      	cmp	r3, #24
 8004120:	dc1e      	bgt.n	8004160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d111      	bne.n	8004158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	60da      	str	r2, [r3, #12]
        return true;
 8004154:	2301      	movs	r3, #1
 8004156:	e004      	b.n	8004162 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e7dd      	b.n	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004160:	2300      	movs	r3, #0
  }
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b18      	cmp	r3, #24
 8004180:	dc19      	bgt.n	80041b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800418a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10d      	bne.n	80041ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800419c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	605a      	str	r2, [r3, #4]
        return true;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e004      	b.n	80041b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e7e2      	b.n	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80041b6:	2300      	movs	r3, #0
  }
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fca9 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 80041d6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041de:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d905      	bls.n	80041fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004200:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	429a      	cmp	r2, r3
 8004216:	d906      	bls.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	461a      	mov	r2, r3
 8004220:	2300      	movs	r3, #0
 8004222:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d015      	beq.n	800425e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fc76 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad2      	subs	r2, r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	429a      	cmp	r2, r3
 800424c:	bf8c      	ite	hi
 800424e:	2301      	movhi	r3, #1
 8004250:	2300      	movls	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8004258:	f06f 0301 	mvn.w	r3, #1
 800425c:	e226      	b.n	80046ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fb82 	bl	800296c <_ZN13STM32Hardware4readEv>
 8004268:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f2c0 81ff 	blt.w	8004670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4413      	add	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004286:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004290:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004294:	2b07      	cmp	r3, #7
 8004296:	d12d      	bne.n	80042f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80042aa:	f8c1 28f8 	str.w	r2, [r1, #2296]	; 0x8f8
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	b2d1      	uxtb	r1, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	441a      	add	r2, r3
 80042b6:	f241 0324 	movw	r3, #4132	; 0x1024
 80042ba:	4413      	add	r3, r2
 80042bc:	460a      	mov	r2, r1
 80042be:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80042ca:	3b01      	subs	r3, #1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042d2:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042dc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1a0      	bne.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	461a      	mov	r2, r3
 80042ec:	2308      	movs	r3, #8
 80042ee:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 80042f2:	e798      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d130      	bne.n	8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2bff      	cmp	r3, #255	; 0xff
 8004306:	d112      	bne.n	800432e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x16a>
          mode_++;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004312:	3301      	adds	r3, #1
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800431a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3314      	adds	r3, #20
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004328:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
 800432c:	e77b      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fbf8 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	bf8c      	ite	hi
 8004346:	2301      	movhi	r3, #1
 8004348:	2300      	movls	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	f43f af6a 	beq.w	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800435e:	f06f 0301 	mvn.w	r3, #1
 8004362:	e1a3      	b.n	80046ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800436a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800436e:	2b01      	cmp	r3, #1
 8004370:	d121      	bne.n	80043b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2bfe      	cmp	r3, #254	; 0xfe
 8004376:	d10b      	bne.n	8004390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1cc>
          mode_++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004382:	3301      	adds	r3, #1
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800438a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800438e:	e74a      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004396:	461a      	mov	r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
          if (configured_ == false)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f47f af3c 	bne.w	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f98c 	bl	80046cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80043b4:	e737      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d120      	bne.n	8004406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x242>
        bytes_ = data;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        index_ = 0;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	461a      	mov	r2, r3
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
        mode_++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80043ea:	3301      	adds	r3, #1
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043f2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 8004404:	e70f      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004410:	2b03      	cmp	r3, #3
 8004412:	d118      	bne.n	8004446 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	4413      	add	r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800442a:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
        mode_++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004434:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004438:	3301      	adds	r3, #1
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004440:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8004444:	e6ef      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004450:	2b04      	cmp	r3, #4
 8004452:	d11f      	bne.n	8004494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800445e:	425a      	negs	r2, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	bf58      	it	pl
 8004466:	4253      	negpl	r3, r2
 8004468:	2bff      	cmp	r3, #255	; 0xff
 800446a:	d10b      	bne.n	8004484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c0>
          mode_++;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004472:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004476:	3301      	adds	r3, #1
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800447e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8004482:	e6d0      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448a:	461a      	mov	r2, r3
 800448c:	2300      	movs	r3, #0
 800448e:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 8004492:	e6c8      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d119      	bne.n	80044d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x312>
        topic_ = data;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044ba:	3301      	adds	r3, #1
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044c2:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	461a      	mov	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
 80044d4:	e6a7      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044dc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d123      	bne.n	800452c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ea:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	4413      	add	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044fa:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004504:	461a      	mov	r2, r3
 8004506:	2307      	movs	r3, #7
 8004508:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if (bytes_ == 0)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004512:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004516:	2b00      	cmp	r3, #0
 8004518:	f47f ae85 	bne.w	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004522:	461a      	mov	r2, r3
 8004524:	2308      	movs	r3, #8
 8004526:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
 800452a:	e67c      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004536:	2b08      	cmp	r3, #8
 8004538:	f47f ae75 	bne.w	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	461a      	mov	r2, r3
 8004544:	2300      	movs	r3, #0
 8004546:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004554:	425a      	negs	r2, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	bf58      	it	pl
 800455c:	4253      	negpl	r3, r2
 800455e:	2bff      	cmp	r3, #255	; 0xff
 8004560:	f47f ae61 	bne.w	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8aa 	bl	80046cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8c6 	bl	800470a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	461a      	mov	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f8c2 3908 	str.w	r3, [r2, #2312]	; 0x908
            return SPIN_ERR;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	e085      	b.n	80046ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80045aa:	2b0a      	cmp	r3, #10
 80045ac:	d108      	bne.n	80045c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	f241 0324 	movw	r3, #4132	; 0x1024
 80045b4:	4413      	add	r3, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f987 	bl	80048cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80045be:	e632      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80045ca:	2b06      	cmp	r3, #6
 80045cc:	d112      	bne.n	80045f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	f641 1314 	movw	r3, #6420	; 0x1914
 80045d4:	4413      	add	r3, r2
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	f241 0224 	movw	r2, #4132	; 0x1024
 80045dc:	440a      	add	r2, r1
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd ff14 	bl	800240e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80045f2:	e618      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80045fe:	2b0b      	cmp	r3, #11
 8004600:	d106      	bne.n	8004610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x44c>
            configured_ = false;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800460e:	e60a      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800461a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f43f adfc 	beq.w	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004634:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004638:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004642:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004650:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800465a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	f241 0324 	movw	r3, #4132	; 0x1024
 8004668:	440b      	add	r3, r1
 800466a:	4619      	mov	r1, r3
 800466c:	4790      	blx	r2
    while (true)
 800466e:	e5da      	b.n	8004226 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 8004670:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800467c:	2b00      	cmp	r3, #0
 800467e:	d014      	beq.n	80046aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004686:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004692:	4293      	cmp	r3, r2
 8004694:	d909      	bls.n	80046aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f818 	bl	80046cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a2:	461a      	mov	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
    return SPIN_OK;
 80046aa:	2300      	movs	r3, #0
  }
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
    return &hardware_;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3304      	adds	r3, #4
  }
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80046d4:	f107 030c 	add.w	r3, r7, #12
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fd f9ff 	bl	8001adc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f107 020c 	add.w	r2, r7, #12
 80046e8:	210a      	movs	r1, #10
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
    rt_time = hardware_.time();
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fa18 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004700:	615a      	str	r2, [r3, #20]
  }
 8004702:	bf00      	nop
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800470a:	b590      	push	{r4, r7, lr}
 800470c:	b08b      	sub	sp, #44	; 0x2c
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004712:	f107 030c 	add.w	r3, r7, #12
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd fad0 	bl	8001cbc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	2b18      	cmp	r3, #24
 8004724:	dc63      	bgt.n	80047ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d056      	beq.n	80047e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	b29b      	uxth	r3, r3
 800474a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4608      	mov	r0, r1
 8004786:	4798      	blx	r3
 8004788:	4603      	mov	r3, r0
 800478a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4608      	mov	r0, r1
 80047b4:	4798      	blx	r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80047ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047be:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681c      	ldr	r4, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fd ffd2 	bl	800277e <_ZN3ros9Publisher15getEndpointTypeEv>
 80047da:	4601      	mov	r1, r0
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	461a      	mov	r2, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	3301      	adds	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	e798      	b.n	8004720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	2b18      	cmp	r3, #24
 80047f6:	dc5f      	bgt.n	80048b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d053      	beq.n	80048b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b29b      	uxth	r3, r3
 8004818:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004832:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483a:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800483e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4608      	mov	r0, r1
 800484a:	4798      	blx	r3
 800484c:	4603      	mov	r3, r0
 800484e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004854:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004860:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4608      	mov	r0, r1
 8004870:	4798      	blx	r3
 8004872:	4603      	mov	r3, r0
 8004874:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681c      	ldr	r4, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004886:	f202 6222 	addw	r2, r2, #1570	; 0x622
 800488a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004892:	f202 6222 	addw	r2, r2, #1570	; 0x622
 8004896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3304      	adds	r3, #4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4608      	mov	r0, r1
 80048a2:	4798      	blx	r3
 80048a4:	4601      	mov	r1, r0
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	461a      	mov	r2, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	3301      	adds	r3, #1
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	e79c      	b.n	80047f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80048c4:	bf00      	nop
 80048c6:	372c      	adds	r7, #44	; 0x2c
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}

080048cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80048d6:	f107 0308 	add.w	r3, r7, #8
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd f8fe 	bl	8001adc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe f91f 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 80048ea:	4602      	mov	r2, r0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd f95c 	bl	8001bbc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	4915      	ldr	r1, [pc, #84]	; (8004960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 800490a:	fba1 1303 	umull	r1, r3, r1, r3
 800490e:	099b      	lsrs	r3, r3, #6
 8004910:	4413      	add	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004914:	6939      	ldr	r1, [r7, #16]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 800491a:	fba3 0302 	umull	r0, r3, r3, r2
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004924:	fb00 f303 	mul.w	r3, r0, r3
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	440b      	add	r3, r1
 8004932:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004934:	f107 0308 	add.w	r3, r7, #8
 8004938:	3304      	adds	r3, #4
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f8bf 	bl	8004ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe f8ee 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004958:	bf00      	nop
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	10624dd3 	.word	0x10624dd3
 8004964:	000f4240 	.word	0x000f4240

08004968 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b63      	cmp	r3, #99	; 0x63
 8004978:	dd0b      	ble.n	8004992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004984:	f083 0301 	eor.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800498e:	2300      	movs	r3, #0
 8004990:	e090      	b.n	8004ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68f9      	ldr	r1, [r7, #12]
 800499a:	f241 4324 	movw	r3, #5156	; 0x1424
 800499e:	440b      	add	r3, r1
 80049a0:	3307      	adds	r3, #7
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4790      	blx	r2
 80049a8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	22ff      	movs	r2, #255	; 0xff
 80049b2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	22fe      	movs	r2, #254	; 0xfe
 80049be:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049cc:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	0a1b      	lsrs	r3, r3, #8
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e0:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 80049f8:	4413      	add	r3, r2
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a06:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a14:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	b21b      	sxth	r3, r3
 8004a1c:	121b      	asrs	r3, r3, #8
 8004a1e:	b21b      	sxth	r3, r3
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a28:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a30:	2305      	movs	r3, #5
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3306      	adds	r3, #6
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	dc0e      	bgt.n	8004a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	441a      	add	r2, r3
 8004a44:	f241 4324 	movw	r3, #5156	; 0x1424
 8004a48:	4413      	add	r3, r2
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	3301      	adds	r3, #1
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e7eb      	b.n	8004a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	3307      	adds	r3, #7
 8004a60:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	425a      	negs	r2, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	bf58      	it	pl
 8004a6c:	4253      	negpl	r3, r2
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	6179      	str	r1, [r7, #20]
 8004a76:	43d2      	mvns	r2, r2
 8004a78:	b2d1      	uxtb	r1, r2
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	f241 4324 	movw	r3, #5156	; 0x1424
 8004a82:	4413      	add	r3, r2
 8004a84:	460a      	mov	r2, r1
 8004a86:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	dc0b      	bgt.n	8004aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1d18      	adds	r0, r3, #4
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	f241 4324 	movw	r3, #5156	; 0x1424
 8004a9a:	4413      	add	r3, r2
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	f7fd fff8 	bl	8002a94 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	e005      	b.n	8004ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004aa8:	4904      	ldr	r1, [pc, #16]	; (8004abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x154>)
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f84c 	bl	8004b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004ab0:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	080111c0 	.word	0x080111c0

08004ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe f82a 	bl	8002b28 <_ZN13STM32Hardware4timeEv>
 8004ad4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4917      	ldr	r1, [pc, #92]	; (8004b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004ade:	fba1 1303 	umull	r1, r3, r1, r3
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004aee:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6859      	ldr	r1, [r3, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004af8:	fba3 0302 	umull	r0, r3, r3, r2
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x80>)
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	1aca      	subs	r2, r1, r3
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x84>)
 8004b12:	4413      	add	r3, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b1a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004b22:	4413      	add	r3, r2
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	f241 021c 	movw	r2, #4124	; 0x101c
 8004b2a:	440a      	add	r2, r1
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb fd78 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	10624dd3 	.word	0x10624dd3
 8004b40:	000f4240 	.word	0x000f4240
 8004b44:	3b9aca00 	.word	0x3b9aca00

08004b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	2103      	movs	r1, #3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f804 	bl	8004b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fa64 	bl	8002044 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004b7c:	7afb      	ldrb	r3, [r7, #11]
 8004b7e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f107 0214 	add.w	r2, r7, #20
 8004b8e:	2107      	movs	r1, #7
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	4798      	blx	r3
  }
 8004b94:	bf00      	nop
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_Z41__static_initialization_and_destruction_0ii>:
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d137      	bne.n	8004c1c <_Z41__static_initialization_and_destruction_0ii+0x80>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d132      	bne.n	8004c1c <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 8004bb6:	481b      	ldr	r0, [pc, #108]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004bb8:	f7ff f9b2 	bl	8003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point microswitch;
 8004bbc:	481a      	ldr	r0, [pc, #104]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004bbe:	f7fd ffbf 	bl	8002b40 <_ZN13geometry_msgs5PointC1Ev>
geometry_msgs::Point car_speed;
 8004bc2:	481a      	ldr	r0, [pc, #104]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004bc4:	f7fd ffbc 	bl	8002b40 <_ZN13geometry_msgs5PointC1Ev>
std_msgs::Int64 reset;
 8004bc8:	4819      	ldr	r0, [pc, #100]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004bca:	f7fe fccf 	bl	800356c <_ZN8std_msgs5Int64C1Ev>
std_msgs::Float64 scaraflag;
 8004bce:	4819      	ldr	r0, [pc, #100]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004bd0:	f7fe fe8a 	bl	80038e8 <_ZN8std_msgs7Float64C1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004bd8:	4918      	ldr	r1, [pc, #96]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004bda:	4819      	ldr	r0, [pc, #100]	; (8004c40 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004bdc:	f7ff fa4a 	bl	8004074 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> intake_sub("intake_toSTM", ROS::intake_callback);
 8004be0:	2301      	movs	r3, #1
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004be4:	4918      	ldr	r1, [pc, #96]	; (8004c48 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004be6:	4819      	ldr	r0, [pc, #100]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004be8:	f7ff fa44 	bl	8004074 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> scara_sub("scara_toSTM", ROS::scara_callback);
 8004bec:	2301      	movs	r3, #1
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004bf0:	4918      	ldr	r1, [pc, #96]	; (8004c54 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004bf2:	4819      	ldr	r0, [pc, #100]	; (8004c58 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004bf4:	f7ff fa3e 	bl	8004074 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004bfc:	4917      	ldr	r1, [pc, #92]	; (8004c5c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004bfe:	4818      	ldr	r0, [pc, #96]	; (8004c60 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004c00:	f7fd fd92 	bl	8002728 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher reset_pub("reset_fromSTM", &reset);
 8004c04:	2300      	movs	r3, #0
 8004c06:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004c08:	4916      	ldr	r1, [pc, #88]	; (8004c64 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8004c0a:	4817      	ldr	r0, [pc, #92]	; (8004c68 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8004c0c:	f7fd fd8c 	bl	8002728 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher scara_pub("scaraflag_fromSTM", &scaraflag);
 8004c10:	2300      	movs	r3, #0
 8004c12:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004c14:	4915      	ldr	r1, [pc, #84]	; (8004c6c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8004c16:	4816      	ldr	r0, [pc, #88]	; (8004c70 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8004c18:	f7fd fd86 	bl	8002728 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	240007bc 	.word	0x240007bc
 8004c28:	240020f8 	.word	0x240020f8
 8004c2c:	24002118 	.word	0x24002118
 8004c30:	24002138 	.word	0x24002138
 8004c34:	24002148 	.word	0x24002148
 8004c38:	08003d41 	.word	0x08003d41
 8004c3c:	080111fc 	.word	0x080111fc
 8004c40:	24002158 	.word	0x24002158
 8004c44:	08003cfd 	.word	0x08003cfd
 8004c48:	0801120c 	.word	0x0801120c
 8004c4c:	24002190 	.word	0x24002190
 8004c50:	08003c95 	.word	0x08003c95
 8004c54:	0801121c 	.word	0x0801121c
 8004c58:	240021c8 	.word	0x240021c8
 8004c5c:	08011228 	.word	0x08011228
 8004c60:	24002200 	.word	0x24002200
 8004c64:	08011238 	.word	0x08011238
 8004c68:	24002214 	.word	0x24002214
 8004c6c:	08011248 	.word	0x08011248
 8004c70:	24002228 	.word	0x24002228

08004c74 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3310      	adds	r3, #16
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe f8f6 	bl	8002e76 <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	3210      	adds	r2, #16
 8004c92:	4610      	mov	r0, r2
 8004c94:	4798      	blx	r3
  }
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3310      	adds	r3, #16
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fc36 	bl	8003534 <_ZN13geometry_msgs5Point7getTypeEv>
 8004cc8:	4603      	mov	r3, r0
  }
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3310      	adds	r3, #16
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fc36 	bl	8003550 <_ZN13geometry_msgs5Point6getMD5Ev>
 8004ce4:	4603      	mov	r3, r0
  }
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
    return configured_;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <_GLOBAL__sub_I_nh>:
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d14:	2001      	movs	r0, #1
 8004d16:	f7ff ff41 	bl	8004b9c <_Z41__static_initialization_and_destruction_0ii>
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	0000      	movs	r0, r0
	...

08004d20 <_ZN5SCARAC1Ev>:
#define AIR_PORT GPIOA
#define AIR_PIN GPIO_PIN_5

extern TIM_HandleTypeDef htim23;

struct SCARA{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	4b4f      	ldr	r3, [pc, #316]	; (8004e88 <_ZN5SCARAC1Ev+0x168>)
 8004d4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	a347      	add	r3, pc, #284	; (adr r3, 8004e70 <_ZN5SCARAC1Ev+0x150>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	a341      	add	r3, pc, #260	; (adr r3, 8004e70 <_ZN5SCARAC1Ev+0x150>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <_ZN5SCARAC1Ev+0x16c>)
 8004d82:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <_ZN5SCARAC1Ev+0x16c>)
 8004d9c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	661a      	str	r2, [r3, #96]	; 0x60
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	a325      	add	r3, pc, #148	; (adr r3, 8004e78 <_ZN5SCARAC1Ev+0x158>)
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	a324      	add	r3, pc, #144	; (adr r3, 8004e80 <_ZN5SCARAC1Ev+0x160>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	a321      	add	r3, pc, #132	; (adr r3, 8004e80 <_ZN5SCARAC1Ev+0x160>)
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <_ZN5SCARAC1Ev+0x168>)
 8004e4e:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	00000000 	.word	0x00000000
 8004e74:	4070e000 	.word	0x4070e000
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	40622000 	.word	0x40622000
 8004e80:	00000000 	.word	0x00000000
 8004e84:	40a00400 	.word	0x40a00400
 8004e88:	c0490000 	.word	0xc0490000
 8004e8c:	c0668000 	.word	0xc0668000

08004e90 <_ZN5SCARA3runEv>:
#include "scara.h"

SCARA sc;

void SCARA::run(){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
//		x = ST_test_x;
//		y = ST_test_y;
//		flag = ST_test_flag;
//		update = 0;
//	}
while(flag!=0){
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8004e9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	f000 84e8 	beq.w	800587a <_ZN5SCARA3runEv+0x9ea>
	phi = count_phi(x,y);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	ed93 7b02 	vldr	d7, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	ed93 6b04 	vldr	d6, [r3, #16]
 8004eb6:	eeb0 1b46 	vmov.f64	d1, d6
 8004eba:	eeb0 0b47 	vmov.f64	d0, d7
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fe1e 	bl	8005b00 <_ZN5SCARA9count_phiEdd>
 8004ec4:	eeb0 7b40 	vmov.f64	d7, d0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	ed83 7b06 	vstr	d7, [r3, #24]
		at = count_atan2(x,y);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	ed93 7b02 	vldr	d7, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	ed93 6b04 	vldr	d6, [r3, #16]
 8004eda:	eeb0 1b46 	vmov.f64	d1, d6
 8004ede:	eeb0 0b47 	vmov.f64	d0, d7
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fcd0 	bl	8005888 <_ZN5SCARA11count_atan2Edd>
 8004ee8:	eeb0 7b40 	vmov.f64	d7, d0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	ed83 7b08 	vstr	d7, [r3, #32]
		if (count_atan2(x,y) < 0)at += 360;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	ed93 7b02 	vldr	d7, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	ed93 6b04 	vldr	d6, [r3, #16]
 8004efe:	eeb0 1b46 	vmov.f64	d1, d6
 8004f02:	eeb0 0b47 	vmov.f64	d0, d7
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fcbe 	bl	8005888 <_ZN5SCARA11count_atan2Edd>
 8004f0c:	eeb0 7b40 	vmov.f64	d7, d0
 8004f10:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	bf4c      	ite	mi
 8004f1a:	2301      	movmi	r3, #1
 8004f1c:	2300      	movpl	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <_ZN5SCARA3runEv+0xa8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f2a:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8005198 <_ZN5SCARA3runEv+0x308>
 8004f2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	ed83 7b08 	vstr	d7, [r3, #32]
		if (at + phi <= 250){
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	ed93 6b08 	vldr	d6, [r3, #32]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	ed93 7b06 	vldr	d7, [r3, #24]
 8004f44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f48:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80051a0 <_ZN5SCARA3runEv+0x310>
 8004f4c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	d81f      	bhi.n	8004f96 <_ZN5SCARA3runEv+0x106>
			angle_goal_1 = at + phi;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	ed93 6b08 	vldr	d6, [r3, #32]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	ed93 7b06 	vldr	d7, [r3, #24]
 8004f62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
			angle_goal_2 = -count_theta2(x,y);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	ed93 6b04 	vldr	d6, [r3, #16]
 8004f78:	eeb0 1b46 	vmov.f64	d1, d6
 8004f7c:	eeb0 0b47 	vmov.f64	d0, d7
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fd61 	bl	8005a48 <_ZN5SCARA12count_theta2Edd>
 8004f86:	eeb0 7b40 	vmov.f64	d7, d0
 8004f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
 8004f94:	e02b      	b.n	8004fee <_ZN5SCARA3runEv+0x15e>
		}
		else if(at + phi > 250){
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	ed93 6b08 	vldr	d6, [r3, #32]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	ed93 7b06 	vldr	d7, [r3, #24]
 8004fa2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fa6:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80051a0 <_ZN5SCARA3runEv+0x310>
 8004faa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	dd1c      	ble.n	8004fee <_ZN5SCARA3runEv+0x15e>
			angle_goal_1 = at - phi;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	ed93 6b08 	vldr	d6, [r3, #32]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	ed93 7b06 	vldr	d7, [r3, #24]
 8004fc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
			angle_goal_2 = count_theta2(x,y);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	ed93 7b02 	vldr	d7, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	ed93 6b04 	vldr	d6, [r3, #16]
 8004fd6:	eeb0 1b46 	vmov.f64	d1, d6
 8004fda:	eeb0 0b47 	vmov.f64	d0, d7
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fd32 	bl	8005a48 <_ZN5SCARA12count_theta2Edd>
 8004fe4:	eeb0 7b40 	vmov.f64	d7, d0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}

		 if (air_pressure == 1)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_RESET);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d105      	bne.n	8005004 <_ZN5SCARA3runEv+0x174>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2120      	movs	r1, #32
 8004ffc:	4870      	ldr	r0, [pc, #448]	; (80051c0 <_ZN5SCARA3runEv+0x330>)
 8004ffe:	f004 ff0f 	bl	8009e20 <HAL_GPIO_WritePin>
 8005002:	e009      	b.n	8005018 <_ZN5SCARA3runEv+0x188>
		 else if (air_pressure == 0)HAL_GPIO_WritePin(AIR_PORT, AIR_PIN, GPIO_PIN_SET);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <_ZN5SCARA3runEv+0x188>
 800500e:	2201      	movs	r2, #1
 8005010:	2120      	movs	r1, #32
 8005012:	486b      	ldr	r0, [pc, #428]	; (80051c0 <_ZN5SCARA3runEv+0x330>)
 8005014:	f004 ff04 	bl	8009e20 <HAL_GPIO_WritePin>

		 if (valve_switch == 1)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_RESET);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800501e:	2b01      	cmp	r3, #1
 8005020:	d105      	bne.n	800502e <_ZN5SCARA3runEv+0x19e>
 8005022:	2200      	movs	r2, #0
 8005024:	2110      	movs	r1, #16
 8005026:	4866      	ldr	r0, [pc, #408]	; (80051c0 <_ZN5SCARA3runEv+0x330>)
 8005028:	f004 fefa 	bl	8009e20 <HAL_GPIO_WritePin>
 800502c:	e009      	b.n	8005042 <_ZN5SCARA3runEv+0x1b2>
		 else if (valve_switch == 0)HAL_GPIO_WritePin(VALVE_PORT, VALVE_PIN, GPIO_PIN_SET);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <_ZN5SCARA3runEv+0x1b2>
 8005038:	2201      	movs	r2, #1
 800503a:	2110      	movs	r1, #16
 800503c:	4860      	ldr	r0, [pc, #384]	; (80051c0 <_ZN5SCARA3runEv+0x330>)
 800503e:	f004 feef 	bl	8009e20 <HAL_GPIO_WritePin>

		 pulse_goal = 600 + 10 * servo_angle;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8005048:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800504c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005050:	ed9f 6b55 	vldr	d6, [pc, #340]	; 80051a8 <_ZN5SCARA3runEv+0x318>
 8005054:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
		 if (servo_angle == 145)__HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8005064:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80051b0 <_ZN5SCARA3runEv+0x320>
 8005068:	eeb4 7b46 	vcmp.f64	d7, d6
 800506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005070:	d109      	bne.n	8005086 <_ZN5SCARA3runEv+0x1f6>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 8005078:	4b52      	ldr	r3, [pc, #328]	; (80051c4 <_ZN5SCARA3runEv+0x334>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005080:	ee17 2a90 	vmov	r2, s15
 8005084:	635a      	str	r2, [r3, #52]	; 0x34
		 if (pulse_now != pulse_goal){
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005092:	eeb4 6b47 	vcmp.f64	d6, d7
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	d04a      	beq.n	8005132 <_ZN5SCARA3runEv+0x2a2>
			 while (pulse_now < pulse_goal){
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80050a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	d400      	bmi.n	80050b4 <_ZN5SCARA3runEv+0x224>
 80050b2:	e014      	b.n	80050de <_ZN5SCARA3runEv+0x24e>
				 pulse_now ++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80050ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80050be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
//					timer_delay(0.3);
				 __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80050ce:	4b3d      	ldr	r3, [pc, #244]	; (80051c4 <_ZN5SCARA3runEv+0x334>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80050d6:	ee17 2a90 	vmov	r2, s15
 80050da:	635a      	str	r2, [r3, #52]	; 0x34
			 while (pulse_now < pulse_goal){
 80050dc:	e7de      	b.n	800509c <_ZN5SCARA3runEv+0x20c>
			 }
			 while (pulse_now > pulse_goal){
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 80050ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80050ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f2:	dd14      	ble.n	800511e <_ZN5SCARA3runEv+0x28e>
				 pulse_now --;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 80050fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80050fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
//					timer_delay(0.3);
				 __HAL_TIM_SET_COMPARE(&htim23, TIM_CHANNEL_1, pulse_now);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	ed93 7b24 	vldr	d7, [r3, #144]	; 0x90
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <_ZN5SCARA3runEv+0x334>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005116:	ee17 2a90 	vmov	r2, s15
 800511a:	635a      	str	r2, [r3, #52]	; 0x34
			 while (pulse_now > pulse_goal){
 800511c:	e7df      	b.n	80050de <_ZN5SCARA3runEv+0x24e>
			 }
				  input_check = 1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				  pulse_now = pulse_goal;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		 }


		 if (angle_goal_1 != angle_now_1) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800513e:	eeb4 6b47 	vcmp.f64	d6, d7
 8005142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005146:	f000 8088 	beq.w	800525a <_ZN5SCARA3runEv+0x3ca>
			 step_1 = (double)(angle_goal_1 - angle_now_1)*4 *8 / 0.9;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8005156:	ee36 7b47 	vsub.f64	d7, d6, d7
 800515a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800515e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005162:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8005166:	ee27 6b06 	vmul.f64	d6, d7, d6
 800516a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80051b8 <_ZN5SCARA3runEv+0x328>
 800516e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

			 if (step_1 >= 0) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800517e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005186:	db21      	blt.n	80051cc <_ZN5SCARA3runEv+0x33c>
				 HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 8005188:	2201      	movs	r2, #1
 800518a:	2120      	movs	r1, #32
 800518c:	480e      	ldr	r0, [pc, #56]	; (80051c8 <_ZN5SCARA3runEv+0x338>)
 800518e:	f004 fe47 	bl	8009e20 <HAL_GPIO_WritePin>
 8005192:	e030      	b.n	80051f6 <_ZN5SCARA3runEv+0x366>
 8005194:	f3af 8000 	nop.w
 8005198:	00000000 	.word	0x00000000
 800519c:	40768000 	.word	0x40768000
 80051a0:	00000000 	.word	0x00000000
 80051a4:	406f4000 	.word	0x406f4000
 80051a8:	00000000 	.word	0x00000000
 80051ac:	4082c000 	.word	0x4082c000
 80051b0:	00000000 	.word	0x00000000
 80051b4:	40622000 	.word	0x40622000
 80051b8:	cccccccd 	.word	0xcccccccd
 80051bc:	3feccccc 	.word	0x3feccccc
 80051c0:	58020000 	.word	0x58020000
 80051c4:	24000578 	.word	0x24000578
 80051c8:	58020800 	.word	0x58020800
			 } else if (step_1 < 0) {
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80051d2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	d50c      	bpl.n	80051f6 <_ZN5SCARA3runEv+0x366>
				 step_1 = -step_1;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80051e2:	eeb1 7b47 	vneg.f64	d7, d7
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
				 HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_RESET);
 80051ec:	2200      	movs	r2, #0
 80051ee:	2120      	movs	r1, #32
 80051f0:	4899      	ldr	r0, [pc, #612]	; (8005458 <_ZN5SCARA3runEv+0x5c8>)
 80051f2:	f004 fe15 	bl	8009e20 <HAL_GPIO_WritePin>
			 }

			 if (state == 1)step_1 *= 1.02; //undetermined
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80051fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005200:	eeb4 7b46 	vcmp.f64	d7, d6
 8005204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005208:	d109      	bne.n	800521e <_ZN5SCARA3runEv+0x38e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005210:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005428 <_ZN5SCARA3runEv+0x598>
 8005214:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
			 if (state == 2)step_1 *= 1.05; //undetermined
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005224:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005228:	eeb4 7b46 	vcmp.f64	d7, d6
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	d109      	bne.n	8005246 <_ZN5SCARA3runEv+0x3b6>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005238:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8005430 <_ZN5SCARA3runEv+0x5a0>
 800523c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
			 input_check = 1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			 angle_now_1 = angle_goal_1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		}

		if (angle_goal_2 != angle_now_2) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8005266:	eeb4 6b47 	vcmp.f64	d6, d7
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	f000 80a7 	beq.w	80053c0 <_ZN5SCARA3runEv+0x530>
			step_2 = (angle_goal_2 - angle_now_2)*8 / 0.9;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800527e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005282:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8005286:	ee27 6b06 	vmul.f64	d6, d7, d6
 800528a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8005438 <_ZN5SCARA3runEv+0x5a8>
 800528e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50

			if (angle_now_2 >= 180 && angle_goal_2 < 180){
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800529e:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8005440 <_ZN5SCARA3runEv+0x5b0>
 80052a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052aa:	db14      	blt.n	80052d6 <_ZN5SCARA3runEv+0x446>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80052b2:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8005440 <_ZN5SCARA3runEv+0x5b0>
 80052b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d50a      	bpl.n	80052d6 <_ZN5SCARA3runEv+0x446>
				step_2 += 3200;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80052c6:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8005448 <_ZN5SCARA3runEv+0x5b8>
 80052ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
 80052d4:	e01d      	b.n	8005312 <_ZN5SCARA3runEv+0x482>
			} else if (angle_now_2 < 180 && angle_goal_2 >= 180){
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80052dc:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8005440 <_ZN5SCARA3runEv+0x5b0>
 80052e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e8:	d513      	bpl.n	8005312 <_ZN5SCARA3runEv+0x482>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80052f0:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8005440 <_ZN5SCARA3runEv+0x5b0>
 80052f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	db09      	blt.n	8005312 <_ZN5SCARA3runEv+0x482>
			   step_2 -= 3200;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005304:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005448 <_ZN5SCARA3runEv+0x5b8>
 8005308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			}

			if (step_2 >= 0) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005318:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800531c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005320:	db06      	blt.n	8005330 <_ZN5SCARA3runEv+0x4a0>
				HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_SET);
 8005322:	2201      	movs	r2, #1
 8005324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005328:	484c      	ldr	r0, [pc, #304]	; (800545c <_ZN5SCARA3runEv+0x5cc>)
 800532a:	f004 fd79 	bl	8009e20 <HAL_GPIO_WritePin>
 800532e:	e015      	b.n	800535c <_ZN5SCARA3runEv+0x4cc>
			} else if (step_2 < 0) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005336:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800533a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533e:	d50d      	bpl.n	800535c <_ZN5SCARA3runEv+0x4cc>
				step_2 = -step_2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005346:	eeb1 7b47 	vneg.f64	d7, d7
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			    HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 8005350:	2200      	movs	r2, #0
 8005352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005356:	4841      	ldr	r0, [pc, #260]	; (800545c <_ZN5SCARA3runEv+0x5cc>)
 8005358:	f004 fd62 	bl	8009e20 <HAL_GPIO_WritePin>
			}

			if (state == 1)step_2 *= 1.02; //undetermined
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005362:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005366:	eeb4 7b46 	vcmp.f64	d7, d6
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	d109      	bne.n	8005384 <_ZN5SCARA3runEv+0x4f4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005376:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8005428 <_ZN5SCARA3runEv+0x598>
 800537a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
			if (state == 2)step_2 *= 1.05; //undetermined
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800538a:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800538e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005396:	d109      	bne.n	80053ac <_ZN5SCARA3runEv+0x51c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800539e:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8005430 <_ZN5SCARA3runEv+0x5a0>
 80053a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
				input_check = 1;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			    angle_now_2 = angle_goal_2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			}

		if (high_goal != high_now) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80053cc:	eeb4 6b47 	vcmp.f64	d6, d7
 80053d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d4:	d064      	beq.n	80054a0 <_ZN5SCARA3runEv+0x610>
			step_3 = (high_goal - high_now)*200 *8 / 6;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 80053e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80053e6:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8005450 <_ZN5SCARA3runEv+0x5c0>
 80053ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80053ee:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80053f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80053f6:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 80053fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70

			if (step_3 >= 0) {
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800540a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	db25      	blt.n	8005460 <_ZN5SCARA3runEv+0x5d0>
				HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 8005414:	2201      	movs	r2, #1
 8005416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800541a:	4810      	ldr	r0, [pc, #64]	; (800545c <_ZN5SCARA3runEv+0x5cc>)
 800541c:	f004 fd00 	bl	8009e20 <HAL_GPIO_WritePin>
 8005420:	e034      	b.n	800548c <_ZN5SCARA3runEv+0x5fc>
 8005422:	bf00      	nop
 8005424:	f3af 8000 	nop.w
 8005428:	851eb852 	.word	0x851eb852
 800542c:	3ff051eb 	.word	0x3ff051eb
 8005430:	cccccccd 	.word	0xcccccccd
 8005434:	3ff0cccc 	.word	0x3ff0cccc
 8005438:	cccccccd 	.word	0xcccccccd
 800543c:	3feccccc 	.word	0x3feccccc
 8005440:	00000000 	.word	0x00000000
 8005444:	40668000 	.word	0x40668000
 8005448:	00000000 	.word	0x00000000
 800544c:	40a90000 	.word	0x40a90000
 8005450:	00000000 	.word	0x00000000
 8005454:	40690000 	.word	0x40690000
 8005458:	58020800 	.word	0x58020800
 800545c:	58021400 	.word	0x58021400
				} else if (step_3 < 0) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005466:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d50d      	bpl.n	800548c <_ZN5SCARA3runEv+0x5fc>
					step_3 = -step_3;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005476:	eeb1 7b47 	vneg.f64	d7, d7
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
					HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_RESET);
 8005480:	2200      	movs	r2, #0
 8005482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005486:	48b6      	ldr	r0, [pc, #728]	; (8005760 <_ZN5SCARA3runEv+0x8d0>)
 8005488:	f004 fcca 	bl	8009e20 <HAL_GPIO_WritePin>
				}
				input_check = 1;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				high_now = high_goal;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
			}

			if (step_1 < 1 && step_1 > 0)step_1 = 1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80054a6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	d50d      	bpl.n	80054d0 <_ZN5SCARA3runEv+0x640>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80054ba:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	dd05      	ble.n	80054d0 <_ZN5SCARA3runEv+0x640>
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	4ba6      	ldr	r3, [pc, #664]	; (8005764 <_ZN5SCARA3runEv+0x8d4>)
 80054cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			if (step_2 < 1 && step_2 > 0)step_2 = 1;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054d6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80054da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	d50d      	bpl.n	8005500 <_ZN5SCARA3runEv+0x670>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80054ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f2:	dd05      	ble.n	8005500 <_ZN5SCARA3runEv+0x670>
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	4b9a      	ldr	r3, [pc, #616]	; (8005764 <_ZN5SCARA3runEv+0x8d4>)
 80054fc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			if (step_3 < 1 && step_3 > 0)step_3 = 1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005506:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800550a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	d50d      	bpl.n	8005530 <_ZN5SCARA3runEv+0x6a0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800551a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800551e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005522:	dd05      	ble.n	8005530 <_ZN5SCARA3runEv+0x6a0>
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	4b8e      	ldr	r3, [pc, #568]	; (8005764 <_ZN5SCARA3runEv+0x8d4>)
 800552c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

			if (x == 0 && y == -50 && flag == 1){
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	ed93 7b02 	vldr	d7, [r3, #8]
 8005536:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553e:	d13c      	bne.n	80055ba <_ZN5SCARA3runEv+0x72a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	ed93 7b04 	vldr	d7, [r3, #16]
 8005546:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8005740 <_ZN5SCARA3runEv+0x8b0>
 800554a:	eeb4 7b46 	vcmp.f64	d7, d6
 800554e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005552:	d132      	bne.n	80055ba <_ZN5SCARA3runEv+0x72a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 800555a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800555e:	eeb4 7b46 	vcmp.f64	d7, d6
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	d128      	bne.n	80055ba <_ZN5SCARA3runEv+0x72a>
				step_1 = 120;
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	4b7e      	ldr	r3, [pc, #504]	; (8005768 <_ZN5SCARA3runEv+0x8d8>)
 8005570:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
				HAL_GPIO_WritePin(DIR_PORT_1, DIR_PIN_1, GPIO_PIN_SET);
 8005574:	2201      	movs	r2, #1
 8005576:	2120      	movs	r1, #32
 8005578:	487c      	ldr	r0, [pc, #496]	; (800576c <_ZN5SCARA3runEv+0x8dc>)
 800557a:	f004 fc51 	bl	8009e20 <HAL_GPIO_WritePin>
				step_2 = 30;
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	4b7a      	ldr	r3, [pc, #488]	; (8005770 <_ZN5SCARA3runEv+0x8e0>)
 8005586:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				HAL_GPIO_WritePin(DIR_PORT_2, DIR_PIN_2, GPIO_PIN_RESET);
 800558a:	2200      	movs	r2, #0
 800558c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005590:	4873      	ldr	r0, [pc, #460]	; (8005760 <_ZN5SCARA3runEv+0x8d0>)
 8005592:	f004 fc45 	bl	8009e20 <HAL_GPIO_WritePin>
				step_3 = 2000;
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	4b75      	ldr	r3, [pc, #468]	; (8005774 <_ZN5SCARA3runEv+0x8e4>)
 800559e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
				HAL_GPIO_WritePin(DIR_PORT_3, DIR_PIN_3, GPIO_PIN_SET);
 80055a2:	2201      	movs	r2, #1
 80055a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055a8:	486d      	ldr	r0, [pc, #436]	; (8005760 <_ZN5SCARA3runEv+0x8d0>)
 80055aa:	f004 fc39 	bl	8009e20 <HAL_GPIO_WritePin>
				flag = 5;
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	4b70      	ldr	r3, [pc, #448]	; (8005778 <_ZN5SCARA3runEv+0x8e8>)
 80055b6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
			}

			if (valve_switch == 1){
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d103      	bne.n	80055cc <_ZN5SCARA3runEv+0x73c>
//				timer_delay(2);
				valve_switch = 0;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
			}


			if (step_1 == 0 && step_2 == 0 && step_3 == 0 && input_check == 1){
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80055d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055da:	f47f ac5d 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80055e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ec:	f47f ac54 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80055f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fe:	f47f ac4b 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005608:	2b01      	cmp	r3, #1
 800560a:	f47f ac45 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
				if (flag == 2) flag = 5;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005614:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005618:	eeb4 7b46 	vcmp.f64	d7, d6
 800561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005620:	d106      	bne.n	8005630 <_ZN5SCARA3runEv+0x7a0>
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	4b53      	ldr	r3, [pc, #332]	; (8005778 <_ZN5SCARA3runEv+0x8e8>)
 800562a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 800562e:	e433      	b.n	8004e98 <_ZN5SCARA3runEv+0x8>
				else if (flag == 3){
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005636:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800563a:	eeb4 7b46 	vcmp.f64	d7, d6
 800563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005642:	f040 80bb 	bne.w	80057bc <_ZN5SCARA3runEv+0x92c>
					air_pressure = 1, valve_switch = 0;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					if (high_state == 0){
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565c:	2b00      	cmp	r3, #0
 800565e:	d149      	bne.n	80056f4 <_ZN5SCARA3runEv+0x864>
						if (state == 0)servo_angle = 20,state++;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005666:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	d110      	bne.n	8005692 <_ZN5SCARA3runEv+0x802>
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	4b41      	ldr	r3, [pc, #260]	; (800577c <_ZN5SCARA3runEv+0x8ec>)
 8005678:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005682:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005686:	ee37 7b06 	vadd.f64	d7, d7, d6
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 8005690:	e02a      	b.n	80056e8 <_ZN5SCARA3runEv+0x858>
						else if (state == 1)servo_angle = 270, state++;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8005698:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800569c:	eeb4 7b46 	vcmp.f64	d7, d6
 80056a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a4:	d110      	bne.n	80056c8 <_ZN5SCARA3runEv+0x838>
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	a327      	add	r3, pc, #156	; (adr r3, 8005748 <_ZN5SCARA3runEv+0x8b8>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80056b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80056bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
 80056c6:	e00f      	b.n	80056e8 <_ZN5SCARA3runEv+0x858>
						else if (state == 2)servo_angle = 145;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80056ce:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80056d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80056d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056da:	d105      	bne.n	80056e8 <_ZN5SCARA3runEv+0x858>
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	a31c      	add	r3, pc, #112	; (adr r3, 8005750 <_ZN5SCARA3runEv+0x8c0>)
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
						high_state = 1;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80056f0:	f7ff bbd2 	b.w	8004e98 <_ZN5SCARA3runEv+0x8>
					}
					else if (high_state == 1){
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10b      	bne.n	8005716 <_ZN5SCARA3runEv+0x886>
						high_goal = -89;
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	a315      	add	r3, pc, #84	; (adr r3, 8005758 <_ZN5SCARA3runEv+0x8c8>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
						high_state = 2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005712:	f7ff bbc1 	b.w	8004e98 <_ZN5SCARA3runEv+0x8>
					}
					else if (high_state == 2){
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571c:	2b02      	cmp	r3, #2
 800571e:	d12f      	bne.n	8005780 <_ZN5SCARA3runEv+0x8f0>
//						timer_delay(2);
						high_goal = 0;
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
						high_state = 3;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2203      	movs	r2, #3
 8005732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005736:	f7ff bbaf 	b.w	8004e98 <_ZN5SCARA3runEv+0x8>
 800573a:	bf00      	nop
 800573c:	f3af 8000 	nop.w
 8005740:	00000000 	.word	0x00000000
 8005744:	c0490000 	.word	0xc0490000
 8005748:	00000000 	.word	0x00000000
 800574c:	4070e000 	.word	0x4070e000
 8005750:	00000000 	.word	0x00000000
 8005754:	40622000 	.word	0x40622000
 8005758:	00000000 	.word	0x00000000
 800575c:	c0564000 	.word	0xc0564000
 8005760:	58021400 	.word	0x58021400
 8005764:	3ff00000 	.word	0x3ff00000
 8005768:	405e0000 	.word	0x405e0000
 800576c:	58020800 	.word	0x58020800
 8005770:	403e0000 	.word	0x403e0000
 8005774:	409f4000 	.word	0x409f4000
 8005778:	40140000 	.word	0x40140000
 800577c:	40340000 	.word	0x40340000
					}
					else if(high_state == 3 && pulse_now == pulse_goal){
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005786:	2b03      	cmp	r3, #3
 8005788:	f47f ab86 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	ed93 6b24 	vldr	d6, [r3, #144]	; 0x90
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	ed93 7b26 	vldr	d7, [r3, #152]	; 0x98
 8005798:	eeb4 6b47 	vcmp.f64	d6, d7
 800579c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a0:	f47f ab7a 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
						high_state = 0;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						flag = 5;
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	4b34      	ldr	r3, [pc, #208]	; (8005884 <_ZN5SCARA3runEv+0x9f4>)
 80057b4:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 80057b8:	f7ff bb6e 	b.w	8004e98 <_ZN5SCARA3runEv+0x8>
					}
			  }
				else if (step_1 == 0 && step_2 == 0 && flag == 4){
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80057c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ca:	d127      	bne.n	800581c <_ZN5SCARA3runEv+0x98c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80057d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80057d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057da:	d11f      	bne.n	800581c <_ZN5SCARA3runEv+0x98c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 80057e2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80057e6:	eeb4 7b46 	vcmp.f64	d7, d6
 80057ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ee:	d115      	bne.n	800581c <_ZN5SCARA3runEv+0x98c>
					air_pressure = 0;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					valve_switch = 1;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					state = 0;
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
					flag = 5;
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	4b1b      	ldr	r3, [pc, #108]	; (8005884 <_ZN5SCARA3runEv+0x9f4>)
 8005816:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 800581a:	e02c      	b.n	8005876 <_ZN5SCARA3runEv+0x9e6>
				}
				else if (step_1 == 0 && step_2 == 0 && step_3 ==0 && flag == 5)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8005822:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582a:	f47f ab35 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005834:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583c:	f47f ab2c 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8005846:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800584a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800584e:	f47f ab23 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8005858:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800585c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005864:	f47f ab18 	bne.w	8004e98 <_ZN5SCARA3runEv+0x8>
					flag =0 ;
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
while(flag!=0){
 8005876:	f7ff bb0f 	b.w	8004e98 <_ZN5SCARA3runEv+0x8>
			 }
	}
}
 800587a:	bf00      	nop
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40140000 	.word	0x40140000

08005888 <_ZN5SCARA11count_atan2Edd>:
	SCARA::timer_count =0;
	SCARA::timer_flag = false;
}

double SCARA::count_atan2(double x, double y)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	; 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6178      	str	r0, [r7, #20]
 8005890:	ed87 0b02 	vstr	d0, [r7, #8]
 8005894:	ed87 1b00 	vstr	d1, [r7]
 double atan2;
 double temp = y/x;
 8005898:	ed97 5b00 	vldr	d5, [r7]
 800589c:	ed97 6b02 	vldr	d6, [r7, #8]
 80058a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80058a4:	ed87 7b06 	vstr	d7, [r7, #24]
 if(x > 0){
 80058a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80058ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b4:	dd10      	ble.n	80058d8 <_ZN5SCARA11count_atan2Edd+0x50>
   atan2 = (atan(temp)*180)/PI;
 80058b6:	ed97 0b06 	vldr	d0, [r7, #24]
 80058ba:	f00a fef1 	bl	80106a0 <atan>
 80058be:	eeb0 7b40 	vmov.f64	d7, d0
 80058c2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80059c8 <_ZN5SCARA11count_atan2Edd+0x140>
 80058c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80058ca:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80059d0 <_ZN5SCARA11count_atan2Edd+0x148>
 80058ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80058d2:	ed87 7b08 	vstr	d7, [r7, #32]
 80058d6:	e06c      	b.n	80059b2 <_ZN5SCARA11count_atan2Edd+0x12a>
 }
    else if(y >= 0 && x < 0){
 80058d8:	ed97 7b00 	vldr	d7, [r7]
 80058dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	db1b      	blt.n	800591e <_ZN5SCARA11count_atan2Edd+0x96>
 80058e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80058ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	d514      	bpl.n	800591e <_ZN5SCARA11count_atan2Edd+0x96>
        atan2 = (atan(temp)*180)/PI + 180;
 80058f4:	ed97 0b06 	vldr	d0, [r7, #24]
 80058f8:	f00a fed2 	bl	80106a0 <atan>
 80058fc:	eeb0 7b40 	vmov.f64	d7, d0
 8005900:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80059c8 <_ZN5SCARA11count_atan2Edd+0x140>
 8005904:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005908:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80059d0 <_ZN5SCARA11count_atan2Edd+0x148>
 800590c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005910:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80059c8 <_ZN5SCARA11count_atan2Edd+0x140>
 8005914:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005918:	ed87 7b08 	vstr	d7, [r7, #32]
 800591c:	e049      	b.n	80059b2 <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x < 0){
 800591e:	ed97 7b00 	vldr	d7, [r7]
 8005922:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	d51b      	bpl.n	8005964 <_ZN5SCARA11count_atan2Edd+0xdc>
 800592c:	ed97 7b02 	vldr	d7, [r7, #8]
 8005930:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005938:	d514      	bpl.n	8005964 <_ZN5SCARA11count_atan2Edd+0xdc>
        atan2 = (atan(temp)*180/PI - 180);
 800593a:	ed97 0b06 	vldr	d0, [r7, #24]
 800593e:	f00a feaf 	bl	80106a0 <atan>
 8005942:	eeb0 7b40 	vmov.f64	d7, d0
 8005946:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80059c8 <_ZN5SCARA11count_atan2Edd+0x140>
 800594a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800594e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80059d0 <_ZN5SCARA11count_atan2Edd+0x148>
 8005952:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005956:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80059c8 <_ZN5SCARA11count_atan2Edd+0x140>
 800595a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800595e:	ed87 7b08 	vstr	d7, [r7, #32]
 8005962:	e026      	b.n	80059b2 <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y > 0 && x == 0){
 8005964:	ed97 7b00 	vldr	d7, [r7]
 8005968:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005970:	dd0c      	ble.n	800598c <_ZN5SCARA11count_atan2Edd+0x104>
 8005972:	ed97 7b02 	vldr	d7, [r7, #8]
 8005976:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	d105      	bne.n	800598c <_ZN5SCARA11count_atan2Edd+0x104>
        atan2 = 180/2;
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <_ZN5SCARA11count_atan2Edd+0x150>)
 8005986:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800598a:	e012      	b.n	80059b2 <_ZN5SCARA11count_atan2Edd+0x12a>
    }
    else if(y < 0 && x == 0){
 800598c:	ed97 7b00 	vldr	d7, [r7]
 8005990:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005998:	d50b      	bpl.n	80059b2 <_ZN5SCARA11count_atan2Edd+0x12a>
 800599a:	ed97 7b02 	vldr	d7, [r7, #8]
 800599e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80059a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a6:	d104      	bne.n	80059b2 <_ZN5SCARA11count_atan2Edd+0x12a>
        atan2 = -180/2;
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <_ZN5SCARA11count_atan2Edd+0x154>)
 80059ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
 return atan2;
 80059b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80059ba:	eeb0 0b47 	vmov.f64	d0, d7
 80059be:	3728      	adds	r7, #40	; 0x28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	f3af 8000 	nop.w
 80059c8:	00000000 	.word	0x00000000
 80059cc:	40668000 	.word	0x40668000
 80059d0:	54442d18 	.word	0x54442d18
 80059d4:	400921fb 	.word	0x400921fb
 80059d8:	40568000 	.word	0x40568000
 80059dc:	c0568000 	.word	0xc0568000

080059e0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	ed87 0b02 	vstr	d0, [r7, #8]
 80059ea:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80059f6:	eeb0 1b47 	vmov.f64	d1, d7
 80059fa:	ed97 0b02 	vldr	d0, [r7, #8]
 80059fe:	f00a fbfb 	bl	80101f8 <pow>
 8005a02:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005a06:	eeb0 0b47 	vmov.f64	d0, d7
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	ee06 3a90 	vmov	s13, r3
 8005a2a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005a2e:	eeb0 1b46 	vmov.f64	d1, d6
 8005a32:	eeb0 0b47 	vmov.f64	d0, d7
 8005a36:	f00a fbdf 	bl	80101f8 <pow>
 8005a3a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8005a3e:	eeb0 0b47 	vmov.f64	d0, d7
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <_ZN5SCARA12count_theta2Edd>:

double SCARA::count_theta2(double x, double y)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	ed2d 8b02 	vpush	{d8}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6178      	str	r0, [r7, #20]
 8005a54:	ed87 0b02 	vstr	d0, [r7, #8]
 8005a58:	ed87 1b00 	vstr	d1, [r7]
 double theta2;
 double temp;
 temp = (double)(pow(x,2) + pow(y,2) - pow(length1,2) - pow(length2,2));
 8005a5c:	2002      	movs	r0, #2
 8005a5e:	ed97 0b02 	vldr	d0, [r7, #8]
 8005a62:	f7ff ffbd 	bl	80059e0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a66:	eeb0 8b40 	vmov.f64	d8, d0
 8005a6a:	2002      	movs	r0, #2
 8005a6c:	ed97 0b00 	vldr	d0, [r7]
 8005a70:	f7ff ffb6 	bl	80059e0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a74:	eeb0 7b40 	vmov.f64	d7, d0
 8005a78:	ee38 8b07 	vadd.f64	d8, d8, d7
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	20be      	movs	r0, #190	; 0xbe
 8005a80:	f7ff ffc6 	bl	8005a10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a84:	eeb0 7b40 	vmov.f64	d7, d0
 8005a88:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005a8c:	2102      	movs	r1, #2
 8005a8e:	208c      	movs	r0, #140	; 0x8c
 8005a90:	f7ff ffbe 	bl	8005a10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005a94:	eeb0 7b40 	vmov.f64	d7, d0
 8005a98:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005a9c:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(2*length1*length2);
 8005aa0:	ed97 6b08 	vldr	d6, [r7, #32]
 8005aa4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8005ae8 <_ZN5SCARA12count_theta2Edd+0xa0>
 8005aa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005aac:	ed87 7b08 	vstr	d7, [r7, #32]
 theta2 = (acos(temp)*180)/PI;
 8005ab0:	ed97 0b08 	vldr	d0, [r7, #32]
 8005ab4:	f00a fef8 	bl	80108a8 <acos>
 8005ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8005abc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005af0 <_ZN5SCARA12count_theta2Edd+0xa8>
 8005ac0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005ac4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005af8 <_ZN5SCARA12count_theta2Edd+0xb0>
 8005ac8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005acc:	ed87 7b06 	vstr	d7, [r7, #24]
 return theta2;
 8005ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad4:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ad8:	eeb0 0b47 	vmov.f64	d0, d7
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	ecbd 8b02 	vpop	{d8}
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	40e9fa00 	.word	0x40e9fa00
 8005af0:	00000000 	.word	0x00000000
 8005af4:	40668000 	.word	0x40668000
 8005af8:	54442d18 	.word	0x54442d18
 8005afc:	400921fb 	.word	0x400921fb

08005b00 <_ZN5SCARA9count_phiEdd>:

double SCARA::count_phi(double x, double y)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	ed2d 8b02 	vpush	{d8}
 8005b06:	b08a      	sub	sp, #40	; 0x28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6178      	str	r0, [r7, #20]
 8005b0c:	ed87 0b02 	vstr	d0, [r7, #8]
 8005b10:	ed87 1b00 	vstr	d1, [r7]
 double phi;
 double temp = pow(length2,2) - pow(length1,2) - pow(x,2) - pow(y,2);
 8005b14:	2102      	movs	r1, #2
 8005b16:	208c      	movs	r0, #140	; 0x8c
 8005b18:	f7ff ff7a 	bl	8005a10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b1c:	eeb0 8b40 	vmov.f64	d8, d0
 8005b20:	2102      	movs	r1, #2
 8005b22:	20be      	movs	r0, #190	; 0xbe
 8005b24:	f7ff ff74 	bl	8005a10 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b28:	eeb0 7b40 	vmov.f64	d7, d0
 8005b2c:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005b30:	2002      	movs	r0, #2
 8005b32:	ed97 0b02 	vldr	d0, [r7, #8]
 8005b36:	f7ff ff53 	bl	80059e0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b3a:	eeb0 7b40 	vmov.f64	d7, d0
 8005b3e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005b42:	2002      	movs	r0, #2
 8005b44:	ed97 0b00 	vldr	d0, [r7]
 8005b48:	f7ff ff4a 	bl	80059e0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b4c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b50:	ee38 7b47 	vsub.f64	d7, d8, d7
 8005b54:	ed87 7b08 	vstr	d7, [r7, #32]
 temp /= (double)(-2*length1*sqrt(pow(x,2)+pow(y,2)));
 8005b58:	2002      	movs	r0, #2
 8005b5a:	ed97 0b02 	vldr	d0, [r7, #8]
 8005b5e:	f7ff ff3f 	bl	80059e0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b62:	eeb0 8b40 	vmov.f64	d8, d0
 8005b66:	2002      	movs	r0, #2
 8005b68:	ed97 0b00 	vldr	d0, [r7]
 8005b6c:	f7ff ff38 	bl	80059e0 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8005b70:	eeb0 7b40 	vmov.f64	d7, d0
 8005b74:	ee38 7b07 	vadd.f64	d7, d8, d7
 8005b78:	eeb0 0b47 	vmov.f64	d0, d7
 8005b7c:	f00a fec0 	bl	8010900 <sqrt>
 8005b80:	eeb0 7b40 	vmov.f64	d7, d0
 8005b84:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8005bd0 <_ZN5SCARA9count_phiEdd+0xd0>
 8005b88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005b8c:	ed97 5b08 	vldr	d5, [r7, #32]
 8005b90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005b94:	ed87 7b08 	vstr	d7, [r7, #32]
 phi = (acos(temp)*180)/PI;
 8005b98:	ed97 0b08 	vldr	d0, [r7, #32]
 8005b9c:	f00a fe84 	bl	80108a8 <acos>
 8005ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8005ba4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005bd8 <_ZN5SCARA9count_phiEdd+0xd8>
 8005ba8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005bac:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8005be0 <_ZN5SCARA9count_phiEdd+0xe0>
 8005bb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005bb4:	ed87 7b06 	vstr	d7, [r7, #24]
 return phi;
 8005bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bbc:	ec43 2b17 	vmov	d7, r2, r3
}
 8005bc0:	eeb0 0b47 	vmov.f64	d0, d7
 8005bc4:	3728      	adds	r7, #40	; 0x28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	ecbd 8b02 	vpop	{d8}
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	00000000 	.word	0x00000000
 8005bd4:	c077c000 	.word	0xc077c000
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	40668000 	.word	0x40668000
 8005be0:	54442d18 	.word	0x54442d18
 8005be4:	400921fb 	.word	0x400921fb

08005be8 <_Z41__static_initialization_and_destruction_0ii>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d107      	bne.n	8005c08 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d102      	bne.n	8005c08 <_Z41__static_initialization_and_destruction_0ii+0x20>
SCARA sc;
 8005c02:	4803      	ldr	r0, [pc, #12]	; (8005c10 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005c04:	f7ff f88c 	bl	8004d20 <_ZN5SCARAC1Ev>
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	24002240 	.word	0x24002240

08005c14 <_GLOBAL__sub_I_sc>:
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	f7ff ffe3 	bl	8005be8 <_Z41__static_initialization_and_destruction_0ii>
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <HAL_MspInit+0x3c>)
 8005c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c30:	4a0b      	ldr	r2, [pc, #44]	; (8005c60 <HAL_MspInit+0x3c>)
 8005c32:	f043 0302 	orr.w	r3, r3, #2
 8005c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <HAL_MspInit+0x3c>)
 8005c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	2005      	movs	r0, #5
 8005c4e:	f001 f8b8 	bl	8006dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005c52:	2005      	movs	r0, #5
 8005c54:	f001 f8cf 	bl	8006df6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	58024400 	.word	0x58024400

08005c64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b090      	sub	sp, #64	; 0x40
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d14e      	bne.n	8005d24 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c86:	4b77      	ldr	r3, [pc, #476]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c8c:	4a75      	ldr	r2, [pc, #468]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c96:	4b73      	ldr	r3, [pc, #460]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca4:	4b6f      	ldr	r3, [pc, #444]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005caa:	4a6e      	ldr	r2, [pc, #440]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005cb4:	4b6b      	ldr	r3, [pc, #428]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cc2:	4b68      	ldr	r3, [pc, #416]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cc8:	4a66      	ldr	r2, [pc, #408]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005cd2:	4b64      	ldr	r3, [pc, #400]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	485a      	ldr	r0, [pc, #360]	; (8005e68 <HAL_TIM_Encoder_MspInit+0x204>)
 8005cfe:	f003 fecf 	bl	8009aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d02:	2308      	movs	r3, #8
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d06:	2302      	movs	r3, #2
 8005d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d12:	2301      	movs	r3, #1
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4853      	ldr	r0, [pc, #332]	; (8005e6c <HAL_TIM_Encoder_MspInit+0x208>)
 8005d1e:	f003 febf 	bl	8009aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005d22:	e09b      	b.n	8005e5c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a51      	ldr	r2, [pc, #324]	; (8005e70 <HAL_TIM_Encoder_MspInit+0x20c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d12e      	bne.n	8005d8c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d2e:	4b4d      	ldr	r3, [pc, #308]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d34:	4a4b      	ldr	r2, [pc, #300]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d3e:	4b49      	ldr	r3, [pc, #292]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d4c:	4b45      	ldr	r3, [pc, #276]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d52:	4a44      	ldr	r2, [pc, #272]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d5c:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005d6a:	2330      	movs	r3, #48	; 0x30
 8005d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d82:	4619      	mov	r1, r3
 8005d84:	4839      	ldr	r0, [pc, #228]	; (8005e6c <HAL_TIM_Encoder_MspInit+0x208>)
 8005d86:	f003 fe8b 	bl	8009aa0 <HAL_GPIO_Init>
}
 8005d8a:	e067      	b.n	8005e5c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a38      	ldr	r2, [pc, #224]	; (8005e74 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d12f      	bne.n	8005df6 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d96:	4b33      	ldr	r3, [pc, #204]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d9c:	4a31      	ldr	r2, [pc, #196]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005d9e:	f043 0304 	orr.w	r3, r3, #4
 8005da2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005da6:	4b2f      	ldr	r3, [pc, #188]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005db4:	4b2b      	ldr	r3, [pc, #172]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dba:	4a2a      	ldr	r2, [pc, #168]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005dbc:	f043 0308 	orr.w	r3, r3, #8
 8005dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005dc4:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005dd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005de0:	2300      	movs	r3, #0
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005de4:	2302      	movs	r3, #2
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dec:	4619      	mov	r1, r3
 8005dee:	4822      	ldr	r0, [pc, #136]	; (8005e78 <HAL_TIM_Encoder_MspInit+0x214>)
 8005df0:	f003 fe56 	bl	8009aa0 <HAL_GPIO_Init>
}
 8005df4:	e032      	b.n	8005e5c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a20      	ldr	r2, [pc, #128]	; (8005e7c <HAL_TIM_Encoder_MspInit+0x218>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d12d      	bne.n	8005e5c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005e00:	4b18      	ldr	r3, [pc, #96]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e06:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e08:	f043 0308 	orr.w	r3, r3, #8
 8005e0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e1e:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e24:	4a0f      	ldr	r2, [pc, #60]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <HAL_TIM_Encoder_MspInit+0x200>)
 8005e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e40:	2302      	movs	r3, #2
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e54:	4619      	mov	r1, r3
 8005e56:	4804      	ldr	r0, [pc, #16]	; (8005e68 <HAL_TIM_Encoder_MspInit+0x204>)
 8005e58:	f003 fe22 	bl	8009aa0 <HAL_GPIO_Init>
}
 8005e5c:	bf00      	nop
 8005e5e:	3740      	adds	r7, #64	; 0x40
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	58024400 	.word	0x58024400
 8005e68:	58020000 	.word	0x58020000
 8005e6c:	58020400 	.word	0x58020400
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	58020c00 	.word	0x58020c00
 8005e7c:	40000c00 	.word	0x40000c00

08005e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a42      	ldr	r2, [pc, #264]	; (8005f98 <HAL_TIM_Base_MspInit+0x118>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d117      	bne.n	8005ec2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e92:	4b42      	ldr	r3, [pc, #264]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e98:	4a40      	ldr	r2, [pc, #256]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005e9a:	f043 0320 	orr.w	r3, r3, #32
 8005e9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ea2:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	2037      	movs	r0, #55	; 0x37
 8005eb6:	f000 ff84 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005eba:	2037      	movs	r0, #55	; 0x37
 8005ebc:	f000 ff9b 	bl	8006df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005ec0:	e065      	b.n	8005f8e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a36      	ldr	r2, [pc, #216]	; (8005fa0 <HAL_TIM_Base_MspInit+0x120>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d127      	bne.n	8005f1c <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005ecc:	4b33      	ldr	r3, [pc, #204]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ed2:	4a32      	ldr	r2, [pc, #200]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005edc:	4b2f      	ldr	r3, [pc, #188]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005eea:	2200      	movs	r2, #0
 8005eec:	2100      	movs	r1, #0
 8005eee:	202b      	movs	r0, #43	; 0x2b
 8005ef0:	f000 ff67 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005ef4:	202b      	movs	r0, #43	; 0x2b
 8005ef6:	f000 ff7e 	bl	8006df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005efa:	2200      	movs	r2, #0
 8005efc:	2100      	movs	r1, #0
 8005efe:	202c      	movs	r0, #44	; 0x2c
 8005f00:	f000 ff5f 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005f04:	202c      	movs	r0, #44	; 0x2c
 8005f06:	f000 ff76 	bl	8006df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	202d      	movs	r0, #45	; 0x2d
 8005f10:	f000 ff57 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005f14:	202d      	movs	r0, #45	; 0x2d
 8005f16:	f000 ff6e 	bl	8006df6 <HAL_NVIC_EnableIRQ>
}
 8005f1a:	e038      	b.n	8005f8e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM13)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a20      	ldr	r2, [pc, #128]	; (8005fa4 <HAL_TIM_Base_MspInit+0x124>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d117      	bne.n	8005f56 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005f26:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005f44:	2200      	movs	r2, #0
 8005f46:	2100      	movs	r1, #0
 8005f48:	202c      	movs	r0, #44	; 0x2c
 8005f4a:	f000 ff3a 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005f4e:	202c      	movs	r0, #44	; 0x2c
 8005f50:	f000 ff51 	bl	8006df6 <HAL_NVIC_EnableIRQ>
}
 8005f54:	e01b      	b.n	8005f8e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <HAL_TIM_Base_MspInit+0x128>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d116      	bne.n	8005f8e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005f60:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f66:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <HAL_TIM_Base_MspInit+0x11c>)
 8005f72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	60bb      	str	r3, [r7, #8]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	202d      	movs	r0, #45	; 0x2d
 8005f84:	f000 ff1d 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005f88:	202d      	movs	r0, #45	; 0x2d
 8005f8a:	f000 ff34 	bl	8006df6 <HAL_NVIC_EnableIRQ>
}
 8005f8e:	bf00      	nop
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40001400 	.word	0x40001400
 8005f9c:	58024400 	.word	0x58024400
 8005fa0:	40010400 	.word	0x40010400
 8005fa4:	40001c00 	.word	0x40001c00
 8005fa8:	40002000 	.word	0x40002000

08005fac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2b      	ldr	r2, [pc, #172]	; (8006068 <HAL_TIM_PWM_MspInit+0xbc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d117      	bne.n	8005fee <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 8005fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 8005fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005fce:	4b27      	ldr	r3, [pc, #156]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 8005fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	697b      	ldr	r3, [r7, #20]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	202b      	movs	r0, #43	; 0x2b
 8005fe2:	f000 feee 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005fe6:	202b      	movs	r0, #43	; 0x2b
 8005fe8:	f000 ff05 	bl	8006df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8005fec:	e038      	b.n	8006060 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM15)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1f      	ldr	r2, [pc, #124]	; (8006070 <HAL_TIM_PWM_MspInit+0xc4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d117      	bne.n	8006028 <HAL_TIM_PWM_MspInit+0x7c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005ff8:	4b1c      	ldr	r3, [pc, #112]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 8005ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ffe:	4a1b      	ldr	r2, [pc, #108]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006008:	4b18      	ldr	r3, [pc, #96]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 800600a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800600e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006012:	613b      	str	r3, [r7, #16]
 8006014:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8006016:	2200      	movs	r2, #0
 8006018:	2100      	movs	r1, #0
 800601a:	2074      	movs	r0, #116	; 0x74
 800601c:	f000 fed1 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006020:	2074      	movs	r0, #116	; 0x74
 8006022:	f000 fee8 	bl	8006df6 <HAL_NVIC_EnableIRQ>
}
 8006026:	e01b      	b.n	8006060 <HAL_TIM_PWM_MspInit+0xb4>
  else if(htim_pwm->Instance==TIM23)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a11      	ldr	r2, [pc, #68]	; (8006074 <HAL_TIM_PWM_MspInit+0xc8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d116      	bne.n	8006060 <HAL_TIM_PWM_MspInit+0xb4>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 8006034:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006038:	4a0c      	ldr	r2, [pc, #48]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 800603a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800603e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <HAL_TIM_PWM_MspInit+0xc0>)
 8006044:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006050:	2200      	movs	r2, #0
 8006052:	2100      	movs	r1, #0
 8006054:	20a1      	movs	r0, #161	; 0xa1
 8006056:	f000 feb4 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800605a:	20a1      	movs	r0, #161	; 0xa1
 800605c:	f000 fecb 	bl	8006df6 <HAL_NVIC_EnableIRQ>
}
 8006060:	bf00      	nop
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40001800 	.word	0x40001800
 800606c:	58024400 	.word	0x58024400
 8006070:	40014000 	.word	0x40014000
 8006074:	4000e000 	.word	0x4000e000

08006078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_TIM_MspPostInit+0x100>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d120      	bne.n	80060dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800609a:	4b38      	ldr	r3, [pc, #224]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 800609c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060a0:	4a36      	ldr	r2, [pc, #216]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 80060a2:	f043 0302 	orr.w	r3, r3, #2
 80060a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060aa:	4b34      	ldr	r3, [pc, #208]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 80060ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80060b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80060bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060be:	2302      	movs	r3, #2
 80060c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060c6:	2300      	movs	r3, #0
 80060c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80060ca:	2302      	movs	r3, #2
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	4619      	mov	r1, r3
 80060d4:	482a      	ldr	r0, [pc, #168]	; (8006180 <HAL_TIM_MspPostInit+0x108>)
 80060d6:	f003 fce3 	bl	8009aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 80060da:	e048      	b.n	800616e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM15)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a28      	ldr	r2, [pc, #160]	; (8006184 <HAL_TIM_MspPostInit+0x10c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d11f      	bne.n	8006126 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80060e6:	4b25      	ldr	r3, [pc, #148]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 80060e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ec:	4a23      	ldr	r2, [pc, #140]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 80060ee:	f043 0310 	orr.w	r3, r3, #16
 80060f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060f6:	4b21      	ldr	r3, [pc, #132]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 80060f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006104:	2360      	movs	r3, #96	; 0x60
 8006106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006108:	2302      	movs	r3, #2
 800610a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006110:	2300      	movs	r3, #0
 8006112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006114:	2304      	movs	r3, #4
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4619      	mov	r1, r3
 800611e:	481a      	ldr	r0, [pc, #104]	; (8006188 <HAL_TIM_MspPostInit+0x110>)
 8006120:	f003 fcbe 	bl	8009aa0 <HAL_GPIO_Init>
}
 8006124:	e023      	b.n	800616e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM23)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a18      	ldr	r2, [pc, #96]	; (800618c <HAL_TIM_MspPostInit+0x114>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d11e      	bne.n	800616e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 8006132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006136:	4a11      	ldr	r2, [pc, #68]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 8006138:	f043 0320 	orr.w	r3, r3, #32
 800613c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <HAL_TIM_MspPostInit+0x104>)
 8006142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800614e:	2301      	movs	r3, #1
 8006150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006152:	2302      	movs	r3, #2
 8006154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800615a:	2300      	movs	r3, #0
 800615c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800615e:	230d      	movs	r3, #13
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006162:	f107 0314 	add.w	r3, r7, #20
 8006166:	4619      	mov	r1, r3
 8006168:	4809      	ldr	r0, [pc, #36]	; (8006190 <HAL_TIM_MspPostInit+0x118>)
 800616a:	f003 fc99 	bl	8009aa0 <HAL_GPIO_Init>
}
 800616e:	bf00      	nop
 8006170:	3728      	adds	r7, #40	; 0x28
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40001800 	.word	0x40001800
 800617c:	58024400 	.word	0x58024400
 8006180:	58020400 	.word	0x58020400
 8006184:	40014000 	.word	0x40014000
 8006188:	58021000 	.word	0x58021000
 800618c:	4000e000 	.word	0x4000e000
 8006190:	58021400 	.word	0x58021400

08006194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b0b6      	sub	sp, #216	; 0xd8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800619c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	22b4      	movs	r2, #180	; 0xb4
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f00a fdaf 	bl	8010d18 <memset>
  if(huart->Instance==USART1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a57      	ldr	r2, [pc, #348]	; (800631c <HAL_UART_MspInit+0x188>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	f040 80a7 	bne.w	8006314 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80061c6:	2301      	movs	r3, #1
 80061c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061d0:	f107 0310 	add.w	r3, r7, #16
 80061d4:	4618      	mov	r0, r3
 80061d6:	f004 fdb1 	bl	800ad3c <HAL_RCCEx_PeriphCLKConfig>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80061e0:	f7fb fa58 	bl	8001694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80061e4:	4b4e      	ldr	r3, [pc, #312]	; (8006320 <HAL_UART_MspInit+0x18c>)
 80061e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061ea:	4a4d      	ldr	r2, [pc, #308]	; (8006320 <HAL_UART_MspInit+0x18c>)
 80061ec:	f043 0310 	orr.w	r3, r3, #16
 80061f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80061f4:	4b4a      	ldr	r3, [pc, #296]	; (8006320 <HAL_UART_MspInit+0x18c>)
 80061f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006202:	4b47      	ldr	r3, [pc, #284]	; (8006320 <HAL_UART_MspInit+0x18c>)
 8006204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006208:	4a45      	ldr	r2, [pc, #276]	; (8006320 <HAL_UART_MspInit+0x18c>)
 800620a:	f043 0301 	orr.w	r3, r3, #1
 800620e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006212:	4b43      	ldr	r3, [pc, #268]	; (8006320 <HAL_UART_MspInit+0x18c>)
 8006214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006220:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006228:	2302      	movs	r3, #2
 800622a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622e:	2300      	movs	r3, #0
 8006230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006234:	2300      	movs	r3, #0
 8006236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800623a:	2307      	movs	r3, #7
 800623c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006240:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006244:	4619      	mov	r1, r3
 8006246:	4837      	ldr	r0, [pc, #220]	; (8006324 <HAL_UART_MspInit+0x190>)
 8006248:	f003 fc2a 	bl	8009aa0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800624c:	4b36      	ldr	r3, [pc, #216]	; (8006328 <HAL_UART_MspInit+0x194>)
 800624e:	4a37      	ldr	r2, [pc, #220]	; (800632c <HAL_UART_MspInit+0x198>)
 8006250:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006252:	4b35      	ldr	r3, [pc, #212]	; (8006328 <HAL_UART_MspInit+0x194>)
 8006254:	2229      	movs	r2, #41	; 0x29
 8006256:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006258:	4b33      	ldr	r3, [pc, #204]	; (8006328 <HAL_UART_MspInit+0x194>)
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800625e:	4b32      	ldr	r3, [pc, #200]	; (8006328 <HAL_UART_MspInit+0x194>)
 8006260:	2200      	movs	r2, #0
 8006262:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006264:	4b30      	ldr	r3, [pc, #192]	; (8006328 <HAL_UART_MspInit+0x194>)
 8006266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800626a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800626c:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <HAL_UART_MspInit+0x194>)
 800626e:	2200      	movs	r2, #0
 8006270:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006272:	4b2d      	ldr	r3, [pc, #180]	; (8006328 <HAL_UART_MspInit+0x194>)
 8006274:	2200      	movs	r2, #0
 8006276:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006278:	4b2b      	ldr	r3, [pc, #172]	; (8006328 <HAL_UART_MspInit+0x194>)
 800627a:	2200      	movs	r2, #0
 800627c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <HAL_UART_MspInit+0x194>)
 8006280:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006284:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006286:	4b28      	ldr	r3, [pc, #160]	; (8006328 <HAL_UART_MspInit+0x194>)
 8006288:	2200      	movs	r2, #0
 800628a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800628c:	4826      	ldr	r0, [pc, #152]	; (8006328 <HAL_UART_MspInit+0x194>)
 800628e:	f000 fdcd 	bl	8006e2c <HAL_DMA_Init>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8006298:	f7fb f9fc 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a22      	ldr	r2, [pc, #136]	; (8006328 <HAL_UART_MspInit+0x194>)
 80062a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80062a2:	4a21      	ldr	r2, [pc, #132]	; (8006328 <HAL_UART_MspInit+0x194>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80062a8:	4b21      	ldr	r3, [pc, #132]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062aa:	4a22      	ldr	r2, [pc, #136]	; (8006334 <HAL_UART_MspInit+0x1a0>)
 80062ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80062ae:	4b20      	ldr	r3, [pc, #128]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062b0:	222a      	movs	r2, #42	; 0x2a
 80062b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062b4:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062b6:	2240      	movs	r2, #64	; 0x40
 80062b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062ba:	4b1d      	ldr	r3, [pc, #116]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062bc:	2200      	movs	r2, #0
 80062be:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062c0:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062c8:	4b19      	ldr	r3, [pc, #100]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062ce:	4b18      	ldr	r3, [pc, #96]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80062d4:	4b16      	ldr	r3, [pc, #88]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80062da:	4b15      	ldr	r3, [pc, #84]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062e2:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80062e8:	4811      	ldr	r0, [pc, #68]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062ea:	f000 fd9f 	bl	8006e2c <HAL_DMA_Init>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80062f4:	f7fb f9ce 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <HAL_UART_MspInit+0x19c>)
 80062fc:	679a      	str	r2, [r3, #120]	; 0x78
 80062fe:	4a0c      	ldr	r2, [pc, #48]	; (8006330 <HAL_UART_MspInit+0x19c>)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	2025      	movs	r0, #37	; 0x25
 800630a:	f000 fd5a 	bl	8006dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800630e:	2025      	movs	r0, #37	; 0x25
 8006310:	f000 fd71 	bl	8006df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006314:	bf00      	nop
 8006316:	37d8      	adds	r7, #216	; 0xd8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40011000 	.word	0x40011000
 8006320:	58024400 	.word	0x58024400
 8006324:	58020000 	.word	0x58020000
 8006328:	24000654 	.word	0x24000654
 800632c:	40020010 	.word	0x40020010
 8006330:	240006cc 	.word	0x240006cc
 8006334:	40020028 	.word	0x40020028

08006338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800633c:	e7fe      	b.n	800633c <NMI_Handler+0x4>

0800633e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800633e:	b480      	push	{r7}
 8006340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006342:	e7fe      	b.n	8006342 <HardFault_Handler+0x4>

08006344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006348:	e7fe      	b.n	8006348 <MemManage_Handler+0x4>

0800634a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800634e:	e7fe      	b.n	800634e <BusFault_Handler+0x4>

08006350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006354:	e7fe      	b.n	8006354 <UsageFault_Handler+0x4>

08006356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006356:	b480      	push	{r7}
 8006358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800635a:	bf00      	nop
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006372:	b480      	push	{r7}
 8006374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006376:	bf00      	nop
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006384:	f000 fc22 	bl	8006bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006388:	bf00      	nop
 800638a:	bd80      	pop	{r7, pc}

0800638c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80063a0:	4802      	ldr	r0, [pc, #8]	; (80063ac <DMA1_Stream0_IRQHandler+0x10>)
 80063a2:	f002 f86b 	bl	800847c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	24000654 	.word	0x24000654

080063b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80063b4:	4802      	ldr	r0, [pc, #8]	; (80063c0 <DMA1_Stream1_IRQHandler+0x10>)
 80063b6:	f002 f861 	bl	800847c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80063ba:	bf00      	nop
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	240006cc 	.word	0x240006cc

080063c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80063c8:	4802      	ldr	r0, [pc, #8]	; (80063d4 <USART1_IRQHandler+0x10>)
 80063ca:	f007 fee7 	bl	800e19c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80063ce:	bf00      	nop
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	240005c4 	.word	0x240005c4

080063d8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80063dc:	4803      	ldr	r0, [pc, #12]	; (80063ec <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80063de:	f006 fcb7 	bl	800cd50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80063e2:	4803      	ldr	r0, [pc, #12]	; (80063f0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80063e4:	f006 fcb4 	bl	800cd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80063e8:	bf00      	nop
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	240003fc 	.word	0x240003fc
 80063f0:	24000448 	.word	0x24000448

080063f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80063f8:	4803      	ldr	r0, [pc, #12]	; (8006408 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80063fa:	f006 fca9 	bl	800cd50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80063fe:	4803      	ldr	r0, [pc, #12]	; (800640c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006400:	f006 fca6 	bl	800cd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006404:	bf00      	nop
 8006406:	bd80      	pop	{r7, pc}
 8006408:	240003fc 	.word	0x240003fc
 800640c:	24000494 	.word	0x24000494

08006410 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006414:	4803      	ldr	r0, [pc, #12]	; (8006424 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8006416:	f006 fc9b 	bl	800cd50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800641a:	4803      	ldr	r0, [pc, #12]	; (8006428 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800641c:	f006 fc98 	bl	800cd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	240003fc 	.word	0x240003fc
 8006428:	240004e0 	.word	0x240004e0

0800642c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006430:	4802      	ldr	r0, [pc, #8]	; (800643c <TIM7_IRQHandler+0x10>)
 8006432:	f006 fc8d 	bl	800cd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006436:	bf00      	nop
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	240003b0 	.word	0x240003b0

08006440 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006444:	4802      	ldr	r0, [pc, #8]	; (8006450 <TIM15_IRQHandler+0x10>)
 8006446:	f006 fc83 	bl	800cd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800644a:	bf00      	nop
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	2400052c 	.word	0x2400052c

08006454 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <TIM23_IRQHandler+0x10>)
 800645a:	f006 fc79 	bl	800cd50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	24000578 	.word	0x24000578

08006468 <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
	DC_motor_init();
 800646c:	f7fa f906 	bl	800067c <_Z13DC_motor_initv>
}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}

08006474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
	return 1;
 8006478:	2301      	movs	r3, #1
}
 800647a:	4618      	mov	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <_kill>:

int _kill(int pid, int sig)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800648e:	f00a fc0b 	bl	8010ca8 <__errno>
 8006492:	4603      	mov	r3, r0
 8006494:	2216      	movs	r2, #22
 8006496:	601a      	str	r2, [r3, #0]
	return -1;
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <_exit>:

void _exit (int status)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80064ac:	f04f 31ff 	mov.w	r1, #4294967295
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ffe7 	bl	8006484 <_kill>
	while (1) {}		/* Make sure we hang here */
 80064b6:	e7fe      	b.n	80064b6 <_exit+0x12>

080064b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064c0:	4a14      	ldr	r2, [pc, #80]	; (8006514 <_sbrk+0x5c>)
 80064c2:	4b15      	ldr	r3, [pc, #84]	; (8006518 <_sbrk+0x60>)
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064cc:	4b13      	ldr	r3, [pc, #76]	; (800651c <_sbrk+0x64>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064d4:	4b11      	ldr	r3, [pc, #68]	; (800651c <_sbrk+0x64>)
 80064d6:	4a12      	ldr	r2, [pc, #72]	; (8006520 <_sbrk+0x68>)
 80064d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064da:	4b10      	ldr	r3, [pc, #64]	; (800651c <_sbrk+0x64>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d207      	bcs.n	80064f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80064e8:	f00a fbde 	bl	8010ca8 <__errno>
 80064ec:	4603      	mov	r3, r0
 80064ee:	220c      	movs	r2, #12
 80064f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80064f2:	f04f 33ff 	mov.w	r3, #4294967295
 80064f6:	e009      	b.n	800650c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80064f8:	4b08      	ldr	r3, [pc, #32]	; (800651c <_sbrk+0x64>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80064fe:	4b07      	ldr	r3, [pc, #28]	; (800651c <_sbrk+0x64>)
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	4a05      	ldr	r2, [pc, #20]	; (800651c <_sbrk+0x64>)
 8006508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	24050000 	.word	0x24050000
 8006518:	00000400 	.word	0x00000400
 800651c:	24002320 	.word	0x24002320
 8006520:	24002340 	.word	0x24002340

08006524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006528:	4b32      	ldr	r3, [pc, #200]	; (80065f4 <SystemInit+0xd0>)
 800652a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652e:	4a31      	ldr	r2, [pc, #196]	; (80065f4 <SystemInit+0xd0>)
 8006530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006538:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <SystemInit+0xd4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2b06      	cmp	r3, #6
 8006542:	d807      	bhi.n	8006554 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006544:	4b2c      	ldr	r3, [pc, #176]	; (80065f8 <SystemInit+0xd4>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f023 030f 	bic.w	r3, r3, #15
 800654c:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <SystemInit+0xd4>)
 800654e:	f043 0307 	orr.w	r3, r3, #7
 8006552:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006554:	4b29      	ldr	r3, [pc, #164]	; (80065fc <SystemInit+0xd8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a28      	ldr	r2, [pc, #160]	; (80065fc <SystemInit+0xd8>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006560:	4b26      	ldr	r3, [pc, #152]	; (80065fc <SystemInit+0xd8>)
 8006562:	2200      	movs	r2, #0
 8006564:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006566:	4b25      	ldr	r3, [pc, #148]	; (80065fc <SystemInit+0xd8>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4924      	ldr	r1, [pc, #144]	; (80065fc <SystemInit+0xd8>)
 800656c:	4b24      	ldr	r3, [pc, #144]	; (8006600 <SystemInit+0xdc>)
 800656e:	4013      	ands	r3, r2
 8006570:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006572:	4b21      	ldr	r3, [pc, #132]	; (80065f8 <SystemInit+0xd4>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800657e:	4b1e      	ldr	r3, [pc, #120]	; (80065f8 <SystemInit+0xd4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 030f 	bic.w	r3, r3, #15
 8006586:	4a1c      	ldr	r2, [pc, #112]	; (80065f8 <SystemInit+0xd4>)
 8006588:	f043 0307 	orr.w	r3, r3, #7
 800658c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800658e:	4b1b      	ldr	r3, [pc, #108]	; (80065fc <SystemInit+0xd8>)
 8006590:	2200      	movs	r2, #0
 8006592:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006594:	4b19      	ldr	r3, [pc, #100]	; (80065fc <SystemInit+0xd8>)
 8006596:	2200      	movs	r2, #0
 8006598:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800659a:	4b18      	ldr	r3, [pc, #96]	; (80065fc <SystemInit+0xd8>)
 800659c:	2200      	movs	r2, #0
 800659e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80065a0:	4b16      	ldr	r3, [pc, #88]	; (80065fc <SystemInit+0xd8>)
 80065a2:	4a18      	ldr	r2, [pc, #96]	; (8006604 <SystemInit+0xe0>)
 80065a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <SystemInit+0xd8>)
 80065a8:	4a17      	ldr	r2, [pc, #92]	; (8006608 <SystemInit+0xe4>)
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <SystemInit+0xd8>)
 80065ae:	4a17      	ldr	r2, [pc, #92]	; (800660c <SystemInit+0xe8>)
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80065b2:	4b12      	ldr	r3, [pc, #72]	; (80065fc <SystemInit+0xd8>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <SystemInit+0xd8>)
 80065ba:	4a14      	ldr	r2, [pc, #80]	; (800660c <SystemInit+0xe8>)
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <SystemInit+0xd8>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80065c4:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <SystemInit+0xd8>)
 80065c6:	4a11      	ldr	r2, [pc, #68]	; (800660c <SystemInit+0xe8>)
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80065ca:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <SystemInit+0xd8>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <SystemInit+0xd8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a09      	ldr	r2, [pc, #36]	; (80065fc <SystemInit+0xd8>)
 80065d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <SystemInit+0xd8>)
 80065de:	2200      	movs	r2, #0
 80065e0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <SystemInit+0xec>)
 80065e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80065e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80065ea:	bf00      	nop
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	e000ed00 	.word	0xe000ed00
 80065f8:	52002000 	.word	0x52002000
 80065fc:	58024400 	.word	0x58024400
 8006600:	eaf6ed7f 	.word	0xeaf6ed7f
 8006604:	02020200 	.word	0x02020200
 8006608:	01ff0000 	.word	0x01ff0000
 800660c:	01010280 	.word	0x01010280
 8006610:	52004000 	.word	0x52004000

08006614 <HAL_TIM_PeriodElapsedCallback>:
#include "reset.h"
#include "scara.h"
#include "microswitch.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	/** SCARA **/
	if (htim->Instance == TIM7) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a8a      	ldr	r2, [pc, #552]	; (800684c <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d12a      	bne.n	800667c <HAL_TIM_PeriodElapsedCallback+0x68>
		/*stepper 2*/
		if (sc.temp_2 == 1) {
 8006626:	4b8a      	ldr	r3, [pc, #552]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662a:	2b01      	cmp	r3, #1
 800662c:	d109      	bne.n	8006642 <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_SET);
 800662e:	2201      	movs	r2, #1
 8006630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006634:	4887      	ldr	r0, [pc, #540]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006636:	f003 fbf3 	bl	8009e20 <HAL_GPIO_WritePin>
			sc.temp_2 = 0;
 800663a:	4b85      	ldr	r3, [pc, #532]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800663c:	2200      	movs	r2, #0
 800663e:	661a      	str	r2, [r3, #96]	; 0x60
 8006640:	e01c      	b.n	800667c <HAL_TIM_PeriodElapsedCallback+0x68>
		}
		else if (sc.step_2 >= 1) {
 8006642:	4b83      	ldr	r3, [pc, #524]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006644:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8006648:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800664c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006654:	db12      	blt.n	800667c <HAL_TIM_PeriodElapsedCallback+0x68>
			HAL_GPIO_WritePin(STEP_PORT_2, STEP_PIN_2, GPIO_PIN_RESET);
 8006656:	2200      	movs	r2, #0
 8006658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800665c:	487d      	ldr	r0, [pc, #500]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800665e:	f003 fbdf 	bl	8009e20 <HAL_GPIO_WritePin>
			sc.temp_2 = 1;
 8006662:	4b7b      	ldr	r3, [pc, #492]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006664:	2201      	movs	r2, #1
 8006666:	661a      	str	r2, [r3, #96]	; 0x60
			sc.step_2 = sc.step_2 - 1;
 8006668:	4b79      	ldr	r3, [pc, #484]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800666a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800666e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006672:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006676:	4b76      	ldr	r3, [pc, #472]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006678:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		}
	}

	if (htim->Instance == TIM8) {
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a75      	ldr	r2, [pc, #468]	; (8006858 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d12a      	bne.n	80066dc <HAL_TIM_PeriodElapsedCallback+0xc8>
	  /*stepper 1*/
		if (sc.temp_1 == 1) {
 8006686:	4b72      	ldr	r3, [pc, #456]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	2b01      	cmp	r3, #1
 800668c:	d109      	bne.n	80066a2 <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_SET);
 800668e:	2201      	movs	r2, #1
 8006690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006694:	486f      	ldr	r0, [pc, #444]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006696:	f003 fbc3 	bl	8009e20 <HAL_GPIO_WritePin>
			sc.temp_1 = 0;
 800669a:	4b6d      	ldr	r3, [pc, #436]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800669c:	2200      	movs	r2, #0
 800669e:	641a      	str	r2, [r3, #64]	; 0x40
 80066a0:	e01c      	b.n	80066dc <HAL_TIM_PeriodElapsedCallback+0xc8>
		}
		else if (sc.step_1 >= 1) {
 80066a2:	4b6b      	ldr	r3, [pc, #428]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066a4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80066a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b4:	db12      	blt.n	80066dc <HAL_TIM_PeriodElapsedCallback+0xc8>
			HAL_GPIO_WritePin(STEP_PORT_1, STEP_PIN_1, GPIO_PIN_RESET);
 80066b6:	2200      	movs	r2, #0
 80066b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066bc:	4865      	ldr	r0, [pc, #404]	; (8006854 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80066be:	f003 fbaf 	bl	8009e20 <HAL_GPIO_WritePin>
			sc.temp_1 = 1;
 80066c2:	4b63      	ldr	r3, [pc, #396]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
			sc.step_1 = sc.step_1 - 1;
 80066c8:	4b61      	ldr	r3, [pc, #388]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066ca:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80066ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80066d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80066d6:	4b5e      	ldr	r3, [pc, #376]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066d8:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		}
	}

	if (htim->Instance == TIM14) {
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5e      	ldr	r2, [pc, #376]	; (800685c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d12d      	bne.n	8006742 <HAL_TIM_PeriodElapsedCallback+0x12e>
		/*stepper 3*/
		if (sc.temp_3 == 1) {
 80066e6:	4b5a      	ldr	r3, [pc, #360]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10a      	bne.n	8006706 <HAL_TIM_PeriodElapsedCallback+0xf2>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_SET);
 80066f0:	2201      	movs	r2, #1
 80066f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066f6:	485a      	ldr	r0, [pc, #360]	; (8006860 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80066f8:	f003 fb92 	bl	8009e20 <HAL_GPIO_WritePin>
			sc.temp_3 = 0;
 80066fc:	4b54      	ldr	r3, [pc, #336]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006704:	e01d      	b.n	8006742 <HAL_TIM_PeriodElapsedCallback+0x12e>
		}
		else if (sc.step_3 >= 1) {
 8006706:	4b52      	ldr	r3, [pc, #328]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006708:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800670c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006710:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006718:	db13      	blt.n	8006742 <HAL_TIM_PeriodElapsedCallback+0x12e>
			HAL_GPIO_WritePin(STEP_PORT_3, STEP_PIN_3, GPIO_PIN_RESET);
 800671a:	2200      	movs	r2, #0
 800671c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006720:	484f      	ldr	r0, [pc, #316]	; (8006860 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006722:	f003 fb7d 	bl	8009e20 <HAL_GPIO_WritePin>
			sc.temp_3 = 1;
 8006726:	4b4a      	ldr	r3, [pc, #296]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006728:	2201      	movs	r2, #1
 800672a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			sc.step_3 = sc.step_3 - 1;
 800672e:	4b48      	ldr	r3, [pc, #288]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006730:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8006734:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006738:	ee37 7b46 	vsub.f64	d7, d7, d6
 800673c:	4b44      	ldr	r3, [pc, #272]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800673e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		}
	}
	/**  **/


	if (htim->Instance == TIM13) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a47      	ldr	r2, [pc, #284]	; (8006864 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d127      	bne.n	800679c <HAL_TIM_PeriodElapsedCallback+0x188>
	/* ROS publish */
		static int ms=0;
		if(ms%20==0){
 800674c:	4b46      	ldr	r3, [pc, #280]	; (8006868 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	4b46      	ldr	r3, [pc, #280]	; (800686c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006752:	fb83 2301 	smull	r2, r3, r3, r1
 8006756:	10da      	asrs	r2, r3, #3
 8006758:	17cb      	asrs	r3, r1, #31
 800675a:	1ad2      	subs	r2, r2, r3
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	1aca      	subs	r2, r1, r3
 8006766:	2a00      	cmp	r2, #0
 8006768:	d108      	bne.n	800677c <HAL_TIM_PeriodElapsedCallback+0x168>
			ROS::pub_car_vel();
 800676a:	f7fd fb09 	bl	8003d80 <_ZN3ROS11pub_car_velEv>
			ROS::pub_reset();
 800676e:	f7fd fa79 	bl	8003c64 <_ZN3ROS9pub_resetEv>
//			ROS::pub_micro();
			ROS::pub_scaraflag();
 8006772:	f7fd faaf 	bl	8003cd4 <_ZN3ROS13pub_scaraflagEv>
			ms=0;
 8006776:	4b3c      	ldr	r3, [pc, #240]	; (8006868 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
		}
		ms++;
 800677c:	4b3a      	ldr	r3, [pc, #232]	; (8006868 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3301      	adds	r3, #1
 8006782:	4a39      	ldr	r2, [pc, #228]	; (8006868 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8006784:	6013      	str	r3, [r2, #0]

		if(sc.timer_flag) sc.timer_count++;
 8006786:	4b32      	ldr	r3, [pc, #200]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <HAL_TIM_PeriodElapsedCallback+0x184>
 800678e:	4b30      	ldr	r3, [pc, #192]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	3301      	adds	r3, #1
 8006794:	4a2e      	ldr	r2, [pc, #184]	; (8006850 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006796:	6053      	str	r3, [r2, #4]

	/* PID Control */
		motor_standard();
 8006798:	f000 f876 	bl	8006888 <_Z14motor_standardv>
	}


	/** Intake **/
	if (htim->Instance == TIM24){
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a33      	ldr	r2, [pc, #204]	; (8006870 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d14d      	bne.n	8006842 <HAL_TIM_PeriodElapsedCallback+0x22e>
		/* microswitch */
		if (HAL_GPIO_ReadPin(TOUCH_A_PORT, TOUCH_A_PIN) == 0) {
 80067a6:	2140      	movs	r1, #64	; 0x40
 80067a8:	4832      	ldr	r0, [pc, #200]	; (8006874 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80067aa:	f003 fb21 	bl	8009df0 <HAL_GPIO_ReadPin>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d006      	beq.n	80067cc <HAL_TIM_PeriodElapsedCallback+0x1b8>
			MICROSWITCH::touch_a = 1;
 80067be:	492e      	ldr	r1, [pc, #184]	; (8006878 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	4b2d      	ldr	r3, [pc, #180]	; (800687c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80067c6:	e9c1 2300 	strd	r2, r3, [r1]
 80067ca:	e006      	b.n	80067da <HAL_TIM_PeriodElapsedCallback+0x1c6>
		} else MICROSWITCH::touch_a = 0;
 80067cc:	492a      	ldr	r1, [pc, #168]	; (8006878 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_B_PORT, TOUCH_B_PIN) == 0) {
 80067da:	2120      	movs	r1, #32
 80067dc:	4825      	ldr	r0, [pc, #148]	; (8006874 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80067de:	f003 fb07 	bl	8009df0 <HAL_GPIO_ReadPin>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bf0c      	ite	eq
 80067e8:	2301      	moveq	r3, #1
 80067ea:	2300      	movne	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <HAL_TIM_PeriodElapsedCallback+0x1ec>
			MICROSWITCH::touch_b = 1;
 80067f2:	4923      	ldr	r1, [pc, #140]	; (8006880 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80067fa:	e9c1 2300 	strd	r2, r3, [r1]
 80067fe:	e006      	b.n	800680e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else MICROSWITCH::touch_b = 0;
 8006800:	491f      	ldr	r1, [pc, #124]	; (8006880 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	e9c1 2300 	strd	r2, r3, [r1]

		if (HAL_GPIO_ReadPin(TOUCH_C_PORT, TOUCH_C_PIN) == 0) {
 800680e:	2110      	movs	r1, #16
 8006810:	4818      	ldr	r0, [pc, #96]	; (8006874 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006812:	f003 faed 	bl	8009df0 <HAL_GPIO_ReadPin>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d006      	beq.n	8006834 <HAL_TIM_PeriodElapsedCallback+0x220>
			MICROSWITCH::touch_c = 1;
 8006826:	4917      	ldr	r1, [pc, #92]	; (8006884 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	4b13      	ldr	r3, [pc, #76]	; (800687c <HAL_TIM_PeriodElapsedCallback+0x268>)
 800682e:	e9c1 2300 	strd	r2, r3, [r1]
		} else MICROSWITCH::touch_c = 0;
	}
}
 8006832:	e006      	b.n	8006842 <HAL_TIM_PeriodElapsedCallback+0x22e>
		} else MICROSWITCH::touch_c = 0;
 8006834:	4913      	ldr	r1, [pc, #76]	; (8006884 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40001400 	.word	0x40001400
 8006850:	24002240 	.word	0x24002240
 8006854:	58021400 	.word	0x58021400
 8006858:	40010400 	.word	0x40010400
 800685c:	40002000 	.word	0x40002000
 8006860:	58020400 	.word	0x58020400
 8006864:	40001c00 	.word	0x40001c00
 8006868:	24002324 	.word	0x24002324
 800686c:	66666667 	.word	0x66666667
 8006870:	4000e400 	.word	0x4000e400
 8006874:	58021800 	.word	0x58021800
 8006878:	24000790 	.word	0x24000790
 800687c:	3ff00000 	.word	0x3ff00000
 8006880:	24000798 	.word	0x24000798
 8006884:	240007a0 	.word	0x240007a0

08006888 <_Z14motor_standardv>:

void motor_standard(void){
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 800688c:	4b73      	ldr	r3, [pc, #460]	; (8006a5c <_Z14motor_standardv+0x1d4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	b21a      	sxth	r2, r3
 8006894:	4b72      	ldr	r3, [pc, #456]	; (8006a60 <_Z14motor_standardv+0x1d8>)
 8006896:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fr.PIDControl();
 800689a:	4871      	ldr	r0, [pc, #452]	; (8006a60 <_Z14motor_standardv+0x1d8>)
 800689c:	f7f9 ff81 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim2,0);
 80068a0:	4b6e      	ldr	r3, [pc, #440]	; (8006a5c <_Z14motor_standardv+0x1d4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2200      	movs	r2, #0
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PWM < 0) {
 80068a8:	4b6d      	ldr	r3, [pc, #436]	; (8006a60 <_Z14motor_standardv+0x1d8>)
 80068aa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80068ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80068b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b6:	d50c      	bpl.n	80068d2 <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 80068b8:	2201      	movs	r2, #1
 80068ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068be:	4869      	ldr	r0, [pc, #420]	; (8006a64 <_Z14motor_standardv+0x1dc>)
 80068c0:	f003 faae 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 80068c4:	2200      	movs	r2, #0
 80068c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068ca:	4866      	ldr	r0, [pc, #408]	; (8006a64 <_Z14motor_standardv+0x1dc>)
 80068cc:	f003 faa8 	bl	8009e20 <HAL_GPIO_WritePin>
 80068d0:	e00b      	b.n	80068ea <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 80068d2:	2200      	movs	r2, #0
 80068d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068d8:	4862      	ldr	r0, [pc, #392]	; (8006a64 <_Z14motor_standardv+0x1dc>)
 80068da:	f003 faa1 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 80068de:	2201      	movs	r2, #1
 80068e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068e4:	485f      	ldr	r0, [pc, #380]	; (8006a64 <_Z14motor_standardv+0x1dc>)
 80068e6:	f003 fa9b 	bl	8009e20 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, fabs(fr.PWM));
 80068ea:	4b5d      	ldr	r3, [pc, #372]	; (8006a60 <_Z14motor_standardv+0x1d8>)
 80068ec:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80068f0:	eeb0 7bc7 	vabs.f64	d7, d7
 80068f4:	4b5c      	ldr	r3, [pc, #368]	; (8006a68 <_Z14motor_standardv+0x1e0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068fc:	ee17 2a90 	vmov	r2, s15
 8006900:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 8006902:	4b5a      	ldr	r3, [pc, #360]	; (8006a6c <_Z14motor_standardv+0x1e4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	b21a      	sxth	r2, r3
 800690a:	4b59      	ldr	r3, [pc, #356]	; (8006a70 <_Z14motor_standardv+0x1e8>)
 800690c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		fl.PIDControl();
 8006910:	4857      	ldr	r0, [pc, #348]	; (8006a70 <_Z14motor_standardv+0x1e8>)
 8006912:	f7f9 ff46 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8006916:	4b55      	ldr	r3, [pc, #340]	; (8006a6c <_Z14motor_standardv+0x1e4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PWM > 0) {
 800691e:	4b54      	ldr	r3, [pc, #336]	; (8006a70 <_Z14motor_standardv+0x1e8>)
 8006920:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006924:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800692c:	dd0c      	ble.n	8006948 <_Z14motor_standardv+0xc0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 800692e:	2201      	movs	r2, #1
 8006930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006934:	484f      	ldr	r0, [pc, #316]	; (8006a74 <_Z14motor_standardv+0x1ec>)
 8006936:	f003 fa73 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 800693a:	2200      	movs	r2, #0
 800693c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006940:	484c      	ldr	r0, [pc, #304]	; (8006a74 <_Z14motor_standardv+0x1ec>)
 8006942:	f003 fa6d 	bl	8009e20 <HAL_GPIO_WritePin>
 8006946:	e00b      	b.n	8006960 <_Z14motor_standardv+0xd8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800694e:	4849      	ldr	r0, [pc, #292]	; (8006a74 <_Z14motor_standardv+0x1ec>)
 8006950:	f003 fa66 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8006954:	2201      	movs	r2, #1
 8006956:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800695a:	4846      	ldr	r0, [pc, #280]	; (8006a74 <_Z14motor_standardv+0x1ec>)
 800695c:	f003 fa60 	bl	8009e20 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, fabs(fl.PWM));
 8006960:	4b43      	ldr	r3, [pc, #268]	; (8006a70 <_Z14motor_standardv+0x1e8>)
 8006962:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006966:	eeb0 7bc7 	vabs.f64	d7, d7
 800696a:	4b3f      	ldr	r3, [pc, #252]	; (8006a68 <_Z14motor_standardv+0x1e0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006972:	ee17 2a90 	vmov	r2, s15
 8006976:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8006978:	4b3f      	ldr	r3, [pc, #252]	; (8006a78 <_Z14motor_standardv+0x1f0>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	b21a      	sxth	r2, r3
 8006980:	4b3e      	ldr	r3, [pc, #248]	; (8006a7c <_Z14motor_standardv+0x1f4>)
 8006982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		br.PIDControl();
 8006986:	483d      	ldr	r0, [pc, #244]	; (8006a7c <_Z14motor_standardv+0x1f4>)
 8006988:	f7f9 ff0b 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim3,0);
 800698c:	4b3a      	ldr	r3, [pc, #232]	; (8006a78 <_Z14motor_standardv+0x1f0>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PWM > 0) {
 8006994:	4b39      	ldr	r3, [pc, #228]	; (8006a7c <_Z14motor_standardv+0x1f4>)
 8006996:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800699a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	dd0a      	ble.n	80069ba <_Z14motor_standardv+0x132>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 80069a4:	2201      	movs	r2, #1
 80069a6:	2104      	movs	r1, #4
 80069a8:	4835      	ldr	r0, [pc, #212]	; (8006a80 <_Z14motor_standardv+0x1f8>)
 80069aa:	f003 fa39 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2108      	movs	r1, #8
 80069b2:	4833      	ldr	r0, [pc, #204]	; (8006a80 <_Z14motor_standardv+0x1f8>)
 80069b4:	f003 fa34 	bl	8009e20 <HAL_GPIO_WritePin>
 80069b8:	e009      	b.n	80069ce <_Z14motor_standardv+0x146>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2104      	movs	r1, #4
 80069be:	4830      	ldr	r0, [pc, #192]	; (8006a80 <_Z14motor_standardv+0x1f8>)
 80069c0:	f003 fa2e 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 80069c4:	2201      	movs	r2, #1
 80069c6:	2108      	movs	r1, #8
 80069c8:	482d      	ldr	r0, [pc, #180]	; (8006a80 <_Z14motor_standardv+0x1f8>)
 80069ca:	f003 fa29 	bl	8009e20 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(br.PWM));
 80069ce:	4b2b      	ldr	r3, [pc, #172]	; (8006a7c <_Z14motor_standardv+0x1f4>)
 80069d0:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80069d4:	eeb0 7bc7 	vabs.f64	d7, d7
 80069d8:	4b2a      	ldr	r3, [pc, #168]	; (8006a84 <_Z14motor_standardv+0x1fc>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069e0:	ee17 2a90 	vmov	r2, s15
 80069e4:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 80069e6:	4b28      	ldr	r3, [pc, #160]	; (8006a88 <_Z14motor_standardv+0x200>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	b21a      	sxth	r2, r3
 80069ee:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <_Z14motor_standardv+0x204>)
 80069f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		bl.PIDControl();
 80069f4:	4825      	ldr	r0, [pc, #148]	; (8006a8c <_Z14motor_standardv+0x204>)
 80069f6:	f7f9 fed4 	bl	80007a2 <_ZN8DC_motor10PIDControlEv>
		__HAL_TIM_SetCounter(&htim4,0);
 80069fa:	4b23      	ldr	r3, [pc, #140]	; (8006a88 <_Z14motor_standardv+0x200>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2200      	movs	r2, #0
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PWM < 0) {
 8006a02:	4b22      	ldr	r3, [pc, #136]	; (8006a8c <_Z14motor_standardv+0x204>)
 8006a04:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006a08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a10:	d50b      	bpl.n	8006a2a <_Z14motor_standardv+0x1a2>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8006a12:	2201      	movs	r2, #1
 8006a14:	2110      	movs	r1, #16
 8006a16:	481a      	ldr	r0, [pc, #104]	; (8006a80 <_Z14motor_standardv+0x1f8>)
 8006a18:	f003 fa02 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a22:	481b      	ldr	r0, [pc, #108]	; (8006a90 <_Z14motor_standardv+0x208>)
 8006a24:	f003 f9fc 	bl	8009e20 <HAL_GPIO_WritePin>
 8006a28:	e00a      	b.n	8006a40 <_Z14motor_standardv+0x1b8>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2110      	movs	r1, #16
 8006a2e:	4814      	ldr	r0, [pc, #80]	; (8006a80 <_Z14motor_standardv+0x1f8>)
 8006a30:	f003 f9f6 	bl	8009e20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 8006a34:	2201      	movs	r2, #1
 8006a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a3a:	4815      	ldr	r0, [pc, #84]	; (8006a90 <_Z14motor_standardv+0x208>)
 8006a3c:	f003 f9f0 	bl	8009e20 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, fabs(bl.PWM));
 8006a40:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <_Z14motor_standardv+0x204>)
 8006a42:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8006a46:	eeb0 7bc7 	vabs.f64	d7, d7
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <_Z14motor_standardv+0x1fc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006a52:	ee17 2a90 	vmov	r2, s15
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38

}
 8006a58:	bf00      	nop
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	24000280 	.word	0x24000280
 8006a60:	240000a0 	.word	0x240000a0
 8006a64:	58020c00 	.word	0x58020c00
 8006a68:	24000448 	.word	0x24000448
 8006a6c:	24000364 	.word	0x24000364
 8006a70:	24000110 	.word	0x24000110
 8006a74:	58020400 	.word	0x58020400
 8006a78:	240002cc 	.word	0x240002cc
 8006a7c:	24000180 	.word	0x24000180
 8006a80:	58021000 	.word	0x58021000
 8006a84:	2400052c 	.word	0x2400052c
 8006a88:	24000318 	.word	0x24000318
 8006a8c:	240001f0 	.word	0x240001f0
 8006a90:	58020800 	.word	0x58020800

08006a94 <Reset_Handler>:
 8006a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006acc <LoopFillZerobss+0xe>
 8006a98:	f7ff fd44 	bl	8006524 <SystemInit>
 8006a9c:	480c      	ldr	r0, [pc, #48]	; (8006ad0 <LoopFillZerobss+0x12>)
 8006a9e:	490d      	ldr	r1, [pc, #52]	; (8006ad4 <LoopFillZerobss+0x16>)
 8006aa0:	4a0d      	ldr	r2, [pc, #52]	; (8006ad8 <LoopFillZerobss+0x1a>)
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e002      	b.n	8006aac <LoopCopyDataInit>

08006aa6 <CopyDataInit>:
 8006aa6:	58d4      	ldr	r4, [r2, r3]
 8006aa8:	50c4      	str	r4, [r0, r3]
 8006aaa:	3304      	adds	r3, #4

08006aac <LoopCopyDataInit>:
 8006aac:	18c4      	adds	r4, r0, r3
 8006aae:	428c      	cmp	r4, r1
 8006ab0:	d3f9      	bcc.n	8006aa6 <CopyDataInit>
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <LoopFillZerobss+0x1e>)
 8006ab4:	4c0a      	ldr	r4, [pc, #40]	; (8006ae0 <LoopFillZerobss+0x22>)
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e001      	b.n	8006abe <LoopFillZerobss>

08006aba <FillZerobss>:
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	3204      	adds	r2, #4

08006abe <LoopFillZerobss>:
 8006abe:	42a2      	cmp	r2, r4
 8006ac0:	d3fb      	bcc.n	8006aba <FillZerobss>
 8006ac2:	f00a f8f7 	bl	8010cb4 <__libc_init_array>
 8006ac6:	f7fa f841 	bl	8000b4c <main>
 8006aca:	4770      	bx	lr
 8006acc:	24050000 	.word	0x24050000
 8006ad0:	24000000 	.word	0x24000000
 8006ad4:	2400007c 	.word	0x2400007c
 8006ad8:	08012cf0 	.word	0x08012cf0
 8006adc:	24000080 	.word	0x24000080
 8006ae0:	2400233c 	.word	0x2400233c

08006ae4 <ADC3_IRQHandler>:
 8006ae4:	e7fe      	b.n	8006ae4 <ADC3_IRQHandler>
	...

08006ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006aee:	2003      	movs	r0, #3
 8006af0:	f000 f95c 	bl	8006dac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006af4:	f003 ff4c 	bl	800a990 <HAL_RCC_GetSysClockFreq>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <HAL_Init+0x68>)
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	4913      	ldr	r1, [pc, #76]	; (8006b54 <HAL_Init+0x6c>)
 8006b06:	5ccb      	ldrb	r3, [r1, r3]
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b12:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <HAL_Init+0x68>)
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f003 030f 	and.w	r3, r3, #15
 8006b1a:	4a0e      	ldr	r2, [pc, #56]	; (8006b54 <HAL_Init+0x6c>)
 8006b1c:	5cd3      	ldrb	r3, [r2, r3]
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
 8006b28:	4a0b      	ldr	r2, [pc, #44]	; (8006b58 <HAL_Init+0x70>)
 8006b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b2c:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <HAL_Init+0x74>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b32:	200f      	movs	r0, #15
 8006b34:	f000 f814 	bl	8006b60 <HAL_InitTick>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e002      	b.n	8006b48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b42:	f7ff f86f 	bl	8005c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	58024400 	.word	0x58024400
 8006b54:	08011390 	.word	0x08011390
 8006b58:	24000008 	.word	0x24000008
 8006b5c:	24000004 	.word	0x24000004

08006b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006b68:	4b15      	ldr	r3, [pc, #84]	; (8006bc0 <HAL_InitTick+0x60>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e021      	b.n	8006bb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006b74:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <HAL_InitTick+0x64>)
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <HAL_InitTick+0x60>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f941 	bl	8006e12 <HAL_SYSTICK_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e00e      	b.n	8006bb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b0f      	cmp	r3, #15
 8006b9e:	d80a      	bhi.n	8006bb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	f000 f90b 	bl	8006dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bac:	4a06      	ldr	r2, [pc, #24]	; (8006bc8 <HAL_InitTick+0x68>)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e000      	b.n	8006bb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	24000010 	.word	0x24000010
 8006bc4:	24000004 	.word	0x24000004
 8006bc8:	2400000c 	.word	0x2400000c

08006bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006bd0:	4b06      	ldr	r3, [pc, #24]	; (8006bec <HAL_IncTick+0x20>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <HAL_IncTick+0x24>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4413      	add	r3, r2
 8006bdc:	4a04      	ldr	r2, [pc, #16]	; (8006bf0 <HAL_IncTick+0x24>)
 8006bde:	6013      	str	r3, [r2, #0]
}
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	24000010 	.word	0x24000010
 8006bf0:	24002328 	.word	0x24002328

08006bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8006bf8:	4b03      	ldr	r3, [pc, #12]	; (8006c08 <HAL_GetTick+0x14>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	24002328 	.word	0x24002328

08006c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <__NVIC_SetPriorityGrouping+0x40>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <__NVIC_SetPriorityGrouping+0x44>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c3a:	4a04      	ldr	r2, [pc, #16]	; (8006c4c <__NVIC_SetPriorityGrouping+0x40>)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	60d3      	str	r3, [r2, #12]
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	e000ed00 	.word	0xe000ed00
 8006c50:	05fa0000 	.word	0x05fa0000

08006c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <__NVIC_GetPriorityGrouping+0x18>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	f003 0307 	and.w	r3, r3, #7
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	e000ed00 	.word	0xe000ed00

08006c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	4603      	mov	r3, r0
 8006c78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	db0b      	blt.n	8006c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	f003 021f 	and.w	r2, r3, #31
 8006c88:	4907      	ldr	r1, [pc, #28]	; (8006ca8 <__NVIC_EnableIRQ+0x38>)
 8006c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	2001      	movs	r0, #1
 8006c92:	fa00 f202 	lsl.w	r2, r0, r2
 8006c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	e000e100 	.word	0xe000e100

08006cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	6039      	str	r1, [r7, #0]
 8006cb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	db0a      	blt.n	8006cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	490c      	ldr	r1, [pc, #48]	; (8006cf8 <__NVIC_SetPriority+0x4c>)
 8006cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cca:	0112      	lsls	r2, r2, #4
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	440b      	add	r3, r1
 8006cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cd4:	e00a      	b.n	8006cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4908      	ldr	r1, [pc, #32]	; (8006cfc <__NVIC_SetPriority+0x50>)
 8006cdc:	88fb      	ldrh	r3, [r7, #6]
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	3b04      	subs	r3, #4
 8006ce4:	0112      	lsls	r2, r2, #4
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	440b      	add	r3, r1
 8006cea:	761a      	strb	r2, [r3, #24]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	e000e100 	.word	0xe000e100
 8006cfc:	e000ed00 	.word	0xe000ed00

08006d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b089      	sub	sp, #36	; 0x24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f1c3 0307 	rsb	r3, r3, #7
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	bf28      	it	cs
 8006d1e:	2304      	movcs	r3, #4
 8006d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2b06      	cmp	r3, #6
 8006d28:	d902      	bls.n	8006d30 <NVIC_EncodePriority+0x30>
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3b03      	subs	r3, #3
 8006d2e:	e000      	b.n	8006d32 <NVIC_EncodePriority+0x32>
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d34:	f04f 32ff 	mov.w	r2, #4294967295
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	43da      	mvns	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	401a      	ands	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d48:	f04f 31ff 	mov.w	r1, #4294967295
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d52:	43d9      	mvns	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d58:	4313      	orrs	r3, r2
         );
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3724      	adds	r7, #36	; 0x24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d78:	d301      	bcc.n	8006d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e00f      	b.n	8006d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d7e:	4a0a      	ldr	r2, [pc, #40]	; (8006da8 <SysTick_Config+0x40>)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d86:	210f      	movs	r1, #15
 8006d88:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8c:	f7ff ff8e 	bl	8006cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <SysTick_Config+0x40>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d96:	4b04      	ldr	r3, [pc, #16]	; (8006da8 <SysTick_Config+0x40>)
 8006d98:	2207      	movs	r2, #7
 8006d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	e000e010 	.word	0xe000e010

08006dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ff29 	bl	8006c0c <__NVIC_SetPriorityGrouping>
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b086      	sub	sp, #24
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	4603      	mov	r3, r0
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006dd0:	f7ff ff40 	bl	8006c54 <__NVIC_GetPriorityGrouping>
 8006dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	6978      	ldr	r0, [r7, #20]
 8006ddc:	f7ff ff90 	bl	8006d00 <NVIC_EncodePriority>
 8006de0:	4602      	mov	r2, r0
 8006de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006de6:	4611      	mov	r1, r2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff ff5f 	bl	8006cac <__NVIC_SetPriority>
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b082      	sub	sp, #8
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff ff33 	bl	8006c70 <__NVIC_EnableIRQ>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff ffa4 	bl	8006d68 <SysTick_Config>
 8006e20:	4603      	mov	r3, r0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006e34:	f7ff fede 	bl	8006bf4 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e314      	b.n	800746e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a66      	ldr	r2, [pc, #408]	; (8006fe4 <HAL_DMA_Init+0x1b8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d04a      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a65      	ldr	r2, [pc, #404]	; (8006fe8 <HAL_DMA_Init+0x1bc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d045      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a63      	ldr	r2, [pc, #396]	; (8006fec <HAL_DMA_Init+0x1c0>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d040      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a62      	ldr	r2, [pc, #392]	; (8006ff0 <HAL_DMA_Init+0x1c4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d03b      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a60      	ldr	r2, [pc, #384]	; (8006ff4 <HAL_DMA_Init+0x1c8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d036      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a5f      	ldr	r2, [pc, #380]	; (8006ff8 <HAL_DMA_Init+0x1cc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d031      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a5d      	ldr	r2, [pc, #372]	; (8006ffc <HAL_DMA_Init+0x1d0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d02c      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a5c      	ldr	r2, [pc, #368]	; (8007000 <HAL_DMA_Init+0x1d4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d027      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a5a      	ldr	r2, [pc, #360]	; (8007004 <HAL_DMA_Init+0x1d8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d022      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a59      	ldr	r2, [pc, #356]	; (8007008 <HAL_DMA_Init+0x1dc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d01d      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a57      	ldr	r2, [pc, #348]	; (800700c <HAL_DMA_Init+0x1e0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d018      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a56      	ldr	r2, [pc, #344]	; (8007010 <HAL_DMA_Init+0x1e4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d013      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a54      	ldr	r2, [pc, #336]	; (8007014 <HAL_DMA_Init+0x1e8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a53      	ldr	r2, [pc, #332]	; (8007018 <HAL_DMA_Init+0x1ec>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d009      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a51      	ldr	r2, [pc, #324]	; (800701c <HAL_DMA_Init+0x1f0>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d004      	beq.n	8006ee4 <HAL_DMA_Init+0xb8>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a50      	ldr	r2, [pc, #320]	; (8007020 <HAL_DMA_Init+0x1f4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d101      	bne.n	8006ee8 <HAL_DMA_Init+0xbc>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e000      	b.n	8006eea <HAL_DMA_Init+0xbe>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 813c 	beq.w	8007168 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a37      	ldr	r2, [pc, #220]	; (8006fe4 <HAL_DMA_Init+0x1b8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d04a      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a36      	ldr	r2, [pc, #216]	; (8006fe8 <HAL_DMA_Init+0x1bc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d045      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a34      	ldr	r2, [pc, #208]	; (8006fec <HAL_DMA_Init+0x1c0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d040      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a33      	ldr	r2, [pc, #204]	; (8006ff0 <HAL_DMA_Init+0x1c4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d03b      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <HAL_DMA_Init+0x1c8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d036      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <HAL_DMA_Init+0x1cc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d031      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a2e      	ldr	r2, [pc, #184]	; (8006ffc <HAL_DMA_Init+0x1d0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02c      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a2d      	ldr	r2, [pc, #180]	; (8007000 <HAL_DMA_Init+0x1d4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d027      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2b      	ldr	r2, [pc, #172]	; (8007004 <HAL_DMA_Init+0x1d8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d022      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <HAL_DMA_Init+0x1dc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d01d      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a28      	ldr	r2, [pc, #160]	; (800700c <HAL_DMA_Init+0x1e0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d018      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a27      	ldr	r2, [pc, #156]	; (8007010 <HAL_DMA_Init+0x1e4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a25      	ldr	r2, [pc, #148]	; (8007014 <HAL_DMA_Init+0x1e8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00e      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a24      	ldr	r2, [pc, #144]	; (8007018 <HAL_DMA_Init+0x1ec>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d009      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a22      	ldr	r2, [pc, #136]	; (800701c <HAL_DMA_Init+0x1f0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d004      	beq.n	8006fa0 <HAL_DMA_Init+0x174>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a21      	ldr	r2, [pc, #132]	; (8007020 <HAL_DMA_Init+0x1f4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d108      	bne.n	8006fb2 <HAL_DMA_Init+0x186>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	e007      	b.n	8006fc2 <HAL_DMA_Init+0x196>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fc2:	e02f      	b.n	8007024 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fc4:	f7ff fe16 	bl	8006bf4 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b05      	cmp	r3, #5
 8006fd0:	d928      	bls.n	8007024 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2203      	movs	r2, #3
 8006fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e244      	b.n	800746e <HAL_DMA_Init+0x642>
 8006fe4:	40020010 	.word	0x40020010
 8006fe8:	40020028 	.word	0x40020028
 8006fec:	40020040 	.word	0x40020040
 8006ff0:	40020058 	.word	0x40020058
 8006ff4:	40020070 	.word	0x40020070
 8006ff8:	40020088 	.word	0x40020088
 8006ffc:	400200a0 	.word	0x400200a0
 8007000:	400200b8 	.word	0x400200b8
 8007004:	40020410 	.word	0x40020410
 8007008:	40020428 	.word	0x40020428
 800700c:	40020440 	.word	0x40020440
 8007010:	40020458 	.word	0x40020458
 8007014:	40020470 	.word	0x40020470
 8007018:	40020488 	.word	0x40020488
 800701c:	400204a0 	.word	0x400204a0
 8007020:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1c8      	bne.n	8006fc4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4b84      	ldr	r3, [pc, #528]	; (8007250 <HAL_DMA_Init+0x424>)
 800703e:	4013      	ands	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800704a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007056:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007062:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	2b04      	cmp	r3, #4
 8007076:	d107      	bne.n	8007088 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	4313      	orrs	r3, r2
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b28      	cmp	r3, #40	; 0x28
 800708e:	d903      	bls.n	8007098 <HAL_DMA_Init+0x26c>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b2e      	cmp	r3, #46	; 0x2e
 8007096:	d91f      	bls.n	80070d8 <HAL_DMA_Init+0x2ac>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b3e      	cmp	r3, #62	; 0x3e
 800709e:	d903      	bls.n	80070a8 <HAL_DMA_Init+0x27c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b42      	cmp	r3, #66	; 0x42
 80070a6:	d917      	bls.n	80070d8 <HAL_DMA_Init+0x2ac>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b46      	cmp	r3, #70	; 0x46
 80070ae:	d903      	bls.n	80070b8 <HAL_DMA_Init+0x28c>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b48      	cmp	r3, #72	; 0x48
 80070b6:	d90f      	bls.n	80070d8 <HAL_DMA_Init+0x2ac>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b4e      	cmp	r3, #78	; 0x4e
 80070be:	d903      	bls.n	80070c8 <HAL_DMA_Init+0x29c>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b52      	cmp	r3, #82	; 0x52
 80070c6:	d907      	bls.n	80070d8 <HAL_DMA_Init+0x2ac>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b73      	cmp	r3, #115	; 0x73
 80070ce:	d905      	bls.n	80070dc <HAL_DMA_Init+0x2b0>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	2b77      	cmp	r3, #119	; 0x77
 80070d6:	d801      	bhi.n	80070dc <HAL_DMA_Init+0x2b0>
 80070d8:	2301      	movs	r3, #1
 80070da:	e000      	b.n	80070de <HAL_DMA_Init+0x2b2>
 80070dc:	2300      	movs	r3, #0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070e8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0307 	bic.w	r3, r3, #7
 8007100:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b04      	cmp	r3, #4
 8007112:	d117      	bne.n	8007144 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00e      	beq.n	8007144 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f002 fb30 	bl	800978c <DMA_CheckFifoParam>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2240      	movs	r2, #64	; 0x40
 8007136:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e194      	b.n	800746e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f002 fa6b 	bl	8009628 <DMA_CalcBaseAndBitshift>
 8007152:	4603      	mov	r3, r0
 8007154:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	223f      	movs	r2, #63	; 0x3f
 8007160:	409a      	lsls	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	609a      	str	r2, [r3, #8]
 8007166:	e0ca      	b.n	80072fe <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a39      	ldr	r2, [pc, #228]	; (8007254 <HAL_DMA_Init+0x428>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d022      	beq.n	80071b8 <HAL_DMA_Init+0x38c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a38      	ldr	r2, [pc, #224]	; (8007258 <HAL_DMA_Init+0x42c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d01d      	beq.n	80071b8 <HAL_DMA_Init+0x38c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a36      	ldr	r2, [pc, #216]	; (800725c <HAL_DMA_Init+0x430>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d018      	beq.n	80071b8 <HAL_DMA_Init+0x38c>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a35      	ldr	r2, [pc, #212]	; (8007260 <HAL_DMA_Init+0x434>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <HAL_DMA_Init+0x38c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a33      	ldr	r2, [pc, #204]	; (8007264 <HAL_DMA_Init+0x438>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00e      	beq.n	80071b8 <HAL_DMA_Init+0x38c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a32      	ldr	r2, [pc, #200]	; (8007268 <HAL_DMA_Init+0x43c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d009      	beq.n	80071b8 <HAL_DMA_Init+0x38c>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a30      	ldr	r2, [pc, #192]	; (800726c <HAL_DMA_Init+0x440>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d004      	beq.n	80071b8 <HAL_DMA_Init+0x38c>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a2f      	ldr	r2, [pc, #188]	; (8007270 <HAL_DMA_Init+0x444>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d101      	bne.n	80071bc <HAL_DMA_Init+0x390>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <HAL_DMA_Init+0x392>
 80071bc:	2300      	movs	r3, #0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8094 	beq.w	80072ec <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a22      	ldr	r2, [pc, #136]	; (8007254 <HAL_DMA_Init+0x428>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d021      	beq.n	8007212 <HAL_DMA_Init+0x3e6>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a21      	ldr	r2, [pc, #132]	; (8007258 <HAL_DMA_Init+0x42c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d01c      	beq.n	8007212 <HAL_DMA_Init+0x3e6>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1f      	ldr	r2, [pc, #124]	; (800725c <HAL_DMA_Init+0x430>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d017      	beq.n	8007212 <HAL_DMA_Init+0x3e6>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <HAL_DMA_Init+0x434>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d012      	beq.n	8007212 <HAL_DMA_Init+0x3e6>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a1c      	ldr	r2, [pc, #112]	; (8007264 <HAL_DMA_Init+0x438>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00d      	beq.n	8007212 <HAL_DMA_Init+0x3e6>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <HAL_DMA_Init+0x43c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d008      	beq.n	8007212 <HAL_DMA_Init+0x3e6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <HAL_DMA_Init+0x440>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <HAL_DMA_Init+0x3e6>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_DMA_Init+0x444>)
 8007210:	4293      	cmp	r3, r2
 8007212:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4b11      	ldr	r3, [pc, #68]	; (8007274 <HAL_DMA_Init+0x448>)
 8007230:	4013      	ands	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_Init+0x44c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b80      	cmp	r3, #128	; 0x80
 8007242:	d102      	bne.n	800724a <HAL_DMA_Init+0x41e>
 8007244:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007248:	e017      	b.n	800727a <HAL_DMA_Init+0x44e>
 800724a:	2300      	movs	r3, #0
 800724c:	e015      	b.n	800727a <HAL_DMA_Init+0x44e>
 800724e:	bf00      	nop
 8007250:	fe10803f 	.word	0xfe10803f
 8007254:	58025408 	.word	0x58025408
 8007258:	5802541c 	.word	0x5802541c
 800725c:	58025430 	.word	0x58025430
 8007260:	58025444 	.word	0x58025444
 8007264:	58025458 	.word	0x58025458
 8007268:	5802546c 	.word	0x5802546c
 800726c:	58025480 	.word	0x58025480
 8007270:	58025494 	.word	0x58025494
 8007274:	fffe000f 	.word	0xfffe000f
 8007278:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	68d2      	ldr	r2, [r2, #12]
 800727e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007280:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007288:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007290:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007298:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80072a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80072a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	4b6e      	ldr	r3, [pc, #440]	; (8007478 <HAL_DMA_Init+0x64c>)
 80072c0:	4413      	add	r3, r2
 80072c2:	4a6e      	ldr	r2, [pc, #440]	; (800747c <HAL_DMA_Init+0x650>)
 80072c4:	fba2 2303 	umull	r2, r3, r2, r3
 80072c8:	091b      	lsrs	r3, r3, #4
 80072ca:	009a      	lsls	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f002 f9a9 	bl	8009628 <DMA_CalcBaseAndBitshift>
 80072d6:	4603      	mov	r3, r0
 80072d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2201      	movs	r2, #1
 80072e4:	409a      	lsls	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	e008      	b.n	80072fe <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2240      	movs	r2, #64	; 0x40
 80072f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2203      	movs	r2, #3
 80072f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e0b7      	b.n	800746e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a5f      	ldr	r2, [pc, #380]	; (8007480 <HAL_DMA_Init+0x654>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d072      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a5d      	ldr	r2, [pc, #372]	; (8007484 <HAL_DMA_Init+0x658>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d06d      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a5c      	ldr	r2, [pc, #368]	; (8007488 <HAL_DMA_Init+0x65c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d068      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a5a      	ldr	r2, [pc, #360]	; (800748c <HAL_DMA_Init+0x660>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d063      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a59      	ldr	r2, [pc, #356]	; (8007490 <HAL_DMA_Init+0x664>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d05e      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a57      	ldr	r2, [pc, #348]	; (8007494 <HAL_DMA_Init+0x668>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d059      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a56      	ldr	r2, [pc, #344]	; (8007498 <HAL_DMA_Init+0x66c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d054      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a54      	ldr	r2, [pc, #336]	; (800749c <HAL_DMA_Init+0x670>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d04f      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a53      	ldr	r2, [pc, #332]	; (80074a0 <HAL_DMA_Init+0x674>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d04a      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a51      	ldr	r2, [pc, #324]	; (80074a4 <HAL_DMA_Init+0x678>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d045      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a50      	ldr	r2, [pc, #320]	; (80074a8 <HAL_DMA_Init+0x67c>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d040      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a4e      	ldr	r2, [pc, #312]	; (80074ac <HAL_DMA_Init+0x680>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d03b      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a4d      	ldr	r2, [pc, #308]	; (80074b0 <HAL_DMA_Init+0x684>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d036      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a4b      	ldr	r2, [pc, #300]	; (80074b4 <HAL_DMA_Init+0x688>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d031      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a4a      	ldr	r2, [pc, #296]	; (80074b8 <HAL_DMA_Init+0x68c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d02c      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a48      	ldr	r2, [pc, #288]	; (80074bc <HAL_DMA_Init+0x690>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d027      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a47      	ldr	r2, [pc, #284]	; (80074c0 <HAL_DMA_Init+0x694>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d022      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a45      	ldr	r2, [pc, #276]	; (80074c4 <HAL_DMA_Init+0x698>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01d      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a44      	ldr	r2, [pc, #272]	; (80074c8 <HAL_DMA_Init+0x69c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a42      	ldr	r2, [pc, #264]	; (80074cc <HAL_DMA_Init+0x6a0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d013      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a41      	ldr	r2, [pc, #260]	; (80074d0 <HAL_DMA_Init+0x6a4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a3f      	ldr	r2, [pc, #252]	; (80074d4 <HAL_DMA_Init+0x6a8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a3e      	ldr	r2, [pc, #248]	; (80074d8 <HAL_DMA_Init+0x6ac>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <HAL_DMA_Init+0x5c2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a3c      	ldr	r2, [pc, #240]	; (80074dc <HAL_DMA_Init+0x6b0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d101      	bne.n	80073f2 <HAL_DMA_Init+0x5c6>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <HAL_DMA_Init+0x5c8>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d032      	beq.n	800745e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f002 fa43 	bl	8009884 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d102      	bne.n	800740c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007420:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d010      	beq.n	800744c <HAL_DMA_Init+0x620>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b08      	cmp	r3, #8
 8007430:	d80c      	bhi.n	800744c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f002 fac0 	bl	80099b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	e008      	b.n	800745e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	a7fdabf8 	.word	0xa7fdabf8
 800747c:	cccccccd 	.word	0xcccccccd
 8007480:	40020010 	.word	0x40020010
 8007484:	40020028 	.word	0x40020028
 8007488:	40020040 	.word	0x40020040
 800748c:	40020058 	.word	0x40020058
 8007490:	40020070 	.word	0x40020070
 8007494:	40020088 	.word	0x40020088
 8007498:	400200a0 	.word	0x400200a0
 800749c:	400200b8 	.word	0x400200b8
 80074a0:	40020410 	.word	0x40020410
 80074a4:	40020428 	.word	0x40020428
 80074a8:	40020440 	.word	0x40020440
 80074ac:	40020458 	.word	0x40020458
 80074b0:	40020470 	.word	0x40020470
 80074b4:	40020488 	.word	0x40020488
 80074b8:	400204a0 	.word	0x400204a0
 80074bc:	400204b8 	.word	0x400204b8
 80074c0:	58025408 	.word	0x58025408
 80074c4:	5802541c 	.word	0x5802541c
 80074c8:	58025430 	.word	0x58025430
 80074cc:	58025444 	.word	0x58025444
 80074d0:	58025458 	.word	0x58025458
 80074d4:	5802546c 	.word	0x5802546c
 80074d8:	58025480 	.word	0x58025480
 80074dc:	58025494 	.word	0x58025494

080074e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e226      	b.n	800794a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_DMA_Start_IT+0x2a>
 8007506:	2302      	movs	r3, #2
 8007508:	e21f      	b.n	800794a <HAL_DMA_Start_IT+0x46a>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b01      	cmp	r3, #1
 800751c:	f040 820a 	bne.w	8007934 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a68      	ldr	r2, [pc, #416]	; (80076d4 <HAL_DMA_Start_IT+0x1f4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d04a      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a66      	ldr	r2, [pc, #408]	; (80076d8 <HAL_DMA_Start_IT+0x1f8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d045      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a65      	ldr	r2, [pc, #404]	; (80076dc <HAL_DMA_Start_IT+0x1fc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d040      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a63      	ldr	r2, [pc, #396]	; (80076e0 <HAL_DMA_Start_IT+0x200>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d03b      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a62      	ldr	r2, [pc, #392]	; (80076e4 <HAL_DMA_Start_IT+0x204>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d036      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a60      	ldr	r2, [pc, #384]	; (80076e8 <HAL_DMA_Start_IT+0x208>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d031      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a5f      	ldr	r2, [pc, #380]	; (80076ec <HAL_DMA_Start_IT+0x20c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d02c      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a5d      	ldr	r2, [pc, #372]	; (80076f0 <HAL_DMA_Start_IT+0x210>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d027      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5c      	ldr	r2, [pc, #368]	; (80076f4 <HAL_DMA_Start_IT+0x214>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d022      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a5a      	ldr	r2, [pc, #360]	; (80076f8 <HAL_DMA_Start_IT+0x218>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01d      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a59      	ldr	r2, [pc, #356]	; (80076fc <HAL_DMA_Start_IT+0x21c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d018      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a57      	ldr	r2, [pc, #348]	; (8007700 <HAL_DMA_Start_IT+0x220>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a56      	ldr	r2, [pc, #344]	; (8007704 <HAL_DMA_Start_IT+0x224>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00e      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a54      	ldr	r2, [pc, #336]	; (8007708 <HAL_DMA_Start_IT+0x228>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d009      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a53      	ldr	r2, [pc, #332]	; (800770c <HAL_DMA_Start_IT+0x22c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <HAL_DMA_Start_IT+0xee>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a51      	ldr	r2, [pc, #324]	; (8007710 <HAL_DMA_Start_IT+0x230>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d108      	bne.n	80075e0 <HAL_DMA_Start_IT+0x100>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0201 	bic.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	e007      	b.n	80075f0 <HAL_DMA_Start_IT+0x110>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0201 	bic.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 fe6a 	bl	80092d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a34      	ldr	r2, [pc, #208]	; (80076d4 <HAL_DMA_Start_IT+0x1f4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d04a      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a33      	ldr	r2, [pc, #204]	; (80076d8 <HAL_DMA_Start_IT+0x1f8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d045      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a31      	ldr	r2, [pc, #196]	; (80076dc <HAL_DMA_Start_IT+0x1fc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d040      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a30      	ldr	r2, [pc, #192]	; (80076e0 <HAL_DMA_Start_IT+0x200>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d03b      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2e      	ldr	r2, [pc, #184]	; (80076e4 <HAL_DMA_Start_IT+0x204>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d036      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2d      	ldr	r2, [pc, #180]	; (80076e8 <HAL_DMA_Start_IT+0x208>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d031      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a2b      	ldr	r2, [pc, #172]	; (80076ec <HAL_DMA_Start_IT+0x20c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d02c      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a2a      	ldr	r2, [pc, #168]	; (80076f0 <HAL_DMA_Start_IT+0x210>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d027      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a28      	ldr	r2, [pc, #160]	; (80076f4 <HAL_DMA_Start_IT+0x214>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d022      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a27      	ldr	r2, [pc, #156]	; (80076f8 <HAL_DMA_Start_IT+0x218>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01d      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a25      	ldr	r2, [pc, #148]	; (80076fc <HAL_DMA_Start_IT+0x21c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d018      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a24      	ldr	r2, [pc, #144]	; (8007700 <HAL_DMA_Start_IT+0x220>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d013      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a22      	ldr	r2, [pc, #136]	; (8007704 <HAL_DMA_Start_IT+0x224>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00e      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a21      	ldr	r2, [pc, #132]	; (8007708 <HAL_DMA_Start_IT+0x228>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d009      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1f      	ldr	r2, [pc, #124]	; (800770c <HAL_DMA_Start_IT+0x22c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_DMA_Start_IT+0x1bc>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1e      	ldr	r2, [pc, #120]	; (8007710 <HAL_DMA_Start_IT+0x230>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d101      	bne.n	80076a0 <HAL_DMA_Start_IT+0x1c0>
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <HAL_DMA_Start_IT+0x1c2>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d036      	beq.n	8007714 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f023 021e 	bic.w	r2, r3, #30
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0216 	orr.w	r2, r2, #22
 80076b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d03e      	beq.n	8007740 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0208 	orr.w	r2, r2, #8
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e035      	b.n	8007740 <HAL_DMA_Start_IT+0x260>
 80076d4:	40020010 	.word	0x40020010
 80076d8:	40020028 	.word	0x40020028
 80076dc:	40020040 	.word	0x40020040
 80076e0:	40020058 	.word	0x40020058
 80076e4:	40020070 	.word	0x40020070
 80076e8:	40020088 	.word	0x40020088
 80076ec:	400200a0 	.word	0x400200a0
 80076f0:	400200b8 	.word	0x400200b8
 80076f4:	40020410 	.word	0x40020410
 80076f8:	40020428 	.word	0x40020428
 80076fc:	40020440 	.word	0x40020440
 8007700:	40020458 	.word	0x40020458
 8007704:	40020470 	.word	0x40020470
 8007708:	40020488 	.word	0x40020488
 800770c:	400204a0 	.word	0x400204a0
 8007710:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f023 020e 	bic.w	r2, r3, #14
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 020a 	orr.w	r2, r2, #10
 8007726:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d007      	beq.n	8007740 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0204 	orr.w	r2, r2, #4
 800773e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a83      	ldr	r2, [pc, #524]	; (8007954 <HAL_DMA_Start_IT+0x474>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d072      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a82      	ldr	r2, [pc, #520]	; (8007958 <HAL_DMA_Start_IT+0x478>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d06d      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a80      	ldr	r2, [pc, #512]	; (800795c <HAL_DMA_Start_IT+0x47c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d068      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a7f      	ldr	r2, [pc, #508]	; (8007960 <HAL_DMA_Start_IT+0x480>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d063      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a7d      	ldr	r2, [pc, #500]	; (8007964 <HAL_DMA_Start_IT+0x484>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d05e      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a7c      	ldr	r2, [pc, #496]	; (8007968 <HAL_DMA_Start_IT+0x488>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d059      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a7a      	ldr	r2, [pc, #488]	; (800796c <HAL_DMA_Start_IT+0x48c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d054      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a79      	ldr	r2, [pc, #484]	; (8007970 <HAL_DMA_Start_IT+0x490>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d04f      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a77      	ldr	r2, [pc, #476]	; (8007974 <HAL_DMA_Start_IT+0x494>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d04a      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a76      	ldr	r2, [pc, #472]	; (8007978 <HAL_DMA_Start_IT+0x498>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d045      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a74      	ldr	r2, [pc, #464]	; (800797c <HAL_DMA_Start_IT+0x49c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d040      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a73      	ldr	r2, [pc, #460]	; (8007980 <HAL_DMA_Start_IT+0x4a0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d03b      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a71      	ldr	r2, [pc, #452]	; (8007984 <HAL_DMA_Start_IT+0x4a4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d036      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a70      	ldr	r2, [pc, #448]	; (8007988 <HAL_DMA_Start_IT+0x4a8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d031      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a6e      	ldr	r2, [pc, #440]	; (800798c <HAL_DMA_Start_IT+0x4ac>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d02c      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a6d      	ldr	r2, [pc, #436]	; (8007990 <HAL_DMA_Start_IT+0x4b0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d027      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a6b      	ldr	r2, [pc, #428]	; (8007994 <HAL_DMA_Start_IT+0x4b4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a6a      	ldr	r2, [pc, #424]	; (8007998 <HAL_DMA_Start_IT+0x4b8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01d      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a68      	ldr	r2, [pc, #416]	; (800799c <HAL_DMA_Start_IT+0x4bc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a67      	ldr	r2, [pc, #412]	; (80079a0 <HAL_DMA_Start_IT+0x4c0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a65      	ldr	r2, [pc, #404]	; (80079a4 <HAL_DMA_Start_IT+0x4c4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a64      	ldr	r2, [pc, #400]	; (80079a8 <HAL_DMA_Start_IT+0x4c8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a62      	ldr	r2, [pc, #392]	; (80079ac <HAL_DMA_Start_IT+0x4cc>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_DMA_Start_IT+0x350>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a61      	ldr	r2, [pc, #388]	; (80079b0 <HAL_DMA_Start_IT+0x4d0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <HAL_DMA_Start_IT+0x354>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <HAL_DMA_Start_IT+0x356>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d01a      	beq.n	8007870 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007856:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800786e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a37      	ldr	r2, [pc, #220]	; (8007954 <HAL_DMA_Start_IT+0x474>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d04a      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a36      	ldr	r2, [pc, #216]	; (8007958 <HAL_DMA_Start_IT+0x478>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d045      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a34      	ldr	r2, [pc, #208]	; (800795c <HAL_DMA_Start_IT+0x47c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d040      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a33      	ldr	r2, [pc, #204]	; (8007960 <HAL_DMA_Start_IT+0x480>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d03b      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a31      	ldr	r2, [pc, #196]	; (8007964 <HAL_DMA_Start_IT+0x484>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d036      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a30      	ldr	r2, [pc, #192]	; (8007968 <HAL_DMA_Start_IT+0x488>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d031      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a2e      	ldr	r2, [pc, #184]	; (800796c <HAL_DMA_Start_IT+0x48c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02c      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a2d      	ldr	r2, [pc, #180]	; (8007970 <HAL_DMA_Start_IT+0x490>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d027      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a2b      	ldr	r2, [pc, #172]	; (8007974 <HAL_DMA_Start_IT+0x494>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a2a      	ldr	r2, [pc, #168]	; (8007978 <HAL_DMA_Start_IT+0x498>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a28      	ldr	r2, [pc, #160]	; (800797c <HAL_DMA_Start_IT+0x49c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a27      	ldr	r2, [pc, #156]	; (8007980 <HAL_DMA_Start_IT+0x4a0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a25      	ldr	r2, [pc, #148]	; (8007984 <HAL_DMA_Start_IT+0x4a4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a24      	ldr	r2, [pc, #144]	; (8007988 <HAL_DMA_Start_IT+0x4a8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a22      	ldr	r2, [pc, #136]	; (800798c <HAL_DMA_Start_IT+0x4ac>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_DMA_Start_IT+0x430>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a21      	ldr	r2, [pc, #132]	; (8007990 <HAL_DMA_Start_IT+0x4b0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d108      	bne.n	8007922 <HAL_DMA_Start_IT+0x442>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0201 	orr.w	r2, r2, #1
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	e012      	b.n	8007948 <HAL_DMA_Start_IT+0x468>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0201 	orr.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	e009      	b.n	8007948 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800793a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40020010 	.word	0x40020010
 8007958:	40020028 	.word	0x40020028
 800795c:	40020040 	.word	0x40020040
 8007960:	40020058 	.word	0x40020058
 8007964:	40020070 	.word	0x40020070
 8007968:	40020088 	.word	0x40020088
 800796c:	400200a0 	.word	0x400200a0
 8007970:	400200b8 	.word	0x400200b8
 8007974:	40020410 	.word	0x40020410
 8007978:	40020428 	.word	0x40020428
 800797c:	40020440 	.word	0x40020440
 8007980:	40020458 	.word	0x40020458
 8007984:	40020470 	.word	0x40020470
 8007988:	40020488 	.word	0x40020488
 800798c:	400204a0 	.word	0x400204a0
 8007990:	400204b8 	.word	0x400204b8
 8007994:	58025408 	.word	0x58025408
 8007998:	5802541c 	.word	0x5802541c
 800799c:	58025430 	.word	0x58025430
 80079a0:	58025444 	.word	0x58025444
 80079a4:	58025458 	.word	0x58025458
 80079a8:	5802546c 	.word	0x5802546c
 80079ac:	58025480 	.word	0x58025480
 80079b0:	58025494 	.word	0x58025494

080079b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80079bc:	f7ff f91a 	bl	8006bf4 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e2dc      	b.n	8007f86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d008      	beq.n	80079ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2280      	movs	r2, #128	; 0x80
 80079dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e2cd      	b.n	8007f86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a76      	ldr	r2, [pc, #472]	; (8007bc8 <HAL_DMA_Abort+0x214>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d04a      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a74      	ldr	r2, [pc, #464]	; (8007bcc <HAL_DMA_Abort+0x218>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d045      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a73      	ldr	r2, [pc, #460]	; (8007bd0 <HAL_DMA_Abort+0x21c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d040      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a71      	ldr	r2, [pc, #452]	; (8007bd4 <HAL_DMA_Abort+0x220>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d03b      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a70      	ldr	r2, [pc, #448]	; (8007bd8 <HAL_DMA_Abort+0x224>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d036      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a6e      	ldr	r2, [pc, #440]	; (8007bdc <HAL_DMA_Abort+0x228>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d031      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a6d      	ldr	r2, [pc, #436]	; (8007be0 <HAL_DMA_Abort+0x22c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d02c      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a6b      	ldr	r2, [pc, #428]	; (8007be4 <HAL_DMA_Abort+0x230>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d027      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a6a      	ldr	r2, [pc, #424]	; (8007be8 <HAL_DMA_Abort+0x234>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d022      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a68      	ldr	r2, [pc, #416]	; (8007bec <HAL_DMA_Abort+0x238>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01d      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a67      	ldr	r2, [pc, #412]	; (8007bf0 <HAL_DMA_Abort+0x23c>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d018      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a65      	ldr	r2, [pc, #404]	; (8007bf4 <HAL_DMA_Abort+0x240>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a64      	ldr	r2, [pc, #400]	; (8007bf8 <HAL_DMA_Abort+0x244>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a62      	ldr	r2, [pc, #392]	; (8007bfc <HAL_DMA_Abort+0x248>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a61      	ldr	r2, [pc, #388]	; (8007c00 <HAL_DMA_Abort+0x24c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_DMA_Abort+0xd6>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a5f      	ldr	r2, [pc, #380]	; (8007c04 <HAL_DMA_Abort+0x250>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d101      	bne.n	8007a8e <HAL_DMA_Abort+0xda>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <HAL_DMA_Abort+0xdc>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d013      	beq.n	8007abc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 021e 	bic.w	r2, r2, #30
 8007aa2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ab2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	e00a      	b.n	8007ad2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 020e 	bic.w	r2, r2, #14
 8007aca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a3c      	ldr	r2, [pc, #240]	; (8007bc8 <HAL_DMA_Abort+0x214>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d072      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a3a      	ldr	r2, [pc, #232]	; (8007bcc <HAL_DMA_Abort+0x218>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d06d      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a39      	ldr	r2, [pc, #228]	; (8007bd0 <HAL_DMA_Abort+0x21c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d068      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a37      	ldr	r2, [pc, #220]	; (8007bd4 <HAL_DMA_Abort+0x220>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d063      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a36      	ldr	r2, [pc, #216]	; (8007bd8 <HAL_DMA_Abort+0x224>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d05e      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a34      	ldr	r2, [pc, #208]	; (8007bdc <HAL_DMA_Abort+0x228>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d059      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a33      	ldr	r2, [pc, #204]	; (8007be0 <HAL_DMA_Abort+0x22c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d054      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a31      	ldr	r2, [pc, #196]	; (8007be4 <HAL_DMA_Abort+0x230>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d04f      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a30      	ldr	r2, [pc, #192]	; (8007be8 <HAL_DMA_Abort+0x234>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d04a      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a2e      	ldr	r2, [pc, #184]	; (8007bec <HAL_DMA_Abort+0x238>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d045      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a2d      	ldr	r2, [pc, #180]	; (8007bf0 <HAL_DMA_Abort+0x23c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d040      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a2b      	ldr	r2, [pc, #172]	; (8007bf4 <HAL_DMA_Abort+0x240>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d03b      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a2a      	ldr	r2, [pc, #168]	; (8007bf8 <HAL_DMA_Abort+0x244>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d036      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a28      	ldr	r2, [pc, #160]	; (8007bfc <HAL_DMA_Abort+0x248>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d031      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <HAL_DMA_Abort+0x24c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d02c      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a25      	ldr	r2, [pc, #148]	; (8007c04 <HAL_DMA_Abort+0x250>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d027      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a24      	ldr	r2, [pc, #144]	; (8007c08 <HAL_DMA_Abort+0x254>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d022      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a22      	ldr	r2, [pc, #136]	; (8007c0c <HAL_DMA_Abort+0x258>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01d      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a21      	ldr	r2, [pc, #132]	; (8007c10 <HAL_DMA_Abort+0x25c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d018      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <HAL_DMA_Abort+0x260>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	; (8007c18 <HAL_DMA_Abort+0x264>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00e      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <HAL_DMA_Abort+0x268>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_DMA_Abort+0x26c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d004      	beq.n	8007bc2 <HAL_DMA_Abort+0x20e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a19      	ldr	r2, [pc, #100]	; (8007c24 <HAL_DMA_Abort+0x270>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d132      	bne.n	8007c28 <HAL_DMA_Abort+0x274>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e031      	b.n	8007c2a <HAL_DMA_Abort+0x276>
 8007bc6:	bf00      	nop
 8007bc8:	40020010 	.word	0x40020010
 8007bcc:	40020028 	.word	0x40020028
 8007bd0:	40020040 	.word	0x40020040
 8007bd4:	40020058 	.word	0x40020058
 8007bd8:	40020070 	.word	0x40020070
 8007bdc:	40020088 	.word	0x40020088
 8007be0:	400200a0 	.word	0x400200a0
 8007be4:	400200b8 	.word	0x400200b8
 8007be8:	40020410 	.word	0x40020410
 8007bec:	40020428 	.word	0x40020428
 8007bf0:	40020440 	.word	0x40020440
 8007bf4:	40020458 	.word	0x40020458
 8007bf8:	40020470 	.word	0x40020470
 8007bfc:	40020488 	.word	0x40020488
 8007c00:	400204a0 	.word	0x400204a0
 8007c04:	400204b8 	.word	0x400204b8
 8007c08:	58025408 	.word	0x58025408
 8007c0c:	5802541c 	.word	0x5802541c
 8007c10:	58025430 	.word	0x58025430
 8007c14:	58025444 	.word	0x58025444
 8007c18:	58025458 	.word	0x58025458
 8007c1c:	5802546c 	.word	0x5802546c
 8007c20:	58025480 	.word	0x58025480
 8007c24:	58025494 	.word	0x58025494
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d007      	beq.n	8007c3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a6d      	ldr	r2, [pc, #436]	; (8007df8 <HAL_DMA_Abort+0x444>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d04a      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a6b      	ldr	r2, [pc, #428]	; (8007dfc <HAL_DMA_Abort+0x448>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d045      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a6a      	ldr	r2, [pc, #424]	; (8007e00 <HAL_DMA_Abort+0x44c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d040      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a68      	ldr	r2, [pc, #416]	; (8007e04 <HAL_DMA_Abort+0x450>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d03b      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a67      	ldr	r2, [pc, #412]	; (8007e08 <HAL_DMA_Abort+0x454>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d036      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a65      	ldr	r2, [pc, #404]	; (8007e0c <HAL_DMA_Abort+0x458>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d031      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a64      	ldr	r2, [pc, #400]	; (8007e10 <HAL_DMA_Abort+0x45c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d02c      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a62      	ldr	r2, [pc, #392]	; (8007e14 <HAL_DMA_Abort+0x460>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d027      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a61      	ldr	r2, [pc, #388]	; (8007e18 <HAL_DMA_Abort+0x464>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d022      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a5f      	ldr	r2, [pc, #380]	; (8007e1c <HAL_DMA_Abort+0x468>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d01d      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a5e      	ldr	r2, [pc, #376]	; (8007e20 <HAL_DMA_Abort+0x46c>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d018      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a5c      	ldr	r2, [pc, #368]	; (8007e24 <HAL_DMA_Abort+0x470>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a5b      	ldr	r2, [pc, #364]	; (8007e28 <HAL_DMA_Abort+0x474>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00e      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a59      	ldr	r2, [pc, #356]	; (8007e2c <HAL_DMA_Abort+0x478>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d009      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a58      	ldr	r2, [pc, #352]	; (8007e30 <HAL_DMA_Abort+0x47c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d004      	beq.n	8007cde <HAL_DMA_Abort+0x32a>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a56      	ldr	r2, [pc, #344]	; (8007e34 <HAL_DMA_Abort+0x480>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d108      	bne.n	8007cf0 <HAL_DMA_Abort+0x33c>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	e007      	b.n	8007d00 <HAL_DMA_Abort+0x34c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d00:	e013      	b.n	8007d2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d02:	f7fe ff77 	bl	8006bf4 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b05      	cmp	r3, #5
 8007d0e:	d90c      	bls.n	8007d2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2203      	movs	r2, #3
 8007d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e12d      	b.n	8007f86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a2f      	ldr	r2, [pc, #188]	; (8007df8 <HAL_DMA_Abort+0x444>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d04a      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a2d      	ldr	r2, [pc, #180]	; (8007dfc <HAL_DMA_Abort+0x448>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d045      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <HAL_DMA_Abort+0x44c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d040      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a2a      	ldr	r2, [pc, #168]	; (8007e04 <HAL_DMA_Abort+0x450>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d03b      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a29      	ldr	r2, [pc, #164]	; (8007e08 <HAL_DMA_Abort+0x454>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d036      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a27      	ldr	r2, [pc, #156]	; (8007e0c <HAL_DMA_Abort+0x458>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d031      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a26      	ldr	r2, [pc, #152]	; (8007e10 <HAL_DMA_Abort+0x45c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d02c      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a24      	ldr	r2, [pc, #144]	; (8007e14 <HAL_DMA_Abort+0x460>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d027      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a23      	ldr	r2, [pc, #140]	; (8007e18 <HAL_DMA_Abort+0x464>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a21      	ldr	r2, [pc, #132]	; (8007e1c <HAL_DMA_Abort+0x468>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d01d      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a20      	ldr	r2, [pc, #128]	; (8007e20 <HAL_DMA_Abort+0x46c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <HAL_DMA_Abort+0x470>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1d      	ldr	r2, [pc, #116]	; (8007e28 <HAL_DMA_Abort+0x474>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_DMA_Abort+0x478>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_DMA_Abort+0x47c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_DMA_Abort+0x422>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_DMA_Abort+0x480>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <HAL_DMA_Abort+0x426>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <HAL_DMA_Abort+0x428>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d02b      	beq.n	8007e38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	223f      	movs	r2, #63	; 0x3f
 8007df0:	409a      	lsls	r2, r3
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	609a      	str	r2, [r3, #8]
 8007df6:	e02a      	b.n	8007e4e <HAL_DMA_Abort+0x49a>
 8007df8:	40020010 	.word	0x40020010
 8007dfc:	40020028 	.word	0x40020028
 8007e00:	40020040 	.word	0x40020040
 8007e04:	40020058 	.word	0x40020058
 8007e08:	40020070 	.word	0x40020070
 8007e0c:	40020088 	.word	0x40020088
 8007e10:	400200a0 	.word	0x400200a0
 8007e14:	400200b8 	.word	0x400200b8
 8007e18:	40020410 	.word	0x40020410
 8007e1c:	40020428 	.word	0x40020428
 8007e20:	40020440 	.word	0x40020440
 8007e24:	40020458 	.word	0x40020458
 8007e28:	40020470 	.word	0x40020470
 8007e2c:	40020488 	.word	0x40020488
 8007e30:	400204a0 	.word	0x400204a0
 8007e34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e42:	f003 031f 	and.w	r3, r3, #31
 8007e46:	2201      	movs	r2, #1
 8007e48:	409a      	lsls	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a4f      	ldr	r2, [pc, #316]	; (8007f90 <HAL_DMA_Abort+0x5dc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d072      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a4d      	ldr	r2, [pc, #308]	; (8007f94 <HAL_DMA_Abort+0x5e0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d06d      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a4c      	ldr	r2, [pc, #304]	; (8007f98 <HAL_DMA_Abort+0x5e4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d068      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a4a      	ldr	r2, [pc, #296]	; (8007f9c <HAL_DMA_Abort+0x5e8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d063      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a49      	ldr	r2, [pc, #292]	; (8007fa0 <HAL_DMA_Abort+0x5ec>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d05e      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a47      	ldr	r2, [pc, #284]	; (8007fa4 <HAL_DMA_Abort+0x5f0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d059      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a46      	ldr	r2, [pc, #280]	; (8007fa8 <HAL_DMA_Abort+0x5f4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d054      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a44      	ldr	r2, [pc, #272]	; (8007fac <HAL_DMA_Abort+0x5f8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d04f      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a43      	ldr	r2, [pc, #268]	; (8007fb0 <HAL_DMA_Abort+0x5fc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d04a      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a41      	ldr	r2, [pc, #260]	; (8007fb4 <HAL_DMA_Abort+0x600>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d045      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a40      	ldr	r2, [pc, #256]	; (8007fb8 <HAL_DMA_Abort+0x604>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d040      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a3e      	ldr	r2, [pc, #248]	; (8007fbc <HAL_DMA_Abort+0x608>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d03b      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a3d      	ldr	r2, [pc, #244]	; (8007fc0 <HAL_DMA_Abort+0x60c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d036      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a3b      	ldr	r2, [pc, #236]	; (8007fc4 <HAL_DMA_Abort+0x610>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d031      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a3a      	ldr	r2, [pc, #232]	; (8007fc8 <HAL_DMA_Abort+0x614>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d02c      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a38      	ldr	r2, [pc, #224]	; (8007fcc <HAL_DMA_Abort+0x618>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d027      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a37      	ldr	r2, [pc, #220]	; (8007fd0 <HAL_DMA_Abort+0x61c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d022      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a35      	ldr	r2, [pc, #212]	; (8007fd4 <HAL_DMA_Abort+0x620>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d01d      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a34      	ldr	r2, [pc, #208]	; (8007fd8 <HAL_DMA_Abort+0x624>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d018      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a32      	ldr	r2, [pc, #200]	; (8007fdc <HAL_DMA_Abort+0x628>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a31      	ldr	r2, [pc, #196]	; (8007fe0 <HAL_DMA_Abort+0x62c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a2f      	ldr	r2, [pc, #188]	; (8007fe4 <HAL_DMA_Abort+0x630>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2e      	ldr	r2, [pc, #184]	; (8007fe8 <HAL_DMA_Abort+0x634>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <HAL_DMA_Abort+0x58a>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2c      	ldr	r2, [pc, #176]	; (8007fec <HAL_DMA_Abort+0x638>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d101      	bne.n	8007f42 <HAL_DMA_Abort+0x58e>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e000      	b.n	8007f44 <HAL_DMA_Abort+0x590>
 8007f42:	2300      	movs	r3, #0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d015      	beq.n	8007f74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40020010 	.word	0x40020010
 8007f94:	40020028 	.word	0x40020028
 8007f98:	40020040 	.word	0x40020040
 8007f9c:	40020058 	.word	0x40020058
 8007fa0:	40020070 	.word	0x40020070
 8007fa4:	40020088 	.word	0x40020088
 8007fa8:	400200a0 	.word	0x400200a0
 8007fac:	400200b8 	.word	0x400200b8
 8007fb0:	40020410 	.word	0x40020410
 8007fb4:	40020428 	.word	0x40020428
 8007fb8:	40020440 	.word	0x40020440
 8007fbc:	40020458 	.word	0x40020458
 8007fc0:	40020470 	.word	0x40020470
 8007fc4:	40020488 	.word	0x40020488
 8007fc8:	400204a0 	.word	0x400204a0
 8007fcc:	400204b8 	.word	0x400204b8
 8007fd0:	58025408 	.word	0x58025408
 8007fd4:	5802541c 	.word	0x5802541c
 8007fd8:	58025430 	.word	0x58025430
 8007fdc:	58025444 	.word	0x58025444
 8007fe0:	58025458 	.word	0x58025458
 8007fe4:	5802546c 	.word	0x5802546c
 8007fe8:	58025480 	.word	0x58025480
 8007fec:	58025494 	.word	0x58025494

08007ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e237      	b.n	8008472 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d004      	beq.n	8008018 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2280      	movs	r2, #128	; 0x80
 8008012:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e22c      	b.n	8008472 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a5c      	ldr	r2, [pc, #368]	; (8008190 <HAL_DMA_Abort_IT+0x1a0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d04a      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a5b      	ldr	r2, [pc, #364]	; (8008194 <HAL_DMA_Abort_IT+0x1a4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d045      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a59      	ldr	r2, [pc, #356]	; (8008198 <HAL_DMA_Abort_IT+0x1a8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d040      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a58      	ldr	r2, [pc, #352]	; (800819c <HAL_DMA_Abort_IT+0x1ac>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d03b      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a56      	ldr	r2, [pc, #344]	; (80081a0 <HAL_DMA_Abort_IT+0x1b0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d036      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a55      	ldr	r2, [pc, #340]	; (80081a4 <HAL_DMA_Abort_IT+0x1b4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d031      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a53      	ldr	r2, [pc, #332]	; (80081a8 <HAL_DMA_Abort_IT+0x1b8>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d02c      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a52      	ldr	r2, [pc, #328]	; (80081ac <HAL_DMA_Abort_IT+0x1bc>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d027      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a50      	ldr	r2, [pc, #320]	; (80081b0 <HAL_DMA_Abort_IT+0x1c0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d022      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a4f      	ldr	r2, [pc, #316]	; (80081b4 <HAL_DMA_Abort_IT+0x1c4>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d01d      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a4d      	ldr	r2, [pc, #308]	; (80081b8 <HAL_DMA_Abort_IT+0x1c8>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d018      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a4c      	ldr	r2, [pc, #304]	; (80081bc <HAL_DMA_Abort_IT+0x1cc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d013      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a4a      	ldr	r2, [pc, #296]	; (80081c0 <HAL_DMA_Abort_IT+0x1d0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00e      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a49      	ldr	r2, [pc, #292]	; (80081c4 <HAL_DMA_Abort_IT+0x1d4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d009      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a47      	ldr	r2, [pc, #284]	; (80081c8 <HAL_DMA_Abort_IT+0x1d8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <HAL_DMA_Abort_IT+0xc8>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a46      	ldr	r2, [pc, #280]	; (80081cc <HAL_DMA_Abort_IT+0x1dc>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d101      	bne.n	80080bc <HAL_DMA_Abort_IT+0xcc>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <HAL_DMA_Abort_IT+0xce>
 80080bc:	2300      	movs	r3, #0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8086 	beq.w	80081d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2204      	movs	r2, #4
 80080c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a2f      	ldr	r2, [pc, #188]	; (8008190 <HAL_DMA_Abort_IT+0x1a0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d04a      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a2e      	ldr	r2, [pc, #184]	; (8008194 <HAL_DMA_Abort_IT+0x1a4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d045      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a2c      	ldr	r2, [pc, #176]	; (8008198 <HAL_DMA_Abort_IT+0x1a8>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d040      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a2b      	ldr	r2, [pc, #172]	; (800819c <HAL_DMA_Abort_IT+0x1ac>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d03b      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a29      	ldr	r2, [pc, #164]	; (80081a0 <HAL_DMA_Abort_IT+0x1b0>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d036      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a28      	ldr	r2, [pc, #160]	; (80081a4 <HAL_DMA_Abort_IT+0x1b4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d031      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a26      	ldr	r2, [pc, #152]	; (80081a8 <HAL_DMA_Abort_IT+0x1b8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d02c      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a25      	ldr	r2, [pc, #148]	; (80081ac <HAL_DMA_Abort_IT+0x1bc>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d027      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a23      	ldr	r2, [pc, #140]	; (80081b0 <HAL_DMA_Abort_IT+0x1c0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d022      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a22      	ldr	r2, [pc, #136]	; (80081b4 <HAL_DMA_Abort_IT+0x1c4>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d01d      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <HAL_DMA_Abort_IT+0x1c8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d018      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a1f      	ldr	r2, [pc, #124]	; (80081bc <HAL_DMA_Abort_IT+0x1cc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d013      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1d      	ldr	r2, [pc, #116]	; (80081c0 <HAL_DMA_Abort_IT+0x1d0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00e      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1c      	ldr	r2, [pc, #112]	; (80081c4 <HAL_DMA_Abort_IT+0x1d4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d009      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1a      	ldr	r2, [pc, #104]	; (80081c8 <HAL_DMA_Abort_IT+0x1d8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <HAL_DMA_Abort_IT+0x17c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a19      	ldr	r2, [pc, #100]	; (80081cc <HAL_DMA_Abort_IT+0x1dc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d108      	bne.n	800817e <HAL_DMA_Abort_IT+0x18e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	e178      	b.n	8008470 <HAL_DMA_Abort_IT+0x480>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0201 	bic.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e16f      	b.n	8008470 <HAL_DMA_Abort_IT+0x480>
 8008190:	40020010 	.word	0x40020010
 8008194:	40020028 	.word	0x40020028
 8008198:	40020040 	.word	0x40020040
 800819c:	40020058 	.word	0x40020058
 80081a0:	40020070 	.word	0x40020070
 80081a4:	40020088 	.word	0x40020088
 80081a8:	400200a0 	.word	0x400200a0
 80081ac:	400200b8 	.word	0x400200b8
 80081b0:	40020410 	.word	0x40020410
 80081b4:	40020428 	.word	0x40020428
 80081b8:	40020440 	.word	0x40020440
 80081bc:	40020458 	.word	0x40020458
 80081c0:	40020470 	.word	0x40020470
 80081c4:	40020488 	.word	0x40020488
 80081c8:	400204a0 	.word	0x400204a0
 80081cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 020e 	bic.w	r2, r2, #14
 80081de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a6c      	ldr	r2, [pc, #432]	; (8008398 <HAL_DMA_Abort_IT+0x3a8>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d04a      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a6b      	ldr	r2, [pc, #428]	; (800839c <HAL_DMA_Abort_IT+0x3ac>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d045      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a69      	ldr	r2, [pc, #420]	; (80083a0 <HAL_DMA_Abort_IT+0x3b0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d040      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a68      	ldr	r2, [pc, #416]	; (80083a4 <HAL_DMA_Abort_IT+0x3b4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d03b      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a66      	ldr	r2, [pc, #408]	; (80083a8 <HAL_DMA_Abort_IT+0x3b8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d036      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a65      	ldr	r2, [pc, #404]	; (80083ac <HAL_DMA_Abort_IT+0x3bc>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d031      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a63      	ldr	r2, [pc, #396]	; (80083b0 <HAL_DMA_Abort_IT+0x3c0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d02c      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a62      	ldr	r2, [pc, #392]	; (80083b4 <HAL_DMA_Abort_IT+0x3c4>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d027      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a60      	ldr	r2, [pc, #384]	; (80083b8 <HAL_DMA_Abort_IT+0x3c8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d022      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a5f      	ldr	r2, [pc, #380]	; (80083bc <HAL_DMA_Abort_IT+0x3cc>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d01d      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a5d      	ldr	r2, [pc, #372]	; (80083c0 <HAL_DMA_Abort_IT+0x3d0>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d018      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a5c      	ldr	r2, [pc, #368]	; (80083c4 <HAL_DMA_Abort_IT+0x3d4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d013      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a5a      	ldr	r2, [pc, #360]	; (80083c8 <HAL_DMA_Abort_IT+0x3d8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00e      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a59      	ldr	r2, [pc, #356]	; (80083cc <HAL_DMA_Abort_IT+0x3dc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d009      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a57      	ldr	r2, [pc, #348]	; (80083d0 <HAL_DMA_Abort_IT+0x3e0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d004      	beq.n	8008280 <HAL_DMA_Abort_IT+0x290>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a56      	ldr	r2, [pc, #344]	; (80083d4 <HAL_DMA_Abort_IT+0x3e4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d108      	bne.n	8008292 <HAL_DMA_Abort_IT+0x2a2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0201 	bic.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e007      	b.n	80082a2 <HAL_DMA_Abort_IT+0x2b2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a3c      	ldr	r2, [pc, #240]	; (8008398 <HAL_DMA_Abort_IT+0x3a8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d072      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a3a      	ldr	r2, [pc, #232]	; (800839c <HAL_DMA_Abort_IT+0x3ac>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d06d      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a39      	ldr	r2, [pc, #228]	; (80083a0 <HAL_DMA_Abort_IT+0x3b0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d068      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a37      	ldr	r2, [pc, #220]	; (80083a4 <HAL_DMA_Abort_IT+0x3b4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d063      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a36      	ldr	r2, [pc, #216]	; (80083a8 <HAL_DMA_Abort_IT+0x3b8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d05e      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a34      	ldr	r2, [pc, #208]	; (80083ac <HAL_DMA_Abort_IT+0x3bc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d059      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a33      	ldr	r2, [pc, #204]	; (80083b0 <HAL_DMA_Abort_IT+0x3c0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d054      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a31      	ldr	r2, [pc, #196]	; (80083b4 <HAL_DMA_Abort_IT+0x3c4>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d04f      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a30      	ldr	r2, [pc, #192]	; (80083b8 <HAL_DMA_Abort_IT+0x3c8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d04a      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a2e      	ldr	r2, [pc, #184]	; (80083bc <HAL_DMA_Abort_IT+0x3cc>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d045      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a2d      	ldr	r2, [pc, #180]	; (80083c0 <HAL_DMA_Abort_IT+0x3d0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d040      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a2b      	ldr	r2, [pc, #172]	; (80083c4 <HAL_DMA_Abort_IT+0x3d4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d03b      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a2a      	ldr	r2, [pc, #168]	; (80083c8 <HAL_DMA_Abort_IT+0x3d8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d036      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a28      	ldr	r2, [pc, #160]	; (80083cc <HAL_DMA_Abort_IT+0x3dc>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d031      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <HAL_DMA_Abort_IT+0x3e0>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d02c      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a25      	ldr	r2, [pc, #148]	; (80083d4 <HAL_DMA_Abort_IT+0x3e4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d027      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a24      	ldr	r2, [pc, #144]	; (80083d8 <HAL_DMA_Abort_IT+0x3e8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d022      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a22      	ldr	r2, [pc, #136]	; (80083dc <HAL_DMA_Abort_IT+0x3ec>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d01d      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a21      	ldr	r2, [pc, #132]	; (80083e0 <HAL_DMA_Abort_IT+0x3f0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d018      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a1f      	ldr	r2, [pc, #124]	; (80083e4 <HAL_DMA_Abort_IT+0x3f4>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d013      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a1e      	ldr	r2, [pc, #120]	; (80083e8 <HAL_DMA_Abort_IT+0x3f8>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00e      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a1c      	ldr	r2, [pc, #112]	; (80083ec <HAL_DMA_Abort_IT+0x3fc>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d009      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a1b      	ldr	r2, [pc, #108]	; (80083f0 <HAL_DMA_Abort_IT+0x400>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d004      	beq.n	8008392 <HAL_DMA_Abort_IT+0x3a2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <HAL_DMA_Abort_IT+0x404>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d132      	bne.n	80083f8 <HAL_DMA_Abort_IT+0x408>
 8008392:	2301      	movs	r3, #1
 8008394:	e031      	b.n	80083fa <HAL_DMA_Abort_IT+0x40a>
 8008396:	bf00      	nop
 8008398:	40020010 	.word	0x40020010
 800839c:	40020028 	.word	0x40020028
 80083a0:	40020040 	.word	0x40020040
 80083a4:	40020058 	.word	0x40020058
 80083a8:	40020070 	.word	0x40020070
 80083ac:	40020088 	.word	0x40020088
 80083b0:	400200a0 	.word	0x400200a0
 80083b4:	400200b8 	.word	0x400200b8
 80083b8:	40020410 	.word	0x40020410
 80083bc:	40020428 	.word	0x40020428
 80083c0:	40020440 	.word	0x40020440
 80083c4:	40020458 	.word	0x40020458
 80083c8:	40020470 	.word	0x40020470
 80083cc:	40020488 	.word	0x40020488
 80083d0:	400204a0 	.word	0x400204a0
 80083d4:	400204b8 	.word	0x400204b8
 80083d8:	58025408 	.word	0x58025408
 80083dc:	5802541c 	.word	0x5802541c
 80083e0:	58025430 	.word	0x58025430
 80083e4:	58025444 	.word	0x58025444
 80083e8:	58025458 	.word	0x58025458
 80083ec:	5802546c 	.word	0x5802546c
 80083f0:	58025480 	.word	0x58025480
 80083f4:	58025494 	.word	0x58025494
 80083f8:	2300      	movs	r3, #0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d028      	beq.n	8008450 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800840c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008418:	f003 031f 	and.w	r3, r3, #31
 800841c:	2201      	movs	r2, #1
 800841e:	409a      	lsls	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800842c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00c      	beq.n	8008450 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008444:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800844e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop

0800847c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	; 0x28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008488:	4b67      	ldr	r3, [pc, #412]	; (8008628 <HAL_DMA_IRQHandler+0x1ac>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a67      	ldr	r2, [pc, #412]	; (800862c <HAL_DMA_IRQHandler+0x1b0>)
 800848e:	fba2 2303 	umull	r2, r3, r2, r3
 8008492:	0a9b      	lsrs	r3, r3, #10
 8008494:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800849a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a5f      	ldr	r2, [pc, #380]	; (8008630 <HAL_DMA_IRQHandler+0x1b4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d04a      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a5d      	ldr	r2, [pc, #372]	; (8008634 <HAL_DMA_IRQHandler+0x1b8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d045      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a5c      	ldr	r2, [pc, #368]	; (8008638 <HAL_DMA_IRQHandler+0x1bc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d040      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a5a      	ldr	r2, [pc, #360]	; (800863c <HAL_DMA_IRQHandler+0x1c0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d03b      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a59      	ldr	r2, [pc, #356]	; (8008640 <HAL_DMA_IRQHandler+0x1c4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d036      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a57      	ldr	r2, [pc, #348]	; (8008644 <HAL_DMA_IRQHandler+0x1c8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d031      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a56      	ldr	r2, [pc, #344]	; (8008648 <HAL_DMA_IRQHandler+0x1cc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d02c      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a54      	ldr	r2, [pc, #336]	; (800864c <HAL_DMA_IRQHandler+0x1d0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d027      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a53      	ldr	r2, [pc, #332]	; (8008650 <HAL_DMA_IRQHandler+0x1d4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d022      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a51      	ldr	r2, [pc, #324]	; (8008654 <HAL_DMA_IRQHandler+0x1d8>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d01d      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a50      	ldr	r2, [pc, #320]	; (8008658 <HAL_DMA_IRQHandler+0x1dc>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d018      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a4e      	ldr	r2, [pc, #312]	; (800865c <HAL_DMA_IRQHandler+0x1e0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d013      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a4d      	ldr	r2, [pc, #308]	; (8008660 <HAL_DMA_IRQHandler+0x1e4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d00e      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a4b      	ldr	r2, [pc, #300]	; (8008664 <HAL_DMA_IRQHandler+0x1e8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d009      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a4a      	ldr	r2, [pc, #296]	; (8008668 <HAL_DMA_IRQHandler+0x1ec>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d004      	beq.n	800854e <HAL_DMA_IRQHandler+0xd2>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a48      	ldr	r2, [pc, #288]	; (800866c <HAL_DMA_IRQHandler+0x1f0>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d101      	bne.n	8008552 <HAL_DMA_IRQHandler+0xd6>
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <HAL_DMA_IRQHandler+0xd8>
 8008552:	2300      	movs	r3, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 842b 	beq.w	8008db0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	2208      	movs	r2, #8
 8008564:	409a      	lsls	r2, r3
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	4013      	ands	r3, r2
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80a2 	beq.w	80086b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a2e      	ldr	r2, [pc, #184]	; (8008630 <HAL_DMA_IRQHandler+0x1b4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d04a      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a2d      	ldr	r2, [pc, #180]	; (8008634 <HAL_DMA_IRQHandler+0x1b8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d045      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a2b      	ldr	r2, [pc, #172]	; (8008638 <HAL_DMA_IRQHandler+0x1bc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d040      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a2a      	ldr	r2, [pc, #168]	; (800863c <HAL_DMA_IRQHandler+0x1c0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d03b      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a28      	ldr	r2, [pc, #160]	; (8008640 <HAL_DMA_IRQHandler+0x1c4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d036      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a27      	ldr	r2, [pc, #156]	; (8008644 <HAL_DMA_IRQHandler+0x1c8>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d031      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a25      	ldr	r2, [pc, #148]	; (8008648 <HAL_DMA_IRQHandler+0x1cc>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d02c      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a24      	ldr	r2, [pc, #144]	; (800864c <HAL_DMA_IRQHandler+0x1d0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d027      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a22      	ldr	r2, [pc, #136]	; (8008650 <HAL_DMA_IRQHandler+0x1d4>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d022      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a21      	ldr	r2, [pc, #132]	; (8008654 <HAL_DMA_IRQHandler+0x1d8>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d01d      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1f      	ldr	r2, [pc, #124]	; (8008658 <HAL_DMA_IRQHandler+0x1dc>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d018      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1e      	ldr	r2, [pc, #120]	; (800865c <HAL_DMA_IRQHandler+0x1e0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d013      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1c      	ldr	r2, [pc, #112]	; (8008660 <HAL_DMA_IRQHandler+0x1e4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00e      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a1b      	ldr	r2, [pc, #108]	; (8008664 <HAL_DMA_IRQHandler+0x1e8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a19      	ldr	r2, [pc, #100]	; (8008668 <HAL_DMA_IRQHandler+0x1ec>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_DMA_IRQHandler+0x194>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a18      	ldr	r2, [pc, #96]	; (800866c <HAL_DMA_IRQHandler+0x1f0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d12f      	bne.n	8008670 <HAL_DMA_IRQHandler+0x1f4>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b00      	cmp	r3, #0
 800861c:	bf14      	ite	ne
 800861e:	2301      	movne	r3, #1
 8008620:	2300      	moveq	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	e02e      	b.n	8008684 <HAL_DMA_IRQHandler+0x208>
 8008626:	bf00      	nop
 8008628:	24000004 	.word	0x24000004
 800862c:	1b4e81b5 	.word	0x1b4e81b5
 8008630:	40020010 	.word	0x40020010
 8008634:	40020028 	.word	0x40020028
 8008638:	40020040 	.word	0x40020040
 800863c:	40020058 	.word	0x40020058
 8008640:	40020070 	.word	0x40020070
 8008644:	40020088 	.word	0x40020088
 8008648:	400200a0 	.word	0x400200a0
 800864c:	400200b8 	.word	0x400200b8
 8008650:	40020410 	.word	0x40020410
 8008654:	40020428 	.word	0x40020428
 8008658:	40020440 	.word	0x40020440
 800865c:	40020458 	.word	0x40020458
 8008660:	40020470 	.word	0x40020470
 8008664:	40020488 	.word	0x40020488
 8008668:	400204a0 	.word	0x400204a0
 800866c:	400204b8 	.word	0x400204b8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	bf14      	ite	ne
 800867e:	2301      	movne	r3, #1
 8008680:	2300      	moveq	r3, #0
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d015      	beq.n	80086b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0204 	bic.w	r2, r2, #4
 8008696:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	2208      	movs	r2, #8
 80086a2:	409a      	lsls	r2, r3
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ac:	f043 0201 	orr.w	r2, r3, #1
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b8:	f003 031f 	and.w	r3, r3, #31
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	fa22 f303 	lsr.w	r3, r2, r3
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d06e      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a69      	ldr	r2, [pc, #420]	; (8008874 <HAL_DMA_IRQHandler+0x3f8>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d04a      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a67      	ldr	r2, [pc, #412]	; (8008878 <HAL_DMA_IRQHandler+0x3fc>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d045      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a66      	ldr	r2, [pc, #408]	; (800887c <HAL_DMA_IRQHandler+0x400>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d040      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a64      	ldr	r2, [pc, #400]	; (8008880 <HAL_DMA_IRQHandler+0x404>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d03b      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a63      	ldr	r2, [pc, #396]	; (8008884 <HAL_DMA_IRQHandler+0x408>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d036      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a61      	ldr	r2, [pc, #388]	; (8008888 <HAL_DMA_IRQHandler+0x40c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d031      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a60      	ldr	r2, [pc, #384]	; (800888c <HAL_DMA_IRQHandler+0x410>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d02c      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a5e      	ldr	r2, [pc, #376]	; (8008890 <HAL_DMA_IRQHandler+0x414>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d027      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a5d      	ldr	r2, [pc, #372]	; (8008894 <HAL_DMA_IRQHandler+0x418>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d022      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a5b      	ldr	r2, [pc, #364]	; (8008898 <HAL_DMA_IRQHandler+0x41c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d01d      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a5a      	ldr	r2, [pc, #360]	; (800889c <HAL_DMA_IRQHandler+0x420>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d018      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a58      	ldr	r2, [pc, #352]	; (80088a0 <HAL_DMA_IRQHandler+0x424>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d013      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a57      	ldr	r2, [pc, #348]	; (80088a4 <HAL_DMA_IRQHandler+0x428>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d00e      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a55      	ldr	r2, [pc, #340]	; (80088a8 <HAL_DMA_IRQHandler+0x42c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d009      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a54      	ldr	r2, [pc, #336]	; (80088ac <HAL_DMA_IRQHandler+0x430>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d004      	beq.n	800876a <HAL_DMA_IRQHandler+0x2ee>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a52      	ldr	r2, [pc, #328]	; (80088b0 <HAL_DMA_IRQHandler+0x434>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d10a      	bne.n	8008780 <HAL_DMA_IRQHandler+0x304>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008774:	2b00      	cmp	r3, #0
 8008776:	bf14      	ite	ne
 8008778:	2301      	movne	r3, #1
 800877a:	2300      	moveq	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	e003      	b.n	8008788 <HAL_DMA_IRQHandler+0x30c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00d      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	2201      	movs	r2, #1
 8008796:	409a      	lsls	r2, r3
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a0:	f043 0202 	orr.w	r2, r3, #2
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	2204      	movs	r2, #4
 80087b2:	409a      	lsls	r2, r3
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 808f 	beq.w	80088dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a2c      	ldr	r2, [pc, #176]	; (8008874 <HAL_DMA_IRQHandler+0x3f8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d04a      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a2a      	ldr	r2, [pc, #168]	; (8008878 <HAL_DMA_IRQHandler+0x3fc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d045      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a29      	ldr	r2, [pc, #164]	; (800887c <HAL_DMA_IRQHandler+0x400>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d040      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a27      	ldr	r2, [pc, #156]	; (8008880 <HAL_DMA_IRQHandler+0x404>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d03b      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a26      	ldr	r2, [pc, #152]	; (8008884 <HAL_DMA_IRQHandler+0x408>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d036      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a24      	ldr	r2, [pc, #144]	; (8008888 <HAL_DMA_IRQHandler+0x40c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d031      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a23      	ldr	r2, [pc, #140]	; (800888c <HAL_DMA_IRQHandler+0x410>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d02c      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a21      	ldr	r2, [pc, #132]	; (8008890 <HAL_DMA_IRQHandler+0x414>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d027      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a20      	ldr	r2, [pc, #128]	; (8008894 <HAL_DMA_IRQHandler+0x418>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d022      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_DMA_IRQHandler+0x41c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d01d      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1d      	ldr	r2, [pc, #116]	; (800889c <HAL_DMA_IRQHandler+0x420>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d018      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <HAL_DMA_IRQHandler+0x424>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d013      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1a      	ldr	r2, [pc, #104]	; (80088a4 <HAL_DMA_IRQHandler+0x428>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00e      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <HAL_DMA_IRQHandler+0x42c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d009      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a17      	ldr	r2, [pc, #92]	; (80088ac <HAL_DMA_IRQHandler+0x430>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d004      	beq.n	800885e <HAL_DMA_IRQHandler+0x3e2>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <HAL_DMA_IRQHandler+0x434>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d12a      	bne.n	80088b4 <HAL_DMA_IRQHandler+0x438>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	bf14      	ite	ne
 800886c:	2301      	movne	r3, #1
 800886e:	2300      	moveq	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	e023      	b.n	80088bc <HAL_DMA_IRQHandler+0x440>
 8008874:	40020010 	.word	0x40020010
 8008878:	40020028 	.word	0x40020028
 800887c:	40020040 	.word	0x40020040
 8008880:	40020058 	.word	0x40020058
 8008884:	40020070 	.word	0x40020070
 8008888:	40020088 	.word	0x40020088
 800888c:	400200a0 	.word	0x400200a0
 8008890:	400200b8 	.word	0x400200b8
 8008894:	40020410 	.word	0x40020410
 8008898:	40020428 	.word	0x40020428
 800889c:	40020440 	.word	0x40020440
 80088a0:	40020458 	.word	0x40020458
 80088a4:	40020470 	.word	0x40020470
 80088a8:	40020488 	.word	0x40020488
 80088ac:	400204a0 	.word	0x400204a0
 80088b0:	400204b8 	.word	0x400204b8
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00d      	beq.n	80088dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c4:	f003 031f 	and.w	r3, r3, #31
 80088c8:	2204      	movs	r2, #4
 80088ca:	409a      	lsls	r2, r3
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d4:	f043 0204 	orr.w	r2, r3, #4
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088e0:	f003 031f 	and.w	r3, r3, #31
 80088e4:	2210      	movs	r2, #16
 80088e6:	409a      	lsls	r2, r3
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 80a6 	beq.w	8008a3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a85      	ldr	r2, [pc, #532]	; (8008b0c <HAL_DMA_IRQHandler+0x690>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d04a      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a83      	ldr	r2, [pc, #524]	; (8008b10 <HAL_DMA_IRQHandler+0x694>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d045      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a82      	ldr	r2, [pc, #520]	; (8008b14 <HAL_DMA_IRQHandler+0x698>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d040      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a80      	ldr	r2, [pc, #512]	; (8008b18 <HAL_DMA_IRQHandler+0x69c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d03b      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a7f      	ldr	r2, [pc, #508]	; (8008b1c <HAL_DMA_IRQHandler+0x6a0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d036      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a7d      	ldr	r2, [pc, #500]	; (8008b20 <HAL_DMA_IRQHandler+0x6a4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d031      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a7c      	ldr	r2, [pc, #496]	; (8008b24 <HAL_DMA_IRQHandler+0x6a8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d02c      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a7a      	ldr	r2, [pc, #488]	; (8008b28 <HAL_DMA_IRQHandler+0x6ac>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d027      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a79      	ldr	r2, [pc, #484]	; (8008b2c <HAL_DMA_IRQHandler+0x6b0>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d022      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a77      	ldr	r2, [pc, #476]	; (8008b30 <HAL_DMA_IRQHandler+0x6b4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d01d      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a76      	ldr	r2, [pc, #472]	; (8008b34 <HAL_DMA_IRQHandler+0x6b8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d018      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a74      	ldr	r2, [pc, #464]	; (8008b38 <HAL_DMA_IRQHandler+0x6bc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d013      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a73      	ldr	r2, [pc, #460]	; (8008b3c <HAL_DMA_IRQHandler+0x6c0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00e      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a71      	ldr	r2, [pc, #452]	; (8008b40 <HAL_DMA_IRQHandler+0x6c4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d009      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a70      	ldr	r2, [pc, #448]	; (8008b44 <HAL_DMA_IRQHandler+0x6c8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d004      	beq.n	8008992 <HAL_DMA_IRQHandler+0x516>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a6e      	ldr	r2, [pc, #440]	; (8008b48 <HAL_DMA_IRQHandler+0x6cc>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d10a      	bne.n	80089a8 <HAL_DMA_IRQHandler+0x52c>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0308 	and.w	r3, r3, #8
 800899c:	2b00      	cmp	r3, #0
 800899e:	bf14      	ite	ne
 80089a0:	2301      	movne	r3, #1
 80089a2:	2300      	moveq	r3, #0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	e009      	b.n	80089bc <HAL_DMA_IRQHandler+0x540>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	bf14      	ite	ne
 80089b6:	2301      	movne	r3, #1
 80089b8:	2300      	moveq	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d03e      	beq.n	8008a3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	2210      	movs	r2, #16
 80089ca:	409a      	lsls	r2, r3
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d018      	beq.n	8008a10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d108      	bne.n	80089fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d024      	beq.n	8008a3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
 80089fc:	e01f      	b.n	8008a3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01b      	beq.n	8008a3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	4798      	blx	r3
 8008a0e:	e016      	b.n	8008a3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d107      	bne.n	8008a2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0208 	bic.w	r2, r2, #8
 8008a2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a42:	f003 031f 	and.w	r3, r3, #31
 8008a46:	2220      	movs	r2, #32
 8008a48:	409a      	lsls	r2, r3
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 8110 	beq.w	8008c74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a2c      	ldr	r2, [pc, #176]	; (8008b0c <HAL_DMA_IRQHandler+0x690>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d04a      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a2b      	ldr	r2, [pc, #172]	; (8008b10 <HAL_DMA_IRQHandler+0x694>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d045      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a29      	ldr	r2, [pc, #164]	; (8008b14 <HAL_DMA_IRQHandler+0x698>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d040      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a28      	ldr	r2, [pc, #160]	; (8008b18 <HAL_DMA_IRQHandler+0x69c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d03b      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a26      	ldr	r2, [pc, #152]	; (8008b1c <HAL_DMA_IRQHandler+0x6a0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d036      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a25      	ldr	r2, [pc, #148]	; (8008b20 <HAL_DMA_IRQHandler+0x6a4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d031      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a23      	ldr	r2, [pc, #140]	; (8008b24 <HAL_DMA_IRQHandler+0x6a8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d02c      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a22      	ldr	r2, [pc, #136]	; (8008b28 <HAL_DMA_IRQHandler+0x6ac>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d027      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a20      	ldr	r2, [pc, #128]	; (8008b2c <HAL_DMA_IRQHandler+0x6b0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d022      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1f      	ldr	r2, [pc, #124]	; (8008b30 <HAL_DMA_IRQHandler+0x6b4>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d01d      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1d      	ldr	r2, [pc, #116]	; (8008b34 <HAL_DMA_IRQHandler+0x6b8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d018      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1c      	ldr	r2, [pc, #112]	; (8008b38 <HAL_DMA_IRQHandler+0x6bc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d013      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a1a      	ldr	r2, [pc, #104]	; (8008b3c <HAL_DMA_IRQHandler+0x6c0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00e      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <HAL_DMA_IRQHandler+0x6c4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d009      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a17      	ldr	r2, [pc, #92]	; (8008b44 <HAL_DMA_IRQHandler+0x6c8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_DMA_IRQHandler+0x678>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a16      	ldr	r2, [pc, #88]	; (8008b48 <HAL_DMA_IRQHandler+0x6cc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d12b      	bne.n	8008b4c <HAL_DMA_IRQHandler+0x6d0>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 0310 	and.w	r3, r3, #16
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bf14      	ite	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	2300      	moveq	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	e02a      	b.n	8008b60 <HAL_DMA_IRQHandler+0x6e4>
 8008b0a:	bf00      	nop
 8008b0c:	40020010 	.word	0x40020010
 8008b10:	40020028 	.word	0x40020028
 8008b14:	40020040 	.word	0x40020040
 8008b18:	40020058 	.word	0x40020058
 8008b1c:	40020070 	.word	0x40020070
 8008b20:	40020088 	.word	0x40020088
 8008b24:	400200a0 	.word	0x400200a0
 8008b28:	400200b8 	.word	0x400200b8
 8008b2c:	40020410 	.word	0x40020410
 8008b30:	40020428 	.word	0x40020428
 8008b34:	40020440 	.word	0x40020440
 8008b38:	40020458 	.word	0x40020458
 8008b3c:	40020470 	.word	0x40020470
 8008b40:	40020488 	.word	0x40020488
 8008b44:	400204a0 	.word	0x400204a0
 8008b48:	400204b8 	.word	0x400204b8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bf14      	ite	ne
 8008b5a:	2301      	movne	r3, #1
 8008b5c:	2300      	moveq	r3, #0
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 8087 	beq.w	8008c74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b6a:	f003 031f 	and.w	r3, r3, #31
 8008b6e:	2220      	movs	r2, #32
 8008b70:	409a      	lsls	r2, r3
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d139      	bne.n	8008bf6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0216 	bic.w	r2, r2, #22
 8008b90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695a      	ldr	r2, [r3, #20]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <HAL_DMA_IRQHandler+0x736>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0208 	bic.w	r2, r2, #8
 8008bc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	223f      	movs	r2, #63	; 0x3f
 8008bcc:	409a      	lsls	r2, r3
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 834a 	beq.w	8009280 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
          }
          return;
 8008bf4:	e344      	b.n	8009280 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d018      	beq.n	8008c36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d108      	bne.n	8008c24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d02c      	beq.n	8008c74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	4798      	blx	r3
 8008c22:	e027      	b.n	8008c74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d023      	beq.n	8008c74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	4798      	blx	r3
 8008c34:	e01e      	b.n	8008c74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10f      	bne.n	8008c64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0210 	bic.w	r2, r2, #16
 8008c52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8306 	beq.w	800928a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f000 8088 	beq.w	8008d9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a7a      	ldr	r2, [pc, #488]	; (8008e84 <HAL_DMA_IRQHandler+0xa08>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d04a      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a79      	ldr	r2, [pc, #484]	; (8008e88 <HAL_DMA_IRQHandler+0xa0c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d045      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a77      	ldr	r2, [pc, #476]	; (8008e8c <HAL_DMA_IRQHandler+0xa10>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d040      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a76      	ldr	r2, [pc, #472]	; (8008e90 <HAL_DMA_IRQHandler+0xa14>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d03b      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a74      	ldr	r2, [pc, #464]	; (8008e94 <HAL_DMA_IRQHandler+0xa18>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d036      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a73      	ldr	r2, [pc, #460]	; (8008e98 <HAL_DMA_IRQHandler+0xa1c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d031      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a71      	ldr	r2, [pc, #452]	; (8008e9c <HAL_DMA_IRQHandler+0xa20>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d02c      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a70      	ldr	r2, [pc, #448]	; (8008ea0 <HAL_DMA_IRQHandler+0xa24>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d027      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a6e      	ldr	r2, [pc, #440]	; (8008ea4 <HAL_DMA_IRQHandler+0xa28>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d022      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a6d      	ldr	r2, [pc, #436]	; (8008ea8 <HAL_DMA_IRQHandler+0xa2c>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d01d      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a6b      	ldr	r2, [pc, #428]	; (8008eac <HAL_DMA_IRQHandler+0xa30>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d018      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a6a      	ldr	r2, [pc, #424]	; (8008eb0 <HAL_DMA_IRQHandler+0xa34>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d013      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a68      	ldr	r2, [pc, #416]	; (8008eb4 <HAL_DMA_IRQHandler+0xa38>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00e      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a67      	ldr	r2, [pc, #412]	; (8008eb8 <HAL_DMA_IRQHandler+0xa3c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d009      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a65      	ldr	r2, [pc, #404]	; (8008ebc <HAL_DMA_IRQHandler+0xa40>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d004      	beq.n	8008d34 <HAL_DMA_IRQHandler+0x8b8>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a64      	ldr	r2, [pc, #400]	; (8008ec0 <HAL_DMA_IRQHandler+0xa44>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d108      	bne.n	8008d46 <HAL_DMA_IRQHandler+0x8ca>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f022 0201 	bic.w	r2, r2, #1
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e007      	b.n	8008d56 <HAL_DMA_IRQHandler+0x8da>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0201 	bic.w	r2, r2, #1
 8008d54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d307      	bcc.n	8008d72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1f2      	bne.n	8008d56 <HAL_DMA_IRQHandler+0x8da>
 8008d70:	e000      	b.n	8008d74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008d72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d004      	beq.n	8008d8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2203      	movs	r2, #3
 8008d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008d8a:	e003      	b.n	8008d94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8272 	beq.w	800928a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
 8008dae:	e26c      	b.n	800928a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a43      	ldr	r2, [pc, #268]	; (8008ec4 <HAL_DMA_IRQHandler+0xa48>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d022      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x984>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a42      	ldr	r2, [pc, #264]	; (8008ec8 <HAL_DMA_IRQHandler+0xa4c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d01d      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x984>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a40      	ldr	r2, [pc, #256]	; (8008ecc <HAL_DMA_IRQHandler+0xa50>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d018      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x984>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a3f      	ldr	r2, [pc, #252]	; (8008ed0 <HAL_DMA_IRQHandler+0xa54>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d013      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x984>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a3d      	ldr	r2, [pc, #244]	; (8008ed4 <HAL_DMA_IRQHandler+0xa58>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00e      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x984>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a3c      	ldr	r2, [pc, #240]	; (8008ed8 <HAL_DMA_IRQHandler+0xa5c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d009      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x984>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a3a      	ldr	r2, [pc, #232]	; (8008edc <HAL_DMA_IRQHandler+0xa60>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d004      	beq.n	8008e00 <HAL_DMA_IRQHandler+0x984>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a39      	ldr	r2, [pc, #228]	; (8008ee0 <HAL_DMA_IRQHandler+0xa64>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d101      	bne.n	8008e04 <HAL_DMA_IRQHandler+0x988>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <HAL_DMA_IRQHandler+0x98a>
 8008e04:	2300      	movs	r3, #0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 823f 	beq.w	800928a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e18:	f003 031f 	and.w	r3, r3, #31
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	409a      	lsls	r2, r3
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	4013      	ands	r3, r2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 80cd 	beq.w	8008fc4 <HAL_DMA_IRQHandler+0xb48>
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80c7 	beq.w	8008fc4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3a:	f003 031f 	and.w	r3, r3, #31
 8008e3e:	2204      	movs	r2, #4
 8008e40:	409a      	lsls	r2, r3
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d049      	beq.n	8008ee4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 8210 	beq.w	8009284 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e6c:	e20a      	b.n	8009284 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 8206 	beq.w	8009284 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e80:	e200      	b.n	8009284 <HAL_DMA_IRQHandler+0xe08>
 8008e82:	bf00      	nop
 8008e84:	40020010 	.word	0x40020010
 8008e88:	40020028 	.word	0x40020028
 8008e8c:	40020040 	.word	0x40020040
 8008e90:	40020058 	.word	0x40020058
 8008e94:	40020070 	.word	0x40020070
 8008e98:	40020088 	.word	0x40020088
 8008e9c:	400200a0 	.word	0x400200a0
 8008ea0:	400200b8 	.word	0x400200b8
 8008ea4:	40020410 	.word	0x40020410
 8008ea8:	40020428 	.word	0x40020428
 8008eac:	40020440 	.word	0x40020440
 8008eb0:	40020458 	.word	0x40020458
 8008eb4:	40020470 	.word	0x40020470
 8008eb8:	40020488 	.word	0x40020488
 8008ebc:	400204a0 	.word	0x400204a0
 8008ec0:	400204b8 	.word	0x400204b8
 8008ec4:	58025408 	.word	0x58025408
 8008ec8:	5802541c 	.word	0x5802541c
 8008ecc:	58025430 	.word	0x58025430
 8008ed0:	58025444 	.word	0x58025444
 8008ed4:	58025458 	.word	0x58025458
 8008ed8:	5802546c 	.word	0x5802546c
 8008edc:	58025480 	.word	0x58025480
 8008ee0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d160      	bne.n	8008fb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a7f      	ldr	r2, [pc, #508]	; (80090f0 <HAL_DMA_IRQHandler+0xc74>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d04a      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a7d      	ldr	r2, [pc, #500]	; (80090f4 <HAL_DMA_IRQHandler+0xc78>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d045      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a7c      	ldr	r2, [pc, #496]	; (80090f8 <HAL_DMA_IRQHandler+0xc7c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d040      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a7a      	ldr	r2, [pc, #488]	; (80090fc <HAL_DMA_IRQHandler+0xc80>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d03b      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a79      	ldr	r2, [pc, #484]	; (8009100 <HAL_DMA_IRQHandler+0xc84>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d036      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a77      	ldr	r2, [pc, #476]	; (8009104 <HAL_DMA_IRQHandler+0xc88>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d031      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a76      	ldr	r2, [pc, #472]	; (8009108 <HAL_DMA_IRQHandler+0xc8c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d02c      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a74      	ldr	r2, [pc, #464]	; (800910c <HAL_DMA_IRQHandler+0xc90>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d027      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a73      	ldr	r2, [pc, #460]	; (8009110 <HAL_DMA_IRQHandler+0xc94>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d022      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a71      	ldr	r2, [pc, #452]	; (8009114 <HAL_DMA_IRQHandler+0xc98>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d01d      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a70      	ldr	r2, [pc, #448]	; (8009118 <HAL_DMA_IRQHandler+0xc9c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d018      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a6e      	ldr	r2, [pc, #440]	; (800911c <HAL_DMA_IRQHandler+0xca0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d013      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a6d      	ldr	r2, [pc, #436]	; (8009120 <HAL_DMA_IRQHandler+0xca4>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d00e      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a6b      	ldr	r2, [pc, #428]	; (8009124 <HAL_DMA_IRQHandler+0xca8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d009      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a6a      	ldr	r2, [pc, #424]	; (8009128 <HAL_DMA_IRQHandler+0xcac>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d004      	beq.n	8008f8e <HAL_DMA_IRQHandler+0xb12>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a68      	ldr	r2, [pc, #416]	; (800912c <HAL_DMA_IRQHandler+0xcb0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d108      	bne.n	8008fa0 <HAL_DMA_IRQHandler+0xb24>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0208 	bic.w	r2, r2, #8
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	e007      	b.n	8008fb0 <HAL_DMA_IRQHandler+0xb34>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0204 	bic.w	r2, r2, #4
 8008fae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8165 	beq.w	8009284 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fc2:	e15f      	b.n	8009284 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	2202      	movs	r2, #2
 8008fce:	409a      	lsls	r2, r3
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 80c5 	beq.w	8009164 <HAL_DMA_IRQHandler+0xce8>
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 80bf 	beq.w	8009164 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	f003 031f 	and.w	r3, r3, #31
 8008fee:	2202      	movs	r2, #2
 8008ff0:	409a      	lsls	r2, r3
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d018      	beq.n	8009032 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 813a 	beq.w	8009288 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800901c:	e134      	b.n	8009288 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8130 	beq.w	8009288 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009030:	e12a      	b.n	8009288 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	f040 8089 	bne.w	8009150 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a2b      	ldr	r2, [pc, #172]	; (80090f0 <HAL_DMA_IRQHandler+0xc74>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d04a      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a29      	ldr	r2, [pc, #164]	; (80090f4 <HAL_DMA_IRQHandler+0xc78>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d045      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a28      	ldr	r2, [pc, #160]	; (80090f8 <HAL_DMA_IRQHandler+0xc7c>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d040      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a26      	ldr	r2, [pc, #152]	; (80090fc <HAL_DMA_IRQHandler+0xc80>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d03b      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a25      	ldr	r2, [pc, #148]	; (8009100 <HAL_DMA_IRQHandler+0xc84>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d036      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a23      	ldr	r2, [pc, #140]	; (8009104 <HAL_DMA_IRQHandler+0xc88>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d031      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a22      	ldr	r2, [pc, #136]	; (8009108 <HAL_DMA_IRQHandler+0xc8c>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d02c      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a20      	ldr	r2, [pc, #128]	; (800910c <HAL_DMA_IRQHandler+0xc90>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d027      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <HAL_DMA_IRQHandler+0xc94>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d022      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <HAL_DMA_IRQHandler+0xc98>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d01d      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a1c      	ldr	r2, [pc, #112]	; (8009118 <HAL_DMA_IRQHandler+0xc9c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d018      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a1a      	ldr	r2, [pc, #104]	; (800911c <HAL_DMA_IRQHandler+0xca0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d013      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a19      	ldr	r2, [pc, #100]	; (8009120 <HAL_DMA_IRQHandler+0xca4>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d00e      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a17      	ldr	r2, [pc, #92]	; (8009124 <HAL_DMA_IRQHandler+0xca8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d009      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a16      	ldr	r2, [pc, #88]	; (8009128 <HAL_DMA_IRQHandler+0xcac>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d004      	beq.n	80090de <HAL_DMA_IRQHandler+0xc62>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a14      	ldr	r2, [pc, #80]	; (800912c <HAL_DMA_IRQHandler+0xcb0>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d128      	bne.n	8009130 <HAL_DMA_IRQHandler+0xcb4>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0214 	bic.w	r2, r2, #20
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	e027      	b.n	8009140 <HAL_DMA_IRQHandler+0xcc4>
 80090f0:	40020010 	.word	0x40020010
 80090f4:	40020028 	.word	0x40020028
 80090f8:	40020040 	.word	0x40020040
 80090fc:	40020058 	.word	0x40020058
 8009100:	40020070 	.word	0x40020070
 8009104:	40020088 	.word	0x40020088
 8009108:	400200a0 	.word	0x400200a0
 800910c:	400200b8 	.word	0x400200b8
 8009110:	40020410 	.word	0x40020410
 8009114:	40020428 	.word	0x40020428
 8009118:	40020440 	.word	0x40020440
 800911c:	40020458 	.word	0x40020458
 8009120:	40020470 	.word	0x40020470
 8009124:	40020488 	.word	0x40020488
 8009128:	400204a0 	.word	0x400204a0
 800912c:	400204b8 	.word	0x400204b8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 020a 	bic.w	r2, r2, #10
 800913e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 8097 	beq.w	8009288 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009162:	e091      	b.n	8009288 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009168:	f003 031f 	and.w	r3, r3, #31
 800916c:	2208      	movs	r2, #8
 800916e:	409a      	lsls	r2, r3
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	4013      	ands	r3, r2
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8088 	beq.w	800928a <HAL_DMA_IRQHandler+0xe0e>
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f003 0308 	and.w	r3, r3, #8
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 8082 	beq.w	800928a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a41      	ldr	r2, [pc, #260]	; (8009290 <HAL_DMA_IRQHandler+0xe14>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d04a      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a3f      	ldr	r2, [pc, #252]	; (8009294 <HAL_DMA_IRQHandler+0xe18>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d045      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a3e      	ldr	r2, [pc, #248]	; (8009298 <HAL_DMA_IRQHandler+0xe1c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d040      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a3c      	ldr	r2, [pc, #240]	; (800929c <HAL_DMA_IRQHandler+0xe20>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d03b      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a3b      	ldr	r2, [pc, #236]	; (80092a0 <HAL_DMA_IRQHandler+0xe24>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d036      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a39      	ldr	r2, [pc, #228]	; (80092a4 <HAL_DMA_IRQHandler+0xe28>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d031      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a38      	ldr	r2, [pc, #224]	; (80092a8 <HAL_DMA_IRQHandler+0xe2c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d02c      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a36      	ldr	r2, [pc, #216]	; (80092ac <HAL_DMA_IRQHandler+0xe30>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d027      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a35      	ldr	r2, [pc, #212]	; (80092b0 <HAL_DMA_IRQHandler+0xe34>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d022      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a33      	ldr	r2, [pc, #204]	; (80092b4 <HAL_DMA_IRQHandler+0xe38>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d01d      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a32      	ldr	r2, [pc, #200]	; (80092b8 <HAL_DMA_IRQHandler+0xe3c>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d018      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a30      	ldr	r2, [pc, #192]	; (80092bc <HAL_DMA_IRQHandler+0xe40>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d013      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a2f      	ldr	r2, [pc, #188]	; (80092c0 <HAL_DMA_IRQHandler+0xe44>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00e      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a2d      	ldr	r2, [pc, #180]	; (80092c4 <HAL_DMA_IRQHandler+0xe48>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d009      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a2c      	ldr	r2, [pc, #176]	; (80092c8 <HAL_DMA_IRQHandler+0xe4c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d004      	beq.n	8009226 <HAL_DMA_IRQHandler+0xdaa>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a2a      	ldr	r2, [pc, #168]	; (80092cc <HAL_DMA_IRQHandler+0xe50>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d108      	bne.n	8009238 <HAL_DMA_IRQHandler+0xdbc>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 021c 	bic.w	r2, r2, #28
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	e007      	b.n	8009248 <HAL_DMA_IRQHandler+0xdcc>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 020e 	bic.w	r2, r2, #14
 8009246:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	2201      	movs	r2, #1
 8009252:	409a      	lsls	r2, r3
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	4798      	blx	r3
 800927e:	e004      	b.n	800928a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009280:	bf00      	nop
 8009282:	e002      	b.n	800928a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009288:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800928a:	3728      	adds	r7, #40	; 0x28
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	40020010 	.word	0x40020010
 8009294:	40020028 	.word	0x40020028
 8009298:	40020040 	.word	0x40020040
 800929c:	40020058 	.word	0x40020058
 80092a0:	40020070 	.word	0x40020070
 80092a4:	40020088 	.word	0x40020088
 80092a8:	400200a0 	.word	0x400200a0
 80092ac:	400200b8 	.word	0x400200b8
 80092b0:	40020410 	.word	0x40020410
 80092b4:	40020428 	.word	0x40020428
 80092b8:	40020440 	.word	0x40020440
 80092bc:	40020458 	.word	0x40020458
 80092c0:	40020470 	.word	0x40020470
 80092c4:	40020488 	.word	0x40020488
 80092c8:	400204a0 	.word	0x400204a0
 80092cc:	400204b8 	.word	0x400204b8

080092d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a7f      	ldr	r2, [pc, #508]	; (80094ec <DMA_SetConfig+0x21c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d072      	beq.n	80093da <DMA_SetConfig+0x10a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a7d      	ldr	r2, [pc, #500]	; (80094f0 <DMA_SetConfig+0x220>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d06d      	beq.n	80093da <DMA_SetConfig+0x10a>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a7c      	ldr	r2, [pc, #496]	; (80094f4 <DMA_SetConfig+0x224>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d068      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a7a      	ldr	r2, [pc, #488]	; (80094f8 <DMA_SetConfig+0x228>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d063      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a79      	ldr	r2, [pc, #484]	; (80094fc <DMA_SetConfig+0x22c>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d05e      	beq.n	80093da <DMA_SetConfig+0x10a>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a77      	ldr	r2, [pc, #476]	; (8009500 <DMA_SetConfig+0x230>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d059      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a76      	ldr	r2, [pc, #472]	; (8009504 <DMA_SetConfig+0x234>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d054      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a74      	ldr	r2, [pc, #464]	; (8009508 <DMA_SetConfig+0x238>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d04f      	beq.n	80093da <DMA_SetConfig+0x10a>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a73      	ldr	r2, [pc, #460]	; (800950c <DMA_SetConfig+0x23c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d04a      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a71      	ldr	r2, [pc, #452]	; (8009510 <DMA_SetConfig+0x240>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d045      	beq.n	80093da <DMA_SetConfig+0x10a>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a70      	ldr	r2, [pc, #448]	; (8009514 <DMA_SetConfig+0x244>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d040      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a6e      	ldr	r2, [pc, #440]	; (8009518 <DMA_SetConfig+0x248>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d03b      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a6d      	ldr	r2, [pc, #436]	; (800951c <DMA_SetConfig+0x24c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d036      	beq.n	80093da <DMA_SetConfig+0x10a>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a6b      	ldr	r2, [pc, #428]	; (8009520 <DMA_SetConfig+0x250>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d031      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a6a      	ldr	r2, [pc, #424]	; (8009524 <DMA_SetConfig+0x254>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d02c      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a68      	ldr	r2, [pc, #416]	; (8009528 <DMA_SetConfig+0x258>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d027      	beq.n	80093da <DMA_SetConfig+0x10a>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a67      	ldr	r2, [pc, #412]	; (800952c <DMA_SetConfig+0x25c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d022      	beq.n	80093da <DMA_SetConfig+0x10a>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a65      	ldr	r2, [pc, #404]	; (8009530 <DMA_SetConfig+0x260>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d01d      	beq.n	80093da <DMA_SetConfig+0x10a>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a64      	ldr	r2, [pc, #400]	; (8009534 <DMA_SetConfig+0x264>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d018      	beq.n	80093da <DMA_SetConfig+0x10a>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a62      	ldr	r2, [pc, #392]	; (8009538 <DMA_SetConfig+0x268>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d013      	beq.n	80093da <DMA_SetConfig+0x10a>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a61      	ldr	r2, [pc, #388]	; (800953c <DMA_SetConfig+0x26c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d00e      	beq.n	80093da <DMA_SetConfig+0x10a>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a5f      	ldr	r2, [pc, #380]	; (8009540 <DMA_SetConfig+0x270>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d009      	beq.n	80093da <DMA_SetConfig+0x10a>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a5e      	ldr	r2, [pc, #376]	; (8009544 <DMA_SetConfig+0x274>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d004      	beq.n	80093da <DMA_SetConfig+0x10a>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a5c      	ldr	r2, [pc, #368]	; (8009548 <DMA_SetConfig+0x278>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d101      	bne.n	80093de <DMA_SetConfig+0x10e>
 80093da:	2301      	movs	r3, #1
 80093dc:	e000      	b.n	80093e0 <DMA_SetConfig+0x110>
 80093de:	2300      	movs	r3, #0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00d      	beq.n	8009400 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80093ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d004      	beq.n	8009400 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80093fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a39      	ldr	r2, [pc, #228]	; (80094ec <DMA_SetConfig+0x21c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d04a      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a38      	ldr	r2, [pc, #224]	; (80094f0 <DMA_SetConfig+0x220>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d045      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a36      	ldr	r2, [pc, #216]	; (80094f4 <DMA_SetConfig+0x224>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d040      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a35      	ldr	r2, [pc, #212]	; (80094f8 <DMA_SetConfig+0x228>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d03b      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a33      	ldr	r2, [pc, #204]	; (80094fc <DMA_SetConfig+0x22c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d036      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a32      	ldr	r2, [pc, #200]	; (8009500 <DMA_SetConfig+0x230>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d031      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a30      	ldr	r2, [pc, #192]	; (8009504 <DMA_SetConfig+0x234>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d02c      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a2f      	ldr	r2, [pc, #188]	; (8009508 <DMA_SetConfig+0x238>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d027      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a2d      	ldr	r2, [pc, #180]	; (800950c <DMA_SetConfig+0x23c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d022      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a2c      	ldr	r2, [pc, #176]	; (8009510 <DMA_SetConfig+0x240>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d01d      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a2a      	ldr	r2, [pc, #168]	; (8009514 <DMA_SetConfig+0x244>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d018      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a29      	ldr	r2, [pc, #164]	; (8009518 <DMA_SetConfig+0x248>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d013      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a27      	ldr	r2, [pc, #156]	; (800951c <DMA_SetConfig+0x24c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00e      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a26      	ldr	r2, [pc, #152]	; (8009520 <DMA_SetConfig+0x250>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a24      	ldr	r2, [pc, #144]	; (8009524 <DMA_SetConfig+0x254>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <DMA_SetConfig+0x1d0>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a23      	ldr	r2, [pc, #140]	; (8009528 <DMA_SetConfig+0x258>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d101      	bne.n	80094a4 <DMA_SetConfig+0x1d4>
 80094a0:	2301      	movs	r3, #1
 80094a2:	e000      	b.n	80094a6 <DMA_SetConfig+0x1d6>
 80094a4:	2300      	movs	r3, #0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d059      	beq.n	800955e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ae:	f003 031f 	and.w	r3, r3, #31
 80094b2:	223f      	movs	r2, #63	; 0x3f
 80094b4:	409a      	lsls	r2, r3
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	2b40      	cmp	r3, #64	; 0x40
 80094d8:	d138      	bne.n	800954c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80094ea:	e086      	b.n	80095fa <DMA_SetConfig+0x32a>
 80094ec:	40020010 	.word	0x40020010
 80094f0:	40020028 	.word	0x40020028
 80094f4:	40020040 	.word	0x40020040
 80094f8:	40020058 	.word	0x40020058
 80094fc:	40020070 	.word	0x40020070
 8009500:	40020088 	.word	0x40020088
 8009504:	400200a0 	.word	0x400200a0
 8009508:	400200b8 	.word	0x400200b8
 800950c:	40020410 	.word	0x40020410
 8009510:	40020428 	.word	0x40020428
 8009514:	40020440 	.word	0x40020440
 8009518:	40020458 	.word	0x40020458
 800951c:	40020470 	.word	0x40020470
 8009520:	40020488 	.word	0x40020488
 8009524:	400204a0 	.word	0x400204a0
 8009528:	400204b8 	.word	0x400204b8
 800952c:	58025408 	.word	0x58025408
 8009530:	5802541c 	.word	0x5802541c
 8009534:	58025430 	.word	0x58025430
 8009538:	58025444 	.word	0x58025444
 800953c:	58025458 	.word	0x58025458
 8009540:	5802546c 	.word	0x5802546c
 8009544:	58025480 	.word	0x58025480
 8009548:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	60da      	str	r2, [r3, #12]
}
 800955c:	e04d      	b.n	80095fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a29      	ldr	r2, [pc, #164]	; (8009608 <DMA_SetConfig+0x338>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d022      	beq.n	80095ae <DMA_SetConfig+0x2de>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a27      	ldr	r2, [pc, #156]	; (800960c <DMA_SetConfig+0x33c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d01d      	beq.n	80095ae <DMA_SetConfig+0x2de>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a26      	ldr	r2, [pc, #152]	; (8009610 <DMA_SetConfig+0x340>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d018      	beq.n	80095ae <DMA_SetConfig+0x2de>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a24      	ldr	r2, [pc, #144]	; (8009614 <DMA_SetConfig+0x344>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d013      	beq.n	80095ae <DMA_SetConfig+0x2de>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a23      	ldr	r2, [pc, #140]	; (8009618 <DMA_SetConfig+0x348>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00e      	beq.n	80095ae <DMA_SetConfig+0x2de>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a21      	ldr	r2, [pc, #132]	; (800961c <DMA_SetConfig+0x34c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d009      	beq.n	80095ae <DMA_SetConfig+0x2de>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a20      	ldr	r2, [pc, #128]	; (8009620 <DMA_SetConfig+0x350>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d004      	beq.n	80095ae <DMA_SetConfig+0x2de>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a1e      	ldr	r2, [pc, #120]	; (8009624 <DMA_SetConfig+0x354>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d101      	bne.n	80095b2 <DMA_SetConfig+0x2e2>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e000      	b.n	80095b4 <DMA_SetConfig+0x2e4>
 80095b2:	2300      	movs	r3, #0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d020      	beq.n	80095fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	2201      	movs	r2, #1
 80095c2:	409a      	lsls	r2, r3
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	2b40      	cmp	r3, #64	; 0x40
 80095d6:	d108      	bne.n	80095ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	60da      	str	r2, [r3, #12]
}
 80095e8:	e007      	b.n	80095fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	60da      	str	r2, [r3, #12]
}
 80095fa:	bf00      	nop
 80095fc:	371c      	adds	r7, #28
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	58025408 	.word	0x58025408
 800960c:	5802541c 	.word	0x5802541c
 8009610:	58025430 	.word	0x58025430
 8009614:	58025444 	.word	0x58025444
 8009618:	58025458 	.word	0x58025458
 800961c:	5802546c 	.word	0x5802546c
 8009620:	58025480 	.word	0x58025480
 8009624:	58025494 	.word	0x58025494

08009628 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a42      	ldr	r2, [pc, #264]	; (8009740 <DMA_CalcBaseAndBitshift+0x118>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d04a      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a41      	ldr	r2, [pc, #260]	; (8009744 <DMA_CalcBaseAndBitshift+0x11c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d045      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a3f      	ldr	r2, [pc, #252]	; (8009748 <DMA_CalcBaseAndBitshift+0x120>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d040      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a3e      	ldr	r2, [pc, #248]	; (800974c <DMA_CalcBaseAndBitshift+0x124>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d03b      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a3c      	ldr	r2, [pc, #240]	; (8009750 <DMA_CalcBaseAndBitshift+0x128>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d036      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a3b      	ldr	r2, [pc, #236]	; (8009754 <DMA_CalcBaseAndBitshift+0x12c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d031      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a39      	ldr	r2, [pc, #228]	; (8009758 <DMA_CalcBaseAndBitshift+0x130>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d02c      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a38      	ldr	r2, [pc, #224]	; (800975c <DMA_CalcBaseAndBitshift+0x134>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d027      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a36      	ldr	r2, [pc, #216]	; (8009760 <DMA_CalcBaseAndBitshift+0x138>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d022      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a35      	ldr	r2, [pc, #212]	; (8009764 <DMA_CalcBaseAndBitshift+0x13c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d01d      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a33      	ldr	r2, [pc, #204]	; (8009768 <DMA_CalcBaseAndBitshift+0x140>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d018      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a32      	ldr	r2, [pc, #200]	; (800976c <DMA_CalcBaseAndBitshift+0x144>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d013      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a30      	ldr	r2, [pc, #192]	; (8009770 <DMA_CalcBaseAndBitshift+0x148>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00e      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a2f      	ldr	r2, [pc, #188]	; (8009774 <DMA_CalcBaseAndBitshift+0x14c>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d009      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a2d      	ldr	r2, [pc, #180]	; (8009778 <DMA_CalcBaseAndBitshift+0x150>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d004      	beq.n	80096d0 <DMA_CalcBaseAndBitshift+0xa8>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a2c      	ldr	r2, [pc, #176]	; (800977c <DMA_CalcBaseAndBitshift+0x154>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d101      	bne.n	80096d4 <DMA_CalcBaseAndBitshift+0xac>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e000      	b.n	80096d6 <DMA_CalcBaseAndBitshift+0xae>
 80096d4:	2300      	movs	r3, #0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d024      	beq.n	8009724 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	3b10      	subs	r3, #16
 80096e2:	4a27      	ldr	r2, [pc, #156]	; (8009780 <DMA_CalcBaseAndBitshift+0x158>)
 80096e4:	fba2 2303 	umull	r2, r3, r2, r3
 80096e8:	091b      	lsrs	r3, r3, #4
 80096ea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	4a24      	ldr	r2, [pc, #144]	; (8009784 <DMA_CalcBaseAndBitshift+0x15c>)
 80096f4:	5cd3      	ldrb	r3, [r2, r3]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d908      	bls.n	8009714 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	4b1f      	ldr	r3, [pc, #124]	; (8009788 <DMA_CalcBaseAndBitshift+0x160>)
 800970a:	4013      	ands	r3, r2
 800970c:	1d1a      	adds	r2, r3, #4
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	659a      	str	r2, [r3, #88]	; 0x58
 8009712:	e00d      	b.n	8009730 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	4b1b      	ldr	r3, [pc, #108]	; (8009788 <DMA_CalcBaseAndBitshift+0x160>)
 800971c:	4013      	ands	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	6593      	str	r3, [r2, #88]	; 0x58
 8009722:	e005      	b.n	8009730 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	40020010 	.word	0x40020010
 8009744:	40020028 	.word	0x40020028
 8009748:	40020040 	.word	0x40020040
 800974c:	40020058 	.word	0x40020058
 8009750:	40020070 	.word	0x40020070
 8009754:	40020088 	.word	0x40020088
 8009758:	400200a0 	.word	0x400200a0
 800975c:	400200b8 	.word	0x400200b8
 8009760:	40020410 	.word	0x40020410
 8009764:	40020428 	.word	0x40020428
 8009768:	40020440 	.word	0x40020440
 800976c:	40020458 	.word	0x40020458
 8009770:	40020470 	.word	0x40020470
 8009774:	40020488 	.word	0x40020488
 8009778:	400204a0 	.word	0x400204a0
 800977c:	400204b8 	.word	0x400204b8
 8009780:	aaaaaaab 	.word	0xaaaaaaab
 8009784:	080113a0 	.word	0x080113a0
 8009788:	fffffc00 	.word	0xfffffc00

0800978c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d120      	bne.n	80097e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d858      	bhi.n	800985a <DMA_CheckFifoParam+0xce>
 80097a8:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <DMA_CheckFifoParam+0x24>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	080097c1 	.word	0x080097c1
 80097b4:	080097d3 	.word	0x080097d3
 80097b8:	080097c1 	.word	0x080097c1
 80097bc:	0800985b 	.word	0x0800985b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d048      	beq.n	800985e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097d0:	e045      	b.n	800985e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097da:	d142      	bne.n	8009862 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80097e0:	e03f      	b.n	8009862 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ea:	d123      	bne.n	8009834 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d838      	bhi.n	8009866 <DMA_CheckFifoParam+0xda>
 80097f4:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <DMA_CheckFifoParam+0x70>)
 80097f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fa:	bf00      	nop
 80097fc:	0800980d 	.word	0x0800980d
 8009800:	08009813 	.word	0x08009813
 8009804:	0800980d 	.word	0x0800980d
 8009808:	08009825 	.word	0x08009825
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
        break;
 8009810:	e030      	b.n	8009874 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d025      	beq.n	800986a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009822:	e022      	b.n	800986a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800982c:	d11f      	bne.n	800986e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009832:	e01c      	b.n	800986e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009838:	2b02      	cmp	r3, #2
 800983a:	d902      	bls.n	8009842 <DMA_CheckFifoParam+0xb6>
 800983c:	2b03      	cmp	r3, #3
 800983e:	d003      	beq.n	8009848 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009840:	e018      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	73fb      	strb	r3, [r7, #15]
        break;
 8009846:	e015      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00e      	beq.n	8009872 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	73fb      	strb	r3, [r7, #15]
    break;
 8009858:	e00b      	b.n	8009872 <DMA_CheckFifoParam+0xe6>
        break;
 800985a:	bf00      	nop
 800985c:	e00a      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
        break;
 800985e:	bf00      	nop
 8009860:	e008      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
        break;
 8009862:	bf00      	nop
 8009864:	e006      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
        break;
 8009866:	bf00      	nop
 8009868:	e004      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
        break;
 800986a:	bf00      	nop
 800986c:	e002      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
        break;
 800986e:	bf00      	nop
 8009870:	e000      	b.n	8009874 <DMA_CheckFifoParam+0xe8>
    break;
 8009872:	bf00      	nop
    }
  }

  return status;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop

08009884 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a38      	ldr	r2, [pc, #224]	; (8009978 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d022      	beq.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a36      	ldr	r2, [pc, #216]	; (800997c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d01d      	beq.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a35      	ldr	r2, [pc, #212]	; (8009980 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d018      	beq.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a33      	ldr	r2, [pc, #204]	; (8009984 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d013      	beq.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a32      	ldr	r2, [pc, #200]	; (8009988 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d00e      	beq.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a30      	ldr	r2, [pc, #192]	; (800998c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d009      	beq.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a2f      	ldr	r2, [pc, #188]	; (8009990 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d004      	beq.n	80098e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a2d      	ldr	r2, [pc, #180]	; (8009994 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d101      	bne.n	80098e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e000      	b.n	80098e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80098e6:	2300      	movs	r3, #0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d01a      	beq.n	8009922 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	3b08      	subs	r3, #8
 80098f4:	4a28      	ldr	r2, [pc, #160]	; (8009998 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80098f6:	fba2 2303 	umull	r2, r3, r2, r3
 80098fa:	091b      	lsrs	r3, r3, #4
 80098fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4b26      	ldr	r3, [pc, #152]	; (800999c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	461a      	mov	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a24      	ldr	r2, [pc, #144]	; (80099a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009910:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f003 031f 	and.w	r3, r3, #31
 8009918:	2201      	movs	r2, #1
 800991a:	409a      	lsls	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009920:	e024      	b.n	800996c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	b2db      	uxtb	r3, r3
 8009928:	3b10      	subs	r3, #16
 800992a:	4a1e      	ldr	r2, [pc, #120]	; (80099a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800992c:	fba2 2303 	umull	r2, r3, r2, r3
 8009930:	091b      	lsrs	r3, r3, #4
 8009932:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4a1c      	ldr	r2, [pc, #112]	; (80099a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d806      	bhi.n	800994a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4a1b      	ldr	r2, [pc, #108]	; (80099ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d902      	bls.n	800994a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3308      	adds	r3, #8
 8009948:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	4b18      	ldr	r3, [pc, #96]	; (80099b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	461a      	mov	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a16      	ldr	r2, [pc, #88]	; (80099b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800995c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f003 031f 	and.w	r3, r3, #31
 8009964:	2201      	movs	r2, #1
 8009966:	409a      	lsls	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	58025408 	.word	0x58025408
 800997c:	5802541c 	.word	0x5802541c
 8009980:	58025430 	.word	0x58025430
 8009984:	58025444 	.word	0x58025444
 8009988:	58025458 	.word	0x58025458
 800998c:	5802546c 	.word	0x5802546c
 8009990:	58025480 	.word	0x58025480
 8009994:	58025494 	.word	0x58025494
 8009998:	cccccccd 	.word	0xcccccccd
 800999c:	16009600 	.word	0x16009600
 80099a0:	58025880 	.word	0x58025880
 80099a4:	aaaaaaab 	.word	0xaaaaaaab
 80099a8:	400204b8 	.word	0x400204b8
 80099ac:	4002040f 	.word	0x4002040f
 80099b0:	10008200 	.word	0x10008200
 80099b4:	40020880 	.word	0x40020880

080099b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d04a      	beq.n	8009a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d847      	bhi.n	8009a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a25      	ldr	r2, [pc, #148]	; (8009a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d022      	beq.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a24      	ldr	r2, [pc, #144]	; (8009a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d01d      	beq.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a22      	ldr	r2, [pc, #136]	; (8009a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d018      	beq.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a21      	ldr	r2, [pc, #132]	; (8009a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d013      	beq.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a1f      	ldr	r2, [pc, #124]	; (8009a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00e      	beq.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a1e      	ldr	r2, [pc, #120]	; (8009a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d009      	beq.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1c      	ldr	r2, [pc, #112]	; (8009a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a1b      	ldr	r2, [pc, #108]	; (8009a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d101      	bne.n	8009a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e000      	b.n	8009a2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4b17      	ldr	r3, [pc, #92]	; (8009a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a15      	ldr	r2, [pc, #84]	; (8009a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009a40:	671a      	str	r2, [r3, #112]	; 0x70
 8009a42:	e009      	b.n	8009a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a11      	ldr	r2, [pc, #68]	; (8009a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009a56:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	409a      	lsls	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	58025408 	.word	0x58025408
 8009a74:	5802541c 	.word	0x5802541c
 8009a78:	58025430 	.word	0x58025430
 8009a7c:	58025444 	.word	0x58025444
 8009a80:	58025458 	.word	0x58025458
 8009a84:	5802546c 	.word	0x5802546c
 8009a88:	58025480 	.word	0x58025480
 8009a8c:	58025494 	.word	0x58025494
 8009a90:	1600963f 	.word	0x1600963f
 8009a94:	58025940 	.word	0x58025940
 8009a98:	1000823f 	.word	0x1000823f
 8009a9c:	40020940 	.word	0x40020940

08009aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b089      	sub	sp, #36	; 0x24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009aae:	4b86      	ldr	r3, [pc, #536]	; (8009cc8 <HAL_GPIO_Init+0x228>)
 8009ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009ab2:	e18c      	b.n	8009dce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	2101      	movs	r1, #1
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 817e 	beq.w	8009dc8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f003 0303 	and.w	r3, r3, #3
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d005      	beq.n	8009ae4 <HAL_GPIO_Init+0x44>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f003 0303 	and.w	r3, r3, #3
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d130      	bne.n	8009b46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	2203      	movs	r2, #3
 8009af0:	fa02 f303 	lsl.w	r3, r2, r3
 8009af4:	43db      	mvns	r3, r3
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	4013      	ands	r3, r2
 8009afa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68da      	ldr	r2, [r3, #12]
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	fa02 f303 	lsl.w	r3, r2, r3
 8009b08:	69ba      	ldr	r2, [r7, #24]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b22:	43db      	mvns	r3, r3
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	4013      	ands	r3, r2
 8009b28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	091b      	lsrs	r3, r3, #4
 8009b30:	f003 0201 	and.w	r2, r3, #1
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	69ba      	ldr	r2, [r7, #24]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f003 0303 	and.w	r3, r3, #3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d017      	beq.n	8009b82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	2203      	movs	r2, #3
 8009b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b62:	43db      	mvns	r3, r3
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	4013      	ands	r3, r2
 8009b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d123      	bne.n	8009bd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	08da      	lsrs	r2, r3, #3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3208      	adds	r2, #8
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	220f      	movs	r2, #15
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	43db      	mvns	r3, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	691a      	ldr	r2, [r3, #16]
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	f003 0307 	and.w	r3, r3, #7
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	08da      	lsrs	r2, r3, #3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3208      	adds	r2, #8
 8009bd0:	69b9      	ldr	r1, [r7, #24]
 8009bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	2203      	movs	r2, #3
 8009be2:	fa02 f303 	lsl.w	r3, r2, r3
 8009be6:	43db      	mvns	r3, r3
 8009be8:	69ba      	ldr	r2, [r7, #24]
 8009bea:	4013      	ands	r3, r2
 8009bec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f003 0203 	and.w	r2, r3, #3
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80d8 	beq.w	8009dc8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c18:	4b2c      	ldr	r3, [pc, #176]	; (8009ccc <HAL_GPIO_Init+0x22c>)
 8009c1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c1e:	4a2b      	ldr	r2, [pc, #172]	; (8009ccc <HAL_GPIO_Init+0x22c>)
 8009c20:	f043 0302 	orr.w	r3, r3, #2
 8009c24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009c28:	4b28      	ldr	r3, [pc, #160]	; (8009ccc <HAL_GPIO_Init+0x22c>)
 8009c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c36:	4a26      	ldr	r2, [pc, #152]	; (8009cd0 <HAL_GPIO_Init+0x230>)
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	089b      	lsrs	r3, r3, #2
 8009c3c:	3302      	adds	r3, #2
 8009c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	220f      	movs	r2, #15
 8009c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c52:	43db      	mvns	r3, r3
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	4013      	ands	r3, r2
 8009c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a1d      	ldr	r2, [pc, #116]	; (8009cd4 <HAL_GPIO_Init+0x234>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d04a      	beq.n	8009cf8 <HAL_GPIO_Init+0x258>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a1c      	ldr	r2, [pc, #112]	; (8009cd8 <HAL_GPIO_Init+0x238>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d02b      	beq.n	8009cc2 <HAL_GPIO_Init+0x222>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <HAL_GPIO_Init+0x23c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d025      	beq.n	8009cbe <HAL_GPIO_Init+0x21e>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a1a      	ldr	r2, [pc, #104]	; (8009ce0 <HAL_GPIO_Init+0x240>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d01f      	beq.n	8009cba <HAL_GPIO_Init+0x21a>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a19      	ldr	r2, [pc, #100]	; (8009ce4 <HAL_GPIO_Init+0x244>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d019      	beq.n	8009cb6 <HAL_GPIO_Init+0x216>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a18      	ldr	r2, [pc, #96]	; (8009ce8 <HAL_GPIO_Init+0x248>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d013      	beq.n	8009cb2 <HAL_GPIO_Init+0x212>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a17      	ldr	r2, [pc, #92]	; (8009cec <HAL_GPIO_Init+0x24c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d00d      	beq.n	8009cae <HAL_GPIO_Init+0x20e>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a16      	ldr	r2, [pc, #88]	; (8009cf0 <HAL_GPIO_Init+0x250>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d007      	beq.n	8009caa <HAL_GPIO_Init+0x20a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a15      	ldr	r2, [pc, #84]	; (8009cf4 <HAL_GPIO_Init+0x254>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d101      	bne.n	8009ca6 <HAL_GPIO_Init+0x206>
 8009ca2:	2309      	movs	r3, #9
 8009ca4:	e029      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009ca6:	230a      	movs	r3, #10
 8009ca8:	e027      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009caa:	2307      	movs	r3, #7
 8009cac:	e025      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009cae:	2306      	movs	r3, #6
 8009cb0:	e023      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009cb2:	2305      	movs	r3, #5
 8009cb4:	e021      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009cb6:	2304      	movs	r3, #4
 8009cb8:	e01f      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e01d      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e01b      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e019      	b.n	8009cfa <HAL_GPIO_Init+0x25a>
 8009cc6:	bf00      	nop
 8009cc8:	58000080 	.word	0x58000080
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	58000400 	.word	0x58000400
 8009cd4:	58020000 	.word	0x58020000
 8009cd8:	58020400 	.word	0x58020400
 8009cdc:	58020800 	.word	0x58020800
 8009ce0:	58020c00 	.word	0x58020c00
 8009ce4:	58021000 	.word	0x58021000
 8009ce8:	58021400 	.word	0x58021400
 8009cec:	58021800 	.word	0x58021800
 8009cf0:	58021c00 	.word	0x58021c00
 8009cf4:	58022400 	.word	0x58022400
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	f002 0203 	and.w	r2, r2, #3
 8009d00:	0092      	lsls	r2, r2, #2
 8009d02:	4093      	lsls	r3, r2
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d0a:	4938      	ldr	r1, [pc, #224]	; (8009dec <HAL_GPIO_Init+0x34c>)
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	089b      	lsrs	r3, r3, #2
 8009d10:	3302      	adds	r3, #2
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	43db      	mvns	r3, r3
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	4013      	ands	r3, r2
 8009d28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009d36:	69ba      	ldr	r2, [r7, #24]
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	43db      	mvns	r3, r3
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	4013      	ands	r3, r2
 8009d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	43db      	mvns	r3, r3
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	4013      	ands	r3, r2
 8009d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009d90:	69ba      	ldr	r2, [r7, #24]
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	43db      	mvns	r3, r3
 8009da8:	69ba      	ldr	r2, [r7, #24]
 8009daa:	4013      	ands	r3, r2
 8009dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009dba:	69ba      	ldr	r2, [r7, #24]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f47f ae6b 	bne.w	8009ab4 <HAL_GPIO_Init+0x14>
  }
}
 8009dde:	bf00      	nop
 8009de0:	bf00      	nop
 8009de2:	3724      	adds	r7, #36	; 0x24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	58000400 	.word	0x58000400

08009df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691a      	ldr	r2, [r3, #16]
 8009e00:	887b      	ldrh	r3, [r7, #2]
 8009e02:	4013      	ands	r3, r2
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	73fb      	strb	r3, [r7, #15]
 8009e0c:	e001      	b.n	8009e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	807b      	strh	r3, [r7, #2]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e30:	787b      	ldrb	r3, [r7, #1]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d003      	beq.n	8009e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e36:	887a      	ldrh	r2, [r7, #2]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e3c:	e003      	b.n	8009e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	041a      	lsls	r2, r3, #16
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	619a      	str	r2, [r3, #24]
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
	...

08009e54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e5c:	4b19      	ldr	r3, [pc, #100]	; (8009ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d00a      	beq.n	8009e7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e68:	4b16      	ldr	r3, [pc, #88]	; (8009ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d001      	beq.n	8009e7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e01f      	b.n	8009eba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e01d      	b.n	8009eba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e7e:	4b11      	ldr	r3, [pc, #68]	; (8009ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f023 0207 	bic.w	r2, r3, #7
 8009e86:	490f      	ldr	r1, [pc, #60]	; (8009ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009e8e:	f7fc feb1 	bl	8006bf4 <HAL_GetTick>
 8009e92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009e94:	e009      	b.n	8009eaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009e96:	f7fc fead 	bl	8006bf4 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ea4:	d901      	bls.n	8009eaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e007      	b.n	8009eba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eb6:	d1ee      	bne.n	8009e96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	58024800 	.word	0x58024800

08009ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08c      	sub	sp, #48	; 0x30
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e39d      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 8087 	beq.w	8009ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ee8:	4b88      	ldr	r3, [pc, #544]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ef2:	4b86      	ldr	r3, [pc, #536]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	2b10      	cmp	r3, #16
 8009efc:	d007      	beq.n	8009f0e <HAL_RCC_OscConfig+0x46>
 8009efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f00:	2b18      	cmp	r3, #24
 8009f02:	d110      	bne.n	8009f26 <HAL_RCC_OscConfig+0x5e>
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	f003 0303 	and.w	r3, r3, #3
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d10b      	bne.n	8009f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f0e:	4b7f      	ldr	r3, [pc, #508]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d06c      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x12c>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d168      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e377      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f2e:	d106      	bne.n	8009f3e <HAL_RCC_OscConfig+0x76>
 8009f30:	4b76      	ldr	r3, [pc, #472]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a75      	ldr	r2, [pc, #468]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	e02e      	b.n	8009f9c <HAL_RCC_OscConfig+0xd4>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10c      	bne.n	8009f60 <HAL_RCC_OscConfig+0x98>
 8009f46:	4b71      	ldr	r3, [pc, #452]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a70      	ldr	r2, [pc, #448]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4b6e      	ldr	r3, [pc, #440]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a6d      	ldr	r2, [pc, #436]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	e01d      	b.n	8009f9c <HAL_RCC_OscConfig+0xd4>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f68:	d10c      	bne.n	8009f84 <HAL_RCC_OscConfig+0xbc>
 8009f6a:	4b68      	ldr	r3, [pc, #416]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a67      	ldr	r2, [pc, #412]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	4b65      	ldr	r3, [pc, #404]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a64      	ldr	r2, [pc, #400]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	e00b      	b.n	8009f9c <HAL_RCC_OscConfig+0xd4>
 8009f84:	4b61      	ldr	r3, [pc, #388]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a60      	ldr	r2, [pc, #384]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	4b5e      	ldr	r3, [pc, #376]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a5d      	ldr	r2, [pc, #372]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d013      	beq.n	8009fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa4:	f7fc fe26 	bl	8006bf4 <HAL_GetTick>
 8009fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009faa:	e008      	b.n	8009fbe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fac:	f7fc fe22 	bl	8006bf4 <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	2b64      	cmp	r3, #100	; 0x64
 8009fb8:	d901      	bls.n	8009fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e32b      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fbe:	4b53      	ldr	r3, [pc, #332]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0f0      	beq.n	8009fac <HAL_RCC_OscConfig+0xe4>
 8009fca:	e014      	b.n	8009ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fcc:	f7fc fe12 	bl	8006bf4 <HAL_GetTick>
 8009fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fd2:	e008      	b.n	8009fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fd4:	f7fc fe0e 	bl	8006bf4 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	2b64      	cmp	r3, #100	; 0x64
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e317      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009fe6:	4b49      	ldr	r3, [pc, #292]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1f0      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x10c>
 8009ff2:	e000      	b.n	8009ff6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0302 	and.w	r3, r3, #2
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 808c 	beq.w	800a11c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a004:	4b41      	ldr	r3, [pc, #260]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a00c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a00e:	4b3f      	ldr	r3, [pc, #252]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a012:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d007      	beq.n	800a02a <HAL_RCC_OscConfig+0x162>
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	2b18      	cmp	r3, #24
 800a01e:	d137      	bne.n	800a090 <HAL_RCC_OscConfig+0x1c8>
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f003 0303 	and.w	r3, r3, #3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d132      	bne.n	800a090 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a02a:	4b38      	ldr	r3, [pc, #224]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b00      	cmp	r3, #0
 800a034:	d005      	beq.n	800a042 <HAL_RCC_OscConfig+0x17a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68db      	ldr	r3, [r3, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e2e9      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a042:	4b32      	ldr	r3, [pc, #200]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f023 0219 	bic.w	r2, r3, #25
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	492f      	ldr	r1, [pc, #188]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a050:	4313      	orrs	r3, r2
 800a052:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a054:	f7fc fdce 	bl	8006bf4 <HAL_GetTick>
 800a058:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a05a:	e008      	b.n	800a06e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a05c:	f7fc fdca 	bl	8006bf4 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e2d3      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a06e:	4b27      	ldr	r3, [pc, #156]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0304 	and.w	r3, r3, #4
 800a076:	2b00      	cmp	r3, #0
 800a078:	d0f0      	beq.n	800a05c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a07a:	4b24      	ldr	r3, [pc, #144]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	061b      	lsls	r3, r3, #24
 800a088:	4920      	ldr	r1, [pc, #128]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a08a:	4313      	orrs	r3, r2
 800a08c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a08e:	e045      	b.n	800a11c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d026      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a098:	4b1c      	ldr	r3, [pc, #112]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f023 0219 	bic.w	r2, r3, #25
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	4919      	ldr	r1, [pc, #100]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0aa:	f7fc fda3 	bl	8006bf4 <HAL_GetTick>
 800a0ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0b0:	e008      	b.n	800a0c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0b2:	f7fc fd9f 	bl	8006bf4 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d901      	bls.n	800a0c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e2a8      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0c4:	4b11      	ldr	r3, [pc, #68]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0304 	and.w	r3, r3, #4
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0f0      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0d0:	4b0e      	ldr	r3, [pc, #56]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	061b      	lsls	r3, r3, #24
 800a0de:	490b      	ldr	r1, [pc, #44]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	604b      	str	r3, [r1, #4]
 800a0e4:	e01a      	b.n	800a11c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0e6:	4b09      	ldr	r3, [pc, #36]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a08      	ldr	r2, [pc, #32]	; (800a10c <HAL_RCC_OscConfig+0x244>)
 800a0ec:	f023 0301 	bic.w	r3, r3, #1
 800a0f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f2:	f7fc fd7f 	bl	8006bf4 <HAL_GetTick>
 800a0f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a0f8:	e00a      	b.n	800a110 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0fa:	f7fc fd7b 	bl	8006bf4 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d903      	bls.n	800a110 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e284      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
 800a10c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a110:	4b96      	ldr	r3, [pc, #600]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0304 	and.w	r3, r3, #4
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1ee      	bne.n	800a0fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b00      	cmp	r3, #0
 800a126:	d06a      	beq.n	800a1fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a128:	4b90      	ldr	r3, [pc, #576]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a130:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a132:	4b8e      	ldr	r3, [pc, #568]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	d007      	beq.n	800a14e <HAL_RCC_OscConfig+0x286>
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	2b18      	cmp	r3, #24
 800a142:	d11b      	bne.n	800a17c <HAL_RCC_OscConfig+0x2b4>
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d116      	bne.n	800a17c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a14e:	4b87      	ldr	r3, [pc, #540]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a156:	2b00      	cmp	r3, #0
 800a158:	d005      	beq.n	800a166 <HAL_RCC_OscConfig+0x29e>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	2b80      	cmp	r3, #128	; 0x80
 800a160:	d001      	beq.n	800a166 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e257      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a166:	4b81      	ldr	r3, [pc, #516]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	061b      	lsls	r3, r3, #24
 800a174:	497d      	ldr	r1, [pc, #500]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a176:	4313      	orrs	r3, r2
 800a178:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a17a:	e040      	b.n	800a1fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d023      	beq.n	800a1cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a184:	4b79      	ldr	r3, [pc, #484]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a78      	ldr	r2, [pc, #480]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a18e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a190:	f7fc fd30 	bl	8006bf4 <HAL_GetTick>
 800a194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a196:	e008      	b.n	800a1aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a198:	f7fc fd2c 	bl	8006bf4 <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d901      	bls.n	800a1aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e235      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1aa:	4b70      	ldr	r3, [pc, #448]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0f0      	beq.n	800a198 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a1b6:	4b6d      	ldr	r3, [pc, #436]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	061b      	lsls	r3, r3, #24
 800a1c4:	4969      	ldr	r1, [pc, #420]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60cb      	str	r3, [r1, #12]
 800a1ca:	e018      	b.n	800a1fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a1cc:	4b67      	ldr	r3, [pc, #412]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a66      	ldr	r2, [pc, #408]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a1d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d8:	f7fc fd0c 	bl	8006bf4 <HAL_GetTick>
 800a1dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a1e0:	f7fc fd08 	bl	8006bf4 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e211      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a1f2:	4b5e      	ldr	r3, [pc, #376]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1f0      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d036      	beq.n	800a278 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d019      	beq.n	800a246 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a212:	4b56      	ldr	r3, [pc, #344]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a216:	4a55      	ldr	r2, [pc, #340]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a218:	f043 0301 	orr.w	r3, r3, #1
 800a21c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a21e:	f7fc fce9 	bl	8006bf4 <HAL_GetTick>
 800a222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a224:	e008      	b.n	800a238 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a226:	f7fc fce5 	bl	8006bf4 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b02      	cmp	r3, #2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e1ee      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a238:	4b4c      	ldr	r3, [pc, #304]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a23a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d0f0      	beq.n	800a226 <HAL_RCC_OscConfig+0x35e>
 800a244:	e018      	b.n	800a278 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a246:	4b49      	ldr	r3, [pc, #292]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a24a:	4a48      	ldr	r2, [pc, #288]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a252:	f7fc fccf 	bl	8006bf4 <HAL_GetTick>
 800a256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a258:	e008      	b.n	800a26c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a25a:	f7fc fccb 	bl	8006bf4 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	2b02      	cmp	r3, #2
 800a266:	d901      	bls.n	800a26c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e1d4      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a26c:	4b3f      	ldr	r3, [pc, #252]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1f0      	bne.n	800a25a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0320 	and.w	r3, r3, #32
 800a280:	2b00      	cmp	r3, #0
 800a282:	d036      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d019      	beq.n	800a2c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a28c:	4b37      	ldr	r3, [pc, #220]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a36      	ldr	r2, [pc, #216]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a296:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a298:	f7fc fcac 	bl	8006bf4 <HAL_GetTick>
 800a29c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a29e:	e008      	b.n	800a2b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2a0:	f7fc fca8 	bl	8006bf4 <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d901      	bls.n	800a2b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e1b1      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2b2:	4b2e      	ldr	r3, [pc, #184]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0f0      	beq.n	800a2a0 <HAL_RCC_OscConfig+0x3d8>
 800a2be:	e018      	b.n	800a2f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2c0:	4b2a      	ldr	r3, [pc, #168]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a29      	ldr	r2, [pc, #164]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a2cc:	f7fc fc92 	bl	8006bf4 <HAL_GetTick>
 800a2d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a2d4:	f7fc fc8e 	bl	8006bf4 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e197      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a2e6:	4b21      	ldr	r3, [pc, #132]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1f0      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 0304 	and.w	r3, r3, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 8086 	beq.w	800a40c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a300:	4b1b      	ldr	r3, [pc, #108]	; (800a370 <HAL_RCC_OscConfig+0x4a8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a1a      	ldr	r2, [pc, #104]	; (800a370 <HAL_RCC_OscConfig+0x4a8>)
 800a306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a30a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a30c:	f7fc fc72 	bl	8006bf4 <HAL_GetTick>
 800a310:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a312:	e008      	b.n	800a326 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a314:	f7fc fc6e 	bl	8006bf4 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b64      	cmp	r3, #100	; 0x64
 800a320:	d901      	bls.n	800a326 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e177      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a326:	4b12      	ldr	r3, [pc, #72]	; (800a370 <HAL_RCC_OscConfig+0x4a8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0f0      	beq.n	800a314 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d106      	bne.n	800a348 <HAL_RCC_OscConfig+0x480>
 800a33a:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33e:	4a0b      	ldr	r2, [pc, #44]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a340:	f043 0301 	orr.w	r3, r3, #1
 800a344:	6713      	str	r3, [r2, #112]	; 0x70
 800a346:	e032      	b.n	800a3ae <HAL_RCC_OscConfig+0x4e6>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d111      	bne.n	800a374 <HAL_RCC_OscConfig+0x4ac>
 800a350:	4b06      	ldr	r3, [pc, #24]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a354:	4a05      	ldr	r2, [pc, #20]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a356:	f023 0301 	bic.w	r3, r3, #1
 800a35a:	6713      	str	r3, [r2, #112]	; 0x70
 800a35c:	4b03      	ldr	r3, [pc, #12]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a360:	4a02      	ldr	r2, [pc, #8]	; (800a36c <HAL_RCC_OscConfig+0x4a4>)
 800a362:	f023 0304 	bic.w	r3, r3, #4
 800a366:	6713      	str	r3, [r2, #112]	; 0x70
 800a368:	e021      	b.n	800a3ae <HAL_RCC_OscConfig+0x4e6>
 800a36a:	bf00      	nop
 800a36c:	58024400 	.word	0x58024400
 800a370:	58024800 	.word	0x58024800
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	2b05      	cmp	r3, #5
 800a37a:	d10c      	bne.n	800a396 <HAL_RCC_OscConfig+0x4ce>
 800a37c:	4b83      	ldr	r3, [pc, #524]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a37e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a380:	4a82      	ldr	r2, [pc, #520]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a382:	f043 0304 	orr.w	r3, r3, #4
 800a386:	6713      	str	r3, [r2, #112]	; 0x70
 800a388:	4b80      	ldr	r3, [pc, #512]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38c:	4a7f      	ldr	r2, [pc, #508]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	6713      	str	r3, [r2, #112]	; 0x70
 800a394:	e00b      	b.n	800a3ae <HAL_RCC_OscConfig+0x4e6>
 800a396:	4b7d      	ldr	r3, [pc, #500]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39a:	4a7c      	ldr	r2, [pc, #496]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a39c:	f023 0301 	bic.w	r3, r3, #1
 800a3a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a2:	4b7a      	ldr	r3, [pc, #488]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a6:	4a79      	ldr	r2, [pc, #484]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a3a8:	f023 0304 	bic.w	r3, r3, #4
 800a3ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d015      	beq.n	800a3e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3b6:	f7fc fc1d 	bl	8006bf4 <HAL_GetTick>
 800a3ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3bc:	e00a      	b.n	800a3d4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3be:	f7fc fc19 	bl	8006bf4 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d901      	bls.n	800a3d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e120      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3d4:	4b6d      	ldr	r3, [pc, #436]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0ee      	beq.n	800a3be <HAL_RCC_OscConfig+0x4f6>
 800a3e0:	e014      	b.n	800a40c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e2:	f7fc fc07 	bl	8006bf4 <HAL_GetTick>
 800a3e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a3e8:	e00a      	b.n	800a400 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3ea:	f7fc fc03 	bl	8006bf4 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d901      	bls.n	800a400 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e10a      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a400:	4b62      	ldr	r3, [pc, #392]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1ee      	bne.n	800a3ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80ff 	beq.w	800a614 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a416:	4b5d      	ldr	r3, [pc, #372]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a41e:	2b18      	cmp	r3, #24
 800a420:	f000 80ba 	beq.w	800a598 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a428:	2b02      	cmp	r3, #2
 800a42a:	f040 8095 	bne.w	800a558 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a42e:	4b57      	ldr	r3, [pc, #348]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a56      	ldr	r2, [pc, #344]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a43a:	f7fc fbdb 	bl	8006bf4 <HAL_GetTick>
 800a43e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a440:	e008      	b.n	800a454 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a442:	f7fc fbd7 	bl	8006bf4 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d901      	bls.n	800a454 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e0e0      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a454:	4b4d      	ldr	r3, [pc, #308]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1f0      	bne.n	800a442 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a460:	4b4a      	ldr	r3, [pc, #296]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a464:	4b4a      	ldr	r3, [pc, #296]	; (800a590 <HAL_RCC_OscConfig+0x6c8>)
 800a466:	4013      	ands	r3, r2
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a470:	0112      	lsls	r2, r2, #4
 800a472:	430a      	orrs	r2, r1
 800a474:	4945      	ldr	r1, [pc, #276]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a476:	4313      	orrs	r3, r2
 800a478:	628b      	str	r3, [r1, #40]	; 0x28
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	3b01      	subs	r3, #1
 800a480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	3b01      	subs	r3, #1
 800a48a:	025b      	lsls	r3, r3, #9
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a494:	3b01      	subs	r3, #1
 800a496:	041b      	lsls	r3, r3, #16
 800a498:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a49c:	431a      	orrs	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	061b      	lsls	r3, r3, #24
 800a4a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4aa:	4938      	ldr	r1, [pc, #224]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a4b0:	4b36      	ldr	r3, [pc, #216]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	4a35      	ldr	r2, [pc, #212]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4b6:	f023 0301 	bic.w	r3, r3, #1
 800a4ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4bc:	4b33      	ldr	r3, [pc, #204]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4c0:	4b34      	ldr	r3, [pc, #208]	; (800a594 <HAL_RCC_OscConfig+0x6cc>)
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a4c8:	00d2      	lsls	r2, r2, #3
 800a4ca:	4930      	ldr	r1, [pc, #192]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a4d0:	4b2e      	ldr	r3, [pc, #184]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	f023 020c 	bic.w	r2, r3, #12
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4dc:	492b      	ldr	r1, [pc, #172]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a4e2:	4b2a      	ldr	r3, [pc, #168]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	f023 0202 	bic.w	r2, r3, #2
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ee:	4927      	ldr	r1, [pc, #156]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a4f4:	4b25      	ldr	r3, [pc, #148]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	4a24      	ldr	r2, [pc, #144]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a4fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a500:	4b22      	ldr	r3, [pc, #136]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	4a21      	ldr	r2, [pc, #132]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a50a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a50c:	4b1f      	ldr	r3, [pc, #124]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	4a1e      	ldr	r2, [pc, #120]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a518:	4b1c      	ldr	r3, [pc, #112]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	4a1b      	ldr	r2, [pc, #108]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a51e:	f043 0301 	orr.w	r3, r3, #1
 800a522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a524:	4b19      	ldr	r3, [pc, #100]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a18      	ldr	r2, [pc, #96]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a52a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a52e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a530:	f7fc fb60 	bl	8006bf4 <HAL_GetTick>
 800a534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a536:	e008      	b.n	800a54a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a538:	f7fc fb5c 	bl	8006bf4 <HAL_GetTick>
 800a53c:	4602      	mov	r2, r0
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	2b02      	cmp	r3, #2
 800a544:	d901      	bls.n	800a54a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	e065      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a54a:	4b10      	ldr	r3, [pc, #64]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0f0      	beq.n	800a538 <HAL_RCC_OscConfig+0x670>
 800a556:	e05d      	b.n	800a614 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a0b      	ldr	r2, [pc, #44]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a55e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a564:	f7fc fb46 	bl	8006bf4 <HAL_GetTick>
 800a568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a56a:	e008      	b.n	800a57e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a56c:	f7fc fb42 	bl	8006bf4 <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	2b02      	cmp	r3, #2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e04b      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a57e:	4b03      	ldr	r3, [pc, #12]	; (800a58c <HAL_RCC_OscConfig+0x6c4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1f0      	bne.n	800a56c <HAL_RCC_OscConfig+0x6a4>
 800a58a:	e043      	b.n	800a614 <HAL_RCC_OscConfig+0x74c>
 800a58c:	58024400 	.word	0x58024400
 800a590:	fffffc0c 	.word	0xfffffc0c
 800a594:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a598:	4b21      	ldr	r3, [pc, #132]	; (800a620 <HAL_RCC_OscConfig+0x758>)
 800a59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a59e:	4b20      	ldr	r3, [pc, #128]	; (800a620 <HAL_RCC_OscConfig+0x758>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d031      	beq.n	800a610 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f003 0203 	and.w	r2, r3, #3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d12a      	bne.n	800a610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	091b      	lsrs	r3, r3, #4
 800a5be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d122      	bne.n	800a610 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d11a      	bne.n	800a610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	0a5b      	lsrs	r3, r3, #9
 800a5de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d111      	bne.n	800a610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d108      	bne.n	800a610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	0e1b      	lsrs	r3, r3, #24
 800a602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a60a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d001      	beq.n	800a614 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e000      	b.n	800a616 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3730      	adds	r7, #48	; 0x30
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	58024400 	.word	0x58024400

0800a624 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e19c      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a638:	4b8a      	ldr	r3, [pc, #552]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d910      	bls.n	800a668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a646:	4b87      	ldr	r3, [pc, #540]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f023 020f 	bic.w	r2, r3, #15
 800a64e:	4985      	ldr	r1, [pc, #532]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	4313      	orrs	r3, r2
 800a654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a656:	4b83      	ldr	r3, [pc, #524]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 030f 	and.w	r3, r3, #15
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d001      	beq.n	800a668 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e184      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d010      	beq.n	800a696 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	4b7b      	ldr	r3, [pc, #492]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a680:	429a      	cmp	r2, r3
 800a682:	d908      	bls.n	800a696 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a684:	4b78      	ldr	r3, [pc, #480]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	4975      	ldr	r1, [pc, #468]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a692:	4313      	orrs	r3, r2
 800a694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d010      	beq.n	800a6c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	695a      	ldr	r2, [r3, #20]
 800a6a6:	4b70      	ldr	r3, [pc, #448]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d908      	bls.n	800a6c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a6b2:	4b6d      	ldr	r3, [pc, #436]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	496a      	ldr	r1, [pc, #424]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d010      	beq.n	800a6f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699a      	ldr	r2, [r3, #24]
 800a6d4:	4b64      	ldr	r3, [pc, #400]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6d6:	69db      	ldr	r3, [r3, #28]
 800a6d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d908      	bls.n	800a6f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a6e0:	4b61      	ldr	r3, [pc, #388]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	495e      	ldr	r1, [pc, #376]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0320 	and.w	r3, r3, #32
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d010      	beq.n	800a720 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	69da      	ldr	r2, [r3, #28]
 800a702:	4b59      	ldr	r3, [pc, #356]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a704:	6a1b      	ldr	r3, [r3, #32]
 800a706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d908      	bls.n	800a720 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a70e:	4b56      	ldr	r3, [pc, #344]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	4953      	ldr	r1, [pc, #332]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0302 	and.w	r3, r3, #2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d010      	beq.n	800a74e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	4b4d      	ldr	r3, [pc, #308]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	f003 030f 	and.w	r3, r3, #15
 800a738:	429a      	cmp	r2, r3
 800a73a:	d908      	bls.n	800a74e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a73c:	4b4a      	ldr	r3, [pc, #296]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	f023 020f 	bic.w	r2, r3, #15
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	4947      	ldr	r1, [pc, #284]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	d055      	beq.n	800a806 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a75a:	4b43      	ldr	r3, [pc, #268]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	4940      	ldr	r1, [pc, #256]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	2b02      	cmp	r3, #2
 800a772:	d107      	bne.n	800a784 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a774:	4b3c      	ldr	r3, [pc, #240]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d121      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e0f6      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d107      	bne.n	800a79c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a78c:	4b36      	ldr	r3, [pc, #216]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d115      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e0ea      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d107      	bne.n	800a7b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a7a4:	4b30      	ldr	r3, [pc, #192]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d109      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e0de      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7b4:	4b2c      	ldr	r3, [pc, #176]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e0d6      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a7c4:	4b28      	ldr	r3, [pc, #160]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	f023 0207 	bic.w	r2, r3, #7
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	4925      	ldr	r1, [pc, #148]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d6:	f7fc fa0d 	bl	8006bf4 <HAL_GetTick>
 800a7da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7dc:	e00a      	b.n	800a7f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7de:	f7fc fa09 	bl	8006bf4 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d901      	bls.n	800a7f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e0be      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7f4:	4b1c      	ldr	r3, [pc, #112]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	429a      	cmp	r2, r3
 800a804:	d1eb      	bne.n	800a7de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d010      	beq.n	800a834 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	4b14      	ldr	r3, [pc, #80]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	f003 030f 	and.w	r3, r3, #15
 800a81e:	429a      	cmp	r2, r3
 800a820:	d208      	bcs.n	800a834 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a822:	4b11      	ldr	r3, [pc, #68]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	f023 020f 	bic.w	r2, r3, #15
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	490e      	ldr	r1, [pc, #56]	; (800a868 <HAL_RCC_ClockConfig+0x244>)
 800a830:	4313      	orrs	r3, r2
 800a832:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a834:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 030f 	and.w	r3, r3, #15
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d214      	bcs.n	800a86c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a842:	4b08      	ldr	r3, [pc, #32]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f023 020f 	bic.w	r2, r3, #15
 800a84a:	4906      	ldr	r1, [pc, #24]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	4313      	orrs	r3, r2
 800a850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a852:	4b04      	ldr	r3, [pc, #16]	; (800a864 <HAL_RCC_ClockConfig+0x240>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d005      	beq.n	800a86c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e086      	b.n	800a972 <HAL_RCC_ClockConfig+0x34e>
 800a864:	52002000 	.word	0x52002000
 800a868:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d010      	beq.n	800a89a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691a      	ldr	r2, [r3, #16]
 800a87c:	4b3f      	ldr	r3, [pc, #252]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a884:	429a      	cmp	r2, r3
 800a886:	d208      	bcs.n	800a89a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a888:	4b3c      	ldr	r3, [pc, #240]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	691b      	ldr	r3, [r3, #16]
 800a894:	4939      	ldr	r1, [pc, #228]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a896:	4313      	orrs	r3, r2
 800a898:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0308 	and.w	r3, r3, #8
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d010      	beq.n	800a8c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	695a      	ldr	r2, [r3, #20]
 800a8aa:	4b34      	ldr	r3, [pc, #208]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d208      	bcs.n	800a8c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8b6:	4b31      	ldr	r3, [pc, #196]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8b8:	69db      	ldr	r3, [r3, #28]
 800a8ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	492e      	ldr	r1, [pc, #184]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d010      	beq.n	800a8f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	699a      	ldr	r2, [r3, #24]
 800a8d8:	4b28      	ldr	r3, [pc, #160]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d208      	bcs.n	800a8f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8e4:	4b25      	ldr	r3, [pc, #148]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	4922      	ldr	r1, [pc, #136]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d010      	beq.n	800a924 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	69da      	ldr	r2, [r3, #28]
 800a906:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a90e:	429a      	cmp	r2, r3
 800a910:	d208      	bcs.n	800a924 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a912:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	4917      	ldr	r1, [pc, #92]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a920:	4313      	orrs	r3, r2
 800a922:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a924:	f000 f834 	bl	800a990 <HAL_RCC_GetSysClockFreq>
 800a928:	4602      	mov	r2, r0
 800a92a:	4b14      	ldr	r3, [pc, #80]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	0a1b      	lsrs	r3, r3, #8
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	4912      	ldr	r1, [pc, #72]	; (800a980 <HAL_RCC_ClockConfig+0x35c>)
 800a936:	5ccb      	ldrb	r3, [r1, r3]
 800a938:	f003 031f 	and.w	r3, r3, #31
 800a93c:	fa22 f303 	lsr.w	r3, r2, r3
 800a940:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a942:	4b0e      	ldr	r3, [pc, #56]	; (800a97c <HAL_RCC_ClockConfig+0x358>)
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	f003 030f 	and.w	r3, r3, #15
 800a94a:	4a0d      	ldr	r2, [pc, #52]	; (800a980 <HAL_RCC_ClockConfig+0x35c>)
 800a94c:	5cd3      	ldrb	r3, [r2, r3]
 800a94e:	f003 031f 	and.w	r3, r3, #31
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	fa22 f303 	lsr.w	r3, r2, r3
 800a958:	4a0a      	ldr	r2, [pc, #40]	; (800a984 <HAL_RCC_ClockConfig+0x360>)
 800a95a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a95c:	4a0a      	ldr	r2, [pc, #40]	; (800a988 <HAL_RCC_ClockConfig+0x364>)
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a962:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <HAL_RCC_ClockConfig+0x368>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4618      	mov	r0, r3
 800a968:	f7fc f8fa 	bl	8006b60 <HAL_InitTick>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	58024400 	.word	0x58024400
 800a980:	08011390 	.word	0x08011390
 800a984:	24000008 	.word	0x24000008
 800a988:	24000004 	.word	0x24000004
 800a98c:	2400000c 	.word	0x2400000c

0800a990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a990:	b480      	push	{r7}
 800a992:	b089      	sub	sp, #36	; 0x24
 800a994:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a996:	4bb3      	ldr	r3, [pc, #716]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a99e:	2b18      	cmp	r3, #24
 800a9a0:	f200 8155 	bhi.w	800ac4e <HAL_RCC_GetSysClockFreq+0x2be>
 800a9a4:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <HAL_RCC_GetSysClockFreq+0x1c>)
 800a9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9aa:	bf00      	nop
 800a9ac:	0800aa11 	.word	0x0800aa11
 800a9b0:	0800ac4f 	.word	0x0800ac4f
 800a9b4:	0800ac4f 	.word	0x0800ac4f
 800a9b8:	0800ac4f 	.word	0x0800ac4f
 800a9bc:	0800ac4f 	.word	0x0800ac4f
 800a9c0:	0800ac4f 	.word	0x0800ac4f
 800a9c4:	0800ac4f 	.word	0x0800ac4f
 800a9c8:	0800ac4f 	.word	0x0800ac4f
 800a9cc:	0800aa37 	.word	0x0800aa37
 800a9d0:	0800ac4f 	.word	0x0800ac4f
 800a9d4:	0800ac4f 	.word	0x0800ac4f
 800a9d8:	0800ac4f 	.word	0x0800ac4f
 800a9dc:	0800ac4f 	.word	0x0800ac4f
 800a9e0:	0800ac4f 	.word	0x0800ac4f
 800a9e4:	0800ac4f 	.word	0x0800ac4f
 800a9e8:	0800ac4f 	.word	0x0800ac4f
 800a9ec:	0800aa3d 	.word	0x0800aa3d
 800a9f0:	0800ac4f 	.word	0x0800ac4f
 800a9f4:	0800ac4f 	.word	0x0800ac4f
 800a9f8:	0800ac4f 	.word	0x0800ac4f
 800a9fc:	0800ac4f 	.word	0x0800ac4f
 800aa00:	0800ac4f 	.word	0x0800ac4f
 800aa04:	0800ac4f 	.word	0x0800ac4f
 800aa08:	0800ac4f 	.word	0x0800ac4f
 800aa0c:	0800aa43 	.word	0x0800aa43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa10:	4b94      	ldr	r3, [pc, #592]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0320 	and.w	r3, r3, #32
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d009      	beq.n	800aa30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa1c:	4b91      	ldr	r3, [pc, #580]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	08db      	lsrs	r3, r3, #3
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	4a90      	ldr	r2, [pc, #576]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa28:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aa2e:	e111      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aa30:	4b8d      	ldr	r3, [pc, #564]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa32:	61bb      	str	r3, [r7, #24]
    break;
 800aa34:	e10e      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aa36:	4b8d      	ldr	r3, [pc, #564]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa38:	61bb      	str	r3, [r7, #24]
    break;
 800aa3a:	e10b      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aa3c:	4b8c      	ldr	r3, [pc, #560]	; (800ac70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aa3e:	61bb      	str	r3, [r7, #24]
    break;
 800aa40:	e108      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa42:	4b88      	ldr	r3, [pc, #544]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800aa4c:	4b85      	ldr	r3, [pc, #532]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	091b      	lsrs	r3, r3, #4
 800aa52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800aa58:	4b82      	ldr	r3, [pc, #520]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aa62:	4b80      	ldr	r3, [pc, #512]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa66:	08db      	lsrs	r3, r3, #3
 800aa68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	fb02 f303 	mul.w	r3, r2, r3
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 80e1 	beq.w	800ac48 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	f000 8083 	beq.w	800ab94 <HAL_RCC_GetSysClockFreq+0x204>
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	f200 80a1 	bhi.w	800abd8 <HAL_RCC_GetSysClockFreq+0x248>
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x114>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d056      	beq.n	800ab50 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aaa2:	e099      	b.n	800abd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa4:	4b6f      	ldr	r3, [pc, #444]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0320 	and.w	r3, r3, #32
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d02d      	beq.n	800ab0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aab0:	4b6c      	ldr	r3, [pc, #432]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	08db      	lsrs	r3, r3, #3
 800aab6:	f003 0303 	and.w	r3, r3, #3
 800aaba:	4a6b      	ldr	r2, [pc, #428]	; (800ac68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aabc:	fa22 f303 	lsr.w	r3, r2, r3
 800aac0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	ee07 3a90 	vmov	s15, r3
 800aac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aada:	4b62      	ldr	r3, [pc, #392]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaee:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aaf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ab0a:	e087      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ac78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ab1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1e:	4b51      	ldr	r3, [pc, #324]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab32:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4e:	e065      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab62:	4b40      	ldr	r3, [pc, #256]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab72:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab92:	e043      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ac80 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba6:	4b2f      	ldr	r3, [pc, #188]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800abba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800abbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abd6:	e021      	b.n	800ac1c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ac7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800abe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abea:	4b1e      	ldr	r3, [pc, #120]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfa:	ed97 6a02 	vldr	s12, [r7, #8]
 800abfe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ac74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ac02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac1a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ac1c:	4b11      	ldr	r3, [pc, #68]	; (800ac64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac20:	0a5b      	lsrs	r3, r3, #9
 800ac22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac26:	3301      	adds	r3, #1
 800ac28:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac40:	ee17 3a90 	vmov	r3, s15
 800ac44:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ac46:	e005      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	61bb      	str	r3, [r7, #24]
    break;
 800ac4c:	e002      	b.n	800ac54 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ac4e:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac50:	61bb      	str	r3, [r7, #24]
    break;
 800ac52:	bf00      	nop
  }

  return sysclockfreq;
 800ac54:	69bb      	ldr	r3, [r7, #24]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3724      	adds	r7, #36	; 0x24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	58024400 	.word	0x58024400
 800ac68:	03d09000 	.word	0x03d09000
 800ac6c:	003d0900 	.word	0x003d0900
 800ac70:	007a1200 	.word	0x007a1200
 800ac74:	46000000 	.word	0x46000000
 800ac78:	4c742400 	.word	0x4c742400
 800ac7c:	4a742400 	.word	0x4a742400
 800ac80:	4af42400 	.word	0x4af42400

0800ac84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac8a:	f7ff fe81 	bl	800a990 <HAL_RCC_GetSysClockFreq>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b10      	ldr	r3, [pc, #64]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	0a1b      	lsrs	r3, r3, #8
 800ac96:	f003 030f 	and.w	r3, r3, #15
 800ac9a:	490f      	ldr	r1, [pc, #60]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac9c:	5ccb      	ldrb	r3, [r1, r3]
 800ac9e:	f003 031f 	and.w	r3, r3, #31
 800aca2:	fa22 f303 	lsr.w	r3, r2, r3
 800aca6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aca8:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <HAL_RCC_GetHCLKFreq+0x50>)
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	f003 030f 	and.w	r3, r3, #15
 800acb0:	4a09      	ldr	r2, [pc, #36]	; (800acd8 <HAL_RCC_GetHCLKFreq+0x54>)
 800acb2:	5cd3      	ldrb	r3, [r2, r3]
 800acb4:	f003 031f 	and.w	r3, r3, #31
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	fa22 f303 	lsr.w	r3, r2, r3
 800acbe:	4a07      	ldr	r2, [pc, #28]	; (800acdc <HAL_RCC_GetHCLKFreq+0x58>)
 800acc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800acc2:	4a07      	ldr	r2, [pc, #28]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <HAL_RCC_GetHCLKFreq+0x58>)
 800acca:	681b      	ldr	r3, [r3, #0]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	58024400 	.word	0x58024400
 800acd8:	08011390 	.word	0x08011390
 800acdc:	24000008 	.word	0x24000008
 800ace0:	24000004 	.word	0x24000004

0800ace4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ace8:	f7ff ffcc 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800acec:	4602      	mov	r2, r0
 800acee:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	091b      	lsrs	r3, r3, #4
 800acf4:	f003 0307 	and.w	r3, r3, #7
 800acf8:	4904      	ldr	r1, [pc, #16]	; (800ad0c <HAL_RCC_GetPCLK1Freq+0x28>)
 800acfa:	5ccb      	ldrb	r3, [r1, r3]
 800acfc:	f003 031f 	and.w	r3, r3, #31
 800ad00:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	58024400 	.word	0x58024400
 800ad0c:	08011390 	.word	0x08011390

0800ad10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ad14:	f7ff ffb6 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	4b06      	ldr	r3, [pc, #24]	; (800ad34 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	0a1b      	lsrs	r3, r3, #8
 800ad20:	f003 0307 	and.w	r3, r3, #7
 800ad24:	4904      	ldr	r1, [pc, #16]	; (800ad38 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad26:	5ccb      	ldrb	r3, [r1, r3]
 800ad28:	f003 031f 	and.w	r3, r3, #31
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	58024400 	.word	0x58024400
 800ad38:	08011390 	.word	0x08011390

0800ad3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad44:	2300      	movs	r3, #0
 800ad46:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad48:	2300      	movs	r3, #0
 800ad4a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d03f      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad60:	d02a      	beq.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ad62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad66:	d824      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad6c:	d018      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad72:	d81e      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ad78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad7c:	d007      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ad7e:	e018      	b.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad80:	4ba4      	ldr	r3, [pc, #656]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	4aa3      	ldr	r2, [pc, #652]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ad86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad8c:	e015      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3304      	adds	r3, #4
 800ad92:	2102      	movs	r1, #2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f001 f989 	bl	800c0ac <RCCEx_PLL2_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ad9e:	e00c      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3324      	adds	r3, #36	; 0x24
 800ada4:	2102      	movs	r1, #2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 fa32 	bl	800c210 <RCCEx_PLL3_Config>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800adb0:	e003      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	75fb      	strb	r3, [r7, #23]
      break;
 800adb6:	e000      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800adb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d109      	bne.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adc0:	4b94      	ldr	r3, [pc, #592]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800adc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adcc:	4991      	ldr	r1, [pc, #580]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800adce:	4313      	orrs	r3, r2
 800add0:	650b      	str	r3, [r1, #80]	; 0x50
 800add2:	e001      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d03d      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d826      	bhi.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800adec:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800adee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf2:	bf00      	nop
 800adf4:	0800ae09 	.word	0x0800ae09
 800adf8:	0800ae17 	.word	0x0800ae17
 800adfc:	0800ae29 	.word	0x0800ae29
 800ae00:	0800ae41 	.word	0x0800ae41
 800ae04:	0800ae41 	.word	0x0800ae41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae08:	4b82      	ldr	r3, [pc, #520]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0c:	4a81      	ldr	r2, [pc, #516]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae14:	e015      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	2100      	movs	r1, #0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f001 f945 	bl	800c0ac <RCCEx_PLL2_Config>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae26:	e00c      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3324      	adds	r3, #36	; 0x24
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 f9ee 	bl	800c210 <RCCEx_PLL3_Config>
 800ae34:	4603      	mov	r3, r0
 800ae36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae38:	e003      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae3e:	e000      	b.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ae40:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d109      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae48:	4b72      	ldr	r3, [pc, #456]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae4c:	f023 0207 	bic.w	r2, r3, #7
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae54:	496f      	ldr	r1, [pc, #444]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	650b      	str	r3, [r1, #80]	; 0x50
 800ae5a:	e001      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d051      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ae72:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae76:	d036      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ae78:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae7c:	d830      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ae7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae82:	d032      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800ae84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae88:	d82a      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ae8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae8e:	d02e      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800ae90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae94:	d824      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ae96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae9a:	d018      	beq.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ae9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aea0:	d81e      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x172>
 800aea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aeaa:	d007      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800aeac:	e018      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeae:	4b59      	ldr	r3, [pc, #356]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	4a58      	ldr	r2, [pc, #352]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aeb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aeba:	e019      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3304      	adds	r3, #4
 800aec0:	2100      	movs	r1, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 f8f2 	bl	800c0ac <RCCEx_PLL2_Config>
 800aec8:	4603      	mov	r3, r0
 800aeca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aecc:	e010      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3324      	adds	r3, #36	; 0x24
 800aed2:	2100      	movs	r1, #0
 800aed4:	4618      	mov	r0, r3
 800aed6:	f001 f99b 	bl	800c210 <RCCEx_PLL3_Config>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aede:	e007      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	75fb      	strb	r3, [r7, #23]
      break;
 800aee4:	e004      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aee6:	bf00      	nop
 800aee8:	e002      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aeea:	bf00      	nop
 800aeec:	e000      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aeee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10a      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aef6:	4b47      	ldr	r3, [pc, #284]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800aef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800af04:	4943      	ldr	r1, [pc, #268]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af06:	4313      	orrs	r3, r2
 800af08:	658b      	str	r3, [r1, #88]	; 0x58
 800af0a:	e001      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d051      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800af22:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800af26:	d036      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800af28:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800af2c:	d830      	bhi.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af32:	d032      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800af34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af38:	d82a      	bhi.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af3e:	d02e      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800af40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af44:	d824      	bhi.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4a:	d018      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800af4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af50:	d81e      	bhi.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800af52:	2b00      	cmp	r3, #0
 800af54:	d003      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800af56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af5a:	d007      	beq.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800af5c:	e018      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af5e:	4b2d      	ldr	r3, [pc, #180]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af62:	4a2c      	ldr	r2, [pc, #176]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800af64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af6a:	e019      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3304      	adds	r3, #4
 800af70:	2100      	movs	r1, #0
 800af72:	4618      	mov	r0, r3
 800af74:	f001 f89a 	bl	800c0ac <RCCEx_PLL2_Config>
 800af78:	4603      	mov	r3, r0
 800af7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af7c:	e010      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3324      	adds	r3, #36	; 0x24
 800af82:	2100      	movs	r1, #0
 800af84:	4618      	mov	r0, r3
 800af86:	f001 f943 	bl	800c210 <RCCEx_PLL3_Config>
 800af8a:	4603      	mov	r3, r0
 800af8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af8e:	e007      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	75fb      	strb	r3, [r7, #23]
      break;
 800af94:	e004      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800af96:	bf00      	nop
 800af98:	e002      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800af9a:	bf00      	nop
 800af9c:	e000      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800af9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10a      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800afa6:	4b1b      	ldr	r3, [pc, #108]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afaa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800afb4:	4917      	ldr	r1, [pc, #92]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	658b      	str	r3, [r1, #88]	; 0x58
 800afba:	e001      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d035      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afd0:	2b30      	cmp	r3, #48	; 0x30
 800afd2:	d01c      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800afd4:	2b30      	cmp	r3, #48	; 0x30
 800afd6:	d817      	bhi.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800afd8:	2b20      	cmp	r3, #32
 800afda:	d00c      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800afdc:	2b20      	cmp	r3, #32
 800afde:	d813      	bhi.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d019      	beq.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800afe4:	2b10      	cmp	r3, #16
 800afe6:	d10f      	bne.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afec:	4a09      	ldr	r2, [pc, #36]	; (800b014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800afee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aff2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800aff4:	e011      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3304      	adds	r3, #4
 800affa:	2102      	movs	r1, #2
 800affc:	4618      	mov	r0, r3
 800affe:	f001 f855 	bl	800c0ac <RCCEx_PLL2_Config>
 800b002:	4603      	mov	r3, r0
 800b004:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800b006:	e008      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	75fb      	strb	r3, [r7, #23]
      break;
 800b00c:	e005      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800b00e:	bf00      	nop
 800b010:	e003      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b012:	bf00      	nop
 800b014:	58024400 	.word	0x58024400
      break;
 800b018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d109      	bne.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b020:	4ba3      	ldr	r3, [pc, #652]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b024:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b02c:	49a0      	ldr	r1, [pc, #640]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b032:	e001      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d047      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b04c:	d030      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800b04e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b052:	d82a      	bhi.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b058:	d02c      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800b05a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b05e:	d824      	bhi.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b064:	d018      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b06a:	d81e      	bhi.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b074:	d007      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b076:	e018      	b.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b078:	4b8d      	ldr	r3, [pc, #564]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07c:	4a8c      	ldr	r2, [pc, #560]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b07e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b084:	e017      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3304      	adds	r3, #4
 800b08a:	2100      	movs	r1, #0
 800b08c:	4618      	mov	r0, r3
 800b08e:	f001 f80d 	bl	800c0ac <RCCEx_PLL2_Config>
 800b092:	4603      	mov	r3, r0
 800b094:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b096:	e00e      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3324      	adds	r3, #36	; 0x24
 800b09c:	2100      	movs	r1, #0
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f001 f8b6 	bl	800c210 <RCCEx_PLL3_Config>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b0a8:	e005      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ae:	e002      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b0b0:	bf00      	nop
 800b0b2:	e000      	b.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800b0b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d109      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0bc:	4b7c      	ldr	r3, [pc, #496]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c8:	4979      	ldr	r1, [pc, #484]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	650b      	str	r3, [r1, #80]	; 0x50
 800b0ce:	e001      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d049      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0e8:	d02e      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800b0ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0ee:	d828      	bhi.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b0f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0f4:	d02a      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b0f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0fa:	d822      	bhi.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b0fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b100:	d026      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800b102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b106:	d81c      	bhi.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b10c:	d010      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b10e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b112:	d816      	bhi.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800b114:	2b00      	cmp	r3, #0
 800b116:	d01d      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800b118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b11c:	d111      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3304      	adds	r3, #4
 800b122:	2101      	movs	r1, #1
 800b124:	4618      	mov	r0, r3
 800b126:	f000 ffc1 	bl	800c0ac <RCCEx_PLL2_Config>
 800b12a:	4603      	mov	r3, r0
 800b12c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b12e:	e012      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3324      	adds	r3, #36	; 0x24
 800b134:	2101      	movs	r1, #1
 800b136:	4618      	mov	r0, r3
 800b138:	f001 f86a 	bl	800c210 <RCCEx_PLL3_Config>
 800b13c:	4603      	mov	r3, r0
 800b13e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b140:	e009      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	75fb      	strb	r3, [r7, #23]
      break;
 800b146:	e006      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b148:	bf00      	nop
 800b14a:	e004      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b14c:	bf00      	nop
 800b14e:	e002      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b150:	bf00      	nop
 800b152:	e000      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800b154:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d109      	bne.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b15c:	4b54      	ldr	r3, [pc, #336]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b160:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b168:	4951      	ldr	r1, [pc, #324]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	650b      	str	r3, [r1, #80]	; 0x50
 800b16e:	e001      	b.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b170:	7dfb      	ldrb	r3, [r7, #23]
 800b172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d04b      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b18a:	d02e      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800b18c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b190:	d828      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b196:	d02a      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b19c:	d822      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b19e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1a2:	d026      	beq.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800b1a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1a8:	d81c      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b1aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ae:	d010      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800b1b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1b4:	d816      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d01d      	beq.n	800b1f6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800b1ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1be:	d111      	bne.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 ff70 	bl	800c0ac <RCCEx_PLL2_Config>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b1d0:	e012      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3324      	adds	r3, #36	; 0x24
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f001 f819 	bl	800c210 <RCCEx_PLL3_Config>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b1e2:	e009      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e8:	e006      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1ea:	bf00      	nop
 800b1ec:	e004      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1ee:	bf00      	nop
 800b1f0:	e002      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1f2:	bf00      	nop
 800b1f4:	e000      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800b1f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1f8:	7dfb      	ldrb	r3, [r7, #23]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10a      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b1fe:	4b2c      	ldr	r3, [pc, #176]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b202:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b20c:	4928      	ldr	r1, [pc, #160]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	658b      	str	r3, [r1, #88]	; 0x58
 800b212:	e001      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d02f      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b22c:	d00e      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800b22e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b232:	d814      	bhi.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b234:	2b00      	cmp	r3, #0
 800b236:	d015      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b23c:	d10f      	bne.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b23e:	4b1c      	ldr	r3, [pc, #112]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b242:	4a1b      	ldr	r2, [pc, #108]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b24a:	e00c      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3304      	adds	r3, #4
 800b250:	2101      	movs	r1, #1
 800b252:	4618      	mov	r0, r3
 800b254:	f000 ff2a 	bl	800c0ac <RCCEx_PLL2_Config>
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b25c:	e003      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	75fb      	strb	r3, [r7, #23]
      break;
 800b262:	e000      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800b264:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d109      	bne.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b26c:	4b10      	ldr	r3, [pc, #64]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b270:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b278:	490d      	ldr	r1, [pc, #52]	; (800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800b27a:	4313      	orrs	r3, r2
 800b27c:	650b      	str	r3, [r1, #80]	; 0x50
 800b27e:	e001      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d034      	beq.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b294:	2b03      	cmp	r3, #3
 800b296:	d81d      	bhi.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800b298:	a201      	add	r2, pc, #4	; (adr r2, 800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800b29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b29e:	bf00      	nop
 800b2a0:	0800b2db 	.word	0x0800b2db
 800b2a4:	0800b2b5 	.word	0x0800b2b5
 800b2a8:	0800b2c3 	.word	0x0800b2c3
 800b2ac:	0800b2db 	.word	0x0800b2db
 800b2b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b4:	4bb1      	ldr	r3, [pc, #708]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b8:	4ab0      	ldr	r2, [pc, #704]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b2c0:	e00c      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 feef 	bl	800c0ac <RCCEx_PLL2_Config>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b2d2:	e003      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b2d8:	e000      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800b2da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d109      	bne.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b2e2:	4ba6      	ldr	r3, [pc, #664]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e6:	f023 0203 	bic.w	r2, r3, #3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ee:	49a3      	ldr	r1, [pc, #652]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b2f4:	e001      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b302:	2b00      	cmp	r3, #0
 800b304:	f000 8086 	beq.w	800b414 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b308:	4b9d      	ldr	r3, [pc, #628]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a9c      	ldr	r2, [pc, #624]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b30e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b314:	f7fb fc6e 	bl	8006bf4 <HAL_GetTick>
 800b318:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b31a:	e009      	b.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b31c:	f7fb fc6a 	bl	8006bf4 <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	2b64      	cmp	r3, #100	; 0x64
 800b328:	d902      	bls.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	75fb      	strb	r3, [r7, #23]
        break;
 800b32e:	e005      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b330:	4b93      	ldr	r3, [pc, #588]	; (800b580 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0ef      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d166      	bne.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b342:	4b8e      	ldr	r3, [pc, #568]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b34c:	4053      	eors	r3, r2
 800b34e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b352:	2b00      	cmp	r3, #0
 800b354:	d013      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b356:	4b89      	ldr	r3, [pc, #548]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b35a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b35e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b360:	4b86      	ldr	r3, [pc, #536]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b364:	4a85      	ldr	r2, [pc, #532]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b36a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b36c:	4b83      	ldr	r3, [pc, #524]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b370:	4a82      	ldr	r2, [pc, #520]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b376:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b378:	4a80      	ldr	r2, [pc, #512]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b388:	d115      	bne.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b38a:	f7fb fc33 	bl	8006bf4 <HAL_GetTick>
 800b38e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b390:	e00b      	b.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b392:	f7fb fc2f 	bl	8006bf4 <HAL_GetTick>
 800b396:	4602      	mov	r2, r0
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d902      	bls.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	75fb      	strb	r3, [r7, #23]
            break;
 800b3a8:	e005      	b.n	800b3b6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3aa:	4b74      	ldr	r3, [pc, #464]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ae:	f003 0302 	and.w	r3, r3, #2
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0ed      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d126      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3ca:	d10d      	bne.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800b3cc:	4b6b      	ldr	r3, [pc, #428]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3da:	0919      	lsrs	r1, r3, #4
 800b3dc:	4b69      	ldr	r3, [pc, #420]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b3de:	400b      	ands	r3, r1
 800b3e0:	4966      	ldr	r1, [pc, #408]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	610b      	str	r3, [r1, #16]
 800b3e6:	e005      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800b3e8:	4b64      	ldr	r3, [pc, #400]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	4a63      	ldr	r2, [pc, #396]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3f2:	6113      	str	r3, [r2, #16]
 800b3f4:	4b61      	ldr	r3, [pc, #388]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b3f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b402:	495e      	ldr	r1, [pc, #376]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b404:	4313      	orrs	r3, r2
 800b406:	670b      	str	r3, [r1, #112]	; 0x70
 800b408:	e004      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b40a:	7dfb      	ldrb	r3, [r7, #23]
 800b40c:	75bb      	strb	r3, [r7, #22]
 800b40e:	e001      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d07e      	beq.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b424:	2b28      	cmp	r3, #40	; 0x28
 800b426:	d867      	bhi.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800b428:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800b42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42e:	bf00      	nop
 800b430:	0800b4ff 	.word	0x0800b4ff
 800b434:	0800b4f9 	.word	0x0800b4f9
 800b438:	0800b4f9 	.word	0x0800b4f9
 800b43c:	0800b4f9 	.word	0x0800b4f9
 800b440:	0800b4f9 	.word	0x0800b4f9
 800b444:	0800b4f9 	.word	0x0800b4f9
 800b448:	0800b4f9 	.word	0x0800b4f9
 800b44c:	0800b4f9 	.word	0x0800b4f9
 800b450:	0800b4d5 	.word	0x0800b4d5
 800b454:	0800b4f9 	.word	0x0800b4f9
 800b458:	0800b4f9 	.word	0x0800b4f9
 800b45c:	0800b4f9 	.word	0x0800b4f9
 800b460:	0800b4f9 	.word	0x0800b4f9
 800b464:	0800b4f9 	.word	0x0800b4f9
 800b468:	0800b4f9 	.word	0x0800b4f9
 800b46c:	0800b4f9 	.word	0x0800b4f9
 800b470:	0800b4e7 	.word	0x0800b4e7
 800b474:	0800b4f9 	.word	0x0800b4f9
 800b478:	0800b4f9 	.word	0x0800b4f9
 800b47c:	0800b4f9 	.word	0x0800b4f9
 800b480:	0800b4f9 	.word	0x0800b4f9
 800b484:	0800b4f9 	.word	0x0800b4f9
 800b488:	0800b4f9 	.word	0x0800b4f9
 800b48c:	0800b4f9 	.word	0x0800b4f9
 800b490:	0800b4ff 	.word	0x0800b4ff
 800b494:	0800b4f9 	.word	0x0800b4f9
 800b498:	0800b4f9 	.word	0x0800b4f9
 800b49c:	0800b4f9 	.word	0x0800b4f9
 800b4a0:	0800b4f9 	.word	0x0800b4f9
 800b4a4:	0800b4f9 	.word	0x0800b4f9
 800b4a8:	0800b4f9 	.word	0x0800b4f9
 800b4ac:	0800b4f9 	.word	0x0800b4f9
 800b4b0:	0800b4ff 	.word	0x0800b4ff
 800b4b4:	0800b4f9 	.word	0x0800b4f9
 800b4b8:	0800b4f9 	.word	0x0800b4f9
 800b4bc:	0800b4f9 	.word	0x0800b4f9
 800b4c0:	0800b4f9 	.word	0x0800b4f9
 800b4c4:	0800b4f9 	.word	0x0800b4f9
 800b4c8:	0800b4f9 	.word	0x0800b4f9
 800b4cc:	0800b4f9 	.word	0x0800b4f9
 800b4d0:	0800b4ff 	.word	0x0800b4ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	2101      	movs	r1, #1
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 fde6 	bl	800c0ac <RCCEx_PLL2_Config>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b4e4:	e00c      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3324      	adds	r3, #36	; 0x24
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f000 fe8f 	bl	800c210 <RCCEx_PLL3_Config>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b4f6:	e003      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b4fc:	e000      	b.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800b4fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b506:	4b1d      	ldr	r3, [pc, #116]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b512:	491a      	ldr	r1, [pc, #104]	; (800b57c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800b514:	4313      	orrs	r3, r2
 800b516:	654b      	str	r3, [r1, #84]	; 0x54
 800b518:	e001      	b.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0302 	and.w	r3, r3, #2
 800b526:	2b00      	cmp	r3, #0
 800b528:	d03e      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b52e:	2b05      	cmp	r3, #5
 800b530:	d820      	bhi.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800b532:	a201      	add	r2, pc, #4	; (adr r2, 800b538 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800b534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b538:	0800b589 	.word	0x0800b589
 800b53c:	0800b551 	.word	0x0800b551
 800b540:	0800b563 	.word	0x0800b563
 800b544:	0800b589 	.word	0x0800b589
 800b548:	0800b589 	.word	0x0800b589
 800b54c:	0800b589 	.word	0x0800b589
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	2101      	movs	r1, #1
 800b556:	4618      	mov	r0, r3
 800b558:	f000 fda8 	bl	800c0ac <RCCEx_PLL2_Config>
 800b55c:	4603      	mov	r3, r0
 800b55e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b560:	e013      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3324      	adds	r3, #36	; 0x24
 800b566:	2101      	movs	r1, #1
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 fe51 	bl	800c210 <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b572:	e00a      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	75fb      	strb	r3, [r7, #23]
      break;
 800b578:	e007      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800b57a:	bf00      	nop
 800b57c:	58024400 	.word	0x58024400
 800b580:	58024800 	.word	0x58024800
 800b584:	00ffffcf 	.word	0x00ffffcf
      break;
 800b588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d109      	bne.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b590:	4b9f      	ldr	r3, [pc, #636]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b594:	f023 0207 	bic.w	r2, r3, #7
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b59c:	499c      	ldr	r1, [pc, #624]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	654b      	str	r3, [r1, #84]	; 0x54
 800b5a2:	e001      	b.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0304 	and.w	r3, r3, #4
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d039      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5ba:	2b05      	cmp	r3, #5
 800b5bc:	d820      	bhi.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800b5be:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b607 	.word	0x0800b607
 800b5c8:	0800b5dd 	.word	0x0800b5dd
 800b5cc:	0800b5ef 	.word	0x0800b5ef
 800b5d0:	0800b607 	.word	0x0800b607
 800b5d4:	0800b607 	.word	0x0800b607
 800b5d8:	0800b607 	.word	0x0800b607
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 fd62 	bl	800c0ac <RCCEx_PLL2_Config>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b5ec:	e00c      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3324      	adds	r3, #36	; 0x24
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f000 fe0b 	bl	800c210 <RCCEx_PLL3_Config>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b5fe:	e003      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	75fb      	strb	r3, [r7, #23]
      break;
 800b604:	e000      	b.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800b606:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b608:	7dfb      	ldrb	r3, [r7, #23]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10a      	bne.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b60e:	4b80      	ldr	r3, [pc, #512]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b612:	f023 0207 	bic.w	r2, r3, #7
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b61c:	497c      	ldr	r1, [pc, #496]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	658b      	str	r3, [r1, #88]	; 0x58
 800b622:	e001      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b624:	7dfb      	ldrb	r3, [r7, #23]
 800b626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 0320 	and.w	r3, r3, #32
 800b630:	2b00      	cmp	r3, #0
 800b632:	d04b      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b63a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b63e:	d02e      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x962>
 800b640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b644:	d828      	bhi.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b64a:	d02a      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b64c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b650:	d822      	bhi.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b652:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b656:	d026      	beq.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800b658:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b65c:	d81c      	bhi.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b65e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b662:	d010      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800b664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b668:	d816      	bhi.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d01d      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b66e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b672:	d111      	bne.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3304      	adds	r3, #4
 800b678:	2100      	movs	r1, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fd16 	bl	800c0ac <RCCEx_PLL2_Config>
 800b680:	4603      	mov	r3, r0
 800b682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b684:	e012      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3324      	adds	r3, #36	; 0x24
 800b68a:	2102      	movs	r1, #2
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 fdbf 	bl	800c210 <RCCEx_PLL3_Config>
 800b692:	4603      	mov	r3, r0
 800b694:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b696:	e009      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	75fb      	strb	r3, [r7, #23]
      break;
 800b69c:	e006      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b69e:	bf00      	nop
 800b6a0:	e004      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b6a2:	bf00      	nop
 800b6a4:	e002      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b6a6:	bf00      	nop
 800b6a8:	e000      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800b6aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6ac:	7dfb      	ldrb	r3, [r7, #23]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6b2:	4b57      	ldr	r3, [pc, #348]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6c0:	4953      	ldr	r1, [pc, #332]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	654b      	str	r3, [r1, #84]	; 0x54
 800b6c6:	e001      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d04b      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6e2:	d02e      	beq.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800b6e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6e8:	d828      	bhi.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b6ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ee:	d02a      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800b6f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f4:	d822      	bhi.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b6f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6fa:	d026      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b6fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b700:	d81c      	bhi.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b706:	d010      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70c:	d816      	bhi.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d01d      	beq.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b716:	d111      	bne.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	3304      	adds	r3, #4
 800b71c:	2100      	movs	r1, #0
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 fcc4 	bl	800c0ac <RCCEx_PLL2_Config>
 800b724:	4603      	mov	r3, r0
 800b726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b728:	e012      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3324      	adds	r3, #36	; 0x24
 800b72e:	2102      	movs	r1, #2
 800b730:	4618      	mov	r0, r3
 800b732:	f000 fd6d 	bl	800c210 <RCCEx_PLL3_Config>
 800b736:	4603      	mov	r3, r0
 800b738:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b73a:	e009      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	75fb      	strb	r3, [r7, #23]
      break;
 800b740:	e006      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b742:	bf00      	nop
 800b744:	e004      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b746:	bf00      	nop
 800b748:	e002      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b74a:	bf00      	nop
 800b74c:	e000      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800b74e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b756:	4b2e      	ldr	r3, [pc, #184]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b75a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b764:	492a      	ldr	r1, [pc, #168]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b766:	4313      	orrs	r3, r2
 800b768:	658b      	str	r3, [r1, #88]	; 0x58
 800b76a:	e001      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d04d      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b782:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b786:	d02e      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800b788:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b78c:	d828      	bhi.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b78e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b792:	d02a      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800b794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b798:	d822      	bhi.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b79a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b79e:	d026      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800b7a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7a4:	d81c      	bhi.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b7a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7aa:	d010      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800b7ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b0:	d816      	bhi.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d01d      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800b7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7ba:	d111      	bne.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 fc72 	bl	800c0ac <RCCEx_PLL2_Config>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b7cc:	e012      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3324      	adds	r3, #36	; 0x24
 800b7d2:	2102      	movs	r1, #2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f000 fd1b 	bl	800c210 <RCCEx_PLL3_Config>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b7de:	e009      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b7e4:	e006      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7e6:	bf00      	nop
 800b7e8:	e004      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7ea:	bf00      	nop
 800b7ec:	e002      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7ee:	bf00      	nop
 800b7f0:	e000      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800b7f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7f4:	7dfb      	ldrb	r3, [r7, #23]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10c      	bne.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7fa:	4b05      	ldr	r3, [pc, #20]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b808:	4901      	ldr	r1, [pc, #4]	; (800b810 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800b80a:	4313      	orrs	r3, r2
 800b80c:	658b      	str	r3, [r1, #88]	; 0x58
 800b80e:	e003      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0308 	and.w	r3, r3, #8
 800b820:	2b00      	cmp	r3, #0
 800b822:	d018      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b82c:	d10a      	bne.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3324      	adds	r3, #36	; 0x24
 800b832:	2102      	movs	r1, #2
 800b834:	4618      	mov	r0, r3
 800b836:	f000 fceb 	bl	800c210 <RCCEx_PLL3_Config>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b844:	4b8a      	ldr	r3, [pc, #552]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b848:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b850:	4987      	ldr	r1, [pc, #540]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b852:	4313      	orrs	r3, r2
 800b854:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 0310 	and.w	r3, r3, #16
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01a      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b86c:	d10a      	bne.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3324      	adds	r3, #36	; 0x24
 800b872:	2102      	movs	r1, #2
 800b874:	4618      	mov	r0, r3
 800b876:	f000 fccb 	bl	800c210 <RCCEx_PLL3_Config>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b884:	4b7a      	ldr	r3, [pc, #488]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b892:	4977      	ldr	r1, [pc, #476]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b894:	4313      	orrs	r3, r2
 800b896:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d034      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ae:	d01d      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b8b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8b4:	d817      	bhi.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b8ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8be:	d009      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b8c0:	e011      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f000 fbef 	bl	800c0ac <RCCEx_PLL2_Config>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b8d2:	e00c      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3324      	adds	r3, #36	; 0x24
 800b8d8:	2102      	movs	r1, #2
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 fc98 	bl	800c210 <RCCEx_PLL3_Config>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b8e4:	e003      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ea:	e000      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800b8ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8f4:	4b5e      	ldr	r3, [pc, #376]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b8f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b902:	495b      	ldr	r1, [pc, #364]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b904:	4313      	orrs	r3, r2
 800b906:	658b      	str	r3, [r1, #88]	; 0x58
 800b908:	e001      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d033      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b920:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b924:	d01c      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b926:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b92a:	d816      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b92c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b930:	d003      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b936:	d007      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800b938:	e00f      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b93a:	4b4d      	ldr	r3, [pc, #308]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93e:	4a4c      	ldr	r2, [pc, #304]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b946:	e00c      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	3324      	adds	r3, #36	; 0x24
 800b94c:	2101      	movs	r1, #1
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fc5e 	bl	800c210 <RCCEx_PLL3_Config>
 800b954:	4603      	mov	r3, r0
 800b956:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b958:	e003      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	75fb      	strb	r3, [r7, #23]
      break;
 800b95e:	e000      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800b960:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b968:	4b41      	ldr	r3, [pc, #260]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b96c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b976:	493e      	ldr	r1, [pc, #248]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	654b      	str	r3, [r1, #84]	; 0x54
 800b97c:	e001      	b.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
 800b980:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d029      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b99a:	d007      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b99c:	e00f      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99e:	4b34      	ldr	r3, [pc, #208]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a2:	4a33      	ldr	r2, [pc, #204]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b9aa:	e00b      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	2102      	movs	r1, #2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 fb7a 	bl	800c0ac <RCCEx_PLL2_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b9bc:	e002      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9c4:	7dfb      	ldrb	r3, [r7, #23]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d109      	bne.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b9ca:	4b29      	ldr	r3, [pc, #164]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d6:	4926      	ldr	r1, [pc, #152]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b9dc:	e001      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3324      	adds	r3, #36	; 0x24
 800b9f2:	2102      	movs	r1, #2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f000 fc0b 	bl	800c210 <RCCEx_PLL3_Config>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d033      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba18:	d017      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ba1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba1e:	d811      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ba20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba24:	d013      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800ba26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba2a:	d80b      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d010      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800ba30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba34:	d106      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba36:	4b0e      	ldr	r3, [pc, #56]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	4a0d      	ldr	r2, [pc, #52]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ba42:	e007      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	75fb      	strb	r3, [r7, #23]
      break;
 800ba48:	e004      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ba4a:	bf00      	nop
 800ba4c:	e002      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ba4e:	bf00      	nop
 800ba50:	e000      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ba52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10c      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba5a:	4b05      	ldr	r3, [pc, #20]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba66:	4902      	ldr	r1, [pc, #8]	; (800ba70 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	654b      	str	r3, [r1, #84]	; 0x54
 800ba6c:	e004      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800ba6e:	bf00      	nop
 800ba70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d008      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba84:	4b29      	ldr	r3, [pc, #164]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ba86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba90:	4926      	ldr	r1, [pc, #152]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ba92:	4313      	orrs	r3, r2
 800ba94:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d008      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800baa2:	4b22      	ldr	r3, [pc, #136]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800baa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baae:	491f      	ldr	r1, [pc, #124]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bab0:	4313      	orrs	r3, r2
 800bab2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00d      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bac0:	4b1a      	ldr	r3, [pc, #104]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	4a19      	ldr	r2, [pc, #100]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bac6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800baca:	6113      	str	r3, [r2, #16]
 800bacc:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bace:	691a      	ldr	r2, [r3, #16]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bad6:	4915      	ldr	r1, [pc, #84]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bad8:	4313      	orrs	r3, r2
 800bada:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da08      	bge.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bae4:	4b11      	ldr	r3, [pc, #68]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf0:	490e      	ldr	r1, [pc, #56]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d009      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb02:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb10:	4906      	ldr	r1, [pc, #24]	; (800bb2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800bb12:	4313      	orrs	r3, r2
 800bb14:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bb16:	7dbb      	ldrb	r3, [r7, #22]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e000      	b.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3718      	adds	r7, #24
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	58024400 	.word	0x58024400

0800bb30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb34:	f7ff f8a6 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	4b06      	ldr	r3, [pc, #24]	; (800bb54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	091b      	lsrs	r3, r3, #4
 800bb40:	f003 0307 	and.w	r3, r3, #7
 800bb44:	4904      	ldr	r1, [pc, #16]	; (800bb58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb46:	5ccb      	ldrb	r3, [r1, r3]
 800bb48:	f003 031f 	and.w	r3, r3, #31
 800bb4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	58024400 	.word	0x58024400
 800bb58:	08011390 	.word	0x08011390

0800bb5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b089      	sub	sp, #36	; 0x24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb64:	4ba1      	ldr	r3, [pc, #644]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb68:	f003 0303 	and.w	r3, r3, #3
 800bb6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bb6e:	4b9f      	ldr	r3, [pc, #636]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	0b1b      	lsrs	r3, r3, #12
 800bb74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb7a:	4b9c      	ldr	r3, [pc, #624]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7e:	091b      	lsrs	r3, r3, #4
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bb86:	4b99      	ldr	r3, [pc, #612]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8a:	08db      	lsrs	r3, r3, #3
 800bb8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	fb02 f303 	mul.w	r3, r2, r3
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8111 	beq.w	800bdcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	f000 8083 	beq.w	800bcb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	f200 80a1 	bhi.w	800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d003      	beq.n	800bbc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d056      	beq.n	800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbc6:	e099      	b.n	800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbc8:	4b88      	ldr	r3, [pc, #544]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0320 	and.w	r3, r3, #32
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d02d      	beq.n	800bc30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbd4:	4b85      	ldr	r3, [pc, #532]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	08db      	lsrs	r3, r3, #3
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	4a84      	ldr	r2, [pc, #528]	; (800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bbe0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	ee07 3a90 	vmov	s15, r3
 800bbec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbfe:	4b7b      	ldr	r3, [pc, #492]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc12:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc2e:	e087      	b.n	800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc42:	4b6a      	ldr	r3, [pc, #424]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4a:	ee07 3a90 	vmov	s15, r3
 800bc4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc56:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc72:	e065      	b.n	800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bdfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc86:	4b59      	ldr	r3, [pc, #356]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8e:	ee07 3a90 	vmov	s15, r3
 800bc92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcb6:	e043      	b.n	800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bcc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcca:	4b48      	ldr	r3, [pc, #288]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcda:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcde:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcfa:	e021      	b.n	800bd40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	ee07 3a90 	vmov	s15, r3
 800bd02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bdfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0e:	4b37      	ldr	r3, [pc, #220]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd22:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bd40:	4b2a      	ldr	r3, [pc, #168]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd44:	0a5b      	lsrs	r3, r3, #9
 800bd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd66:	ee17 2a90 	vmov	r2, s15
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bd6e:	4b1f      	ldr	r3, [pc, #124]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd72:	0c1b      	lsrs	r3, r3, #16
 800bd74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd88:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd94:	ee17 2a90 	vmov	r2, s15
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bd9c:	4b13      	ldr	r3, [pc, #76]	; (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda0:	0e1b      	lsrs	r3, r3, #24
 800bda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc2:	ee17 2a90 	vmov	r2, s15
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bdca:	e008      	b.n	800bdde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	609a      	str	r2, [r3, #8]
}
 800bdde:	bf00      	nop
 800bde0:	3724      	adds	r7, #36	; 0x24
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	58024400 	.word	0x58024400
 800bdf0:	03d09000 	.word	0x03d09000
 800bdf4:	46000000 	.word	0x46000000
 800bdf8:	4c742400 	.word	0x4c742400
 800bdfc:	4a742400 	.word	0x4a742400
 800be00:	4af42400 	.word	0x4af42400

0800be04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800be04:	b480      	push	{r7}
 800be06:	b089      	sub	sp, #36	; 0x24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be0c:	4ba1      	ldr	r3, [pc, #644]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be10:	f003 0303 	and.w	r3, r3, #3
 800be14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800be16:	4b9f      	ldr	r3, [pc, #636]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1a:	0d1b      	lsrs	r3, r3, #20
 800be1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be22:	4b9c      	ldr	r3, [pc, #624]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be26:	0a1b      	lsrs	r3, r3, #8
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800be2e:	4b99      	ldr	r3, [pc, #612]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be32:	08db      	lsrs	r3, r3, #3
 800be34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	fb02 f303 	mul.w	r3, r2, r3
 800be3e:	ee07 3a90 	vmov	s15, r3
 800be42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 8111 	beq.w	800c074 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	2b02      	cmp	r3, #2
 800be56:	f000 8083 	beq.w	800bf60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	f200 80a1 	bhi.w	800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d056      	beq.n	800bf1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be6e:	e099      	b.n	800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be70:	4b88      	ldr	r3, [pc, #544]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 0320 	and.w	r3, r3, #32
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d02d      	beq.n	800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be7c:	4b85      	ldr	r3, [pc, #532]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	08db      	lsrs	r3, r3, #3
 800be82:	f003 0303 	and.w	r3, r3, #3
 800be86:	4a84      	ldr	r2, [pc, #528]	; (800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be88:	fa22 f303 	lsr.w	r3, r2, r3
 800be8c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	ee07 3a90 	vmov	s15, r3
 800be94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	ee07 3a90 	vmov	s15, r3
 800be9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bea6:	4b7b      	ldr	r3, [pc, #492]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beae:	ee07 3a90 	vmov	s15, r3
 800beb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800beba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bed2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bed6:	e087      	b.n	800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beea:	4b6a      	ldr	r3, [pc, #424]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef2:	ee07 3a90 	vmov	s15, r3
 800bef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800befa:	ed97 6a03 	vldr	s12, [r7, #12]
 800befe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf1a:	e065      	b.n	800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2e:	4b59      	ldr	r3, [pc, #356]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf36:	ee07 3a90 	vmov	s15, r3
 800bf3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf5e:	e043      	b.n	800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf72:	4b48      	ldr	r3, [pc, #288]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfa2:	e021      	b.n	800bfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	ee07 3a90 	vmov	s15, r3
 800bfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb6:	4b37      	ldr	r3, [pc, #220]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfe6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bfe8:	4b2a      	ldr	r3, [pc, #168]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	0a5b      	lsrs	r3, r3, #9
 800bfee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c002:	edd7 6a07 	vldr	s13, [r7, #28]
 800c006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00e:	ee17 2a90 	vmov	r2, s15
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c016:	4b1f      	ldr	r3, [pc, #124]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01a:	0c1b      	lsrs	r3, r3, #16
 800c01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c020:	ee07 3a90 	vmov	s15, r3
 800c024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c02c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c030:	edd7 6a07 	vldr	s13, [r7, #28]
 800c034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c03c:	ee17 2a90 	vmov	r2, s15
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c044:	4b13      	ldr	r3, [pc, #76]	; (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c048:	0e1b      	lsrs	r3, r3, #24
 800c04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c06a:	ee17 2a90 	vmov	r2, s15
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c072:	e008      	b.n	800c086 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	609a      	str	r2, [r3, #8]
}
 800c086:	bf00      	nop
 800c088:	3724      	adds	r7, #36	; 0x24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	58024400 	.word	0x58024400
 800c098:	03d09000 	.word	0x03d09000
 800c09c:	46000000 	.word	0x46000000
 800c0a0:	4c742400 	.word	0x4c742400
 800c0a4:	4a742400 	.word	0x4a742400
 800c0a8:	4af42400 	.word	0x4af42400

0800c0ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0ba:	4b53      	ldr	r3, [pc, #332]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0be:	f003 0303 	and.w	r3, r3, #3
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d101      	bne.n	800c0ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e099      	b.n	800c1fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c0ca:	4b4f      	ldr	r3, [pc, #316]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a4e      	ldr	r2, [pc, #312]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c0d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0d6:	f7fa fd8d 	bl	8006bf4 <HAL_GetTick>
 800c0da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0dc:	e008      	b.n	800c0f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c0de:	f7fa fd89 	bl	8006bf4 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d901      	bls.n	800c0f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e086      	b.n	800c1fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c0f0:	4b45      	ldr	r3, [pc, #276]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f0      	bne.n	800c0de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c0fc:	4b42      	ldr	r3, [pc, #264]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c100:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	031b      	lsls	r3, r3, #12
 800c10a:	493f      	ldr	r1, [pc, #252]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c10c:	4313      	orrs	r3, r2
 800c10e:	628b      	str	r3, [r1, #40]	; 0x28
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	3b01      	subs	r3, #1
 800c116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	689b      	ldr	r3, [r3, #8]
 800c11e:	3b01      	subs	r3, #1
 800c120:	025b      	lsls	r3, r3, #9
 800c122:	b29b      	uxth	r3, r3
 800c124:	431a      	orrs	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	041b      	lsls	r3, r3, #16
 800c12e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c132:	431a      	orrs	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	691b      	ldr	r3, [r3, #16]
 800c138:	3b01      	subs	r3, #1
 800c13a:	061b      	lsls	r3, r3, #24
 800c13c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c140:	4931      	ldr	r1, [pc, #196]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c142:	4313      	orrs	r3, r2
 800c144:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c146:	4b30      	ldr	r3, [pc, #192]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c14a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	492d      	ldr	r1, [pc, #180]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c154:	4313      	orrs	r3, r2
 800c156:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c158:	4b2b      	ldr	r3, [pc, #172]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15c:	f023 0220 	bic.w	r2, r3, #32
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	4928      	ldr	r1, [pc, #160]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c166:	4313      	orrs	r3, r2
 800c168:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c16a:	4b27      	ldr	r3, [pc, #156]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16e:	4a26      	ldr	r2, [pc, #152]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c170:	f023 0310 	bic.w	r3, r3, #16
 800c174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c176:	4b24      	ldr	r3, [pc, #144]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c17a:	4b24      	ldr	r3, [pc, #144]	; (800c20c <RCCEx_PLL2_Config+0x160>)
 800c17c:	4013      	ands	r3, r2
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	69d2      	ldr	r2, [r2, #28]
 800c182:	00d2      	lsls	r2, r2, #3
 800c184:	4920      	ldr	r1, [pc, #128]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c186:	4313      	orrs	r3, r2
 800c188:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c18a:	4b1f      	ldr	r3, [pc, #124]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	4a1e      	ldr	r2, [pc, #120]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c190:	f043 0310 	orr.w	r3, r3, #16
 800c194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d106      	bne.n	800c1aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c19c:	4b1a      	ldr	r3, [pc, #104]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	4a19      	ldr	r2, [pc, #100]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1a8:	e00f      	b.n	800c1ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d106      	bne.n	800c1be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c1b0:	4b15      	ldr	r3, [pc, #84]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b4:	4a14      	ldr	r2, [pc, #80]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1bc:	e005      	b.n	800c1ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c1be:	4b12      	ldr	r3, [pc, #72]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c2:	4a11      	ldr	r2, [pc, #68]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c1ca:	4b0f      	ldr	r3, [pc, #60]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a0e      	ldr	r2, [pc, #56]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1d6:	f7fa fd0d 	bl	8006bf4 <HAL_GetTick>
 800c1da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1dc:	e008      	b.n	800c1f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1de:	f7fa fd09 	bl	8006bf4 <HAL_GetTick>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d901      	bls.n	800c1f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e006      	b.n	800c1fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c1f0:	4b05      	ldr	r3, [pc, #20]	; (800c208 <RCCEx_PLL2_Config+0x15c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d0f0      	beq.n	800c1de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	58024400 	.word	0x58024400
 800c20c:	ffff0007 	.word	0xffff0007

0800c210 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c21e:	4b53      	ldr	r3, [pc, #332]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c222:	f003 0303 	and.w	r3, r3, #3
 800c226:	2b03      	cmp	r3, #3
 800c228:	d101      	bne.n	800c22e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e099      	b.n	800c362 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c22e:	4b4f      	ldr	r3, [pc, #316]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a4e      	ldr	r2, [pc, #312]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c23a:	f7fa fcdb 	bl	8006bf4 <HAL_GetTick>
 800c23e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c240:	e008      	b.n	800c254 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c242:	f7fa fcd7 	bl	8006bf4 <HAL_GetTick>
 800c246:	4602      	mov	r2, r0
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d901      	bls.n	800c254 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c250:	2303      	movs	r3, #3
 800c252:	e086      	b.n	800c362 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c254:	4b45      	ldr	r3, [pc, #276]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1f0      	bne.n	800c242 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c260:	4b42      	ldr	r3, [pc, #264]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c264:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	051b      	lsls	r3, r3, #20
 800c26e:	493f      	ldr	r1, [pc, #252]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c270:	4313      	orrs	r3, r2
 800c272:	628b      	str	r3, [r1, #40]	; 0x28
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	3b01      	subs	r3, #1
 800c27a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	3b01      	subs	r3, #1
 800c284:	025b      	lsls	r3, r3, #9
 800c286:	b29b      	uxth	r3, r3
 800c288:	431a      	orrs	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	3b01      	subs	r3, #1
 800c290:	041b      	lsls	r3, r3, #16
 800c292:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c296:	431a      	orrs	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	061b      	lsls	r3, r3, #24
 800c2a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2a4:	4931      	ldr	r1, [pc, #196]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c2aa:	4b30      	ldr	r3, [pc, #192]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	492d      	ldr	r1, [pc, #180]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c2bc:	4b2b      	ldr	r3, [pc, #172]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	4928      	ldr	r1, [pc, #160]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c2ce:	4b27      	ldr	r3, [pc, #156]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d2:	4a26      	ldr	r2, [pc, #152]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c2da:	4b24      	ldr	r3, [pc, #144]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2de:	4b24      	ldr	r3, [pc, #144]	; (800c370 <RCCEx_PLL3_Config+0x160>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	69d2      	ldr	r2, [r2, #28]
 800c2e6:	00d2      	lsls	r2, r2, #3
 800c2e8:	4920      	ldr	r1, [pc, #128]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c2ee:	4b1f      	ldr	r3, [pc, #124]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f2:	4a1e      	ldr	r2, [pc, #120]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c2f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d106      	bne.n	800c30e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c300:	4b1a      	ldr	r3, [pc, #104]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c304:	4a19      	ldr	r2, [pc, #100]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c30a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c30c:	e00f      	b.n	800c32e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d106      	bne.n	800c322 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c314:	4b15      	ldr	r3, [pc, #84]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c318:	4a14      	ldr	r2, [pc, #80]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c31a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c31e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c320:	e005      	b.n	800c32e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c322:	4b12      	ldr	r3, [pc, #72]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c326:	4a11      	ldr	r2, [pc, #68]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c32c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c32e:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a0e      	ldr	r2, [pc, #56]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c33a:	f7fa fc5b 	bl	8006bf4 <HAL_GetTick>
 800c33e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c340:	e008      	b.n	800c354 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c342:	f7fa fc57 	bl	8006bf4 <HAL_GetTick>
 800c346:	4602      	mov	r2, r0
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d901      	bls.n	800c354 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c350:	2303      	movs	r3, #3
 800c352:	e006      	b.n	800c362 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c354:	4b05      	ldr	r3, [pc, #20]	; (800c36c <RCCEx_PLL3_Config+0x15c>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0f0      	beq.n	800c342 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c360:	7bfb      	ldrb	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	58024400 	.word	0x58024400
 800c370:	ffff0007 	.word	0xffff0007

0800c374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d101      	bne.n	800c386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	e049      	b.n	800c41a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d106      	bne.n	800c3a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2200      	movs	r2, #0
 800c396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7f9 fd70 	bl	8005e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	f001 f820 	bl	800d3f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c432:	b2db      	uxtb	r3, r3
 800c434:	2b01      	cmp	r3, #1
 800c436:	d001      	beq.n	800c43c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e05e      	b.n	800c4fa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2202      	movs	r2, #2
 800c440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68da      	ldr	r2, [r3, #12]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f042 0201 	orr.w	r2, r2, #1
 800c452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a2b      	ldr	r2, [pc, #172]	; (800c508 <HAL_TIM_Base_Start_IT+0xe4>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d02c      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c466:	d027      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a27      	ldr	r2, [pc, #156]	; (800c50c <HAL_TIM_Base_Start_IT+0xe8>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d022      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a26      	ldr	r2, [pc, #152]	; (800c510 <HAL_TIM_Base_Start_IT+0xec>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d01d      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a24      	ldr	r2, [pc, #144]	; (800c514 <HAL_TIM_Base_Start_IT+0xf0>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d018      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a23      	ldr	r2, [pc, #140]	; (800c518 <HAL_TIM_Base_Start_IT+0xf4>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d013      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a21      	ldr	r2, [pc, #132]	; (800c51c <HAL_TIM_Base_Start_IT+0xf8>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d00e      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a20      	ldr	r2, [pc, #128]	; (800c520 <HAL_TIM_Base_Start_IT+0xfc>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d009      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a1e      	ldr	r2, [pc, #120]	; (800c524 <HAL_TIM_Base_Start_IT+0x100>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d004      	beq.n	800c4b8 <HAL_TIM_Base_Start_IT+0x94>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a1d      	ldr	r2, [pc, #116]	; (800c528 <HAL_TIM_Base_Start_IT+0x104>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d115      	bne.n	800c4e4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	689a      	ldr	r2, [r3, #8]
 800c4be:	4b1b      	ldr	r3, [pc, #108]	; (800c52c <HAL_TIM_Base_Start_IT+0x108>)
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b06      	cmp	r3, #6
 800c4c8:	d015      	beq.n	800c4f6 <HAL_TIM_Base_Start_IT+0xd2>
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4d0:	d011      	beq.n	800c4f6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f042 0201 	orr.w	r2, r2, #1
 800c4e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e2:	e008      	b.n	800c4f6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f042 0201 	orr.w	r2, r2, #1
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	e000      	b.n	800c4f8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	40010000 	.word	0x40010000
 800c50c:	40000400 	.word	0x40000400
 800c510:	40000800 	.word	0x40000800
 800c514:	40000c00 	.word	0x40000c00
 800c518:	40010400 	.word	0x40010400
 800c51c:	40001800 	.word	0x40001800
 800c520:	40014000 	.word	0x40014000
 800c524:	4000e000 	.word	0x4000e000
 800c528:	4000e400 	.word	0x4000e400
 800c52c:	00010007 	.word	0x00010007

0800c530 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	e049      	b.n	800c5d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d106      	bne.n	800c55c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7f9 fd28 	bl	8005fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2202      	movs	r2, #2
 800c560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3304      	adds	r3, #4
 800c56c:	4619      	mov	r1, r3
 800c56e:	4610      	mov	r0, r2
 800c570:	f000 ff42 	bl	800d3f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
	...

0800c5e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d109      	bne.n	800c604 <HAL_TIM_PWM_Start+0x24>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	bf14      	ite	ne
 800c5fc:	2301      	movne	r3, #1
 800c5fe:	2300      	moveq	r3, #0
 800c600:	b2db      	uxtb	r3, r3
 800c602:	e03c      	b.n	800c67e <HAL_TIM_PWM_Start+0x9e>
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b04      	cmp	r3, #4
 800c608:	d109      	bne.n	800c61e <HAL_TIM_PWM_Start+0x3e>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b01      	cmp	r3, #1
 800c614:	bf14      	ite	ne
 800c616:	2301      	movne	r3, #1
 800c618:	2300      	moveq	r3, #0
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	e02f      	b.n	800c67e <HAL_TIM_PWM_Start+0x9e>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2b08      	cmp	r3, #8
 800c622:	d109      	bne.n	800c638 <HAL_TIM_PWM_Start+0x58>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	bf14      	ite	ne
 800c630:	2301      	movne	r3, #1
 800c632:	2300      	moveq	r3, #0
 800c634:	b2db      	uxtb	r3, r3
 800c636:	e022      	b.n	800c67e <HAL_TIM_PWM_Start+0x9e>
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2b0c      	cmp	r3, #12
 800c63c:	d109      	bne.n	800c652 <HAL_TIM_PWM_Start+0x72>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b01      	cmp	r3, #1
 800c648:	bf14      	ite	ne
 800c64a:	2301      	movne	r3, #1
 800c64c:	2300      	moveq	r3, #0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	e015      	b.n	800c67e <HAL_TIM_PWM_Start+0x9e>
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b10      	cmp	r3, #16
 800c656:	d109      	bne.n	800c66c <HAL_TIM_PWM_Start+0x8c>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b01      	cmp	r3, #1
 800c662:	bf14      	ite	ne
 800c664:	2301      	movne	r3, #1
 800c666:	2300      	moveq	r3, #0
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	e008      	b.n	800c67e <HAL_TIM_PWM_Start+0x9e>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c672:	b2db      	uxtb	r3, r3
 800c674:	2b01      	cmp	r3, #1
 800c676:	bf14      	ite	ne
 800c678:	2301      	movne	r3, #1
 800c67a:	2300      	moveq	r3, #0
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e0ab      	b.n	800c7de <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d104      	bne.n	800c696 <HAL_TIM_PWM_Start+0xb6>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2202      	movs	r2, #2
 800c690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c694:	e023      	b.n	800c6de <HAL_TIM_PWM_Start+0xfe>
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b04      	cmp	r3, #4
 800c69a:	d104      	bne.n	800c6a6 <HAL_TIM_PWM_Start+0xc6>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6a4:	e01b      	b.n	800c6de <HAL_TIM_PWM_Start+0xfe>
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b08      	cmp	r3, #8
 800c6aa:	d104      	bne.n	800c6b6 <HAL_TIM_PWM_Start+0xd6>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6b4:	e013      	b.n	800c6de <HAL_TIM_PWM_Start+0xfe>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b0c      	cmp	r3, #12
 800c6ba:	d104      	bne.n	800c6c6 <HAL_TIM_PWM_Start+0xe6>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6c4:	e00b      	b.n	800c6de <HAL_TIM_PWM_Start+0xfe>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b10      	cmp	r3, #16
 800c6ca:	d104      	bne.n	800c6d6 <HAL_TIM_PWM_Start+0xf6>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2202      	movs	r2, #2
 800c6d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6d4:	e003      	b.n	800c6de <HAL_TIM_PWM_Start+0xfe>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2202      	movs	r2, #2
 800c6da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f001 faa0 	bl	800dc2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a3d      	ldr	r2, [pc, #244]	; (800c7e8 <HAL_TIM_PWM_Start+0x208>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d013      	beq.n	800c71e <HAL_TIM_PWM_Start+0x13e>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a3c      	ldr	r2, [pc, #240]	; (800c7ec <HAL_TIM_PWM_Start+0x20c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d00e      	beq.n	800c71e <HAL_TIM_PWM_Start+0x13e>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a3a      	ldr	r2, [pc, #232]	; (800c7f0 <HAL_TIM_PWM_Start+0x210>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d009      	beq.n	800c71e <HAL_TIM_PWM_Start+0x13e>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a39      	ldr	r2, [pc, #228]	; (800c7f4 <HAL_TIM_PWM_Start+0x214>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d004      	beq.n	800c71e <HAL_TIM_PWM_Start+0x13e>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a37      	ldr	r2, [pc, #220]	; (800c7f8 <HAL_TIM_PWM_Start+0x218>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d101      	bne.n	800c722 <HAL_TIM_PWM_Start+0x142>
 800c71e:	2301      	movs	r3, #1
 800c720:	e000      	b.n	800c724 <HAL_TIM_PWM_Start+0x144>
 800c722:	2300      	movs	r3, #0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d007      	beq.n	800c738 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c736:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a2a      	ldr	r2, [pc, #168]	; (800c7e8 <HAL_TIM_PWM_Start+0x208>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d02c      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c74a:	d027      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a2a      	ldr	r2, [pc, #168]	; (800c7fc <HAL_TIM_PWM_Start+0x21c>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d022      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a29      	ldr	r2, [pc, #164]	; (800c800 <HAL_TIM_PWM_Start+0x220>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d01d      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a27      	ldr	r2, [pc, #156]	; (800c804 <HAL_TIM_PWM_Start+0x224>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d018      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a1f      	ldr	r2, [pc, #124]	; (800c7ec <HAL_TIM_PWM_Start+0x20c>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d013      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a23      	ldr	r2, [pc, #140]	; (800c808 <HAL_TIM_PWM_Start+0x228>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d00e      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a1b      	ldr	r2, [pc, #108]	; (800c7f0 <HAL_TIM_PWM_Start+0x210>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d009      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a1f      	ldr	r2, [pc, #124]	; (800c80c <HAL_TIM_PWM_Start+0x22c>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d004      	beq.n	800c79c <HAL_TIM_PWM_Start+0x1bc>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a1e      	ldr	r2, [pc, #120]	; (800c810 <HAL_TIM_PWM_Start+0x230>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d115      	bne.n	800c7c8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	4b1c      	ldr	r3, [pc, #112]	; (800c814 <HAL_TIM_PWM_Start+0x234>)
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b06      	cmp	r3, #6
 800c7ac:	d015      	beq.n	800c7da <HAL_TIM_PWM_Start+0x1fa>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7b4:	d011      	beq.n	800c7da <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f042 0201 	orr.w	r2, r2, #1
 800c7c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c6:	e008      	b.n	800c7da <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f042 0201 	orr.w	r2, r2, #1
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	e000      	b.n	800c7dc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	40010000 	.word	0x40010000
 800c7ec:	40010400 	.word	0x40010400
 800c7f0:	40014000 	.word	0x40014000
 800c7f4:	40014400 	.word	0x40014400
 800c7f8:	40014800 	.word	0x40014800
 800c7fc:	40000400 	.word	0x40000400
 800c800:	40000800 	.word	0x40000800
 800c804:	40000c00 	.word	0x40000c00
 800c808:	40001800 	.word	0x40001800
 800c80c:	4000e000 	.word	0x4000e000
 800c810:	4000e400 	.word	0x4000e400
 800c814:	00010007 	.word	0x00010007

0800c818 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d109      	bne.n	800c840 <HAL_TIM_PWM_Start_IT+0x28>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b01      	cmp	r3, #1
 800c836:	bf14      	ite	ne
 800c838:	2301      	movne	r3, #1
 800c83a:	2300      	moveq	r3, #0
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	e03c      	b.n	800c8ba <HAL_TIM_PWM_Start_IT+0xa2>
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2b04      	cmp	r3, #4
 800c844:	d109      	bne.n	800c85a <HAL_TIM_PWM_Start_IT+0x42>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b01      	cmp	r3, #1
 800c850:	bf14      	ite	ne
 800c852:	2301      	movne	r3, #1
 800c854:	2300      	moveq	r3, #0
 800c856:	b2db      	uxtb	r3, r3
 800c858:	e02f      	b.n	800c8ba <HAL_TIM_PWM_Start_IT+0xa2>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b08      	cmp	r3, #8
 800c85e:	d109      	bne.n	800c874 <HAL_TIM_PWM_Start_IT+0x5c>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b01      	cmp	r3, #1
 800c86a:	bf14      	ite	ne
 800c86c:	2301      	movne	r3, #1
 800c86e:	2300      	moveq	r3, #0
 800c870:	b2db      	uxtb	r3, r3
 800c872:	e022      	b.n	800c8ba <HAL_TIM_PWM_Start_IT+0xa2>
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	2b0c      	cmp	r3, #12
 800c878:	d109      	bne.n	800c88e <HAL_TIM_PWM_Start_IT+0x76>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b01      	cmp	r3, #1
 800c884:	bf14      	ite	ne
 800c886:	2301      	movne	r3, #1
 800c888:	2300      	moveq	r3, #0
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	e015      	b.n	800c8ba <HAL_TIM_PWM_Start_IT+0xa2>
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b10      	cmp	r3, #16
 800c892:	d109      	bne.n	800c8a8 <HAL_TIM_PWM_Start_IT+0x90>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	bf14      	ite	ne
 800c8a0:	2301      	movne	r3, #1
 800c8a2:	2300      	moveq	r3, #0
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	e008      	b.n	800c8ba <HAL_TIM_PWM_Start_IT+0xa2>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	bf14      	ite	ne
 800c8b4:	2301      	movne	r3, #1
 800c8b6:	2300      	moveq	r3, #0
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e0f6      	b.n	800cab0 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d104      	bne.n	800c8d2 <HAL_TIM_PWM_Start_IT+0xba>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8d0:	e023      	b.n	800c91a <HAL_TIM_PWM_Start_IT+0x102>
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	2b04      	cmp	r3, #4
 800c8d6:	d104      	bne.n	800c8e2 <HAL_TIM_PWM_Start_IT+0xca>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2202      	movs	r2, #2
 800c8dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8e0:	e01b      	b.n	800c91a <HAL_TIM_PWM_Start_IT+0x102>
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b08      	cmp	r3, #8
 800c8e6:	d104      	bne.n	800c8f2 <HAL_TIM_PWM_Start_IT+0xda>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8f0:	e013      	b.n	800c91a <HAL_TIM_PWM_Start_IT+0x102>
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b0c      	cmp	r3, #12
 800c8f6:	d104      	bne.n	800c902 <HAL_TIM_PWM_Start_IT+0xea>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2202      	movs	r2, #2
 800c8fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c900:	e00b      	b.n	800c91a <HAL_TIM_PWM_Start_IT+0x102>
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2b10      	cmp	r3, #16
 800c906:	d104      	bne.n	800c912 <HAL_TIM_PWM_Start_IT+0xfa>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2202      	movs	r2, #2
 800c90c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c910:	e003      	b.n	800c91a <HAL_TIM_PWM_Start_IT+0x102>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2202      	movs	r2, #2
 800c916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b0c      	cmp	r3, #12
 800c91e:	d841      	bhi.n	800c9a4 <HAL_TIM_PWM_Start_IT+0x18c>
 800c920:	a201      	add	r2, pc, #4	; (adr r2, 800c928 <HAL_TIM_PWM_Start_IT+0x110>)
 800c922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800c95d 	.word	0x0800c95d
 800c92c:	0800c9a5 	.word	0x0800c9a5
 800c930:	0800c9a5 	.word	0x0800c9a5
 800c934:	0800c9a5 	.word	0x0800c9a5
 800c938:	0800c96f 	.word	0x0800c96f
 800c93c:	0800c9a5 	.word	0x0800c9a5
 800c940:	0800c9a5 	.word	0x0800c9a5
 800c944:	0800c9a5 	.word	0x0800c9a5
 800c948:	0800c981 	.word	0x0800c981
 800c94c:	0800c9a5 	.word	0x0800c9a5
 800c950:	0800c9a5 	.word	0x0800c9a5
 800c954:	0800c9a5 	.word	0x0800c9a5
 800c958:	0800c993 	.word	0x0800c993
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68da      	ldr	r2, [r3, #12]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f042 0202 	orr.w	r2, r2, #2
 800c96a:	60da      	str	r2, [r3, #12]
      break;
 800c96c:	e01d      	b.n	800c9aa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f042 0204 	orr.w	r2, r2, #4
 800c97c:	60da      	str	r2, [r3, #12]
      break;
 800c97e:	e014      	b.n	800c9aa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f042 0208 	orr.w	r2, r2, #8
 800c98e:	60da      	str	r2, [r3, #12]
      break;
 800c990:	e00b      	b.n	800c9aa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f042 0210 	orr.w	r2, r2, #16
 800c9a0:	60da      	str	r2, [r3, #12]
      break;
 800c9a2:	e002      	b.n	800c9aa <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c9a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d17e      	bne.n	800caae <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f001 f937 	bl	800dc2c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a3d      	ldr	r2, [pc, #244]	; (800cab8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d013      	beq.n	800c9f0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a3b      	ldr	r2, [pc, #236]	; (800cabc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00e      	beq.n	800c9f0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a3a      	ldr	r2, [pc, #232]	; (800cac0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d009      	beq.n	800c9f0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a38      	ldr	r2, [pc, #224]	; (800cac4 <HAL_TIM_PWM_Start_IT+0x2ac>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d004      	beq.n	800c9f0 <HAL_TIM_PWM_Start_IT+0x1d8>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a37      	ldr	r2, [pc, #220]	; (800cac8 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d101      	bne.n	800c9f4 <HAL_TIM_PWM_Start_IT+0x1dc>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e000      	b.n	800c9f6 <HAL_TIM_PWM_Start_IT+0x1de>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d007      	beq.n	800ca0a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a2a      	ldr	r2, [pc, #168]	; (800cab8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d02c      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca1c:	d027      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a2a      	ldr	r2, [pc, #168]	; (800cacc <HAL_TIM_PWM_Start_IT+0x2b4>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d022      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a28      	ldr	r2, [pc, #160]	; (800cad0 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d01d      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a27      	ldr	r2, [pc, #156]	; (800cad4 <HAL_TIM_PWM_Start_IT+0x2bc>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d018      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a1e      	ldr	r2, [pc, #120]	; (800cabc <HAL_TIM_PWM_Start_IT+0x2a4>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d013      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a23      	ldr	r2, [pc, #140]	; (800cad8 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d00e      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a1a      	ldr	r2, [pc, #104]	; (800cac0 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d009      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a1f      	ldr	r2, [pc, #124]	; (800cadc <HAL_TIM_PWM_Start_IT+0x2c4>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d004      	beq.n	800ca6e <HAL_TIM_PWM_Start_IT+0x256>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a1d      	ldr	r2, [pc, #116]	; (800cae0 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d115      	bne.n	800ca9a <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	4b1b      	ldr	r3, [pc, #108]	; (800cae4 <HAL_TIM_PWM_Start_IT+0x2cc>)
 800ca76:	4013      	ands	r3, r2
 800ca78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	2b06      	cmp	r3, #6
 800ca7e:	d015      	beq.n	800caac <HAL_TIM_PWM_Start_IT+0x294>
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca86:	d011      	beq.n	800caac <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f042 0201 	orr.w	r2, r2, #1
 800ca96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca98:	e008      	b.n	800caac <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f042 0201 	orr.w	r2, r2, #1
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	e000      	b.n	800caae <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40010400 	.word	0x40010400
 800cac0:	40014000 	.word	0x40014000
 800cac4:	40014400 	.word	0x40014400
 800cac8:	40014800 	.word	0x40014800
 800cacc:	40000400 	.word	0x40000400
 800cad0:	40000800 	.word	0x40000800
 800cad4:	40000c00 	.word	0x40000c00
 800cad8:	40001800 	.word	0x40001800
 800cadc:	4000e000 	.word	0x4000e000
 800cae0:	4000e400 	.word	0x4000e400
 800cae4:	00010007 	.word	0x00010007

0800cae8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e08f      	b.n	800cc1c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d106      	bne.n	800cb16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7f9 f8a7 	bl	8005c64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2202      	movs	r2, #2
 800cb1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	6899      	ldr	r1, [r3, #8]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	4b3e      	ldr	r3, [pc, #248]	; (800cc24 <HAL_TIM_Encoder_Init+0x13c>)
 800cb2a:	400b      	ands	r3, r1
 800cb2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	3304      	adds	r3, #4
 800cb36:	4619      	mov	r1, r3
 800cb38:	4610      	mov	r0, r2
 800cb3a:	f000 fc5d 	bl	800d3f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	6a1b      	ldr	r3, [r3, #32]
 800cb54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	4b31      	ldr	r3, [pc, #196]	; (800cc28 <HAL_TIM_Encoder_Init+0x140>)
 800cb64:	4013      	ands	r3, r2
 800cb66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	021b      	lsls	r3, r3, #8
 800cb72:	4313      	orrs	r3, r2
 800cb74:	693a      	ldr	r2, [r7, #16]
 800cb76:	4313      	orrs	r3, r2
 800cb78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	4b2b      	ldr	r3, [pc, #172]	; (800cc2c <HAL_TIM_Encoder_Init+0x144>)
 800cb7e:	4013      	ands	r3, r2
 800cb80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	4b2a      	ldr	r3, [pc, #168]	; (800cc30 <HAL_TIM_Encoder_Init+0x148>)
 800cb86:	4013      	ands	r3, r2
 800cb88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	68da      	ldr	r2, [r3, #12]
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	69db      	ldr	r3, [r3, #28]
 800cb92:	021b      	lsls	r3, r3, #8
 800cb94:	4313      	orrs	r3, r2
 800cb96:	693a      	ldr	r2, [r7, #16]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	011a      	lsls	r2, r3, #4
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	031b      	lsls	r3, r3, #12
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cbb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cbbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	011b      	lsls	r3, r3, #4
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	693a      	ldr	r2, [r7, #16]
 800cbe0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2201      	movs	r2, #1
 800cbee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2201      	movs	r2, #1
 800cc06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2201      	movs	r2, #1
 800cc16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3718      	adds	r7, #24
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	fffebff8 	.word	0xfffebff8
 800cc28:	fffffcfc 	.word	0xfffffcfc
 800cc2c:	fffff3f3 	.word	0xfffff3f3
 800cc30:	ffff0f0f 	.word	0xffff0f0f

0800cc34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cc4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d110      	bne.n	800cc86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d102      	bne.n	800cc70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc6a:	7b7b      	ldrb	r3, [r7, #13]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d001      	beq.n	800cc74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e069      	b.n	800cd48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2202      	movs	r2, #2
 800cc78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2202      	movs	r2, #2
 800cc80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cc84:	e031      	b.n	800ccea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	2b04      	cmp	r3, #4
 800cc8a:	d110      	bne.n	800ccae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d102      	bne.n	800cc98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cc92:	7b3b      	ldrb	r3, [r7, #12]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d001      	beq.n	800cc9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e055      	b.n	800cd48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2202      	movs	r2, #2
 800cca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2202      	movs	r2, #2
 800cca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccac:	e01d      	b.n	800ccea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d108      	bne.n	800ccc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d105      	bne.n	800ccc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ccba:	7b7b      	ldrb	r3, [r7, #13]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d102      	bne.n	800ccc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ccc0:	7b3b      	ldrb	r3, [r7, #12]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d001      	beq.n	800ccca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e03e      	b.n	800cd48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2202      	movs	r2, #2
 800ccce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2202      	movs	r2, #2
 800ccde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2202      	movs	r2, #2
 800cce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <HAL_TIM_Encoder_Start+0xc4>
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2b04      	cmp	r3, #4
 800ccf4:	d008      	beq.n	800cd08 <HAL_TIM_Encoder_Start+0xd4>
 800ccf6:	e00f      	b.n	800cd18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	2100      	movs	r1, #0
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 ff93 	bl	800dc2c <TIM_CCxChannelCmd>
      break;
 800cd06:	e016      	b.n	800cd36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	2104      	movs	r1, #4
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 ff8b 	bl	800dc2c <TIM_CCxChannelCmd>
      break;
 800cd16:	e00e      	b.n	800cd36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	2100      	movs	r1, #0
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 ff83 	bl	800dc2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	2104      	movs	r1, #4
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 ff7c 	bl	800dc2c <TIM_CCxChannelCmd>
      break;
 800cd34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f042 0201 	orr.w	r2, r2, #1
 800cd44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	f003 0302 	and.w	r3, r3, #2
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d122      	bne.n	800cdac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	f003 0302 	and.w	r3, r3, #2
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d11b      	bne.n	800cdac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f06f 0202 	mvn.w	r2, #2
 800cd7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	f003 0303 	and.w	r3, r3, #3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d003      	beq.n	800cd9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fb12 	bl	800d3bc <HAL_TIM_IC_CaptureCallback>
 800cd98:	e005      	b.n	800cda6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fb04 	bl	800d3a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fb15 	bl	800d3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	f003 0304 	and.w	r3, r3, #4
 800cdb6:	2b04      	cmp	r3, #4
 800cdb8:	d122      	bne.n	800ce00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	f003 0304 	and.w	r3, r3, #4
 800cdc4:	2b04      	cmp	r3, #4
 800cdc6:	d11b      	bne.n	800ce00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f06f 0204 	mvn.w	r2, #4
 800cdd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2202      	movs	r2, #2
 800cdd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d003      	beq.n	800cdee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fae8 	bl	800d3bc <HAL_TIM_IC_CaptureCallback>
 800cdec:	e005      	b.n	800cdfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fada 	bl	800d3a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 faeb 	bl	800d3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f003 0308 	and.w	r3, r3, #8
 800ce0a:	2b08      	cmp	r3, #8
 800ce0c:	d122      	bne.n	800ce54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	f003 0308 	and.w	r3, r3, #8
 800ce18:	2b08      	cmp	r3, #8
 800ce1a:	d11b      	bne.n	800ce54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f06f 0208 	mvn.w	r2, #8
 800ce24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2204      	movs	r2, #4
 800ce2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	69db      	ldr	r3, [r3, #28]
 800ce32:	f003 0303 	and.w	r3, r3, #3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d003      	beq.n	800ce42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fabe 	bl	800d3bc <HAL_TIM_IC_CaptureCallback>
 800ce40:	e005      	b.n	800ce4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fab0 	bl	800d3a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fac1 	bl	800d3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	f003 0310 	and.w	r3, r3, #16
 800ce5e:	2b10      	cmp	r3, #16
 800ce60:	d122      	bne.n	800cea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	f003 0310 	and.w	r3, r3, #16
 800ce6c:	2b10      	cmp	r3, #16
 800ce6e:	d11b      	bne.n	800cea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f06f 0210 	mvn.w	r2, #16
 800ce78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2208      	movs	r2, #8
 800ce7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	69db      	ldr	r3, [r3, #28]
 800ce86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fa94 	bl	800d3bc <HAL_TIM_IC_CaptureCallback>
 800ce94:	e005      	b.n	800cea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fa86 	bl	800d3a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fa97 	bl	800d3d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d10e      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	f003 0301 	and.w	r3, r3, #1
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d107      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f06f 0201 	mvn.w	r2, #1
 800cecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7f9 fba0 	bl	8006614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cede:	2b80      	cmp	r3, #128	; 0x80
 800cee0:	d10e      	bne.n	800cf00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceec:	2b80      	cmp	r3, #128	; 0x80
 800ceee:	d107      	bne.n	800cf00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f001 f802 	bl	800df04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf0e:	d10e      	bne.n	800cf2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf1a:	2b80      	cmp	r3, #128	; 0x80
 800cf1c:	d107      	bne.n	800cf2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cf26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fff5 	bl	800df18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	691b      	ldr	r3, [r3, #16]
 800cf34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf38:	2b40      	cmp	r3, #64	; 0x40
 800cf3a:	d10e      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf46:	2b40      	cmp	r3, #64	; 0x40
 800cf48:	d107      	bne.n	800cf5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cf52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fa45 	bl	800d3e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f003 0320 	and.w	r3, r3, #32
 800cf64:	2b20      	cmp	r3, #32
 800cf66:	d10e      	bne.n	800cf86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	f003 0320 	and.w	r3, r3, #32
 800cf72:	2b20      	cmp	r3, #32
 800cf74:	d107      	bne.n	800cf86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f06f 0220 	mvn.w	r2, #32
 800cf7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 ffb5 	bl	800def0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
	...

0800cf90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d101      	bne.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cfaa:	2302      	movs	r3, #2
 800cfac:	e0ff      	b.n	800d1ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b14      	cmp	r3, #20
 800cfba:	f200 80f0 	bhi.w	800d19e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cfbe:	a201      	add	r2, pc, #4	; (adr r2, 800cfc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc4:	0800d019 	.word	0x0800d019
 800cfc8:	0800d19f 	.word	0x0800d19f
 800cfcc:	0800d19f 	.word	0x0800d19f
 800cfd0:	0800d19f 	.word	0x0800d19f
 800cfd4:	0800d059 	.word	0x0800d059
 800cfd8:	0800d19f 	.word	0x0800d19f
 800cfdc:	0800d19f 	.word	0x0800d19f
 800cfe0:	0800d19f 	.word	0x0800d19f
 800cfe4:	0800d09b 	.word	0x0800d09b
 800cfe8:	0800d19f 	.word	0x0800d19f
 800cfec:	0800d19f 	.word	0x0800d19f
 800cff0:	0800d19f 	.word	0x0800d19f
 800cff4:	0800d0db 	.word	0x0800d0db
 800cff8:	0800d19f 	.word	0x0800d19f
 800cffc:	0800d19f 	.word	0x0800d19f
 800d000:	0800d19f 	.word	0x0800d19f
 800d004:	0800d11d 	.word	0x0800d11d
 800d008:	0800d19f 	.word	0x0800d19f
 800d00c:	0800d19f 	.word	0x0800d19f
 800d010:	0800d19f 	.word	0x0800d19f
 800d014:	0800d15d 	.word	0x0800d15d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68b9      	ldr	r1, [r7, #8]
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 fa90 	bl	800d544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	699a      	ldr	r2, [r3, #24]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f042 0208 	orr.w	r2, r2, #8
 800d032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	699a      	ldr	r2, [r3, #24]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0204 	bic.w	r2, r2, #4
 800d042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	6999      	ldr	r1, [r3, #24]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	691a      	ldr	r2, [r3, #16]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	619a      	str	r2, [r3, #24]
      break;
 800d056:	e0a5      	b.n	800d1a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68b9      	ldr	r1, [r7, #8]
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 fb00 	bl	800d664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	699a      	ldr	r2, [r3, #24]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	699a      	ldr	r2, [r3, #24]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6999      	ldr	r1, [r3, #24]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	021a      	lsls	r2, r3, #8
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	430a      	orrs	r2, r1
 800d096:	619a      	str	r2, [r3, #24]
      break;
 800d098:	e084      	b.n	800d1a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68b9      	ldr	r1, [r7, #8]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 fb69 	bl	800d778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	69da      	ldr	r2, [r3, #28]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f042 0208 	orr.w	r2, r2, #8
 800d0b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	69da      	ldr	r2, [r3, #28]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f022 0204 	bic.w	r2, r2, #4
 800d0c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	69d9      	ldr	r1, [r3, #28]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	691a      	ldr	r2, [r3, #16]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	61da      	str	r2, [r3, #28]
      break;
 800d0d8:	e064      	b.n	800d1a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68b9      	ldr	r1, [r7, #8]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fbd1 	bl	800d888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	69da      	ldr	r2, [r3, #28]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	69da      	ldr	r2, [r3, #28]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	69d9      	ldr	r1, [r3, #28]
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	021a      	lsls	r2, r3, #8
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	430a      	orrs	r2, r1
 800d118:	61da      	str	r2, [r3, #28]
      break;
 800d11a:	e043      	b.n	800d1a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	4618      	mov	r0, r3
 800d124:	f000 fc1a 	bl	800d95c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f042 0208 	orr.w	r2, r2, #8
 800d136:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f022 0204 	bic.w	r2, r2, #4
 800d146:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	691a      	ldr	r2, [r3, #16]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	430a      	orrs	r2, r1
 800d158:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d15a:	e023      	b.n	800d1a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	4618      	mov	r0, r3
 800d164:	f000 fc5e 	bl	800da24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d176:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d186:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	021a      	lsls	r2, r3, #8
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d19c:	e002      	b.n	800d1a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	75fb      	strb	r3, [r7, #23]
      break;
 800d1a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop

0800d1b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d101      	bne.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1c>
 800d1d0:	2302      	movs	r3, #2
 800d1d2:	e0dc      	b.n	800d38e <HAL_TIM_ConfigClockSource+0x1d6>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1ec:	68ba      	ldr	r2, [r7, #8]
 800d1ee:	4b6a      	ldr	r3, [pc, #424]	; (800d398 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d1fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a64      	ldr	r2, [pc, #400]	; (800d39c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	f000 80a9 	beq.w	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d210:	4a62      	ldr	r2, [pc, #392]	; (800d39c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d212:	4293      	cmp	r3, r2
 800d214:	f200 80ae 	bhi.w	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d218:	4a61      	ldr	r2, [pc, #388]	; (800d3a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	f000 80a1 	beq.w	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d220:	4a5f      	ldr	r2, [pc, #380]	; (800d3a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d222:	4293      	cmp	r3, r2
 800d224:	f200 80a6 	bhi.w	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d228:	4a5e      	ldr	r2, [pc, #376]	; (800d3a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	f000 8099 	beq.w	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d230:	4a5c      	ldr	r2, [pc, #368]	; (800d3a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d232:	4293      	cmp	r3, r2
 800d234:	f200 809e 	bhi.w	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d238:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d23c:	f000 8091 	beq.w	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d240:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d244:	f200 8096 	bhi.w	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d24c:	f000 8089 	beq.w	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d254:	f200 808e 	bhi.w	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d25c:	d03e      	beq.n	800d2dc <HAL_TIM_ConfigClockSource+0x124>
 800d25e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d262:	f200 8087 	bhi.w	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d26a:	f000 8086 	beq.w	800d37a <HAL_TIM_ConfigClockSource+0x1c2>
 800d26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d272:	d87f      	bhi.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d274:	2b70      	cmp	r3, #112	; 0x70
 800d276:	d01a      	beq.n	800d2ae <HAL_TIM_ConfigClockSource+0xf6>
 800d278:	2b70      	cmp	r3, #112	; 0x70
 800d27a:	d87b      	bhi.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d27c:	2b60      	cmp	r3, #96	; 0x60
 800d27e:	d050      	beq.n	800d322 <HAL_TIM_ConfigClockSource+0x16a>
 800d280:	2b60      	cmp	r3, #96	; 0x60
 800d282:	d877      	bhi.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d284:	2b50      	cmp	r3, #80	; 0x50
 800d286:	d03c      	beq.n	800d302 <HAL_TIM_ConfigClockSource+0x14a>
 800d288:	2b50      	cmp	r3, #80	; 0x50
 800d28a:	d873      	bhi.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d28c:	2b40      	cmp	r3, #64	; 0x40
 800d28e:	d058      	beq.n	800d342 <HAL_TIM_ConfigClockSource+0x18a>
 800d290:	2b40      	cmp	r3, #64	; 0x40
 800d292:	d86f      	bhi.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d294:	2b30      	cmp	r3, #48	; 0x30
 800d296:	d064      	beq.n	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d298:	2b30      	cmp	r3, #48	; 0x30
 800d29a:	d86b      	bhi.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d29c:	2b20      	cmp	r3, #32
 800d29e:	d060      	beq.n	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2a0:	2b20      	cmp	r3, #32
 800d2a2:	d867      	bhi.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d05c      	beq.n	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2a8:	2b10      	cmp	r3, #16
 800d2aa:	d05a      	beq.n	800d362 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2ac:	e062      	b.n	800d374 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6818      	ldr	r0, [r3, #0]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	6899      	ldr	r1, [r3, #8]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	685a      	ldr	r2, [r3, #4]
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f000 fc95 	bl	800dbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68ba      	ldr	r2, [r7, #8]
 800d2d8:	609a      	str	r2, [r3, #8]
      break;
 800d2da:	e04f      	b.n	800d37c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6818      	ldr	r0, [r3, #0]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	6899      	ldr	r1, [r3, #8]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	f000 fc7e 	bl	800dbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	689a      	ldr	r2, [r3, #8]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2fe:	609a      	str	r2, [r3, #8]
      break;
 800d300:	e03c      	b.n	800d37c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	6859      	ldr	r1, [r3, #4]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	461a      	mov	r2, r3
 800d310:	f000 fbee 	bl	800daf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2150      	movs	r1, #80	; 0x50
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 fc48 	bl	800dbb0 <TIM_ITRx_SetConfig>
      break;
 800d320:	e02c      	b.n	800d37c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6818      	ldr	r0, [r3, #0]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	6859      	ldr	r1, [r3, #4]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	461a      	mov	r2, r3
 800d330:	f000 fc0d 	bl	800db4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2160      	movs	r1, #96	; 0x60
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 fc38 	bl	800dbb0 <TIM_ITRx_SetConfig>
      break;
 800d340:	e01c      	b.n	800d37c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6818      	ldr	r0, [r3, #0]
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	6859      	ldr	r1, [r3, #4]
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	461a      	mov	r2, r3
 800d350:	f000 fbce 	bl	800daf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2140      	movs	r1, #64	; 0x40
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 fc28 	bl	800dbb0 <TIM_ITRx_SetConfig>
      break;
 800d360:	e00c      	b.n	800d37c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4619      	mov	r1, r3
 800d36c:	4610      	mov	r0, r2
 800d36e:	f000 fc1f 	bl	800dbb0 <TIM_ITRx_SetConfig>
      break;
 800d372:	e003      	b.n	800d37c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	73fb      	strb	r3, [r7, #15]
      break;
 800d378:	e000      	b.n	800d37c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d37a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	ffceff88 	.word	0xffceff88
 800d39c:	00100040 	.word	0x00100040
 800d3a0:	00100030 	.word	0x00100030
 800d3a4:	00100020 	.word	0x00100020

0800d3a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3c4:	bf00      	nop
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3d8:	bf00      	nop
 800d3da:	370c      	adds	r7, #12
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	4a44      	ldr	r2, [pc, #272]	; (800d51c <TIM_Base_SetConfig+0x124>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d013      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d416:	d00f      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	4a41      	ldr	r2, [pc, #260]	; (800d520 <TIM_Base_SetConfig+0x128>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d00b      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4a40      	ldr	r2, [pc, #256]	; (800d524 <TIM_Base_SetConfig+0x12c>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d007      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4a3f      	ldr	r2, [pc, #252]	; (800d528 <TIM_Base_SetConfig+0x130>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d003      	beq.n	800d438 <TIM_Base_SetConfig+0x40>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a3e      	ldr	r2, [pc, #248]	; (800d52c <TIM_Base_SetConfig+0x134>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d108      	bne.n	800d44a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d43e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	4313      	orrs	r3, r2
 800d448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a33      	ldr	r2, [pc, #204]	; (800d51c <TIM_Base_SetConfig+0x124>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d027      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d458:	d023      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a30      	ldr	r2, [pc, #192]	; (800d520 <TIM_Base_SetConfig+0x128>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d01f      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a2f      	ldr	r2, [pc, #188]	; (800d524 <TIM_Base_SetConfig+0x12c>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d01b      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a2e      	ldr	r2, [pc, #184]	; (800d528 <TIM_Base_SetConfig+0x130>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d017      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a2d      	ldr	r2, [pc, #180]	; (800d52c <TIM_Base_SetConfig+0x134>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d013      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a2c      	ldr	r2, [pc, #176]	; (800d530 <TIM_Base_SetConfig+0x138>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d00f      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a2b      	ldr	r2, [pc, #172]	; (800d534 <TIM_Base_SetConfig+0x13c>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d00b      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a2a      	ldr	r2, [pc, #168]	; (800d538 <TIM_Base_SetConfig+0x140>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d007      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a29      	ldr	r2, [pc, #164]	; (800d53c <TIM_Base_SetConfig+0x144>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d003      	beq.n	800d4a2 <TIM_Base_SetConfig+0xaa>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a28      	ldr	r2, [pc, #160]	; (800d540 <TIM_Base_SetConfig+0x148>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d108      	bne.n	800d4b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	689a      	ldr	r2, [r3, #8]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a10      	ldr	r2, [pc, #64]	; (800d51c <TIM_Base_SetConfig+0x124>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d00f      	beq.n	800d500 <TIM_Base_SetConfig+0x108>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a12      	ldr	r2, [pc, #72]	; (800d52c <TIM_Base_SetConfig+0x134>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d00b      	beq.n	800d500 <TIM_Base_SetConfig+0x108>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a11      	ldr	r2, [pc, #68]	; (800d530 <TIM_Base_SetConfig+0x138>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d007      	beq.n	800d500 <TIM_Base_SetConfig+0x108>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a10      	ldr	r2, [pc, #64]	; (800d534 <TIM_Base_SetConfig+0x13c>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d003      	beq.n	800d500 <TIM_Base_SetConfig+0x108>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a0f      	ldr	r2, [pc, #60]	; (800d538 <TIM_Base_SetConfig+0x140>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d103      	bne.n	800d508 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	691a      	ldr	r2, [r3, #16]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	615a      	str	r2, [r3, #20]
}
 800d50e:	bf00      	nop
 800d510:	3714      	adds	r7, #20
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	40010000 	.word	0x40010000
 800d520:	40000400 	.word	0x40000400
 800d524:	40000800 	.word	0x40000800
 800d528:	40000c00 	.word	0x40000c00
 800d52c:	40010400 	.word	0x40010400
 800d530:	40014000 	.word	0x40014000
 800d534:	40014400 	.word	0x40014400
 800d538:	40014800 	.word	0x40014800
 800d53c:	4000e000 	.word	0x4000e000
 800d540:	4000e400 	.word	0x4000e400

0800d544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6a1b      	ldr	r3, [r3, #32]
 800d552:	f023 0201 	bic.w	r2, r3, #1
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a1b      	ldr	r3, [r3, #32]
 800d55e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	4b37      	ldr	r3, [pc, #220]	; (800d64c <TIM_OC1_SetConfig+0x108>)
 800d570:	4013      	ands	r3, r2
 800d572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f023 0303 	bic.w	r3, r3, #3
 800d57a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	4313      	orrs	r3, r2
 800d584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f023 0302 	bic.w	r3, r3, #2
 800d58c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	4313      	orrs	r3, r2
 800d596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a2d      	ldr	r2, [pc, #180]	; (800d650 <TIM_OC1_SetConfig+0x10c>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d00f      	beq.n	800d5c0 <TIM_OC1_SetConfig+0x7c>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a2c      	ldr	r2, [pc, #176]	; (800d654 <TIM_OC1_SetConfig+0x110>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d00b      	beq.n	800d5c0 <TIM_OC1_SetConfig+0x7c>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a2b      	ldr	r2, [pc, #172]	; (800d658 <TIM_OC1_SetConfig+0x114>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d007      	beq.n	800d5c0 <TIM_OC1_SetConfig+0x7c>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a2a      	ldr	r2, [pc, #168]	; (800d65c <TIM_OC1_SetConfig+0x118>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d003      	beq.n	800d5c0 <TIM_OC1_SetConfig+0x7c>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a29      	ldr	r2, [pc, #164]	; (800d660 <TIM_OC1_SetConfig+0x11c>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d10c      	bne.n	800d5da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f023 0308 	bic.w	r3, r3, #8
 800d5c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f023 0304 	bic.w	r3, r3, #4
 800d5d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4a1c      	ldr	r2, [pc, #112]	; (800d650 <TIM_OC1_SetConfig+0x10c>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d00f      	beq.n	800d602 <TIM_OC1_SetConfig+0xbe>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4a1b      	ldr	r2, [pc, #108]	; (800d654 <TIM_OC1_SetConfig+0x110>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d00b      	beq.n	800d602 <TIM_OC1_SetConfig+0xbe>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4a1a      	ldr	r2, [pc, #104]	; (800d658 <TIM_OC1_SetConfig+0x114>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d007      	beq.n	800d602 <TIM_OC1_SetConfig+0xbe>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a19      	ldr	r2, [pc, #100]	; (800d65c <TIM_OC1_SetConfig+0x118>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d003      	beq.n	800d602 <TIM_OC1_SetConfig+0xbe>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4a18      	ldr	r2, [pc, #96]	; (800d660 <TIM_OC1_SetConfig+0x11c>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d111      	bne.n	800d626 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	693a      	ldr	r2, [r7, #16]
 800d618:	4313      	orrs	r3, r2
 800d61a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	693a      	ldr	r2, [r7, #16]
 800d622:	4313      	orrs	r3, r2
 800d624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	693a      	ldr	r2, [r7, #16]
 800d62a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	621a      	str	r2, [r3, #32]
}
 800d640:	bf00      	nop
 800d642:	371c      	adds	r7, #28
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	fffeff8f 	.word	0xfffeff8f
 800d650:	40010000 	.word	0x40010000
 800d654:	40010400 	.word	0x40010400
 800d658:	40014000 	.word	0x40014000
 800d65c:	40014400 	.word	0x40014400
 800d660:	40014800 	.word	0x40014800

0800d664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6a1b      	ldr	r3, [r3, #32]
 800d672:	f023 0210 	bic.w	r2, r3, #16
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a1b      	ldr	r3, [r3, #32]
 800d67e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	4b34      	ldr	r3, [pc, #208]	; (800d760 <TIM_OC2_SetConfig+0xfc>)
 800d690:	4013      	ands	r3, r2
 800d692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d69a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	021b      	lsls	r3, r3, #8
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f023 0320 	bic.w	r3, r3, #32
 800d6ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	011b      	lsls	r3, r3, #4
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a29      	ldr	r2, [pc, #164]	; (800d764 <TIM_OC2_SetConfig+0x100>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d003      	beq.n	800d6cc <TIM_OC2_SetConfig+0x68>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a28      	ldr	r2, [pc, #160]	; (800d768 <TIM_OC2_SetConfig+0x104>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d10d      	bne.n	800d6e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	011b      	lsls	r3, r3, #4
 800d6da:	697a      	ldr	r2, [r7, #20]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a1e      	ldr	r2, [pc, #120]	; (800d764 <TIM_OC2_SetConfig+0x100>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d00f      	beq.n	800d710 <TIM_OC2_SetConfig+0xac>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a1d      	ldr	r2, [pc, #116]	; (800d768 <TIM_OC2_SetConfig+0x104>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d00b      	beq.n	800d710 <TIM_OC2_SetConfig+0xac>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a1c      	ldr	r2, [pc, #112]	; (800d76c <TIM_OC2_SetConfig+0x108>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d007      	beq.n	800d710 <TIM_OC2_SetConfig+0xac>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a1b      	ldr	r2, [pc, #108]	; (800d770 <TIM_OC2_SetConfig+0x10c>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d003      	beq.n	800d710 <TIM_OC2_SetConfig+0xac>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a1a      	ldr	r2, [pc, #104]	; (800d774 <TIM_OC2_SetConfig+0x110>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d113      	bne.n	800d738 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d71e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	4313      	orrs	r3, r2
 800d72a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	699b      	ldr	r3, [r3, #24]
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	693a      	ldr	r2, [r7, #16]
 800d734:	4313      	orrs	r3, r2
 800d736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	621a      	str	r2, [r3, #32]
}
 800d752:	bf00      	nop
 800d754:	371c      	adds	r7, #28
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	feff8fff 	.word	0xfeff8fff
 800d764:	40010000 	.word	0x40010000
 800d768:	40010400 	.word	0x40010400
 800d76c:	40014000 	.word	0x40014000
 800d770:	40014400 	.word	0x40014400
 800d774:	40014800 	.word	0x40014800

0800d778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a1b      	ldr	r3, [r3, #32]
 800d792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	4b33      	ldr	r3, [pc, #204]	; (800d870 <TIM_OC3_SetConfig+0xf8>)
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f023 0303 	bic.w	r3, r3, #3
 800d7ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	021b      	lsls	r3, r3, #8
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a28      	ldr	r2, [pc, #160]	; (800d874 <TIM_OC3_SetConfig+0xfc>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d003      	beq.n	800d7de <TIM_OC3_SetConfig+0x66>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a27      	ldr	r2, [pc, #156]	; (800d878 <TIM_OC3_SetConfig+0x100>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d10d      	bne.n	800d7fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	021b      	lsls	r3, r3, #8
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a1d      	ldr	r2, [pc, #116]	; (800d874 <TIM_OC3_SetConfig+0xfc>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d00f      	beq.n	800d822 <TIM_OC3_SetConfig+0xaa>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a1c      	ldr	r2, [pc, #112]	; (800d878 <TIM_OC3_SetConfig+0x100>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d00b      	beq.n	800d822 <TIM_OC3_SetConfig+0xaa>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a1b      	ldr	r2, [pc, #108]	; (800d87c <TIM_OC3_SetConfig+0x104>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d007      	beq.n	800d822 <TIM_OC3_SetConfig+0xaa>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a1a      	ldr	r2, [pc, #104]	; (800d880 <TIM_OC3_SetConfig+0x108>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d003      	beq.n	800d822 <TIM_OC3_SetConfig+0xaa>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a19      	ldr	r2, [pc, #100]	; (800d884 <TIM_OC3_SetConfig+0x10c>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d113      	bne.n	800d84a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	695b      	ldr	r3, [r3, #20]
 800d836:	011b      	lsls	r3, r3, #4
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	4313      	orrs	r3, r2
 800d83c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	4313      	orrs	r3, r2
 800d848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	693a      	ldr	r2, [r7, #16]
 800d84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	621a      	str	r2, [r3, #32]
}
 800d864:	bf00      	nop
 800d866:	371c      	adds	r7, #28
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr
 800d870:	fffeff8f 	.word	0xfffeff8f
 800d874:	40010000 	.word	0x40010000
 800d878:	40010400 	.word	0x40010400
 800d87c:	40014000 	.word	0x40014000
 800d880:	40014400 	.word	0x40014400
 800d884:	40014800 	.word	0x40014800

0800d888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d888:	b480      	push	{r7}
 800d88a:	b087      	sub	sp, #28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	4b24      	ldr	r3, [pc, #144]	; (800d944 <TIM_OC4_SetConfig+0xbc>)
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	021b      	lsls	r3, r3, #8
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	689b      	ldr	r3, [r3, #8]
 800d8d8:	031b      	lsls	r3, r3, #12
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a19      	ldr	r2, [pc, #100]	; (800d948 <TIM_OC4_SetConfig+0xc0>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00f      	beq.n	800d908 <TIM_OC4_SetConfig+0x80>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a18      	ldr	r2, [pc, #96]	; (800d94c <TIM_OC4_SetConfig+0xc4>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d00b      	beq.n	800d908 <TIM_OC4_SetConfig+0x80>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a17      	ldr	r2, [pc, #92]	; (800d950 <TIM_OC4_SetConfig+0xc8>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d007      	beq.n	800d908 <TIM_OC4_SetConfig+0x80>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a16      	ldr	r2, [pc, #88]	; (800d954 <TIM_OC4_SetConfig+0xcc>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d003      	beq.n	800d908 <TIM_OC4_SetConfig+0x80>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a15      	ldr	r2, [pc, #84]	; (800d958 <TIM_OC4_SetConfig+0xd0>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d109      	bne.n	800d91c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d90e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	695b      	ldr	r3, [r3, #20]
 800d914:	019b      	lsls	r3, r3, #6
 800d916:	697a      	ldr	r2, [r7, #20]
 800d918:	4313      	orrs	r3, r2
 800d91a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	68fa      	ldr	r2, [r7, #12]
 800d926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	685a      	ldr	r2, [r3, #4]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	621a      	str	r2, [r3, #32]
}
 800d936:	bf00      	nop
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	feff8fff 	.word	0xfeff8fff
 800d948:	40010000 	.word	0x40010000
 800d94c:	40010400 	.word	0x40010400
 800d950:	40014000 	.word	0x40014000
 800d954:	40014400 	.word	0x40014400
 800d958:	40014800 	.word	0x40014800

0800d95c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b087      	sub	sp, #28
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	4b21      	ldr	r3, [pc, #132]	; (800da0c <TIM_OC5_SetConfig+0xb0>)
 800d988:	4013      	ands	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	4313      	orrs	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d99c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	041b      	lsls	r3, r3, #16
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4a18      	ldr	r2, [pc, #96]	; (800da10 <TIM_OC5_SetConfig+0xb4>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d00f      	beq.n	800d9d2 <TIM_OC5_SetConfig+0x76>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4a17      	ldr	r2, [pc, #92]	; (800da14 <TIM_OC5_SetConfig+0xb8>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d00b      	beq.n	800d9d2 <TIM_OC5_SetConfig+0x76>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4a16      	ldr	r2, [pc, #88]	; (800da18 <TIM_OC5_SetConfig+0xbc>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d007      	beq.n	800d9d2 <TIM_OC5_SetConfig+0x76>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4a15      	ldr	r2, [pc, #84]	; (800da1c <TIM_OC5_SetConfig+0xc0>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d003      	beq.n	800d9d2 <TIM_OC5_SetConfig+0x76>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4a14      	ldr	r2, [pc, #80]	; (800da20 <TIM_OC5_SetConfig+0xc4>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d109      	bne.n	800d9e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d9d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	695b      	ldr	r3, [r3, #20]
 800d9de:	021b      	lsls	r3, r3, #8
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	693a      	ldr	r2, [r7, #16]
 800d9fe:	621a      	str	r2, [r3, #32]
}
 800da00:	bf00      	nop
 800da02:	371c      	adds	r7, #28
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	fffeff8f 	.word	0xfffeff8f
 800da10:	40010000 	.word	0x40010000
 800da14:	40010400 	.word	0x40010400
 800da18:	40014000 	.word	0x40014000
 800da1c:	40014400 	.word	0x40014400
 800da20:	40014800 	.word	0x40014800

0800da24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a1b      	ldr	r3, [r3, #32]
 800da32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a1b      	ldr	r3, [r3, #32]
 800da3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	4b22      	ldr	r3, [pc, #136]	; (800dad8 <TIM_OC6_SetConfig+0xb4>)
 800da50:	4013      	ands	r3, r2
 800da52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	021b      	lsls	r3, r3, #8
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	051b      	lsls	r3, r3, #20
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	4313      	orrs	r3, r2
 800da72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a19      	ldr	r2, [pc, #100]	; (800dadc <TIM_OC6_SetConfig+0xb8>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d00f      	beq.n	800da9c <TIM_OC6_SetConfig+0x78>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4a18      	ldr	r2, [pc, #96]	; (800dae0 <TIM_OC6_SetConfig+0xbc>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d00b      	beq.n	800da9c <TIM_OC6_SetConfig+0x78>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a17      	ldr	r2, [pc, #92]	; (800dae4 <TIM_OC6_SetConfig+0xc0>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d007      	beq.n	800da9c <TIM_OC6_SetConfig+0x78>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a16      	ldr	r2, [pc, #88]	; (800dae8 <TIM_OC6_SetConfig+0xc4>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d003      	beq.n	800da9c <TIM_OC6_SetConfig+0x78>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a15      	ldr	r2, [pc, #84]	; (800daec <TIM_OC6_SetConfig+0xc8>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d109      	bne.n	800dab0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800daa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	029b      	lsls	r3, r3, #10
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	4313      	orrs	r3, r2
 800daae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	621a      	str	r2, [r3, #32]
}
 800daca:	bf00      	nop
 800dacc:	371c      	adds	r7, #28
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	feff8fff 	.word	0xfeff8fff
 800dadc:	40010000 	.word	0x40010000
 800dae0:	40010400 	.word	0x40010400
 800dae4:	40014000 	.word	0x40014000
 800dae8:	40014400 	.word	0x40014400
 800daec:	40014800 	.word	0x40014800

0800daf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b087      	sub	sp, #28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6a1b      	ldr	r3, [r3, #32]
 800db00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6a1b      	ldr	r3, [r3, #32]
 800db06:	f023 0201 	bic.w	r2, r3, #1
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	699b      	ldr	r3, [r3, #24]
 800db12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	011b      	lsls	r3, r3, #4
 800db20:	693a      	ldr	r2, [r7, #16]
 800db22:	4313      	orrs	r3, r2
 800db24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f023 030a 	bic.w	r3, r3, #10
 800db2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db2e:	697a      	ldr	r2, [r7, #20]
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	4313      	orrs	r3, r2
 800db34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	621a      	str	r2, [r3, #32]
}
 800db42:	bf00      	nop
 800db44:	371c      	adds	r7, #28
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db4e:	b480      	push	{r7}
 800db50:	b087      	sub	sp, #28
 800db52:	af00      	add	r7, sp, #0
 800db54:	60f8      	str	r0, [r7, #12]
 800db56:	60b9      	str	r1, [r7, #8]
 800db58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	6a1b      	ldr	r3, [r3, #32]
 800db5e:	f023 0210 	bic.w	r2, r3, #16
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6a1b      	ldr	r3, [r3, #32]
 800db70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	031b      	lsls	r3, r3, #12
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	4313      	orrs	r3, r2
 800db82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	011b      	lsls	r3, r3, #4
 800db90:	693a      	ldr	r2, [r7, #16]
 800db92:	4313      	orrs	r3, r2
 800db94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	621a      	str	r2, [r3, #32]
}
 800dba2:	bf00      	nop
 800dba4:	371c      	adds	r7, #28
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
	...

0800dbb0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	4b09      	ldr	r3, [pc, #36]	; (800dbe8 <TIM_ITRx_SetConfig+0x38>)
 800dbc4:	4013      	ands	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbc8:	683a      	ldr	r2, [r7, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	f043 0307 	orr.w	r3, r3, #7
 800dbd2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	609a      	str	r2, [r3, #8]
}
 800dbda:	bf00      	nop
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	ffcfff8f 	.word	0xffcfff8f

0800dbec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	021a      	lsls	r2, r3, #8
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	609a      	str	r2, [r3, #8]
}
 800dc20:	bf00      	nop
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	f003 031f 	and.w	r3, r3, #31
 800dc3e:	2201      	movs	r2, #1
 800dc40:	fa02 f303 	lsl.w	r3, r2, r3
 800dc44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6a1a      	ldr	r2, [r3, #32]
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	43db      	mvns	r3, r3
 800dc4e:	401a      	ands	r2, r3
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6a1a      	ldr	r2, [r3, #32]
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	f003 031f 	and.w	r3, r3, #31
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	fa01 f303 	lsl.w	r3, r1, r3
 800dc64:	431a      	orrs	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	621a      	str	r2, [r3, #32]
}
 800dc6a:	bf00      	nop
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
	...

0800dc78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d101      	bne.n	800dc90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	e077      	b.n	800dd80 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2202      	movs	r2, #2
 800dc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a35      	ldr	r2, [pc, #212]	; (800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d004      	beq.n	800dcc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a34      	ldr	r2, [pc, #208]	; (800dd90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d108      	bne.n	800dcd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dcca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a25      	ldr	r2, [pc, #148]	; (800dd8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d02c      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd02:	d027      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a22      	ldr	r2, [pc, #136]	; (800dd94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d022      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a21      	ldr	r2, [pc, #132]	; (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d01d      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a1f      	ldr	r2, [pc, #124]	; (800dd9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d018      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	4a1a      	ldr	r2, [pc, #104]	; (800dd90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d013      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a1b      	ldr	r2, [pc, #108]	; (800dda0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d00e      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a1a      	ldr	r2, [pc, #104]	; (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d009      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a18      	ldr	r2, [pc, #96]	; (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d004      	beq.n	800dd54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a17      	ldr	r2, [pc, #92]	; (800ddac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d10c      	bne.n	800dd6e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2201      	movs	r2, #1
 800dd72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	40010000 	.word	0x40010000
 800dd90:	40010400 	.word	0x40010400
 800dd94:	40000400 	.word	0x40000400
 800dd98:	40000800 	.word	0x40000800
 800dd9c:	40000c00 	.word	0x40000c00
 800dda0:	40001800 	.word	0x40001800
 800dda4:	40014000 	.word	0x40014000
 800dda8:	4000e000 	.word	0x4000e000
 800ddac:	4000e400 	.word	0x4000e400

0800ddb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d101      	bne.n	800ddcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ddc8:	2302      	movs	r3, #2
 800ddca:	e087      	b.n	800dedc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4313      	orrs	r3, r2
 800de0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	4313      	orrs	r3, r2
 800de18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	695b      	ldr	r3, [r3, #20]
 800de24:	4313      	orrs	r3, r2
 800de26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	699b      	ldr	r3, [r3, #24]
 800de40:	041b      	lsls	r3, r3, #16
 800de42:	4313      	orrs	r3, r2
 800de44:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a27      	ldr	r2, [pc, #156]	; (800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d004      	beq.n	800de5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a25      	ldr	r2, [pc, #148]	; (800deec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d106      	bne.n	800de68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	69db      	ldr	r3, [r3, #28]
 800de64:	4313      	orrs	r3, r2
 800de66:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a1e      	ldr	r2, [pc, #120]	; (800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d004      	beq.n	800de7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a1d      	ldr	r2, [pc, #116]	; (800deec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d126      	bne.n	800deca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de86:	051b      	lsls	r3, r3, #20
 800de88:	4313      	orrs	r3, r2
 800de8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	6a1b      	ldr	r3, [r3, #32]
 800de96:	4313      	orrs	r3, r2
 800de98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea4:	4313      	orrs	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a0e      	ldr	r2, [pc, #56]	; (800dee8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d004      	beq.n	800debc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a0d      	ldr	r2, [pc, #52]	; (800deec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d106      	bne.n	800deca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec6:	4313      	orrs	r3, r2
 800dec8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3714      	adds	r7, #20
 800dee0:	46bd      	mov	sp, r7
 800dee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee6:	4770      	bx	lr
 800dee8:	40010000 	.word	0x40010000
 800deec:	40010400 	.word	0x40010400

0800def0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	e042      	b.n	800dfc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df44:	2b00      	cmp	r3, #0
 800df46:	d106      	bne.n	800df56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7f8 f91f 	bl	8006194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2224      	movs	r2, #36	; 0x24
 800df5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f022 0201 	bic.w	r2, r2, #1
 800df6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fcdc 	bl	800e92c <UART_SetConfig>
 800df74:	4603      	mov	r3, r0
 800df76:	2b01      	cmp	r3, #1
 800df78:	d101      	bne.n	800df7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e022      	b.n	800dfc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df82:	2b00      	cmp	r3, #0
 800df84:	d002      	beq.n	800df8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f001 fb3c 	bl	800f604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	689a      	ldr	r2, [r3, #8]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dfaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f042 0201 	orr.w	r2, r2, #1
 800dfba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f001 fbc3 	bl	800f748 <UART_CheckIdleState>
 800dfc2:	4603      	mov	r3, r0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b08a      	sub	sp, #40	; 0x28
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	d17a      	bne.n	800e0da <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d002      	beq.n	800dff0 <HAL_UART_Transmit_DMA+0x24>
 800dfea:	88fb      	ldrh	r3, [r7, #6]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d101      	bne.n	800dff4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	e073      	b.n	800e0dc <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d101      	bne.n	800e002 <HAL_UART_Transmit_DMA+0x36>
 800dffe:	2302      	movs	r3, #2
 800e000:	e06c      	b.n	800e0dc <HAL_UART_Transmit_DMA+0x110>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2201      	movs	r2, #1
 800e006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	88fa      	ldrh	r2, [r7, #6]
 800e014:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	88fa      	ldrh	r2, [r7, #6]
 800e01c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2221      	movs	r2, #33	; 0x21
 800e02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e034:	2b00      	cmp	r3, #0
 800e036:	d02c      	beq.n	800e092 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e03c:	4a29      	ldr	r2, [pc, #164]	; (800e0e4 <HAL_UART_Transmit_DMA+0x118>)
 800e03e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e044:	4a28      	ldr	r2, [pc, #160]	; (800e0e8 <HAL_UART_Transmit_DMA+0x11c>)
 800e046:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e04c:	4a27      	ldr	r2, [pc, #156]	; (800e0ec <HAL_UART_Transmit_DMA+0x120>)
 800e04e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e054:	2200      	movs	r2, #0
 800e056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e060:	4619      	mov	r1, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3328      	adds	r3, #40	; 0x28
 800e068:	461a      	mov	r2, r3
 800e06a:	88fb      	ldrh	r3, [r7, #6]
 800e06c:	f7f9 fa38 	bl	80074e0 <HAL_DMA_Start_IT>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00d      	beq.n	800e092 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2210      	movs	r2, #16
 800e07a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2220      	movs	r2, #32
 800e08a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e024      	b.n	800e0dc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2240      	movs	r2, #64	; 0x40
 800e098:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	3308      	adds	r3, #8
 800e0a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	e853 3f00 	ldrex	r3, [r3]
 800e0b0:	613b      	str	r3, [r7, #16]
   return(result);
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	3308      	adds	r3, #8
 800e0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0c2:	623a      	str	r2, [r7, #32]
 800e0c4:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c6:	69f9      	ldr	r1, [r7, #28]
 800e0c8:	6a3a      	ldr	r2, [r7, #32]
 800e0ca:	e841 2300 	strex	r3, r2, [r1]
 800e0ce:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1e5      	bne.n	800e0a2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	e000      	b.n	800e0dc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800e0da:	2302      	movs	r3, #2
  }
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3728      	adds	r7, #40	; 0x28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	0800fc11 	.word	0x0800fc11
 800e0e8:	0800fca7 	.word	0x0800fca7
 800e0ec:	0800fe1d 	.word	0x0800fe1d

0800e0f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b08a      	sub	sp, #40	; 0x28
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e104:	2b20      	cmp	r3, #32
 800e106:	d142      	bne.n	800e18e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d002      	beq.n	800e114 <HAL_UART_Receive_DMA+0x24>
 800e10e:	88fb      	ldrh	r3, [r7, #6]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e114:	2301      	movs	r3, #1
 800e116:	e03b      	b.n	800e190 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d101      	bne.n	800e126 <HAL_UART_Receive_DMA+0x36>
 800e122:	2302      	movs	r3, #2
 800e124:	e034      	b.n	800e190 <HAL_UART_Receive_DMA+0xa0>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2200      	movs	r2, #0
 800e132:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a17      	ldr	r2, [pc, #92]	; (800e198 <HAL_UART_Receive_DMA+0xa8>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d01f      	beq.n	800e17e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d018      	beq.n	800e17e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	e853 3f00 	ldrex	r3, [r3]
 800e158:	613b      	str	r3, [r7, #16]
   return(result);
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e160:	627b      	str	r3, [r7, #36]	; 0x24
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16a:	623b      	str	r3, [r7, #32]
 800e16c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e16e:	69f9      	ldr	r1, [r7, #28]
 800e170:	6a3a      	ldr	r2, [r7, #32]
 800e172:	e841 2300 	strex	r3, r2, [r1]
 800e176:	61bb      	str	r3, [r7, #24]
   return(result);
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d1e6      	bne.n	800e14c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e17e:	88fb      	ldrh	r3, [r7, #6]
 800e180:	461a      	mov	r2, r3
 800e182:	68b9      	ldr	r1, [r7, #8]
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f001 fbf3 	bl	800f970 <UART_Start_Receive_DMA>
 800e18a:	4603      	mov	r3, r0
 800e18c:	e000      	b.n	800e190 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e18e:	2302      	movs	r3, #2
  }
}
 800e190:	4618      	mov	r0, r3
 800e192:	3728      	adds	r7, #40	; 0x28
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	58000c00 	.word	0x58000c00

0800e19c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b0ba      	sub	sp, #232	; 0xe8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	69db      	ldr	r3, [r3, #28]
 800e1aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d11b      	bne.n	800e210 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1dc:	f003 0320 	and.w	r3, r3, #32
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d015      	beq.n	800e210 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1e8:	f003 0320 	and.w	r3, r3, #32
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d105      	bne.n	800e1fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d009      	beq.n	800e210 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e200:	2b00      	cmp	r3, #0
 800e202:	f000 835a 	beq.w	800e8ba <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	4798      	blx	r3
      }
      return;
 800e20e:	e354      	b.n	800e8ba <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e214:	2b00      	cmp	r3, #0
 800e216:	f000 811f 	beq.w	800e458 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e21a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e21e:	4b8b      	ldr	r3, [pc, #556]	; (800e44c <HAL_UART_IRQHandler+0x2b0>)
 800e220:	4013      	ands	r3, r2
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e22a:	4b89      	ldr	r3, [pc, #548]	; (800e450 <HAL_UART_IRQHandler+0x2b4>)
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 8112 	beq.w	800e458 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e238:	f003 0301 	and.w	r3, r3, #1
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d011      	beq.n	800e264 <HAL_UART_IRQHandler+0xc8>
 800e240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00b      	beq.n	800e264 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2201      	movs	r2, #1
 800e252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e25a:	f043 0201 	orr.w	r2, r3, #1
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e268:	f003 0302 	and.w	r3, r3, #2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d011      	beq.n	800e294 <HAL_UART_IRQHandler+0xf8>
 800e270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2202      	movs	r2, #2
 800e282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e28a:	f043 0204 	orr.w	r2, r3, #4
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e298:	f003 0304 	and.w	r3, r3, #4
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d011      	beq.n	800e2c4 <HAL_UART_IRQHandler+0x128>
 800e2a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2a4:	f003 0301 	and.w	r3, r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00b      	beq.n	800e2c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2204      	movs	r2, #4
 800e2b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2ba:	f043 0202 	orr.w	r2, r3, #2
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2c8:	f003 0308 	and.w	r3, r3, #8
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d017      	beq.n	800e300 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2d4:	f003 0320 	and.w	r3, r3, #32
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d105      	bne.n	800e2e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e2dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e2e0:	4b5a      	ldr	r3, [pc, #360]	; (800e44c <HAL_UART_IRQHandler+0x2b0>)
 800e2e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00b      	beq.n	800e300 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2208      	movs	r2, #8
 800e2ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e2f6:	f043 0208 	orr.w	r2, r3, #8
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d012      	beq.n	800e332 <HAL_UART_IRQHandler+0x196>
 800e30c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00c      	beq.n	800e332 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e328:	f043 0220 	orr.w	r2, r3, #32
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 82c0 	beq.w	800e8be <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e342:	f003 0320 	and.w	r3, r3, #32
 800e346:	2b00      	cmp	r3, #0
 800e348:	d013      	beq.n	800e372 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e34a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d105      	bne.n	800e362 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e35a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d007      	beq.n	800e372 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e366:	2b00      	cmp	r3, #0
 800e368:	d003      	beq.n	800e372 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e386:	2b40      	cmp	r3, #64	; 0x40
 800e388:	d005      	beq.n	800e396 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e38a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e38e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e392:	2b00      	cmp	r3, #0
 800e394:	d04f      	beq.n	800e436 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f001 fbd4 	bl	800fb44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a6:	2b40      	cmp	r3, #64	; 0x40
 800e3a8:	d141      	bne.n	800e42e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3308      	adds	r3, #8
 800e3b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3b8:	e853 3f00 	ldrex	r3, [r3]
 800e3bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3e6:	e841 2300 	strex	r3, r2, [r1]
 800e3ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1d9      	bne.n	800e3aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d013      	beq.n	800e426 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e402:	4a14      	ldr	r2, [pc, #80]	; (800e454 <HAL_UART_IRQHandler+0x2b8>)
 800e404:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7f9 fdf0 	bl	8007ff0 <HAL_DMA_Abort_IT>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d017      	beq.n	800e446 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e41a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e420:	4610      	mov	r0, r2
 800e422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e424:	e00f      	b.n	800e446 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 fa6a 	bl	800e900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e42c:	e00b      	b.n	800e446 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fa66 	bl	800e900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e434:	e007      	b.n	800e446 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 fa62 	bl	800e900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e444:	e23b      	b.n	800e8be <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e446:	bf00      	nop
    return;
 800e448:	e239      	b.n	800e8be <HAL_UART_IRQHandler+0x722>
 800e44a:	bf00      	nop
 800e44c:	10000001 	.word	0x10000001
 800e450:	04000120 	.word	0x04000120
 800e454:	0800fe9d 	.word	0x0800fe9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	f040 81ce 	bne.w	800e7fe <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e466:	f003 0310 	and.w	r3, r3, #16
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 81c7 	beq.w	800e7fe <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e474:	f003 0310 	and.w	r3, r3, #16
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f000 81c0 	beq.w	800e7fe <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2210      	movs	r2, #16
 800e484:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	689b      	ldr	r3, [r3, #8]
 800e48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e490:	2b40      	cmp	r3, #64	; 0x40
 800e492:	f040 813b 	bne.w	800e70c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a8b      	ldr	r2, [pc, #556]	; (800e6cc <HAL_UART_IRQHandler+0x530>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d059      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4a89      	ldr	r2, [pc, #548]	; (800e6d0 <HAL_UART_IRQHandler+0x534>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d053      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4a87      	ldr	r2, [pc, #540]	; (800e6d4 <HAL_UART_IRQHandler+0x538>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d04d      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a85      	ldr	r2, [pc, #532]	; (800e6d8 <HAL_UART_IRQHandler+0x53c>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d047      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a83      	ldr	r2, [pc, #524]	; (800e6dc <HAL_UART_IRQHandler+0x540>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d041      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a81      	ldr	r2, [pc, #516]	; (800e6e0 <HAL_UART_IRQHandler+0x544>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d03b      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a7f      	ldr	r2, [pc, #508]	; (800e6e4 <HAL_UART_IRQHandler+0x548>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d035      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4a7d      	ldr	r2, [pc, #500]	; (800e6e8 <HAL_UART_IRQHandler+0x54c>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d02f      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a7b      	ldr	r2, [pc, #492]	; (800e6ec <HAL_UART_IRQHandler+0x550>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d029      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a79      	ldr	r2, [pc, #484]	; (800e6f0 <HAL_UART_IRQHandler+0x554>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d023      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a77      	ldr	r2, [pc, #476]	; (800e6f4 <HAL_UART_IRQHandler+0x558>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d01d      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a75      	ldr	r2, [pc, #468]	; (800e6f8 <HAL_UART_IRQHandler+0x55c>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d017      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a73      	ldr	r2, [pc, #460]	; (800e6fc <HAL_UART_IRQHandler+0x560>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d011      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a71      	ldr	r2, [pc, #452]	; (800e700 <HAL_UART_IRQHandler+0x564>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d00b      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a6f      	ldr	r2, [pc, #444]	; (800e704 <HAL_UART_IRQHandler+0x568>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d005      	beq.n	800e556 <HAL_UART_IRQHandler+0x3ba>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a6d      	ldr	r2, [pc, #436]	; (800e708 <HAL_UART_IRQHandler+0x56c>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d105      	bne.n	800e562 <HAL_UART_IRQHandler+0x3c6>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	e004      	b.n	800e56c <HAL_UART_IRQHandler+0x3d0>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 81a4 	beq.w	800e8c2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e580:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e584:	429a      	cmp	r2, r3
 800e586:	f080 819c 	bcs.w	800e8c2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e590:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e598:	69db      	ldr	r3, [r3, #28]
 800e59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e59e:	f000 8086 	beq.w	800e6ae <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e5ae:	e853 3f00 	ldrex	r3, [r3]
 800e5b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e5b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e5ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e5cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e5d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e5d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e5dc:	e841 2300 	strex	r3, r2, [r1]
 800e5e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e5e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1da      	bne.n	800e5a2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3308      	adds	r3, #8
 800e5f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5f6:	e853 3f00 	ldrex	r3, [r3]
 800e5fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e5fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5fe:	f023 0301 	bic.w	r3, r3, #1
 800e602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3308      	adds	r3, #8
 800e60c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e610:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e614:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e616:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e618:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e61c:	e841 2300 	strex	r3, r2, [r1]
 800e620:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1e1      	bne.n	800e5ec <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	3308      	adds	r3, #8
 800e62e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e632:	e853 3f00 	ldrex	r3, [r3]
 800e636:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e63a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e63e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3308      	adds	r3, #8
 800e648:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e64c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e64e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e650:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e652:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e654:	e841 2300 	strex	r3, r2, [r1]
 800e658:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e65a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1e3      	bne.n	800e628 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2220      	movs	r2, #32
 800e664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e676:	e853 3f00 	ldrex	r3, [r3]
 800e67a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e67c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e67e:	f023 0310 	bic.w	r3, r3, #16
 800e682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e690:	65bb      	str	r3, [r7, #88]	; 0x58
 800e692:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e698:	e841 2300 	strex	r3, r2, [r1]
 800e69c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1e4      	bne.n	800e66e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7f9 f983 	bl	80079b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f926 	bl	800e914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6c8:	e0fb      	b.n	800e8c2 <HAL_UART_IRQHandler+0x726>
 800e6ca:	bf00      	nop
 800e6cc:	40020010 	.word	0x40020010
 800e6d0:	40020028 	.word	0x40020028
 800e6d4:	40020040 	.word	0x40020040
 800e6d8:	40020058 	.word	0x40020058
 800e6dc:	40020070 	.word	0x40020070
 800e6e0:	40020088 	.word	0x40020088
 800e6e4:	400200a0 	.word	0x400200a0
 800e6e8:	400200b8 	.word	0x400200b8
 800e6ec:	40020410 	.word	0x40020410
 800e6f0:	40020428 	.word	0x40020428
 800e6f4:	40020440 	.word	0x40020440
 800e6f8:	40020458 	.word	0x40020458
 800e6fc:	40020470 	.word	0x40020470
 800e700:	40020488 	.word	0x40020488
 800e704:	400204a0 	.word	0x400204a0
 800e708:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e718:	b29b      	uxth	r3, r3
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e726:	b29b      	uxth	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f000 80cc 	beq.w	800e8c6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e72e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 80c7 	beq.w	800e8c6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	e853 3f00 	ldrex	r3, [r3]
 800e744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e74c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	461a      	mov	r2, r3
 800e756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e75a:	647b      	str	r3, [r7, #68]	; 0x44
 800e75c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e762:	e841 2300 	strex	r3, r2, [r1]
 800e766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1e4      	bne.n	800e738 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	3308      	adds	r3, #8
 800e774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	e853 3f00 	ldrex	r3, [r3]
 800e77c:	623b      	str	r3, [r7, #32]
   return(result);
 800e77e:	6a3a      	ldr	r2, [r7, #32]
 800e780:	4b54      	ldr	r3, [pc, #336]	; (800e8d4 <HAL_UART_IRQHandler+0x738>)
 800e782:	4013      	ands	r3, r2
 800e784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3308      	adds	r3, #8
 800e78e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e792:	633a      	str	r2, [r7, #48]	; 0x30
 800e794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e79a:	e841 2300 	strex	r3, r2, [r1]
 800e79e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1e3      	bne.n	800e76e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	e853 3f00 	ldrex	r3, [r3]
 800e7c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f023 0310 	bic.w	r3, r3, #16
 800e7ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e7dc:	61fb      	str	r3, [r7, #28]
 800e7de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e0:	69b9      	ldr	r1, [r7, #24]
 800e7e2:	69fa      	ldr	r2, [r7, #28]
 800e7e4:	e841 2300 	strex	r3, r2, [r1]
 800e7e8:	617b      	str	r3, [r7, #20]
   return(result);
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d1e4      	bne.n	800e7ba <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e7f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 f88c 	bl	800e914 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7fc:	e063      	b.n	800e8c6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00e      	beq.n	800e828 <HAL_UART_IRQHandler+0x68c>
 800e80a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e80e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e812:	2b00      	cmp	r3, #0
 800e814:	d008      	beq.n	800e828 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e81e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f001 fb7c 	bl	800ff1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e826:	e051      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e830:	2b00      	cmp	r3, #0
 800e832:	d014      	beq.n	800e85e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d105      	bne.n	800e84c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d008      	beq.n	800e85e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e850:	2b00      	cmp	r3, #0
 800e852:	d03a      	beq.n	800e8ca <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	4798      	blx	r3
    }
    return;
 800e85c:	e035      	b.n	800e8ca <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e866:	2b00      	cmp	r3, #0
 800e868:	d009      	beq.n	800e87e <HAL_UART_IRQHandler+0x6e2>
 800e86a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e872:	2b00      	cmp	r3, #0
 800e874:	d003      	beq.n	800e87e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f001 fb26 	bl	800fec8 <UART_EndTransmit_IT>
    return;
 800e87c:	e026      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e886:	2b00      	cmp	r3, #0
 800e888:	d009      	beq.n	800e89e <HAL_UART_IRQHandler+0x702>
 800e88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e88e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f001 fb55 	bl	800ff46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e89c:	e016      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d010      	beq.n	800e8cc <HAL_UART_IRQHandler+0x730>
 800e8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	da0c      	bge.n	800e8cc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f001 fb3d 	bl	800ff32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8b8:	e008      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
      return;
 800e8ba:	bf00      	nop
 800e8bc:	e006      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
    return;
 800e8be:	bf00      	nop
 800e8c0:	e004      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
      return;
 800e8c2:	bf00      	nop
 800e8c4:	e002      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
      return;
 800e8c6:	bf00      	nop
 800e8c8:	e000      	b.n	800e8cc <HAL_UART_IRQHandler+0x730>
    return;
 800e8ca:	bf00      	nop
  }
}
 800e8cc:	37e8      	adds	r7, #232	; 0xe8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	effffffe 	.word	0xeffffffe

0800e8d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	460b      	mov	r3, r1
 800e91e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e930:	b092      	sub	sp, #72	; 0x48
 800e932:	af00      	add	r7, sp, #0
 800e934:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e936:	2300      	movs	r3, #0
 800e938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	689a      	ldr	r2, [r3, #8]
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	431a      	orrs	r2, r3
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	695b      	ldr	r3, [r3, #20]
 800e94a:	431a      	orrs	r2, r3
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	69db      	ldr	r3, [r3, #28]
 800e950:	4313      	orrs	r3, r2
 800e952:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	4bbe      	ldr	r3, [pc, #760]	; (800ec54 <UART_SetConfig+0x328>)
 800e95c:	4013      	ands	r3, r2
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	6812      	ldr	r2, [r2, #0]
 800e962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e964:	430b      	orrs	r3, r1
 800e966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	68da      	ldr	r2, [r3, #12]
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	430a      	orrs	r2, r1
 800e97c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	699b      	ldr	r3, [r3, #24]
 800e982:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4ab3      	ldr	r2, [pc, #716]	; (800ec58 <UART_SetConfig+0x32c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d004      	beq.n	800e998 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e994:	4313      	orrs	r3, r2
 800e996:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	689a      	ldr	r2, [r3, #8]
 800e99e:	4baf      	ldr	r3, [pc, #700]	; (800ec5c <UART_SetConfig+0x330>)
 800e9a0:	4013      	ands	r3, r2
 800e9a2:	697a      	ldr	r2, [r7, #20]
 800e9a4:	6812      	ldr	r2, [r2, #0]
 800e9a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9a8:	430b      	orrs	r3, r1
 800e9aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b2:	f023 010f 	bic.w	r1, r3, #15
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	430a      	orrs	r2, r1
 800e9c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4aa6      	ldr	r2, [pc, #664]	; (800ec60 <UART_SetConfig+0x334>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d177      	bne.n	800eabc <UART_SetConfig+0x190>
 800e9cc:	4ba5      	ldr	r3, [pc, #660]	; (800ec64 <UART_SetConfig+0x338>)
 800e9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e9d4:	2b28      	cmp	r3, #40	; 0x28
 800e9d6:	d86d      	bhi.n	800eab4 <UART_SetConfig+0x188>
 800e9d8:	a201      	add	r2, pc, #4	; (adr r2, 800e9e0 <UART_SetConfig+0xb4>)
 800e9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9de:	bf00      	nop
 800e9e0:	0800ea85 	.word	0x0800ea85
 800e9e4:	0800eab5 	.word	0x0800eab5
 800e9e8:	0800eab5 	.word	0x0800eab5
 800e9ec:	0800eab5 	.word	0x0800eab5
 800e9f0:	0800eab5 	.word	0x0800eab5
 800e9f4:	0800eab5 	.word	0x0800eab5
 800e9f8:	0800eab5 	.word	0x0800eab5
 800e9fc:	0800eab5 	.word	0x0800eab5
 800ea00:	0800ea8d 	.word	0x0800ea8d
 800ea04:	0800eab5 	.word	0x0800eab5
 800ea08:	0800eab5 	.word	0x0800eab5
 800ea0c:	0800eab5 	.word	0x0800eab5
 800ea10:	0800eab5 	.word	0x0800eab5
 800ea14:	0800eab5 	.word	0x0800eab5
 800ea18:	0800eab5 	.word	0x0800eab5
 800ea1c:	0800eab5 	.word	0x0800eab5
 800ea20:	0800ea95 	.word	0x0800ea95
 800ea24:	0800eab5 	.word	0x0800eab5
 800ea28:	0800eab5 	.word	0x0800eab5
 800ea2c:	0800eab5 	.word	0x0800eab5
 800ea30:	0800eab5 	.word	0x0800eab5
 800ea34:	0800eab5 	.word	0x0800eab5
 800ea38:	0800eab5 	.word	0x0800eab5
 800ea3c:	0800eab5 	.word	0x0800eab5
 800ea40:	0800ea9d 	.word	0x0800ea9d
 800ea44:	0800eab5 	.word	0x0800eab5
 800ea48:	0800eab5 	.word	0x0800eab5
 800ea4c:	0800eab5 	.word	0x0800eab5
 800ea50:	0800eab5 	.word	0x0800eab5
 800ea54:	0800eab5 	.word	0x0800eab5
 800ea58:	0800eab5 	.word	0x0800eab5
 800ea5c:	0800eab5 	.word	0x0800eab5
 800ea60:	0800eaa5 	.word	0x0800eaa5
 800ea64:	0800eab5 	.word	0x0800eab5
 800ea68:	0800eab5 	.word	0x0800eab5
 800ea6c:	0800eab5 	.word	0x0800eab5
 800ea70:	0800eab5 	.word	0x0800eab5
 800ea74:	0800eab5 	.word	0x0800eab5
 800ea78:	0800eab5 	.word	0x0800eab5
 800ea7c:	0800eab5 	.word	0x0800eab5
 800ea80:	0800eaad 	.word	0x0800eaad
 800ea84:	2301      	movs	r3, #1
 800ea86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea8a:	e326      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea92:	e322      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ea94:	2308      	movs	r3, #8
 800ea96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea9a:	e31e      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ea9c:	2310      	movs	r3, #16
 800ea9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaa2:	e31a      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eaa4:	2320      	movs	r3, #32
 800eaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaaa:	e316      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eaac:	2340      	movs	r3, #64	; 0x40
 800eaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab2:	e312      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eab4:	2380      	movs	r3, #128	; 0x80
 800eab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaba:	e30e      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a69      	ldr	r2, [pc, #420]	; (800ec68 <UART_SetConfig+0x33c>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d130      	bne.n	800eb28 <UART_SetConfig+0x1fc>
 800eac6:	4b67      	ldr	r3, [pc, #412]	; (800ec64 <UART_SetConfig+0x338>)
 800eac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaca:	f003 0307 	and.w	r3, r3, #7
 800eace:	2b05      	cmp	r3, #5
 800ead0:	d826      	bhi.n	800eb20 <UART_SetConfig+0x1f4>
 800ead2:	a201      	add	r2, pc, #4	; (adr r2, 800ead8 <UART_SetConfig+0x1ac>)
 800ead4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead8:	0800eaf1 	.word	0x0800eaf1
 800eadc:	0800eaf9 	.word	0x0800eaf9
 800eae0:	0800eb01 	.word	0x0800eb01
 800eae4:	0800eb09 	.word	0x0800eb09
 800eae8:	0800eb11 	.word	0x0800eb11
 800eaec:	0800eb19 	.word	0x0800eb19
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eaf6:	e2f0      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eaf8:	2304      	movs	r3, #4
 800eafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eafe:	e2ec      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb00:	2308      	movs	r3, #8
 800eb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb06:	e2e8      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb08:	2310      	movs	r3, #16
 800eb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb0e:	e2e4      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb10:	2320      	movs	r3, #32
 800eb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb16:	e2e0      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb18:	2340      	movs	r3, #64	; 0x40
 800eb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb1e:	e2dc      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb20:	2380      	movs	r3, #128	; 0x80
 800eb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb26:	e2d8      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a4f      	ldr	r2, [pc, #316]	; (800ec6c <UART_SetConfig+0x340>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d130      	bne.n	800eb94 <UART_SetConfig+0x268>
 800eb32:	4b4c      	ldr	r3, [pc, #304]	; (800ec64 <UART_SetConfig+0x338>)
 800eb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb36:	f003 0307 	and.w	r3, r3, #7
 800eb3a:	2b05      	cmp	r3, #5
 800eb3c:	d826      	bhi.n	800eb8c <UART_SetConfig+0x260>
 800eb3e:	a201      	add	r2, pc, #4	; (adr r2, 800eb44 <UART_SetConfig+0x218>)
 800eb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb44:	0800eb5d 	.word	0x0800eb5d
 800eb48:	0800eb65 	.word	0x0800eb65
 800eb4c:	0800eb6d 	.word	0x0800eb6d
 800eb50:	0800eb75 	.word	0x0800eb75
 800eb54:	0800eb7d 	.word	0x0800eb7d
 800eb58:	0800eb85 	.word	0x0800eb85
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e2ba      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb64:	2304      	movs	r3, #4
 800eb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb6a:	e2b6      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb6c:	2308      	movs	r3, #8
 800eb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb72:	e2b2      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb74:	2310      	movs	r3, #16
 800eb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb7a:	e2ae      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb7c:	2320      	movs	r3, #32
 800eb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb82:	e2aa      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb84:	2340      	movs	r3, #64	; 0x40
 800eb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8a:	e2a6      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb8c:	2380      	movs	r3, #128	; 0x80
 800eb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb92:	e2a2      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a35      	ldr	r2, [pc, #212]	; (800ec70 <UART_SetConfig+0x344>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d130      	bne.n	800ec00 <UART_SetConfig+0x2d4>
 800eb9e:	4b31      	ldr	r3, [pc, #196]	; (800ec64 <UART_SetConfig+0x338>)
 800eba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eba2:	f003 0307 	and.w	r3, r3, #7
 800eba6:	2b05      	cmp	r3, #5
 800eba8:	d826      	bhi.n	800ebf8 <UART_SetConfig+0x2cc>
 800ebaa:	a201      	add	r2, pc, #4	; (adr r2, 800ebb0 <UART_SetConfig+0x284>)
 800ebac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb0:	0800ebc9 	.word	0x0800ebc9
 800ebb4:	0800ebd1 	.word	0x0800ebd1
 800ebb8:	0800ebd9 	.word	0x0800ebd9
 800ebbc:	0800ebe1 	.word	0x0800ebe1
 800ebc0:	0800ebe9 	.word	0x0800ebe9
 800ebc4:	0800ebf1 	.word	0x0800ebf1
 800ebc8:	2300      	movs	r3, #0
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e284      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ebd0:	2304      	movs	r3, #4
 800ebd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebd6:	e280      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ebd8:	2308      	movs	r3, #8
 800ebda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebde:	e27c      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ebe0:	2310      	movs	r3, #16
 800ebe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebe6:	e278      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ebe8:	2320      	movs	r3, #32
 800ebea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebee:	e274      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ebf0:	2340      	movs	r3, #64	; 0x40
 800ebf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebf6:	e270      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ebf8:	2380      	movs	r3, #128	; 0x80
 800ebfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfe:	e26c      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a1b      	ldr	r2, [pc, #108]	; (800ec74 <UART_SetConfig+0x348>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d142      	bne.n	800ec90 <UART_SetConfig+0x364>
 800ec0a:	4b16      	ldr	r3, [pc, #88]	; (800ec64 <UART_SetConfig+0x338>)
 800ec0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec0e:	f003 0307 	and.w	r3, r3, #7
 800ec12:	2b05      	cmp	r3, #5
 800ec14:	d838      	bhi.n	800ec88 <UART_SetConfig+0x35c>
 800ec16:	a201      	add	r2, pc, #4	; (adr r2, 800ec1c <UART_SetConfig+0x2f0>)
 800ec18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec1c:	0800ec35 	.word	0x0800ec35
 800ec20:	0800ec3d 	.word	0x0800ec3d
 800ec24:	0800ec45 	.word	0x0800ec45
 800ec28:	0800ec4d 	.word	0x0800ec4d
 800ec2c:	0800ec79 	.word	0x0800ec79
 800ec30:	0800ec81 	.word	0x0800ec81
 800ec34:	2300      	movs	r3, #0
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e24e      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec3c:	2304      	movs	r3, #4
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e24a      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec44:	2308      	movs	r3, #8
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e246      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec4c:	2310      	movs	r3, #16
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec52:	e242      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec54:	cfff69f3 	.word	0xcfff69f3
 800ec58:	58000c00 	.word	0x58000c00
 800ec5c:	11fff4ff 	.word	0x11fff4ff
 800ec60:	40011000 	.word	0x40011000
 800ec64:	58024400 	.word	0x58024400
 800ec68:	40004400 	.word	0x40004400
 800ec6c:	40004800 	.word	0x40004800
 800ec70:	40004c00 	.word	0x40004c00
 800ec74:	40005000 	.word	0x40005000
 800ec78:	2320      	movs	r3, #32
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec7e:	e22c      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec80:	2340      	movs	r3, #64	; 0x40
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec86:	e228      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec88:	2380      	movs	r3, #128	; 0x80
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8e:	e224      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4ab1      	ldr	r2, [pc, #708]	; (800ef5c <UART_SetConfig+0x630>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d176      	bne.n	800ed88 <UART_SetConfig+0x45c>
 800ec9a:	4bb1      	ldr	r3, [pc, #708]	; (800ef60 <UART_SetConfig+0x634>)
 800ec9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eca2:	2b28      	cmp	r3, #40	; 0x28
 800eca4:	d86c      	bhi.n	800ed80 <UART_SetConfig+0x454>
 800eca6:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <UART_SetConfig+0x380>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ed51 	.word	0x0800ed51
 800ecb0:	0800ed81 	.word	0x0800ed81
 800ecb4:	0800ed81 	.word	0x0800ed81
 800ecb8:	0800ed81 	.word	0x0800ed81
 800ecbc:	0800ed81 	.word	0x0800ed81
 800ecc0:	0800ed81 	.word	0x0800ed81
 800ecc4:	0800ed81 	.word	0x0800ed81
 800ecc8:	0800ed81 	.word	0x0800ed81
 800eccc:	0800ed59 	.word	0x0800ed59
 800ecd0:	0800ed81 	.word	0x0800ed81
 800ecd4:	0800ed81 	.word	0x0800ed81
 800ecd8:	0800ed81 	.word	0x0800ed81
 800ecdc:	0800ed81 	.word	0x0800ed81
 800ece0:	0800ed81 	.word	0x0800ed81
 800ece4:	0800ed81 	.word	0x0800ed81
 800ece8:	0800ed81 	.word	0x0800ed81
 800ecec:	0800ed61 	.word	0x0800ed61
 800ecf0:	0800ed81 	.word	0x0800ed81
 800ecf4:	0800ed81 	.word	0x0800ed81
 800ecf8:	0800ed81 	.word	0x0800ed81
 800ecfc:	0800ed81 	.word	0x0800ed81
 800ed00:	0800ed81 	.word	0x0800ed81
 800ed04:	0800ed81 	.word	0x0800ed81
 800ed08:	0800ed81 	.word	0x0800ed81
 800ed0c:	0800ed69 	.word	0x0800ed69
 800ed10:	0800ed81 	.word	0x0800ed81
 800ed14:	0800ed81 	.word	0x0800ed81
 800ed18:	0800ed81 	.word	0x0800ed81
 800ed1c:	0800ed81 	.word	0x0800ed81
 800ed20:	0800ed81 	.word	0x0800ed81
 800ed24:	0800ed81 	.word	0x0800ed81
 800ed28:	0800ed81 	.word	0x0800ed81
 800ed2c:	0800ed71 	.word	0x0800ed71
 800ed30:	0800ed81 	.word	0x0800ed81
 800ed34:	0800ed81 	.word	0x0800ed81
 800ed38:	0800ed81 	.word	0x0800ed81
 800ed3c:	0800ed81 	.word	0x0800ed81
 800ed40:	0800ed81 	.word	0x0800ed81
 800ed44:	0800ed81 	.word	0x0800ed81
 800ed48:	0800ed81 	.word	0x0800ed81
 800ed4c:	0800ed79 	.word	0x0800ed79
 800ed50:	2301      	movs	r3, #1
 800ed52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed56:	e1c0      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ed58:	2304      	movs	r3, #4
 800ed5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed5e:	e1bc      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ed60:	2308      	movs	r3, #8
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed66:	e1b8      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ed68:	2310      	movs	r3, #16
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6e:	e1b4      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ed70:	2320      	movs	r3, #32
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed76:	e1b0      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ed78:	2340      	movs	r3, #64	; 0x40
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7e:	e1ac      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ed80:	2380      	movs	r3, #128	; 0x80
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed86:	e1a8      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a75      	ldr	r2, [pc, #468]	; (800ef64 <UART_SetConfig+0x638>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d130      	bne.n	800edf4 <UART_SetConfig+0x4c8>
 800ed92:	4b73      	ldr	r3, [pc, #460]	; (800ef60 <UART_SetConfig+0x634>)
 800ed94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed96:	f003 0307 	and.w	r3, r3, #7
 800ed9a:	2b05      	cmp	r3, #5
 800ed9c:	d826      	bhi.n	800edec <UART_SetConfig+0x4c0>
 800ed9e:	a201      	add	r2, pc, #4	; (adr r2, 800eda4 <UART_SetConfig+0x478>)
 800eda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda4:	0800edbd 	.word	0x0800edbd
 800eda8:	0800edc5 	.word	0x0800edc5
 800edac:	0800edcd 	.word	0x0800edcd
 800edb0:	0800edd5 	.word	0x0800edd5
 800edb4:	0800eddd 	.word	0x0800eddd
 800edb8:	0800ede5 	.word	0x0800ede5
 800edbc:	2300      	movs	r3, #0
 800edbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edc2:	e18a      	b.n	800f0da <UART_SetConfig+0x7ae>
 800edc4:	2304      	movs	r3, #4
 800edc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edca:	e186      	b.n	800f0da <UART_SetConfig+0x7ae>
 800edcc:	2308      	movs	r3, #8
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd2:	e182      	b.n	800f0da <UART_SetConfig+0x7ae>
 800edd4:	2310      	movs	r3, #16
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edda:	e17e      	b.n	800f0da <UART_SetConfig+0x7ae>
 800eddc:	2320      	movs	r3, #32
 800edde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede2:	e17a      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ede4:	2340      	movs	r3, #64	; 0x40
 800ede6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edea:	e176      	b.n	800f0da <UART_SetConfig+0x7ae>
 800edec:	2380      	movs	r3, #128	; 0x80
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf2:	e172      	b.n	800f0da <UART_SetConfig+0x7ae>
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a5b      	ldr	r2, [pc, #364]	; (800ef68 <UART_SetConfig+0x63c>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d130      	bne.n	800ee60 <UART_SetConfig+0x534>
 800edfe:	4b58      	ldr	r3, [pc, #352]	; (800ef60 <UART_SetConfig+0x634>)
 800ee00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee02:	f003 0307 	and.w	r3, r3, #7
 800ee06:	2b05      	cmp	r3, #5
 800ee08:	d826      	bhi.n	800ee58 <UART_SetConfig+0x52c>
 800ee0a:	a201      	add	r2, pc, #4	; (adr r2, 800ee10 <UART_SetConfig+0x4e4>)
 800ee0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee10:	0800ee29 	.word	0x0800ee29
 800ee14:	0800ee31 	.word	0x0800ee31
 800ee18:	0800ee39 	.word	0x0800ee39
 800ee1c:	0800ee41 	.word	0x0800ee41
 800ee20:	0800ee49 	.word	0x0800ee49
 800ee24:	0800ee51 	.word	0x0800ee51
 800ee28:	2300      	movs	r3, #0
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2e:	e154      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ee30:	2304      	movs	r3, #4
 800ee32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee36:	e150      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ee38:	2308      	movs	r3, #8
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3e:	e14c      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ee40:	2310      	movs	r3, #16
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee46:	e148      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ee48:	2320      	movs	r3, #32
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4e:	e144      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ee50:	2340      	movs	r3, #64	; 0x40
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee56:	e140      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ee58:	2380      	movs	r3, #128	; 0x80
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5e:	e13c      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4a41      	ldr	r2, [pc, #260]	; (800ef6c <UART_SetConfig+0x640>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	f040 8082 	bne.w	800ef70 <UART_SetConfig+0x644>
 800ee6c:	4b3c      	ldr	r3, [pc, #240]	; (800ef60 <UART_SetConfig+0x634>)
 800ee6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee74:	2b28      	cmp	r3, #40	; 0x28
 800ee76:	d86d      	bhi.n	800ef54 <UART_SetConfig+0x628>
 800ee78:	a201      	add	r2, pc, #4	; (adr r2, 800ee80 <UART_SetConfig+0x554>)
 800ee7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7e:	bf00      	nop
 800ee80:	0800ef25 	.word	0x0800ef25
 800ee84:	0800ef55 	.word	0x0800ef55
 800ee88:	0800ef55 	.word	0x0800ef55
 800ee8c:	0800ef55 	.word	0x0800ef55
 800ee90:	0800ef55 	.word	0x0800ef55
 800ee94:	0800ef55 	.word	0x0800ef55
 800ee98:	0800ef55 	.word	0x0800ef55
 800ee9c:	0800ef55 	.word	0x0800ef55
 800eea0:	0800ef2d 	.word	0x0800ef2d
 800eea4:	0800ef55 	.word	0x0800ef55
 800eea8:	0800ef55 	.word	0x0800ef55
 800eeac:	0800ef55 	.word	0x0800ef55
 800eeb0:	0800ef55 	.word	0x0800ef55
 800eeb4:	0800ef55 	.word	0x0800ef55
 800eeb8:	0800ef55 	.word	0x0800ef55
 800eebc:	0800ef55 	.word	0x0800ef55
 800eec0:	0800ef35 	.word	0x0800ef35
 800eec4:	0800ef55 	.word	0x0800ef55
 800eec8:	0800ef55 	.word	0x0800ef55
 800eecc:	0800ef55 	.word	0x0800ef55
 800eed0:	0800ef55 	.word	0x0800ef55
 800eed4:	0800ef55 	.word	0x0800ef55
 800eed8:	0800ef55 	.word	0x0800ef55
 800eedc:	0800ef55 	.word	0x0800ef55
 800eee0:	0800ef3d 	.word	0x0800ef3d
 800eee4:	0800ef55 	.word	0x0800ef55
 800eee8:	0800ef55 	.word	0x0800ef55
 800eeec:	0800ef55 	.word	0x0800ef55
 800eef0:	0800ef55 	.word	0x0800ef55
 800eef4:	0800ef55 	.word	0x0800ef55
 800eef8:	0800ef55 	.word	0x0800ef55
 800eefc:	0800ef55 	.word	0x0800ef55
 800ef00:	0800ef45 	.word	0x0800ef45
 800ef04:	0800ef55 	.word	0x0800ef55
 800ef08:	0800ef55 	.word	0x0800ef55
 800ef0c:	0800ef55 	.word	0x0800ef55
 800ef10:	0800ef55 	.word	0x0800ef55
 800ef14:	0800ef55 	.word	0x0800ef55
 800ef18:	0800ef55 	.word	0x0800ef55
 800ef1c:	0800ef55 	.word	0x0800ef55
 800ef20:	0800ef4d 	.word	0x0800ef4d
 800ef24:	2301      	movs	r3, #1
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef2a:	e0d6      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ef2c:	2304      	movs	r3, #4
 800ef2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef32:	e0d2      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ef34:	2308      	movs	r3, #8
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef3a:	e0ce      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ef3c:	2310      	movs	r3, #16
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef42:	e0ca      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ef44:	2320      	movs	r3, #32
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef4a:	e0c6      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ef4c:	2340      	movs	r3, #64	; 0x40
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef52:	e0c2      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ef54:	2380      	movs	r3, #128	; 0x80
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5a:	e0be      	b.n	800f0da <UART_SetConfig+0x7ae>
 800ef5c:	40011400 	.word	0x40011400
 800ef60:	58024400 	.word	0x58024400
 800ef64:	40007800 	.word	0x40007800
 800ef68:	40007c00 	.word	0x40007c00
 800ef6c:	40011800 	.word	0x40011800
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4aad      	ldr	r2, [pc, #692]	; (800f22c <UART_SetConfig+0x900>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d176      	bne.n	800f068 <UART_SetConfig+0x73c>
 800ef7a:	4bad      	ldr	r3, [pc, #692]	; (800f230 <UART_SetConfig+0x904>)
 800ef7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef82:	2b28      	cmp	r3, #40	; 0x28
 800ef84:	d86c      	bhi.n	800f060 <UART_SetConfig+0x734>
 800ef86:	a201      	add	r2, pc, #4	; (adr r2, 800ef8c <UART_SetConfig+0x660>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800f031 	.word	0x0800f031
 800ef90:	0800f061 	.word	0x0800f061
 800ef94:	0800f061 	.word	0x0800f061
 800ef98:	0800f061 	.word	0x0800f061
 800ef9c:	0800f061 	.word	0x0800f061
 800efa0:	0800f061 	.word	0x0800f061
 800efa4:	0800f061 	.word	0x0800f061
 800efa8:	0800f061 	.word	0x0800f061
 800efac:	0800f039 	.word	0x0800f039
 800efb0:	0800f061 	.word	0x0800f061
 800efb4:	0800f061 	.word	0x0800f061
 800efb8:	0800f061 	.word	0x0800f061
 800efbc:	0800f061 	.word	0x0800f061
 800efc0:	0800f061 	.word	0x0800f061
 800efc4:	0800f061 	.word	0x0800f061
 800efc8:	0800f061 	.word	0x0800f061
 800efcc:	0800f041 	.word	0x0800f041
 800efd0:	0800f061 	.word	0x0800f061
 800efd4:	0800f061 	.word	0x0800f061
 800efd8:	0800f061 	.word	0x0800f061
 800efdc:	0800f061 	.word	0x0800f061
 800efe0:	0800f061 	.word	0x0800f061
 800efe4:	0800f061 	.word	0x0800f061
 800efe8:	0800f061 	.word	0x0800f061
 800efec:	0800f049 	.word	0x0800f049
 800eff0:	0800f061 	.word	0x0800f061
 800eff4:	0800f061 	.word	0x0800f061
 800eff8:	0800f061 	.word	0x0800f061
 800effc:	0800f061 	.word	0x0800f061
 800f000:	0800f061 	.word	0x0800f061
 800f004:	0800f061 	.word	0x0800f061
 800f008:	0800f061 	.word	0x0800f061
 800f00c:	0800f051 	.word	0x0800f051
 800f010:	0800f061 	.word	0x0800f061
 800f014:	0800f061 	.word	0x0800f061
 800f018:	0800f061 	.word	0x0800f061
 800f01c:	0800f061 	.word	0x0800f061
 800f020:	0800f061 	.word	0x0800f061
 800f024:	0800f061 	.word	0x0800f061
 800f028:	0800f061 	.word	0x0800f061
 800f02c:	0800f059 	.word	0x0800f059
 800f030:	2301      	movs	r3, #1
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f036:	e050      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f038:	2304      	movs	r3, #4
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e04c      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f040:	2308      	movs	r3, #8
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e048      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f048:	2310      	movs	r3, #16
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e044      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f050:	2320      	movs	r3, #32
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e040      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f058:	2340      	movs	r3, #64	; 0x40
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05e:	e03c      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f060:	2380      	movs	r3, #128	; 0x80
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f066:	e038      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a71      	ldr	r2, [pc, #452]	; (800f234 <UART_SetConfig+0x908>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d130      	bne.n	800f0d4 <UART_SetConfig+0x7a8>
 800f072:	4b6f      	ldr	r3, [pc, #444]	; (800f230 <UART_SetConfig+0x904>)
 800f074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f076:	f003 0307 	and.w	r3, r3, #7
 800f07a:	2b05      	cmp	r3, #5
 800f07c:	d826      	bhi.n	800f0cc <UART_SetConfig+0x7a0>
 800f07e:	a201      	add	r2, pc, #4	; (adr r2, 800f084 <UART_SetConfig+0x758>)
 800f080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f084:	0800f09d 	.word	0x0800f09d
 800f088:	0800f0a5 	.word	0x0800f0a5
 800f08c:	0800f0ad 	.word	0x0800f0ad
 800f090:	0800f0b5 	.word	0x0800f0b5
 800f094:	0800f0bd 	.word	0x0800f0bd
 800f098:	0800f0c5 	.word	0x0800f0c5
 800f09c:	2302      	movs	r3, #2
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a2:	e01a      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f0a4:	2304      	movs	r3, #4
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0aa:	e016      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f0ac:	2308      	movs	r3, #8
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e012      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f0b4:	2310      	movs	r3, #16
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ba:	e00e      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f0bc:	2320      	movs	r3, #32
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c2:	e00a      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f0c4:	2340      	movs	r3, #64	; 0x40
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ca:	e006      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f0cc:	2380      	movs	r3, #128	; 0x80
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d2:	e002      	b.n	800f0da <UART_SetConfig+0x7ae>
 800f0d4:	2380      	movs	r3, #128	; 0x80
 800f0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4a55      	ldr	r2, [pc, #340]	; (800f234 <UART_SetConfig+0x908>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	f040 80f8 	bne.w	800f2d6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f0e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0ea:	2b20      	cmp	r3, #32
 800f0ec:	dc46      	bgt.n	800f17c <UART_SetConfig+0x850>
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	db75      	blt.n	800f1de <UART_SetConfig+0x8b2>
 800f0f2:	3b02      	subs	r3, #2
 800f0f4:	2b1e      	cmp	r3, #30
 800f0f6:	d872      	bhi.n	800f1de <UART_SetConfig+0x8b2>
 800f0f8:	a201      	add	r2, pc, #4	; (adr r2, 800f100 <UART_SetConfig+0x7d4>)
 800f0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fe:	bf00      	nop
 800f100:	0800f183 	.word	0x0800f183
 800f104:	0800f1df 	.word	0x0800f1df
 800f108:	0800f18b 	.word	0x0800f18b
 800f10c:	0800f1df 	.word	0x0800f1df
 800f110:	0800f1df 	.word	0x0800f1df
 800f114:	0800f1df 	.word	0x0800f1df
 800f118:	0800f19b 	.word	0x0800f19b
 800f11c:	0800f1df 	.word	0x0800f1df
 800f120:	0800f1df 	.word	0x0800f1df
 800f124:	0800f1df 	.word	0x0800f1df
 800f128:	0800f1df 	.word	0x0800f1df
 800f12c:	0800f1df 	.word	0x0800f1df
 800f130:	0800f1df 	.word	0x0800f1df
 800f134:	0800f1df 	.word	0x0800f1df
 800f138:	0800f1ab 	.word	0x0800f1ab
 800f13c:	0800f1df 	.word	0x0800f1df
 800f140:	0800f1df 	.word	0x0800f1df
 800f144:	0800f1df 	.word	0x0800f1df
 800f148:	0800f1df 	.word	0x0800f1df
 800f14c:	0800f1df 	.word	0x0800f1df
 800f150:	0800f1df 	.word	0x0800f1df
 800f154:	0800f1df 	.word	0x0800f1df
 800f158:	0800f1df 	.word	0x0800f1df
 800f15c:	0800f1df 	.word	0x0800f1df
 800f160:	0800f1df 	.word	0x0800f1df
 800f164:	0800f1df 	.word	0x0800f1df
 800f168:	0800f1df 	.word	0x0800f1df
 800f16c:	0800f1df 	.word	0x0800f1df
 800f170:	0800f1df 	.word	0x0800f1df
 800f174:	0800f1df 	.word	0x0800f1df
 800f178:	0800f1d1 	.word	0x0800f1d1
 800f17c:	2b40      	cmp	r3, #64	; 0x40
 800f17e:	d02a      	beq.n	800f1d6 <UART_SetConfig+0x8aa>
 800f180:	e02d      	b.n	800f1de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f182:	f7fc fcd5 	bl	800bb30 <HAL_RCCEx_GetD3PCLK1Freq>
 800f186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f188:	e02f      	b.n	800f1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f18a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fc fce4 	bl	800bb5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f198:	e027      	b.n	800f1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f19a:	f107 0318 	add.w	r3, r7, #24
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fc fe30 	bl	800be04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1a8:	e01f      	b.n	800f1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1aa:	4b21      	ldr	r3, [pc, #132]	; (800f230 <UART_SetConfig+0x904>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f003 0320 	and.w	r3, r3, #32
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d009      	beq.n	800f1ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1b6:	4b1e      	ldr	r3, [pc, #120]	; (800f230 <UART_SetConfig+0x904>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	08db      	lsrs	r3, r3, #3
 800f1bc:	f003 0303 	and.w	r3, r3, #3
 800f1c0:	4a1d      	ldr	r2, [pc, #116]	; (800f238 <UART_SetConfig+0x90c>)
 800f1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1c8:	e00f      	b.n	800f1ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f1ca:	4b1b      	ldr	r3, [pc, #108]	; (800f238 <UART_SetConfig+0x90c>)
 800f1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ce:	e00c      	b.n	800f1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1d0:	4b1a      	ldr	r3, [pc, #104]	; (800f23c <UART_SetConfig+0x910>)
 800f1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1d4:	e009      	b.n	800f1ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1dc:	e005      	b.n	800f1ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f000 81ee 	beq.w	800f5ce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f6:	4a12      	ldr	r2, [pc, #72]	; (800f240 <UART_SetConfig+0x914>)
 800f1f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f200:	fbb3 f3f2 	udiv	r3, r3, r2
 800f204:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	4613      	mov	r3, r2
 800f20c:	005b      	lsls	r3, r3, #1
 800f20e:	4413      	add	r3, r2
 800f210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f212:	429a      	cmp	r2, r3
 800f214:	d305      	bcc.n	800f222 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f21e:	429a      	cmp	r2, r3
 800f220:	d910      	bls.n	800f244 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f228:	e1d1      	b.n	800f5ce <UART_SetConfig+0xca2>
 800f22a:	bf00      	nop
 800f22c:	40011c00 	.word	0x40011c00
 800f230:	58024400 	.word	0x58024400
 800f234:	58000c00 	.word	0x58000c00
 800f238:	03d09000 	.word	0x03d09000
 800f23c:	003d0900 	.word	0x003d0900
 800f240:	080113a8 	.word	0x080113a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f246:	2200      	movs	r2, #0
 800f248:	60bb      	str	r3, [r7, #8]
 800f24a:	60fa      	str	r2, [r7, #12]
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f250:	4ac0      	ldr	r2, [pc, #768]	; (800f554 <UART_SetConfig+0xc28>)
 800f252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f256:	b29b      	uxth	r3, r3
 800f258:	2200      	movs	r2, #0
 800f25a:	603b      	str	r3, [r7, #0]
 800f25c:	607a      	str	r2, [r7, #4]
 800f25e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f266:	f7f1 f85b 	bl	8000320 <__aeabi_uldivmod>
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	4610      	mov	r0, r2
 800f270:	4619      	mov	r1, r3
 800f272:	f04f 0200 	mov.w	r2, #0
 800f276:	f04f 0300 	mov.w	r3, #0
 800f27a:	020b      	lsls	r3, r1, #8
 800f27c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f280:	0202      	lsls	r2, r0, #8
 800f282:	6979      	ldr	r1, [r7, #20]
 800f284:	6849      	ldr	r1, [r1, #4]
 800f286:	0849      	lsrs	r1, r1, #1
 800f288:	2000      	movs	r0, #0
 800f28a:	460c      	mov	r4, r1
 800f28c:	4605      	mov	r5, r0
 800f28e:	eb12 0804 	adds.w	r8, r2, r4
 800f292:	eb43 0905 	adc.w	r9, r3, r5
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	469a      	mov	sl, r3
 800f29e:	4693      	mov	fp, r2
 800f2a0:	4652      	mov	r2, sl
 800f2a2:	465b      	mov	r3, fp
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	4649      	mov	r1, r9
 800f2a8:	f7f1 f83a 	bl	8000320 <__aeabi_uldivmod>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f2ba:	d308      	bcc.n	800f2ce <UART_SetConfig+0x9a2>
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2c2:	d204      	bcs.n	800f2ce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2ca:	60da      	str	r2, [r3, #12]
 800f2cc:	e17f      	b.n	800f5ce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2d4:	e17b      	b.n	800f5ce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2de:	f040 80bd 	bne.w	800f45c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f2e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2e6:	2b20      	cmp	r3, #32
 800f2e8:	dc48      	bgt.n	800f37c <UART_SetConfig+0xa50>
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	db7b      	blt.n	800f3e6 <UART_SetConfig+0xaba>
 800f2ee:	2b20      	cmp	r3, #32
 800f2f0:	d879      	bhi.n	800f3e6 <UART_SetConfig+0xaba>
 800f2f2:	a201      	add	r2, pc, #4	; (adr r2, 800f2f8 <UART_SetConfig+0x9cc>)
 800f2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f8:	0800f383 	.word	0x0800f383
 800f2fc:	0800f38b 	.word	0x0800f38b
 800f300:	0800f3e7 	.word	0x0800f3e7
 800f304:	0800f3e7 	.word	0x0800f3e7
 800f308:	0800f393 	.word	0x0800f393
 800f30c:	0800f3e7 	.word	0x0800f3e7
 800f310:	0800f3e7 	.word	0x0800f3e7
 800f314:	0800f3e7 	.word	0x0800f3e7
 800f318:	0800f3a3 	.word	0x0800f3a3
 800f31c:	0800f3e7 	.word	0x0800f3e7
 800f320:	0800f3e7 	.word	0x0800f3e7
 800f324:	0800f3e7 	.word	0x0800f3e7
 800f328:	0800f3e7 	.word	0x0800f3e7
 800f32c:	0800f3e7 	.word	0x0800f3e7
 800f330:	0800f3e7 	.word	0x0800f3e7
 800f334:	0800f3e7 	.word	0x0800f3e7
 800f338:	0800f3b3 	.word	0x0800f3b3
 800f33c:	0800f3e7 	.word	0x0800f3e7
 800f340:	0800f3e7 	.word	0x0800f3e7
 800f344:	0800f3e7 	.word	0x0800f3e7
 800f348:	0800f3e7 	.word	0x0800f3e7
 800f34c:	0800f3e7 	.word	0x0800f3e7
 800f350:	0800f3e7 	.word	0x0800f3e7
 800f354:	0800f3e7 	.word	0x0800f3e7
 800f358:	0800f3e7 	.word	0x0800f3e7
 800f35c:	0800f3e7 	.word	0x0800f3e7
 800f360:	0800f3e7 	.word	0x0800f3e7
 800f364:	0800f3e7 	.word	0x0800f3e7
 800f368:	0800f3e7 	.word	0x0800f3e7
 800f36c:	0800f3e7 	.word	0x0800f3e7
 800f370:	0800f3e7 	.word	0x0800f3e7
 800f374:	0800f3e7 	.word	0x0800f3e7
 800f378:	0800f3d9 	.word	0x0800f3d9
 800f37c:	2b40      	cmp	r3, #64	; 0x40
 800f37e:	d02e      	beq.n	800f3de <UART_SetConfig+0xab2>
 800f380:	e031      	b.n	800f3e6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f382:	f7fb fcaf 	bl	800ace4 <HAL_RCC_GetPCLK1Freq>
 800f386:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f388:	e033      	b.n	800f3f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f38a:	f7fb fcc1 	bl	800ad10 <HAL_RCC_GetPCLK2Freq>
 800f38e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f390:	e02f      	b.n	800f3f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f396:	4618      	mov	r0, r3
 800f398:	f7fc fbe0 	bl	800bb5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3a0:	e027      	b.n	800f3f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3a2:	f107 0318 	add.w	r3, r7, #24
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fc fd2c 	bl	800be04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3b0:	e01f      	b.n	800f3f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3b2:	4b69      	ldr	r3, [pc, #420]	; (800f558 <UART_SetConfig+0xc2c>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f003 0320 	and.w	r3, r3, #32
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d009      	beq.n	800f3d2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3be:	4b66      	ldr	r3, [pc, #408]	; (800f558 <UART_SetConfig+0xc2c>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	08db      	lsrs	r3, r3, #3
 800f3c4:	f003 0303 	and.w	r3, r3, #3
 800f3c8:	4a64      	ldr	r2, [pc, #400]	; (800f55c <UART_SetConfig+0xc30>)
 800f3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800f3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3d0:	e00f      	b.n	800f3f2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f3d2:	4b62      	ldr	r3, [pc, #392]	; (800f55c <UART_SetConfig+0xc30>)
 800f3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3d6:	e00c      	b.n	800f3f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f3d8:	4b61      	ldr	r3, [pc, #388]	; (800f560 <UART_SetConfig+0xc34>)
 800f3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3dc:	e009      	b.n	800f3f2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e4:	e005      	b.n	800f3f2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f3f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f000 80ea 	beq.w	800f5ce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3fe:	4a55      	ldr	r2, [pc, #340]	; (800f554 <UART_SetConfig+0xc28>)
 800f400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f404:	461a      	mov	r2, r3
 800f406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f408:	fbb3 f3f2 	udiv	r3, r3, r2
 800f40c:	005a      	lsls	r2, r3, #1
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	085b      	lsrs	r3, r3, #1
 800f414:	441a      	add	r2, r3
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f41e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f422:	2b0f      	cmp	r3, #15
 800f424:	d916      	bls.n	800f454 <UART_SetConfig+0xb28>
 800f426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f42c:	d212      	bcs.n	800f454 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f430:	b29b      	uxth	r3, r3
 800f432:	f023 030f 	bic.w	r3, r3, #15
 800f436:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	085b      	lsrs	r3, r3, #1
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	f003 0307 	and.w	r3, r3, #7
 800f442:	b29a      	uxth	r2, r3
 800f444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f446:	4313      	orrs	r3, r2
 800f448:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f450:	60da      	str	r2, [r3, #12]
 800f452:	e0bc      	b.n	800f5ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f454:	2301      	movs	r3, #1
 800f456:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f45a:	e0b8      	b.n	800f5ce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f45c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f460:	2b20      	cmp	r3, #32
 800f462:	dc4b      	bgt.n	800f4fc <UART_SetConfig+0xbd0>
 800f464:	2b00      	cmp	r3, #0
 800f466:	f2c0 8087 	blt.w	800f578 <UART_SetConfig+0xc4c>
 800f46a:	2b20      	cmp	r3, #32
 800f46c:	f200 8084 	bhi.w	800f578 <UART_SetConfig+0xc4c>
 800f470:	a201      	add	r2, pc, #4	; (adr r2, 800f478 <UART_SetConfig+0xb4c>)
 800f472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f476:	bf00      	nop
 800f478:	0800f503 	.word	0x0800f503
 800f47c:	0800f50b 	.word	0x0800f50b
 800f480:	0800f579 	.word	0x0800f579
 800f484:	0800f579 	.word	0x0800f579
 800f488:	0800f513 	.word	0x0800f513
 800f48c:	0800f579 	.word	0x0800f579
 800f490:	0800f579 	.word	0x0800f579
 800f494:	0800f579 	.word	0x0800f579
 800f498:	0800f523 	.word	0x0800f523
 800f49c:	0800f579 	.word	0x0800f579
 800f4a0:	0800f579 	.word	0x0800f579
 800f4a4:	0800f579 	.word	0x0800f579
 800f4a8:	0800f579 	.word	0x0800f579
 800f4ac:	0800f579 	.word	0x0800f579
 800f4b0:	0800f579 	.word	0x0800f579
 800f4b4:	0800f579 	.word	0x0800f579
 800f4b8:	0800f533 	.word	0x0800f533
 800f4bc:	0800f579 	.word	0x0800f579
 800f4c0:	0800f579 	.word	0x0800f579
 800f4c4:	0800f579 	.word	0x0800f579
 800f4c8:	0800f579 	.word	0x0800f579
 800f4cc:	0800f579 	.word	0x0800f579
 800f4d0:	0800f579 	.word	0x0800f579
 800f4d4:	0800f579 	.word	0x0800f579
 800f4d8:	0800f579 	.word	0x0800f579
 800f4dc:	0800f579 	.word	0x0800f579
 800f4e0:	0800f579 	.word	0x0800f579
 800f4e4:	0800f579 	.word	0x0800f579
 800f4e8:	0800f579 	.word	0x0800f579
 800f4ec:	0800f579 	.word	0x0800f579
 800f4f0:	0800f579 	.word	0x0800f579
 800f4f4:	0800f579 	.word	0x0800f579
 800f4f8:	0800f56b 	.word	0x0800f56b
 800f4fc:	2b40      	cmp	r3, #64	; 0x40
 800f4fe:	d037      	beq.n	800f570 <UART_SetConfig+0xc44>
 800f500:	e03a      	b.n	800f578 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f502:	f7fb fbef 	bl	800ace4 <HAL_RCC_GetPCLK1Freq>
 800f506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f508:	e03c      	b.n	800f584 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f50a:	f7fb fc01 	bl	800ad10 <HAL_RCC_GetPCLK2Freq>
 800f50e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f510:	e038      	b.n	800f584 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f516:	4618      	mov	r0, r3
 800f518:	f7fc fb20 	bl	800bb5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f520:	e030      	b.n	800f584 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f522:	f107 0318 	add.w	r3, r7, #24
 800f526:	4618      	mov	r0, r3
 800f528:	f7fc fc6c 	bl	800be04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f530:	e028      	b.n	800f584 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f532:	4b09      	ldr	r3, [pc, #36]	; (800f558 <UART_SetConfig+0xc2c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f003 0320 	and.w	r3, r3, #32
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d012      	beq.n	800f564 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f53e:	4b06      	ldr	r3, [pc, #24]	; (800f558 <UART_SetConfig+0xc2c>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	08db      	lsrs	r3, r3, #3
 800f544:	f003 0303 	and.w	r3, r3, #3
 800f548:	4a04      	ldr	r2, [pc, #16]	; (800f55c <UART_SetConfig+0xc30>)
 800f54a:	fa22 f303 	lsr.w	r3, r2, r3
 800f54e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f550:	e018      	b.n	800f584 <UART_SetConfig+0xc58>
 800f552:	bf00      	nop
 800f554:	080113a8 	.word	0x080113a8
 800f558:	58024400 	.word	0x58024400
 800f55c:	03d09000 	.word	0x03d09000
 800f560:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f564:	4b24      	ldr	r3, [pc, #144]	; (800f5f8 <UART_SetConfig+0xccc>)
 800f566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f568:	e00c      	b.n	800f584 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f56a:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <UART_SetConfig+0xcd0>)
 800f56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f56e:	e009      	b.n	800f584 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f576:	e005      	b.n	800f584 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f578:	2300      	movs	r3, #0
 800f57a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f582:	bf00      	nop
    }

    if (pclk != 0U)
 800f584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f586:	2b00      	cmp	r3, #0
 800f588:	d021      	beq.n	800f5ce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58e:	4a1c      	ldr	r2, [pc, #112]	; (800f600 <UART_SetConfig+0xcd4>)
 800f590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f594:	461a      	mov	r2, r3
 800f596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f598:	fbb3 f2f2 	udiv	r2, r3, r2
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	085b      	lsrs	r3, r3, #1
 800f5a2:	441a      	add	r2, r3
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5ac:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b0:	2b0f      	cmp	r3, #15
 800f5b2:	d909      	bls.n	800f5c8 <UART_SetConfig+0xc9c>
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5ba:	d205      	bcs.n	800f5c8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	60da      	str	r2, [r3, #12]
 800f5c6:	e002      	b.n	800f5ce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f5ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3748      	adds	r7, #72	; 0x48
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5f8:	03d09000 	.word	0x03d09000
 800f5fc:	003d0900 	.word	0x003d0900
 800f600:	080113a8 	.word	0x080113a8

0800f604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f610:	f003 0301 	and.w	r3, r3, #1
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00a      	beq.n	800f62e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	430a      	orrs	r2, r1
 800f62c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f632:	f003 0302 	and.w	r3, r3, #2
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00a      	beq.n	800f650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	430a      	orrs	r2, r1
 800f64e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f654:	f003 0304 	and.w	r3, r3, #4
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00a      	beq.n	800f672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	430a      	orrs	r2, r1
 800f670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f676:	f003 0308 	and.w	r3, r3, #8
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00a      	beq.n	800f694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	430a      	orrs	r2, r1
 800f692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f698:	f003 0310 	and.w	r3, r3, #16
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00a      	beq.n	800f6b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	430a      	orrs	r2, r1
 800f6b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ba:	f003 0320 	and.w	r3, r3, #32
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00a      	beq.n	800f6d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	430a      	orrs	r2, r1
 800f6d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01a      	beq.n	800f71a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	430a      	orrs	r2, r1
 800f6f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f702:	d10a      	bne.n	800f71a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	430a      	orrs	r2, r1
 800f718:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00a      	beq.n	800f73c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	430a      	orrs	r2, r1
 800f73a:	605a      	str	r2, [r3, #4]
  }
}
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b086      	sub	sp, #24
 800f74c:	af02      	add	r7, sp, #8
 800f74e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2200      	movs	r2, #0
 800f754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f758:	f7f7 fa4c 	bl	8006bf4 <HAL_GetTick>
 800f75c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f003 0308 	and.w	r3, r3, #8
 800f768:	2b08      	cmp	r3, #8
 800f76a:	d10e      	bne.n	800f78a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f76c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 f82f 	bl	800f7de <UART_WaitOnFlagUntilTimeout>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d001      	beq.n	800f78a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f786:	2303      	movs	r3, #3
 800f788:	e025      	b.n	800f7d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f003 0304 	and.w	r3, r3, #4
 800f794:	2b04      	cmp	r3, #4
 800f796:	d10e      	bne.n	800f7b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f819 	bl	800f7de <UART_WaitOnFlagUntilTimeout>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7b2:	2303      	movs	r3, #3
 800f7b4:	e00f      	b.n	800f7d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2220      	movs	r2, #32
 800f7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2220      	movs	r2, #32
 800f7c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f7de:	b580      	push	{r7, lr}
 800f7e0:	b09c      	sub	sp, #112	; 0x70
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	60f8      	str	r0, [r7, #12]
 800f7e6:	60b9      	str	r1, [r7, #8]
 800f7e8:	603b      	str	r3, [r7, #0]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7ee:	e0a9      	b.n	800f944 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f6:	f000 80a5 	beq.w	800f944 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7fa:	f7f7 f9fb 	bl	8006bf4 <HAL_GetTick>
 800f7fe:	4602      	mov	r2, r0
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f806:	429a      	cmp	r2, r3
 800f808:	d302      	bcc.n	800f810 <UART_WaitOnFlagUntilTimeout+0x32>
 800f80a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d140      	bne.n	800f892 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f818:	e853 3f00 	ldrex	r3, [r3]
 800f81c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f824:	667b      	str	r3, [r7, #100]	; 0x64
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	461a      	mov	r2, r3
 800f82c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f82e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f830:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f832:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f836:	e841 2300 	strex	r3, r2, [r1]
 800f83a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1e6      	bne.n	800f810 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3308      	adds	r3, #8
 800f848:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f84c:	e853 3f00 	ldrex	r3, [r3]
 800f850:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f854:	f023 0301 	bic.w	r3, r3, #1
 800f858:	663b      	str	r3, [r7, #96]	; 0x60
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	3308      	adds	r3, #8
 800f860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f862:	64ba      	str	r2, [r7, #72]	; 0x48
 800f864:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f86a:	e841 2300 	strex	r3, r2, [r1]
 800f86e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1e5      	bne.n	800f842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2220      	movs	r2, #32
 800f87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2220      	movs	r2, #32
 800f882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2200      	movs	r2, #0
 800f88a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f88e:	2303      	movs	r3, #3
 800f890:	e069      	b.n	800f966 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f003 0304 	and.w	r3, r3, #4
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d051      	beq.n	800f944 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	69db      	ldr	r3, [r3, #28]
 800f8a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f8ae:	d149      	bne.n	800f944 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c2:	e853 3f00 	ldrex	r3, [r3]
 800f8c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d8:	637b      	str	r3, [r7, #52]	; 0x34
 800f8da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8e0:	e841 2300 	strex	r3, r2, [r1]
 800f8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1e6      	bne.n	800f8ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3308      	adds	r3, #8
 800f8f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	e853 3f00 	ldrex	r3, [r3]
 800f8fa:	613b      	str	r3, [r7, #16]
   return(result);
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	f023 0301 	bic.w	r3, r3, #1
 800f902:	66bb      	str	r3, [r7, #104]	; 0x68
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	3308      	adds	r3, #8
 800f90a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f90c:	623a      	str	r2, [r7, #32]
 800f90e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f910:	69f9      	ldr	r1, [r7, #28]
 800f912:	6a3a      	ldr	r2, [r7, #32]
 800f914:	e841 2300 	strex	r3, r2, [r1]
 800f918:	61bb      	str	r3, [r7, #24]
   return(result);
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1e5      	bne.n	800f8ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2220      	movs	r2, #32
 800f924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2220      	movs	r2, #32
 800f92c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2220      	movs	r2, #32
 800f934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2200      	movs	r2, #0
 800f93c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f940:	2303      	movs	r3, #3
 800f942:	e010      	b.n	800f966 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	69da      	ldr	r2, [r3, #28]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	4013      	ands	r3, r2
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	429a      	cmp	r2, r3
 800f952:	bf0c      	ite	eq
 800f954:	2301      	moveq	r3, #1
 800f956:	2300      	movne	r3, #0
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	461a      	mov	r2, r3
 800f95c:	79fb      	ldrb	r3, [r7, #7]
 800f95e:	429a      	cmp	r2, r3
 800f960:	f43f af46 	beq.w	800f7f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3770      	adds	r7, #112	; 0x70
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
	...

0800f970 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b096      	sub	sp, #88	; 0x58
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	4613      	mov	r3, r2
 800f97c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	68ba      	ldr	r2, [r7, #8]
 800f982:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	88fa      	ldrh	r2, [r7, #6]
 800f988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2222      	movs	r2, #34	; 0x22
 800f998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d02c      	beq.n	800f9fe <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9a8:	4a42      	ldr	r2, [pc, #264]	; (800fab4 <UART_Start_Receive_DMA+0x144>)
 800f9aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9b0:	4a41      	ldr	r2, [pc, #260]	; (800fab8 <UART_Start_Receive_DMA+0x148>)
 800f9b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9b8:	4a40      	ldr	r2, [pc, #256]	; (800fabc <UART_Start_Receive_DMA+0x14c>)
 800f9ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3324      	adds	r3, #36	; 0x24
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	88fb      	ldrh	r3, [r7, #6]
 800f9d8:	f7f7 fd82 	bl	80074e0 <HAL_DMA_Start_IT>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00d      	beq.n	800f9fe <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2210      	movs	r2, #16
 800f9e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	2220      	movs	r2, #32
 800f9f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	e055      	b.n	800faaa <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d018      	beq.n	800fa40 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa16:	e853 3f00 	ldrex	r3, [r3]
 800fa1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fa22:	657b      	str	r3, [r7, #84]	; 0x54
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	461a      	mov	r2, r3
 800fa2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa2e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa34:	e841 2300 	strex	r3, r2, [r1]
 800fa38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fa3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1e6      	bne.n	800fa0e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	3308      	adds	r3, #8
 800fa46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4a:	e853 3f00 	ldrex	r3, [r3]
 800fa4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa52:	f043 0301 	orr.w	r3, r3, #1
 800fa56:	653b      	str	r3, [r7, #80]	; 0x50
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	3308      	adds	r3, #8
 800fa5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa60:	637a      	str	r2, [r7, #52]	; 0x34
 800fa62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa68:	e841 2300 	strex	r3, r2, [r1]
 800fa6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fa6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1e5      	bne.n	800fa40 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	3308      	adds	r3, #8
 800fa7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	e853 3f00 	ldrex	r3, [r3]
 800fa82:	613b      	str	r3, [r7, #16]
   return(result);
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	3308      	adds	r3, #8
 800fa92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa94:	623a      	str	r2, [r7, #32]
 800fa96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa98:	69f9      	ldr	r1, [r7, #28]
 800fa9a:	6a3a      	ldr	r2, [r7, #32]
 800fa9c:	e841 2300 	strex	r3, r2, [r1]
 800faa0:	61bb      	str	r3, [r7, #24]
   return(result);
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d1e5      	bne.n	800fa74 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800faa8:	2300      	movs	r3, #0
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3758      	adds	r7, #88	; 0x58
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	0800fcc3 	.word	0x0800fcc3
 800fab8:	0800fde5 	.word	0x0800fde5
 800fabc:	0800fe1d 	.word	0x0800fe1d

0800fac0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b08f      	sub	sp, #60	; 0x3c
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800face:	6a3b      	ldr	r3, [r7, #32]
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	61fb      	str	r3, [r7, #28]
   return(result);
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fadc:	637b      	str	r3, [r7, #52]	; 0x34
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	461a      	mov	r2, r3
 800fae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fae8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800faec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800faee:	e841 2300 	strex	r3, r2, [r1]
 800faf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1e6      	bne.n	800fac8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	3308      	adds	r3, #8
 800fb00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	e853 3f00 	ldrex	r3, [r3]
 800fb08:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb10:	633b      	str	r3, [r7, #48]	; 0x30
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3308      	adds	r3, #8
 800fb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb1a:	61ba      	str	r2, [r7, #24]
 800fb1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb1e:	6979      	ldr	r1, [r7, #20]
 800fb20:	69ba      	ldr	r2, [r7, #24]
 800fb22:	e841 2300 	strex	r3, r2, [r1]
 800fb26:	613b      	str	r3, [r7, #16]
   return(result);
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1e5      	bne.n	800fafa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2220      	movs	r2, #32
 800fb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fb36:	bf00      	nop
 800fb38:	373c      	adds	r7, #60	; 0x3c
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
	...

0800fb44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b095      	sub	sp, #84	; 0x54
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb54:	e853 3f00 	ldrex	r3, [r3]
 800fb58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	461a      	mov	r2, r3
 800fb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb6a:	643b      	str	r3, [r7, #64]	; 0x40
 800fb6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb72:	e841 2300 	strex	r3, r2, [r1]
 800fb76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d1e6      	bne.n	800fb4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	3308      	adds	r3, #8
 800fb84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb86:	6a3b      	ldr	r3, [r7, #32]
 800fb88:	e853 3f00 	ldrex	r3, [r3]
 800fb8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb8e:	69fa      	ldr	r2, [r7, #28]
 800fb90:	4b1e      	ldr	r3, [pc, #120]	; (800fc0c <UART_EndRxTransfer+0xc8>)
 800fb92:	4013      	ands	r3, r2
 800fb94:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	3308      	adds	r3, #8
 800fb9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba6:	e841 2300 	strex	r3, r2, [r1]
 800fbaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1e5      	bne.n	800fb7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d118      	bne.n	800fbec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	e853 3f00 	ldrex	r3, [r3]
 800fbc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	f023 0310 	bic.w	r3, r3, #16
 800fbce:	647b      	str	r3, [r7, #68]	; 0x44
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd8:	61bb      	str	r3, [r7, #24]
 800fbda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbdc:	6979      	ldr	r1, [r7, #20]
 800fbde:	69ba      	ldr	r2, [r7, #24]
 800fbe0:	e841 2300 	strex	r3, r2, [r1]
 800fbe4:	613b      	str	r3, [r7, #16]
   return(result);
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d1e6      	bne.n	800fbba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2220      	movs	r2, #32
 800fbf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fc00:	bf00      	nop
 800fc02:	3754      	adds	r7, #84	; 0x54
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	effffffe 	.word	0xeffffffe

0800fc10 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b090      	sub	sp, #64	; 0x40
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	69db      	ldr	r3, [r3, #28]
 800fc22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc26:	d037      	beq.n	800fc98 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800fc28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3308      	adds	r3, #8
 800fc36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	e853 3f00 	ldrex	r3, [r3]
 800fc3e:	623b      	str	r3, [r7, #32]
   return(result);
 800fc40:	6a3b      	ldr	r3, [r7, #32]
 800fc42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc46:	63bb      	str	r3, [r7, #56]	; 0x38
 800fc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	3308      	adds	r3, #8
 800fc4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc50:	633a      	str	r2, [r7, #48]	; 0x30
 800fc52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc58:	e841 2300 	strex	r3, r2, [r1]
 800fc5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1e5      	bne.n	800fc30 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	e853 3f00 	ldrex	r3, [r3]
 800fc70:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc78:	637b      	str	r3, [r7, #52]	; 0x34
 800fc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc82:	61fb      	str	r3, [r7, #28]
 800fc84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc86:	69b9      	ldr	r1, [r7, #24]
 800fc88:	69fa      	ldr	r2, [r7, #28]
 800fc8a:	e841 2300 	strex	r3, r2, [r1]
 800fc8e:	617b      	str	r3, [r7, #20]
   return(result);
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1e6      	bne.n	800fc64 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc96:	e002      	b.n	800fc9e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800fc98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fc9a:	f7f4 f8c9 	bl	8003e30 <HAL_UART_TxCpltCallback>
}
 800fc9e:	bf00      	nop
 800fca0:	3740      	adds	r7, #64	; 0x40
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}

0800fca6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b084      	sub	sp, #16
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f7fe fe0f 	bl	800e8d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcba:	bf00      	nop
 800fcbc:	3710      	adds	r7, #16
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b09c      	sub	sp, #112	; 0x70
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcce:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	69db      	ldr	r3, [r3, #28]
 800fcd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcd8:	d071      	beq.n	800fdbe <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800fcda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcea:	e853 3f00 	ldrex	r3, [r3]
 800fcee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fcf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd00:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd08:	e841 2300 	strex	r3, r2, [r1]
 800fd0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1e6      	bne.n	800fce2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	3308      	adds	r3, #8
 800fd1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	e853 3f00 	ldrex	r3, [r3]
 800fd22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd26:	f023 0301 	bic.w	r3, r3, #1
 800fd2a:	667b      	str	r3, [r7, #100]	; 0x64
 800fd2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	3308      	adds	r3, #8
 800fd32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd34:	647a      	str	r2, [r7, #68]	; 0x44
 800fd36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd3c:	e841 2300 	strex	r3, r2, [r1]
 800fd40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d1e5      	bne.n	800fd14 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd52:	e853 3f00 	ldrex	r3, [r3]
 800fd56:	623b      	str	r3, [r7, #32]
   return(result);
 800fd58:	6a3b      	ldr	r3, [r7, #32]
 800fd5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd5e:	663b      	str	r3, [r7, #96]	; 0x60
 800fd60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	3308      	adds	r3, #8
 800fd66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd68:	633a      	str	r2, [r7, #48]	; 0x30
 800fd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd70:	e841 2300 	strex	r3, r2, [r1]
 800fd74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1e5      	bne.n	800fd48 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd7e:	2220      	movs	r2, #32
 800fd80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d118      	bne.n	800fdbe <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	e853 3f00 	ldrex	r3, [r3]
 800fd98:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f023 0310 	bic.w	r3, r3, #16
 800fda0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fda2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	461a      	mov	r2, r3
 800fda8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdaa:	61fb      	str	r3, [r7, #28]
 800fdac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdae:	69b9      	ldr	r1, [r7, #24]
 800fdb0:	69fa      	ldr	r2, [r7, #28]
 800fdb2:	e841 2300 	strex	r3, r2, [r1]
 800fdb6:	617b      	str	r3, [r7, #20]
   return(result);
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1e6      	bne.n	800fd8c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d107      	bne.n	800fdd6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fdcc:	4619      	mov	r1, r3
 800fdce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fdd0:	f7fe fda0 	bl	800e914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdd4:	e002      	b.n	800fddc <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800fdd6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fdd8:	f7f4 f83c 	bl	8003e54 <HAL_UART_RxCpltCallback>
}
 800fddc:	bf00      	nop
 800fdde:	3770      	adds	r7, #112	; 0x70
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d109      	bne.n	800fe0e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe00:	085b      	lsrs	r3, r3, #1
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	4619      	mov	r1, r3
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f7fe fd84 	bl	800e914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fe0c:	e002      	b.n	800fe14 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fe0e:	68f8      	ldr	r0, [r7, #12]
 800fe10:	f7fe fd6c 	bl	800e8ec <HAL_UART_RxHalfCpltCallback>
}
 800fe14:	bf00      	nop
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b086      	sub	sp, #24
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe44:	2b80      	cmp	r3, #128	; 0x80
 800fe46:	d109      	bne.n	800fe5c <UART_DMAError+0x40>
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	2b21      	cmp	r3, #33	; 0x21
 800fe4c:	d106      	bne.n	800fe5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fe56:	6978      	ldr	r0, [r7, #20]
 800fe58:	f7ff fe32 	bl	800fac0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	689b      	ldr	r3, [r3, #8]
 800fe62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe66:	2b40      	cmp	r3, #64	; 0x40
 800fe68:	d109      	bne.n	800fe7e <UART_DMAError+0x62>
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	2b22      	cmp	r3, #34	; 0x22
 800fe6e:	d106      	bne.n	800fe7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fe78:	6978      	ldr	r0, [r7, #20]
 800fe7a:	f7ff fe63 	bl	800fb44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe84:	f043 0210 	orr.w	r2, r3, #16
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe8e:	6978      	ldr	r0, [r7, #20]
 800fe90:	f7fe fd36 	bl	800e900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe94:	bf00      	nop
 800fe96:	3718      	adds	r7, #24
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}

0800fe9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2200      	movs	r2, #0
 800feb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800feba:	68f8      	ldr	r0, [r7, #12]
 800febc:	f7fe fd20 	bl	800e900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fec0:	bf00      	nop
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b088      	sub	sp, #32
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	e853 3f00 	ldrex	r3, [r3]
 800fedc:	60bb      	str	r3, [r7, #8]
   return(result);
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fee4:	61fb      	str	r3, [r7, #28]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	461a      	mov	r2, r3
 800feec:	69fb      	ldr	r3, [r7, #28]
 800feee:	61bb      	str	r3, [r7, #24]
 800fef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef2:	6979      	ldr	r1, [r7, #20]
 800fef4:	69ba      	ldr	r2, [r7, #24]
 800fef6:	e841 2300 	strex	r3, r2, [r1]
 800fefa:	613b      	str	r3, [r7, #16]
   return(result);
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d1e6      	bne.n	800fed0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2220      	movs	r2, #32
 800ff06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f7f3 ff8d 	bl	8003e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff16:	bf00      	nop
 800ff18:	3720      	adds	r7, #32
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff1e:	b480      	push	{r7}
 800ff20:	b083      	sub	sp, #12
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff26:	bf00      	nop
 800ff28:	370c      	adds	r7, #12
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr

0800ff32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff32:	b480      	push	{r7}
 800ff34:	b083      	sub	sp, #12
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff3a:	bf00      	nop
 800ff3c:	370c      	adds	r7, #12
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr

0800ff46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff46:	b480      	push	{r7}
 800ff48:	b083      	sub	sp, #12
 800ff4a:	af00      	add	r7, sp, #0
 800ff4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff4e:	bf00      	nop
 800ff50:	370c      	adds	r7, #12
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr

0800ff5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d101      	bne.n	800ff70 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff6c:	2302      	movs	r3, #2
 800ff6e:	e027      	b.n	800ffc0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2201      	movs	r2, #1
 800ff74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2224      	movs	r2, #36	; 0x24
 800ff7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f022 0201 	bic.w	r2, r2, #1
 800ff96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2220      	movs	r2, #32
 800ffb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d101      	bne.n	800ffe4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	e02d      	b.n	8010040 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2224      	movs	r2, #36	; 0x24
 800fff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f022 0201 	bic.w	r2, r2, #1
 801000a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	683a      	ldr	r2, [r7, #0]
 801001c:	430a      	orrs	r2, r1
 801001e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f84f 	bl	80100c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2220      	movs	r2, #32
 8010032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010058:	2b01      	cmp	r3, #1
 801005a:	d101      	bne.n	8010060 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801005c:	2302      	movs	r3, #2
 801005e:	e02d      	b.n	80100bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2201      	movs	r2, #1
 8010064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2224      	movs	r2, #36	; 0x24
 801006c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	681a      	ldr	r2, [r3, #0]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f022 0201 	bic.w	r2, r2, #1
 8010086:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	683a      	ldr	r2, [r7, #0]
 8010098:	430a      	orrs	r2, r1
 801009a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f000 f811 	bl	80100c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2220      	movs	r2, #32
 80100ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100ba:	2300      	movs	r3, #0
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3710      	adds	r7, #16
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d108      	bne.n	80100e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2201      	movs	r2, #1
 80100e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100e4:	e031      	b.n	801014a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100e6:	2310      	movs	r3, #16
 80100e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100ea:	2310      	movs	r3, #16
 80100ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	0e5b      	lsrs	r3, r3, #25
 80100f6:	b2db      	uxtb	r3, r3
 80100f8:	f003 0307 	and.w	r3, r3, #7
 80100fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	0f5b      	lsrs	r3, r3, #29
 8010106:	b2db      	uxtb	r3, r3
 8010108:	f003 0307 	and.w	r3, r3, #7
 801010c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801010e:	7bbb      	ldrb	r3, [r7, #14]
 8010110:	7b3a      	ldrb	r2, [r7, #12]
 8010112:	4911      	ldr	r1, [pc, #68]	; (8010158 <UARTEx_SetNbDataToProcess+0x94>)
 8010114:	5c8a      	ldrb	r2, [r1, r2]
 8010116:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801011a:	7b3a      	ldrb	r2, [r7, #12]
 801011c:	490f      	ldr	r1, [pc, #60]	; (801015c <UARTEx_SetNbDataToProcess+0x98>)
 801011e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010120:	fb93 f3f2 	sdiv	r3, r3, r2
 8010124:	b29a      	uxth	r2, r3
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801012c:	7bfb      	ldrb	r3, [r7, #15]
 801012e:	7b7a      	ldrb	r2, [r7, #13]
 8010130:	4909      	ldr	r1, [pc, #36]	; (8010158 <UARTEx_SetNbDataToProcess+0x94>)
 8010132:	5c8a      	ldrb	r2, [r1, r2]
 8010134:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010138:	7b7a      	ldrb	r2, [r7, #13]
 801013a:	4908      	ldr	r1, [pc, #32]	; (801015c <UARTEx_SetNbDataToProcess+0x98>)
 801013c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801013e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010142:	b29a      	uxth	r2, r3
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801014a:	bf00      	nop
 801014c:	3714      	adds	r7, #20
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop
 8010158:	080113c0 	.word	0x080113c0
 801015c:	080113c8 	.word	0x080113c8

08010160 <__cxa_pure_virtual>:
 8010160:	b508      	push	{r3, lr}
 8010162:	f000 f80d 	bl	8010180 <_ZSt9terminatev>

08010166 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010166:	b508      	push	{r3, lr}
 8010168:	4780      	blx	r0
 801016a:	f000 fd95 	bl	8010c98 <abort>
	...

08010170 <_ZSt13get_terminatev>:
 8010170:	4b02      	ldr	r3, [pc, #8]	; (801017c <_ZSt13get_terminatev+0xc>)
 8010172:	6818      	ldr	r0, [r3, #0]
 8010174:	f3bf 8f5b 	dmb	ish
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	24000014 	.word	0x24000014

08010180 <_ZSt9terminatev>:
 8010180:	b508      	push	{r3, lr}
 8010182:	f7ff fff5 	bl	8010170 <_ZSt13get_terminatev>
 8010186:	f7ff ffee 	bl	8010166 <_ZN10__cxxabiv111__terminateEPFvvE>

0801018a <checkint>:
 801018a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801018e:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010192:	429a      	cmp	r2, r3
 8010194:	b570      	push	{r4, r5, r6, lr}
 8010196:	dd2a      	ble.n	80101ee <checkint+0x64>
 8010198:	f240 4333 	movw	r3, #1075	; 0x433
 801019c:	429a      	cmp	r2, r3
 801019e:	dc24      	bgt.n	80101ea <checkint+0x60>
 80101a0:	1a9b      	subs	r3, r3, r2
 80101a2:	f1a3 0620 	sub.w	r6, r3, #32
 80101a6:	f04f 32ff 	mov.w	r2, #4294967295
 80101aa:	fa02 f403 	lsl.w	r4, r2, r3
 80101ae:	fa02 f606 	lsl.w	r6, r2, r6
 80101b2:	f1c3 0520 	rsb	r5, r3, #32
 80101b6:	fa22 f505 	lsr.w	r5, r2, r5
 80101ba:	4334      	orrs	r4, r6
 80101bc:	432c      	orrs	r4, r5
 80101be:	409a      	lsls	r2, r3
 80101c0:	ea20 0202 	bic.w	r2, r0, r2
 80101c4:	ea21 0404 	bic.w	r4, r1, r4
 80101c8:	4322      	orrs	r2, r4
 80101ca:	f1a3 0420 	sub.w	r4, r3, #32
 80101ce:	f1c3 0220 	rsb	r2, r3, #32
 80101d2:	d10c      	bne.n	80101ee <checkint+0x64>
 80101d4:	40d8      	lsrs	r0, r3
 80101d6:	fa01 f302 	lsl.w	r3, r1, r2
 80101da:	4318      	orrs	r0, r3
 80101dc:	40e1      	lsrs	r1, r4
 80101de:	4308      	orrs	r0, r1
 80101e0:	f000 0001 	and.w	r0, r0, #1
 80101e4:	f1d0 0002 	rsbs	r0, r0, #2
 80101e8:	bd70      	pop	{r4, r5, r6, pc}
 80101ea:	2002      	movs	r0, #2
 80101ec:	e7fc      	b.n	80101e8 <checkint+0x5e>
 80101ee:	2000      	movs	r0, #0
 80101f0:	e7fa      	b.n	80101e8 <checkint+0x5e>
 80101f2:	0000      	movs	r0, r0
 80101f4:	0000      	movs	r0, r0
	...

080101f8 <pow>:
 80101f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fc:	ee10 4a90 	vmov	r4, s1
 8010200:	ed2d 8b0a 	vpush	{d8-d12}
 8010204:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010208:	ee11 7a90 	vmov	r7, s3
 801020c:	f10a 32ff 	add.w	r2, sl, #4294967295
 8010210:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010214:	429a      	cmp	r2, r3
 8010216:	ee10 6a10 	vmov	r6, s0
 801021a:	ee11 0a10 	vmov	r0, s2
 801021e:	b086      	sub	sp, #24
 8010220:	46d4      	mov	ip, sl
 8010222:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010226:	d806      	bhi.n	8010236 <pow+0x3e>
 8010228:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801022c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010230:	2b7f      	cmp	r3, #127	; 0x7f
 8010232:	f240 8156 	bls.w	80104e2 <pow+0x2ea>
 8010236:	1802      	adds	r2, r0, r0
 8010238:	eb47 0107 	adc.w	r1, r7, r7
 801023c:	f06f 0e01 	mvn.w	lr, #1
 8010240:	f112 39ff 	adds.w	r9, r2, #4294967295
 8010244:	f141 38ff 	adc.w	r8, r1, #4294967295
 8010248:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801024c:	45ce      	cmp	lr, r9
 801024e:	eb73 0808 	sbcs.w	r8, r3, r8
 8010252:	d23f      	bcs.n	80102d4 <pow+0xdc>
 8010254:	ea52 0301 	orrs.w	r3, r2, r1
 8010258:	f04f 0300 	mov.w	r3, #0
 801025c:	d10c      	bne.n	8010278 <pow+0x80>
 801025e:	19b6      	adds	r6, r6, r6
 8010260:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010264:	4164      	adcs	r4, r4
 8010266:	42b3      	cmp	r3, r6
 8010268:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801026c:	41a3      	sbcs	r3, r4
 801026e:	f0c0 808c 	bcc.w	801038a <pow+0x192>
 8010272:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010276:	e028      	b.n	80102ca <pow+0xd2>
 8010278:	4da3      	ldr	r5, [pc, #652]	; (8010508 <pow+0x310>)
 801027a:	42ac      	cmp	r4, r5
 801027c:	bf08      	it	eq
 801027e:	429e      	cmpeq	r6, r3
 8010280:	d107      	bne.n	8010292 <pow+0x9a>
 8010282:	1800      	adds	r0, r0, r0
 8010284:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010288:	417f      	adcs	r7, r7
 801028a:	4283      	cmp	r3, r0
 801028c:	4b9f      	ldr	r3, [pc, #636]	; (801050c <pow+0x314>)
 801028e:	41bb      	sbcs	r3, r7
 8010290:	e7ed      	b.n	801026e <pow+0x76>
 8010292:	19b6      	adds	r6, r6, r6
 8010294:	489e      	ldr	r0, [pc, #632]	; (8010510 <pow+0x318>)
 8010296:	4164      	adcs	r4, r4
 8010298:	42b3      	cmp	r3, r6
 801029a:	eb70 0504 	sbcs.w	r5, r0, r4
 801029e:	d374      	bcc.n	801038a <pow+0x192>
 80102a0:	4281      	cmp	r1, r0
 80102a2:	bf08      	it	eq
 80102a4:	429a      	cmpeq	r2, r3
 80102a6:	d170      	bne.n	801038a <pow+0x192>
 80102a8:	4a9a      	ldr	r2, [pc, #616]	; (8010514 <pow+0x31c>)
 80102aa:	4294      	cmp	r4, r2
 80102ac:	bf08      	it	eq
 80102ae:	429e      	cmpeq	r6, r3
 80102b0:	d0df      	beq.n	8010272 <pow+0x7a>
 80102b2:	4294      	cmp	r4, r2
 80102b4:	ea6f 0707 	mvn.w	r7, r7
 80102b8:	bf34      	ite	cc
 80102ba:	2400      	movcc	r4, #0
 80102bc:	2401      	movcs	r4, #1
 80102be:	0fff      	lsrs	r7, r7, #31
 80102c0:	42bc      	cmp	r4, r7
 80102c2:	f040 81d9 	bne.w	8010678 <pow+0x480>
 80102c6:	ee21 0b01 	vmul.f64	d0, d1, d1
 80102ca:	b006      	add	sp, #24
 80102cc:	ecbd 8b0a 	vpop	{d8-d12}
 80102d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102d4:	eb16 0806 	adds.w	r8, r6, r6
 80102d8:	eb44 0904 	adc.w	r9, r4, r4
 80102dc:	f118 31ff 	adds.w	r1, r8, #4294967295
 80102e0:	f169 0200 	sbc.w	r2, r9, #0
 80102e4:	458e      	cmp	lr, r1
 80102e6:	4193      	sbcs	r3, r2
 80102e8:	d223      	bcs.n	8010332 <pow+0x13a>
 80102ea:	ee20 0b00 	vmul.f64	d0, d0, d0
 80102ee:	2c00      	cmp	r4, #0
 80102f0:	da12      	bge.n	8010318 <pow+0x120>
 80102f2:	4639      	mov	r1, r7
 80102f4:	f7ff ff49 	bl	801018a <checkint>
 80102f8:	2801      	cmp	r0, #1
 80102fa:	d10d      	bne.n	8010318 <pow+0x120>
 80102fc:	eeb1 0b40 	vneg.f64	d0, d0
 8010300:	ea58 0309 	orrs.w	r3, r8, r9
 8010304:	d10a      	bne.n	801031c <pow+0x124>
 8010306:	2f00      	cmp	r7, #0
 8010308:	dadf      	bge.n	80102ca <pow+0xd2>
 801030a:	b006      	add	sp, #24
 801030c:	ecbd 8b0a 	vpop	{d8-d12}
 8010310:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010314:	f000 bc74 	b.w	8010c00 <__math_divzero>
 8010318:	2000      	movs	r0, #0
 801031a:	e7f1      	b.n	8010300 <pow+0x108>
 801031c:	2f00      	cmp	r7, #0
 801031e:	dad4      	bge.n	80102ca <pow+0xd2>
 8010320:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010324:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010328:	ed8d 7b00 	vstr	d7, [sp]
 801032c:	ed9d 0b00 	vldr	d0, [sp]
 8010330:	e7cb      	b.n	80102ca <pow+0xd2>
 8010332:	2c00      	cmp	r4, #0
 8010334:	da2c      	bge.n	8010390 <pow+0x198>
 8010336:	4639      	mov	r1, r7
 8010338:	f7ff ff27 	bl	801018a <checkint>
 801033c:	b930      	cbnz	r0, 801034c <pow+0x154>
 801033e:	b006      	add	sp, #24
 8010340:	ecbd 8b0a 	vpop	{d8-d12}
 8010344:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010348:	f000 bc72 	b.w	8010c30 <__math_invalid>
 801034c:	2801      	cmp	r0, #1
 801034e:	bf14      	ite	ne
 8010350:	2000      	movne	r0, #0
 8010352:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010356:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801035a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801035e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010362:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010366:	2b7f      	cmp	r3, #127	; 0x7f
 8010368:	d92d      	bls.n	80103c6 <pow+0x1ce>
 801036a:	4b67      	ldr	r3, [pc, #412]	; (8010508 <pow+0x310>)
 801036c:	2000      	movs	r0, #0
 801036e:	429c      	cmp	r4, r3
 8010370:	bf08      	it	eq
 8010372:	4286      	cmpeq	r6, r0
 8010374:	f43f af7d 	beq.w	8010272 <pow+0x7a>
 8010378:	f240 31bd 	movw	r1, #957	; 0x3bd
 801037c:	428a      	cmp	r2, r1
 801037e:	d80c      	bhi.n	801039a <pow+0x1a2>
 8010380:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010384:	42b0      	cmp	r0, r6
 8010386:	41a3      	sbcs	r3, r4
 8010388:	d204      	bcs.n	8010394 <pow+0x19c>
 801038a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801038e:	e79c      	b.n	80102ca <pow+0xd2>
 8010390:	2000      	movs	r0, #0
 8010392:	e7e4      	b.n	801035e <pow+0x166>
 8010394:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010398:	e797      	b.n	80102ca <pow+0xd2>
 801039a:	2e01      	cmp	r6, #1
 801039c:	eb74 0303 	sbcs.w	r3, r4, r3
 80103a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80103a4:	bf34      	ite	cc
 80103a6:	2301      	movcc	r3, #1
 80103a8:	2300      	movcs	r3, #0
 80103aa:	4295      	cmp	r5, r2
 80103ac:	bf8c      	ite	hi
 80103ae:	2500      	movhi	r5, #0
 80103b0:	2501      	movls	r5, #1
 80103b2:	42ab      	cmp	r3, r5
 80103b4:	f000 809d 	beq.w	80104f2 <pow+0x2fa>
 80103b8:	b006      	add	sp, #24
 80103ba:	ecbd 8b0a 	vpop	{d8-d12}
 80103be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c2:	f000 bc15 	b.w	8010bf0 <__math_oflow>
 80103c6:	f1bc 0f00 	cmp.w	ip, #0
 80103ca:	d10b      	bne.n	80103e4 <pow+0x1ec>
 80103cc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8010500 <pow+0x308>
 80103d0:	ee20 7b07 	vmul.f64	d7, d0, d7
 80103d4:	ec53 2b17 	vmov	r2, r3, d7
 80103d8:	ee17 6a10 	vmov	r6, s14
 80103dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80103e0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 80103e4:	4b4c      	ldr	r3, [pc, #304]	; (8010518 <pow+0x320>)
 80103e6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80103ea:	4423      	add	r3, r4
 80103ec:	f3c3 3246 	ubfx	r2, r3, #13, #7
 80103f0:	1519      	asrs	r1, r3, #20
 80103f2:	0d1b      	lsrs	r3, r3, #20
 80103f4:	051b      	lsls	r3, r3, #20
 80103f6:	eba4 0903 	sub.w	r9, r4, r3
 80103fa:	4b48      	ldr	r3, [pc, #288]	; (801051c <pow+0x324>)
 80103fc:	ee04 1a10 	vmov	s8, r1
 8010400:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010404:	f1b6 0800 	subs.w	r8, r6, #0
 8010408:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801040c:	ec49 8b15 	vmov	d5, r8, r9
 8010410:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010414:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010418:	ed93 7b00 	vldr	d7, [r3]
 801041c:	ed93 5b02 	vldr	d5, [r3, #8]
 8010420:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010424:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010428:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801042c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010430:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010434:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010438:	ed93 5b04 	vldr	d5, [r3, #16]
 801043c:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010440:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010444:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010448:	ed93 4b08 	vldr	d4, [r3, #32]
 801044c:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010450:	eeb0 9b40 	vmov.f64	d9, d0
 8010454:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010458:	ed93 5b06 	vldr	d5, [r3, #24]
 801045c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010460:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010464:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010468:	eea6 5b04 	vfma.f64	d5, d6, d4
 801046c:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010470:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010474:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010478:	ee3a ab00 	vadd.f64	d10, d10, d0
 801047c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010480:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010484:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010488:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801048c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8010490:	eea0 4b03 	vfma.f64	d4, d0, d3
 8010494:	eea0 5b04 	vfma.f64	d5, d0, d4
 8010498:	eeab ab05 	vfma.f64	d10, d11, d5
 801049c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80104a0:	ee21 7b06 	vmul.f64	d7, d1, d6
 80104a4:	ee17 3a90 	vmov	r3, s15
 80104a8:	eeb0 5b47 	vmov.f64	d5, d7
 80104ac:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80104b0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80104b4:	18b2      	adds	r2, r6, r2
 80104b6:	2a3e      	cmp	r2, #62	; 0x3e
 80104b8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 80104bc:	ee38 8b46 	vsub.f64	d8, d8, d6
 80104c0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 80104c4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 80104c8:	d92b      	bls.n	8010522 <pow+0x32a>
 80104ca:	2a00      	cmp	r2, #0
 80104cc:	da0b      	bge.n	80104e6 <pow+0x2ee>
 80104ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80104d2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f43f aef7 	beq.w	80102ca <pow+0xd2>
 80104dc:	eeb1 0b40 	vneg.f64	d0, d0
 80104e0:	e6f3      	b.n	80102ca <pow+0xd2>
 80104e2:	2000      	movs	r0, #0
 80104e4:	e77e      	b.n	80103e4 <pow+0x1ec>
 80104e6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 80104ea:	d919      	bls.n	8010520 <pow+0x328>
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f6bf af63 	bge.w	80103b8 <pow+0x1c0>
 80104f2:	b006      	add	sp, #24
 80104f4:	ecbd 8b0a 	vpop	{d8-d12}
 80104f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104fc:	f000 bb70 	b.w	8010be0 <__math_uflow>
 8010500:	00000000 	.word	0x00000000
 8010504:	43300000 	.word	0x43300000
 8010508:	3ff00000 	.word	0x3ff00000
 801050c:	fff00000 	.word	0xfff00000
 8010510:	ffe00000 	.word	0xffe00000
 8010514:	7fe00000 	.word	0x7fe00000
 8010518:	c0196aab 	.word	0xc0196aab
 801051c:	080113d0 	.word	0x080113d0
 8010520:	2600      	movs	r6, #0
 8010522:	495d      	ldr	r1, [pc, #372]	; (8010698 <pow+0x4a0>)
 8010524:	ed91 4b02 	vldr	d4, [r1, #8]
 8010528:	ed91 3b00 	vldr	d3, [r1]
 801052c:	eeb0 6b44 	vmov.f64	d6, d4
 8010530:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010534:	ee16 5a10 	vmov	r5, s12
 8010538:	ee36 6b44 	vsub.f64	d6, d6, d4
 801053c:	ed91 4b04 	vldr	d4, [r1, #16]
 8010540:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8010544:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010548:	eeb0 0b47 	vmov.f64	d0, d7
 801054c:	ed91 7b06 	vldr	d7, [r1, #24]
 8010550:	18dc      	adds	r4, r3, r3
 8010552:	f104 030f 	add.w	r3, r4, #15
 8010556:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801055a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801055e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8010562:	ee35 0b00 	vadd.f64	d0, d5, d0
 8010566:	ee20 6b00 	vmul.f64	d6, d0, d0
 801056a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801056e:	ed91 5b08 	vldr	d5, [r1, #32]
 8010572:	ee30 7b07 	vadd.f64	d7, d0, d7
 8010576:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801057a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801057e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8010582:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010586:	ee26 6b06 	vmul.f64	d6, d6, d6
 801058a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801058e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8010592:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8010596:	eea0 5b04 	vfma.f64	d5, d0, d4
 801059a:	1940      	adds	r0, r0, r5
 801059c:	2700      	movs	r7, #0
 801059e:	eb17 020c 	adds.w	r2, r7, ip
 80105a2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 80105a6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80105aa:	2e00      	cmp	r6, #0
 80105ac:	d15f      	bne.n	801066e <pow+0x476>
 80105ae:	42bd      	cmp	r5, r7
 80105b0:	db13      	blt.n	80105da <pow+0x3e2>
 80105b2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80105b6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80105ba:	4610      	mov	r0, r2
 80105bc:	ec41 0b10 	vmov	d0, r0, r1
 80105c0:	eea7 0b00 	vfma.f64	d0, d7, d0
 80105c4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010680 <pow+0x488>
 80105c8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80105cc:	b006      	add	sp, #24
 80105ce:	ecbd 8b0a 	vpop	{d8-d12}
 80105d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105d6:	f000 bb43 	b.w	8010c60 <__math_check_oflow>
 80105da:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80105de:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80105e2:	4610      	mov	r0, r2
 80105e4:	ec41 0b15 	vmov	d5, r0, r1
 80105e8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80105ec:	ee27 6b05 	vmul.f64	d6, d7, d5
 80105f0:	ee35 7b06 	vadd.f64	d7, d5, d6
 80105f4:	eeb0 3bc7 	vabs.f64	d3, d7
 80105f8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80105fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010600:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010688 <pow+0x490>
 8010604:	d52a      	bpl.n	801065c <pow+0x464>
 8010606:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801060a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801060e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010612:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8010616:	ee35 6b06 	vadd.f64	d6, d5, d6
 801061a:	bf48      	it	mi
 801061c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8010620:	ee37 3b04 	vadd.f64	d3, d7, d4
 8010624:	ee34 5b43 	vsub.f64	d5, d4, d3
 8010628:	ee35 7b07 	vadd.f64	d7, d5, d7
 801062c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010630:	ee37 7b03 	vadd.f64	d7, d7, d3
 8010634:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010638:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801063c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010640:	d104      	bne.n	801064c <pow+0x454>
 8010642:	4632      	mov	r2, r6
 8010644:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8010648:	ec43 2b17 	vmov	d7, r2, r3
 801064c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010650:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010654:	ee26 6b00 	vmul.f64	d6, d6, d0
 8010658:	ed8d 6b04 	vstr	d6, [sp, #16]
 801065c:	ee27 0b00 	vmul.f64	d0, d7, d0
 8010660:	b006      	add	sp, #24
 8010662:	ecbd 8b0a 	vpop	{d8-d12}
 8010666:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801066a:	f000 baf0 	b.w	8010c4e <__math_check_uflow>
 801066e:	ec43 2b10 	vmov	d0, r2, r3
 8010672:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010676:	e628      	b.n	80102ca <pow+0xd2>
 8010678:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8010690 <pow+0x498>
 801067c:	e625      	b.n	80102ca <pow+0xd2>
 801067e:	bf00      	nop
 8010680:	00000000 	.word	0x00000000
 8010684:	7f000000 	.word	0x7f000000
 8010688:	00000000 	.word	0x00000000
 801068c:	00100000 	.word	0x00100000
	...
 8010698:	08012460 	.word	0x08012460
 801069c:	00000000 	.word	0x00000000

080106a0 <atan>:
 80106a0:	b538      	push	{r3, r4, r5, lr}
 80106a2:	eeb0 7b40 	vmov.f64	d7, d0
 80106a6:	ee17 5a90 	vmov	r5, s15
 80106aa:	4b73      	ldr	r3, [pc, #460]	; (8010878 <atan+0x1d8>)
 80106ac:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80106b0:	429c      	cmp	r4, r3
 80106b2:	dd13      	ble.n	80106dc <atan+0x3c>
 80106b4:	4b71      	ldr	r3, [pc, #452]	; (801087c <atan+0x1dc>)
 80106b6:	429c      	cmp	r4, r3
 80106b8:	dc03      	bgt.n	80106c2 <atan+0x22>
 80106ba:	d107      	bne.n	80106cc <atan+0x2c>
 80106bc:	ee10 3a10 	vmov	r3, s0
 80106c0:	b123      	cbz	r3, 80106cc <atan+0x2c>
 80106c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106c6:	eeb0 0b47 	vmov.f64	d0, d7
 80106ca:	bd38      	pop	{r3, r4, r5, pc}
 80106cc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010808 <atan+0x168>
 80106d0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8010810 <atan+0x170>
 80106d4:	2d00      	cmp	r5, #0
 80106d6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80106da:	e7f4      	b.n	80106c6 <atan+0x26>
 80106dc:	4b68      	ldr	r3, [pc, #416]	; (8010880 <atan+0x1e0>)
 80106de:	429c      	cmp	r4, r3
 80106e0:	dc11      	bgt.n	8010706 <atan+0x66>
 80106e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80106e6:	429c      	cmp	r4, r3
 80106e8:	dc0a      	bgt.n	8010700 <atan+0x60>
 80106ea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80106ee:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8010818 <atan+0x178>
 80106f2:	ee30 6b06 	vadd.f64	d6, d0, d6
 80106f6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80106fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106fe:	dce2      	bgt.n	80106c6 <atan+0x26>
 8010700:	f04f 33ff 	mov.w	r3, #4294967295
 8010704:	e013      	b.n	801072e <atan+0x8e>
 8010706:	f000 f8c5 	bl	8010894 <fabs>
 801070a:	4b5e      	ldr	r3, [pc, #376]	; (8010884 <atan+0x1e4>)
 801070c:	429c      	cmp	r4, r3
 801070e:	dc4f      	bgt.n	80107b0 <atan+0x110>
 8010710:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010714:	429c      	cmp	r4, r3
 8010716:	dc41      	bgt.n	801079c <atan+0xfc>
 8010718:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801071c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010720:	2300      	movs	r3, #0
 8010722:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010726:	ee30 0b07 	vadd.f64	d0, d0, d7
 801072a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801072e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010820 <atan+0x180>
 8010732:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010736:	ee24 5b04 	vmul.f64	d5, d4, d4
 801073a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010828 <atan+0x188>
 801073e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010742:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010830 <atan+0x190>
 8010746:	eea3 6b05 	vfma.f64	d6, d3, d5
 801074a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010838 <atan+0x198>
 801074e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010752:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8010840 <atan+0x1a0>
 8010756:	eea3 6b05 	vfma.f64	d6, d3, d5
 801075a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8010848 <atan+0x1a8>
 801075e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010850 <atan+0x1b0>
 8010762:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010766:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010858 <atan+0x1b8>
 801076a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801076e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010860 <atan+0x1c0>
 8010772:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010776:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010868 <atan+0x1c8>
 801077a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801077e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010870 <atan+0x1d0>
 8010782:	1c5a      	adds	r2, r3, #1
 8010784:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010788:	ee26 6b05 	vmul.f64	d6, d6, d5
 801078c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010790:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010794:	d121      	bne.n	80107da <atan+0x13a>
 8010796:	ee37 7b46 	vsub.f64	d7, d7, d6
 801079a:	e794      	b.n	80106c6 <atan+0x26>
 801079c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80107a0:	2301      	movs	r3, #1
 80107a2:	ee30 6b47 	vsub.f64	d6, d0, d7
 80107a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80107aa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80107ae:	e7be      	b.n	801072e <atan+0x8e>
 80107b0:	4b35      	ldr	r3, [pc, #212]	; (8010888 <atan+0x1e8>)
 80107b2:	429c      	cmp	r4, r3
 80107b4:	da0b      	bge.n	80107ce <atan+0x12e>
 80107b6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80107ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80107be:	ee30 5b47 	vsub.f64	d5, d0, d7
 80107c2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80107c6:	2302      	movs	r3, #2
 80107c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80107cc:	e7af      	b.n	801072e <atan+0x8e>
 80107ce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80107d2:	2303      	movs	r3, #3
 80107d4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80107d8:	e7a9      	b.n	801072e <atan+0x8e>
 80107da:	4a2c      	ldr	r2, [pc, #176]	; (801088c <atan+0x1ec>)
 80107dc:	492c      	ldr	r1, [pc, #176]	; (8010890 <atan+0x1f0>)
 80107de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80107e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80107e6:	ed93 5b00 	vldr	d5, [r3]
 80107ea:	ee36 6b45 	vsub.f64	d6, d6, d5
 80107ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80107f2:	ed92 6b00 	vldr	d6, [r2]
 80107f6:	2d00      	cmp	r5, #0
 80107f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80107fc:	bfb8      	it	lt
 80107fe:	eeb1 7b47 	vneglt.f64	d7, d7
 8010802:	e760      	b.n	80106c6 <atan+0x26>
 8010804:	f3af 8000 	nop.w
 8010808:	54442d18 	.word	0x54442d18
 801080c:	3ff921fb 	.word	0x3ff921fb
 8010810:	54442d18 	.word	0x54442d18
 8010814:	bff921fb 	.word	0xbff921fb
 8010818:	8800759c 	.word	0x8800759c
 801081c:	7e37e43c 	.word	0x7e37e43c
 8010820:	e322da11 	.word	0xe322da11
 8010824:	3f90ad3a 	.word	0x3f90ad3a
 8010828:	24760deb 	.word	0x24760deb
 801082c:	3fa97b4b 	.word	0x3fa97b4b
 8010830:	a0d03d51 	.word	0xa0d03d51
 8010834:	3fb10d66 	.word	0x3fb10d66
 8010838:	c54c206e 	.word	0xc54c206e
 801083c:	3fb745cd 	.word	0x3fb745cd
 8010840:	920083ff 	.word	0x920083ff
 8010844:	3fc24924 	.word	0x3fc24924
 8010848:	5555550d 	.word	0x5555550d
 801084c:	3fd55555 	.word	0x3fd55555
 8010850:	52defd9a 	.word	0x52defd9a
 8010854:	bfadde2d 	.word	0xbfadde2d
 8010858:	2c6a6c2f 	.word	0x2c6a6c2f
 801085c:	bfa2b444 	.word	0xbfa2b444
 8010860:	af749a6d 	.word	0xaf749a6d
 8010864:	bfb3b0f2 	.word	0xbfb3b0f2
 8010868:	fe231671 	.word	0xfe231671
 801086c:	bfbc71c6 	.word	0xbfbc71c6
 8010870:	9998ebc4 	.word	0x9998ebc4
 8010874:	bfc99999 	.word	0xbfc99999
 8010878:	440fffff 	.word	0x440fffff
 801087c:	7ff00000 	.word	0x7ff00000
 8010880:	3fdbffff 	.word	0x3fdbffff
 8010884:	3ff2ffff 	.word	0x3ff2ffff
 8010888:	40038000 	.word	0x40038000
 801088c:	08012418 	.word	0x08012418
 8010890:	08012438 	.word	0x08012438

08010894 <fabs>:
 8010894:	ec51 0b10 	vmov	r0, r1, d0
 8010898:	ee10 2a10 	vmov	r2, s0
 801089c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80108a0:	ec43 2b10 	vmov	d0, r2, r3
 80108a4:	4770      	bx	lr
	...

080108a8 <acos>:
 80108a8:	b508      	push	{r3, lr}
 80108aa:	ed2d 8b04 	vpush	{d8-d9}
 80108ae:	eeb0 8b40 	vmov.f64	d8, d0
 80108b2:	f000 f845 	bl	8010940 <__ieee754_acos>
 80108b6:	eeb4 8b48 	vcmp.f64	d8, d8
 80108ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108be:	eeb0 9b40 	vmov.f64	d9, d0
 80108c2:	d615      	bvs.n	80108f0 <acos+0x48>
 80108c4:	eeb0 0b48 	vmov.f64	d0, d8
 80108c8:	f7ff ffe4 	bl	8010894 <fabs>
 80108cc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80108d0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80108d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d8:	dd0a      	ble.n	80108f0 <acos+0x48>
 80108da:	f000 f9e5 	bl	8010ca8 <__errno>
 80108de:	ecbd 8b04 	vpop	{d8-d9}
 80108e2:	2321      	movs	r3, #33	; 0x21
 80108e4:	6003      	str	r3, [r0, #0]
 80108e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80108ea:	4804      	ldr	r0, [pc, #16]	; (80108fc <acos+0x54>)
 80108ec:	f000 b9cc 	b.w	8010c88 <nan>
 80108f0:	eeb0 0b49 	vmov.f64	d0, d9
 80108f4:	ecbd 8b04 	vpop	{d8-d9}
 80108f8:	bd08      	pop	{r3, pc}
 80108fa:	bf00      	nop
 80108fc:	08012458 	.word	0x08012458

08010900 <sqrt>:
 8010900:	b508      	push	{r3, lr}
 8010902:	ed2d 8b04 	vpush	{d8-d9}
 8010906:	eeb0 8b40 	vmov.f64	d8, d0
 801090a:	f000 f947 	bl	8010b9c <__ieee754_sqrt>
 801090e:	eeb4 8b48 	vcmp.f64	d8, d8
 8010912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010916:	d60c      	bvs.n	8010932 <sqrt+0x32>
 8010918:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8010938 <sqrt+0x38>
 801091c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010924:	d505      	bpl.n	8010932 <sqrt+0x32>
 8010926:	f000 f9bf 	bl	8010ca8 <__errno>
 801092a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801092e:	2321      	movs	r3, #33	; 0x21
 8010930:	6003      	str	r3, [r0, #0]
 8010932:	ecbd 8b04 	vpop	{d8-d9}
 8010936:	bd08      	pop	{r3, pc}
	...

08010940 <__ieee754_acos>:
 8010940:	b500      	push	{lr}
 8010942:	ee10 2a90 	vmov	r2, s1
 8010946:	ed2d 8b10 	vpush	{d8-d15}
 801094a:	4991      	ldr	r1, [pc, #580]	; (8010b90 <__ieee754_acos+0x250>)
 801094c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8010950:	428b      	cmp	r3, r1
 8010952:	b087      	sub	sp, #28
 8010954:	dd18      	ble.n	8010988 <__ieee754_acos+0x48>
 8010956:	ee10 1a10 	vmov	r1, s0
 801095a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801095e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010962:	430b      	orrs	r3, r1
 8010964:	d10b      	bne.n	801097e <__ieee754_acos+0x3e>
 8010966:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8010b18 <__ieee754_acos+0x1d8>
 801096a:	ed9f 7b6d 	vldr	d7, [pc, #436]	; 8010b20 <__ieee754_acos+0x1e0>
 801096e:	2a00      	cmp	r2, #0
 8010970:	fe30 0b07 	vselgt.f64	d0, d0, d7
 8010974:	b007      	add	sp, #28
 8010976:	ecbd 8b10 	vpop	{d8-d15}
 801097a:	f85d fb04 	ldr.w	pc, [sp], #4
 801097e:	ee30 8b40 	vsub.f64	d8, d0, d0
 8010982:	ee88 0b08 	vdiv.f64	d0, d8, d8
 8010986:	e7f5      	b.n	8010974 <__ieee754_acos+0x34>
 8010988:	4982      	ldr	r1, [pc, #520]	; (8010b94 <__ieee754_acos+0x254>)
 801098a:	428b      	cmp	r3, r1
 801098c:	dc3c      	bgt.n	8010a08 <__ieee754_acos+0xc8>
 801098e:	4a82      	ldr	r2, [pc, #520]	; (8010b98 <__ieee754_acos+0x258>)
 8010990:	4293      	cmp	r3, r2
 8010992:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8010b28 <__ieee754_acos+0x1e8>
 8010996:	f340 80bc 	ble.w	8010b12 <__ieee754_acos+0x1d2>
 801099a:	ee20 6b00 	vmul.f64	d6, d0, d0
 801099e:	ed9f 4b64 	vldr	d4, [pc, #400]	; 8010b30 <__ieee754_acos+0x1f0>
 80109a2:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010b38 <__ieee754_acos+0x1f8>
 80109a6:	eea6 5b04 	vfma.f64	d5, d6, d4
 80109aa:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b40 <__ieee754_acos+0x200>
 80109ae:	eea5 4b06 	vfma.f64	d4, d5, d6
 80109b2:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010b48 <__ieee754_acos+0x208>
 80109b6:	eea4 5b06 	vfma.f64	d5, d4, d6
 80109ba:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b50 <__ieee754_acos+0x210>
 80109be:	eea5 4b06 	vfma.f64	d4, d5, d6
 80109c2:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010b58 <__ieee754_acos+0x218>
 80109c6:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8010b60 <__ieee754_acos+0x220>
 80109ca:	eea4 5b06 	vfma.f64	d5, d4, d6
 80109ce:	ee25 5b06 	vmul.f64	d5, d5, d6
 80109d2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b68 <__ieee754_acos+0x228>
 80109d6:	eea6 3b04 	vfma.f64	d3, d6, d4
 80109da:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8010b70 <__ieee754_acos+0x230>
 80109de:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8010b78 <__ieee754_acos+0x238>
 80109e2:	eea3 4b06 	vfma.f64	d4, d3, d6
 80109e6:	ed9f 3b66 	vldr	d3, [pc, #408]	; 8010b80 <__ieee754_acos+0x240>
 80109ea:	eea4 3b06 	vfma.f64	d3, d4, d6
 80109ee:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80109f2:	eea3 4b06 	vfma.f64	d4, d3, d6
 80109f6:	ee85 6b04 	vdiv.f64	d6, d5, d4
 80109fa:	eea0 8b46 	vfms.f64	d8, d0, d6
 80109fe:	ee30 0b48 	vsub.f64	d0, d0, d8
 8010a02:	ee37 0b40 	vsub.f64	d0, d7, d0
 8010a06:	e7b5      	b.n	8010974 <__ieee754_acos+0x34>
 8010a08:	2a00      	cmp	r2, #0
 8010a0a:	ed9f eb49 	vldr	d14, [pc, #292]	; 8010b30 <__ieee754_acos+0x1f0>
 8010a0e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8010a12:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010a16:	ed9f db48 	vldr	d13, [pc, #288]	; 8010b38 <__ieee754_acos+0x1f8>
 8010a1a:	ed9f cb49 	vldr	d12, [pc, #292]	; 8010b40 <__ieee754_acos+0x200>
 8010a1e:	ed9f bb4a 	vldr	d11, [pc, #296]	; 8010b48 <__ieee754_acos+0x208>
 8010a22:	ed9f ab4b 	vldr	d10, [pc, #300]	; 8010b50 <__ieee754_acos+0x210>
 8010a26:	ed9f fb4c 	vldr	d15, [pc, #304]	; 8010b58 <__ieee754_acos+0x218>
 8010a2a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010b60 <__ieee754_acos+0x220>
 8010a2e:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8010b70 <__ieee754_acos+0x230>
 8010a32:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8010b80 <__ieee754_acos+0x240>
 8010a36:	da2a      	bge.n	8010a8e <__ieee754_acos+0x14e>
 8010a38:	ee30 0b09 	vadd.f64	d0, d0, d9
 8010a3c:	ee20 0b08 	vmul.f64	d0, d0, d8
 8010a40:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8010b68 <__ieee754_acos+0x228>
 8010a44:	eea0 db0e 	vfma.f64	d13, d0, d14
 8010a48:	eead cb00 	vfma.f64	d12, d13, d0
 8010a4c:	eea0 3b07 	vfma.f64	d3, d0, d7
 8010a50:	eeac bb00 	vfma.f64	d11, d12, d0
 8010a54:	eea3 2b00 	vfma.f64	d2, d3, d0
 8010a58:	eeab ab00 	vfma.f64	d10, d11, d0
 8010a5c:	eea2 1b00 	vfma.f64	d1, d2, d0
 8010a60:	eeaa fb00 	vfma.f64	d15, d10, d0
 8010a64:	eea1 9b00 	vfma.f64	d9, d1, d0
 8010a68:	ee2f fb00 	vmul.f64	d15, d15, d0
 8010a6c:	f000 f896 	bl	8010b9c <__ieee754_sqrt>
 8010a70:	ee8f 6b09 	vdiv.f64	d6, d15, d9
 8010a74:	ed9f 7b44 	vldr	d7, [pc, #272]	; 8010b88 <__ieee754_acos+0x248>
 8010a78:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010a7c:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010a80:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8010b20 <__ieee754_acos+0x1e0>
 8010a84:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8010a88:	eea7 0b46 	vfms.f64	d0, d7, d6
 8010a8c:	e772      	b.n	8010974 <__ieee754_acos+0x34>
 8010a8e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8010a92:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010a96:	eeb0 0b48 	vmov.f64	d0, d8
 8010a9a:	ed8d 1b04 	vstr	d1, [sp, #16]
 8010a9e:	ed8d 2b02 	vstr	d2, [sp, #8]
 8010aa2:	ed8d 3b00 	vstr	d3, [sp]
 8010aa6:	f000 f879 	bl	8010b9c <__ieee754_sqrt>
 8010aaa:	eeb0 5b48 	vmov.f64	d5, d8
 8010aae:	eea8 db0e 	vfma.f64	d13, d8, d14
 8010ab2:	ec53 2b10 	vmov	r2, r3, d0
 8010ab6:	eead cb08 	vfma.f64	d12, d13, d8
 8010aba:	2200      	movs	r2, #0
 8010abc:	ec43 2b17 	vmov	d7, r2, r3
 8010ac0:	eeac bb08 	vfma.f64	d11, d12, d8
 8010ac4:	ee30 6b07 	vadd.f64	d6, d0, d7
 8010ac8:	eea7 5b47 	vfms.f64	d5, d7, d7
 8010acc:	ed9d 3b00 	vldr	d3, [sp]
 8010ad0:	ee85 4b06 	vdiv.f64	d4, d5, d6
 8010ad4:	eeab ab08 	vfma.f64	d10, d11, d8
 8010ad8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8010b68 <__ieee754_acos+0x228>
 8010adc:	eeaa fb08 	vfma.f64	d15, d10, d8
 8010ae0:	ee2f fb08 	vmul.f64	d15, d15, d8
 8010ae4:	ed9d 2b02 	vldr	d2, [sp, #8]
 8010ae8:	eea8 3b06 	vfma.f64	d3, d8, d6
 8010aec:	eeb0 6b44 	vmov.f64	d6, d4
 8010af0:	ed9d 1b04 	vldr	d1, [sp, #16]
 8010af4:	eea3 2b08 	vfma.f64	d2, d3, d8
 8010af8:	eea2 1b08 	vfma.f64	d1, d2, d8
 8010afc:	eea1 9b08 	vfma.f64	d9, d1, d8
 8010b00:	ee8f 5b09 	vdiv.f64	d5, d15, d9
 8010b04:	eea0 6b05 	vfma.f64	d6, d0, d5
 8010b08:	ee37 0b06 	vadd.f64	d0, d7, d6
 8010b0c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010b10:	e730      	b.n	8010974 <__ieee754_acos+0x34>
 8010b12:	eeb0 0b47 	vmov.f64	d0, d7
 8010b16:	e72d      	b.n	8010974 <__ieee754_acos+0x34>
	...
 8010b20:	54442d18 	.word	0x54442d18
 8010b24:	400921fb 	.word	0x400921fb
 8010b28:	54442d18 	.word	0x54442d18
 8010b2c:	3ff921fb 	.word	0x3ff921fb
 8010b30:	0dfdf709 	.word	0x0dfdf709
 8010b34:	3f023de1 	.word	0x3f023de1
 8010b38:	7501b288 	.word	0x7501b288
 8010b3c:	3f49efe0 	.word	0x3f49efe0
 8010b40:	b5688f3b 	.word	0xb5688f3b
 8010b44:	bfa48228 	.word	0xbfa48228
 8010b48:	0e884455 	.word	0x0e884455
 8010b4c:	3fc9c155 	.word	0x3fc9c155
 8010b50:	03eb6f7d 	.word	0x03eb6f7d
 8010b54:	bfd4d612 	.word	0xbfd4d612
 8010b58:	55555555 	.word	0x55555555
 8010b5c:	3fc55555 	.word	0x3fc55555
 8010b60:	1b8d0159 	.word	0x1b8d0159
 8010b64:	bfe6066c 	.word	0xbfe6066c
 8010b68:	b12e9282 	.word	0xb12e9282
 8010b6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010b70:	9c598ac8 	.word	0x9c598ac8
 8010b74:	40002ae5 	.word	0x40002ae5
 8010b78:	33145c07 	.word	0x33145c07
 8010b7c:	3c91a626 	.word	0x3c91a626
 8010b80:	1c8a2d4b 	.word	0x1c8a2d4b
 8010b84:	c0033a27 	.word	0xc0033a27
 8010b88:	33145c07 	.word	0x33145c07
 8010b8c:	bc91a626 	.word	0xbc91a626
 8010b90:	3fefffff 	.word	0x3fefffff
 8010b94:	3fdfffff 	.word	0x3fdfffff
 8010b98:	3c600000 	.word	0x3c600000

08010b9c <__ieee754_sqrt>:
 8010b9c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010ba0:	4770      	bx	lr

08010ba2 <with_errno>:
 8010ba2:	b513      	push	{r0, r1, r4, lr}
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	ed8d 0b00 	vstr	d0, [sp]
 8010baa:	f000 f87d 	bl	8010ca8 <__errno>
 8010bae:	ed9d 0b00 	vldr	d0, [sp]
 8010bb2:	6004      	str	r4, [r0, #0]
 8010bb4:	b002      	add	sp, #8
 8010bb6:	bd10      	pop	{r4, pc}

08010bb8 <xflow>:
 8010bb8:	b082      	sub	sp, #8
 8010bba:	b158      	cbz	r0, 8010bd4 <xflow+0x1c>
 8010bbc:	eeb1 7b40 	vneg.f64	d7, d0
 8010bc0:	ed8d 7b00 	vstr	d7, [sp]
 8010bc4:	ed9d 7b00 	vldr	d7, [sp]
 8010bc8:	2022      	movs	r0, #34	; 0x22
 8010bca:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010bce:	b002      	add	sp, #8
 8010bd0:	f7ff bfe7 	b.w	8010ba2 <with_errno>
 8010bd4:	eeb0 7b40 	vmov.f64	d7, d0
 8010bd8:	e7f2      	b.n	8010bc0 <xflow+0x8>
 8010bda:	0000      	movs	r0, r0
 8010bdc:	0000      	movs	r0, r0
	...

08010be0 <__math_uflow>:
 8010be0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010be8 <__math_uflow+0x8>
 8010be4:	f7ff bfe8 	b.w	8010bb8 <xflow>
 8010be8:	00000000 	.word	0x00000000
 8010bec:	10000000 	.word	0x10000000

08010bf0 <__math_oflow>:
 8010bf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010bf8 <__math_oflow+0x8>
 8010bf4:	f7ff bfe0 	b.w	8010bb8 <xflow>
 8010bf8:	00000000 	.word	0x00000000
 8010bfc:	70000000 	.word	0x70000000

08010c00 <__math_divzero>:
 8010c00:	b082      	sub	sp, #8
 8010c02:	2800      	cmp	r0, #0
 8010c04:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010c08:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010c0c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010c10:	ed8d 7b00 	vstr	d7, [sp]
 8010c14:	ed9d 0b00 	vldr	d0, [sp]
 8010c18:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010c28 <__math_divzero+0x28>
 8010c1c:	2022      	movs	r0, #34	; 0x22
 8010c1e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010c22:	b002      	add	sp, #8
 8010c24:	f7ff bfbd 	b.w	8010ba2 <with_errno>
	...

08010c30 <__math_invalid>:
 8010c30:	eeb0 7b40 	vmov.f64	d7, d0
 8010c34:	eeb4 7b47 	vcmp.f64	d7, d7
 8010c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010c40:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010c44:	d602      	bvs.n	8010c4c <__math_invalid+0x1c>
 8010c46:	2021      	movs	r0, #33	; 0x21
 8010c48:	f7ff bfab 	b.w	8010ba2 <with_errno>
 8010c4c:	4770      	bx	lr

08010c4e <__math_check_uflow>:
 8010c4e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c56:	d102      	bne.n	8010c5e <__math_check_uflow+0x10>
 8010c58:	2022      	movs	r0, #34	; 0x22
 8010c5a:	f7ff bfa2 	b.w	8010ba2 <with_errno>
 8010c5e:	4770      	bx	lr

08010c60 <__math_check_oflow>:
 8010c60:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010c80 <__math_check_oflow+0x20>
 8010c64:	eeb0 7bc0 	vabs.f64	d7, d0
 8010c68:	eeb4 7b46 	vcmp.f64	d7, d6
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	dd02      	ble.n	8010c78 <__math_check_oflow+0x18>
 8010c72:	2022      	movs	r0, #34	; 0x22
 8010c74:	f7ff bf95 	b.w	8010ba2 <with_errno>
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	f3af 8000 	nop.w
 8010c80:	ffffffff 	.word	0xffffffff
 8010c84:	7fefffff 	.word	0x7fefffff

08010c88 <nan>:
 8010c88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010c90 <nan+0x8>
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	00000000 	.word	0x00000000
 8010c94:	7ff80000 	.word	0x7ff80000

08010c98 <abort>:
 8010c98:	b508      	push	{r3, lr}
 8010c9a:	2006      	movs	r0, #6
 8010c9c:	f000 f874 	bl	8010d88 <raise>
 8010ca0:	2001      	movs	r0, #1
 8010ca2:	f7f5 fbff 	bl	80064a4 <_exit>
	...

08010ca8 <__errno>:
 8010ca8:	4b01      	ldr	r3, [pc, #4]	; (8010cb0 <__errno+0x8>)
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop
 8010cb0:	24000018 	.word	0x24000018

08010cb4 <__libc_init_array>:
 8010cb4:	b570      	push	{r4, r5, r6, lr}
 8010cb6:	4d0d      	ldr	r5, [pc, #52]	; (8010cec <__libc_init_array+0x38>)
 8010cb8:	4c0d      	ldr	r4, [pc, #52]	; (8010cf0 <__libc_init_array+0x3c>)
 8010cba:	1b64      	subs	r4, r4, r5
 8010cbc:	10a4      	asrs	r4, r4, #2
 8010cbe:	2600      	movs	r6, #0
 8010cc0:	42a6      	cmp	r6, r4
 8010cc2:	d109      	bne.n	8010cd8 <__libc_init_array+0x24>
 8010cc4:	4d0b      	ldr	r5, [pc, #44]	; (8010cf4 <__libc_init_array+0x40>)
 8010cc6:	4c0c      	ldr	r4, [pc, #48]	; (8010cf8 <__libc_init_array+0x44>)
 8010cc8:	f000 f9b0 	bl	801102c <_init>
 8010ccc:	1b64      	subs	r4, r4, r5
 8010cce:	10a4      	asrs	r4, r4, #2
 8010cd0:	2600      	movs	r6, #0
 8010cd2:	42a6      	cmp	r6, r4
 8010cd4:	d105      	bne.n	8010ce2 <__libc_init_array+0x2e>
 8010cd6:	bd70      	pop	{r4, r5, r6, pc}
 8010cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cdc:	4798      	blx	r3
 8010cde:	3601      	adds	r6, #1
 8010ce0:	e7ee      	b.n	8010cc0 <__libc_init_array+0xc>
 8010ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ce6:	4798      	blx	r3
 8010ce8:	3601      	adds	r6, #1
 8010cea:	e7f2      	b.n	8010cd2 <__libc_init_array+0x1e>
 8010cec:	08012cd8 	.word	0x08012cd8
 8010cf0:	08012cd8 	.word	0x08012cd8
 8010cf4:	08012cd8 	.word	0x08012cd8
 8010cf8:	08012cec 	.word	0x08012cec

08010cfc <memcpy>:
 8010cfc:	440a      	add	r2, r1
 8010cfe:	4291      	cmp	r1, r2
 8010d00:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d04:	d100      	bne.n	8010d08 <memcpy+0xc>
 8010d06:	4770      	bx	lr
 8010d08:	b510      	push	{r4, lr}
 8010d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d12:	4291      	cmp	r1, r2
 8010d14:	d1f9      	bne.n	8010d0a <memcpy+0xe>
 8010d16:	bd10      	pop	{r4, pc}

08010d18 <memset>:
 8010d18:	4402      	add	r2, r0
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	d100      	bne.n	8010d22 <memset+0xa>
 8010d20:	4770      	bx	lr
 8010d22:	f803 1b01 	strb.w	r1, [r3], #1
 8010d26:	e7f9      	b.n	8010d1c <memset+0x4>

08010d28 <realloc>:
 8010d28:	4b02      	ldr	r3, [pc, #8]	; (8010d34 <realloc+0xc>)
 8010d2a:	460a      	mov	r2, r1
 8010d2c:	4601      	mov	r1, r0
 8010d2e:	6818      	ldr	r0, [r3, #0]
 8010d30:	f000 b8da 	b.w	8010ee8 <_realloc_r>
 8010d34:	24000018 	.word	0x24000018

08010d38 <_raise_r>:
 8010d38:	291f      	cmp	r1, #31
 8010d3a:	b538      	push	{r3, r4, r5, lr}
 8010d3c:	4604      	mov	r4, r0
 8010d3e:	460d      	mov	r5, r1
 8010d40:	d904      	bls.n	8010d4c <_raise_r+0x14>
 8010d42:	2316      	movs	r3, #22
 8010d44:	6003      	str	r3, [r0, #0]
 8010d46:	f04f 30ff 	mov.w	r0, #4294967295
 8010d4a:	bd38      	pop	{r3, r4, r5, pc}
 8010d4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d4e:	b112      	cbz	r2, 8010d56 <_raise_r+0x1e>
 8010d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d54:	b94b      	cbnz	r3, 8010d6a <_raise_r+0x32>
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 f830 	bl	8010dbc <_getpid_r>
 8010d5c:	462a      	mov	r2, r5
 8010d5e:	4601      	mov	r1, r0
 8010d60:	4620      	mov	r0, r4
 8010d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d66:	f000 b817 	b.w	8010d98 <_kill_r>
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	d00a      	beq.n	8010d84 <_raise_r+0x4c>
 8010d6e:	1c59      	adds	r1, r3, #1
 8010d70:	d103      	bne.n	8010d7a <_raise_r+0x42>
 8010d72:	2316      	movs	r3, #22
 8010d74:	6003      	str	r3, [r0, #0]
 8010d76:	2001      	movs	r0, #1
 8010d78:	e7e7      	b.n	8010d4a <_raise_r+0x12>
 8010d7a:	2400      	movs	r4, #0
 8010d7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d80:	4628      	mov	r0, r5
 8010d82:	4798      	blx	r3
 8010d84:	2000      	movs	r0, #0
 8010d86:	e7e0      	b.n	8010d4a <_raise_r+0x12>

08010d88 <raise>:
 8010d88:	4b02      	ldr	r3, [pc, #8]	; (8010d94 <raise+0xc>)
 8010d8a:	4601      	mov	r1, r0
 8010d8c:	6818      	ldr	r0, [r3, #0]
 8010d8e:	f7ff bfd3 	b.w	8010d38 <_raise_r>
 8010d92:	bf00      	nop
 8010d94:	24000018 	.word	0x24000018

08010d98 <_kill_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	; (8010db8 <_kill_r+0x20>)
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4604      	mov	r4, r0
 8010da0:	4608      	mov	r0, r1
 8010da2:	4611      	mov	r1, r2
 8010da4:	602b      	str	r3, [r5, #0]
 8010da6:	f7f5 fb6d 	bl	8006484 <_kill>
 8010daa:	1c43      	adds	r3, r0, #1
 8010dac:	d102      	bne.n	8010db4 <_kill_r+0x1c>
 8010dae:	682b      	ldr	r3, [r5, #0]
 8010db0:	b103      	cbz	r3, 8010db4 <_kill_r+0x1c>
 8010db2:	6023      	str	r3, [r4, #0]
 8010db4:	bd38      	pop	{r3, r4, r5, pc}
 8010db6:	bf00      	nop
 8010db8:	24002334 	.word	0x24002334

08010dbc <_getpid_r>:
 8010dbc:	f7f5 bb5a 	b.w	8006474 <_getpid>

08010dc0 <sbrk_aligned>:
 8010dc0:	b570      	push	{r4, r5, r6, lr}
 8010dc2:	4e0e      	ldr	r6, [pc, #56]	; (8010dfc <sbrk_aligned+0x3c>)
 8010dc4:	460c      	mov	r4, r1
 8010dc6:	6831      	ldr	r1, [r6, #0]
 8010dc8:	4605      	mov	r5, r0
 8010dca:	b911      	cbnz	r1, 8010dd2 <sbrk_aligned+0x12>
 8010dcc:	f000 f8bc 	bl	8010f48 <_sbrk_r>
 8010dd0:	6030      	str	r0, [r6, #0]
 8010dd2:	4621      	mov	r1, r4
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	f000 f8b7 	bl	8010f48 <_sbrk_r>
 8010dda:	1c43      	adds	r3, r0, #1
 8010ddc:	d00a      	beq.n	8010df4 <sbrk_aligned+0x34>
 8010dde:	1cc4      	adds	r4, r0, #3
 8010de0:	f024 0403 	bic.w	r4, r4, #3
 8010de4:	42a0      	cmp	r0, r4
 8010de6:	d007      	beq.n	8010df8 <sbrk_aligned+0x38>
 8010de8:	1a21      	subs	r1, r4, r0
 8010dea:	4628      	mov	r0, r5
 8010dec:	f000 f8ac 	bl	8010f48 <_sbrk_r>
 8010df0:	3001      	adds	r0, #1
 8010df2:	d101      	bne.n	8010df8 <sbrk_aligned+0x38>
 8010df4:	f04f 34ff 	mov.w	r4, #4294967295
 8010df8:	4620      	mov	r0, r4
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	24002330 	.word	0x24002330

08010e00 <_malloc_r>:
 8010e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e04:	1ccd      	adds	r5, r1, #3
 8010e06:	f025 0503 	bic.w	r5, r5, #3
 8010e0a:	3508      	adds	r5, #8
 8010e0c:	2d0c      	cmp	r5, #12
 8010e0e:	bf38      	it	cc
 8010e10:	250c      	movcc	r5, #12
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	4607      	mov	r7, r0
 8010e16:	db01      	blt.n	8010e1c <_malloc_r+0x1c>
 8010e18:	42a9      	cmp	r1, r5
 8010e1a:	d905      	bls.n	8010e28 <_malloc_r+0x28>
 8010e1c:	230c      	movs	r3, #12
 8010e1e:	603b      	str	r3, [r7, #0]
 8010e20:	2600      	movs	r6, #0
 8010e22:	4630      	mov	r0, r6
 8010e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e28:	4e2e      	ldr	r6, [pc, #184]	; (8010ee4 <_malloc_r+0xe4>)
 8010e2a:	f000 f89d 	bl	8010f68 <__malloc_lock>
 8010e2e:	6833      	ldr	r3, [r6, #0]
 8010e30:	461c      	mov	r4, r3
 8010e32:	bb34      	cbnz	r4, 8010e82 <_malloc_r+0x82>
 8010e34:	4629      	mov	r1, r5
 8010e36:	4638      	mov	r0, r7
 8010e38:	f7ff ffc2 	bl	8010dc0 <sbrk_aligned>
 8010e3c:	1c43      	adds	r3, r0, #1
 8010e3e:	4604      	mov	r4, r0
 8010e40:	d14d      	bne.n	8010ede <_malloc_r+0xde>
 8010e42:	6834      	ldr	r4, [r6, #0]
 8010e44:	4626      	mov	r6, r4
 8010e46:	2e00      	cmp	r6, #0
 8010e48:	d140      	bne.n	8010ecc <_malloc_r+0xcc>
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	4631      	mov	r1, r6
 8010e4e:	4638      	mov	r0, r7
 8010e50:	eb04 0803 	add.w	r8, r4, r3
 8010e54:	f000 f878 	bl	8010f48 <_sbrk_r>
 8010e58:	4580      	cmp	r8, r0
 8010e5a:	d13a      	bne.n	8010ed2 <_malloc_r+0xd2>
 8010e5c:	6821      	ldr	r1, [r4, #0]
 8010e5e:	3503      	adds	r5, #3
 8010e60:	1a6d      	subs	r5, r5, r1
 8010e62:	f025 0503 	bic.w	r5, r5, #3
 8010e66:	3508      	adds	r5, #8
 8010e68:	2d0c      	cmp	r5, #12
 8010e6a:	bf38      	it	cc
 8010e6c:	250c      	movcc	r5, #12
 8010e6e:	4629      	mov	r1, r5
 8010e70:	4638      	mov	r0, r7
 8010e72:	f7ff ffa5 	bl	8010dc0 <sbrk_aligned>
 8010e76:	3001      	adds	r0, #1
 8010e78:	d02b      	beq.n	8010ed2 <_malloc_r+0xd2>
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	442b      	add	r3, r5
 8010e7e:	6023      	str	r3, [r4, #0]
 8010e80:	e00e      	b.n	8010ea0 <_malloc_r+0xa0>
 8010e82:	6822      	ldr	r2, [r4, #0]
 8010e84:	1b52      	subs	r2, r2, r5
 8010e86:	d41e      	bmi.n	8010ec6 <_malloc_r+0xc6>
 8010e88:	2a0b      	cmp	r2, #11
 8010e8a:	d916      	bls.n	8010eba <_malloc_r+0xba>
 8010e8c:	1961      	adds	r1, r4, r5
 8010e8e:	42a3      	cmp	r3, r4
 8010e90:	6025      	str	r5, [r4, #0]
 8010e92:	bf18      	it	ne
 8010e94:	6059      	strne	r1, [r3, #4]
 8010e96:	6863      	ldr	r3, [r4, #4]
 8010e98:	bf08      	it	eq
 8010e9a:	6031      	streq	r1, [r6, #0]
 8010e9c:	5162      	str	r2, [r4, r5]
 8010e9e:	604b      	str	r3, [r1, #4]
 8010ea0:	4638      	mov	r0, r7
 8010ea2:	f104 060b 	add.w	r6, r4, #11
 8010ea6:	f000 f865 	bl	8010f74 <__malloc_unlock>
 8010eaa:	f026 0607 	bic.w	r6, r6, #7
 8010eae:	1d23      	adds	r3, r4, #4
 8010eb0:	1af2      	subs	r2, r6, r3
 8010eb2:	d0b6      	beq.n	8010e22 <_malloc_r+0x22>
 8010eb4:	1b9b      	subs	r3, r3, r6
 8010eb6:	50a3      	str	r3, [r4, r2]
 8010eb8:	e7b3      	b.n	8010e22 <_malloc_r+0x22>
 8010eba:	6862      	ldr	r2, [r4, #4]
 8010ebc:	42a3      	cmp	r3, r4
 8010ebe:	bf0c      	ite	eq
 8010ec0:	6032      	streq	r2, [r6, #0]
 8010ec2:	605a      	strne	r2, [r3, #4]
 8010ec4:	e7ec      	b.n	8010ea0 <_malloc_r+0xa0>
 8010ec6:	4623      	mov	r3, r4
 8010ec8:	6864      	ldr	r4, [r4, #4]
 8010eca:	e7b2      	b.n	8010e32 <_malloc_r+0x32>
 8010ecc:	4634      	mov	r4, r6
 8010ece:	6876      	ldr	r6, [r6, #4]
 8010ed0:	e7b9      	b.n	8010e46 <_malloc_r+0x46>
 8010ed2:	230c      	movs	r3, #12
 8010ed4:	603b      	str	r3, [r7, #0]
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	f000 f84c 	bl	8010f74 <__malloc_unlock>
 8010edc:	e7a1      	b.n	8010e22 <_malloc_r+0x22>
 8010ede:	6025      	str	r5, [r4, #0]
 8010ee0:	e7de      	b.n	8010ea0 <_malloc_r+0xa0>
 8010ee2:	bf00      	nop
 8010ee4:	2400232c 	.word	0x2400232c

08010ee8 <_realloc_r>:
 8010ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eec:	4680      	mov	r8, r0
 8010eee:	4614      	mov	r4, r2
 8010ef0:	460e      	mov	r6, r1
 8010ef2:	b921      	cbnz	r1, 8010efe <_realloc_r+0x16>
 8010ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef8:	4611      	mov	r1, r2
 8010efa:	f7ff bf81 	b.w	8010e00 <_malloc_r>
 8010efe:	b92a      	cbnz	r2, 8010f0c <_realloc_r+0x24>
 8010f00:	f000 f83e 	bl	8010f80 <_free_r>
 8010f04:	4625      	mov	r5, r4
 8010f06:	4628      	mov	r0, r5
 8010f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f0c:	f000 f884 	bl	8011018 <_malloc_usable_size_r>
 8010f10:	4284      	cmp	r4, r0
 8010f12:	4607      	mov	r7, r0
 8010f14:	d802      	bhi.n	8010f1c <_realloc_r+0x34>
 8010f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f1a:	d812      	bhi.n	8010f42 <_realloc_r+0x5a>
 8010f1c:	4621      	mov	r1, r4
 8010f1e:	4640      	mov	r0, r8
 8010f20:	f7ff ff6e 	bl	8010e00 <_malloc_r>
 8010f24:	4605      	mov	r5, r0
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d0ed      	beq.n	8010f06 <_realloc_r+0x1e>
 8010f2a:	42bc      	cmp	r4, r7
 8010f2c:	4622      	mov	r2, r4
 8010f2e:	4631      	mov	r1, r6
 8010f30:	bf28      	it	cs
 8010f32:	463a      	movcs	r2, r7
 8010f34:	f7ff fee2 	bl	8010cfc <memcpy>
 8010f38:	4631      	mov	r1, r6
 8010f3a:	4640      	mov	r0, r8
 8010f3c:	f000 f820 	bl	8010f80 <_free_r>
 8010f40:	e7e1      	b.n	8010f06 <_realloc_r+0x1e>
 8010f42:	4635      	mov	r5, r6
 8010f44:	e7df      	b.n	8010f06 <_realloc_r+0x1e>
	...

08010f48 <_sbrk_r>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	4d06      	ldr	r5, [pc, #24]	; (8010f64 <_sbrk_r+0x1c>)
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4608      	mov	r0, r1
 8010f52:	602b      	str	r3, [r5, #0]
 8010f54:	f7f5 fab0 	bl	80064b8 <_sbrk>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	d102      	bne.n	8010f62 <_sbrk_r+0x1a>
 8010f5c:	682b      	ldr	r3, [r5, #0]
 8010f5e:	b103      	cbz	r3, 8010f62 <_sbrk_r+0x1a>
 8010f60:	6023      	str	r3, [r4, #0]
 8010f62:	bd38      	pop	{r3, r4, r5, pc}
 8010f64:	24002334 	.word	0x24002334

08010f68 <__malloc_lock>:
 8010f68:	4801      	ldr	r0, [pc, #4]	; (8010f70 <__malloc_lock+0x8>)
 8010f6a:	f000 b85d 	b.w	8011028 <__retarget_lock_acquire_recursive>
 8010f6e:	bf00      	nop
 8010f70:	24002338 	.word	0x24002338

08010f74 <__malloc_unlock>:
 8010f74:	4801      	ldr	r0, [pc, #4]	; (8010f7c <__malloc_unlock+0x8>)
 8010f76:	f000 b858 	b.w	801102a <__retarget_lock_release_recursive>
 8010f7a:	bf00      	nop
 8010f7c:	24002338 	.word	0x24002338

08010f80 <_free_r>:
 8010f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f82:	2900      	cmp	r1, #0
 8010f84:	d044      	beq.n	8011010 <_free_r+0x90>
 8010f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f8a:	9001      	str	r0, [sp, #4]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8010f92:	bfb8      	it	lt
 8010f94:	18e4      	addlt	r4, r4, r3
 8010f96:	f7ff ffe7 	bl	8010f68 <__malloc_lock>
 8010f9a:	4a1e      	ldr	r2, [pc, #120]	; (8011014 <_free_r+0x94>)
 8010f9c:	9801      	ldr	r0, [sp, #4]
 8010f9e:	6813      	ldr	r3, [r2, #0]
 8010fa0:	b933      	cbnz	r3, 8010fb0 <_free_r+0x30>
 8010fa2:	6063      	str	r3, [r4, #4]
 8010fa4:	6014      	str	r4, [r2, #0]
 8010fa6:	b003      	add	sp, #12
 8010fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fac:	f7ff bfe2 	b.w	8010f74 <__malloc_unlock>
 8010fb0:	42a3      	cmp	r3, r4
 8010fb2:	d908      	bls.n	8010fc6 <_free_r+0x46>
 8010fb4:	6825      	ldr	r5, [r4, #0]
 8010fb6:	1961      	adds	r1, r4, r5
 8010fb8:	428b      	cmp	r3, r1
 8010fba:	bf01      	itttt	eq
 8010fbc:	6819      	ldreq	r1, [r3, #0]
 8010fbe:	685b      	ldreq	r3, [r3, #4]
 8010fc0:	1949      	addeq	r1, r1, r5
 8010fc2:	6021      	streq	r1, [r4, #0]
 8010fc4:	e7ed      	b.n	8010fa2 <_free_r+0x22>
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	b10b      	cbz	r3, 8010fd0 <_free_r+0x50>
 8010fcc:	42a3      	cmp	r3, r4
 8010fce:	d9fa      	bls.n	8010fc6 <_free_r+0x46>
 8010fd0:	6811      	ldr	r1, [r2, #0]
 8010fd2:	1855      	adds	r5, r2, r1
 8010fd4:	42a5      	cmp	r5, r4
 8010fd6:	d10b      	bne.n	8010ff0 <_free_r+0x70>
 8010fd8:	6824      	ldr	r4, [r4, #0]
 8010fda:	4421      	add	r1, r4
 8010fdc:	1854      	adds	r4, r2, r1
 8010fde:	42a3      	cmp	r3, r4
 8010fe0:	6011      	str	r1, [r2, #0]
 8010fe2:	d1e0      	bne.n	8010fa6 <_free_r+0x26>
 8010fe4:	681c      	ldr	r4, [r3, #0]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	6053      	str	r3, [r2, #4]
 8010fea:	4421      	add	r1, r4
 8010fec:	6011      	str	r1, [r2, #0]
 8010fee:	e7da      	b.n	8010fa6 <_free_r+0x26>
 8010ff0:	d902      	bls.n	8010ff8 <_free_r+0x78>
 8010ff2:	230c      	movs	r3, #12
 8010ff4:	6003      	str	r3, [r0, #0]
 8010ff6:	e7d6      	b.n	8010fa6 <_free_r+0x26>
 8010ff8:	6825      	ldr	r5, [r4, #0]
 8010ffa:	1961      	adds	r1, r4, r5
 8010ffc:	428b      	cmp	r3, r1
 8010ffe:	bf04      	itt	eq
 8011000:	6819      	ldreq	r1, [r3, #0]
 8011002:	685b      	ldreq	r3, [r3, #4]
 8011004:	6063      	str	r3, [r4, #4]
 8011006:	bf04      	itt	eq
 8011008:	1949      	addeq	r1, r1, r5
 801100a:	6021      	streq	r1, [r4, #0]
 801100c:	6054      	str	r4, [r2, #4]
 801100e:	e7ca      	b.n	8010fa6 <_free_r+0x26>
 8011010:	b003      	add	sp, #12
 8011012:	bd30      	pop	{r4, r5, pc}
 8011014:	2400232c 	.word	0x2400232c

08011018 <_malloc_usable_size_r>:
 8011018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801101c:	1f18      	subs	r0, r3, #4
 801101e:	2b00      	cmp	r3, #0
 8011020:	bfbc      	itt	lt
 8011022:	580b      	ldrlt	r3, [r1, r0]
 8011024:	18c0      	addlt	r0, r0, r3
 8011026:	4770      	bx	lr

08011028 <__retarget_lock_acquire_recursive>:
 8011028:	4770      	bx	lr

0801102a <__retarget_lock_release_recursive>:
 801102a:	4770      	bx	lr

0801102c <_init>:
 801102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801102e:	bf00      	nop
 8011030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011032:	bc08      	pop	{r3}
 8011034:	469e      	mov	lr, r3
 8011036:	4770      	bx	lr

08011038 <_fini>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	bf00      	nop
 801103c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801103e:	bc08      	pop	{r3}
 8011040:	469e      	mov	lr, r3
 8011042:	4770      	bx	lr
