
TEL_STM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e15c  0800e15c  0001e15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0800e164  0800e164  0001e164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e174  0800e174  0001e174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800e178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001828  24000080  0800e1f4  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240018a8  0800e1f4  000218a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002696f  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004405  00000000  00000000  00046a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001548  00000000  00000000  0004ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013f8  00000000  00000000  0004c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035af2  00000000  00000000  0004d760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d049  00000000  00000000  00083252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153b7f  00000000  00000000  000a029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f3e1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d70  00000000  00000000  001f3e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000080 	.word	0x24000080
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800de98 	.word	0x0800de98

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000084 	.word	0x24000084
 800030c:	0800de98 	.word	0x0800de98

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00

0800067c <_Z13DC_motor_initv>:
DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
DC_motor bl(0, 0, 0, 0.001, 41296, 200);


void DC_motor_init(){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <_Z13DC_motor_initv+0x70>)
 8000684:	f00a f92a 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8000688:	2104      	movs	r1, #4
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <_Z13DC_motor_initv+0x70>)
 800068c:	f00a f926 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 8000694:	f00a f922 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <_Z13DC_motor_initv+0x74>)
 800069c:	f00a f91e 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80006a0:	2100      	movs	r1, #0
 80006a2:	4814      	ldr	r0, [pc, #80]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006a4:	f00a f91a 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <_Z13DC_motor_initv+0x78>)
 80006ac:	f00a f916 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006b4:	f00a f912 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80006b8:	2104      	movs	r1, #4
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <_Z13DC_motor_initv+0x7c>)
 80006bc:	f00a f90e 	bl	800a8dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <_Z13DC_motor_initv+0x80>)
 80006c2:	f009 fe1f 	bl	800a304 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006ca:	f009 fef9 	bl	800a4c0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <_Z13DC_motor_initv+0x84>)
 80006d2:	f009 fef5 	bl	800a4c0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_2);
 80006d6:	2104      	movs	r1, #4
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006da:	f009 fef1 	bl	800a4c0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 80006de:	2100      	movs	r1, #0
 80006e0:	4808      	ldr	r0, [pc, #32]	; (8000704 <_Z13DC_motor_initv+0x88>)
 80006e2:	f009 feed 	bl	800a4c0 <HAL_TIM_PWM_Start_IT>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	24000300 	.word	0x24000300
 80006f0:	240003e4 	.word	0x240003e4
 80006f4:	2400034c 	.word	0x2400034c
 80006f8:	24000398 	.word	0x24000398
 80006fc:	2400047c 	.word	0x2400047c
 8000700:	24000430 	.word	0x24000430
 8000704:	240004c8 	.word	0x240004c8

08000708 <_ZN8DC_motorC1Edddddd>:
	this->res_encoder = res;
	this->sr_ratio = ratio;
	this->I_limit=limit;
}

DC_motor::DC_motor(double p, double i, double d, double time, double cnt_round, double limit){
 8000708:	b480      	push	{r7}
 800070a:	b08f      	sub	sp, #60	; 0x3c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6378      	str	r0, [r7, #52]	; 0x34
 8000710:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000714:	ed87 1b08 	vstr	d1, [r7, #32]
 8000718:	ed87 2b06 	vstr	d2, [r7, #24]
 800071c:	ed87 3b04 	vstr	d3, [r7, #16]
 8000720:	ed87 4b02 	vstr	d4, [r7, #8]
 8000724:	ed87 5b00 	vstr	d5, [r7]
 8000728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072a:	2200      	movs	r2, #0
 800072c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	this->p = p;
 8000730:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000736:	e9c1 2300 	strd	r2, r3, [r1]
	this->i = i;
 800073a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800073c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000740:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->d = d;
 8000744:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800074a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	this->time = time;
 800074e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000750:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000754:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	this->cnt_round = cnt_round;
 8000758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800075a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800075e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	this->I_limit=limit;
 8000762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000768:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 800076c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800076e:	4618      	mov	r0, r3
 8000770:	373c      	adds	r7, #60	; 0x3c
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <_ZN8DC_motor17PIDControl_manualEv>:

double DC_motor::PIDControl_manual(void){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	pid_check++;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	temp = error;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
	rps_now = (double) CountNow / cnt_round / time;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 80007a4:	ee07 3a90 	vmov	s15, r3
 80007a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 80007b2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80007bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	error = rps_goal - rps_now;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80007d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	P = p * error;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	ed93 6b00 	vldr	d6, [r3]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80007e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	ed83 7b02 	vstr	d7, [r3, #8]
	sum = i * error * time;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	ed93 6b04 	vldr	d6, [r3, #16]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80007fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8000808:	ee26 7b07 	vmul.f64	d7, d6, d7
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	I = I + sum;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	ed93 6b06 	vldr	d6, [r3, #24]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800081e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	ed83 7b06 	vstr	d7, [r3, #24]
	if (rps_now == 0) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800082e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000836:	d106      	bne.n	8000846 <_ZN8DC_motor17PIDControl_manualEv+0xca>
		I = 0;
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I >= I_limit) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	ed93 6b06 	vldr	d6, [r3, #24]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000852:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085a:	db05      	blt.n	8000868 <_ZN8DC_motor17PIDControl_manualEv+0xec>
		I = I_limit;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}
	if (I < -I_limit) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	ed93 6b06 	vldr	d6, [r3, #24]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000874:	eeb1 7b47 	vneg.f64	d7, d7
 8000878:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800087c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000880:	d507      	bpl.n	8000892 <_ZN8DC_motor17PIDControl_manualEv+0x116>
		I = -I_limit;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	ed93 7b1e 	vldr	d7, [r3, #120]	; 0x78
 8000888:	eeb1 7b47 	vneg.f64	d7, d7
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	ed83 7b06 	vstr	d7, [r3, #24]
	}
	D = d * (error - temp) / time;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	ed93 6b08 	vldr	d6, [r3, #32]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 80008a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80008a8:	ee26 5b07 	vmul.f64	d5, d6, d7
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80008b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	PID = P + I + D;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	ed93 6b02 	vldr	d6, [r3, #8]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	ed93 7b06 	vldr	d7, [r3, #24]
 80008c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80008d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30

	if(PID>1) PID=1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80008e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80008e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ee:	dd05      	ble.n	80008fc <_ZN8DC_motor17PIDControl_manualEv+0x180>
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	f04f 0200 	mov.w	r2, #0
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <_ZN8DC_motor17PIDControl_manualEv+0x1b8>)
 80008f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	if(PID<-1) PID=-1;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000902:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000906:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090e:	d505      	bpl.n	800091c <_ZN8DC_motor17PIDControl_manualEv+0x1a0>
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_ZN8DC_motor17PIDControl_manualEv+0x1bc>)
 8000918:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	return rps_now;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000922:	ec43 2b17 	vmov	d7, r2, r3
}
 8000926:	eeb0 0b47 	vmov.f64	d0, d7
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	3ff00000 	.word	0x3ff00000
 8000938:	bff00000 	.word	0xbff00000
 800093c:	00000000 	.word	0x00000000

08000940 <_Z41__static_initialization_and_destruction_0ii>:

	if(PID>1) PID=1;
	if(PID<-1) PID=-1;

	return rps_now;
}
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d140      	bne.n	80009d2 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000956:	4293      	cmp	r3, r2
 8000958:	d13b      	bne.n	80009d2 <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor fr(0.754, 52.5, 0, 0.001, 42600, 200);
 800095a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800095e:	ed9f 4b22 	vldr	d4, [pc, #136]	; 80009e8 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000962:	ed9f 3b23 	vldr	d3, [pc, #140]	; 80009f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000966:	ed9f 2b24 	vldr	d2, [pc, #144]	; 80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800096a:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8000a00 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800096e:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8000a08 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000972:	4835      	ldr	r0, [pc, #212]	; (8000a48 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8000974:	f7ff fec8 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor fl(5.5, 85, 0, 0.001, 43193, 200);
 8000978:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800097c:	ed9f 4b24 	vldr	d4, [pc, #144]	; 8000a10 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000980:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 80009f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000984:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000988:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8000a18 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800098c:	eeb1 0b06 	vmov.f64	d0, #22	; 0x40b00000  5.5
 8000990:	482e      	ldr	r0, [pc, #184]	; (8000a4c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8000992:	f7ff feb9 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor br(148.3, 2813.3, 0.537, 0.001, 26734, 200);
 8000996:	ed9f 5b12 	vldr	d5, [pc, #72]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 800099a:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8000a20 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 800099e:	ed9f 3b14 	vldr	d3, [pc, #80]	; 80009f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80009a2:	ed9f 2b21 	vldr	d2, [pc, #132]	; 8000a28 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80009a6:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8000a30 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 80009aa:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8000a38 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 80009ae:	4828      	ldr	r0, [pc, #160]	; (8000a50 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80009b0:	f7ff feaa 	bl	8000708 <_ZN8DC_motorC1Edddddd>
DC_motor bl(0, 0, 0, 0.001, 41296, 200);
 80009b4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80009e0 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80009b8:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8000a40 <_Z41__static_initialization_and_destruction_0ii+0x100>
 80009bc:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 80009f0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80009c0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80009c4:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80009c8:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80009f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80009cc:	4821      	ldr	r0, [pc, #132]	; (8000a54 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80009ce:	f7ff fe9b 	bl	8000708 <_ZN8DC_motorC1Edddddd>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	f3af 8000 	nop.w
 80009e0:	00000000 	.word	0x00000000
 80009e4:	40690000 	.word	0x40690000
 80009e8:	00000000 	.word	0x00000000
 80009ec:	40e4cd00 	.word	0x40e4cd00
 80009f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009f4:	3f50624d 	.word	0x3f50624d
	...
 8000a04:	404a4000 	.word	0x404a4000
 8000a08:	9ba5e354 	.word	0x9ba5e354
 8000a0c:	3fe820c4 	.word	0x3fe820c4
 8000a10:	00000000 	.word	0x00000000
 8000a14:	40e51720 	.word	0x40e51720
 8000a18:	00000000 	.word	0x00000000
 8000a1c:	40554000 	.word	0x40554000
 8000a20:	00000000 	.word	0x00000000
 8000a24:	40da1b80 	.word	0x40da1b80
 8000a28:	9fbe76c9 	.word	0x9fbe76c9
 8000a2c:	3fe12f1a 	.word	0x3fe12f1a
 8000a30:	9999999a 	.word	0x9999999a
 8000a34:	40a5fa99 	.word	0x40a5fa99
 8000a38:	9999999a 	.word	0x9999999a
 8000a3c:	40628999 	.word	0x40628999
 8000a40:	00000000 	.word	0x00000000
 8000a44:	40e42a00 	.word	0x40e42a00
 8000a48:	240000a0 	.word	0x240000a0
 8000a4c:	24000138 	.word	0x24000138
 8000a50:	240001d0 	.word	0x240001d0
 8000a54:	24000268 	.word	0x24000268

08000a58 <_GLOBAL__sub_I_fr>:
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ff6d 	bl	8000940 <_Z41__static_initialization_and_destruction_0ii>
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <_Z10debug_loopv>:

/** debug which function **/
bool mecanum_debug = true;


void debug_loop(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	while(1){
		if(mecanum_debug) mecanum.run();
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <_Z10debug_loopv+0x14>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0fb      	beq.n	8000a6c <_Z10debug_loopv+0x4>
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <_Z10debug_loopv+0x18>)
 8000a76:	f000 fcbd 	bl	80013f4 <_ZN7Mecanum3runEv>
 8000a7a:	e7f7      	b.n	8000a6c <_Z10debug_loopv+0x4>
 8000a7c:	24000001 	.word	0x24000001
 8000a80:	24000698 	.word	0x24000698

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f003 ffb6 	bl	80049f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f000 f818 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f000 fb56 	bl	8001140 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a94:	f000 f884 	bl	8000ba0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a98:	f000 f8d6 	bl	8000c48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a9c:	f000 f92a 	bl	8000cf4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000aa0:	f000 f97e 	bl	8000da0 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000aa4:	f000 f9d2 	bl	8000e4c <MX_TIM12_Init>
  MX_TIM13_Init();
 8000aa8:	f000 fa20 	bl	8000eec <MX_TIM13_Init>
  MX_TIM15_Init();
 8000aac:	f000 fa42 	bl	8000f34 <MX_TIM15_Init>
  MX_DMA_Init();
 8000ab0:	f000 fb1e 	bl	80010f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ab4:	f000 fad0 	bl	8001058 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000ab8:	f000 fc36 	bl	8001328 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <main+0x38>
	...

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b09c      	sub	sp, #112	; 0x70
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	224c      	movs	r2, #76	; 0x4c
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00d f858 	bl	800db84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00d f852 	bl	800db84 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f007 f927 	bl	8007d34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <SystemClock_Config+0xdc>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af2:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <SystemClock_Config+0xdc>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <SystemClock_Config+0xdc>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b06:	bf00      	nop
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <SystemClock_Config+0xdc>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b14:	d1f8      	bne.n	8000b08 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000b2c:	232a      	movs	r3, #42	; 0x2a
 8000b2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b30:	2301      	movs	r3, #1
 8000b32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f007 f92b 	bl	8007da8 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b58:	f000 fbe0 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	233f      	movs	r3, #63	; 0x3f
 8000b5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2303      	movs	r3, #3
 8000b62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b6e:	2340      	movs	r3, #64	; 0x40
 8000b70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2102      	movs	r1, #2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f007 fcbd 	bl	8008504 <HAL_RCC_ClockConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b90:	f000 fbc4 	bl	800131c <Error_Handler>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3770      	adds	r7, #112	; 0x70
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58024800 	.word	0x58024800

08000ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2224      	movs	r2, #36	; 0x24
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00c ffe8 	bl	800db84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000be6:	2303      	movs	r3, #3
 8000be8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000c12:	f009 fdbd 	bl	800a790 <HAL_TIM_Encoder_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000c1c:	f000 fb7e 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM2_Init+0xa4>)
 8000c2e:	f00a fce1 	bl	800b5f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000c38:	f000 fb70 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3730      	adds	r7, #48	; 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	24000300 	.word	0x24000300

08000c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2224      	movs	r2, #36	; 0x24
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00c ff94 	bl	800db84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <MX_TIM3_Init+0xa8>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000cb8:	f009 fd6a 	bl	800a790 <HAL_TIM_Encoder_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cc2:	f000 fb2b 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000cd4:	f00a fc8e 	bl	800b5f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cde:	f000 fb1d 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	; 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2400034c 	.word	0x2400034c
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2224      	movs	r2, #36	; 0x24
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00c ff3e 	bl	800db84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <MX_TIM4_Init+0xa8>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d40:	2301      	movs	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d50:	2301      	movs	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d64:	f009 fd14 	bl	800a790 <HAL_TIM_Encoder_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d6e:	f000 fad5 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_TIM4_Init+0xa4>)
 8000d80:	f00a fc38 	bl	800b5f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d8a:	f000 fac7 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3730      	adds	r7, #48	; 0x30
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	24000398 	.word	0x24000398
 8000d9c:	40000800 	.word	0x40000800

08000da0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	2224      	movs	r2, #36	; 0x24
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f00c fee8 	bl	800db84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <MX_TIM5_Init+0xa8>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000de4:	2303      	movs	r3, #3
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dec:	2301      	movs	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000e10:	f009 fcbe 	bl	800a790 <HAL_TIM_Encoder_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000e1a:	f000 fa7f 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM5_Init+0xa4>)
 8000e2c:	f00a fbe2 	bl	800b5f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000e36:	f000 fa71 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3730      	adds	r7, #48	; 0x30
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	240003e4 	.word	0x240003e4
 8000e48:	40000c00 	.word	0x40000c00

08000e4c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]
 8000e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000e66:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <MX_TIM12_Init+0x9c>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4199;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000e78:	f241 0267 	movw	r2, #4199	; 0x1067
 8000e7c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000e8a:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000e8c:	f009 fac0 	bl	800a410 <HAL_TIM_PWM_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000e96:	f000 fa41 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9a:	2360      	movs	r3, #96	; 0x60
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000eb2:	f009 fec1 	bl	800ac38 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000ebc:	f000 fa2e 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000ec8:	f009 feb6 	bl	800ac38 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8000ed2:	f000 fa23 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <MX_TIM12_Init+0x98>)
 8000ed8:	f003 f9a4 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	24000430 	.word	0x24000430
 8000ee8:	40001800 	.word	0x40001800

08000eec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_TIM13_Init+0x40>)
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <MX_TIM13_Init+0x44>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <MX_TIM13_Init+0x40>)
 8000ef8:	2253      	movs	r2, #83	; 0x53
 8000efa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_TIM13_Init+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_TIM13_Init+0x40>)
 8000f04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f08:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_TIM13_Init+0x40>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_TIM13_Init+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM13_Init+0x40>)
 8000f18:	f009 f99c 	bl	800a254 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000f22:	f000 f9fb 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2400047c 	.word	0x2400047c
 8000f30:	40001c00 	.word	0x40001c00

08000f34 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b098      	sub	sp, #96	; 0x60
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2234      	movs	r2, #52	; 0x34
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00c fe0f 	bl	800db84 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f66:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f68:	4a3a      	ldr	r2, [pc, #232]	; (8001054 <MX_TIM15_Init+0x120>)
 8000f6a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000f6c:	4b38      	ldr	r3, [pc, #224]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b37      	ldr	r3, [pc, #220]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4199;
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f7a:	f241 0267 	movw	r2, #4199	; 0x1067
 8000f7e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000f92:	482f      	ldr	r0, [pc, #188]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000f94:	f009 fa3c 	bl	800a410 <HAL_TIM_PWM_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000f9e:	f000 f9bd 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000faa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4827      	ldr	r0, [pc, #156]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000fb2:	f00a fb1f 	bl	800b5f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000fbc:	f000 f9ae 	bl	800131c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc0:	2360      	movs	r3, #96	; 0x60
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000fe6:	f009 fe27 	bl	800ac38 <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000ff0:	f000 f994 	bl	800131c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff8:	2204      	movs	r2, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <MX_TIM15_Init+0x11c>)
 8000ffe:	f009 fe1b 	bl	800ac38 <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001008:	f000 f988 	bl	800131c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM15_Init+0x11c>)
 8001034:	f00a fb7a 	bl	800b72c <HAL_TIMEx_ConfigBreakDeadTime>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800103e:	f000 f96d 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM15_Init+0x11c>)
 8001044:	f003 f8ee 	bl	8004224 <HAL_TIM_MspPostInit>

}
 8001048:	bf00      	nop
 800104a:	3760      	adds	r7, #96	; 0x60
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	240004c8 	.word	0x240004c8
 8001054:	40014000 	.word	0x40014000

08001058 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <MX_USART1_UART_Init+0x94>)
 8001060:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a0:	4811      	ldr	r0, [pc, #68]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 80010a2:	f00a fc01 	bl	800b8a8 <HAL_UART_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010ac:	f000 f936 	bl	800131c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 80010b4:	f00c fc48 	bl	800d948 <HAL_UARTEx_SetTxFifoThreshold>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010be:	f000 f92d 	bl	800131c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 80010c6:	f00c fc7d 	bl	800d9c4 <HAL_UARTEx_SetRxFifoThreshold>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010d0:	f000 f924 	bl	800131c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_USART1_UART_Init+0x90>)
 80010d6:	f00c fbfe 	bl	800d8d6 <HAL_UARTEx_DisableFifoMode>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010e0:	f000 f91c 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000514 	.word	0x24000514
 80010ec:	40011000 	.word	0x40011000

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_DMA_Init+0x4c>)
 80010f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010fc:	4a0f      	ldr	r2, [pc, #60]	; (800113c <MX_DMA_Init+0x4c>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MX_DMA_Init+0x4c>)
 8001108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	200b      	movs	r0, #11
 800111a:	f003 fdda 	bl	8004cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800111e:	200b      	movs	r0, #11
 8001120:	f003 fdf1 	bl	8004d06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	200c      	movs	r0, #12
 800112a:	f003 fdd2 	bl	8004cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800112e:	200c      	movs	r0, #12
 8001130:	f003 fde9 	bl	8004d06 <HAL_NVIC_EnableIRQ>

}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	58024400 	.word	0x58024400

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <MX_GPIO_Init+0x1c4>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a69      	ldr	r2, [pc, #420]	; (8001304 <MX_GPIO_Init+0x1c4>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <MX_GPIO_Init+0x1c4>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	4b63      	ldr	r3, [pc, #396]	; (8001304 <MX_GPIO_Init+0x1c4>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a62      	ldr	r2, [pc, #392]	; (8001304 <MX_GPIO_Init+0x1c4>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b5f      	ldr	r3, [pc, #380]	; (8001304 <MX_GPIO_Init+0x1c4>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001192:	4b5c      	ldr	r3, [pc, #368]	; (8001304 <MX_GPIO_Init+0x1c4>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <MX_GPIO_Init+0x1c4>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a2:	4b58      	ldr	r3, [pc, #352]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b0:	4b54      	ldr	r3, [pc, #336]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a53      	ldr	r2, [pc, #332]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b50      	ldr	r3, [pc, #320]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b49      	ldr	r3, [pc, #292]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ec:	4b45      	ldr	r3, [pc, #276]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fc:	4b41      	ldr	r3, [pc, #260]	; (8001304 <MX_GPIO_Init+0x1c4>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <MX_GPIO_Init+0x1c4>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <MX_GPIO_Init+0x1c4>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121a:	4b3a      	ldr	r3, [pc, #232]	; (8001304 <MX_GPIO_Init+0x1c4>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800122e:	4836      	ldr	r0, [pc, #216]	; (8001308 <MX_GPIO_Init+0x1c8>)
 8001230:	f006 fd66 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f242 0120 	movw	r1, #8224	; 0x2020
 800123a:	4834      	ldr	r0, [pc, #208]	; (800130c <MX_GPIO_Init+0x1cc>)
 800123c:	f006 fd60 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001246:	4832      	ldr	r0, [pc, #200]	; (8001310 <MX_GPIO_Init+0x1d0>)
 8001248:	f006 fd5a 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8001252:	4830      	ldr	r0, [pc, #192]	; (8001314 <MX_GPIO_Init+0x1d4>)
 8001254:	f006 fd54 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 800125e:	482e      	ldr	r0, [pc, #184]	; (8001318 <MX_GPIO_Init+0x1d8>)
 8001260:	f006 fd4e 	bl	8007d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 8001264:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4822      	ldr	r0, [pc, #136]	; (8001308 <MX_GPIO_Init+0x1c8>)
 800127e:	f006 fb97 	bl	80079b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001282:	f242 0320 	movw	r3, #8224	; 0x2020
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	481c      	ldr	r0, [pc, #112]	; (800130c <MX_GPIO_Init+0x1cc>)
 800129c:	f006 fb88 	bl	80079b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80012a0:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4815      	ldr	r0, [pc, #84]	; (8001310 <MX_GPIO_Init+0x1d0>)
 80012ba:	f006 fb79 	bl	80079b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 80012be:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <MX_GPIO_Init+0x1d4>)
 80012d8:	f006 fb6a 	bl	80079b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 80012dc:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_GPIO_Init+0x1d8>)
 80012f6:	f006 fb5b 	bl	80079b0 <HAL_GPIO_Init>

}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	58024400 	.word	0x58024400
 8001308:	58021000 	.word	0x58021000
 800130c:	58020800 	.word	0x58020800
 8001310:	58021400 	.word	0x58021400
 8001314:	58020400 	.word	0x58020400
 8001318:	58020c00 	.word	0x58020c00

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <main_function>:
#include "debug.h"
#include "ros_main.h"
#include "stm_main.h"


void main_function(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	ROS::setup();
 800132c:	f001 fea6 	bl	800307c <_ZN3ROS5setupEv>
	STM::setup();
 8001330:	f003 f91c 	bl	800456c <_ZN3STM5setupEv>

	while(1){
		if(debug_mode) debug_loop();
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <main_function+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <main_function+0x1a>
 800133c:	f7ff fb94 	bl	8000a68 <_Z10debug_loopv>
 8001340:	e7f8      	b.n	8001334 <main_function+0xc>
		else ROS::loop();
 8001342:	f001 feb1 	bl	80030a8 <_ZN3ROS4loopEv>
		if(debug_mode) debug_loop();
 8001346:	e7f5      	b.n	8001334 <main_function+0xc>
 8001348:	24000000 	.word	0x24000000

0800134c <_ZN8CAR_INFOC1Ev>:

typedef struct{
	double Vx=0;
	double Vy=0;
	double Omega=0;
} CAR_INFO;
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	e9c1 2300 	strd	r2, r3, [r1]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	0000      	movs	r0, r0
	...

08001390 <_ZN7MecanumC1Ev>:
#include "mecanum.h"
#include "dc_motor.h"

Mecanum mecanum;

Mecanum::Mecanum(void){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ffd6 	bl	800134c <_ZN8CAR_INFOC1Ev>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3318      	adds	r3, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffd1 	bl	800134c <_ZN8CAR_INFOC1Ev>
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <_ZN7MecanumC1Ev+0x60>)
 80013b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	a309      	add	r3, pc, #36	; (adr r3, 80013e0 <_ZN7MecanumC1Ev+0x50>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	a308      	add	r3, pc, #32	; (adr r3, 80013e8 <_ZN7MecanumC1Ev+0x58>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	DC_motor_init();
 80013ce:	f7ff f955 	bl	800067c <_Z13DC_motor_initv>
}
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	f3af 8000 	nop.w
 80013e0:	cccccccd 	.word	0xcccccccd
 80013e4:	4020cccc 	.word	0x4020cccc
 80013e8:	39581062 	.word	0x39581062
 80013ec:	400d48b4 	.word	0x400d48b4
 80013f0:	40270000 	.word	0x40270000

080013f4 <_ZN7Mecanum3runEv>:

// calculate wheel (-> PID) -> calculate car -> pub
void Mecanum::run(void){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
//	tf2_wheel_speed();
	tf2_car_speed();
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f807 	bl	8001410 <_ZN7Mecanum13tf2_car_speedEv>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	0000      	movs	r0, r0
 800140c:	0000      	movs	r0, r0
	...

08001410 <_ZN7Mecanum13tf2_car_speedEv>:
	br.rps_goal = (CAR_Goal.Vy + CAR_Goal.Vx + CAR_Goal.Omega*(a+b) )/radius;
}


// give current car speed
void Mecanum::tf2_car_speed(void){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	CAR_Now.Vx = (1/4)*radius*(fl.rps_now + fr.rps_now + bl.rps_now + br.rps_now);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800141e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80014f8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 8001422:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 8001428:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 800142e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001432:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001438:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800143c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 8001442:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001446:	ee35 7b07 	vadd.f64	d7, d5, d7
 800144a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b06 	vstr	d7, [r3, #24]
	CAR_Now.Vy = (1/4)*radius*(-fl.rps_now + fr.rps_now + bl.rps_now - br.rps_now);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800145a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80014f8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800145e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 8001464:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 800146a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800146e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 8001474:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001478:	ee35 5b07 	vadd.f64	d5, d5, d7
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 800147e:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001482:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001486:	ee26 7b07 	vmul.f64	d7, d6, d7
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ed83 7b08 	vstr	d7, [r3, #32]
	CAR_Now.Omega = (1/4)*radius*(1/(a+b))*(-fl.rps_now + fr.rps_now - bl.rps_now + br.rps_now);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8001496:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80014f8 <_ZN7Mecanum13tf2_car_speedEv+0xe8>
 800149a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80014aa:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014ae:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80014b2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80014b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <_ZN7Mecanum13tf2_car_speedEv+0xf4>)
 80014bc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <_ZN7Mecanum13tf2_car_speedEv+0xf0>)
 80014c2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014c6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <_ZN7Mecanum13tf2_car_speedEv+0xf8>)
 80014cc:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <_ZN7Mecanum13tf2_car_speedEv+0xfc>)
 80014d6:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80014da:	ee35 7b07 	vadd.f64	d7, d5, d7
 80014de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	f3af 8000 	nop.w
	...
 8001500:	24000138 	.word	0x24000138
 8001504:	240000a0 	.word	0x240000a0
 8001508:	24000268 	.word	0x24000268
 800150c:	240001d0 	.word	0x240001d0

08001510 <_Z41__static_initialization_and_destruction_0ii>:
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d107      	bne.n	8001530 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <_Z41__static_initialization_and_destruction_0ii+0x20>
Mecanum mecanum;
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800152c:	f7ff ff30 	bl	8001390 <_ZN7MecanumC1Ev>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	24000698 	.word	0x24000698

0800153c <_GLOBAL__sub_I_mecanum>:
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
 8001540:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff ffe3 	bl	8001510 <_Z41__static_initialization_and_destruction_0ii>
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <_ZN3ros3MsgC1Ev+0x1c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	0800e10c 	.word	0x0800e10c

08001590 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
      data()
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffe8 	bl	8001570 <_ZN3ros3MsgC1Ev>
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3304      	adds	r3, #4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffce 	bl	800154c <_ZN3ros4TimeC1Ev>
    {
    }
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800e0f4 	.word	0x0800e0f4

080015c0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0a19      	lsrs	r1, r3, #8
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	0c19      	lsrs	r1, r3, #16
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3302      	adds	r3, #2
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0e19      	lsrs	r1, r3, #24
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3303      	adds	r3, #3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	4413      	add	r3, r2
 800160e:	b2ca      	uxtb	r2, r1
 8001610:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3304      	adds	r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	0a19      	lsrs	r1, r3, #8
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	b2ca      	uxtb	r2, r1
 8001636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	0c19      	lsrs	r1, r3, #16
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3302      	adds	r3, #2
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	b2ca      	uxtb	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	0e19      	lsrs	r1, r3, #24
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3303      	adds	r3, #3
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4413      	add	r3, r2
 8001658:	b2ca      	uxtb	r2, r1
 800165a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3304      	adds	r3, #4
 8001660:	60fb      	str	r3, [r7, #12]
      return offset;
 8001662:	68fb      	ldr	r3, [r7, #12]
    }
 8001664:	4618      	mov	r0, r3
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	6839      	ldr	r1, [r7, #0]
 8001696:	440b      	add	r3, r1
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3302      	adds	r3, #2
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	440b      	add	r3, r1
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3303      	adds	r3, #3
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	440b      	add	r3, r1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3301      	adds	r3, #1
 80016ea:	6839      	ldr	r1, [r7, #0]
 80016ec:	440b      	add	r3, r1
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3302      	adds	r3, #2
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	440b      	add	r3, r1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3303      	adds	r3, #3
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	440b      	add	r3, r1
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3304      	adds	r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
     return offset;
 800172a:	68fb      	ldr	r3, [r7, #12]
    }
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	0800deb0 	.word	0x0800deb0

08001754 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	0800dec0 	.word	0x0800dec0

08001770 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fef8 	bl	8001570 <_ZN3ros3MsgC1Ev>
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	809a      	strh	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
    {
    }
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	0800e0dc 	.word	0x0800e0dc
 80017b4:	0800dee4 	.word	0x0800dee4

080017b8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	8899      	ldrh	r1, [r3, #4]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	b2ca      	uxtb	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	889b      	ldrh	r3, [r3, #4]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b299      	uxth	r1, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	3301      	adds	r3, #1
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2ca      	uxtb	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	3302      	adds	r3, #2
 80017ec:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fd8c 	bl	8000310 <strlen>
 80017f8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	69b9      	ldr	r1, [r7, #24]
 8001802:	4618      	mov	r0, r3
 8001804:	f001 fc7e 	bl	8003104 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	3304      	adds	r3, #4
 800180c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	18d0      	adds	r0, r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4619      	mov	r1, r3
 800181c:	f00c f9a4 	bl	800db68 <memcpy>
      offset += length_topic_name;
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4413      	add	r3, r2
 8001826:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fd6f 	bl	8000310 <strlen>
 8001832:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	4413      	add	r3, r2
 800183a:	6979      	ldr	r1, [r7, #20]
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fc61 	bl	8003104 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	18d0      	adds	r0, r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4619      	mov	r1, r3
 8001856:	f00c f987 	bl	800db68 <memcpy>
      offset += length_message_type;
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4413      	add	r3, r2
 8001860:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fd52 	bl	8000310 <strlen>
 800186c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	6939      	ldr	r1, [r7, #16]
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fc44 	bl	8003104 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	3304      	adds	r3, #4
 8001880:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	18d0      	adds	r0, r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4619      	mov	r1, r3
 8001890:	f00c f96a 	bl	800db68 <memcpy>
      offset += length_md5sum;
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4413      	add	r3, r2
 800189a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	b2ca      	uxtb	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0a19      	lsrs	r1, r3, #8
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3301      	adds	r3, #1
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0c19      	lsrs	r1, r3, #16
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3302      	adds	r3, #2
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	0e19      	lsrs	r1, r3, #24
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3303      	adds	r3, #3
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	61fb      	str	r3, [r7, #28]
      return offset;
 80018e4:	69fb      	ldr	r3, [r7, #28]
    }
 80018e6:	4618      	mov	r0, r3
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b08a      	sub	sp, #40	; 0x28
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4413      	add	r3, r2
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	889b      	ldrh	r3, [r3, #4]
 800190e:	b21a      	sxth	r2, r3
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	3301      	adds	r3, #1
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	440b      	add	r3, r1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21b      	sxth	r3, r3
 800191e:	4313      	orrs	r3, r2
 8001920:	b21b      	sxth	r3, r3
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	3302      	adds	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	441a      	add	r2, r3
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fc00 	bl	8003140 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	3304      	adds	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	4413      	add	r3, r2
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	441a      	add	r2, r3
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	440b      	add	r3, r1
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3301      	adds	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	e7ec      	b.n	800194a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	4413      	add	r3, r2
 8001976:	3b01      	subs	r3, #1
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	3b01      	subs	r3, #1
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	441a      	add	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4413      	add	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	441a      	add	r2, r3
 800199a:	f107 0310 	add.w	r3, r7, #16
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fbcd 	bl	8003140 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	3304      	adds	r3, #4
 80019aa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4413      	add	r3, r2
 80019b6:	6a3a      	ldr	r2, [r7, #32]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d20c      	bcs.n	80019d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	441a      	add	r2, r3
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	440b      	add	r3, r1
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	3301      	adds	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	e7ec      	b.n	80019b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4413      	add	r3, r2
 80019dc:	3b01      	subs	r3, #1
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	441a      	add	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	441a      	add	r2, r3
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f001 fb9a 	bl	8003140 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d20c      	bcs.n	8001a3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	441a      	add	r2, r3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6839      	ldr	r1, [r7, #0]
 8001a2e:	440b      	add	r3, r1
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	3301      	adds	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e7ec      	b.n	8001a16 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4413      	add	r3, r2
 8001a42:	3b01      	subs	r3, #1
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	441a      	add	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	440a      	add	r2, r1
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3301      	adds	r3, #1
 8001a78:	6839      	ldr	r1, [r7, #0]
 8001a7a:	440b      	add	r3, r1
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	440b      	add	r3, r1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	061b      	lsls	r3, r3, #24
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	61bb      	str	r3, [r7, #24]
     return offset;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
    }
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	0800dee8 	.word	0x0800dee8

08001adc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	0800df04 	.word	0x0800df04

08001af8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fd34 	bl	8001570 <_ZN3ros3MsgC1Ev>
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	711a      	strb	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001b18:	609a      	str	r2, [r3, #8]
    {
    }
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	0800e0c4 	.word	0x0800e0c4
 8001b28:	0800dee4 	.word	0x0800dee4

08001b2c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	7912      	ldrb	r2, [r2, #4]
 8001b44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fbdd 	bl	8000310 <strlen>
 8001b56:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	68b9      	ldr	r1, [r7, #8]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 facf 	bl	8003104 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	18d0      	adds	r0, r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f00b fff5 	bl	800db68 <memcpy>
      offset += length_msg;
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4413      	add	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
      return offset;
 8001b86:	68fb      	ldr	r3, [r7, #12]
    }
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	3301      	adds	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	441a      	add	r2, r3
 8001bb6:	f107 030c 	add.w	r3, r7, #12
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fabf 	bl	8003140 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d20c      	bcs.n	8001bf2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	441a      	add	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	440b      	add	r3, r1
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3301      	adds	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e7ec      	b.n	8001bcc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	441a      	add	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
     return offset;
 8001c16:	693b      	ldr	r3, [r7, #16]
    }
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	0800df28 	.word	0x0800df28

08001c3c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	0800df3c 	.word	0x0800df3c

08001c58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc84 	bl	8001570 <_ZN3ros3MsgC1Ev>
 8001c68:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800e0ac 	.word	0x0800e0ac

08001ca0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2ca      	uxtb	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0a19      	lsrs	r1, r3, #8
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0c19      	lsrs	r1, r3, #16
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2ca      	uxtb	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0e19      	lsrs	r1, r3, #24
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	3303      	adds	r3, #3
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	b2ca      	uxtb	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	6a3a      	ldr	r2, [r7, #32]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d22b      	bcs.n	8001d5e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001d14:	6939      	ldr	r1, [r7, #16]
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b2ca      	uxtb	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	0a19      	lsrs	r1, r3, #8
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	3301      	adds	r3, #1
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b2ca      	uxtb	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	0c19      	lsrs	r1, r3, #16
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	3302      	adds	r3, #2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2ca      	uxtb	r2, r1
 8001d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	0e19      	lsrs	r1, r3, #24
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	3303      	adds	r3, #3
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b2ca      	uxtb	r2, r1
 8001d4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3304      	adds	r3, #4
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	e7ce      	b.n	8001cfc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	0a19      	lsrs	r1, r3, #8
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	3301      	adds	r3, #1
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	0c19      	lsrs	r1, r3, #16
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	3302      	adds	r3, #2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2ca      	uxtb	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	0e19      	lsrs	r1, r3, #24
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	3303      	adds	r3, #3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3304      	adds	r3, #4
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d22b      	bcs.n	8001e0e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b2ca      	uxtb	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	0a19      	lsrs	r1, r3, #8
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0c19      	lsrs	r1, r3, #16
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	3302      	adds	r3, #2
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	b2ca      	uxtb	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	0e19      	lsrs	r1, r3, #24
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	3303      	adds	r3, #3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2ca      	uxtb	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	3304      	adds	r3, #4
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	e7ce      	b.n	8001dac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69d9      	ldr	r1, [r3, #28]
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2ca      	uxtb	r2, r1
 8001e1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	0a19      	lsrs	r1, r3, #8
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	3301      	adds	r3, #1
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b2ca      	uxtb	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	0c19      	lsrs	r1, r3, #16
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3302      	adds	r3, #2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b2ca      	uxtb	r2, r1
 8001e3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	0e19      	lsrs	r1, r3, #24
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3303      	adds	r3, #3
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b2ca      	uxtb	r2, r1
 8001e50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3304      	adds	r3, #4
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d228      	bcs.n	8001eb8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fa4c 	bl	8000310 <strlen>
 8001e78:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 f93e 	bl	8003104 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	18d0      	adds	r0, r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f00b fe60 	bl	800db68 <memcpy>
      offset += length_stringsi;
 8001ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	4413      	add	r3, r2
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
 8001eb6:	e7d1      	b.n	8001e5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08e      	sub	sp, #56	; 0x38
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	3301      	adds	r3, #1
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	6a3a      	ldr	r2, [r7, #32]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eee:	3302      	adds	r3, #2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	6a3a      	ldr	r2, [r7, #32]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f00:	3303      	adds	r3, #3
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	6a3a      	ldr	r2, [r7, #32]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	3304      	adds	r3, #4
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	6a3a      	ldr	r2, [r7, #32]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d90a      	bls.n	8001f36 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	f00b fe32 	bl	800db94 <realloc>
 8001f30:	4602      	mov	r2, r0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a3a      	ldr	r2, [r7, #32]
 8001f3a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d236      	bcs.n	8001fb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	440a      	add	r2, r1
 8001f56:	7812      	ldrb	r2, [r2, #0]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f60:	3301      	adds	r3, #1
 8001f62:	6839      	ldr	r1, [r7, #0]
 8001f64:	440b      	add	r3, r1
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f72:	3302      	adds	r3, #2
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	440b      	add	r3, r1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f84:	3303      	adds	r3, #3
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	440b      	add	r3, r1
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb6:	e7c3      	b.n	8001f40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	3303      	adds	r3, #3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	429a      	cmp	r2, r3
 8002006:	d90a      	bls.n	800201e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f00b fdbe 	bl	800db94 <realloc>
 8002018:	4602      	mov	r2, r0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800202e:	429a      	cmp	r2, r3
 8002030:	d236      	bcs.n	80020a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	440a      	add	r2, r1
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002048:	3301      	adds	r3, #1
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	440b      	add	r3, r1
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	3302      	adds	r3, #2
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	440b      	add	r3, r1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	041b      	lsls	r3, r3, #16
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206c:	3303      	adds	r3, #3
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	440b      	add	r3, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	3304      	adds	r3, #4
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	3214      	adds	r2, #20
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209a:	3301      	adds	r3, #1
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209e:	e7c3      	b.n	8002028 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	3301      	adds	r3, #1
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80020bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020be:	3302      	adds	r3, #2
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	3303      	adds	r3, #3
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	3304      	adds	r3, #4
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d90a      	bls.n	8002106 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f00b fd4a 	bl	800db94 <realloc>
 8002100:	4602      	mov	r2, r0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800210c:	2300      	movs	r3, #0
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002116:	429a      	cmp	r2, r3
 8002118:	d23f      	bcs.n	800219a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	441a      	add	r2, r3
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f001 f80a 	bl	8003140 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800212c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212e:	3304      	adds	r3, #4
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	429a      	cmp	r2, r3
 8002140:	d20c      	bcs.n	800215c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	441a      	add	r2, r3
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	3b01      	subs	r3, #1
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	440b      	add	r3, r1
 8002150:	7812      	ldrb	r2, [r2, #0]
 8002152:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	3301      	adds	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	e7ec      	b.n	8002136 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800215c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	3b01      	subs	r3, #1
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216e:	3b01      	subs	r3, #1
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	441a      	add	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002178:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	3220      	adds	r2, #32
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002194:	3301      	adds	r3, #1
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
 8002198:	e7ba      	b.n	8002110 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800219c:	4618      	mov	r0, r3
 800219e:	3738      	adds	r7, #56	; 0x38
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	0800e018 	.word	0x0800e018

080021c0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	0800df60 	.word	0x0800df60

080021dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68d8      	ldr	r0, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6891      	ldr	r1, [r2, #8]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	4798      	blx	r3
 8002228:	4603      	mov	r3, r0
  };
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
  }
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a42      	ldr	r2, [pc, #264]	; (8002368 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d068      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a40      	ldr	r2, [pc, #256]	; (800236c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d061      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3d      	ldr	r2, [pc, #244]	; (8002370 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d05a      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a3b      	ldr	r2, [pc, #236]	; (8002374 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d053      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a38      	ldr	r2, [pc, #224]	; (8002378 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d04c      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a36      	ldr	r2, [pc, #216]	; (800237c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d045      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a33      	ldr	r2, [pc, #204]	; (8002380 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d03e      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a31      	ldr	r2, [pc, #196]	; (8002384 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d037      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a2e      	ldr	r2, [pc, #184]	; (8002388 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d030      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2c      	ldr	r2, [pc, #176]	; (800238c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d029      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d022      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a27      	ldr	r2, [pc, #156]	; (8002394 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01b      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d014      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a22      	ldr	r2, [pc, #136]	; (800239c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00d      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d006      	beq.n	8002334 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d109      	bne.n	8002348 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002346:	e008      	b.n	800235a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40020010 	.word	0x40020010
 800236c:	40020028 	.word	0x40020028
 8002370:	40020040 	.word	0x40020040
 8002374:	40020058 	.word	0x40020058
 8002378:	40020070 	.word	0x40020070
 800237c:	40020088 	.word	0x40020088
 8002380:	400200a0 	.word	0x400200a0
 8002384:	400200b8 	.word	0x400200b8
 8002388:	40020410 	.word	0x40020410
 800238c:	40020428 	.word	0x40020428
 8002390:	40020440 	.word	0x40020440
 8002394:	40020458 	.word	0x40020458
 8002398:	40020470 	.word	0x40020470
 800239c:	40020488 	.word	0x40020488
 80023a0:	400204a0 	.word	0x400204a0
 80023a4:	400204b8 	.word	0x400204b8

080023a8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <_ZN13STM32HardwareC1Ev+0x34>)
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	24000514 	.word	0x24000514

080023e0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f804 	bl	80023f6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240a:	4619      	mov	r1, r3
 800240c:	f009 fb2e 	bl	800ba6c <HAL_UART_Receive_DMA>
    }
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff0d 	bl	800224c <_ZN13STM32Hardware10getRdmaIndEv>
 8002432:	4603      	mov	r3, r0
 8002434:	429c      	cmp	r4, r3
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002448:	1c59      	adds	r1, r3, #1
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	791b      	ldrb	r3, [r3, #4]
 8002456:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800245e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8002468:	68fb      	ldr	r3, [r7, #12]
    }
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
	...

08002474 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002484:	2b20      	cmp	r3, #32
 8002486:	d108      	bne.n	800249a <_ZN13STM32Hardware5flushEv+0x26>
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <_ZN13STM32Hardware5flushEv+0xb4>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f083 0301 	eor.w	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <_ZN13STM32Hardware5flushEv+0x26>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <_ZN13STM32Hardware5flushEv+0x28>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d03f      	beq.n	8002520 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <_ZN13STM32Hardware5flushEv+0xb4>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d031      	beq.n	800251a <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d20a      	bcs.n	80024dc <_ZN13STM32Hardware5flushEv+0x68>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	b29b      	uxth	r3, r3
 80024da:	e006      	b.n	80024ea <_ZN13STM32Hardware5flushEv+0x76>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80024f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	89fa      	ldrh	r2, [r7, #14]
 8002500:	4619      	mov	r1, r3
 8002502:	f009 fa21 	bl	800b948 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 800250c:	89fb      	ldrh	r3, [r7, #14]
 800250e:	4413      	add	r3, r2
 8002510:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 800251a:	4b03      	ldr	r3, [pc, #12]	; (8002528 <_ZN13STM32Hardware5flushEv+0xb4>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	240006e0 	.word	0x240006e0

0800252c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
      int n = length;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002542:	bfa8      	it	ge
 8002544:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8002548:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002550:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4293      	cmp	r3, r2
 8002558:	bf28      	it	cs
 800255a:	4613      	movcs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8002564:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f00b faf9 	bl	800db68 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4413      	add	r3, r2
 8002580:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	429a      	cmp	r2, r3
 8002590:	d00b      	beq.n	80025aa <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	18d1      	adds	r1, r2, r3
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	f00b fadf 	bl	800db68 <memcpy>
      }

      flush();
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f7ff ff62 	bl	8002474 <_ZN13STM32Hardware5flushEv>
    }
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	f002 faa0 	bl	8004b04 <HAL_GetTick>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ffc8 	bl	8001570 <_ZN3ros3MsgC1Ev>
 80025e0:	4a0e      	ldr	r2, [pc, #56]	; (800261c <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	0800e068 	.word	0x0800e068

08002620 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002620:	b480      	push	{r7}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002634:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800263e:	6838      	ldr	r0, [r7, #0]
 8002640:	4401      	add	r1, r0
 8002642:	b2d3      	uxtb	r3, r2
 8002644:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002646:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	0a02      	lsrs	r2, r0, #8
 8002654:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002658:	0a0b      	lsrs	r3, r1, #8
 800265a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265c:	3101      	adds	r1, #1
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	4401      	add	r1, r0
 8002662:	b2d3      	uxtb	r3, r2
 8002664:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002666:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	0c02      	lsrs	r2, r0, #16
 8002674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002678:	0c0b      	lsrs	r3, r1, #16
 800267a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267c:	3102      	adds	r1, #2
 800267e:	6838      	ldr	r0, [r7, #0]
 8002680:	4401      	add	r1, r0
 8002682:	b2d3      	uxtb	r3, r2
 8002684:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	0e02      	lsrs	r2, r0, #24
 8002694:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002698:	0e0b      	lsrs	r3, r1, #24
 800269a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800269c:	3103      	adds	r1, #3
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	4401      	add	r1, r0
 80026a2:	b2d3      	uxtb	r3, r2
 80026a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80026a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	000a      	movs	r2, r1
 80026b4:	2300      	movs	r3, #0
 80026b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b8:	3104      	adds	r1, #4
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	4401      	add	r1, r0
 80026be:	b2d3      	uxtb	r3, r2
 80026c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80026c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	0a0a      	lsrs	r2, r1, #8
 80026d0:	2300      	movs	r3, #0
 80026d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d4:	3105      	adds	r1, #5
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	4401      	add	r1, r0
 80026da:	b2d3      	uxtb	r3, r2
 80026dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80026de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	0c0a      	lsrs	r2, r1, #16
 80026ec:	2300      	movs	r3, #0
 80026ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f0:	3106      	adds	r1, #6
 80026f2:	6838      	ldr	r0, [r7, #0]
 80026f4:	4401      	add	r1, r0
 80026f6:	b2d3      	uxtb	r3, r2
 80026f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80026fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	0e0a      	lsrs	r2, r1, #24
 8002708:	2300      	movs	r3, #0
 800270a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270c:	3107      	adds	r1, #7
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	4401      	add	r1, r0
 8002712:	b2d3      	uxtb	r3, r2
 8002714:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	3308      	adds	r3, #8
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002722:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	4401      	add	r1, r0
 8002730:	b2d3      	uxtb	r3, r2
 8002732:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002734:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	0a02      	lsrs	r2, r0, #8
 8002742:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002746:	0a0b      	lsrs	r3, r1, #8
 8002748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274a:	3101      	adds	r1, #1
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	4401      	add	r1, r0
 8002750:	b2d3      	uxtb	r3, r2
 8002752:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002754:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	0c02      	lsrs	r2, r0, #16
 8002762:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002766:	0c0b      	lsrs	r3, r1, #16
 8002768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276a:	3102      	adds	r1, #2
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	4401      	add	r1, r0
 8002770:	b2d3      	uxtb	r3, r2
 8002772:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002774:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	0e02      	lsrs	r2, r0, #24
 8002782:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002786:	0e0b      	lsrs	r3, r1, #24
 8002788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800278a:	3103      	adds	r1, #3
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	4401      	add	r1, r0
 8002790:	b2d3      	uxtb	r3, r2
 8002792:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	000a      	movs	r2, r1
 80027a2:	2300      	movs	r3, #0
 80027a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a6:	3104      	adds	r1, #4
 80027a8:	6838      	ldr	r0, [r7, #0]
 80027aa:	4401      	add	r1, r0
 80027ac:	b2d3      	uxtb	r3, r2
 80027ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80027b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	0a0a      	lsrs	r2, r1, #8
 80027be:	2300      	movs	r3, #0
 80027c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c2:	3105      	adds	r1, #5
 80027c4:	6838      	ldr	r0, [r7, #0]
 80027c6:	4401      	add	r1, r0
 80027c8:	b2d3      	uxtb	r3, r2
 80027ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80027cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	0c0a      	lsrs	r2, r1, #16
 80027da:	2300      	movs	r3, #0
 80027dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027de:	3106      	adds	r1, #6
 80027e0:	6838      	ldr	r0, [r7, #0]
 80027e2:	4401      	add	r1, r0
 80027e4:	b2d3      	uxtb	r3, r2
 80027e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80027e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	0e0a      	lsrs	r2, r1, #24
 80027f6:	2300      	movs	r3, #0
 80027f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fa:	3107      	adds	r1, #7
 80027fc:	6838      	ldr	r0, [r7, #0]
 80027fe:	4401      	add	r1, r0
 8002800:	b2d3      	uxtb	r3, r2
 8002802:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	3308      	adds	r3, #8
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002810:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	4401      	add	r1, r0
 800281e:	b2d3      	uxtb	r3, r2
 8002820:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	0a02      	lsrs	r2, r0, #8
 8002830:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002834:	0a0b      	lsrs	r3, r1, #8
 8002836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002838:	3101      	adds	r1, #1
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	4401      	add	r1, r0
 800283e:	b2d3      	uxtb	r3, r2
 8002840:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	0c02      	lsrs	r2, r0, #16
 8002850:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002854:	0c0b      	lsrs	r3, r1, #16
 8002856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002858:	3102      	adds	r1, #2
 800285a:	6838      	ldr	r0, [r7, #0]
 800285c:	4401      	add	r1, r0
 800285e:	b2d3      	uxtb	r3, r2
 8002860:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	0e02      	lsrs	r2, r0, #24
 8002870:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002874:	0e0b      	lsrs	r3, r1, #24
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	3103      	adds	r1, #3
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	4401      	add	r1, r0
 800287e:	b2d3      	uxtb	r3, r2
 8002880:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	000a      	movs	r2, r1
 8002890:	2300      	movs	r3, #0
 8002892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002894:	3104      	adds	r1, #4
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	4401      	add	r1, r0
 800289a:	b2d3      	uxtb	r3, r2
 800289c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800289e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	0a0a      	lsrs	r2, r1, #8
 80028ac:	2300      	movs	r3, #0
 80028ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b0:	3105      	adds	r1, #5
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	4401      	add	r1, r0
 80028b6:	b2d3      	uxtb	r3, r2
 80028b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80028ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	0c0a      	lsrs	r2, r1, #16
 80028c8:	2300      	movs	r3, #0
 80028ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028cc:	3106      	adds	r1, #6
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	4401      	add	r1, r0
 80028d2:	b2d3      	uxtb	r3, r2
 80028d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80028d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	0e0a      	lsrs	r2, r1, #24
 80028e4:	2300      	movs	r3, #0
 80028e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e8:	3107      	adds	r1, #7
 80028ea:	6838      	ldr	r0, [r7, #0]
 80028ec:	4401      	add	r1, r0
 80028ee:	b2d3      	uxtb	r3, r2
 80028f0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3308      	adds	r3, #8
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80028fa:	4618      	mov	r0, r3
 80028fc:	372c      	adds	r7, #44	; 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002906:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800290a:	b0eb      	sub	sp, #428	; 0x1ac
 800290c:	af00      	add	r7, sp, #0
 800290e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002912:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002928:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800292c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002930:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2200      	movs	r2, #0
 800293c:	461c      	mov	r4, r3
 800293e:	4615      	mov	r5, r2
 8002940:	ea40 0804 	orr.w	r8, r0, r4
 8002944:	ea41 0905 	orr.w	r9, r1, r5
 8002948:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800294c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002950:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2200      	movs	r2, #0
 8002962:	469a      	mov	sl, r3
 8002964:	4693      	mov	fp, r2
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002972:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002976:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800297a:	ea40 0402 	orr.w	r4, r0, r2
 800297e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002982:	430b      	orrs	r3, r1
 8002984:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002988:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800298c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002990:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002994:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002998:	1c9a      	adds	r2, r3, #2
 800299a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80029aa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80029ba:	464c      	mov	r4, r9
 80029bc:	0423      	lsls	r3, r4, #16
 80029be:	4644      	mov	r4, r8
 80029c0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80029c4:	4644      	mov	r4, r8
 80029c6:	0422      	lsls	r2, r4, #16
 80029c8:	ea40 0402 	orr.w	r4, r0, r2
 80029cc:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80029d0:	430b      	orrs	r3, r1
 80029d2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80029d6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80029da:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029de:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029e6:	1cda      	adds	r2, r3, #3
 80029e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80029f8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80029fc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002a00:	4623      	mov	r3, r4
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002a08:	4623      	mov	r3, r4
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a10:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002a14:	4623      	mov	r3, r4
 8002a16:	4303      	orrs	r3, r0
 8002a18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a24:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002a28:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a2c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a34:	1d1a      	adds	r2, r3, #4
 8002a36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002a46:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002a56:	0023      	movs	r3, r4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	ea40 0402 	orr.w	r4, r0, r2
 8002a5e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002a62:	430b      	orrs	r3, r1
 8002a64:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a68:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002a6c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a70:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a78:	1d5a      	adds	r2, r3, #5
 8002a7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a7e:	4413      	add	r3, r2
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002a8a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002a9a:	0223      	lsls	r3, r4, #8
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	ea40 0402 	orr.w	r4, r0, r2
 8002aa2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002aac:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002ab0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002ab4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ab8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002abc:	1d9a      	adds	r2, r3, #6
 8002abe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ace:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002ade:	0423      	lsls	r3, r4, #16
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	ea40 0402 	orr.w	r4, r0, r2
 8002ae6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002aea:	430b      	orrs	r3, r1
 8002aec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002af0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002af4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002af8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002afc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b00:	1dda      	adds	r2, r3, #7
 8002b02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002b12:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002b22:	0623      	lsls	r3, r4, #24
 8002b24:	2200      	movs	r2, #0
 8002b26:	ea40 0402 	orr.w	r4, r0, r2
 8002b2a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b34:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002b38:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002b3c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b40:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b44:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002b48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b4c:	3308      	adds	r3, #8
 8002b4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b5e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b62:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002b66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b6a:	4413      	add	r3, r2
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002b76:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002b7a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002b7e:	4623      	mov	r3, r4
 8002b80:	4303      	orrs	r3, r0
 8002b82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b86:	462b      	mov	r3, r5
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b8e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002b92:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b96:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002bb0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002bc0:	464c      	mov	r4, r9
 8002bc2:	0223      	lsls	r3, r4, #8
 8002bc4:	4644      	mov	r4, r8
 8002bc6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bca:	4644      	mov	r4, r8
 8002bcc:	0222      	lsls	r2, r4, #8
 8002bce:	ea40 0402 	orr.w	r4, r0, r2
 8002bd2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002bdc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002be0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002be4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002be8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bec:	1c9a      	adds	r2, r3, #2
 8002bee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002c0e:	464c      	mov	r4, r9
 8002c10:	0423      	lsls	r3, r4, #16
 8002c12:	4644      	mov	r4, r8
 8002c14:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002c18:	4644      	mov	r4, r8
 8002c1a:	0422      	lsls	r2, r4, #16
 8002c1c:	ea40 0402 	orr.w	r4, r0, r2
 8002c20:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002c24:	430b      	orrs	r3, r1
 8002c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c2a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002c2e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c32:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c3a:	1cda      	adds	r2, r3, #3
 8002c3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c40:	4413      	add	r3, r2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c4c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c50:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002c54:	4623      	mov	r3, r4
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c5c:	4623      	mov	r3, r4
 8002c5e:	061b      	lsls	r3, r3, #24
 8002c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c64:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002c68:	4623      	mov	r3, r4
 8002c6a:	4303      	orrs	r3, r0
 8002c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c70:	462b      	mov	r3, r5
 8002c72:	430b      	orrs	r3, r1
 8002c74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c78:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002c7c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002c80:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c88:	1d1a      	adds	r2, r3, #4
 8002c8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c9a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002caa:	0023      	movs	r3, r4
 8002cac:	2200      	movs	r2, #0
 8002cae:	ea40 0402 	orr.w	r4, r0, r2
 8002cb2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002cbc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002cc0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002cc4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ccc:	1d5a      	adds	r2, r3, #5
 8002cce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cd2:	4413      	add	r3, r2
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cde:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002cee:	0223      	lsls	r3, r4, #8
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	ea40 0402 	orr.w	r4, r0, r2
 8002cf6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d00:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d04:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d08:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d10:	1d9a      	adds	r2, r3, #6
 8002d12:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002d32:	0423      	lsls	r3, r4, #16
 8002d34:	2200      	movs	r2, #0
 8002d36:	ea40 0402 	orr.w	r4, r0, r2
 8002d3a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d44:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002d48:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d4c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d54:	1dda      	adds	r2, r3, #7
 8002d56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002d76:	0623      	lsls	r3, r4, #24
 8002d78:	2200      	movs	r2, #0
 8002d7a:	ea40 0402 	orr.w	r4, r0, r2
 8002d7e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002d82:	430b      	orrs	r3, r1
 8002d84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d88:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002d8c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002d90:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002d98:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002d9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002da0:	3308      	adds	r3, #8
 8002da2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002db2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002db6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002dba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dbe:	4413      	add	r3, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002dca:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002dce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	4303      	orrs	r3, r0
 8002dd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dd8:	462b      	mov	r3, r5
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dde:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002de2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002de6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002df4:	4413      	add	r3, r2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	673b      	str	r3, [r7, #112]	; 0x70
 8002dfe:	677a      	str	r2, [r7, #116]	; 0x74
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e0c:	464c      	mov	r4, r9
 8002e0e:	0223      	lsls	r3, r4, #8
 8002e10:	4644      	mov	r4, r8
 8002e12:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e16:	4644      	mov	r4, r8
 8002e18:	0222      	lsls	r2, r4, #8
 8002e1a:	ea40 0402 	orr.w	r4, r0, r2
 8002e1e:	66bc      	str	r4, [r7, #104]	; 0x68
 8002e20:	430b      	orrs	r3, r1
 8002e22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e24:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002e28:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e2c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e3a:	4413      	add	r3, r2
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	663b      	str	r3, [r7, #96]	; 0x60
 8002e44:	667a      	str	r2, [r7, #100]	; 0x64
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e52:	464c      	mov	r4, r9
 8002e54:	0423      	lsls	r3, r4, #16
 8002e56:	4644      	mov	r4, r8
 8002e58:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002e5c:	4644      	mov	r4, r8
 8002e5e:	0422      	lsls	r2, r4, #16
 8002e60:	ea40 0402 	orr.w	r4, r0, r2
 8002e64:	65bc      	str	r4, [r7, #88]	; 0x58
 8002e66:	430b      	orrs	r3, r1
 8002e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e6a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002e6e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e72:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e7a:	1cda      	adds	r2, r3, #3
 8002e7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e80:	4413      	add	r3, r2
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2200      	movs	r2, #0
 8002e88:	653b      	str	r3, [r7, #80]	; 0x50
 8002e8a:	657a      	str	r2, [r7, #84]	; 0x54
 8002e8c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002e90:	4623      	mov	r3, r4
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e96:	4623      	mov	r3, r4
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	4303      	orrs	r3, r0
 8002ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002eac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002eb0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002eb4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002eb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ebc:	1d1a      	adds	r2, r3, #4
 8002ebe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ecc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002ed8:	0023      	movs	r3, r4
 8002eda:	2200      	movs	r2, #0
 8002edc:	ea40 0402 	orr.w	r4, r0, r2
 8002ee0:	633c      	str	r4, [r7, #48]	; 0x30
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002eea:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002eee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ef2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ef6:	1d5a      	adds	r2, r3, #5
 8002ef8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002efc:	4413      	add	r3, r2
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2200      	movs	r2, #0
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002f12:	0223      	lsls	r3, r4, #8
 8002f14:	2200      	movs	r2, #0
 8002f16:	ea40 0402 	orr.w	r4, r0, r2
 8002f1a:	623c      	str	r4, [r7, #32]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f20:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f24:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f28:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f30:	3306      	adds	r3, #6
 8002f32:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	61fa      	str	r2, [r7, #28]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	69bc      	ldr	r4, [r7, #24]
 8002f4c:	0423      	lsls	r3, r4, #16
 8002f4e:	2200      	movs	r2, #0
 8002f50:	ea40 0402 	orr.w	r4, r0, r2
 8002f54:	613c      	str	r4, [r7, #16]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f5e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f62:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f6a:	3307      	adds	r3, #7
 8002f6c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	60fa      	str	r2, [r7, #12]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	68bc      	ldr	r4, [r7, #8]
 8002f86:	0623      	lsls	r3, r4, #24
 8002f88:	2200      	movs	r2, #0
 8002f8a:	ea40 0402 	orr.w	r4, r0, r2
 8002f8e:	603c      	str	r4, [r7, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f98:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002f9c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002fa0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002fa4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002fa8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fac:	3308      	adds	r3, #8
 8002fae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002fb2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fc2:	4770      	bx	lr

08002fc4 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	0800df84 	.word	0x0800df84

08002fe0 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	0800df98 	.word	0x0800df98

08002ffc <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE>:

geometry_msgs::Point car_speed;
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);

void ROS::mecanum_callback(const geometry_msgs::Point &msgs){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	mecanum.CAR_Goal.Vx = msgs.x;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800300a:	490b      	ldr	r1, [pc, #44]	; (8003038 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 800300c:	e9c1 2300 	strd	r2, r3, [r1]
	mecanum.CAR_Goal.Vy = msgs.y;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003018:	e9c1 2302 	strd	r2, r3, [r1, #8]
	mecanum.CAR_Goal.Omega = msgs.z;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003022:	4905      	ldr	r1, [pc, #20]	; (8003038 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 8003024:	e9c1 2304 	strd	r2, r3, [r1, #16]
	mecanum.run();
 8003028:	4803      	ldr	r0, [pc, #12]	; (8003038 <_ZN3ROS16mecanum_callbackERKN13geometry_msgs5PointE+0x3c>)
 800302a:	f7fe f9e3 	bl	80013f4 <_ZN7Mecanum3runEv>
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	24000698 	.word	0x24000698

0800303c <_ZN3ROS11pub_car_velEv>:

 void ROS::pub_car_vel(void){
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
 	car_speed.x = mecanum.CAR_Now.Vx	;
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <_ZN3ROS11pub_car_velEv+0x34>)
 8003042:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003046:	490b      	ldr	r1, [pc, #44]	; (8003074 <_ZN3ROS11pub_car_velEv+0x38>)
 8003048:	e9c1 2302 	strd	r2, r3, [r1, #8]
 	car_speed.y = mecanum.CAR_Now.Vy;
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <_ZN3ROS11pub_car_velEv+0x34>)
 800304e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <_ZN3ROS11pub_car_velEv+0x38>)
 8003054:	e9c1 2304 	strd	r2, r3, [r1, #16]
 	car_speed.z = mecanum.CAR_Now.Omega;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <_ZN3ROS11pub_car_velEv+0x34>)
 800305a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800305e:	4905      	ldr	r1, [pc, #20]	; (8003074 <_ZN3ROS11pub_car_velEv+0x38>)
 8003060:	e9c1 2306 	strd	r2, r3, [r1, #24]
 	mecanum_pub.publish(&car_speed);
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <_ZN3ROS11pub_car_velEv+0x38>)
 8003066:	4804      	ldr	r0, [pc, #16]	; (8003078 <_ZN3ROS11pub_car_velEv+0x3c>)
 8003068:	f7ff f8cf 	bl	800220a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 }
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	24000698 	.word	0x24000698
 8003074:	24001820 	.word	0x24001820
 8003078:	24001878 	.word	0x24001878

0800307c <_ZN3ROS5setupEv>:


void ROS::setup(void){
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	nh.initNode();
 8003080:	4806      	ldr	r0, [pc, #24]	; (800309c <_ZN3ROS5setupEv+0x20>)
 8003082:	f000 f95d 	bl	8003340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

    nh.subscribe(mecanum_sub);
 8003086:	4906      	ldr	r1, [pc, #24]	; (80030a0 <_ZN3ROS5setupEv+0x24>)
 8003088:	4804      	ldr	r0, [pc, #16]	; (800309c <_ZN3ROS5setupEv+0x20>)
 800308a:	f000 f982 	bl	8003392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
    nh.advertise(mecanum_pub);
 800308e:	4905      	ldr	r1, [pc, #20]	; (80030a4 <_ZN3ROS5setupEv+0x28>)
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <_ZN3ROS5setupEv+0x20>)
 8003092:	f000 f9a9 	bl	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	240006e4 	.word	0x240006e4
 80030a0:	24001840 	.word	0x24001840
 80030a4:	24001878 	.word	0x24001878

080030a8 <_ZN3ROS4loopEv>:

void ROS::loop(void){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	nh.spinOnce();
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <_ZN3ROS4loopEv+0x10>)
 80030ae:	f000 f9cb 	bl	8003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	240006e4 	.word	0x240006e4

080030bc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80030c4:	4805      	ldr	r0, [pc, #20]	; (80030dc <HAL_UART_TxCpltCallback+0x20>)
 80030c6:	f000 fc30 	bl	800392a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f9d1 	bl	8002474 <_ZN13STM32Hardware5flushEv>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	240006e4 	.word	0x240006e4

080030e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80030e8:	4805      	ldr	r0, [pc, #20]	; (8003100 <HAL_UART_RxCpltCallback+0x20>)
 80030ea:	f000 fc1e 	bl	800392a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 80030ee:	4603      	mov	r3, r0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f980 	bl	80023f6 <_ZN13STM32Hardware10reset_rbufEv>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	240006e4 	.word	0x240006e4

08003104 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d80d      	bhi.n	8003134 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	fa22 f103 	lsr.w	r1, r2, r3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	b2ca      	uxtb	r2, r1
 800312a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e7ee      	b.n	8003112 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d811      	bhi.n	800317e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	440a      	add	r2, r1
 8003164:	7812      	ldrb	r2, [r2, #0]
 8003166:	4611      	mov	r1, r2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	00d2      	lsls	r2, r2, #3
 800316c:	fa01 f202 	lsl.w	r2, r1, r2
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3301      	adds	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e7ea      	b.n	8003154 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	0800e098 	.word	0x0800e098

080031ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ffe8 	bl	800318c <_ZN3ros15NodeHandleBase_C1Ev>
 80031bc:	4a45      	ldr	r2, [pc, #276]	; (80032d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f8ee 	bl	80023a8 <_ZN13STM32HardwareC1Ev>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	f241 1314 	movw	r3, #4372	; 0x1114
 80031de:	4413      	add	r3, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fd39 	bl	8001c58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b18      	cmp	r3, #24
 80031ee:	d80b      	bhi.n	8003208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	2200      	movs	r2, #0
 80031fe:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	3301      	adds	r3, #1
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e7f0      	b.n	80031ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b18      	cmp	r3, #24
 8003210:	d80a      	bhi.n	8003228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800321a:	2100      	movs	r1, #0
 800321c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	3301      	adds	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e7f1      	b.n	800320c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d20a      	bcs.n	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e7f0      	b.n	800322c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003254:	d20a      	bcs.n	800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4413      	add	r3, r2
 800325c:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	e7f0      	b.n	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003272:	461a      	mov	r2, r3
 8003274:	2300      	movs	r3, #0
 8003276:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003280:	461a      	mov	r2, r3
 8003282:	2300      	movs	r3, #0
 8003284:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.floats_length = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800328e:	461a      	mov	r2, r3
 8003290:	2300      	movs	r3, #0
 8003292:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats = NULL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329c:	461a      	mov	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    req_param_resp.ints_length = 0;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032aa:	461a      	mov	r2, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b8:	461a      	mov	r2, r3
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    spin_timeout_ = 0;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	0800e054 	.word	0x0800e054

080032d8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	0800e080 	.word	0x0800e080

080032f8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffe5 	bl	80032d8 <_ZN3ros11Subscriber_C1Ev>
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	3310      	adds	r3, #16
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff f959 	bl	80025d0 <_ZN13geometry_msgs5PointC1Ev>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	635a      	str	r2, [r3, #52]	; 0x34
  {
    topic_ = topic_name;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
  };
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	0800e03c 	.word	0x0800e03c

08003340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3304      	adds	r3, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff f847 	bl	80023e0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003358:	461a      	mov	r2, r3
 800335a:	2300      	movs	r3, #0
 800335c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    bytes_ = 0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003366:	461a      	mov	r2, r3
 8003368:	2300      	movs	r3, #0
 800336a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    index_ = 0;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003374:	461a      	mov	r2, r3
 8003376:	2300      	movs	r3, #0
 8003378:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    topic_ = 0;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	461a      	mov	r2, r3
 8003384:	2300      	movs	r3, #0
 8003386:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
  };
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b18      	cmp	r3, #24
 80033a4:	dc19      	bgt.n	80033da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80033ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10d      	bne.n	80033d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80033c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	605a      	str	r2, [r3, #4]
        return true;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e004      	b.n	80033dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3301      	adds	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e7e2      	b.n	80033a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
      }
    }
    return false;
 80033da:	2300      	movs	r3, #0
  }
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	dc1e      	bgt.n	800343a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d111      	bne.n	8003432 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	60da      	str	r2, [r3, #12]
        return true;
 800342e:	2301      	movs	r3, #1
 8003430:	e004      	b.n	800343c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e7dd      	b.n	80033f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800343a:	2300      	movs	r3, #0
  }
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff f8af 	bl	80025b8 <_ZN13STM32Hardware4timeEv>
 800345a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003462:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800346e:	4293      	cmp	r3, r2
 8003470:	d905      	bls.n	800347e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
      configured_ = false;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    if (mode_ != MODE_FIRST_FF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003484:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003492:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d906      	bls.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034a2:	461a      	mov	r2, r3
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
      if (spin_timeout_ > 0)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d014      	beq.n	80034de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff f87d 	bl	80025b8 <_ZN13STM32Hardware4timeEv>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 80034ca:	429a      	cmp	r2, r3
 80034cc:	bf8c      	ite	hi
 80034ce:	2301      	movhi	r3, #1
 80034d0:	2300      	movls	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 80034d8:	f06f 0301 	mvn.w	r3, #1
 80034dc:	e221      	b.n	8003922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe ff98 	bl	8002418 <_ZN13STM32Hardware4readEv>
 80034e8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f2c0 81fa 	blt.w	80038e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
      checksum_ += data;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4413      	add	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003506:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003510:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003514:	2b07      	cmp	r3, #7
 8003516:	d12b      	bne.n	8003570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800351e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800352a:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	b2d1      	uxtb	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	460a      	mov	r2, r1
 8003538:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003546:	3b01      	subs	r3, #1
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800354e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1a4      	bne.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003566:	461a      	mov	r2, r3
 8003568:	2308      	movs	r3, #8
 800356a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800356e:	e79c      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003576:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800357a:	2b00      	cmp	r3, #0
 800357c:	d130      	bne.n	80035e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
        if (data == 0xff)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2bff      	cmp	r3, #255	; 0xff
 8003582:	d112      	bne.n	80035aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
          mode_++;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800358e:	3301      	adds	r3, #1
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003596:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3314      	adds	r3, #20
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80035a4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80035a8:	e77f      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	3304      	adds	r3, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f802 	bl	80025b8 <_ZN13STM32Hardware4timeEv>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	bf8c      	ite	hi
 80035c2:	2301      	movhi	r3, #1
 80035c4:	2300      	movls	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f43f af6e 	beq.w	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          configured_ = false;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 80035da:	f06f 0301 	mvn.w	r3, #1
 80035de:	e1a0      	b.n	8003922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d121      	bne.n	8003632 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2bfe      	cmp	r3, #254	; 0xfe
 80035f2:	d10b      	bne.n	800360c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
          mode_++;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035fe:	3301      	adds	r3, #1
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003606:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800360a:	e74e      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003612:	461a      	mov	r2, r3
 8003614:	2300      	movs	r3, #0
 8003616:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003620:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f af40 	bne.w	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f989 	bl	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8003630:	e73b      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800363c:	2b02      	cmp	r3, #2
 800363e:	d120      	bne.n	8003682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
        bytes_ = data;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003654:	461a      	mov	r2, r3
 8003656:	2300      	movs	r3, #0
 8003658:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003662:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003666:	3301      	adds	r3, #1
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800366e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003680:	e713      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003688:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800368c:	2b03      	cmp	r3, #3
 800368e:	d118      	bne.n	80036c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003696:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	4413      	add	r3, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80036b4:	3301      	adds	r3, #1
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036bc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80036c0:	e6f3      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d11f      	bne.n	8003710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80036da:	425a      	negs	r2, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	bf58      	it	pl
 80036e2:	4253      	negpl	r3, r2
 80036e4:	2bff      	cmp	r3, #255	; 0xff
 80036e6:	d10b      	bne.n	8003700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80036f2:	3301      	adds	r3, #1
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036fa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80036fe:	e6d4      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003706:	461a      	mov	r2, r3
 8003708:	2300      	movs	r3, #0
 800370a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800370e:	e6cc      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003716:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800371a:	2b05      	cmp	r3, #5
 800371c:	d119      	bne.n	8003752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
        topic_ = data;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003732:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003736:	3301      	adds	r3, #1
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800373e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8003750:	e6ab      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003758:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800375c:	2b06      	cmp	r3, #6
 800375e:	d123      	bne.n	80037a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003766:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	4413      	add	r3, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003776:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003780:	461a      	mov	r2, r3
 8003782:	2307      	movs	r3, #7
 8003784:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f47f ae89 	bne.w	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379e:	461a      	mov	r2, r3
 80037a0:	2308      	movs	r3, #8
 80037a2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80037a6:	e680      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	f47f ae79 	bne.w	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80037d0:	425a      	negs	r2, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	bf58      	it	pl
 80037d8:	4253      	negpl	r3, r2
 80037da:	2bff      	cmp	r3, #255	; 0xff
 80037dc:	f47f ae65 	bne.w	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
            requestSyncTime();
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8a7 	bl	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8c2 	bl	800397e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003800:	461a      	mov	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 8003816:	f04f 33ff 	mov.w	r3, #4294967295
 800381a:	e082      	b.n	8003922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003826:	2b0a      	cmp	r3, #10
 8003828:	d107      	bne.n	800383a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f984 	bl	8003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8003838:	e637      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003844:	2b06      	cmp	r3, #6
 8003846:	d111      	bne.n	800386c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	f241 1314 	movw	r3, #4372	; 0x1114
 800384e:	4413      	add	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fb32 	bl	8001ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 800386a:	e61e      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003876:	2b0b      	cmp	r3, #11
 8003878:	d106      	bne.n	8003888 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
            configured_ = false;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003886:	e610      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800388e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003892:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800389c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f43f ae02 	beq.w	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038b0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80038ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038c8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80038d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80038e0:	4611      	mov	r1, r2
 80038e2:	4798      	blx	r3
    while (true)
 80038e4:	e5e1      	b.n	80034aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 80038e6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ee:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d014      	beq.n	8003920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003908:	4293      	cmp	r3, r2
 800390a:	d909      	bls.n	8003920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
      requestSyncTime();
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f818 	bl	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003918:	461a      	mov	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    return SPIN_OK;
 8003920:	2300      	movs	r3, #0
  }
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:
  Hardware* getHardware()
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3304      	adds	r3, #4
  }
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fe1e 	bl	8001590 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f107 020c 	add.w	r2, r7, #12
 800395e:	210a      	movs	r1, #10
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
    rt_time = hardware_.time();
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe fe25 	bl	80025b8 <_ZN13STM32Hardware4timeEv>
 800396e:	4602      	mov	r2, r0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800397e:	b590      	push	{r4, r7, lr}
 8003980:	b08b      	sub	sp, #44	; 0x2c
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fef0 	bl	8001770 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	2b18      	cmp	r3, #24
 8003998:	dc63      	bgt.n	8003a62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d056      	beq.n	8003a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3308      	adds	r3, #8
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4608      	mov	r0, r1
 80039fa:	4798      	blx	r3
 80039fc:	4603      	mov	r3, r0
 80039fe:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4608      	mov	r0, r1
 8003a28:	4798      	blx	r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a32:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681c      	ldr	r4, [r3, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fbf2 	bl	8002232 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003a4e:	4601      	mov	r1, r0
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	461a      	mov	r2, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a60:	e798      	b.n	8003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	2b18      	cmp	r3, #24
 8003a6a:	dc5f      	bgt.n	8003b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a70:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d053      	beq.n	8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003aa6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4608      	mov	r0, r1
 8003abe:	4798      	blx	r3
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4798      	blx	r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aee:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681c      	ldr	r4, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afa:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003afe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3304      	adds	r3, #4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4608      	mov	r0, r1
 8003b16:	4798      	blx	r3
 8003b18:	4601      	mov	r1, r0
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	e79c      	b.n	8003a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 8003b38:	bf00      	nop
 8003b3a:	372c      	adds	r7, #44	; 0x2c
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}

08003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fd1e 	bl	8001590 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fd2d 	bl	80025b8 <_ZN13STM32Hardware4timeEv>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd fd7d 	bl	8001670 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4916      	ldr	r1, [pc, #88]	; (8003bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b7c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	4413      	add	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003b8c:	fba3 0302 	umull	r0, r3, r3, r2
 8003b90:	099b      	lsrs	r3, r3, #6
 8003b92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b96:	fb00 f303 	mul.w	r3, r0, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	4a0e      	ldr	r2, [pc, #56]	; (8003bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003ba6:	f107 0308 	add.w	r3, r7, #8
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8aa 	bl	8003d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe fcfd 	bl	80025b8 <_ZN13STM32Hardware4timeEv>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	10624dd3 	.word	0x10624dd3
 8003bd8:	000f4240 	.word	0x000f4240

08003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b63      	cmp	r3, #99	; 0x63
 8003bec:	dd0b      	ble.n	8003c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8003bf8:	f083 0301 	eor.w	r3, r3, #1
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e079      	b.n	8003cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8003c12:	3207      	adds	r2, #7
 8003c14:	4611      	mov	r1, r2
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4798      	blx	r3
 8003c1a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	22ff      	movs	r2, #255	; 0xff
 8003c20:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	22fe      	movs	r2, #254	; 0xfe
 8003c28:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 8003c52:	4413      	add	r3, r2
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	b21b      	sxth	r3, r3
 8003c6e:	121b      	asrs	r3, r3, #8
 8003c70:	b21b      	sxth	r3, r3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003c7e:	2305      	movs	r3, #5
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	3306      	adds	r3, #6
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	dc0d      	bgt.n	8003ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4413      	add	r3, r2
 8003c92:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	e7ec      	b.n	8003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3307      	adds	r3, #7
 8003cac:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	425a      	negs	r2, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	bf58      	it	pl
 8003cb8:	4253      	negpl	r3, r2
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	6179      	str	r1, [r7, #20]
 8003cc2:	43d2      	mvns	r2, r2
 8003cc4:	b2d1      	uxtb	r1, r2
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	460a      	mov	r2, r1
 8003ccc:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd6:	dc0a      	bgt.n	8003cee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1d18      	adds	r0, r3, #4
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fe fc21 	bl	800252c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	e005      	b.n	8003cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003cee:	4905      	ldr	r1, [pc, #20]	; (8003d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f849 	bl	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	0800dfbc 	.word	0x0800dfbc

08003d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fc4e 	bl	80025b8 <_ZN13STM32Hardware4timeEv>
 8003d1c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4915      	ldr	r1, [pc, #84]	; (8003d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003d26:	fba1 1303 	umull	r1, r3, r1, r3
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	1e5a      	subs	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003d3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d48:	fb00 f303 	mul.w	r3, r0, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	1aca      	subs	r2, r1, r3
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	f7fc fc58 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	10624dd3 	.word	0x10624dd3
 8003d80:	000f4240 	.word	0x000f4240
 8003d84:	3b9aca00 	.word	0x3b9aca00

08003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	2103      	movs	r1, #3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f804 	bl	8003da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	460b      	mov	r3, r1
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003db2:	f107 0314 	add.w	r3, r7, #20
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd fe9e 	bl	8001af8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f107 0214 	add.w	r2, r7, #20
 8003dce:	2107      	movs	r1, #7
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	4798      	blx	r3
  }
 8003dd4:	bf00      	nop
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_Z41__static_initialization_and_destruction_0ii>:
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d116      	bne.n	8003e1a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d111      	bne.n	8003e1a <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 8003df6:	480b      	ldr	r0, [pc, #44]	; (8003e24 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003df8:	f7ff f9d8 	bl	80031ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
geometry_msgs::Point car_speed;
 8003dfc:	480a      	ldr	r0, [pc, #40]	; (8003e28 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003dfe:	f7fe fbe7 	bl	80025d0 <_ZN13geometry_msgs5PointC1Ev>
ros::Subscriber<geometry_msgs::Point> mecanum_sub("mecanum_toSTM", ROS::mecanum_callback);
 8003e02:	2301      	movs	r3, #1
 8003e04:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003e08:	480a      	ldr	r0, [pc, #40]	; (8003e34 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003e0a:	f7ff fa75 	bl	80032f8 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
ros::Publisher mecanum_pub("mecanum_fromSTM", &car_speed);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003e12:	4909      	ldr	r1, [pc, #36]	; (8003e38 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003e14:	4809      	ldr	r0, [pc, #36]	; (8003e3c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003e16:	f7fe f9e1 	bl	80021dc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	240006e4 	.word	0x240006e4
 8003e28:	24001820 	.word	0x24001820
 8003e2c:	08002ffd 	.word	0x08002ffd
 8003e30:	0800dff8 	.word	0x0800dff8
 8003e34:	24001840 	.word	0x24001840
 8003e38:	0800e008 	.word	0x0800e008
 8003e3c:	24001878 	.word	0x24001878

08003e40 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	6839      	ldr	r1, [r7, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fd58 	bl	8002906 <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	3210      	adds	r2, #16
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4798      	blx	r3
  }
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f898 	bl	8002fc4 <_ZN13geometry_msgs5Point7getTypeEv>
 8003e94:	4603      	mov	r3, r0
  }
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3310      	adds	r3, #16
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff f898 	bl	8002fe0 <_ZN13geometry_msgs5Point6getMD5Ev>
 8003eb0:	4603      	mov	r3, r0
  }
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
    return configured_;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <_GLOBAL__sub_I_nh>:
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f7ff ff7b 	bl	8003ddc <_Z41__static_initialization_and_destruction_0ii>
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_MspInit+0x3c>)
 8003ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <HAL_MspInit+0x3c>)
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_MspInit+0x3c>)
 8003f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2005      	movs	r0, #5
 8003f12:	f000 fede 	bl	8004cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f16:	2005      	movs	r0, #5
 8003f18:	f000 fef5 	bl	8004d06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	58024400 	.word	0x58024400

08003f28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b090      	sub	sp, #64	; 0x40
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d14e      	bne.n	8003fe8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f4a:	4b77      	ldr	r3, [pc, #476]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f50:	4a75      	ldr	r2, [pc, #468]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f5a:	4b73      	ldr	r3, [pc, #460]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f68:	4b6f      	ldr	r3, [pc, #444]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f6e:	4a6e      	ldr	r2, [pc, #440]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f78:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f86:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f8c:	4a66      	ldr	r2, [pc, #408]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f96:	4b64      	ldr	r3, [pc, #400]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	485a      	ldr	r0, [pc, #360]	; (800412c <HAL_TIM_Encoder_MspInit+0x204>)
 8003fc2:	f003 fcf5 	bl	80079b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4853      	ldr	r0, [pc, #332]	; (8004130 <HAL_TIM_Encoder_MspInit+0x208>)
 8003fe2:	f003 fce5 	bl	80079b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003fe6:	e09b      	b.n	8004120 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a51      	ldr	r2, [pc, #324]	; (8004134 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d12e      	bne.n	8004050 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ff8:	4a4b      	ldr	r2, [pc, #300]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004002:	4b49      	ldr	r3, [pc, #292]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8004004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004010:	4b45      	ldr	r3, [pc, #276]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8004012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004016:	4a44      	ldr	r2, [pc, #272]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8004018:	f043 0302 	orr.w	r3, r3, #2
 800401c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004020:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8004022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800402e:	2330      	movs	r3, #48	; 0x30
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800403e:	2302      	movs	r3, #2
 8004040:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004046:	4619      	mov	r1, r3
 8004048:	4839      	ldr	r0, [pc, #228]	; (8004130 <HAL_TIM_Encoder_MspInit+0x208>)
 800404a:	f003 fcb1 	bl	80079b0 <HAL_GPIO_Init>
}
 800404e:	e067      	b.n	8004120 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a38      	ldr	r2, [pc, #224]	; (8004138 <HAL_TIM_Encoder_MspInit+0x210>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d12f      	bne.n	80040ba <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800405a:	4b33      	ldr	r3, [pc, #204]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 800405c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004060:	4a31      	ldr	r2, [pc, #196]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800406a:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 800406c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004078:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 800407a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004088:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 800408a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004096:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a4:	2300      	movs	r3, #0
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040a8:	2302      	movs	r3, #2
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b0:	4619      	mov	r1, r3
 80040b2:	4822      	ldr	r0, [pc, #136]	; (800413c <HAL_TIM_Encoder_MspInit+0x214>)
 80040b4:	f003 fc7c 	bl	80079b0 <HAL_GPIO_Init>
}
 80040b8:	e032      	b.n	8004120 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a20      	ldr	r2, [pc, #128]	; (8004140 <HAL_TIM_Encoder_MspInit+0x218>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d12d      	bne.n	8004120 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 80040c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040d4:	4b14      	ldr	r3, [pc, #80]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 80040d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 80040e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e8:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_TIM_Encoder_MspInit+0x200>)
 80040f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004100:	2303      	movs	r3, #3
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410c:	2300      	movs	r3, #0
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004110:	2302      	movs	r3, #2
 8004112:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004118:	4619      	mov	r1, r3
 800411a:	4804      	ldr	r0, [pc, #16]	; (800412c <HAL_TIM_Encoder_MspInit+0x204>)
 800411c:	f003 fc48 	bl	80079b0 <HAL_GPIO_Init>
}
 8004120:	bf00      	nop
 8004122:	3740      	adds	r7, #64	; 0x40
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	58024400 	.word	0x58024400
 800412c:	58020000 	.word	0x58020000
 8004130:	58020400 	.word	0x58020400
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	58020c00 	.word	0x58020c00
 8004140:	40000c00 	.word	0x40000c00

08004144 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <HAL_TIM_PWM_MspInit+0x84>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d117      	bne.n	8004186 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_TIM_PWM_MspInit+0x88>)
 8004158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_TIM_PWM_MspInit+0x88>)
 800415e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004162:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_TIM_PWM_MspInit+0x88>)
 8004168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004174:	2200      	movs	r2, #0
 8004176:	2100      	movs	r1, #0
 8004178:	202b      	movs	r0, #43	; 0x2b
 800417a:	f000 fdaa 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800417e:	202b      	movs	r0, #43	; 0x2b
 8004180:	f000 fdc1 	bl	8004d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004184:	e01b      	b.n	80041be <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a11      	ldr	r2, [pc, #68]	; (80041d0 <HAL_TIM_PWM_MspInit+0x8c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d116      	bne.n	80041be <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <HAL_TIM_PWM_MspInit+0x88>)
 8004192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004196:	4a0d      	ldr	r2, [pc, #52]	; (80041cc <HAL_TIM_PWM_MspInit+0x88>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <HAL_TIM_PWM_MspInit+0x88>)
 80041a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	2074      	movs	r0, #116	; 0x74
 80041b4:	f000 fd8d 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80041b8:	2074      	movs	r0, #116	; 0x74
 80041ba:	f000 fda4 	bl	8004d06 <HAL_NVIC_EnableIRQ>
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40001800 	.word	0x40001800
 80041cc:	58024400 	.word	0x58024400
 80041d0:	40014000 	.word	0x40014000

080041d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0e      	ldr	r2, [pc, #56]	; (800421c <HAL_TIM_Base_MspInit+0x48>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d116      	bne.n	8004214 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80041e6:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_TIM_Base_MspInit+0x4c>)
 80041e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041ec:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <HAL_TIM_Base_MspInit+0x4c>)
 80041ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_TIM_Base_MspInit+0x4c>)
 80041f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004204:	2200      	movs	r2, #0
 8004206:	2100      	movs	r1, #0
 8004208:	202c      	movs	r0, #44	; 0x2c
 800420a:	f000 fd62 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800420e:	202c      	movs	r0, #44	; 0x2c
 8004210:	f000 fd79 	bl	8004d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40001c00 	.word	0x40001c00
 8004220:	58024400 	.word	0x58024400

08004224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <HAL_TIM_MspPostInit+0xb4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d120      	bne.n	8004288 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004246:	4b25      	ldr	r3, [pc, #148]	; (80042dc <HAL_TIM_MspPostInit+0xb8>)
 8004248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <HAL_TIM_MspPostInit+0xb8>)
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_TIM_MspPostInit+0xb8>)
 8004258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004264:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426a:	2302      	movs	r3, #2
 800426c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004272:	2300      	movs	r3, #0
 8004274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004276:	2302      	movs	r3, #2
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	4619      	mov	r1, r3
 8004280:	4817      	ldr	r0, [pc, #92]	; (80042e0 <HAL_TIM_MspPostInit+0xbc>)
 8004282:	f003 fb95 	bl	80079b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004286:	e023      	b.n	80042d0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <HAL_TIM_MspPostInit+0xc0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d11e      	bne.n	80042d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_TIM_MspPostInit+0xb8>)
 8004294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004298:	4a10      	ldr	r2, [pc, #64]	; (80042dc <HAL_TIM_MspPostInit+0xb8>)
 800429a:	f043 0310 	orr.w	r3, r3, #16
 800429e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_TIM_MspPostInit+0xb8>)
 80042a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80042b0:	2360      	movs	r3, #96	; 0x60
 80042b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042bc:	2300      	movs	r3, #0
 80042be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80042c0:	2304      	movs	r3, #4
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	4619      	mov	r1, r3
 80042ca:	4807      	ldr	r0, [pc, #28]	; (80042e8 <HAL_TIM_MspPostInit+0xc4>)
 80042cc:	f003 fb70 	bl	80079b0 <HAL_GPIO_Init>
}
 80042d0:	bf00      	nop
 80042d2:	3728      	adds	r7, #40	; 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40001800 	.word	0x40001800
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58020400 	.word	0x58020400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	58021000 	.word	0x58021000

080042ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b0b6      	sub	sp, #216	; 0xd8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004304:	f107 0310 	add.w	r3, r7, #16
 8004308:	22b4      	movs	r2, #180	; 0xb4
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f009 fc39 	bl	800db84 <memset>
  if(huart->Instance==USART1)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a57      	ldr	r2, [pc, #348]	; (8004474 <HAL_UART_MspInit+0x188>)
 8004318:	4293      	cmp	r3, r2
 800431a:	f040 80a7 	bne.w	800446c <HAL_UART_MspInit+0x180>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800431e:	2301      	movs	r3, #1
 8004320:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004328:	f107 0310 	add.w	r3, r7, #16
 800432c:	4618      	mov	r0, r3
 800432e:	f004 fc75 	bl	8008c1c <HAL_RCCEx_PeriphCLKConfig>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004338:	f7fc fff0 	bl	800131c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800433c:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <HAL_UART_MspInit+0x18c>)
 800433e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004342:	4a4d      	ldr	r2, [pc, #308]	; (8004478 <HAL_UART_MspInit+0x18c>)
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800434c:	4b4a      	ldr	r3, [pc, #296]	; (8004478 <HAL_UART_MspInit+0x18c>)
 800434e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435a:	4b47      	ldr	r3, [pc, #284]	; (8004478 <HAL_UART_MspInit+0x18c>)
 800435c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004360:	4a45      	ldr	r2, [pc, #276]	; (8004478 <HAL_UART_MspInit+0x18c>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800436a:	4b43      	ldr	r3, [pc, #268]	; (8004478 <HAL_UART_MspInit+0x18c>)
 800436c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004378:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800437c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004386:	2300      	movs	r3, #0
 8004388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004392:	2307      	movs	r3, #7
 8004394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004398:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800439c:	4619      	mov	r1, r3
 800439e:	4837      	ldr	r0, [pc, #220]	; (800447c <HAL_UART_MspInit+0x190>)
 80043a0:	f003 fb06 	bl	80079b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80043a4:	4b36      	ldr	r3, [pc, #216]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043a6:	4a37      	ldr	r2, [pc, #220]	; (8004484 <HAL_UART_MspInit+0x198>)
 80043a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80043aa:	4b35      	ldr	r3, [pc, #212]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043ac:	2229      	movs	r2, #41	; 0x29
 80043ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043b0:	4b33      	ldr	r3, [pc, #204]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b6:	4b32      	ldr	r3, [pc, #200]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043bc:	4b30      	ldr	r3, [pc, #192]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043c4:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043ca:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80043d0:	4b2b      	ldr	r3, [pc, #172]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043de:	4b28      	ldr	r3, [pc, #160]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80043e4:	4826      	ldr	r0, [pc, #152]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043e6:	f000 fca9 	bl	8004d3c <HAL_DMA_Init>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80043f0:	f7fc ff94 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a22      	ldr	r2, [pc, #136]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80043fa:	4a21      	ldr	r2, [pc, #132]	; (8004480 <HAL_UART_MspInit+0x194>)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004402:	4a22      	ldr	r2, [pc, #136]	; (800448c <HAL_UART_MspInit+0x1a0>)
 8004404:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004408:	222a      	movs	r2, #42	; 0x2a
 800440a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800440c:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <HAL_UART_MspInit+0x19c>)
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004414:	2200      	movs	r2, #0
 8004416:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_UART_MspInit+0x19c>)
 800441a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800441e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004422:	2200      	movs	r2, #0
 8004424:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004426:	4b18      	ldr	r3, [pc, #96]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800442c:	4b16      	ldr	r3, [pc, #88]	; (8004488 <HAL_UART_MspInit+0x19c>)
 800442e:	2200      	movs	r2, #0
 8004430:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004434:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004438:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <HAL_UART_MspInit+0x19c>)
 800443c:	2200      	movs	r2, #0
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004440:	4811      	ldr	r0, [pc, #68]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004442:	f000 fc7b 	bl	8004d3c <HAL_DMA_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 800444c:	f7fc ff66 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a0d      	ldr	r2, [pc, #52]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004454:	679a      	str	r2, [r3, #120]	; 0x78
 8004456:	4a0c      	ldr	r2, [pc, #48]	; (8004488 <HAL_UART_MspInit+0x19c>)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800445c:	2200      	movs	r2, #0
 800445e:	2100      	movs	r1, #0
 8004460:	2025      	movs	r0, #37	; 0x25
 8004462:	f000 fc36 	bl	8004cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004466:	2025      	movs	r0, #37	; 0x25
 8004468:	f000 fc4d 	bl	8004d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800446c:	bf00      	nop
 800446e:	37d8      	adds	r7, #216	; 0xd8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40011000 	.word	0x40011000
 8004478:	58024400 	.word	0x58024400
 800447c:	58020000 	.word	0x58020000
 8004480:	240005a4 	.word	0x240005a4
 8004484:	40020010 	.word	0x40020010
 8004488:	2400061c 	.word	0x2400061c
 800448c:	40020028 	.word	0x40020028

08004490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004494:	e7fe      	b.n	8004494 <NMI_Handler+0x4>

08004496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800449a:	e7fe      	b.n	800449a <HardFault_Handler+0x4>

0800449c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044a0:	e7fe      	b.n	80044a0 <MemManage_Handler+0x4>

080044a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044a2:	b480      	push	{r7}
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044a6:	e7fe      	b.n	80044a6 <BusFault_Handler+0x4>

080044a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ac:	e7fe      	b.n	80044ac <UsageFault_Handler+0x4>

080044ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044dc:	f000 fafe 	bl	8004adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <DMA1_Stream0_IRQHandler+0x10>)
 80044fa:	f001 ff47 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	240005a4 	.word	0x240005a4

08004508 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <DMA1_Stream1_IRQHandler+0x10>)
 800450e:	f001 ff3d 	bl	800638c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	2400061c 	.word	0x2400061c

0800451c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <USART1_IRQHandler+0x10>)
 8004522:	f007 faf9 	bl	800bb18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	24000514 	.word	0x24000514

08004530 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004534:	4802      	ldr	r0, [pc, #8]	; (8004540 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004536:	f006 fa5f 	bl	800a9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	24000430 	.word	0x24000430

08004544 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800454a:	f006 fa55 	bl	800a9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	2400047c 	.word	0x2400047c

08004558 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <TIM15_IRQHandler+0x10>)
 800455e:	f006 fa4b 	bl	800a9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	240004c8 	.word	0x240004c8

0800456c <_ZN3STM5setupEv>:
#include "stm_main.h"
#include "dc_motor.h"
#include "mecanum.h"

void STM::setup(void){
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
	DC_motor_init();
 8004570:	f7fc f884 	bl	800067c <_Z13DC_motor_initv>
}
 8004574:	bf00      	nop
 8004576:	bd80      	pop	{r7, pc}

08004578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
	return 1;
 800457c:	2301      	movs	r3, #1
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <_kill>:

int _kill(int pid, int sig)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004592:	f009 fabf 	bl	800db14 <__errno>
 8004596:	4603      	mov	r3, r0
 8004598:	2216      	movs	r2, #22
 800459a:	601a      	str	r2, [r3, #0]
	return -1;
 800459c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <_exit>:

void _exit (int status)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045b0:	f04f 31ff 	mov.w	r1, #4294967295
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ffe7 	bl	8004588 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045ba:	e7fe      	b.n	80045ba <_exit+0x12>

080045bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <_sbrk+0x5c>)
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <_sbrk+0x60>)
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <_sbrk+0x64>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <_sbrk+0x64>)
 80045da:	4a12      	ldr	r2, [pc, #72]	; (8004624 <_sbrk+0x68>)
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <_sbrk+0x64>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d207      	bcs.n	80045fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045ec:	f009 fa92 	bl	800db14 <__errno>
 80045f0:	4603      	mov	r3, r0
 80045f2:	220c      	movs	r2, #12
 80045f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	e009      	b.n	8004610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <_sbrk+0x64>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <_sbrk+0x64>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <_sbrk+0x64>)
 800460c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800460e:	68fb      	ldr	r3, [r7, #12]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	24050000 	.word	0x24050000
 800461c:	00000400 	.word	0x00000400
 8004620:	2400188c 	.word	0x2400188c
 8004624:	240018a8 	.word	0x240018a8

08004628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800462c:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <SystemInit+0xd0>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	4a31      	ldr	r2, [pc, #196]	; (80046f8 <SystemInit+0xd0>)
 8004634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800463c:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <SystemInit+0xd4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	2b06      	cmp	r3, #6
 8004646:	d807      	bhi.n	8004658 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004648:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <SystemInit+0xd4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f023 030f 	bic.w	r3, r3, #15
 8004650:	4a2a      	ldr	r2, [pc, #168]	; (80046fc <SystemInit+0xd4>)
 8004652:	f043 0307 	orr.w	r3, r3, #7
 8004656:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004658:	4b29      	ldr	r3, [pc, #164]	; (8004700 <SystemInit+0xd8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a28      	ldr	r2, [pc, #160]	; (8004700 <SystemInit+0xd8>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004664:	4b26      	ldr	r3, [pc, #152]	; (8004700 <SystemInit+0xd8>)
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800466a:	4b25      	ldr	r3, [pc, #148]	; (8004700 <SystemInit+0xd8>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4924      	ldr	r1, [pc, #144]	; (8004700 <SystemInit+0xd8>)
 8004670:	4b24      	ldr	r3, [pc, #144]	; (8004704 <SystemInit+0xdc>)
 8004672:	4013      	ands	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <SystemInit+0xd4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d007      	beq.n	8004692 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <SystemInit+0xd4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 030f 	bic.w	r3, r3, #15
 800468a:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <SystemInit+0xd4>)
 800468c:	f043 0307 	orr.w	r3, r3, #7
 8004690:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <SystemInit+0xd8>)
 8004694:	2200      	movs	r2, #0
 8004696:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <SystemInit+0xd8>)
 800469a:	2200      	movs	r2, #0
 800469c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800469e:	4b18      	ldr	r3, [pc, #96]	; (8004700 <SystemInit+0xd8>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <SystemInit+0xd8>)
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <SystemInit+0xe0>)
 80046a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <SystemInit+0xd8>)
 80046ac:	4a17      	ldr	r2, [pc, #92]	; (800470c <SystemInit+0xe4>)
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <SystemInit+0xd8>)
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <SystemInit+0xe8>)
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <SystemInit+0xd8>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <SystemInit+0xd8>)
 80046be:	4a14      	ldr	r2, [pc, #80]	; (8004710 <SystemInit+0xe8>)
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80046c2:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <SystemInit+0xd8>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <SystemInit+0xd8>)
 80046ca:	4a11      	ldr	r2, [pc, #68]	; (8004710 <SystemInit+0xe8>)
 80046cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <SystemInit+0xd8>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80046d4:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <SystemInit+0xd8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a09      	ldr	r2, [pc, #36]	; (8004700 <SystemInit+0xd8>)
 80046da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <SystemInit+0xd8>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <SystemInit+0xec>)
 80046e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80046ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00
 80046fc:	52002000 	.word	0x52002000
 8004700:	58024400 	.word	0x58024400
 8004704:	eaf6ed7f 	.word	0xeaf6ed7f
 8004708:	02020200 	.word	0x02020200
 800470c:	01ff0000 	.word	0x01ff0000
 8004710:	01010280 	.word	0x01010280
 8004714:	52004000 	.word	0x52004000

08004718 <HAL_TIM_PeriodElapsedCallback>:

void motor_standard(void);
void motor_matlab(int fr, int fl, int br, int bl);
void motor_debug(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0f      	ldr	r2, [pc, #60]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d117      	bne.n	800475a <HAL_TIM_PeriodElapsedCallback+0x42>

	/* ROS publish */
		static int ms=0;
		ms++;
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004732:	6013      	str	r3, [r2, #0]
		if(ms%10==0) ROS::pub_car_vel();
 8004734:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004736:	6819      	ldr	r1, [r3, #0]
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800473a:	fb83 2301 	smull	r2, r3, r3, r1
 800473e:	109a      	asrs	r2, r3, #2
 8004740:	17cb      	asrs	r3, r1, #31
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	1aca      	subs	r2, r1, r3
 800474e:	2a00      	cmp	r2, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8004752:	f7fe fc73 	bl	800303c <_ZN3ROS11pub_car_velEv>

	/* STM control */
//		motor_matlab(true, false, false, false);
		motor_standard();
 8004756:	f000 f80b 	bl	8004770 <_Z14motor_standardv>
	}
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40001c00 	.word	0x40001c00
 8004768:	24001890 	.word	0x24001890
 800476c:	66666667 	.word	0x66666667

08004770 <_Z14motor_standardv>:


void motor_standard(void){
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
	/*enc 1*/
		fr.CountNow = __HAL_TIM_GetCounter(&htim2);
 8004774:	4b7d      	ldr	r3, [pc, #500]	; (800496c <_Z14motor_standardv+0x1fc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b21a      	sxth	r2, r3
 800477c:	4b7c      	ldr	r3, [pc, #496]	; (8004970 <_Z14motor_standardv+0x200>)
 800477e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fr.PIDControl_manual();
 8004782:	487b      	ldr	r0, [pc, #492]	; (8004970 <_Z14motor_standardv+0x200>)
 8004784:	f7fb fffa 	bl	800077c <_ZN8DC_motor17PIDControl_manualEv>
		__HAL_TIM_SetCounter(&htim2,0);
 8004788:	4b78      	ldr	r3, [pc, #480]	; (800496c <_Z14motor_standardv+0x1fc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	625a      	str	r2, [r3, #36]	; 0x24

		if (fr.PID >= 0) {
 8004790:	4b77      	ldr	r3, [pc, #476]	; (8004970 <_Z14motor_standardv+0x200>)
 8004792:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004796:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479e:	db0c      	blt.n	80047ba <_Z14motor_standardv+0x4a>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_SET);
 80047a0:	2201      	movs	r2, #1
 80047a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047a6:	4873      	ldr	r0, [pc, #460]	; (8004974 <_Z14motor_standardv+0x204>)
 80047a8:	f003 faaa 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_RESET);
 80047ac:	2200      	movs	r2, #0
 80047ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047b2:	4870      	ldr	r0, [pc, #448]	; (8004974 <_Z14motor_standardv+0x204>)
 80047b4:	f003 faa4 	bl	8007d00 <HAL_GPIO_WritePin>
 80047b8:	e00b      	b.n	80047d2 <_Z14motor_standardv+0x62>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fr, MOTORPLUS_PIN_fr, GPIO_PIN_RESET);
 80047ba:	2200      	movs	r2, #0
 80047bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047c0:	486c      	ldr	r0, [pc, #432]	; (8004974 <_Z14motor_standardv+0x204>)
 80047c2:	f003 fa9d 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fr, MOTORMINUS_PIN_fr, GPIO_PIN_SET);
 80047c6:	2201      	movs	r2, #1
 80047c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047cc:	4869      	ldr	r0, [pc, #420]	; (8004974 <_Z14motor_standardv+0x204>)
 80047ce:	f003 fa97 	bl	8007d00 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs((int)fr.PID)*4200);
 80047d2:	4b67      	ldr	r3, [pc, #412]	; (8004970 <_Z14motor_standardv+0x200>)
 80047d4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80047d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047dc:	ee17 3a90 	vmov	r3, s15
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bfb8      	it	lt
 80047e4:	425b      	neglt	r3, r3
 80047e6:	f241 0268 	movw	r2, #4200	; 0x1068
 80047ea:	fb03 f202 	mul.w	r2, r3, r2
 80047ee:	4b62      	ldr	r3, [pc, #392]	; (8004978 <_Z14motor_standardv+0x208>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38

	/*enc 2*/
		fl.CountNow = __HAL_TIM_GetCounter(&htim5);
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <_Z14motor_standardv+0x20c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	b21a      	sxth	r2, r3
 80047fc:	4b60      	ldr	r3, [pc, #384]	; (8004980 <_Z14motor_standardv+0x210>)
 80047fe:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		fl.PIDControl_manual();
 8004802:	485f      	ldr	r0, [pc, #380]	; (8004980 <_Z14motor_standardv+0x210>)
 8004804:	f7fb ffba 	bl	800077c <_ZN8DC_motor17PIDControl_manualEv>
		__HAL_TIM_SetCounter(&htim5,0);
 8004808:	4b5c      	ldr	r3, [pc, #368]	; (800497c <_Z14motor_standardv+0x20c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2200      	movs	r2, #0
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

		if (fl.PID < 0) {
 8004810:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <_Z14motor_standardv+0x210>)
 8004812:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004816:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481e:	d50c      	bpl.n	800483a <_Z14motor_standardv+0xca>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_SET);
 8004820:	2201      	movs	r2, #1
 8004822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004826:	4857      	ldr	r0, [pc, #348]	; (8004984 <_Z14motor_standardv+0x214>)
 8004828:	f003 fa6a 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_RESET);
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004832:	4854      	ldr	r0, [pc, #336]	; (8004984 <_Z14motor_standardv+0x214>)
 8004834:	f003 fa64 	bl	8007d00 <HAL_GPIO_WritePin>
 8004838:	e00b      	b.n	8004852 <_Z14motor_standardv+0xe2>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_fl, MOTORPLUS_PIN_fl, GPIO_PIN_RESET);
 800483a:	2200      	movs	r2, #0
 800483c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004840:	4850      	ldr	r0, [pc, #320]	; (8004984 <_Z14motor_standardv+0x214>)
 8004842:	f003 fa5d 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_fl, MOTORMINUS_PIN_fl, GPIO_PIN_SET);
 8004846:	2201      	movs	r2, #1
 8004848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800484c:	484d      	ldr	r0, [pc, #308]	; (8004984 <_Z14motor_standardv+0x214>)
 800484e:	f003 fa57 	bl	8007d00 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, abs((int)fl.PID)*4200);
 8004852:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <_Z14motor_standardv+0x210>)
 8004854:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004858:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800485c:	ee17 3a90 	vmov	r3, s15
 8004860:	2b00      	cmp	r3, #0
 8004862:	bfb8      	it	lt
 8004864:	425b      	neglt	r3, r3
 8004866:	f241 0268 	movw	r2, #4200	; 0x1068
 800486a:	fb03 f202 	mul.w	r2, r3, r2
 800486e:	4b42      	ldr	r3, [pc, #264]	; (8004978 <_Z14motor_standardv+0x208>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 3*/
		br.CountNow = __HAL_TIM_GetCounter(&htim3);
 8004874:	4b44      	ldr	r3, [pc, #272]	; (8004988 <_Z14motor_standardv+0x218>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	b21a      	sxth	r2, r3
 800487c:	4b43      	ldr	r3, [pc, #268]	; (800498c <_Z14motor_standardv+0x21c>)
 800487e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		br.PIDControl_manual();
 8004882:	4842      	ldr	r0, [pc, #264]	; (800498c <_Z14motor_standardv+0x21c>)
 8004884:	f7fb ff7a 	bl	800077c <_ZN8DC_motor17PIDControl_manualEv>
		__HAL_TIM_SetCounter(&htim3,0);
 8004888:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <_Z14motor_standardv+0x218>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2200      	movs	r2, #0
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

		if (br.PID >= 0) {
 8004890:	4b3e      	ldr	r3, [pc, #248]	; (800498c <_Z14motor_standardv+0x21c>)
 8004892:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8004896:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	db0a      	blt.n	80048b6 <_Z14motor_standardv+0x146>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_SET);
 80048a0:	2201      	movs	r2, #1
 80048a2:	2104      	movs	r1, #4
 80048a4:	483a      	ldr	r0, [pc, #232]	; (8004990 <_Z14motor_standardv+0x220>)
 80048a6:	f003 fa2b 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_RESET);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2108      	movs	r1, #8
 80048ae:	4838      	ldr	r0, [pc, #224]	; (8004990 <_Z14motor_standardv+0x220>)
 80048b0:	f003 fa26 	bl	8007d00 <HAL_GPIO_WritePin>
 80048b4:	e009      	b.n	80048ca <_Z14motor_standardv+0x15a>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_br, MOTORPLUS_PIN_br, GPIO_PIN_RESET);
 80048b6:	2200      	movs	r2, #0
 80048b8:	2104      	movs	r1, #4
 80048ba:	4835      	ldr	r0, [pc, #212]	; (8004990 <_Z14motor_standardv+0x220>)
 80048bc:	f003 fa20 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_br, MOTORMINUS_PIN_br, GPIO_PIN_SET);
 80048c0:	2201      	movs	r2, #1
 80048c2:	2108      	movs	r1, #8
 80048c4:	4832      	ldr	r0, [pc, #200]	; (8004990 <_Z14motor_standardv+0x220>)
 80048c6:	f003 fa1b 	bl	8007d00 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, abs((int)br.PID)*4200);
 80048ca:	4b30      	ldr	r3, [pc, #192]	; (800498c <_Z14motor_standardv+0x21c>)
 80048cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80048d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80048d4:	ee17 3a90 	vmov	r3, s15
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bfb8      	it	lt
 80048dc:	425b      	neglt	r3, r3
 80048de:	f241 0268 	movw	r2, #4200	; 0x1068
 80048e2:	fb03 f202 	mul.w	r2, r3, r2
 80048e6:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <_Z14motor_standardv+0x224>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	635a      	str	r2, [r3, #52]	; 0x34

	/*enc 4*/
		bl.CountNow = __HAL_TIM_GetCounter(&htim4);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <_Z14motor_standardv+0x228>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	b21a      	sxth	r2, r3
 80048f4:	4b29      	ldr	r3, [pc, #164]	; (800499c <_Z14motor_standardv+0x22c>)
 80048f6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		bl.PIDControl_manual();
 80048fa:	4828      	ldr	r0, [pc, #160]	; (800499c <_Z14motor_standardv+0x22c>)
 80048fc:	f7fb ff3e 	bl	800077c <_ZN8DC_motor17PIDControl_manualEv>
		__HAL_TIM_SetCounter(&htim4,0);
 8004900:	4b25      	ldr	r3, [pc, #148]	; (8004998 <_Z14motor_standardv+0x228>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

		if (bl.PID >= 0) {
 8004908:	4b24      	ldr	r3, [pc, #144]	; (800499c <_Z14motor_standardv+0x22c>)
 800490a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800490e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004916:	db0b      	blt.n	8004930 <_Z14motor_standardv+0x1c0>
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_SET);
 8004918:	2201      	movs	r2, #1
 800491a:	2110      	movs	r1, #16
 800491c:	481c      	ldr	r0, [pc, #112]	; (8004990 <_Z14motor_standardv+0x220>)
 800491e:	f003 f9ef 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_RESET);
 8004922:	2200      	movs	r2, #0
 8004924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004928:	481d      	ldr	r0, [pc, #116]	; (80049a0 <_Z14motor_standardv+0x230>)
 800492a:	f003 f9e9 	bl	8007d00 <HAL_GPIO_WritePin>
 800492e:	e00a      	b.n	8004946 <_Z14motor_standardv+0x1d6>
		}
		else{
			HAL_GPIO_WritePin(MOTORPLUS_PORT_bl, MOTORPLUS_PIN_bl, GPIO_PIN_RESET);
 8004930:	2200      	movs	r2, #0
 8004932:	2110      	movs	r1, #16
 8004934:	4816      	ldr	r0, [pc, #88]	; (8004990 <_Z14motor_standardv+0x220>)
 8004936:	f003 f9e3 	bl	8007d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MOTORMINUS_PORT_bl, MOTORMINUS_PIN_bl, GPIO_PIN_SET);
 800493a:	2201      	movs	r2, #1
 800493c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004940:	4817      	ldr	r0, [pc, #92]	; (80049a0 <_Z14motor_standardv+0x230>)
 8004942:	f003 f9dd 	bl	8007d00 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2,abs((int)bl.PID)*4200);
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <_Z14motor_standardv+0x22c>)
 8004948:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800494c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004950:	ee17 3a90 	vmov	r3, s15
 8004954:	2b00      	cmp	r3, #0
 8004956:	bfb8      	it	lt
 8004958:	425b      	neglt	r3, r3
 800495a:	f241 0268 	movw	r2, #4200	; 0x1068
 800495e:	fb03 f202 	mul.w	r2, r3, r2
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <_Z14motor_standardv+0x224>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}
 800496c:	24000300 	.word	0x24000300
 8004970:	240000a0 	.word	0x240000a0
 8004974:	58020c00 	.word	0x58020c00
 8004978:	24000430 	.word	0x24000430
 800497c:	240003e4 	.word	0x240003e4
 8004980:	24000138 	.word	0x24000138
 8004984:	58020400 	.word	0x58020400
 8004988:	2400034c 	.word	0x2400034c
 800498c:	240001d0 	.word	0x240001d0
 8004990:	58021000 	.word	0x58021000
 8004994:	240004c8 	.word	0x240004c8
 8004998:	24000398 	.word	0x24000398
 800499c:	24000268 	.word	0x24000268
 80049a0:	58020800 	.word	0x58020800

080049a4 <Reset_Handler>:
 80049a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049dc <LoopFillZerobss+0xe>
 80049a8:	f7ff fe3e 	bl	8004628 <SystemInit>
 80049ac:	480c      	ldr	r0, [pc, #48]	; (80049e0 <LoopFillZerobss+0x12>)
 80049ae:	490d      	ldr	r1, [pc, #52]	; (80049e4 <LoopFillZerobss+0x16>)
 80049b0:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <LoopFillZerobss+0x1a>)
 80049b2:	2300      	movs	r3, #0
 80049b4:	e002      	b.n	80049bc <LoopCopyDataInit>

080049b6 <CopyDataInit>:
 80049b6:	58d4      	ldr	r4, [r2, r3]
 80049b8:	50c4      	str	r4, [r0, r3]
 80049ba:	3304      	adds	r3, #4

080049bc <LoopCopyDataInit>:
 80049bc:	18c4      	adds	r4, r0, r3
 80049be:	428c      	cmp	r4, r1
 80049c0:	d3f9      	bcc.n	80049b6 <CopyDataInit>
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <LoopFillZerobss+0x1e>)
 80049c4:	4c0a      	ldr	r4, [pc, #40]	; (80049f0 <LoopFillZerobss+0x22>)
 80049c6:	2300      	movs	r3, #0
 80049c8:	e001      	b.n	80049ce <LoopFillZerobss>

080049ca <FillZerobss>:
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	3204      	adds	r2, #4

080049ce <LoopFillZerobss>:
 80049ce:	42a2      	cmp	r2, r4
 80049d0:	d3fb      	bcc.n	80049ca <FillZerobss>
 80049d2:	f009 f8a5 	bl	800db20 <__libc_init_array>
 80049d6:	f7fc f855 	bl	8000a84 <main>
 80049da:	4770      	bx	lr
 80049dc:	24050000 	.word	0x24050000
 80049e0:	24000000 	.word	0x24000000
 80049e4:	2400007c 	.word	0x2400007c
 80049e8:	0800e178 	.word	0x0800e178
 80049ec:	24000080 	.word	0x24000080
 80049f0:	240018a8 	.word	0x240018a8

080049f4 <ADC3_IRQHandler>:
 80049f4:	e7fe      	b.n	80049f4 <ADC3_IRQHandler>
	...

080049f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049fe:	2003      	movs	r0, #3
 8004a00:	f000 f95c 	bl	8004cbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a04:	f003 ff34 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <HAL_Init+0x68>)
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	4913      	ldr	r1, [pc, #76]	; (8004a64 <HAL_Init+0x6c>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <HAL_Init+0x68>)
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <HAL_Init+0x6c>)
 8004a2c:	5cd3      	ldrb	r3, [r2, r3]
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
 8004a38:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <HAL_Init+0x70>)
 8004a3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a3c:	4a0b      	ldr	r2, [pc, #44]	; (8004a6c <HAL_Init+0x74>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a42:	200f      	movs	r0, #15
 8004a44:	f000 f814 	bl	8004a70 <HAL_InitTick>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e002      	b.n	8004a58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a52:	f7ff fa49 	bl	8003ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	58024400 	.word	0x58024400
 8004a64:	0800e11c 	.word	0x0800e11c
 8004a68:	24000008 	.word	0x24000008
 8004a6c:	24000004 	.word	0x24000004

08004a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <HAL_InitTick+0x60>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e021      	b.n	8004ac8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004a84:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <HAL_InitTick+0x64>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <HAL_InitTick+0x60>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f941 	bl	8004d22 <HAL_SYSTICK_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e00e      	b.n	8004ac8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b0f      	cmp	r3, #15
 8004aae:	d80a      	bhi.n	8004ac6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	f000 f90b 	bl	8004cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004abc:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <HAL_InitTick+0x68>)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	24000010 	.word	0x24000010
 8004ad4:	24000004 	.word	0x24000004
 8004ad8:	2400000c 	.word	0x2400000c

08004adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_IncTick+0x20>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_IncTick+0x24>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4413      	add	r3, r2
 8004aec:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <HAL_IncTick+0x24>)
 8004aee:	6013      	str	r3, [r2, #0]
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	24000010 	.word	0x24000010
 8004b00:	24001894 	.word	0x24001894

08004b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return uwTick;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_GetTick+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	24001894 	.word	0x24001894

08004b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <__NVIC_SetPriorityGrouping+0x40>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <__NVIC_SetPriorityGrouping+0x44>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b4a:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <__NVIC_SetPriorityGrouping+0x40>)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	60d3      	str	r3, [r2, #12]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000ed00 	.word	0xe000ed00
 8004b60:	05fa0000 	.word	0x05fa0000

08004b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <__NVIC_GetPriorityGrouping+0x18>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	f003 0307 	and.w	r3, r3, #7
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db0b      	blt.n	8004baa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	4907      	ldr	r1, [pc, #28]	; (8004bb8 <__NVIC_EnableIRQ+0x38>)
 8004b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	e000e100 	.word	0xe000e100

08004bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	6039      	str	r1, [r7, #0]
 8004bc6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db0a      	blt.n	8004be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	490c      	ldr	r1, [pc, #48]	; (8004c08 <__NVIC_SetPriority+0x4c>)
 8004bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bda:	0112      	lsls	r2, r2, #4
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	440b      	add	r3, r1
 8004be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be4:	e00a      	b.n	8004bfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	4908      	ldr	r1, [pc, #32]	; (8004c0c <__NVIC_SetPriority+0x50>)
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	3b04      	subs	r3, #4
 8004bf4:	0112      	lsls	r2, r2, #4
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	761a      	strb	r2, [r3, #24]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	e000e100 	.word	0xe000e100
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f1c3 0307 	rsb	r3, r3, #7
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	bf28      	it	cs
 8004c2e:	2304      	movcs	r3, #4
 8004c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3304      	adds	r3, #4
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d902      	bls.n	8004c40 <NVIC_EncodePriority+0x30>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3b03      	subs	r3, #3
 8004c3e:	e000      	b.n	8004c42 <NVIC_EncodePriority+0x32>
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	401a      	ands	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c58:	f04f 31ff 	mov.w	r1, #4294967295
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	43d9      	mvns	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	4313      	orrs	r3, r2
         );
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c88:	d301      	bcc.n	8004c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00f      	b.n	8004cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <SysTick_Config+0x40>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c96:	210f      	movs	r1, #15
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	f7ff ff8e 	bl	8004bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <SysTick_Config+0x40>)
 8004ca8:	2207      	movs	r2, #7
 8004caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000e010 	.word	0xe000e010

08004cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff29 	bl	8004b1c <__NVIC_SetPriorityGrouping>
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce0:	f7ff ff40 	bl	8004b64 <__NVIC_GetPriorityGrouping>
 8004ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	6978      	ldr	r0, [r7, #20]
 8004cec:	f7ff ff90 	bl	8004c10 <NVIC_EncodePriority>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ff5f 	bl	8004bbc <__NVIC_SetPriority>
}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff ff33 	bl	8004b80 <__NVIC_EnableIRQ>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ffa4 	bl	8004c78 <SysTick_Config>
 8004d30:	4603      	mov	r3, r0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d44:	f7ff fede 	bl	8004b04 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e314      	b.n	800537e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a66      	ldr	r2, [pc, #408]	; (8004ef4 <HAL_DMA_Init+0x1b8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d04a      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a65      	ldr	r2, [pc, #404]	; (8004ef8 <HAL_DMA_Init+0x1bc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d045      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a63      	ldr	r2, [pc, #396]	; (8004efc <HAL_DMA_Init+0x1c0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d040      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a62      	ldr	r2, [pc, #392]	; (8004f00 <HAL_DMA_Init+0x1c4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d03b      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a60      	ldr	r2, [pc, #384]	; (8004f04 <HAL_DMA_Init+0x1c8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d036      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a5f      	ldr	r2, [pc, #380]	; (8004f08 <HAL_DMA_Init+0x1cc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d031      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a5d      	ldr	r2, [pc, #372]	; (8004f0c <HAL_DMA_Init+0x1d0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02c      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a5c      	ldr	r2, [pc, #368]	; (8004f10 <HAL_DMA_Init+0x1d4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d027      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5a      	ldr	r2, [pc, #360]	; (8004f14 <HAL_DMA_Init+0x1d8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d022      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a59      	ldr	r2, [pc, #356]	; (8004f18 <HAL_DMA_Init+0x1dc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d01d      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a57      	ldr	r2, [pc, #348]	; (8004f1c <HAL_DMA_Init+0x1e0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d018      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a56      	ldr	r2, [pc, #344]	; (8004f20 <HAL_DMA_Init+0x1e4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a54      	ldr	r2, [pc, #336]	; (8004f24 <HAL_DMA_Init+0x1e8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a53      	ldr	r2, [pc, #332]	; (8004f28 <HAL_DMA_Init+0x1ec>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a51      	ldr	r2, [pc, #324]	; (8004f2c <HAL_DMA_Init+0x1f0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_DMA_Init+0xb8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a50      	ldr	r2, [pc, #320]	; (8004f30 <HAL_DMA_Init+0x1f4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_DMA_Init+0xbc>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_DMA_Init+0xbe>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 813c 	beq.w	8005078 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a37      	ldr	r2, [pc, #220]	; (8004ef4 <HAL_DMA_Init+0x1b8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d04a      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a36      	ldr	r2, [pc, #216]	; (8004ef8 <HAL_DMA_Init+0x1bc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d045      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a34      	ldr	r2, [pc, #208]	; (8004efc <HAL_DMA_Init+0x1c0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d040      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a33      	ldr	r2, [pc, #204]	; (8004f00 <HAL_DMA_Init+0x1c4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d03b      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a31      	ldr	r2, [pc, #196]	; (8004f04 <HAL_DMA_Init+0x1c8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d036      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <HAL_DMA_Init+0x1cc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d031      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2e      	ldr	r2, [pc, #184]	; (8004f0c <HAL_DMA_Init+0x1d0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d02c      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a2d      	ldr	r2, [pc, #180]	; (8004f10 <HAL_DMA_Init+0x1d4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d027      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <HAL_DMA_Init+0x1d8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d022      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <HAL_DMA_Init+0x1dc>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d01d      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <HAL_DMA_Init+0x1e0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d018      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <HAL_DMA_Init+0x1e4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	; (8004f24 <HAL_DMA_Init+0x1e8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00e      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <HAL_DMA_Init+0x1ec>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <HAL_DMA_Init+0x1f0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_DMA_Init+0x174>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a21      	ldr	r2, [pc, #132]	; (8004f30 <HAL_DMA_Init+0x1f4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <HAL_DMA_Init+0x186>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e007      	b.n	8004ed2 <HAL_DMA_Init+0x196>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ed2:	e02f      	b.n	8004f34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed4:	f7ff fe16 	bl	8004b04 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d928      	bls.n	8004f34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2203      	movs	r2, #3
 8004eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e244      	b.n	800537e <HAL_DMA_Init+0x642>
 8004ef4:	40020010 	.word	0x40020010
 8004ef8:	40020028 	.word	0x40020028
 8004efc:	40020040 	.word	0x40020040
 8004f00:	40020058 	.word	0x40020058
 8004f04:	40020070 	.word	0x40020070
 8004f08:	40020088 	.word	0x40020088
 8004f0c:	400200a0 	.word	0x400200a0
 8004f10:	400200b8 	.word	0x400200b8
 8004f14:	40020410 	.word	0x40020410
 8004f18:	40020428 	.word	0x40020428
 8004f1c:	40020440 	.word	0x40020440
 8004f20:	40020458 	.word	0x40020458
 8004f24:	40020470 	.word	0x40020470
 8004f28:	40020488 	.word	0x40020488
 8004f2c:	400204a0 	.word	0x400204a0
 8004f30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1c8      	bne.n	8004ed4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4b84      	ldr	r3, [pc, #528]	; (8005160 <HAL_DMA_Init+0x424>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d107      	bne.n	8004f98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	4313      	orrs	r3, r2
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b28      	cmp	r3, #40	; 0x28
 8004f9e:	d903      	bls.n	8004fa8 <HAL_DMA_Init+0x26c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa6:	d91f      	bls.n	8004fe8 <HAL_DMA_Init+0x2ac>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b3e      	cmp	r3, #62	; 0x3e
 8004fae:	d903      	bls.n	8004fb8 <HAL_DMA_Init+0x27c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b42      	cmp	r3, #66	; 0x42
 8004fb6:	d917      	bls.n	8004fe8 <HAL_DMA_Init+0x2ac>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b46      	cmp	r3, #70	; 0x46
 8004fbe:	d903      	bls.n	8004fc8 <HAL_DMA_Init+0x28c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b48      	cmp	r3, #72	; 0x48
 8004fc6:	d90f      	bls.n	8004fe8 <HAL_DMA_Init+0x2ac>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b4e      	cmp	r3, #78	; 0x4e
 8004fce:	d903      	bls.n	8004fd8 <HAL_DMA_Init+0x29c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b52      	cmp	r3, #82	; 0x52
 8004fd6:	d907      	bls.n	8004fe8 <HAL_DMA_Init+0x2ac>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b73      	cmp	r3, #115	; 0x73
 8004fde:	d905      	bls.n	8004fec <HAL_DMA_Init+0x2b0>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b77      	cmp	r3, #119	; 0x77
 8004fe6:	d801      	bhi.n	8004fec <HAL_DMA_Init+0x2b0>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <HAL_DMA_Init+0x2b2>
 8004fec:	2300      	movs	r3, #0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ff8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 0307 	bic.w	r3, r3, #7
 8005010:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b04      	cmp	r3, #4
 8005022:	d117      	bne.n	8005054 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00e      	beq.n	8005054 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f002 fb30 	bl	800769c <DMA_CheckFifoParam>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2240      	movs	r2, #64	; 0x40
 8005046:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e194      	b.n	800537e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f002 fa6b 	bl	8007538 <DMA_CalcBaseAndBitshift>
 8005062:	4603      	mov	r3, r0
 8005064:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	223f      	movs	r2, #63	; 0x3f
 8005070:	409a      	lsls	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	609a      	str	r2, [r3, #8]
 8005076:	e0ca      	b.n	800520e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a39      	ldr	r2, [pc, #228]	; (8005164 <HAL_DMA_Init+0x428>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d022      	beq.n	80050c8 <HAL_DMA_Init+0x38c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a38      	ldr	r2, [pc, #224]	; (8005168 <HAL_DMA_Init+0x42c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d01d      	beq.n	80050c8 <HAL_DMA_Init+0x38c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a36      	ldr	r2, [pc, #216]	; (800516c <HAL_DMA_Init+0x430>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d018      	beq.n	80050c8 <HAL_DMA_Init+0x38c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a35      	ldr	r2, [pc, #212]	; (8005170 <HAL_DMA_Init+0x434>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <HAL_DMA_Init+0x38c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a33      	ldr	r2, [pc, #204]	; (8005174 <HAL_DMA_Init+0x438>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <HAL_DMA_Init+0x38c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a32      	ldr	r2, [pc, #200]	; (8005178 <HAL_DMA_Init+0x43c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <HAL_DMA_Init+0x38c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a30      	ldr	r2, [pc, #192]	; (800517c <HAL_DMA_Init+0x440>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_DMA_Init+0x38c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2f      	ldr	r2, [pc, #188]	; (8005180 <HAL_DMA_Init+0x444>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d101      	bne.n	80050cc <HAL_DMA_Init+0x390>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <HAL_DMA_Init+0x392>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8094 	beq.w	80051fc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_DMA_Init+0x428>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d021      	beq.n	8005122 <HAL_DMA_Init+0x3e6>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <HAL_DMA_Init+0x42c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d01c      	beq.n	8005122 <HAL_DMA_Init+0x3e6>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_DMA_Init+0x430>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d017      	beq.n	8005122 <HAL_DMA_Init+0x3e6>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_DMA_Init+0x434>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d012      	beq.n	8005122 <HAL_DMA_Init+0x3e6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_DMA_Init+0x438>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00d      	beq.n	8005122 <HAL_DMA_Init+0x3e6>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <HAL_DMA_Init+0x43c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d008      	beq.n	8005122 <HAL_DMA_Init+0x3e6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <HAL_DMA_Init+0x440>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <HAL_DMA_Init+0x3e6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_DMA_Init+0x444>)
 8005120:	4293      	cmp	r3, r2
 8005122:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4b11      	ldr	r3, [pc, #68]	; (8005184 <HAL_DMA_Init+0x448>)
 8005140:	4013      	ands	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d01d      	beq.n	8005188 <HAL_DMA_Init+0x44c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b80      	cmp	r3, #128	; 0x80
 8005152:	d102      	bne.n	800515a <HAL_DMA_Init+0x41e>
 8005154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005158:	e017      	b.n	800518a <HAL_DMA_Init+0x44e>
 800515a:	2300      	movs	r3, #0
 800515c:	e015      	b.n	800518a <HAL_DMA_Init+0x44e>
 800515e:	bf00      	nop
 8005160:	fe10803f 	.word	0xfe10803f
 8005164:	58025408 	.word	0x58025408
 8005168:	5802541c 	.word	0x5802541c
 800516c:	58025430 	.word	0x58025430
 8005170:	58025444 	.word	0x58025444
 8005174:	58025458 	.word	0x58025458
 8005178:	5802546c 	.word	0x5802546c
 800517c:	58025480 	.word	0x58025480
 8005180:	58025494 	.word	0x58025494
 8005184:	fffe000f 	.word	0xfffe000f
 8005188:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	68d2      	ldr	r2, [r2, #12]
 800518e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b6e      	ldr	r3, [pc, #440]	; (8005388 <HAL_DMA_Init+0x64c>)
 80051d0:	4413      	add	r3, r2
 80051d2:	4a6e      	ldr	r2, [pc, #440]	; (800538c <HAL_DMA_Init+0x650>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	009a      	lsls	r2, r3, #2
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f002 f9a9 	bl	8007538 <DMA_CalcBaseAndBitshift>
 80051e6:	4603      	mov	r3, r0
 80051e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2201      	movs	r2, #1
 80051f4:	409a      	lsls	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	e008      	b.n	800520e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2240      	movs	r2, #64	; 0x40
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2203      	movs	r2, #3
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0b7      	b.n	800537e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a5f      	ldr	r2, [pc, #380]	; (8005390 <HAL_DMA_Init+0x654>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d072      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5d      	ldr	r2, [pc, #372]	; (8005394 <HAL_DMA_Init+0x658>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d06d      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5c      	ldr	r2, [pc, #368]	; (8005398 <HAL_DMA_Init+0x65c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d068      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a5a      	ldr	r2, [pc, #360]	; (800539c <HAL_DMA_Init+0x660>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d063      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a59      	ldr	r2, [pc, #356]	; (80053a0 <HAL_DMA_Init+0x664>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d05e      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a57      	ldr	r2, [pc, #348]	; (80053a4 <HAL_DMA_Init+0x668>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d059      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a56      	ldr	r2, [pc, #344]	; (80053a8 <HAL_DMA_Init+0x66c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d054      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a54      	ldr	r2, [pc, #336]	; (80053ac <HAL_DMA_Init+0x670>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d04f      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a53      	ldr	r2, [pc, #332]	; (80053b0 <HAL_DMA_Init+0x674>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d04a      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a51      	ldr	r2, [pc, #324]	; (80053b4 <HAL_DMA_Init+0x678>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a50      	ldr	r2, [pc, #320]	; (80053b8 <HAL_DMA_Init+0x67c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d040      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a4e      	ldr	r2, [pc, #312]	; (80053bc <HAL_DMA_Init+0x680>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d03b      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a4d      	ldr	r2, [pc, #308]	; (80053c0 <HAL_DMA_Init+0x684>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d036      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a4b      	ldr	r2, [pc, #300]	; (80053c4 <HAL_DMA_Init+0x688>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a4a      	ldr	r2, [pc, #296]	; (80053c8 <HAL_DMA_Init+0x68c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d02c      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a48      	ldr	r2, [pc, #288]	; (80053cc <HAL_DMA_Init+0x690>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d027      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a47      	ldr	r2, [pc, #284]	; (80053d0 <HAL_DMA_Init+0x694>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a45      	ldr	r2, [pc, #276]	; (80053d4 <HAL_DMA_Init+0x698>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a44      	ldr	r2, [pc, #272]	; (80053d8 <HAL_DMA_Init+0x69c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a42      	ldr	r2, [pc, #264]	; (80053dc <HAL_DMA_Init+0x6a0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a41      	ldr	r2, [pc, #260]	; (80053e0 <HAL_DMA_Init+0x6a4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3f      	ldr	r2, [pc, #252]	; (80053e4 <HAL_DMA_Init+0x6a8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3e      	ldr	r2, [pc, #248]	; (80053e8 <HAL_DMA_Init+0x6ac>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_DMA_Init+0x5c2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3c      	ldr	r2, [pc, #240]	; (80053ec <HAL_DMA_Init+0x6b0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_DMA_Init+0x5c6>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_DMA_Init+0x5c8>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d032      	beq.n	800536e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f002 fa43 	bl	8007794 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d102      	bne.n	800531c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005330:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d010      	beq.n	800535c <HAL_DMA_Init+0x620>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b08      	cmp	r3, #8
 8005340:	d80c      	bhi.n	800535c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f002 fac0 	bl	80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	e008      	b.n	800536e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	a7fdabf8 	.word	0xa7fdabf8
 800538c:	cccccccd 	.word	0xcccccccd
 8005390:	40020010 	.word	0x40020010
 8005394:	40020028 	.word	0x40020028
 8005398:	40020040 	.word	0x40020040
 800539c:	40020058 	.word	0x40020058
 80053a0:	40020070 	.word	0x40020070
 80053a4:	40020088 	.word	0x40020088
 80053a8:	400200a0 	.word	0x400200a0
 80053ac:	400200b8 	.word	0x400200b8
 80053b0:	40020410 	.word	0x40020410
 80053b4:	40020428 	.word	0x40020428
 80053b8:	40020440 	.word	0x40020440
 80053bc:	40020458 	.word	0x40020458
 80053c0:	40020470 	.word	0x40020470
 80053c4:	40020488 	.word	0x40020488
 80053c8:	400204a0 	.word	0x400204a0
 80053cc:	400204b8 	.word	0x400204b8
 80053d0:	58025408 	.word	0x58025408
 80053d4:	5802541c 	.word	0x5802541c
 80053d8:	58025430 	.word	0x58025430
 80053dc:	58025444 	.word	0x58025444
 80053e0:	58025458 	.word	0x58025458
 80053e4:	5802546c 	.word	0x5802546c
 80053e8:	58025480 	.word	0x58025480
 80053ec:	58025494 	.word	0x58025494

080053f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e226      	b.n	800585a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_DMA_Start_IT+0x2a>
 8005416:	2302      	movs	r3, #2
 8005418:	e21f      	b.n	800585a <HAL_DMA_Start_IT+0x46a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b01      	cmp	r3, #1
 800542c:	f040 820a 	bne.w	8005844 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a68      	ldr	r2, [pc, #416]	; (80055e4 <HAL_DMA_Start_IT+0x1f4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d04a      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a66      	ldr	r2, [pc, #408]	; (80055e8 <HAL_DMA_Start_IT+0x1f8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d045      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a65      	ldr	r2, [pc, #404]	; (80055ec <HAL_DMA_Start_IT+0x1fc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d040      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a63      	ldr	r2, [pc, #396]	; (80055f0 <HAL_DMA_Start_IT+0x200>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d03b      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a62      	ldr	r2, [pc, #392]	; (80055f4 <HAL_DMA_Start_IT+0x204>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d036      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a60      	ldr	r2, [pc, #384]	; (80055f8 <HAL_DMA_Start_IT+0x208>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5f      	ldr	r2, [pc, #380]	; (80055fc <HAL_DMA_Start_IT+0x20c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d02c      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5d      	ldr	r2, [pc, #372]	; (8005600 <HAL_DMA_Start_IT+0x210>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d027      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a5c      	ldr	r2, [pc, #368]	; (8005604 <HAL_DMA_Start_IT+0x214>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d022      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5a      	ldr	r2, [pc, #360]	; (8005608 <HAL_DMA_Start_IT+0x218>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01d      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a59      	ldr	r2, [pc, #356]	; (800560c <HAL_DMA_Start_IT+0x21c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d018      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a57      	ldr	r2, [pc, #348]	; (8005610 <HAL_DMA_Start_IT+0x220>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a56      	ldr	r2, [pc, #344]	; (8005614 <HAL_DMA_Start_IT+0x224>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a54      	ldr	r2, [pc, #336]	; (8005618 <HAL_DMA_Start_IT+0x228>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a53      	ldr	r2, [pc, #332]	; (800561c <HAL_DMA_Start_IT+0x22c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_DMA_Start_IT+0xee>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a51      	ldr	r2, [pc, #324]	; (8005620 <HAL_DMA_Start_IT+0x230>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d108      	bne.n	80054f0 <HAL_DMA_Start_IT+0x100>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e007      	b.n	8005500 <HAL_DMA_Start_IT+0x110>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 fe6a 	bl	80071e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a34      	ldr	r2, [pc, #208]	; (80055e4 <HAL_DMA_Start_IT+0x1f4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d04a      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a33      	ldr	r2, [pc, #204]	; (80055e8 <HAL_DMA_Start_IT+0x1f8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d045      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a31      	ldr	r2, [pc, #196]	; (80055ec <HAL_DMA_Start_IT+0x1fc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d040      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a30      	ldr	r2, [pc, #192]	; (80055f0 <HAL_DMA_Start_IT+0x200>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d03b      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2e      	ldr	r2, [pc, #184]	; (80055f4 <HAL_DMA_Start_IT+0x204>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d036      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2d      	ldr	r2, [pc, #180]	; (80055f8 <HAL_DMA_Start_IT+0x208>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d031      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <HAL_DMA_Start_IT+0x20c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d02c      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <HAL_DMA_Start_IT+0x210>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d027      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a28      	ldr	r2, [pc, #160]	; (8005604 <HAL_DMA_Start_IT+0x214>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d022      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a27      	ldr	r2, [pc, #156]	; (8005608 <HAL_DMA_Start_IT+0x218>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d01d      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a25      	ldr	r2, [pc, #148]	; (800560c <HAL_DMA_Start_IT+0x21c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d018      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a24      	ldr	r2, [pc, #144]	; (8005610 <HAL_DMA_Start_IT+0x220>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a22      	ldr	r2, [pc, #136]	; (8005614 <HAL_DMA_Start_IT+0x224>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00e      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a21      	ldr	r2, [pc, #132]	; (8005618 <HAL_DMA_Start_IT+0x228>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d009      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1f      	ldr	r2, [pc, #124]	; (800561c <HAL_DMA_Start_IT+0x22c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d004      	beq.n	80055ac <HAL_DMA_Start_IT+0x1bc>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1e      	ldr	r2, [pc, #120]	; (8005620 <HAL_DMA_Start_IT+0x230>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d101      	bne.n	80055b0 <HAL_DMA_Start_IT+0x1c0>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_DMA_Start_IT+0x1c2>
 80055b0:	2300      	movs	r3, #0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d036      	beq.n	8005624 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 021e 	bic.w	r2, r3, #30
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0216 	orr.w	r2, r2, #22
 80055c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d03e      	beq.n	8005650 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0208 	orr.w	r2, r2, #8
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e035      	b.n	8005650 <HAL_DMA_Start_IT+0x260>
 80055e4:	40020010 	.word	0x40020010
 80055e8:	40020028 	.word	0x40020028
 80055ec:	40020040 	.word	0x40020040
 80055f0:	40020058 	.word	0x40020058
 80055f4:	40020070 	.word	0x40020070
 80055f8:	40020088 	.word	0x40020088
 80055fc:	400200a0 	.word	0x400200a0
 8005600:	400200b8 	.word	0x400200b8
 8005604:	40020410 	.word	0x40020410
 8005608:	40020428 	.word	0x40020428
 800560c:	40020440 	.word	0x40020440
 8005610:	40020458 	.word	0x40020458
 8005614:	40020470 	.word	0x40020470
 8005618:	40020488 	.word	0x40020488
 800561c:	400204a0 	.word	0x400204a0
 8005620:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 020e 	bic.w	r2, r3, #14
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 020a 	orr.w	r2, r2, #10
 8005636:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0204 	orr.w	r2, r2, #4
 800564e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a83      	ldr	r2, [pc, #524]	; (8005864 <HAL_DMA_Start_IT+0x474>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d072      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a82      	ldr	r2, [pc, #520]	; (8005868 <HAL_DMA_Start_IT+0x478>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d06d      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a80      	ldr	r2, [pc, #512]	; (800586c <HAL_DMA_Start_IT+0x47c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d068      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a7f      	ldr	r2, [pc, #508]	; (8005870 <HAL_DMA_Start_IT+0x480>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d063      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a7d      	ldr	r2, [pc, #500]	; (8005874 <HAL_DMA_Start_IT+0x484>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d05e      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a7c      	ldr	r2, [pc, #496]	; (8005878 <HAL_DMA_Start_IT+0x488>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d059      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a7a      	ldr	r2, [pc, #488]	; (800587c <HAL_DMA_Start_IT+0x48c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d054      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a79      	ldr	r2, [pc, #484]	; (8005880 <HAL_DMA_Start_IT+0x490>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d04f      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a77      	ldr	r2, [pc, #476]	; (8005884 <HAL_DMA_Start_IT+0x494>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d04a      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a76      	ldr	r2, [pc, #472]	; (8005888 <HAL_DMA_Start_IT+0x498>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d045      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a74      	ldr	r2, [pc, #464]	; (800588c <HAL_DMA_Start_IT+0x49c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d040      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a73      	ldr	r2, [pc, #460]	; (8005890 <HAL_DMA_Start_IT+0x4a0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d03b      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a71      	ldr	r2, [pc, #452]	; (8005894 <HAL_DMA_Start_IT+0x4a4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d036      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a70      	ldr	r2, [pc, #448]	; (8005898 <HAL_DMA_Start_IT+0x4a8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d031      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a6e      	ldr	r2, [pc, #440]	; (800589c <HAL_DMA_Start_IT+0x4ac>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d02c      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a6d      	ldr	r2, [pc, #436]	; (80058a0 <HAL_DMA_Start_IT+0x4b0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d027      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6b      	ldr	r2, [pc, #428]	; (80058a4 <HAL_DMA_Start_IT+0x4b4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d022      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6a      	ldr	r2, [pc, #424]	; (80058a8 <HAL_DMA_Start_IT+0x4b8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d01d      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a68      	ldr	r2, [pc, #416]	; (80058ac <HAL_DMA_Start_IT+0x4bc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d018      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a67      	ldr	r2, [pc, #412]	; (80058b0 <HAL_DMA_Start_IT+0x4c0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a65      	ldr	r2, [pc, #404]	; (80058b4 <HAL_DMA_Start_IT+0x4c4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00e      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a64      	ldr	r2, [pc, #400]	; (80058b8 <HAL_DMA_Start_IT+0x4c8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d009      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a62      	ldr	r2, [pc, #392]	; (80058bc <HAL_DMA_Start_IT+0x4cc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_DMA_Start_IT+0x350>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a61      	ldr	r2, [pc, #388]	; (80058c0 <HAL_DMA_Start_IT+0x4d0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d101      	bne.n	8005744 <HAL_DMA_Start_IT+0x354>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_DMA_Start_IT+0x356>
 8005744:	2300      	movs	r3, #0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01a      	beq.n	8005780 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005766:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800577e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a37      	ldr	r2, [pc, #220]	; (8005864 <HAL_DMA_Start_IT+0x474>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d04a      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a36      	ldr	r2, [pc, #216]	; (8005868 <HAL_DMA_Start_IT+0x478>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d045      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a34      	ldr	r2, [pc, #208]	; (800586c <HAL_DMA_Start_IT+0x47c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d040      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a33      	ldr	r2, [pc, #204]	; (8005870 <HAL_DMA_Start_IT+0x480>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d03b      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a31      	ldr	r2, [pc, #196]	; (8005874 <HAL_DMA_Start_IT+0x484>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d036      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a30      	ldr	r2, [pc, #192]	; (8005878 <HAL_DMA_Start_IT+0x488>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d031      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2e      	ldr	r2, [pc, #184]	; (800587c <HAL_DMA_Start_IT+0x48c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d02c      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <HAL_DMA_Start_IT+0x490>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d027      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	; (8005884 <HAL_DMA_Start_IT+0x494>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d022      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_DMA_Start_IT+0x498>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d01d      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <HAL_DMA_Start_IT+0x49c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a27      	ldr	r2, [pc, #156]	; (8005890 <HAL_DMA_Start_IT+0x4a0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a25      	ldr	r2, [pc, #148]	; (8005894 <HAL_DMA_Start_IT+0x4a4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a24      	ldr	r2, [pc, #144]	; (8005898 <HAL_DMA_Start_IT+0x4a8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <HAL_DMA_Start_IT+0x4ac>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_DMA_Start_IT+0x430>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <HAL_DMA_Start_IT+0x4b0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d108      	bne.n	8005832 <HAL_DMA_Start_IT+0x442>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e012      	b.n	8005858 <HAL_DMA_Start_IT+0x468>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e009      	b.n	8005858 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	40020010 	.word	0x40020010
 8005868:	40020028 	.word	0x40020028
 800586c:	40020040 	.word	0x40020040
 8005870:	40020058 	.word	0x40020058
 8005874:	40020070 	.word	0x40020070
 8005878:	40020088 	.word	0x40020088
 800587c:	400200a0 	.word	0x400200a0
 8005880:	400200b8 	.word	0x400200b8
 8005884:	40020410 	.word	0x40020410
 8005888:	40020428 	.word	0x40020428
 800588c:	40020440 	.word	0x40020440
 8005890:	40020458 	.word	0x40020458
 8005894:	40020470 	.word	0x40020470
 8005898:	40020488 	.word	0x40020488
 800589c:	400204a0 	.word	0x400204a0
 80058a0:	400204b8 	.word	0x400204b8
 80058a4:	58025408 	.word	0x58025408
 80058a8:	5802541c 	.word	0x5802541c
 80058ac:	58025430 	.word	0x58025430
 80058b0:	58025444 	.word	0x58025444
 80058b4:	58025458 	.word	0x58025458
 80058b8:	5802546c 	.word	0x5802546c
 80058bc:	58025480 	.word	0x58025480
 80058c0:	58025494 	.word	0x58025494

080058c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80058cc:	f7ff f91a 	bl	8004b04 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e2dc      	b.n	8005e96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d008      	beq.n	80058fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2280      	movs	r2, #128	; 0x80
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e2cd      	b.n	8005e96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a76      	ldr	r2, [pc, #472]	; (8005ad8 <HAL_DMA_Abort+0x214>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d04a      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a74      	ldr	r2, [pc, #464]	; (8005adc <HAL_DMA_Abort+0x218>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d045      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a73      	ldr	r2, [pc, #460]	; (8005ae0 <HAL_DMA_Abort+0x21c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d040      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a71      	ldr	r2, [pc, #452]	; (8005ae4 <HAL_DMA_Abort+0x220>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d03b      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a70      	ldr	r2, [pc, #448]	; (8005ae8 <HAL_DMA_Abort+0x224>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d036      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a6e      	ldr	r2, [pc, #440]	; (8005aec <HAL_DMA_Abort+0x228>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d031      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6d      	ldr	r2, [pc, #436]	; (8005af0 <HAL_DMA_Abort+0x22c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d02c      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6b      	ldr	r2, [pc, #428]	; (8005af4 <HAL_DMA_Abort+0x230>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d027      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6a      	ldr	r2, [pc, #424]	; (8005af8 <HAL_DMA_Abort+0x234>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a68      	ldr	r2, [pc, #416]	; (8005afc <HAL_DMA_Abort+0x238>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01d      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a67      	ldr	r2, [pc, #412]	; (8005b00 <HAL_DMA_Abort+0x23c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a65      	ldr	r2, [pc, #404]	; (8005b04 <HAL_DMA_Abort+0x240>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a64      	ldr	r2, [pc, #400]	; (8005b08 <HAL_DMA_Abort+0x244>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a62      	ldr	r2, [pc, #392]	; (8005b0c <HAL_DMA_Abort+0x248>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a61      	ldr	r2, [pc, #388]	; (8005b10 <HAL_DMA_Abort+0x24c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_DMA_Abort+0xd6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5f      	ldr	r2, [pc, #380]	; (8005b14 <HAL_DMA_Abort+0x250>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_DMA_Abort+0xda>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_DMA_Abort+0xdc>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d013      	beq.n	80059cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 021e 	bic.w	r2, r2, #30
 80059b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e00a      	b.n	80059e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 020e 	bic.w	r2, r2, #14
 80059da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a3c      	ldr	r2, [pc, #240]	; (8005ad8 <HAL_DMA_Abort+0x214>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d072      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a3a      	ldr	r2, [pc, #232]	; (8005adc <HAL_DMA_Abort+0x218>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d06d      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a39      	ldr	r2, [pc, #228]	; (8005ae0 <HAL_DMA_Abort+0x21c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d068      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a37      	ldr	r2, [pc, #220]	; (8005ae4 <HAL_DMA_Abort+0x220>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d063      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a36      	ldr	r2, [pc, #216]	; (8005ae8 <HAL_DMA_Abort+0x224>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d05e      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a34      	ldr	r2, [pc, #208]	; (8005aec <HAL_DMA_Abort+0x228>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d059      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a33      	ldr	r2, [pc, #204]	; (8005af0 <HAL_DMA_Abort+0x22c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d054      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a31      	ldr	r2, [pc, #196]	; (8005af4 <HAL_DMA_Abort+0x230>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04f      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a30      	ldr	r2, [pc, #192]	; (8005af8 <HAL_DMA_Abort+0x234>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d04a      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2e      	ldr	r2, [pc, #184]	; (8005afc <HAL_DMA_Abort+0x238>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d045      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2d      	ldr	r2, [pc, #180]	; (8005b00 <HAL_DMA_Abort+0x23c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d040      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2b      	ldr	r2, [pc, #172]	; (8005b04 <HAL_DMA_Abort+0x240>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d03b      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2a      	ldr	r2, [pc, #168]	; (8005b08 <HAL_DMA_Abort+0x244>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d036      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <HAL_DMA_Abort+0x248>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d031      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <HAL_DMA_Abort+0x24c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d02c      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <HAL_DMA_Abort+0x250>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d027      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <HAL_DMA_Abort+0x254>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <HAL_DMA_Abort+0x258>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01d      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <HAL_DMA_Abort+0x25c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1f      	ldr	r2, [pc, #124]	; (8005b24 <HAL_DMA_Abort+0x260>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <HAL_DMA_Abort+0x264>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <HAL_DMA_Abort+0x268>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <HAL_DMA_Abort+0x26c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_DMA_Abort+0x20e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a19      	ldr	r2, [pc, #100]	; (8005b34 <HAL_DMA_Abort+0x270>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d132      	bne.n	8005b38 <HAL_DMA_Abort+0x274>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e031      	b.n	8005b3a <HAL_DMA_Abort+0x276>
 8005ad6:	bf00      	nop
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
 8005b18:	58025408 	.word	0x58025408
 8005b1c:	5802541c 	.word	0x5802541c
 8005b20:	58025430 	.word	0x58025430
 8005b24:	58025444 	.word	0x58025444
 8005b28:	58025458 	.word	0x58025458
 8005b2c:	5802546c 	.word	0x5802546c
 8005b30:	58025480 	.word	0x58025480
 8005b34:	58025494 	.word	0x58025494
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6d      	ldr	r2, [pc, #436]	; (8005d08 <HAL_DMA_Abort+0x444>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04a      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a6b      	ldr	r2, [pc, #428]	; (8005d0c <HAL_DMA_Abort+0x448>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d045      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a6a      	ldr	r2, [pc, #424]	; (8005d10 <HAL_DMA_Abort+0x44c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d040      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a68      	ldr	r2, [pc, #416]	; (8005d14 <HAL_DMA_Abort+0x450>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d03b      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a67      	ldr	r2, [pc, #412]	; (8005d18 <HAL_DMA_Abort+0x454>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d036      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a65      	ldr	r2, [pc, #404]	; (8005d1c <HAL_DMA_Abort+0x458>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d031      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a64      	ldr	r2, [pc, #400]	; (8005d20 <HAL_DMA_Abort+0x45c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d02c      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a62      	ldr	r2, [pc, #392]	; (8005d24 <HAL_DMA_Abort+0x460>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a61      	ldr	r2, [pc, #388]	; (8005d28 <HAL_DMA_Abort+0x464>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5f      	ldr	r2, [pc, #380]	; (8005d2c <HAL_DMA_Abort+0x468>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01d      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a5e      	ldr	r2, [pc, #376]	; (8005d30 <HAL_DMA_Abort+0x46c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a5c      	ldr	r2, [pc, #368]	; (8005d34 <HAL_DMA_Abort+0x470>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5b      	ldr	r2, [pc, #364]	; (8005d38 <HAL_DMA_Abort+0x474>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a59      	ldr	r2, [pc, #356]	; (8005d3c <HAL_DMA_Abort+0x478>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a58      	ldr	r2, [pc, #352]	; (8005d40 <HAL_DMA_Abort+0x47c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_DMA_Abort+0x32a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a56      	ldr	r2, [pc, #344]	; (8005d44 <HAL_DMA_Abort+0x480>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d108      	bne.n	8005c00 <HAL_DMA_Abort+0x33c>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e007      	b.n	8005c10 <HAL_DMA_Abort+0x34c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c10:	e013      	b.n	8005c3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c12:	f7fe ff77 	bl	8004b04 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b05      	cmp	r3, #5
 8005c1e:	d90c      	bls.n	8005c3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2203      	movs	r2, #3
 8005c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e12d      	b.n	8005e96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e5      	bne.n	8005c12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2f      	ldr	r2, [pc, #188]	; (8005d08 <HAL_DMA_Abort+0x444>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d04a      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a2d      	ldr	r2, [pc, #180]	; (8005d0c <HAL_DMA_Abort+0x448>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d045      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2c      	ldr	r2, [pc, #176]	; (8005d10 <HAL_DMA_Abort+0x44c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d040      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <HAL_DMA_Abort+0x450>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d03b      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <HAL_DMA_Abort+0x454>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d036      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <HAL_DMA_Abort+0x458>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d031      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <HAL_DMA_Abort+0x45c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d02c      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <HAL_DMA_Abort+0x460>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d027      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a23      	ldr	r2, [pc, #140]	; (8005d28 <HAL_DMA_Abort+0x464>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d022      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a21      	ldr	r2, [pc, #132]	; (8005d2c <HAL_DMA_Abort+0x468>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d01d      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <HAL_DMA_Abort+0x46c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d018      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <HAL_DMA_Abort+0x470>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1d      	ldr	r2, [pc, #116]	; (8005d38 <HAL_DMA_Abort+0x474>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <HAL_DMA_Abort+0x478>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d009      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1a      	ldr	r2, [pc, #104]	; (8005d40 <HAL_DMA_Abort+0x47c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d004      	beq.n	8005ce6 <HAL_DMA_Abort+0x422>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a18      	ldr	r2, [pc, #96]	; (8005d44 <HAL_DMA_Abort+0x480>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d101      	bne.n	8005cea <HAL_DMA_Abort+0x426>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <HAL_DMA_Abort+0x428>
 8005cea:	2300      	movs	r3, #0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d02b      	beq.n	8005d48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	223f      	movs	r2, #63	; 0x3f
 8005d00:	409a      	lsls	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	e02a      	b.n	8005d5e <HAL_DMA_Abort+0x49a>
 8005d08:	40020010 	.word	0x40020010
 8005d0c:	40020028 	.word	0x40020028
 8005d10:	40020040 	.word	0x40020040
 8005d14:	40020058 	.word	0x40020058
 8005d18:	40020070 	.word	0x40020070
 8005d1c:	40020088 	.word	0x40020088
 8005d20:	400200a0 	.word	0x400200a0
 8005d24:	400200b8 	.word	0x400200b8
 8005d28:	40020410 	.word	0x40020410
 8005d2c:	40020428 	.word	0x40020428
 8005d30:	40020440 	.word	0x40020440
 8005d34:	40020458 	.word	0x40020458
 8005d38:	40020470 	.word	0x40020470
 8005d3c:	40020488 	.word	0x40020488
 8005d40:	400204a0 	.word	0x400204a0
 8005d44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2201      	movs	r2, #1
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a4f      	ldr	r2, [pc, #316]	; (8005ea0 <HAL_DMA_Abort+0x5dc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d072      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a4d      	ldr	r2, [pc, #308]	; (8005ea4 <HAL_DMA_Abort+0x5e0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d06d      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a4c      	ldr	r2, [pc, #304]	; (8005ea8 <HAL_DMA_Abort+0x5e4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d068      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a4a      	ldr	r2, [pc, #296]	; (8005eac <HAL_DMA_Abort+0x5e8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d063      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a49      	ldr	r2, [pc, #292]	; (8005eb0 <HAL_DMA_Abort+0x5ec>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d05e      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a47      	ldr	r2, [pc, #284]	; (8005eb4 <HAL_DMA_Abort+0x5f0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d059      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a46      	ldr	r2, [pc, #280]	; (8005eb8 <HAL_DMA_Abort+0x5f4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d054      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a44      	ldr	r2, [pc, #272]	; (8005ebc <HAL_DMA_Abort+0x5f8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d04f      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a43      	ldr	r2, [pc, #268]	; (8005ec0 <HAL_DMA_Abort+0x5fc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d04a      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a41      	ldr	r2, [pc, #260]	; (8005ec4 <HAL_DMA_Abort+0x600>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d045      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a40      	ldr	r2, [pc, #256]	; (8005ec8 <HAL_DMA_Abort+0x604>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d040      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3e      	ldr	r2, [pc, #248]	; (8005ecc <HAL_DMA_Abort+0x608>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d03b      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3d      	ldr	r2, [pc, #244]	; (8005ed0 <HAL_DMA_Abort+0x60c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d036      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3b      	ldr	r2, [pc, #236]	; (8005ed4 <HAL_DMA_Abort+0x610>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d031      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3a      	ldr	r2, [pc, #232]	; (8005ed8 <HAL_DMA_Abort+0x614>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d02c      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a38      	ldr	r2, [pc, #224]	; (8005edc <HAL_DMA_Abort+0x618>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d027      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a37      	ldr	r2, [pc, #220]	; (8005ee0 <HAL_DMA_Abort+0x61c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d022      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a35      	ldr	r2, [pc, #212]	; (8005ee4 <HAL_DMA_Abort+0x620>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01d      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a34      	ldr	r2, [pc, #208]	; (8005ee8 <HAL_DMA_Abort+0x624>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d018      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a32      	ldr	r2, [pc, #200]	; (8005eec <HAL_DMA_Abort+0x628>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a31      	ldr	r2, [pc, #196]	; (8005ef0 <HAL_DMA_Abort+0x62c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2f      	ldr	r2, [pc, #188]	; (8005ef4 <HAL_DMA_Abort+0x630>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2e      	ldr	r2, [pc, #184]	; (8005ef8 <HAL_DMA_Abort+0x634>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_DMA_Abort+0x58a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2c      	ldr	r2, [pc, #176]	; (8005efc <HAL_DMA_Abort+0x638>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d101      	bne.n	8005e52 <HAL_DMA_Abort+0x58e>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <HAL_DMA_Abort+0x590>
 8005e52:	2300      	movs	r3, #0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40020010 	.word	0x40020010
 8005ea4:	40020028 	.word	0x40020028
 8005ea8:	40020040 	.word	0x40020040
 8005eac:	40020058 	.word	0x40020058
 8005eb0:	40020070 	.word	0x40020070
 8005eb4:	40020088 	.word	0x40020088
 8005eb8:	400200a0 	.word	0x400200a0
 8005ebc:	400200b8 	.word	0x400200b8
 8005ec0:	40020410 	.word	0x40020410
 8005ec4:	40020428 	.word	0x40020428
 8005ec8:	40020440 	.word	0x40020440
 8005ecc:	40020458 	.word	0x40020458
 8005ed0:	40020470 	.word	0x40020470
 8005ed4:	40020488 	.word	0x40020488
 8005ed8:	400204a0 	.word	0x400204a0
 8005edc:	400204b8 	.word	0x400204b8
 8005ee0:	58025408 	.word	0x58025408
 8005ee4:	5802541c 	.word	0x5802541c
 8005ee8:	58025430 	.word	0x58025430
 8005eec:	58025444 	.word	0x58025444
 8005ef0:	58025458 	.word	0x58025458
 8005ef4:	5802546c 	.word	0x5802546c
 8005ef8:	58025480 	.word	0x58025480
 8005efc:	58025494 	.word	0x58025494

08005f00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e237      	b.n	8006382 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d004      	beq.n	8005f28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e22c      	b.n	8006382 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5c      	ldr	r2, [pc, #368]	; (80060a0 <HAL_DMA_Abort_IT+0x1a0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d04a      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5b      	ldr	r2, [pc, #364]	; (80060a4 <HAL_DMA_Abort_IT+0x1a4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d045      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a59      	ldr	r2, [pc, #356]	; (80060a8 <HAL_DMA_Abort_IT+0x1a8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d040      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a58      	ldr	r2, [pc, #352]	; (80060ac <HAL_DMA_Abort_IT+0x1ac>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d03b      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a56      	ldr	r2, [pc, #344]	; (80060b0 <HAL_DMA_Abort_IT+0x1b0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d036      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a55      	ldr	r2, [pc, #340]	; (80060b4 <HAL_DMA_Abort_IT+0x1b4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d031      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a53      	ldr	r2, [pc, #332]	; (80060b8 <HAL_DMA_Abort_IT+0x1b8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02c      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a52      	ldr	r2, [pc, #328]	; (80060bc <HAL_DMA_Abort_IT+0x1bc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d027      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a50      	ldr	r2, [pc, #320]	; (80060c0 <HAL_DMA_Abort_IT+0x1c0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4f      	ldr	r2, [pc, #316]	; (80060c4 <HAL_DMA_Abort_IT+0x1c4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a4d      	ldr	r2, [pc, #308]	; (80060c8 <HAL_DMA_Abort_IT+0x1c8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4c      	ldr	r2, [pc, #304]	; (80060cc <HAL_DMA_Abort_IT+0x1cc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4a      	ldr	r2, [pc, #296]	; (80060d0 <HAL_DMA_Abort_IT+0x1d0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a49      	ldr	r2, [pc, #292]	; (80060d4 <HAL_DMA_Abort_IT+0x1d4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a47      	ldr	r2, [pc, #284]	; (80060d8 <HAL_DMA_Abort_IT+0x1d8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a46      	ldr	r2, [pc, #280]	; (80060dc <HAL_DMA_Abort_IT+0x1dc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <HAL_DMA_Abort_IT+0xcc>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <HAL_DMA_Abort_IT+0xce>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8086 	beq.w	80060e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <HAL_DMA_Abort_IT+0x1a0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d04a      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <HAL_DMA_Abort_IT+0x1a4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d045      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <HAL_DMA_Abort_IT+0x1a8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d040      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2b      	ldr	r2, [pc, #172]	; (80060ac <HAL_DMA_Abort_IT+0x1ac>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d03b      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <HAL_DMA_Abort_IT+0x1b0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d036      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a28      	ldr	r2, [pc, #160]	; (80060b4 <HAL_DMA_Abort_IT+0x1b4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d031      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a26      	ldr	r2, [pc, #152]	; (80060b8 <HAL_DMA_Abort_IT+0x1b8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02c      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a25      	ldr	r2, [pc, #148]	; (80060bc <HAL_DMA_Abort_IT+0x1bc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d027      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a23      	ldr	r2, [pc, #140]	; (80060c0 <HAL_DMA_Abort_IT+0x1c0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d022      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <HAL_DMA_Abort_IT+0x1c4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d01d      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a20      	ldr	r2, [pc, #128]	; (80060c8 <HAL_DMA_Abort_IT+0x1c8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d018      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <HAL_DMA_Abort_IT+0x1cc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1d      	ldr	r2, [pc, #116]	; (80060d0 <HAL_DMA_Abort_IT+0x1d0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00e      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_DMA_Abort_IT+0x1d4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1a      	ldr	r2, [pc, #104]	; (80060d8 <HAL_DMA_Abort_IT+0x1d8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_DMA_Abort_IT+0x17c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a19      	ldr	r2, [pc, #100]	; (80060dc <HAL_DMA_Abort_IT+0x1dc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <HAL_DMA_Abort_IT+0x18e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 0201 	bic.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e178      	b.n	8006380 <HAL_DMA_Abort_IT+0x480>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e16f      	b.n	8006380 <HAL_DMA_Abort_IT+0x480>
 80060a0:	40020010 	.word	0x40020010
 80060a4:	40020028 	.word	0x40020028
 80060a8:	40020040 	.word	0x40020040
 80060ac:	40020058 	.word	0x40020058
 80060b0:	40020070 	.word	0x40020070
 80060b4:	40020088 	.word	0x40020088
 80060b8:	400200a0 	.word	0x400200a0
 80060bc:	400200b8 	.word	0x400200b8
 80060c0:	40020410 	.word	0x40020410
 80060c4:	40020428 	.word	0x40020428
 80060c8:	40020440 	.word	0x40020440
 80060cc:	40020458 	.word	0x40020458
 80060d0:	40020470 	.word	0x40020470
 80060d4:	40020488 	.word	0x40020488
 80060d8:	400204a0 	.word	0x400204a0
 80060dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 020e 	bic.w	r2, r2, #14
 80060ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a6c      	ldr	r2, [pc, #432]	; (80062a8 <HAL_DMA_Abort_IT+0x3a8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d04a      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a6b      	ldr	r2, [pc, #428]	; (80062ac <HAL_DMA_Abort_IT+0x3ac>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d045      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a69      	ldr	r2, [pc, #420]	; (80062b0 <HAL_DMA_Abort_IT+0x3b0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d040      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a68      	ldr	r2, [pc, #416]	; (80062b4 <HAL_DMA_Abort_IT+0x3b4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d03b      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a66      	ldr	r2, [pc, #408]	; (80062b8 <HAL_DMA_Abort_IT+0x3b8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d036      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a65      	ldr	r2, [pc, #404]	; (80062bc <HAL_DMA_Abort_IT+0x3bc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d031      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a63      	ldr	r2, [pc, #396]	; (80062c0 <HAL_DMA_Abort_IT+0x3c0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02c      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a62      	ldr	r2, [pc, #392]	; (80062c4 <HAL_DMA_Abort_IT+0x3c4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d027      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a60      	ldr	r2, [pc, #384]	; (80062c8 <HAL_DMA_Abort_IT+0x3c8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d022      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a5f      	ldr	r2, [pc, #380]	; (80062cc <HAL_DMA_Abort_IT+0x3cc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d01d      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5d      	ldr	r2, [pc, #372]	; (80062d0 <HAL_DMA_Abort_IT+0x3d0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d018      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a5c      	ldr	r2, [pc, #368]	; (80062d4 <HAL_DMA_Abort_IT+0x3d4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5a      	ldr	r2, [pc, #360]	; (80062d8 <HAL_DMA_Abort_IT+0x3d8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00e      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a59      	ldr	r2, [pc, #356]	; (80062dc <HAL_DMA_Abort_IT+0x3dc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d009      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a57      	ldr	r2, [pc, #348]	; (80062e0 <HAL_DMA_Abort_IT+0x3e0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_DMA_Abort_IT+0x290>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a56      	ldr	r2, [pc, #344]	; (80062e4 <HAL_DMA_Abort_IT+0x3e4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d108      	bne.n	80061a2 <HAL_DMA_Abort_IT+0x2a2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e007      	b.n	80061b2 <HAL_DMA_Abort_IT+0x2b2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3c      	ldr	r2, [pc, #240]	; (80062a8 <HAL_DMA_Abort_IT+0x3a8>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d072      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a3a      	ldr	r2, [pc, #232]	; (80062ac <HAL_DMA_Abort_IT+0x3ac>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d06d      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a39      	ldr	r2, [pc, #228]	; (80062b0 <HAL_DMA_Abort_IT+0x3b0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d068      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a37      	ldr	r2, [pc, #220]	; (80062b4 <HAL_DMA_Abort_IT+0x3b4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d063      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a36      	ldr	r2, [pc, #216]	; (80062b8 <HAL_DMA_Abort_IT+0x3b8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d05e      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a34      	ldr	r2, [pc, #208]	; (80062bc <HAL_DMA_Abort_IT+0x3bc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d059      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a33      	ldr	r2, [pc, #204]	; (80062c0 <HAL_DMA_Abort_IT+0x3c0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d054      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a31      	ldr	r2, [pc, #196]	; (80062c4 <HAL_DMA_Abort_IT+0x3c4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04f      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <HAL_DMA_Abort_IT+0x3c8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2e      	ldr	r2, [pc, #184]	; (80062cc <HAL_DMA_Abort_IT+0x3cc>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2d      	ldr	r2, [pc, #180]	; (80062d0 <HAL_DMA_Abort_IT+0x3d0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2b      	ldr	r2, [pc, #172]	; (80062d4 <HAL_DMA_Abort_IT+0x3d4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2a      	ldr	r2, [pc, #168]	; (80062d8 <HAL_DMA_Abort_IT+0x3d8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a28      	ldr	r2, [pc, #160]	; (80062dc <HAL_DMA_Abort_IT+0x3dc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a27      	ldr	r2, [pc, #156]	; (80062e0 <HAL_DMA_Abort_IT+0x3e0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <HAL_DMA_Abort_IT+0x3e4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a24      	ldr	r2, [pc, #144]	; (80062e8 <HAL_DMA_Abort_IT+0x3e8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a22      	ldr	r2, [pc, #136]	; (80062ec <HAL_DMA_Abort_IT+0x3ec>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <HAL_DMA_Abort_IT+0x3f0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1f      	ldr	r2, [pc, #124]	; (80062f4 <HAL_DMA_Abort_IT+0x3f4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <HAL_DMA_Abort_IT+0x3f8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1c      	ldr	r2, [pc, #112]	; (80062fc <HAL_DMA_Abort_IT+0x3fc>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1b      	ldr	r2, [pc, #108]	; (8006300 <HAL_DMA_Abort_IT+0x400>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_Abort_IT+0x3a2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a19      	ldr	r2, [pc, #100]	; (8006304 <HAL_DMA_Abort_IT+0x404>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d132      	bne.n	8006308 <HAL_DMA_Abort_IT+0x408>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e031      	b.n	800630a <HAL_DMA_Abort_IT+0x40a>
 80062a6:	bf00      	nop
 80062a8:	40020010 	.word	0x40020010
 80062ac:	40020028 	.word	0x40020028
 80062b0:	40020040 	.word	0x40020040
 80062b4:	40020058 	.word	0x40020058
 80062b8:	40020070 	.word	0x40020070
 80062bc:	40020088 	.word	0x40020088
 80062c0:	400200a0 	.word	0x400200a0
 80062c4:	400200b8 	.word	0x400200b8
 80062c8:	40020410 	.word	0x40020410
 80062cc:	40020428 	.word	0x40020428
 80062d0:	40020440 	.word	0x40020440
 80062d4:	40020458 	.word	0x40020458
 80062d8:	40020470 	.word	0x40020470
 80062dc:	40020488 	.word	0x40020488
 80062e0:	400204a0 	.word	0x400204a0
 80062e4:	400204b8 	.word	0x400204b8
 80062e8:	58025408 	.word	0x58025408
 80062ec:	5802541c 	.word	0x5802541c
 80062f0:	58025430 	.word	0x58025430
 80062f4:	58025444 	.word	0x58025444
 80062f8:	58025458 	.word	0x58025458
 80062fc:	5802546c 	.word	0x5802546c
 8006300:	58025480 	.word	0x58025480
 8006304:	58025494 	.word	0x58025494
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d028      	beq.n	8006360 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800631c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2201      	movs	r2, #1
 800632e:	409a      	lsls	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800633c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006354:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800635e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop

0800638c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006398:	4b67      	ldr	r3, [pc, #412]	; (8006538 <HAL_DMA_IRQHandler+0x1ac>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a67      	ldr	r2, [pc, #412]	; (800653c <HAL_DMA_IRQHandler+0x1b0>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	0a9b      	lsrs	r3, r3, #10
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5f      	ldr	r2, [pc, #380]	; (8006540 <HAL_DMA_IRQHandler+0x1b4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d04a      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5d      	ldr	r2, [pc, #372]	; (8006544 <HAL_DMA_IRQHandler+0x1b8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d045      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5c      	ldr	r2, [pc, #368]	; (8006548 <HAL_DMA_IRQHandler+0x1bc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d040      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5a      	ldr	r2, [pc, #360]	; (800654c <HAL_DMA_IRQHandler+0x1c0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d03b      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a59      	ldr	r2, [pc, #356]	; (8006550 <HAL_DMA_IRQHandler+0x1c4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d036      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a57      	ldr	r2, [pc, #348]	; (8006554 <HAL_DMA_IRQHandler+0x1c8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d031      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a56      	ldr	r2, [pc, #344]	; (8006558 <HAL_DMA_IRQHandler+0x1cc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d02c      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a54      	ldr	r2, [pc, #336]	; (800655c <HAL_DMA_IRQHandler+0x1d0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d027      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a53      	ldr	r2, [pc, #332]	; (8006560 <HAL_DMA_IRQHandler+0x1d4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d022      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a51      	ldr	r2, [pc, #324]	; (8006564 <HAL_DMA_IRQHandler+0x1d8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01d      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a50      	ldr	r2, [pc, #320]	; (8006568 <HAL_DMA_IRQHandler+0x1dc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d018      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a4e      	ldr	r2, [pc, #312]	; (800656c <HAL_DMA_IRQHandler+0x1e0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a4d      	ldr	r2, [pc, #308]	; (8006570 <HAL_DMA_IRQHandler+0x1e4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a4b      	ldr	r2, [pc, #300]	; (8006574 <HAL_DMA_IRQHandler+0x1e8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4a      	ldr	r2, [pc, #296]	; (8006578 <HAL_DMA_IRQHandler+0x1ec>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_DMA_IRQHandler+0xd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a48      	ldr	r2, [pc, #288]	; (800657c <HAL_DMA_IRQHandler+0x1f0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d101      	bne.n	8006462 <HAL_DMA_IRQHandler+0xd6>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_DMA_IRQHandler+0xd8>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 842b 	beq.w	8006cc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	2208      	movs	r2, #8
 8006474:	409a      	lsls	r2, r3
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	4013      	ands	r3, r2
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80a2 	beq.w	80065c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <HAL_DMA_IRQHandler+0x1b4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d04a      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a2d      	ldr	r2, [pc, #180]	; (8006544 <HAL_DMA_IRQHandler+0x1b8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d045      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2b      	ldr	r2, [pc, #172]	; (8006548 <HAL_DMA_IRQHandler+0x1bc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d040      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2a      	ldr	r2, [pc, #168]	; (800654c <HAL_DMA_IRQHandler+0x1c0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d03b      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a28      	ldr	r2, [pc, #160]	; (8006550 <HAL_DMA_IRQHandler+0x1c4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d036      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a27      	ldr	r2, [pc, #156]	; (8006554 <HAL_DMA_IRQHandler+0x1c8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d031      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a25      	ldr	r2, [pc, #148]	; (8006558 <HAL_DMA_IRQHandler+0x1cc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d02c      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a24      	ldr	r2, [pc, #144]	; (800655c <HAL_DMA_IRQHandler+0x1d0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d027      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a22      	ldr	r2, [pc, #136]	; (8006560 <HAL_DMA_IRQHandler+0x1d4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d022      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a21      	ldr	r2, [pc, #132]	; (8006564 <HAL_DMA_IRQHandler+0x1d8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d01d      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <HAL_DMA_IRQHandler+0x1dc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1e      	ldr	r2, [pc, #120]	; (800656c <HAL_DMA_IRQHandler+0x1e0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d013      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <HAL_DMA_IRQHandler+0x1e4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1b      	ldr	r2, [pc, #108]	; (8006574 <HAL_DMA_IRQHandler+0x1e8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a19      	ldr	r2, [pc, #100]	; (8006578 <HAL_DMA_IRQHandler+0x1ec>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_DMA_IRQHandler+0x194>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a18      	ldr	r2, [pc, #96]	; (800657c <HAL_DMA_IRQHandler+0x1f0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d12f      	bne.n	8006580 <HAL_DMA_IRQHandler+0x1f4>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0304 	and.w	r3, r3, #4
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	e02e      	b.n	8006594 <HAL_DMA_IRQHandler+0x208>
 8006536:	bf00      	nop
 8006538:	24000004 	.word	0x24000004
 800653c:	1b4e81b5 	.word	0x1b4e81b5
 8006540:	40020010 	.word	0x40020010
 8006544:	40020028 	.word	0x40020028
 8006548:	40020040 	.word	0x40020040
 800654c:	40020058 	.word	0x40020058
 8006550:	40020070 	.word	0x40020070
 8006554:	40020088 	.word	0x40020088
 8006558:	400200a0 	.word	0x400200a0
 800655c:	400200b8 	.word	0x400200b8
 8006560:	40020410 	.word	0x40020410
 8006564:	40020428 	.word	0x40020428
 8006568:	40020440 	.word	0x40020440
 800656c:	40020458 	.word	0x40020458
 8006570:	40020470 	.word	0x40020470
 8006574:	40020488 	.word	0x40020488
 8006578:	400204a0 	.word	0x400204a0
 800657c:	400204b8 	.word	0x400204b8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf14      	ite	ne
 800658e:	2301      	movne	r3, #1
 8006590:	2300      	moveq	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d015      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0204 	bic.w	r2, r2, #4
 80065a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	2208      	movs	r2, #8
 80065b2:	409a      	lsls	r2, r3
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	f043 0201 	orr.w	r2, r3, #1
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d06e      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a69      	ldr	r2, [pc, #420]	; (8006784 <HAL_DMA_IRQHandler+0x3f8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d04a      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a67      	ldr	r2, [pc, #412]	; (8006788 <HAL_DMA_IRQHandler+0x3fc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d045      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a66      	ldr	r2, [pc, #408]	; (800678c <HAL_DMA_IRQHandler+0x400>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d040      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a64      	ldr	r2, [pc, #400]	; (8006790 <HAL_DMA_IRQHandler+0x404>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d03b      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a63      	ldr	r2, [pc, #396]	; (8006794 <HAL_DMA_IRQHandler+0x408>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d036      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a61      	ldr	r2, [pc, #388]	; (8006798 <HAL_DMA_IRQHandler+0x40c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d031      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a60      	ldr	r2, [pc, #384]	; (800679c <HAL_DMA_IRQHandler+0x410>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d02c      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5e      	ldr	r2, [pc, #376]	; (80067a0 <HAL_DMA_IRQHandler+0x414>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d027      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a5d      	ldr	r2, [pc, #372]	; (80067a4 <HAL_DMA_IRQHandler+0x418>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d022      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5b      	ldr	r2, [pc, #364]	; (80067a8 <HAL_DMA_IRQHandler+0x41c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01d      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a5a      	ldr	r2, [pc, #360]	; (80067ac <HAL_DMA_IRQHandler+0x420>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d018      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a58      	ldr	r2, [pc, #352]	; (80067b0 <HAL_DMA_IRQHandler+0x424>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a57      	ldr	r2, [pc, #348]	; (80067b4 <HAL_DMA_IRQHandler+0x428>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00e      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a55      	ldr	r2, [pc, #340]	; (80067b8 <HAL_DMA_IRQHandler+0x42c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a54      	ldr	r2, [pc, #336]	; (80067bc <HAL_DMA_IRQHandler+0x430>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_DMA_IRQHandler+0x2ee>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a52      	ldr	r2, [pc, #328]	; (80067c0 <HAL_DMA_IRQHandler+0x434>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d10a      	bne.n	8006690 <HAL_DMA_IRQHandler+0x304>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	2b00      	cmp	r3, #0
 8006686:	bf14      	ite	ne
 8006688:	2301      	movne	r3, #1
 800668a:	2300      	moveq	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	e003      	b.n	8006698 <HAL_DMA_IRQHandler+0x30c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00d      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	2201      	movs	r2, #1
 80066a6:	409a      	lsls	r2, r3
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	f043 0202 	orr.w	r2, r3, #2
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	f003 031f 	and.w	r3, r3, #31
 80066c0:	2204      	movs	r2, #4
 80066c2:	409a      	lsls	r2, r3
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 808f 	beq.w	80067ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a2c      	ldr	r2, [pc, #176]	; (8006784 <HAL_DMA_IRQHandler+0x3f8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d04a      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <HAL_DMA_IRQHandler+0x3fc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d045      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a29      	ldr	r2, [pc, #164]	; (800678c <HAL_DMA_IRQHandler+0x400>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d040      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <HAL_DMA_IRQHandler+0x404>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d03b      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a26      	ldr	r2, [pc, #152]	; (8006794 <HAL_DMA_IRQHandler+0x408>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d036      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a24      	ldr	r2, [pc, #144]	; (8006798 <HAL_DMA_IRQHandler+0x40c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d031      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a23      	ldr	r2, [pc, #140]	; (800679c <HAL_DMA_IRQHandler+0x410>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d02c      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <HAL_DMA_IRQHandler+0x414>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d027      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a20      	ldr	r2, [pc, #128]	; (80067a4 <HAL_DMA_IRQHandler+0x418>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d022      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_DMA_IRQHandler+0x41c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1d      	ldr	r2, [pc, #116]	; (80067ac <HAL_DMA_IRQHandler+0x420>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <HAL_DMA_IRQHandler+0x424>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1a      	ldr	r2, [pc, #104]	; (80067b4 <HAL_DMA_IRQHandler+0x428>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_DMA_IRQHandler+0x42c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a17      	ldr	r2, [pc, #92]	; (80067bc <HAL_DMA_IRQHandler+0x430>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_DMA_IRQHandler+0x3e2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <HAL_DMA_IRQHandler+0x434>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d12a      	bne.n	80067c4 <HAL_DMA_IRQHandler+0x438>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e023      	b.n	80067cc <HAL_DMA_IRQHandler+0x440>
 8006784:	40020010 	.word	0x40020010
 8006788:	40020028 	.word	0x40020028
 800678c:	40020040 	.word	0x40020040
 8006790:	40020058 	.word	0x40020058
 8006794:	40020070 	.word	0x40020070
 8006798:	40020088 	.word	0x40020088
 800679c:	400200a0 	.word	0x400200a0
 80067a0:	400200b8 	.word	0x400200b8
 80067a4:	40020410 	.word	0x40020410
 80067a8:	40020428 	.word	0x40020428
 80067ac:	40020440 	.word	0x40020440
 80067b0:	40020458 	.word	0x40020458
 80067b4:	40020470 	.word	0x40020470
 80067b8:	40020488 	.word	0x40020488
 80067bc:	400204a0 	.word	0x400204a0
 80067c0:	400204b8 	.word	0x400204b8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00d      	beq.n	80067ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2204      	movs	r2, #4
 80067da:	409a      	lsls	r2, r3
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	f043 0204 	orr.w	r2, r3, #4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	2210      	movs	r2, #16
 80067f6:	409a      	lsls	r2, r3
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	4013      	ands	r3, r2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80a6 	beq.w	800694e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a85      	ldr	r2, [pc, #532]	; (8006a1c <HAL_DMA_IRQHandler+0x690>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d04a      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a83      	ldr	r2, [pc, #524]	; (8006a20 <HAL_DMA_IRQHandler+0x694>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d045      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a82      	ldr	r2, [pc, #520]	; (8006a24 <HAL_DMA_IRQHandler+0x698>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d040      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a80      	ldr	r2, [pc, #512]	; (8006a28 <HAL_DMA_IRQHandler+0x69c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d03b      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7f      	ldr	r2, [pc, #508]	; (8006a2c <HAL_DMA_IRQHandler+0x6a0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d036      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a7d      	ldr	r2, [pc, #500]	; (8006a30 <HAL_DMA_IRQHandler+0x6a4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d031      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7c      	ldr	r2, [pc, #496]	; (8006a34 <HAL_DMA_IRQHandler+0x6a8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d02c      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7a      	ldr	r2, [pc, #488]	; (8006a38 <HAL_DMA_IRQHandler+0x6ac>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d027      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a79      	ldr	r2, [pc, #484]	; (8006a3c <HAL_DMA_IRQHandler+0x6b0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d022      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a77      	ldr	r2, [pc, #476]	; (8006a40 <HAL_DMA_IRQHandler+0x6b4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d01d      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a76      	ldr	r2, [pc, #472]	; (8006a44 <HAL_DMA_IRQHandler+0x6b8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d018      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a74      	ldr	r2, [pc, #464]	; (8006a48 <HAL_DMA_IRQHandler+0x6bc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a73      	ldr	r2, [pc, #460]	; (8006a4c <HAL_DMA_IRQHandler+0x6c0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00e      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a71      	ldr	r2, [pc, #452]	; (8006a50 <HAL_DMA_IRQHandler+0x6c4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d009      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a70      	ldr	r2, [pc, #448]	; (8006a54 <HAL_DMA_IRQHandler+0x6c8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d004      	beq.n	80068a2 <HAL_DMA_IRQHandler+0x516>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a6e      	ldr	r2, [pc, #440]	; (8006a58 <HAL_DMA_IRQHandler+0x6cc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10a      	bne.n	80068b8 <HAL_DMA_IRQHandler+0x52c>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf14      	ite	ne
 80068b0:	2301      	movne	r3, #1
 80068b2:	2300      	moveq	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e009      	b.n	80068cc <HAL_DMA_IRQHandler+0x540>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bf14      	ite	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2300      	moveq	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03e      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2210      	movs	r2, #16
 80068da:	409a      	lsls	r2, r3
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d018      	beq.n	8006920 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d024      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
 800690c:	e01f      	b.n	800694e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01b      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
 800691e:	e016      	b.n	800694e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0208 	bic.w	r2, r2, #8
 800693c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2220      	movs	r2, #32
 8006958:	409a      	lsls	r2, r3
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	4013      	ands	r3, r2
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 8110 	beq.w	8006b84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2c      	ldr	r2, [pc, #176]	; (8006a1c <HAL_DMA_IRQHandler+0x690>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d04a      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <HAL_DMA_IRQHandler+0x694>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d045      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a29      	ldr	r2, [pc, #164]	; (8006a24 <HAL_DMA_IRQHandler+0x698>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d040      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a28      	ldr	r2, [pc, #160]	; (8006a28 <HAL_DMA_IRQHandler+0x69c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d03b      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <HAL_DMA_IRQHandler+0x6a0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d036      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a25      	ldr	r2, [pc, #148]	; (8006a30 <HAL_DMA_IRQHandler+0x6a4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d031      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a23      	ldr	r2, [pc, #140]	; (8006a34 <HAL_DMA_IRQHandler+0x6a8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d02c      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a22      	ldr	r2, [pc, #136]	; (8006a38 <HAL_DMA_IRQHandler+0x6ac>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d027      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a20      	ldr	r2, [pc, #128]	; (8006a3c <HAL_DMA_IRQHandler+0x6b0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d022      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1f      	ldr	r2, [pc, #124]	; (8006a40 <HAL_DMA_IRQHandler+0x6b4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d01d      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <HAL_DMA_IRQHandler+0x6b8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <HAL_DMA_IRQHandler+0x6bc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <HAL_DMA_IRQHandler+0x6c0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00e      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <HAL_DMA_IRQHandler+0x6c4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <HAL_DMA_IRQHandler+0x6c8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <HAL_DMA_IRQHandler+0x678>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a16      	ldr	r2, [pc, #88]	; (8006a58 <HAL_DMA_IRQHandler+0x6cc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d12b      	bne.n	8006a5c <HAL_DMA_IRQHandler+0x6d0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bf14      	ite	ne
 8006a12:	2301      	movne	r3, #1
 8006a14:	2300      	moveq	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	e02a      	b.n	8006a70 <HAL_DMA_IRQHandler+0x6e4>
 8006a1a:	bf00      	nop
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	2300      	moveq	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8087 	beq.w	8006b84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2220      	movs	r2, #32
 8006a80:	409a      	lsls	r2, r3
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d139      	bne.n	8006b06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0216 	bic.w	r2, r2, #22
 8006aa0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695a      	ldr	r2, [r3, #20]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ab0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <HAL_DMA_IRQHandler+0x736>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0208 	bic.w	r2, r2, #8
 8006ad0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	223f      	movs	r2, #63	; 0x3f
 8006adc:	409a      	lsls	r2, r3
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 834a 	beq.w	8007190 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
          }
          return;
 8006b04:	e344      	b.n	8007190 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d018      	beq.n	8006b46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
 8006b32:	e027      	b.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d023      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	4798      	blx	r3
 8006b44:	e01e      	b.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10f      	bne.n	8006b74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0210 	bic.w	r2, r2, #16
 8006b62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8306 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 8088 	beq.w	8006cac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a7a      	ldr	r2, [pc, #488]	; (8006d94 <HAL_DMA_IRQHandler+0xa08>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d04a      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a79      	ldr	r2, [pc, #484]	; (8006d98 <HAL_DMA_IRQHandler+0xa0c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d045      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a77      	ldr	r2, [pc, #476]	; (8006d9c <HAL_DMA_IRQHandler+0xa10>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d040      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a76      	ldr	r2, [pc, #472]	; (8006da0 <HAL_DMA_IRQHandler+0xa14>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d03b      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a74      	ldr	r2, [pc, #464]	; (8006da4 <HAL_DMA_IRQHandler+0xa18>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d036      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a73      	ldr	r2, [pc, #460]	; (8006da8 <HAL_DMA_IRQHandler+0xa1c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d031      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a71      	ldr	r2, [pc, #452]	; (8006dac <HAL_DMA_IRQHandler+0xa20>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d02c      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a70      	ldr	r2, [pc, #448]	; (8006db0 <HAL_DMA_IRQHandler+0xa24>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d027      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6e      	ldr	r2, [pc, #440]	; (8006db4 <HAL_DMA_IRQHandler+0xa28>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d022      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6d      	ldr	r2, [pc, #436]	; (8006db8 <HAL_DMA_IRQHandler+0xa2c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d01d      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a6b      	ldr	r2, [pc, #428]	; (8006dbc <HAL_DMA_IRQHandler+0xa30>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d018      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a6a      	ldr	r2, [pc, #424]	; (8006dc0 <HAL_DMA_IRQHandler+0xa34>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d013      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a68      	ldr	r2, [pc, #416]	; (8006dc4 <HAL_DMA_IRQHandler+0xa38>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00e      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a67      	ldr	r2, [pc, #412]	; (8006dc8 <HAL_DMA_IRQHandler+0xa3c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a65      	ldr	r2, [pc, #404]	; (8006dcc <HAL_DMA_IRQHandler+0xa40>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x8b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a64      	ldr	r2, [pc, #400]	; (8006dd0 <HAL_DMA_IRQHandler+0xa44>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d108      	bne.n	8006c56 <HAL_DMA_IRQHandler+0x8ca>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e007      	b.n	8006c66 <HAL_DMA_IRQHandler+0x8da>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d307      	bcc.n	8006c82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f2      	bne.n	8006c66 <HAL_DMA_IRQHandler+0x8da>
 8006c80:	e000      	b.n	8006c84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2203      	movs	r2, #3
 8006c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c9a:	e003      	b.n	8006ca4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8272 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
 8006cbe:	e26c      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a43      	ldr	r2, [pc, #268]	; (8006dd4 <HAL_DMA_IRQHandler+0xa48>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a42      	ldr	r2, [pc, #264]	; (8006dd8 <HAL_DMA_IRQHandler+0xa4c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01d      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a40      	ldr	r2, [pc, #256]	; (8006ddc <HAL_DMA_IRQHandler+0xa50>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a3f      	ldr	r2, [pc, #252]	; (8006de0 <HAL_DMA_IRQHandler+0xa54>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a3d      	ldr	r2, [pc, #244]	; (8006de4 <HAL_DMA_IRQHandler+0xa58>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a3c      	ldr	r2, [pc, #240]	; (8006de8 <HAL_DMA_IRQHandler+0xa5c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3a      	ldr	r2, [pc, #232]	; (8006dec <HAL_DMA_IRQHandler+0xa60>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x984>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a39      	ldr	r2, [pc, #228]	; (8006df0 <HAL_DMA_IRQHandler+0xa64>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d101      	bne.n	8006d14 <HAL_DMA_IRQHandler+0x988>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_DMA_IRQHandler+0x98a>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 823f 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80cd 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xb48>
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80c7 	beq.w	8006ed4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2204      	movs	r2, #4
 8006d50:	409a      	lsls	r2, r3
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d049      	beq.n	8006df4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8210 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d7c:	e20a      	b.n	8007194 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8206 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d90:	e200      	b.n	8007194 <HAL_DMA_IRQHandler+0xe08>
 8006d92:	bf00      	nop
 8006d94:	40020010 	.word	0x40020010
 8006d98:	40020028 	.word	0x40020028
 8006d9c:	40020040 	.word	0x40020040
 8006da0:	40020058 	.word	0x40020058
 8006da4:	40020070 	.word	0x40020070
 8006da8:	40020088 	.word	0x40020088
 8006dac:	400200a0 	.word	0x400200a0
 8006db0:	400200b8 	.word	0x400200b8
 8006db4:	40020410 	.word	0x40020410
 8006db8:	40020428 	.word	0x40020428
 8006dbc:	40020440 	.word	0x40020440
 8006dc0:	40020458 	.word	0x40020458
 8006dc4:	40020470 	.word	0x40020470
 8006dc8:	40020488 	.word	0x40020488
 8006dcc:	400204a0 	.word	0x400204a0
 8006dd0:	400204b8 	.word	0x400204b8
 8006dd4:	58025408 	.word	0x58025408
 8006dd8:	5802541c 	.word	0x5802541c
 8006ddc:	58025430 	.word	0x58025430
 8006de0:	58025444 	.word	0x58025444
 8006de4:	58025458 	.word	0x58025458
 8006de8:	5802546c 	.word	0x5802546c
 8006dec:	58025480 	.word	0x58025480
 8006df0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d160      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a7f      	ldr	r2, [pc, #508]	; (8007000 <HAL_DMA_IRQHandler+0xc74>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d04a      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a7d      	ldr	r2, [pc, #500]	; (8007004 <HAL_DMA_IRQHandler+0xc78>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d045      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a7c      	ldr	r2, [pc, #496]	; (8007008 <HAL_DMA_IRQHandler+0xc7c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d040      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a7a      	ldr	r2, [pc, #488]	; (800700c <HAL_DMA_IRQHandler+0xc80>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d03b      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a79      	ldr	r2, [pc, #484]	; (8007010 <HAL_DMA_IRQHandler+0xc84>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d036      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a77      	ldr	r2, [pc, #476]	; (8007014 <HAL_DMA_IRQHandler+0xc88>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d031      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a76      	ldr	r2, [pc, #472]	; (8007018 <HAL_DMA_IRQHandler+0xc8c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d02c      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a74      	ldr	r2, [pc, #464]	; (800701c <HAL_DMA_IRQHandler+0xc90>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d027      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a73      	ldr	r2, [pc, #460]	; (8007020 <HAL_DMA_IRQHandler+0xc94>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d022      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a71      	ldr	r2, [pc, #452]	; (8007024 <HAL_DMA_IRQHandler+0xc98>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d01d      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a70      	ldr	r2, [pc, #448]	; (8007028 <HAL_DMA_IRQHandler+0xc9c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d018      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a6e      	ldr	r2, [pc, #440]	; (800702c <HAL_DMA_IRQHandler+0xca0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d013      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a6d      	ldr	r2, [pc, #436]	; (8007030 <HAL_DMA_IRQHandler+0xca4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00e      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a6b      	ldr	r2, [pc, #428]	; (8007034 <HAL_DMA_IRQHandler+0xca8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a6a      	ldr	r2, [pc, #424]	; (8007038 <HAL_DMA_IRQHandler+0xcac>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_DMA_IRQHandler+0xb12>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a68      	ldr	r2, [pc, #416]	; (800703c <HAL_DMA_IRQHandler+0xcb0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d108      	bne.n	8006eb0 <HAL_DMA_IRQHandler+0xb24>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0208 	bic.w	r2, r2, #8
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e007      	b.n	8006ec0 <HAL_DMA_IRQHandler+0xb34>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0204 	bic.w	r2, r2, #4
 8006ebe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8165 	beq.w	8007194 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ed2:	e15f      	b.n	8007194 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2202      	movs	r2, #2
 8006ede:	409a      	lsls	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80c5 	beq.w	8007074 <HAL_DMA_IRQHandler+0xce8>
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80bf 	beq.w	8007074 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2202      	movs	r2, #2
 8006f00:	409a      	lsls	r2, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d018      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d109      	bne.n	8006f2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 813a 	beq.w	8007198 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f2c:	e134      	b.n	8007198 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8130 	beq.w	8007198 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f40:	e12a      	b.n	8007198 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f040 8089 	bne.w	8007060 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2b      	ldr	r2, [pc, #172]	; (8007000 <HAL_DMA_IRQHandler+0xc74>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d04a      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a29      	ldr	r2, [pc, #164]	; (8007004 <HAL_DMA_IRQHandler+0xc78>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d045      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a28      	ldr	r2, [pc, #160]	; (8007008 <HAL_DMA_IRQHandler+0xc7c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d040      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a26      	ldr	r2, [pc, #152]	; (800700c <HAL_DMA_IRQHandler+0xc80>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d03b      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a25      	ldr	r2, [pc, #148]	; (8007010 <HAL_DMA_IRQHandler+0xc84>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d036      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a23      	ldr	r2, [pc, #140]	; (8007014 <HAL_DMA_IRQHandler+0xc88>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d031      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a22      	ldr	r2, [pc, #136]	; (8007018 <HAL_DMA_IRQHandler+0xc8c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d02c      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a20      	ldr	r2, [pc, #128]	; (800701c <HAL_DMA_IRQHandler+0xc90>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d027      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <HAL_DMA_IRQHandler+0xc94>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d022      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <HAL_DMA_IRQHandler+0xc98>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d01d      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <HAL_DMA_IRQHandler+0xc9c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d018      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1a      	ldr	r2, [pc, #104]	; (800702c <HAL_DMA_IRQHandler+0xca0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a19      	ldr	r2, [pc, #100]	; (8007030 <HAL_DMA_IRQHandler+0xca4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00e      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a17      	ldr	r2, [pc, #92]	; (8007034 <HAL_DMA_IRQHandler+0xca8>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d009      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a16      	ldr	r2, [pc, #88]	; (8007038 <HAL_DMA_IRQHandler+0xcac>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d004      	beq.n	8006fee <HAL_DMA_IRQHandler+0xc62>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <HAL_DMA_IRQHandler+0xcb0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d128      	bne.n	8007040 <HAL_DMA_IRQHandler+0xcb4>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 0214 	bic.w	r2, r2, #20
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e027      	b.n	8007050 <HAL_DMA_IRQHandler+0xcc4>
 8007000:	40020010 	.word	0x40020010
 8007004:	40020028 	.word	0x40020028
 8007008:	40020040 	.word	0x40020040
 800700c:	40020058 	.word	0x40020058
 8007010:	40020070 	.word	0x40020070
 8007014:	40020088 	.word	0x40020088
 8007018:	400200a0 	.word	0x400200a0
 800701c:	400200b8 	.word	0x400200b8
 8007020:	40020410 	.word	0x40020410
 8007024:	40020428 	.word	0x40020428
 8007028:	40020440 	.word	0x40020440
 800702c:	40020458 	.word	0x40020458
 8007030:	40020470 	.word	0x40020470
 8007034:	40020488 	.word	0x40020488
 8007038:	400204a0 	.word	0x400204a0
 800703c:	400204b8 	.word	0x400204b8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 020a 	bic.w	r2, r2, #10
 800704e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 8097 	beq.w	8007198 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007072:	e091      	b.n	8007198 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2208      	movs	r2, #8
 800707e:	409a      	lsls	r2, r3
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	4013      	ands	r3, r2
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8088 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8082 	beq.w	800719a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a41      	ldr	r2, [pc, #260]	; (80071a0 <HAL_DMA_IRQHandler+0xe14>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04a      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a3f      	ldr	r2, [pc, #252]	; (80071a4 <HAL_DMA_IRQHandler+0xe18>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d045      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a3e      	ldr	r2, [pc, #248]	; (80071a8 <HAL_DMA_IRQHandler+0xe1c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d040      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a3c      	ldr	r2, [pc, #240]	; (80071ac <HAL_DMA_IRQHandler+0xe20>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a3b      	ldr	r2, [pc, #236]	; (80071b0 <HAL_DMA_IRQHandler+0xe24>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d036      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a39      	ldr	r2, [pc, #228]	; (80071b4 <HAL_DMA_IRQHandler+0xe28>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a38      	ldr	r2, [pc, #224]	; (80071b8 <HAL_DMA_IRQHandler+0xe2c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02c      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a36      	ldr	r2, [pc, #216]	; (80071bc <HAL_DMA_IRQHandler+0xe30>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d027      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a35      	ldr	r2, [pc, #212]	; (80071c0 <HAL_DMA_IRQHandler+0xe34>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a33      	ldr	r2, [pc, #204]	; (80071c4 <HAL_DMA_IRQHandler+0xe38>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a32      	ldr	r2, [pc, #200]	; (80071c8 <HAL_DMA_IRQHandler+0xe3c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a30      	ldr	r2, [pc, #192]	; (80071cc <HAL_DMA_IRQHandler+0xe40>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2f      	ldr	r2, [pc, #188]	; (80071d0 <HAL_DMA_IRQHandler+0xe44>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2d      	ldr	r2, [pc, #180]	; (80071d4 <HAL_DMA_IRQHandler+0xe48>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2c      	ldr	r2, [pc, #176]	; (80071d8 <HAL_DMA_IRQHandler+0xe4c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_DMA_IRQHandler+0xdaa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2a      	ldr	r2, [pc, #168]	; (80071dc <HAL_DMA_IRQHandler+0xe50>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <HAL_DMA_IRQHandler+0xdbc>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 021c 	bic.w	r2, r2, #28
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e007      	b.n	8007158 <HAL_DMA_IRQHandler+0xdcc>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 020e 	bic.w	r2, r2, #14
 8007156:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	2201      	movs	r2, #1
 8007162:	409a      	lsls	r2, r3
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
 800718e:	e004      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007190:	bf00      	nop
 8007192:	e002      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007194:	bf00      	nop
 8007196:	e000      	b.n	800719a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007198:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800719a:	3728      	adds	r7, #40	; 0x28
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40020010 	.word	0x40020010
 80071a4:	40020028 	.word	0x40020028
 80071a8:	40020040 	.word	0x40020040
 80071ac:	40020058 	.word	0x40020058
 80071b0:	40020070 	.word	0x40020070
 80071b4:	40020088 	.word	0x40020088
 80071b8:	400200a0 	.word	0x400200a0
 80071bc:	400200b8 	.word	0x400200b8
 80071c0:	40020410 	.word	0x40020410
 80071c4:	40020428 	.word	0x40020428
 80071c8:	40020440 	.word	0x40020440
 80071cc:	40020458 	.word	0x40020458
 80071d0:	40020470 	.word	0x40020470
 80071d4:	40020488 	.word	0x40020488
 80071d8:	400204a0 	.word	0x400204a0
 80071dc:	400204b8 	.word	0x400204b8

080071e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a7f      	ldr	r2, [pc, #508]	; (80073fc <DMA_SetConfig+0x21c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d072      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a7d      	ldr	r2, [pc, #500]	; (8007400 <DMA_SetConfig+0x220>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d06d      	beq.n	80072ea <DMA_SetConfig+0x10a>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a7c      	ldr	r2, [pc, #496]	; (8007404 <DMA_SetConfig+0x224>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d068      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a7a      	ldr	r2, [pc, #488]	; (8007408 <DMA_SetConfig+0x228>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d063      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a79      	ldr	r2, [pc, #484]	; (800740c <DMA_SetConfig+0x22c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d05e      	beq.n	80072ea <DMA_SetConfig+0x10a>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a77      	ldr	r2, [pc, #476]	; (8007410 <DMA_SetConfig+0x230>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d059      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a76      	ldr	r2, [pc, #472]	; (8007414 <DMA_SetConfig+0x234>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d054      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a74      	ldr	r2, [pc, #464]	; (8007418 <DMA_SetConfig+0x238>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d04f      	beq.n	80072ea <DMA_SetConfig+0x10a>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a73      	ldr	r2, [pc, #460]	; (800741c <DMA_SetConfig+0x23c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d04a      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a71      	ldr	r2, [pc, #452]	; (8007420 <DMA_SetConfig+0x240>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d045      	beq.n	80072ea <DMA_SetConfig+0x10a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a70      	ldr	r2, [pc, #448]	; (8007424 <DMA_SetConfig+0x244>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d040      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6e      	ldr	r2, [pc, #440]	; (8007428 <DMA_SetConfig+0x248>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d03b      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a6d      	ldr	r2, [pc, #436]	; (800742c <DMA_SetConfig+0x24c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d036      	beq.n	80072ea <DMA_SetConfig+0x10a>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a6b      	ldr	r2, [pc, #428]	; (8007430 <DMA_SetConfig+0x250>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d031      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a6a      	ldr	r2, [pc, #424]	; (8007434 <DMA_SetConfig+0x254>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d02c      	beq.n	80072ea <DMA_SetConfig+0x10a>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a68      	ldr	r2, [pc, #416]	; (8007438 <DMA_SetConfig+0x258>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d027      	beq.n	80072ea <DMA_SetConfig+0x10a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a67      	ldr	r2, [pc, #412]	; (800743c <DMA_SetConfig+0x25c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d022      	beq.n	80072ea <DMA_SetConfig+0x10a>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a65      	ldr	r2, [pc, #404]	; (8007440 <DMA_SetConfig+0x260>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01d      	beq.n	80072ea <DMA_SetConfig+0x10a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a64      	ldr	r2, [pc, #400]	; (8007444 <DMA_SetConfig+0x264>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d018      	beq.n	80072ea <DMA_SetConfig+0x10a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a62      	ldr	r2, [pc, #392]	; (8007448 <DMA_SetConfig+0x268>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <DMA_SetConfig+0x10a>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a61      	ldr	r2, [pc, #388]	; (800744c <DMA_SetConfig+0x26c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <DMA_SetConfig+0x10a>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a5f      	ldr	r2, [pc, #380]	; (8007450 <DMA_SetConfig+0x270>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <DMA_SetConfig+0x10a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a5e      	ldr	r2, [pc, #376]	; (8007454 <DMA_SetConfig+0x274>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <DMA_SetConfig+0x10a>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5c      	ldr	r2, [pc, #368]	; (8007458 <DMA_SetConfig+0x278>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d101      	bne.n	80072ee <DMA_SetConfig+0x10e>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <DMA_SetConfig+0x110>
 80072ee:	2300      	movs	r3, #0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00d      	beq.n	8007310 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800730e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a39      	ldr	r2, [pc, #228]	; (80073fc <DMA_SetConfig+0x21c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d04a      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a38      	ldr	r2, [pc, #224]	; (8007400 <DMA_SetConfig+0x220>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d045      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a36      	ldr	r2, [pc, #216]	; (8007404 <DMA_SetConfig+0x224>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d040      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a35      	ldr	r2, [pc, #212]	; (8007408 <DMA_SetConfig+0x228>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d03b      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a33      	ldr	r2, [pc, #204]	; (800740c <DMA_SetConfig+0x22c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d036      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a32      	ldr	r2, [pc, #200]	; (8007410 <DMA_SetConfig+0x230>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d031      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a30      	ldr	r2, [pc, #192]	; (8007414 <DMA_SetConfig+0x234>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d02c      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2f      	ldr	r2, [pc, #188]	; (8007418 <DMA_SetConfig+0x238>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d027      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2d      	ldr	r2, [pc, #180]	; (800741c <DMA_SetConfig+0x23c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d022      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <DMA_SetConfig+0x240>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d01d      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2a      	ldr	r2, [pc, #168]	; (8007424 <DMA_SetConfig+0x244>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d018      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a29      	ldr	r2, [pc, #164]	; (8007428 <DMA_SetConfig+0x248>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d013      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a27      	ldr	r2, [pc, #156]	; (800742c <DMA_SetConfig+0x24c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00e      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a26      	ldr	r2, [pc, #152]	; (8007430 <DMA_SetConfig+0x250>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d009      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a24      	ldr	r2, [pc, #144]	; (8007434 <DMA_SetConfig+0x254>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d004      	beq.n	80073b0 <DMA_SetConfig+0x1d0>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a23      	ldr	r2, [pc, #140]	; (8007438 <DMA_SetConfig+0x258>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d101      	bne.n	80073b4 <DMA_SetConfig+0x1d4>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <DMA_SetConfig+0x1d6>
 80073b4:	2300      	movs	r3, #0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d059      	beq.n	800746e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	223f      	movs	r2, #63	; 0x3f
 80073c4:	409a      	lsls	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b40      	cmp	r3, #64	; 0x40
 80073e8:	d138      	bne.n	800745c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073fa:	e086      	b.n	800750a <DMA_SetConfig+0x32a>
 80073fc:	40020010 	.word	0x40020010
 8007400:	40020028 	.word	0x40020028
 8007404:	40020040 	.word	0x40020040
 8007408:	40020058 	.word	0x40020058
 800740c:	40020070 	.word	0x40020070
 8007410:	40020088 	.word	0x40020088
 8007414:	400200a0 	.word	0x400200a0
 8007418:	400200b8 	.word	0x400200b8
 800741c:	40020410 	.word	0x40020410
 8007420:	40020428 	.word	0x40020428
 8007424:	40020440 	.word	0x40020440
 8007428:	40020458 	.word	0x40020458
 800742c:	40020470 	.word	0x40020470
 8007430:	40020488 	.word	0x40020488
 8007434:	400204a0 	.word	0x400204a0
 8007438:	400204b8 	.word	0x400204b8
 800743c:	58025408 	.word	0x58025408
 8007440:	5802541c 	.word	0x5802541c
 8007444:	58025430 	.word	0x58025430
 8007448:	58025444 	.word	0x58025444
 800744c:	58025458 	.word	0x58025458
 8007450:	5802546c 	.word	0x5802546c
 8007454:	58025480 	.word	0x58025480
 8007458:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	60da      	str	r2, [r3, #12]
}
 800746c:	e04d      	b.n	800750a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a29      	ldr	r2, [pc, #164]	; (8007518 <DMA_SetConfig+0x338>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d022      	beq.n	80074be <DMA_SetConfig+0x2de>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a27      	ldr	r2, [pc, #156]	; (800751c <DMA_SetConfig+0x33c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d01d      	beq.n	80074be <DMA_SetConfig+0x2de>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a26      	ldr	r2, [pc, #152]	; (8007520 <DMA_SetConfig+0x340>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d018      	beq.n	80074be <DMA_SetConfig+0x2de>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a24      	ldr	r2, [pc, #144]	; (8007524 <DMA_SetConfig+0x344>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d013      	beq.n	80074be <DMA_SetConfig+0x2de>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a23      	ldr	r2, [pc, #140]	; (8007528 <DMA_SetConfig+0x348>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00e      	beq.n	80074be <DMA_SetConfig+0x2de>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a21      	ldr	r2, [pc, #132]	; (800752c <DMA_SetConfig+0x34c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d009      	beq.n	80074be <DMA_SetConfig+0x2de>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a20      	ldr	r2, [pc, #128]	; (8007530 <DMA_SetConfig+0x350>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d004      	beq.n	80074be <DMA_SetConfig+0x2de>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <DMA_SetConfig+0x354>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d101      	bne.n	80074c2 <DMA_SetConfig+0x2e2>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <DMA_SetConfig+0x2e4>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d020      	beq.n	800750a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2201      	movs	r2, #1
 80074d2:	409a      	lsls	r2, r3
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	d108      	bne.n	80074fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	60da      	str	r2, [r3, #12]
}
 80074f8:	e007      	b.n	800750a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	60da      	str	r2, [r3, #12]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	58025408 	.word	0x58025408
 800751c:	5802541c 	.word	0x5802541c
 8007520:	58025430 	.word	0x58025430
 8007524:	58025444 	.word	0x58025444
 8007528:	58025458 	.word	0x58025458
 800752c:	5802546c 	.word	0x5802546c
 8007530:	58025480 	.word	0x58025480
 8007534:	58025494 	.word	0x58025494

08007538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a42      	ldr	r2, [pc, #264]	; (8007650 <DMA_CalcBaseAndBitshift+0x118>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d04a      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a41      	ldr	r2, [pc, #260]	; (8007654 <DMA_CalcBaseAndBitshift+0x11c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d045      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a3f      	ldr	r2, [pc, #252]	; (8007658 <DMA_CalcBaseAndBitshift+0x120>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d040      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a3e      	ldr	r2, [pc, #248]	; (800765c <DMA_CalcBaseAndBitshift+0x124>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d03b      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a3c      	ldr	r2, [pc, #240]	; (8007660 <DMA_CalcBaseAndBitshift+0x128>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d036      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a3b      	ldr	r2, [pc, #236]	; (8007664 <DMA_CalcBaseAndBitshift+0x12c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d031      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a39      	ldr	r2, [pc, #228]	; (8007668 <DMA_CalcBaseAndBitshift+0x130>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d02c      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a38      	ldr	r2, [pc, #224]	; (800766c <DMA_CalcBaseAndBitshift+0x134>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d027      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a36      	ldr	r2, [pc, #216]	; (8007670 <DMA_CalcBaseAndBitshift+0x138>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d022      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a35      	ldr	r2, [pc, #212]	; (8007674 <DMA_CalcBaseAndBitshift+0x13c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d01d      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a33      	ldr	r2, [pc, #204]	; (8007678 <DMA_CalcBaseAndBitshift+0x140>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d018      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a32      	ldr	r2, [pc, #200]	; (800767c <DMA_CalcBaseAndBitshift+0x144>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a30      	ldr	r2, [pc, #192]	; (8007680 <DMA_CalcBaseAndBitshift+0x148>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00e      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a2f      	ldr	r2, [pc, #188]	; (8007684 <DMA_CalcBaseAndBitshift+0x14c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d009      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2d      	ldr	r2, [pc, #180]	; (8007688 <DMA_CalcBaseAndBitshift+0x150>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <DMA_CalcBaseAndBitshift+0xa8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2c      	ldr	r2, [pc, #176]	; (800768c <DMA_CalcBaseAndBitshift+0x154>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d101      	bne.n	80075e4 <DMA_CalcBaseAndBitshift+0xac>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e000      	b.n	80075e6 <DMA_CalcBaseAndBitshift+0xae>
 80075e4:	2300      	movs	r3, #0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d024      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	3b10      	subs	r3, #16
 80075f2:	4a27      	ldr	r2, [pc, #156]	; (8007690 <DMA_CalcBaseAndBitshift+0x158>)
 80075f4:	fba2 2303 	umull	r2, r3, r2, r3
 80075f8:	091b      	lsrs	r3, r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	4a24      	ldr	r2, [pc, #144]	; (8007694 <DMA_CalcBaseAndBitshift+0x15c>)
 8007604:	5cd3      	ldrb	r3, [r2, r3]
 8007606:	461a      	mov	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b03      	cmp	r3, #3
 8007610:	d908      	bls.n	8007624 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	4b1f      	ldr	r3, [pc, #124]	; (8007698 <DMA_CalcBaseAndBitshift+0x160>)
 800761a:	4013      	ands	r3, r2
 800761c:	1d1a      	adds	r2, r3, #4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	659a      	str	r2, [r3, #88]	; 0x58
 8007622:	e00d      	b.n	8007640 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <DMA_CalcBaseAndBitshift+0x160>)
 800762c:	4013      	ands	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6593      	str	r3, [r2, #88]	; 0x58
 8007632:	e005      	b.n	8007640 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007644:	4618      	mov	r0, r3
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	40020010 	.word	0x40020010
 8007654:	40020028 	.word	0x40020028
 8007658:	40020040 	.word	0x40020040
 800765c:	40020058 	.word	0x40020058
 8007660:	40020070 	.word	0x40020070
 8007664:	40020088 	.word	0x40020088
 8007668:	400200a0 	.word	0x400200a0
 800766c:	400200b8 	.word	0x400200b8
 8007670:	40020410 	.word	0x40020410
 8007674:	40020428 	.word	0x40020428
 8007678:	40020440 	.word	0x40020440
 800767c:	40020458 	.word	0x40020458
 8007680:	40020470 	.word	0x40020470
 8007684:	40020488 	.word	0x40020488
 8007688:	400204a0 	.word	0x400204a0
 800768c:	400204b8 	.word	0x400204b8
 8007690:	aaaaaaab 	.word	0xaaaaaaab
 8007694:	0800e12c 	.word	0x0800e12c
 8007698:	fffffc00 	.word	0xfffffc00

0800769c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d120      	bne.n	80076f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d858      	bhi.n	800776a <DMA_CheckFifoParam+0xce>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <DMA_CheckFifoParam+0x24>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076e3 	.word	0x080076e3
 80076c8:	080076d1 	.word	0x080076d1
 80076cc:	0800776b 	.word	0x0800776b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d048      	beq.n	800776e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076e0:	e045      	b.n	800776e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076ea:	d142      	bne.n	8007772 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076f0:	e03f      	b.n	8007772 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fa:	d123      	bne.n	8007744 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	2b03      	cmp	r3, #3
 8007702:	d838      	bhi.n	8007776 <DMA_CheckFifoParam+0xda>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <DMA_CheckFifoParam+0x70>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	0800771d 	.word	0x0800771d
 8007710:	08007723 	.word	0x08007723
 8007714:	0800771d 	.word	0x0800771d
 8007718:	08007735 	.word	0x08007735
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
        break;
 8007720:	e030      	b.n	8007784 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d025      	beq.n	800777a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007732:	e022      	b.n	800777a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800773c:	d11f      	bne.n	800777e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007742:	e01c      	b.n	800777e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	2b02      	cmp	r3, #2
 800774a:	d902      	bls.n	8007752 <DMA_CheckFifoParam+0xb6>
 800774c:	2b03      	cmp	r3, #3
 800774e:	d003      	beq.n	8007758 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007750:	e018      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	73fb      	strb	r3, [r7, #15]
        break;
 8007756:	e015      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00e      	beq.n	8007782 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	73fb      	strb	r3, [r7, #15]
    break;
 8007768:	e00b      	b.n	8007782 <DMA_CheckFifoParam+0xe6>
        break;
 800776a:	bf00      	nop
 800776c:	e00a      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
        break;
 800776e:	bf00      	nop
 8007770:	e008      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
        break;
 8007772:	bf00      	nop
 8007774:	e006      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
        break;
 8007776:	bf00      	nop
 8007778:	e004      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
        break;
 800777a:	bf00      	nop
 800777c:	e002      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
        break;
 800777e:	bf00      	nop
 8007780:	e000      	b.n	8007784 <DMA_CheckFifoParam+0xe8>
    break;
 8007782:	bf00      	nop
    }
  }

  return status;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop

08007794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a38      	ldr	r2, [pc, #224]	; (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d022      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a36      	ldr	r2, [pc, #216]	; (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d01d      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a35      	ldr	r2, [pc, #212]	; (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d018      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a33      	ldr	r2, [pc, #204]	; (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d013      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a32      	ldr	r2, [pc, #200]	; (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00e      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a30      	ldr	r2, [pc, #192]	; (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d009      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a2f      	ldr	r2, [pc, #188]	; (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d004      	beq.n	80077f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a2d      	ldr	r2, [pc, #180]	; (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d101      	bne.n	80077f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077f6:	2300      	movs	r3, #0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01a      	beq.n	8007832 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	3b08      	subs	r3, #8
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007806:	fba2 2303 	umull	r2, r3, r2, r3
 800780a:	091b      	lsrs	r3, r3, #4
 800780c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4b26      	ldr	r3, [pc, #152]	; (80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	461a      	mov	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a24      	ldr	r2, [pc, #144]	; (80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007820:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2201      	movs	r2, #1
 800782a:	409a      	lsls	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007830:	e024      	b.n	800787c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	3b10      	subs	r3, #16
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	091b      	lsrs	r3, r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d806      	bhi.n	800785a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d902      	bls.n	800785a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3308      	adds	r3, #8
 8007858:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a16      	ldr	r2, [pc, #88]	; (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800786c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2201      	movs	r2, #1
 8007876:	409a      	lsls	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800787c:	bf00      	nop
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr
 8007888:	58025408 	.word	0x58025408
 800788c:	5802541c 	.word	0x5802541c
 8007890:	58025430 	.word	0x58025430
 8007894:	58025444 	.word	0x58025444
 8007898:	58025458 	.word	0x58025458
 800789c:	5802546c 	.word	0x5802546c
 80078a0:	58025480 	.word	0x58025480
 80078a4:	58025494 	.word	0x58025494
 80078a8:	cccccccd 	.word	0xcccccccd
 80078ac:	16009600 	.word	0x16009600
 80078b0:	58025880 	.word	0x58025880
 80078b4:	aaaaaaab 	.word	0xaaaaaaab
 80078b8:	400204b8 	.word	0x400204b8
 80078bc:	4002040f 	.word	0x4002040f
 80078c0:	10008200 	.word	0x10008200
 80078c4:	40020880 	.word	0x40020880

080078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d04a      	beq.n	8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d847      	bhi.n	8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a25      	ldr	r2, [pc, #148]	; (8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d022      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a24      	ldr	r2, [pc, #144]	; (8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d01d      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a22      	ldr	r2, [pc, #136]	; (8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d018      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a21      	ldr	r2, [pc, #132]	; (800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d013      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00e      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d009      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1c      	ldr	r2, [pc, #112]	; (8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a1b      	ldr	r2, [pc, #108]	; (800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d101      	bne.n	8007938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007938:	2300      	movs	r3, #0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4b17      	ldr	r3, [pc, #92]	; (80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007950:	671a      	str	r2, [r3, #112]	; 0x70
 8007952:	e009      	b.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a11      	ldr	r2, [pc, #68]	; (80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007966:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3b01      	subs	r3, #1
 800796c:	2201      	movs	r2, #1
 800796e:	409a      	lsls	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	58025408 	.word	0x58025408
 8007984:	5802541c 	.word	0x5802541c
 8007988:	58025430 	.word	0x58025430
 800798c:	58025444 	.word	0x58025444
 8007990:	58025458 	.word	0x58025458
 8007994:	5802546c 	.word	0x5802546c
 8007998:	58025480 	.word	0x58025480
 800799c:	58025494 	.word	0x58025494
 80079a0:	1600963f 	.word	0x1600963f
 80079a4:	58025940 	.word	0x58025940
 80079a8:	1000823f 	.word	0x1000823f
 80079ac:	40020940 	.word	0x40020940

080079b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b089      	sub	sp, #36	; 0x24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079be:	4b86      	ldr	r3, [pc, #536]	; (8007bd8 <HAL_GPIO_Init+0x228>)
 80079c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079c2:	e18c      	b.n	8007cde <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	2101      	movs	r1, #1
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	fa01 f303 	lsl.w	r3, r1, r3
 80079d0:	4013      	ands	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 817e 	beq.w	8007cd8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d005      	beq.n	80079f4 <HAL_GPIO_Init+0x44>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d130      	bne.n	8007a56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2203      	movs	r2, #3
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43db      	mvns	r3, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	4013      	ands	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	f003 0201 	and.w	r2, r3, #1
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d017      	beq.n	8007a92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43db      	mvns	r3, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4013      	ands	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d123      	bne.n	8007ae6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	08da      	lsrs	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3208      	adds	r2, #8
 8007aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	220f      	movs	r2, #15
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43db      	mvns	r3, r3
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	691a      	ldr	r2, [r3, #16]
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	08da      	lsrs	r2, r3, #3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3208      	adds	r2, #8
 8007ae0:	69b9      	ldr	r1, [r7, #24]
 8007ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	2203      	movs	r2, #3
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	43db      	mvns	r3, r3
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	4013      	ands	r3, r2
 8007afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f003 0203 	and.w	r2, r3, #3
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80d8 	beq.w	8007cd8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b28:	4b2c      	ldr	r3, [pc, #176]	; (8007bdc <HAL_GPIO_Init+0x22c>)
 8007b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b2e:	4a2b      	ldr	r2, [pc, #172]	; (8007bdc <HAL_GPIO_Init+0x22c>)
 8007b30:	f043 0302 	orr.w	r3, r3, #2
 8007b34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b38:	4b28      	ldr	r3, [pc, #160]	; (8007bdc <HAL_GPIO_Init+0x22c>)
 8007b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b46:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <HAL_GPIO_Init+0x230>)
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	089b      	lsrs	r3, r3, #2
 8007b4c:	3302      	adds	r3, #2
 8007b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	220f      	movs	r2, #15
 8007b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b62:	43db      	mvns	r3, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	4013      	ands	r3, r2
 8007b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <HAL_GPIO_Init+0x234>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d04a      	beq.n	8007c08 <HAL_GPIO_Init+0x258>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <HAL_GPIO_Init+0x238>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d02b      	beq.n	8007bd2 <HAL_GPIO_Init+0x222>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <HAL_GPIO_Init+0x23c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d025      	beq.n	8007bce <HAL_GPIO_Init+0x21e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a1a      	ldr	r2, [pc, #104]	; (8007bf0 <HAL_GPIO_Init+0x240>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d01f      	beq.n	8007bca <HAL_GPIO_Init+0x21a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <HAL_GPIO_Init+0x244>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d019      	beq.n	8007bc6 <HAL_GPIO_Init+0x216>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a18      	ldr	r2, [pc, #96]	; (8007bf8 <HAL_GPIO_Init+0x248>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d013      	beq.n	8007bc2 <HAL_GPIO_Init+0x212>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a17      	ldr	r2, [pc, #92]	; (8007bfc <HAL_GPIO_Init+0x24c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00d      	beq.n	8007bbe <HAL_GPIO_Init+0x20e>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a16      	ldr	r2, [pc, #88]	; (8007c00 <HAL_GPIO_Init+0x250>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d007      	beq.n	8007bba <HAL_GPIO_Init+0x20a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <HAL_GPIO_Init+0x254>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d101      	bne.n	8007bb6 <HAL_GPIO_Init+0x206>
 8007bb2:	2309      	movs	r3, #9
 8007bb4:	e029      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bb6:	230a      	movs	r3, #10
 8007bb8:	e027      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bba:	2307      	movs	r3, #7
 8007bbc:	e025      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bbe:	2306      	movs	r3, #6
 8007bc0:	e023      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bc2:	2305      	movs	r3, #5
 8007bc4:	e021      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	e01f      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e01d      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e01b      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e019      	b.n	8007c0a <HAL_GPIO_Init+0x25a>
 8007bd6:	bf00      	nop
 8007bd8:	58000080 	.word	0x58000080
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	58000400 	.word	0x58000400
 8007be4:	58020000 	.word	0x58020000
 8007be8:	58020400 	.word	0x58020400
 8007bec:	58020800 	.word	0x58020800
 8007bf0:	58020c00 	.word	0x58020c00
 8007bf4:	58021000 	.word	0x58021000
 8007bf8:	58021400 	.word	0x58021400
 8007bfc:	58021800 	.word	0x58021800
 8007c00:	58021c00 	.word	0x58021c00
 8007c04:	58022400 	.word	0x58022400
 8007c08:	2300      	movs	r3, #0
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	f002 0203 	and.w	r2, r2, #3
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	4093      	lsls	r3, r2
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c1a:	4938      	ldr	r1, [pc, #224]	; (8007cfc <HAL_GPIO_Init+0x34c>)
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	089b      	lsrs	r3, r3, #2
 8007c20:	3302      	adds	r3, #2
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	43db      	mvns	r3, r3
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4013      	ands	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	69ba      	ldr	r2, [r7, #24]
 8007c64:	4013      	ands	r3, r2
 8007c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	43db      	mvns	r3, r3
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	4013      	ands	r3, r2
 8007c92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f ae6b 	bne.w	80079c4 <HAL_GPIO_Init+0x14>
  }
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	3724      	adds	r7, #36	; 0x24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	58000400 	.word	0x58000400

08007d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	807b      	strh	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d10:	787b      	ldrb	r3, [r7, #1]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d16:	887a      	ldrh	r2, [r7, #2]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d1c:	e003      	b.n	8007d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	041a      	lsls	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	619a      	str	r2, [r3, #24]
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d3c:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d00a      	beq.n	8007d5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d48:	4b16      	ldr	r3, [pc, #88]	; (8007da4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d001      	beq.n	8007d5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e01f      	b.n	8007d9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e01d      	b.n	8007d9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f023 0207 	bic.w	r2, r3, #7
 8007d66:	490f      	ldr	r1, [pc, #60]	; (8007da4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d6e:	f7fc fec9 	bl	8004b04 <HAL_GetTick>
 8007d72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d74:	e009      	b.n	8007d8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d76:	f7fc fec5 	bl	8004b04 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d84:	d901      	bls.n	8007d8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e007      	b.n	8007d9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d8a:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <HAL_PWREx_ConfigSupply+0x70>)
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d96:	d1ee      	bne.n	8007d76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	58024800 	.word	0x58024800

08007da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08c      	sub	sp, #48	; 0x30
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e39d      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 8087 	beq.w	8007ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dc8:	4b88      	ldr	r3, [pc, #544]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dd2:	4b86      	ldr	r3, [pc, #536]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d007      	beq.n	8007dee <HAL_RCC_OscConfig+0x46>
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	2b18      	cmp	r3, #24
 8007de2:	d110      	bne.n	8007e06 <HAL_RCC_OscConfig+0x5e>
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	f003 0303 	and.w	r3, r3, #3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d10b      	bne.n	8007e06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dee:	4b7f      	ldr	r3, [pc, #508]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d06c      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x12c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d168      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e377      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0e:	d106      	bne.n	8007e1e <HAL_RCC_OscConfig+0x76>
 8007e10:	4b76      	ldr	r3, [pc, #472]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a75      	ldr	r2, [pc, #468]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	e02e      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCC_OscConfig+0x98>
 8007e26:	4b71      	ldr	r3, [pc, #452]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a70      	ldr	r2, [pc, #448]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	4b6e      	ldr	r3, [pc, #440]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a6d      	ldr	r2, [pc, #436]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	e01d      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e48:	d10c      	bne.n	8007e64 <HAL_RCC_OscConfig+0xbc>
 8007e4a:	4b68      	ldr	r3, [pc, #416]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a67      	ldr	r2, [pc, #412]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	4b65      	ldr	r3, [pc, #404]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a64      	ldr	r2, [pc, #400]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	e00b      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e64:	4b61      	ldr	r3, [pc, #388]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a60      	ldr	r2, [pc, #384]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	4b5e      	ldr	r3, [pc, #376]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a5d      	ldr	r2, [pc, #372]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d013      	beq.n	8007eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fc fe3e 	bl	8004b04 <HAL_GetTick>
 8007e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e8c:	f7fc fe3a 	bl	8004b04 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b64      	cmp	r3, #100	; 0x64
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e32b      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e9e:	4b53      	ldr	r3, [pc, #332]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0f0      	beq.n	8007e8c <HAL_RCC_OscConfig+0xe4>
 8007eaa:	e014      	b.n	8007ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eac:	f7fc fe2a 	bl	8004b04 <HAL_GetTick>
 8007eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eb4:	f7fc fe26 	bl	8004b04 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b64      	cmp	r3, #100	; 0x64
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e317      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ec6:	4b49      	ldr	r3, [pc, #292]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x10c>
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 808c 	beq.w	8007ffc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ee4:	4b41      	ldr	r3, [pc, #260]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007eee:	4b3f      	ldr	r3, [pc, #252]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d007      	beq.n	8007f0a <HAL_RCC_OscConfig+0x162>
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	2b18      	cmp	r3, #24
 8007efe:	d137      	bne.n	8007f70 <HAL_RCC_OscConfig+0x1c8>
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d132      	bne.n	8007f70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f0a:	4b38      	ldr	r3, [pc, #224]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_RCC_OscConfig+0x17a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e2e9      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f22:	4b32      	ldr	r3, [pc, #200]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f023 0219 	bic.w	r2, r3, #25
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	492f      	ldr	r1, [pc, #188]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f34:	f7fc fde6 	bl	8004b04 <HAL_GetTick>
 8007f38:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f3c:	f7fc fde2 	bl	8004b04 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e2d3      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f4e:	4b27      	ldr	r3, [pc, #156]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f0      	beq.n	8007f3c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f5a:	4b24      	ldr	r3, [pc, #144]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	061b      	lsls	r3, r3, #24
 8007f68:	4920      	ldr	r1, [pc, #128]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f6e:	e045      	b.n	8007ffc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d026      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f78:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f023 0219 	bic.w	r2, r3, #25
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4919      	ldr	r1, [pc, #100]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8a:	f7fc fdbb 	bl	8004b04 <HAL_GetTick>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f90:	e008      	b.n	8007fa4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f92:	f7fc fdb7 	bl	8004b04 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e2a8      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa4:	4b11      	ldr	r3, [pc, #68]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0f0      	beq.n	8007f92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	061b      	lsls	r3, r3, #24
 8007fbe:	490b      	ldr	r1, [pc, #44]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	604b      	str	r3, [r1, #4]
 8007fc4:	e01a      	b.n	8007ffc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a08      	ldr	r2, [pc, #32]	; (8007fec <HAL_RCC_OscConfig+0x244>)
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd2:	f7fc fd97 	bl	8004b04 <HAL_GetTick>
 8007fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fd8:	e00a      	b.n	8007ff0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fda:	f7fc fd93 	bl	8004b04 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d903      	bls.n	8007ff0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e284      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
 8007fec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ff0:	4b96      	ldr	r3, [pc, #600]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1ee      	bne.n	8007fda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b00      	cmp	r3, #0
 8008006:	d06a      	beq.n	80080de <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008008:	4b90      	ldr	r3, [pc, #576]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008010:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008012:	4b8e      	ldr	r3, [pc, #568]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b08      	cmp	r3, #8
 800801c:	d007      	beq.n	800802e <HAL_RCC_OscConfig+0x286>
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b18      	cmp	r3, #24
 8008022:	d11b      	bne.n	800805c <HAL_RCC_OscConfig+0x2b4>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	2b01      	cmp	r3, #1
 800802c:	d116      	bne.n	800805c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800802e:	4b87      	ldr	r3, [pc, #540]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_RCC_OscConfig+0x29e>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d001      	beq.n	8008046 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e257      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008046:	4b81      	ldr	r3, [pc, #516]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	061b      	lsls	r3, r3, #24
 8008054:	497d      	ldr	r1, [pc, #500]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008056:	4313      	orrs	r3, r2
 8008058:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800805a:	e040      	b.n	80080de <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d023      	beq.n	80080ac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008064:	4b79      	ldr	r3, [pc, #484]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a78      	ldr	r2, [pc, #480]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc fd48 	bl	8004b04 <HAL_GetTick>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008078:	f7fc fd44 	bl	8004b04 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e235      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800808a:	4b70      	ldr	r3, [pc, #448]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f0      	beq.n	8008078 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008096:	4b6d      	ldr	r3, [pc, #436]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	061b      	lsls	r3, r3, #24
 80080a4:	4969      	ldr	r1, [pc, #420]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60cb      	str	r3, [r1, #12]
 80080aa:	e018      	b.n	80080de <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080ac:	4b67      	ldr	r3, [pc, #412]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a66      	ldr	r2, [pc, #408]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80080b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b8:	f7fc fd24 	bl	8004b04 <HAL_GetTick>
 80080bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080c0:	f7fc fd20 	bl	8004b04 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e211      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080d2:	4b5e      	ldr	r3, [pc, #376]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f0      	bne.n	80080c0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d036      	beq.n	8008158 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d019      	beq.n	8008126 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080f2:	4b56      	ldr	r3, [pc, #344]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80080f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f6:	4a55      	ldr	r2, [pc, #340]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80080f8:	f043 0301 	orr.w	r3, r3, #1
 80080fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fe:	f7fc fd01 	bl	8004b04 <HAL_GetTick>
 8008102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008104:	e008      	b.n	8008118 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008106:	f7fc fcfd 	bl	8004b04 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	2b02      	cmp	r3, #2
 8008112:	d901      	bls.n	8008118 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e1ee      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008118:	4b4c      	ldr	r3, [pc, #304]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800811a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0f0      	beq.n	8008106 <HAL_RCC_OscConfig+0x35e>
 8008124:	e018      	b.n	8008158 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008126:	4b49      	ldr	r3, [pc, #292]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800812a:	4a48      	ldr	r2, [pc, #288]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008132:	f7fc fce7 	bl	8004b04 <HAL_GetTick>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008138:	e008      	b.n	800814c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800813a:	f7fc fce3 	bl	8004b04 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b02      	cmp	r3, #2
 8008146:	d901      	bls.n	800814c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e1d4      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800814c:	4b3f      	ldr	r3, [pc, #252]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800814e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1f0      	bne.n	800813a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d036      	beq.n	80081d2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d019      	beq.n	80081a0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800816c:	4b37      	ldr	r3, [pc, #220]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a36      	ldr	r2, [pc, #216]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008172:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008176:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008178:	f7fc fcc4 	bl	8004b04 <HAL_GetTick>
 800817c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008180:	f7fc fcc0 	bl	8004b04 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e1b1      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008192:	4b2e      	ldr	r3, [pc, #184]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0f0      	beq.n	8008180 <HAL_RCC_OscConfig+0x3d8>
 800819e:	e018      	b.n	80081d2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081a0:	4b2a      	ldr	r3, [pc, #168]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a29      	ldr	r2, [pc, #164]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80081a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081ac:	f7fc fcaa 	bl	8004b04 <HAL_GetTick>
 80081b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80081b4:	f7fc fca6 	bl	8004b04 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e197      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081c6:	4b21      	ldr	r3, [pc, #132]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f0      	bne.n	80081b4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8086 	beq.w	80082ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081e0:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <HAL_RCC_OscConfig+0x4a8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a1a      	ldr	r2, [pc, #104]	; (8008250 <HAL_RCC_OscConfig+0x4a8>)
 80081e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081ec:	f7fc fc8a 	bl	8004b04 <HAL_GetTick>
 80081f0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081f4:	f7fc fc86 	bl	8004b04 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b64      	cmp	r3, #100	; 0x64
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e177      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008206:	4b12      	ldr	r3, [pc, #72]	; (8008250 <HAL_RCC_OscConfig+0x4a8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820e:	2b00      	cmp	r3, #0
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d106      	bne.n	8008228 <HAL_RCC_OscConfig+0x480>
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800821c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821e:	4a0b      	ldr	r2, [pc, #44]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008220:	f043 0301 	orr.w	r3, r3, #1
 8008224:	6713      	str	r3, [r2, #112]	; 0x70
 8008226:	e032      	b.n	800828e <HAL_RCC_OscConfig+0x4e6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d111      	bne.n	8008254 <HAL_RCC_OscConfig+0x4ac>
 8008230:	4b06      	ldr	r3, [pc, #24]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	4a05      	ldr	r2, [pc, #20]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008236:	f023 0301 	bic.w	r3, r3, #1
 800823a:	6713      	str	r3, [r2, #112]	; 0x70
 800823c:	4b03      	ldr	r3, [pc, #12]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008240:	4a02      	ldr	r2, [pc, #8]	; (800824c <HAL_RCC_OscConfig+0x4a4>)
 8008242:	f023 0304 	bic.w	r3, r3, #4
 8008246:	6713      	str	r3, [r2, #112]	; 0x70
 8008248:	e021      	b.n	800828e <HAL_RCC_OscConfig+0x4e6>
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
 8008250:	58024800 	.word	0x58024800
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2b05      	cmp	r3, #5
 800825a:	d10c      	bne.n	8008276 <HAL_RCC_OscConfig+0x4ce>
 800825c:	4b83      	ldr	r3, [pc, #524]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800825e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008260:	4a82      	ldr	r2, [pc, #520]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008262:	f043 0304 	orr.w	r3, r3, #4
 8008266:	6713      	str	r3, [r2, #112]	; 0x70
 8008268:	4b80      	ldr	r3, [pc, #512]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800826a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826c:	4a7f      	ldr	r2, [pc, #508]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800826e:	f043 0301 	orr.w	r3, r3, #1
 8008272:	6713      	str	r3, [r2, #112]	; 0x70
 8008274:	e00b      	b.n	800828e <HAL_RCC_OscConfig+0x4e6>
 8008276:	4b7d      	ldr	r3, [pc, #500]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	4a7c      	ldr	r2, [pc, #496]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800827c:	f023 0301 	bic.w	r3, r3, #1
 8008280:	6713      	str	r3, [r2, #112]	; 0x70
 8008282:	4b7a      	ldr	r3, [pc, #488]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	4a79      	ldr	r2, [pc, #484]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008288:	f023 0304 	bic.w	r3, r3, #4
 800828c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d015      	beq.n	80082c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008296:	f7fc fc35 	bl	8004b04 <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800829c:	e00a      	b.n	80082b4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800829e:	f7fc fc31 	bl	8004b04 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e120      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082b4:	4b6d      	ldr	r3, [pc, #436]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80082b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0ee      	beq.n	800829e <HAL_RCC_OscConfig+0x4f6>
 80082c0:	e014      	b.n	80082ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c2:	f7fc fc1f 	bl	8004b04 <HAL_GetTick>
 80082c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082c8:	e00a      	b.n	80082e0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ca:	f7fc fc1b 	bl	8004b04 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d8:	4293      	cmp	r3, r2
 80082da:	d901      	bls.n	80082e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e10a      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082e0:	4b62      	ldr	r3, [pc, #392]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1ee      	bne.n	80082ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80ff 	beq.w	80084f4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082f6:	4b5d      	ldr	r3, [pc, #372]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082fe:	2b18      	cmp	r3, #24
 8008300:	f000 80ba 	beq.w	8008478 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b02      	cmp	r3, #2
 800830a:	f040 8095 	bne.w	8008438 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800830e:	4b57      	ldr	r3, [pc, #348]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a56      	ldr	r2, [pc, #344]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831a:	f7fc fbf3 	bl	8004b04 <HAL_GetTick>
 800831e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008322:	f7fc fbef 	bl	8004b04 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e0e0      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008334:	4b4d      	ldr	r3, [pc, #308]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1f0      	bne.n	8008322 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008340:	4b4a      	ldr	r3, [pc, #296]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008344:	4b4a      	ldr	r3, [pc, #296]	; (8008470 <HAL_RCC_OscConfig+0x6c8>)
 8008346:	4013      	ands	r3, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008350:	0112      	lsls	r2, r2, #4
 8008352:	430a      	orrs	r2, r1
 8008354:	4945      	ldr	r1, [pc, #276]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008356:	4313      	orrs	r3, r2
 8008358:	628b      	str	r3, [r1, #40]	; 0x28
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	3b01      	subs	r3, #1
 8008360:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008368:	3b01      	subs	r3, #1
 800836a:	025b      	lsls	r3, r3, #9
 800836c:	b29b      	uxth	r3, r3
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	3b01      	subs	r3, #1
 8008376:	041b      	lsls	r3, r3, #16
 8008378:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008382:	3b01      	subs	r3, #1
 8008384:	061b      	lsls	r3, r3, #24
 8008386:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800838a:	4938      	ldr	r1, [pc, #224]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800838c:	4313      	orrs	r3, r2
 800838e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008390:	4b36      	ldr	r3, [pc, #216]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	4a35      	ldr	r2, [pc, #212]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800839c:	4b33      	ldr	r3, [pc, #204]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800839e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a0:	4b34      	ldr	r3, [pc, #208]	; (8008474 <HAL_RCC_OscConfig+0x6cc>)
 80083a2:	4013      	ands	r3, r2
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083a8:	00d2      	lsls	r2, r2, #3
 80083aa:	4930      	ldr	r1, [pc, #192]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083b0:	4b2e      	ldr	r3, [pc, #184]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	f023 020c 	bic.w	r2, r3, #12
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083bc:	492b      	ldr	r1, [pc, #172]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083c2:	4b2a      	ldr	r3, [pc, #168]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	f023 0202 	bic.w	r2, r3, #2
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ce:	4927      	ldr	r1, [pc, #156]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083d4:	4b25      	ldr	r3, [pc, #148]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	4a24      	ldr	r2, [pc, #144]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e0:	4b22      	ldr	r3, [pc, #136]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a21      	ldr	r2, [pc, #132]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083ec:	4b1f      	ldr	r3, [pc, #124]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	4a1e      	ldr	r2, [pc, #120]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80083f8:	4b1c      	ldr	r3, [pc, #112]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	4a1b      	ldr	r2, [pc, #108]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 80083fe:	f043 0301 	orr.w	r3, r3, #1
 8008402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008404:	4b19      	ldr	r3, [pc, #100]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a18      	ldr	r2, [pc, #96]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800840a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800840e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008410:	f7fc fb78 	bl	8004b04 <HAL_GetTick>
 8008414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008416:	e008      	b.n	800842a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008418:	f7fc fb74 	bl	8004b04 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	2b02      	cmp	r3, #2
 8008424:	d901      	bls.n	800842a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e065      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800842a:	4b10      	ldr	r3, [pc, #64]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d0f0      	beq.n	8008418 <HAL_RCC_OscConfig+0x670>
 8008436:	e05d      	b.n	80084f4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008438:	4b0c      	ldr	r3, [pc, #48]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a0b      	ldr	r2, [pc, #44]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 800843e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008444:	f7fc fb5e 	bl	8004b04 <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800844c:	f7fc fb5a 	bl	8004b04 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e04b      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800845e:	4b03      	ldr	r3, [pc, #12]	; (800846c <HAL_RCC_OscConfig+0x6c4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f0      	bne.n	800844c <HAL_RCC_OscConfig+0x6a4>
 800846a:	e043      	b.n	80084f4 <HAL_RCC_OscConfig+0x74c>
 800846c:	58024400 	.word	0x58024400
 8008470:	fffffc0c 	.word	0xfffffc0c
 8008474:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008478:	4b21      	ldr	r3, [pc, #132]	; (8008500 <HAL_RCC_OscConfig+0x758>)
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800847e:	4b20      	ldr	r3, [pc, #128]	; (8008500 <HAL_RCC_OscConfig+0x758>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	2b01      	cmp	r3, #1
 800848a:	d031      	beq.n	80084f0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f003 0203 	and.w	r2, r3, #3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008496:	429a      	cmp	r2, r3
 8008498:	d12a      	bne.n	80084f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	091b      	lsrs	r3, r3, #4
 800849e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d122      	bne.n	80084f0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d11a      	bne.n	80084f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	0a5b      	lsrs	r3, r3, #9
 80084be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d111      	bne.n	80084f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084da:	429a      	cmp	r2, r3
 80084dc:	d108      	bne.n	80084f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	0e1b      	lsrs	r3, r3, #24
 80084e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d001      	beq.n	80084f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3730      	adds	r7, #48	; 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	58024400 	.word	0x58024400

08008504 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e19c      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008518:	4b8a      	ldr	r3, [pc, #552]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d910      	bls.n	8008548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008526:	4b87      	ldr	r3, [pc, #540]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f023 020f 	bic.w	r2, r3, #15
 800852e:	4985      	ldr	r1, [pc, #532]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	4313      	orrs	r3, r2
 8008534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008536:	4b83      	ldr	r3, [pc, #524]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d001      	beq.n	8008548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e184      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691a      	ldr	r2, [r3, #16]
 8008558:	4b7b      	ldr	r3, [pc, #492]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008560:	429a      	cmp	r2, r3
 8008562:	d908      	bls.n	8008576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008564:	4b78      	ldr	r3, [pc, #480]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	4975      	ldr	r1, [pc, #468]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008572:	4313      	orrs	r3, r2
 8008574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695a      	ldr	r2, [r3, #20]
 8008586:	4b70      	ldr	r3, [pc, #448]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800858e:	429a      	cmp	r2, r3
 8008590:	d908      	bls.n	80085a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008592:	4b6d      	ldr	r3, [pc, #436]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	496a      	ldr	r1, [pc, #424]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d010      	beq.n	80085d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699a      	ldr	r2, [r3, #24]
 80085b4:	4b64      	ldr	r3, [pc, #400]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085bc:	429a      	cmp	r2, r3
 80085be:	d908      	bls.n	80085d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085c0:	4b61      	ldr	r3, [pc, #388]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	495e      	ldr	r1, [pc, #376]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d010      	beq.n	8008600 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	69da      	ldr	r2, [r3, #28]
 80085e2:	4b59      	ldr	r3, [pc, #356]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d908      	bls.n	8008600 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80085ee:	4b56      	ldr	r3, [pc, #344]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	4953      	ldr	r1, [pc, #332]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d010      	beq.n	800862e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	4b4d      	ldr	r3, [pc, #308]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	429a      	cmp	r2, r3
 800861a:	d908      	bls.n	800862e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800861c:	4b4a      	ldr	r3, [pc, #296]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	f023 020f 	bic.w	r2, r3, #15
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4947      	ldr	r1, [pc, #284]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 800862a:	4313      	orrs	r3, r2
 800862c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d055      	beq.n	80086e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800863a:	4b43      	ldr	r3, [pc, #268]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	4940      	ldr	r1, [pc, #256]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008648:	4313      	orrs	r3, r2
 800864a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d107      	bne.n	8008664 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008654:	4b3c      	ldr	r3, [pc, #240]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d121      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e0f6      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d107      	bne.n	800867c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800866c:	4b36      	ldr	r3, [pc, #216]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d115      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e0ea      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d107      	bne.n	8008694 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008684:	4b30      	ldr	r3, [pc, #192]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d109      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0de      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008694:	4b2c      	ldr	r3, [pc, #176]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e0d6      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086a4:	4b28      	ldr	r3, [pc, #160]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f023 0207 	bic.w	r2, r3, #7
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	4925      	ldr	r1, [pc, #148]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b6:	f7fc fa25 	bl	8004b04 <HAL_GetTick>
 80086ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086bc:	e00a      	b.n	80086d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086be:	f7fc fa21 	bl	8004b04 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e0be      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086d4:	4b1c      	ldr	r3, [pc, #112]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d1eb      	bne.n	80086be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d010      	beq.n	8008714 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	429a      	cmp	r2, r3
 8008700:	d208      	bcs.n	8008714 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008702:	4b11      	ldr	r3, [pc, #68]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f023 020f 	bic.w	r2, r3, #15
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	490e      	ldr	r1, [pc, #56]	; (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008710:	4313      	orrs	r3, r2
 8008712:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008714:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d214      	bcs.n	800874c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f023 020f 	bic.w	r2, r3, #15
 800872a:	4906      	ldr	r1, [pc, #24]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	4313      	orrs	r3, r2
 8008730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008732:	4b04      	ldr	r3, [pc, #16]	; (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d005      	beq.n	800874c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e086      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
 8008744:	52002000 	.word	0x52002000
 8008748:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d010      	beq.n	800877a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691a      	ldr	r2, [r3, #16]
 800875c:	4b3f      	ldr	r3, [pc, #252]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008764:	429a      	cmp	r2, r3
 8008766:	d208      	bcs.n	800877a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008768:	4b3c      	ldr	r3, [pc, #240]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	4939      	ldr	r1, [pc, #228]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 8008776:	4313      	orrs	r3, r2
 8008778:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d010      	beq.n	80087a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695a      	ldr	r2, [r3, #20]
 800878a:	4b34      	ldr	r3, [pc, #208]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008792:	429a      	cmp	r2, r3
 8008794:	d208      	bcs.n	80087a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008796:	4b31      	ldr	r3, [pc, #196]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	492e      	ldr	r1, [pc, #184]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0310 	and.w	r3, r3, #16
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d010      	beq.n	80087d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699a      	ldr	r2, [r3, #24]
 80087b8:	4b28      	ldr	r3, [pc, #160]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d208      	bcs.n	80087d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087c4:	4b25      	ldr	r3, [pc, #148]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	4922      	ldr	r1, [pc, #136]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d010      	beq.n	8008804 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69da      	ldr	r2, [r3, #28]
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d208      	bcs.n	8008804 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80087f2:	4b1a      	ldr	r3, [pc, #104]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	4917      	ldr	r1, [pc, #92]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 8008800:	4313      	orrs	r3, r2
 8008802:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008804:	f000 f834 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 8008808:	4602      	mov	r2, r0
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	4912      	ldr	r1, [pc, #72]	; (8008860 <HAL_RCC_ClockConfig+0x35c>)
 8008816:	5ccb      	ldrb	r3, [r1, r3]
 8008818:	f003 031f 	and.w	r3, r3, #31
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
 8008820:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008822:	4b0e      	ldr	r3, [pc, #56]	; (800885c <HAL_RCC_ClockConfig+0x358>)
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	4a0d      	ldr	r2, [pc, #52]	; (8008860 <HAL_RCC_ClockConfig+0x35c>)
 800882c:	5cd3      	ldrb	r3, [r2, r3]
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	fa22 f303 	lsr.w	r3, r2, r3
 8008838:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <HAL_RCC_ClockConfig+0x360>)
 800883a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800883c:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <HAL_RCC_ClockConfig+0x364>)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008842:	4b0a      	ldr	r3, [pc, #40]	; (800886c <HAL_RCC_ClockConfig+0x368>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f7fc f912 	bl	8004a70 <HAL_InitTick>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
 8008860:	0800e11c 	.word	0x0800e11c
 8008864:	24000008 	.word	0x24000008
 8008868:	24000004 	.word	0x24000004
 800886c:	2400000c 	.word	0x2400000c

08008870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	; 0x24
 8008874:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008876:	4bb3      	ldr	r3, [pc, #716]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887e:	2b18      	cmp	r3, #24
 8008880:	f200 8155 	bhi.w	8008b2e <HAL_RCC_GetSysClockFreq+0x2be>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088f1 	.word	0x080088f1
 8008890:	08008b2f 	.word	0x08008b2f
 8008894:	08008b2f 	.word	0x08008b2f
 8008898:	08008b2f 	.word	0x08008b2f
 800889c:	08008b2f 	.word	0x08008b2f
 80088a0:	08008b2f 	.word	0x08008b2f
 80088a4:	08008b2f 	.word	0x08008b2f
 80088a8:	08008b2f 	.word	0x08008b2f
 80088ac:	08008917 	.word	0x08008917
 80088b0:	08008b2f 	.word	0x08008b2f
 80088b4:	08008b2f 	.word	0x08008b2f
 80088b8:	08008b2f 	.word	0x08008b2f
 80088bc:	08008b2f 	.word	0x08008b2f
 80088c0:	08008b2f 	.word	0x08008b2f
 80088c4:	08008b2f 	.word	0x08008b2f
 80088c8:	08008b2f 	.word	0x08008b2f
 80088cc:	0800891d 	.word	0x0800891d
 80088d0:	08008b2f 	.word	0x08008b2f
 80088d4:	08008b2f 	.word	0x08008b2f
 80088d8:	08008b2f 	.word	0x08008b2f
 80088dc:	08008b2f 	.word	0x08008b2f
 80088e0:	08008b2f 	.word	0x08008b2f
 80088e4:	08008b2f 	.word	0x08008b2f
 80088e8:	08008b2f 	.word	0x08008b2f
 80088ec:	08008923 	.word	0x08008923
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088f0:	4b94      	ldr	r3, [pc, #592]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088fc:	4b91      	ldr	r3, [pc, #580]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	08db      	lsrs	r3, r3, #3
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	4a90      	ldr	r2, [pc, #576]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008908:	fa22 f303 	lsr.w	r3, r2, r3
 800890c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800890e:	e111      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008910:	4b8d      	ldr	r3, [pc, #564]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008912:	61bb      	str	r3, [r7, #24]
    break;
 8008914:	e10e      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008916:	4b8d      	ldr	r3, [pc, #564]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008918:	61bb      	str	r3, [r7, #24]
    break;
 800891a:	e10b      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800891c:	4b8c      	ldr	r3, [pc, #560]	; (8008b50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800891e:	61bb      	str	r3, [r7, #24]
    break;
 8008920:	e108      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008922:	4b88      	ldr	r3, [pc, #544]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800892c:	4b85      	ldr	r3, [pc, #532]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008930:	091b      	lsrs	r3, r3, #4
 8008932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008936:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008938:	4b82      	ldr	r3, [pc, #520]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008942:	4b80      	ldr	r3, [pc, #512]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	08db      	lsrs	r3, r3, #3
 8008948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	fb02 f303 	mul.w	r3, r2, r3
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80e1 	beq.w	8008b28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b02      	cmp	r3, #2
 800896a:	f000 8083 	beq.w	8008a74 <HAL_RCC_GetSysClockFreq+0x204>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b02      	cmp	r3, #2
 8008972:	f200 80a1 	bhi.w	8008ab8 <HAL_RCC_GetSysClockFreq+0x248>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_RCC_GetSysClockFreq+0x114>
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d056      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008982:	e099      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008984:	4b6f      	ldr	r3, [pc, #444]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02d      	beq.n	80089ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008990:	4b6c      	ldr	r3, [pc, #432]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	08db      	lsrs	r3, r3, #3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	4a6b      	ldr	r2, [pc, #428]	; (8008b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b62      	ldr	r3, [pc, #392]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80089ea:	e087      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008b58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b51      	ldr	r3, [pc, #324]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2e:	e065      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b40      	ldr	r3, [pc, #256]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a72:	e043      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008b60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b2f      	ldr	r3, [pc, #188]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ab6:	e021      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ade:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008afa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008afc:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	0a5b      	lsrs	r3, r3, #9
 8008b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b06:	3301      	adds	r3, #1
 8008b08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b20:	ee17 3a90 	vmov	r3, s15
 8008b24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008b26:	e005      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
    break;
 8008b2c:	e002      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008b2e:	4b07      	ldr	r3, [pc, #28]	; (8008b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b30:	61bb      	str	r3, [r7, #24]
    break;
 8008b32:	bf00      	nop
  }

  return sysclockfreq;
 8008b34:	69bb      	ldr	r3, [r7, #24]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3724      	adds	r7, #36	; 0x24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	58024400 	.word	0x58024400
 8008b48:	03d09000 	.word	0x03d09000
 8008b4c:	003d0900 	.word	0x003d0900
 8008b50:	007a1200 	.word	0x007a1200
 8008b54:	46000000 	.word	0x46000000
 8008b58:	4c742400 	.word	0x4c742400
 8008b5c:	4a742400 	.word	0x4a742400
 8008b60:	4af42400 	.word	0x4af42400

08008b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b6a:	f7ff fe81 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	f003 030f 	and.w	r3, r3, #15
 8008b7a:	490f      	ldr	r1, [pc, #60]	; (8008bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b7c:	5ccb      	ldrb	r3, [r1, r3]
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	fa22 f303 	lsr.w	r3, r2, r3
 8008b86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	4a09      	ldr	r2, [pc, #36]	; (8008bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b92:	5cd3      	ldrb	r3, [r2, r3]
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9e:	4a07      	ldr	r2, [pc, #28]	; (8008bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8008ba0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ba2:	4a07      	ldr	r2, [pc, #28]	; (8008bc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ba8:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8008baa:	681b      	ldr	r3, [r3, #0]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	0800e11c 	.word	0x0800e11c
 8008bbc:	24000008 	.word	0x24000008
 8008bc0:	24000004 	.word	0x24000004

08008bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bc8:	f7ff ffcc 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	4904      	ldr	r1, [pc, #16]	; (8008bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bda:	5ccb      	ldrb	r3, [r1, r3]
 8008bdc:	f003 031f 	and.w	r3, r3, #31
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	58024400 	.word	0x58024400
 8008bec:	0800e11c 	.word	0x0800e11c

08008bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bf4:	f7ff ffb6 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	4904      	ldr	r1, [pc, #16]	; (8008c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c06:	5ccb      	ldrb	r3, [r1, r3]
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	58024400 	.word	0x58024400
 8008c18:	0800e11c 	.word	0x0800e11c

08008c1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c24:	2300      	movs	r3, #0
 8008c26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c28:	2300      	movs	r3, #0
 8008c2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d03f      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c40:	d02a      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c46:	d824      	bhi.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c4c:	d018      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c52:	d81e      	bhi.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c5c:	d007      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008c5e:	e018      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c60:	4ba4      	ldr	r3, [pc, #656]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	4aa3      	ldr	r2, [pc, #652]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c6c:	e015      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3304      	adds	r3, #4
 8008c72:	2102      	movs	r1, #2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f989 	bl	8009f8c <RCCEx_PLL2_Config>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c7e:	e00c      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3324      	adds	r3, #36	; 0x24
 8008c84:	2102      	movs	r1, #2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 fa32 	bl	800a0f0 <RCCEx_PLL3_Config>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c90:	e003      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
      break;
 8008c96:	e000      	b.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ca0:	4b94      	ldr	r3, [pc, #592]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cac:	4991      	ldr	r1, [pc, #580]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	650b      	str	r3, [r1, #80]	; 0x50
 8008cb2:	e001      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d03d      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d826      	bhi.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008ce9 	.word	0x08008ce9
 8008cd8:	08008cf7 	.word	0x08008cf7
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	08008d21 	.word	0x08008d21
 8008ce4:	08008d21 	.word	0x08008d21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ce8:	4b82      	ldr	r3, [pc, #520]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	4a81      	ldr	r2, [pc, #516]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cf4:	e015      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 f945 	bl	8009f8c <RCCEx_PLL2_Config>
 8008d02:	4603      	mov	r3, r0
 8008d04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d06:	e00c      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3324      	adds	r3, #36	; 0x24
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 f9ee 	bl	800a0f0 <RCCEx_PLL3_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d18:	e003      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d1e:	e000      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d22:	7dfb      	ldrb	r3, [r7, #23]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d28:	4b72      	ldr	r3, [pc, #456]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2c:	f023 0207 	bic.w	r2, r3, #7
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d34:	496f      	ldr	r1, [pc, #444]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	650b      	str	r3, [r1, #80]	; 0x50
 8008d3a:	e001      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d051      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d56:	d036      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d58:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d5c:	d830      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d62:	d032      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d68:	d82a      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d6e:	d02e      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008d70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d74:	d824      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d7a:	d018      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d80:	d81e      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d8a:	d007      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008d8c:	e018      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d8e:	4b59      	ldr	r3, [pc, #356]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	4a58      	ldr	r2, [pc, #352]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d9a:	e019      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	2100      	movs	r1, #0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 f8f2 	bl	8009f8c <RCCEx_PLL2_Config>
 8008da8:	4603      	mov	r3, r0
 8008daa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dac:	e010      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3324      	adds	r3, #36	; 0x24
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 f99b 	bl	800a0f0 <RCCEx_PLL3_Config>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dbe:	e007      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc4:	e004      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e002      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e000      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dd6:	4b47      	ldr	r3, [pc, #284]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dda:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008de4:	4943      	ldr	r1, [pc, #268]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	658b      	str	r3, [r1, #88]	; 0x58
 8008dea:	e001      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dec:	7dfb      	ldrb	r3, [r7, #23]
 8008dee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d051      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e06:	d036      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008e08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e0c:	d830      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e12:	d032      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e18:	d82a      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e1e:	d02e      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008e20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e24:	d824      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e2a:	d018      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e30:	d81e      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008e36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e3a:	d007      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008e3c:	e018      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3e:	4b2d      	ldr	r3, [pc, #180]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	4a2c      	ldr	r2, [pc, #176]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e4a:	e019      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 f89a 	bl	8009f8c <RCCEx_PLL2_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e5c:	e010      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3324      	adds	r3, #36	; 0x24
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f943 	bl	800a0f0 <RCCEx_PLL3_Config>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e6e:	e007      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
      break;
 8008e74:	e004      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e76:	bf00      	nop
 8008e78:	e002      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e7a:	bf00      	nop
 8008e7c:	e000      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e86:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e94:	4917      	ldr	r1, [pc, #92]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	658b      	str	r3, [r1, #88]	; 0x58
 8008e9a:	e001      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d035      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eb0:	2b30      	cmp	r3, #48	; 0x30
 8008eb2:	d01c      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008eb4:	2b30      	cmp	r3, #48	; 0x30
 8008eb6:	d817      	bhi.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d00c      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d813      	bhi.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d019      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008ec4:	2b10      	cmp	r3, #16
 8008ec6:	d10f      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008ed4:	e011      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3304      	adds	r3, #4
 8008eda:	2102      	movs	r1, #2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f001 f855 	bl	8009f8c <RCCEx_PLL2_Config>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008ee6:	e008      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	75fb      	strb	r3, [r7, #23]
      break;
 8008eec:	e005      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008eee:	bf00      	nop
 8008ef0:	e003      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
      break;
 8008ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008f00:	4ba3      	ldr	r3, [pc, #652]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f0c:	49a0      	ldr	r1, [pc, #640]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f12:	e001      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d047      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f2c:	d030      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008f2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f32:	d82a      	bhi.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f38:	d02c      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008f3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f3e:	d824      	bhi.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f44:	d018      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f4a:	d81e      	bhi.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d003      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f54:	d007      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008f56:	e018      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f58:	4b8d      	ldr	r3, [pc, #564]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a8c      	ldr	r2, [pc, #560]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f64:	e017      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 f80d 	bl	8009f8c <RCCEx_PLL2_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f76:	e00e      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3324      	adds	r3, #36	; 0x24
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 f8b6 	bl	800a0f0 <RCCEx_PLL3_Config>
 8008f84:	4603      	mov	r3, r0
 8008f86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008f88:	e005      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f8e:	e002      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f90:	bf00      	nop
 8008f92:	e000      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f9c:	4b7c      	ldr	r3, [pc, #496]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa8:	4979      	ldr	r1, [pc, #484]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	650b      	str	r3, [r1, #80]	; 0x50
 8008fae:	e001      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
 8008fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d049      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fc8:	d02e      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fce:	d828      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fd4:	d02a      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008fd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fda:	d822      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fe0:	d026      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008fe2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fe6:	d81c      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fec:	d010      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff2:	d816      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01d      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ffc:	d111      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3304      	adds	r3, #4
 8009002:	2101      	movs	r1, #1
 8009004:	4618      	mov	r0, r3
 8009006:	f000 ffc1 	bl	8009f8c <RCCEx_PLL2_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800900e:	e012      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3324      	adds	r3, #36	; 0x24
 8009014:	2101      	movs	r1, #1
 8009016:	4618      	mov	r0, r3
 8009018:	f001 f86a 	bl	800a0f0 <RCCEx_PLL3_Config>
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009020:	e009      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
      break;
 8009026:	e006      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009028:	bf00      	nop
 800902a:	e004      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800902c:	bf00      	nop
 800902e:	e002      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009030:	bf00      	nop
 8009032:	e000      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d109      	bne.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800903c:	4b54      	ldr	r3, [pc, #336]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800903e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009040:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009048:	4951      	ldr	r1, [pc, #324]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800904a:	4313      	orrs	r3, r2
 800904c:	650b      	str	r3, [r1, #80]	; 0x50
 800904e:	e001      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d04b      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800906a:	d02e      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800906c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009070:	d828      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009076:	d02a      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907c:	d822      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800907e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009082:	d026      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009084:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009088:	d81c      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800908a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908e:	d010      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009094:	d816      	bhi.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d01d      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800909a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800909e:	d111      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3304      	adds	r3, #4
 80090a4:	2101      	movs	r1, #1
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 ff70 	bl	8009f8c <RCCEx_PLL2_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090b0:	e012      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3324      	adds	r3, #36	; 0x24
 80090b6:	2101      	movs	r1, #1
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 f819 	bl	800a0f0 <RCCEx_PLL3_Config>
 80090be:	4603      	mov	r3, r0
 80090c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80090c2:	e009      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	e006      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090ca:	bf00      	nop
 80090cc:	e004      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090ce:	bf00      	nop
 80090d0:	e002      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090d2:	bf00      	nop
 80090d4:	e000      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80090d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090de:	4b2c      	ldr	r3, [pc, #176]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090ec:	4928      	ldr	r1, [pc, #160]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	658b      	str	r3, [r1, #88]	; 0x58
 80090f2:	e001      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d02f      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800910c:	d00e      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800910e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009112:	d814      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d015      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800911c:	d10f      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800911e:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	4a1b      	ldr	r2, [pc, #108]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800912a:	e00c      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3304      	adds	r3, #4
 8009130:	2101      	movs	r1, #1
 8009132:	4618      	mov	r0, r3
 8009134:	f000 ff2a 	bl	8009f8c <RCCEx_PLL2_Config>
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800913c:	e003      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	75fb      	strb	r3, [r7, #23]
      break;
 8009142:	e000      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800914c:	4b10      	ldr	r3, [pc, #64]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800914e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009150:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009158:	490d      	ldr	r1, [pc, #52]	; (8009190 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800915a:	4313      	orrs	r3, r2
 800915c:	650b      	str	r3, [r1, #80]	; 0x50
 800915e:	e001      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d034      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009174:	2b03      	cmp	r3, #3
 8009176:	d81d      	bhi.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	080091bb 	.word	0x080091bb
 8009184:	08009195 	.word	0x08009195
 8009188:	080091a3 	.word	0x080091a3
 800918c:	080091bb 	.word	0x080091bb
 8009190:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009194:	4bb1      	ldr	r3, [pc, #708]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009198:	4ab0      	ldr	r2, [pc, #704]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800919a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800919e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091a0:	e00c      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3304      	adds	r3, #4
 80091a6:	2102      	movs	r1, #2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 feef 	bl	8009f8c <RCCEx_PLL2_Config>
 80091ae:	4603      	mov	r3, r0
 80091b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091b2:	e003      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	75fb      	strb	r3, [r7, #23]
      break;
 80091b8:	e000      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80091ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091c2:	4ba6      	ldr	r3, [pc, #664]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c6:	f023 0203 	bic.w	r2, r3, #3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ce:	49a3      	ldr	r1, [pc, #652]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091d4:	e001      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8086 	beq.w	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091e8:	4b9d      	ldr	r3, [pc, #628]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a9c      	ldr	r2, [pc, #624]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80091ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091f4:	f7fb fc86 	bl	8004b04 <HAL_GetTick>
 80091f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091fa:	e009      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091fc:	f7fb fc82 	bl	8004b04 <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	2b64      	cmp	r3, #100	; 0x64
 8009208:	d902      	bls.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	75fb      	strb	r3, [r7, #23]
        break;
 800920e:	e005      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009210:	4b93      	ldr	r3, [pc, #588]	; (8009460 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0ef      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800921c:	7dfb      	ldrb	r3, [r7, #23]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d166      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009222:	4b8e      	ldr	r3, [pc, #568]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009224:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800922c:	4053      	eors	r3, r2
 800922e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009232:	2b00      	cmp	r3, #0
 8009234:	d013      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009236:	4b89      	ldr	r3, [pc, #548]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009240:	4b86      	ldr	r3, [pc, #536]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009244:	4a85      	ldr	r2, [pc, #532]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800924a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800924c:	4b83      	ldr	r3, [pc, #524]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800924e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009250:	4a82      	ldr	r2, [pc, #520]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009256:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009258:	4a80      	ldr	r2, [pc, #512]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009268:	d115      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800926a:	f7fb fc4b 	bl	8004b04 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009270:	e00b      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fb fc47 	bl	8004b04 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d902      	bls.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	75fb      	strb	r3, [r7, #23]
            break;
 8009288:	e005      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800928a:	4b74      	ldr	r3, [pc, #464]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800928c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0ed      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d126      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092aa:	d10d      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80092ac:	4b6b      	ldr	r3, [pc, #428]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092ba:	0919      	lsrs	r1, r3, #4
 80092bc:	4b69      	ldr	r3, [pc, #420]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80092be:	400b      	ands	r3, r1
 80092c0:	4966      	ldr	r1, [pc, #408]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	610b      	str	r3, [r1, #16]
 80092c6:	e005      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80092c8:	4b64      	ldr	r3, [pc, #400]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	4a63      	ldr	r2, [pc, #396]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092d2:	6113      	str	r3, [r2, #16]
 80092d4:	4b61      	ldr	r3, [pc, #388]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092e2:	495e      	ldr	r1, [pc, #376]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	670b      	str	r3, [r1, #112]	; 0x70
 80092e8:	e004      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	75bb      	strb	r3, [r7, #22]
 80092ee:	e001      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
 80092f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0301 	and.w	r3, r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d07e      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009304:	2b28      	cmp	r3, #40	; 0x28
 8009306:	d867      	bhi.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	080093df 	.word	0x080093df
 8009314:	080093d9 	.word	0x080093d9
 8009318:	080093d9 	.word	0x080093d9
 800931c:	080093d9 	.word	0x080093d9
 8009320:	080093d9 	.word	0x080093d9
 8009324:	080093d9 	.word	0x080093d9
 8009328:	080093d9 	.word	0x080093d9
 800932c:	080093d9 	.word	0x080093d9
 8009330:	080093b5 	.word	0x080093b5
 8009334:	080093d9 	.word	0x080093d9
 8009338:	080093d9 	.word	0x080093d9
 800933c:	080093d9 	.word	0x080093d9
 8009340:	080093d9 	.word	0x080093d9
 8009344:	080093d9 	.word	0x080093d9
 8009348:	080093d9 	.word	0x080093d9
 800934c:	080093d9 	.word	0x080093d9
 8009350:	080093c7 	.word	0x080093c7
 8009354:	080093d9 	.word	0x080093d9
 8009358:	080093d9 	.word	0x080093d9
 800935c:	080093d9 	.word	0x080093d9
 8009360:	080093d9 	.word	0x080093d9
 8009364:	080093d9 	.word	0x080093d9
 8009368:	080093d9 	.word	0x080093d9
 800936c:	080093d9 	.word	0x080093d9
 8009370:	080093df 	.word	0x080093df
 8009374:	080093d9 	.word	0x080093d9
 8009378:	080093d9 	.word	0x080093d9
 800937c:	080093d9 	.word	0x080093d9
 8009380:	080093d9 	.word	0x080093d9
 8009384:	080093d9 	.word	0x080093d9
 8009388:	080093d9 	.word	0x080093d9
 800938c:	080093d9 	.word	0x080093d9
 8009390:	080093df 	.word	0x080093df
 8009394:	080093d9 	.word	0x080093d9
 8009398:	080093d9 	.word	0x080093d9
 800939c:	080093d9 	.word	0x080093d9
 80093a0:	080093d9 	.word	0x080093d9
 80093a4:	080093d9 	.word	0x080093d9
 80093a8:	080093d9 	.word	0x080093d9
 80093ac:	080093d9 	.word	0x080093d9
 80093b0:	080093df 	.word	0x080093df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3304      	adds	r3, #4
 80093b8:	2101      	movs	r1, #1
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fde6 	bl	8009f8c <RCCEx_PLL2_Config>
 80093c0:	4603      	mov	r3, r0
 80093c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80093c4:	e00c      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3324      	adds	r3, #36	; 0x24
 80093ca:	2101      	movs	r1, #1
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fe8f 	bl	800a0f0 <RCCEx_PLL3_Config>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80093d6:	e003      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
      break;
 80093dc:	e000      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80093de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d109      	bne.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80093e6:	4b1d      	ldr	r3, [pc, #116]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093f2:	491a      	ldr	r1, [pc, #104]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	654b      	str	r3, [r1, #84]	; 0x54
 80093f8:	e001      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0302 	and.w	r3, r3, #2
 8009406:	2b00      	cmp	r3, #0
 8009408:	d03e      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940e:	2b05      	cmp	r3, #5
 8009410:	d820      	bhi.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009412:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009418:	08009469 	.word	0x08009469
 800941c:	08009431 	.word	0x08009431
 8009420:	08009443 	.word	0x08009443
 8009424:	08009469 	.word	0x08009469
 8009428:	08009469 	.word	0x08009469
 800942c:	08009469 	.word	0x08009469
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3304      	adds	r3, #4
 8009434:	2101      	movs	r1, #1
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fda8 	bl	8009f8c <RCCEx_PLL2_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009440:	e013      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3324      	adds	r3, #36	; 0x24
 8009446:	2101      	movs	r1, #1
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fe51 	bl	800a0f0 <RCCEx_PLL3_Config>
 800944e:	4603      	mov	r3, r0
 8009450:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009452:	e00a      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	75fb      	strb	r3, [r7, #23]
      break;
 8009458:	e007      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800945a:	bf00      	nop
 800945c:	58024400 	.word	0x58024400
 8009460:	58024800 	.word	0x58024800
 8009464:	00ffffcf 	.word	0x00ffffcf
      break;
 8009468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009470:	4b9f      	ldr	r3, [pc, #636]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009474:	f023 0207 	bic.w	r2, r3, #7
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947c:	499c      	ldr	r1, [pc, #624]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800947e:	4313      	orrs	r3, r2
 8009480:	654b      	str	r3, [r1, #84]	; 0x54
 8009482:	e001      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d039      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800949a:	2b05      	cmp	r3, #5
 800949c:	d820      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800949e:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	080094e7 	.word	0x080094e7
 80094a8:	080094bd 	.word	0x080094bd
 80094ac:	080094cf 	.word	0x080094cf
 80094b0:	080094e7 	.word	0x080094e7
 80094b4:	080094e7 	.word	0x080094e7
 80094b8:	080094e7 	.word	0x080094e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3304      	adds	r3, #4
 80094c0:	2101      	movs	r1, #1
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fd62 	bl	8009f8c <RCCEx_PLL2_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80094cc:	e00c      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3324      	adds	r3, #36	; 0x24
 80094d2:	2101      	movs	r1, #1
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fe0b 	bl	800a0f0 <RCCEx_PLL3_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80094de:	e003      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
      break;
 80094e4:	e000      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80094e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094e8:	7dfb      	ldrb	r3, [r7, #23]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094ee:	4b80      	ldr	r3, [pc, #512]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f2:	f023 0207 	bic.w	r2, r3, #7
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fc:	497c      	ldr	r1, [pc, #496]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	658b      	str	r3, [r1, #88]	; 0x58
 8009502:	e001      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0320 	and.w	r3, r3, #32
 8009510:	2b00      	cmp	r3, #0
 8009512:	d04b      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800951e:	d02e      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009524:	d828      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952a:	d02a      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800952c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009530:	d822      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009536:	d026      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800953c:	d81c      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800953e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009542:	d010      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009548:	d816      	bhi.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d01d      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800954e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009552:	d111      	bne.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	3304      	adds	r3, #4
 8009558:	2100      	movs	r1, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fd16 	bl	8009f8c <RCCEx_PLL2_Config>
 8009560:	4603      	mov	r3, r0
 8009562:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009564:	e012      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3324      	adds	r3, #36	; 0x24
 800956a:	2102      	movs	r1, #2
 800956c:	4618      	mov	r0, r3
 800956e:	f000 fdbf 	bl	800a0f0 <RCCEx_PLL3_Config>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009576:	e009      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
      break;
 800957c:	e006      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800957e:	bf00      	nop
 8009580:	e004      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009582:	bf00      	nop
 8009584:	e002      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800958a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009592:	4b57      	ldr	r3, [pc, #348]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009596:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a0:	4953      	ldr	r1, [pc, #332]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	654b      	str	r3, [r1, #84]	; 0x54
 80095a6:	e001      	b.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d04b      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095c2:	d02e      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80095c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095c8:	d828      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ce:	d02a      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80095d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095d4:	d822      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095da:	d026      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80095dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80095e0:	d81c      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095e6:	d010      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80095e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ec:	d816      	bhi.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d01d      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80095f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f6:	d111      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3304      	adds	r3, #4
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fcc4 	bl	8009f8c <RCCEx_PLL2_Config>
 8009604:	4603      	mov	r3, r0
 8009606:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009608:	e012      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	3324      	adds	r3, #36	; 0x24
 800960e:	2102      	movs	r1, #2
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fd6d 	bl	800a0f0 <RCCEx_PLL3_Config>
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800961a:	e009      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	75fb      	strb	r3, [r7, #23]
      break;
 8009620:	e006      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009622:	bf00      	nop
 8009624:	e004      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009626:	bf00      	nop
 8009628:	e002      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800962a:	bf00      	nop
 800962c:	e000      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800962e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10a      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009636:	4b2e      	ldr	r3, [pc, #184]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009644:	492a      	ldr	r1, [pc, #168]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009646:	4313      	orrs	r3, r2
 8009648:	658b      	str	r3, [r1, #88]	; 0x58
 800964a:	e001      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009658:	2b00      	cmp	r3, #0
 800965a:	d04d      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009662:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009666:	d02e      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009668:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800966c:	d828      	bhi.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800966e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009672:	d02a      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009678:	d822      	bhi.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800967a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800967e:	d026      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009680:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009684:	d81c      	bhi.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800968a:	d010      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800968c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009690:	d816      	bhi.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d01d      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969a:	d111      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3304      	adds	r3, #4
 80096a0:	2100      	movs	r1, #0
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 fc72 	bl	8009f8c <RCCEx_PLL2_Config>
 80096a8:	4603      	mov	r3, r0
 80096aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096ac:	e012      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3324      	adds	r3, #36	; 0x24
 80096b2:	2102      	movs	r1, #2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 fd1b 	bl	800a0f0 <RCCEx_PLL3_Config>
 80096ba:	4603      	mov	r3, r0
 80096bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096be:	e009      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	75fb      	strb	r3, [r7, #23]
      break;
 80096c4:	e006      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096c6:	bf00      	nop
 80096c8:	e004      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096ca:	bf00      	nop
 80096cc:	e002      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096ce:	bf00      	nop
 80096d0:	e000      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80096d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10c      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80096dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096e8:	4901      	ldr	r1, [pc, #4]	; (80096f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	658b      	str	r3, [r1, #88]	; 0x58
 80096ee:	e003      	b.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80096f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0308 	and.w	r3, r3, #8
 8009700:	2b00      	cmp	r3, #0
 8009702:	d018      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970c:	d10a      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3324      	adds	r3, #36	; 0x24
 8009712:	2102      	movs	r1, #2
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fceb 	bl	800a0f0 <RCCEx_PLL3_Config>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009724:	4b8a      	ldr	r3, [pc, #552]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009728:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009730:	4987      	ldr	r1, [pc, #540]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009732:	4313      	orrs	r3, r2
 8009734:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0310 	and.w	r3, r3, #16
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01a      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800974c:	d10a      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3324      	adds	r3, #36	; 0x24
 8009752:	2102      	movs	r1, #2
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fccb 	bl	800a0f0 <RCCEx_PLL3_Config>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009764:	4b7a      	ldr	r3, [pc, #488]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009772:	4977      	ldr	r1, [pc, #476]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009774:	4313      	orrs	r3, r2
 8009776:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d034      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800978a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800978e:	d01d      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009794:	d817      	bhi.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800979a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800979e:	d009      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097a0:	e011      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3304      	adds	r3, #4
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fbef 	bl	8009f8c <RCCEx_PLL2_Config>
 80097ae:	4603      	mov	r3, r0
 80097b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097b2:	e00c      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3324      	adds	r3, #36	; 0x24
 80097b8:	2102      	movs	r1, #2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fc98 	bl	800a0f0 <RCCEx_PLL3_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097c4:	e003      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	75fb      	strb	r3, [r7, #23]
      break;
 80097ca:	e000      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80097cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ce:	7dfb      	ldrb	r3, [r7, #23]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097d4:	4b5e      	ldr	r3, [pc, #376]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097e2:	495b      	ldr	r1, [pc, #364]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	658b      	str	r3, [r1, #88]	; 0x58
 80097e8:	e001      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d033      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009800:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009804:	d01c      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009806:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800980a:	d816      	bhi.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800980c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009810:	d003      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009816:	d007      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009818:	e00f      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800981a:	4b4d      	ldr	r3, [pc, #308]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981e:	4a4c      	ldr	r2, [pc, #304]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009824:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009826:	e00c      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3324      	adds	r3, #36	; 0x24
 800982c:	2101      	movs	r1, #1
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fc5e 	bl	800a0f0 <RCCEx_PLL3_Config>
 8009834:	4603      	mov	r3, r0
 8009836:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009838:	e003      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	75fb      	strb	r3, [r7, #23]
      break;
 800983e:	e000      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009842:	7dfb      	ldrb	r3, [r7, #23]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10a      	bne.n	800985e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009848:	4b41      	ldr	r3, [pc, #260]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800984a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009856:	493e      	ldr	r1, [pc, #248]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009858:	4313      	orrs	r3, r2
 800985a:	654b      	str	r3, [r1, #84]	; 0x54
 800985c:	e001      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d029      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800987a:	d007      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800987c:	e00f      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987e:	4b34      	ldr	r3, [pc, #208]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	4a33      	ldr	r2, [pc, #204]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800988a:	e00b      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	3304      	adds	r3, #4
 8009890:	2102      	movs	r1, #2
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fb7a 	bl	8009f8c <RCCEx_PLL2_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800989c:	e002      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
      break;
 80098a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d109      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098aa:	4b29      	ldr	r3, [pc, #164]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b6:	4926      	ldr	r1, [pc, #152]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098bc:	e001      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3324      	adds	r3, #36	; 0x24
 80098d2:	2102      	movs	r1, #2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fc0b 	bl	800a0f0 <RCCEx_PLL3_Config>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d001      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d033      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098f8:	d017      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80098fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098fe:	d811      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009904:	d013      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800990a:	d80b      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800990c:	2b00      	cmp	r3, #0
 800990e:	d010      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009914:	d106      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009916:	4b0e      	ldr	r3, [pc, #56]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991a:	4a0d      	ldr	r2, [pc, #52]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800991c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009920:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009922:	e007      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	75fb      	strb	r3, [r7, #23]
      break;
 8009928:	e004      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800992a:	bf00      	nop
 800992c:	e002      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800992e:	bf00      	nop
 8009930:	e000      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10c      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800993a:	4b05      	ldr	r3, [pc, #20]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800993c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009946:	4902      	ldr	r1, [pc, #8]	; (8009950 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009948:	4313      	orrs	r3, r2
 800994a:	654b      	str	r3, [r1, #84]	; 0x54
 800994c:	e004      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800994e:	bf00      	nop
 8009950:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d008      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009964:	4b29      	ldr	r3, [pc, #164]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009968:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009970:	4926      	ldr	r1, [pc, #152]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009972:	4313      	orrs	r3, r2
 8009974:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d008      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009982:	4b22      	ldr	r3, [pc, #136]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009986:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800998e:	491f      	ldr	r1, [pc, #124]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009990:	4313      	orrs	r3, r2
 8009992:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00d      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099a0:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	4a19      	ldr	r2, [pc, #100]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099aa:	6113      	str	r3, [r2, #16]
 80099ac:	4b17      	ldr	r3, [pc, #92]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099ae:	691a      	ldr	r2, [r3, #16]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099b6:	4915      	ldr	r1, [pc, #84]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099b8:	4313      	orrs	r3, r2
 80099ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	da08      	bge.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099c4:	4b11      	ldr	r3, [pc, #68]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d0:	490e      	ldr	r1, [pc, #56]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80099e2:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099f0:	4906      	ldr	r1, [pc, #24]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80099f6:	7dbb      	ldrb	r3, [r7, #22]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400

08009a10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a14:	f7ff f8a6 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	091b      	lsrs	r3, r3, #4
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	4904      	ldr	r1, [pc, #16]	; (8009a38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a26:	5ccb      	ldrb	r3, [r1, r3]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	58024400 	.word	0x58024400
 8009a38:	0800e11c 	.word	0x0800e11c

08009a3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b089      	sub	sp, #36	; 0x24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a44:	4ba1      	ldr	r3, [pc, #644]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009a4e:	4b9f      	ldr	r3, [pc, #636]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a52:	0b1b      	lsrs	r3, r3, #12
 8009a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a5a:	4b9c      	ldr	r3, [pc, #624]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5e:	091b      	lsrs	r3, r3, #4
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009a66:	4b99      	ldr	r3, [pc, #612]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a6a:	08db      	lsrs	r3, r3, #3
 8009a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	fb02 f303 	mul.w	r3, r2, r3
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 8111 	beq.w	8009cac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	f000 8083 	beq.w	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	f200 80a1 	bhi.w	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d003      	beq.n	8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d056      	beq.n	8009b54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009aa6:	e099      	b.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aa8:	4b88      	ldr	r3, [pc, #544]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0320 	and.w	r3, r3, #32
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d02d      	beq.n	8009b10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ab4:	4b85      	ldr	r3, [pc, #532]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	08db      	lsrs	r3, r3, #3
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	4a84      	ldr	r2, [pc, #528]	; (8009cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	ee07 3a90 	vmov	s15, r3
 8009acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ade:	4b7b      	ldr	r3, [pc, #492]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009af2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b0e:	e087      	b.n	8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b22:	4b6a      	ldr	r3, [pc, #424]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b52:	e065      	b.n	8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b66:	4b59      	ldr	r3, [pc, #356]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b6e:	ee07 3a90 	vmov	s15, r3
 8009b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b96:	e043      	b.n	8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009baa:	4b48      	ldr	r3, [pc, #288]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bda:	e021      	b.n	8009c20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bee:	4b37      	ldr	r3, [pc, #220]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009c20:	4b2a      	ldr	r3, [pc, #168]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	0a5b      	lsrs	r3, r3, #9
 8009c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c2a:	ee07 3a90 	vmov	s15, r3
 8009c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c46:	ee17 2a90 	vmov	r2, s15
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009c4e:	4b1f      	ldr	r3, [pc, #124]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	0c1b      	lsrs	r3, r3, #16
 8009c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c58:	ee07 3a90 	vmov	s15, r3
 8009c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c74:	ee17 2a90 	vmov	r2, s15
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c7c:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	0e1b      	lsrs	r3, r3, #24
 8009c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca2:	ee17 2a90 	vmov	r2, s15
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009caa:	e008      	b.n	8009cbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	609a      	str	r2, [r3, #8]
}
 8009cbe:	bf00      	nop
 8009cc0:	3724      	adds	r7, #36	; 0x24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	03d09000 	.word	0x03d09000
 8009cd4:	46000000 	.word	0x46000000
 8009cd8:	4c742400 	.word	0x4c742400
 8009cdc:	4a742400 	.word	0x4a742400
 8009ce0:	4af42400 	.word	0x4af42400

08009ce4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b089      	sub	sp, #36	; 0x24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cec:	4ba1      	ldr	r3, [pc, #644]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009cf6:	4b9f      	ldr	r3, [pc, #636]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	0d1b      	lsrs	r3, r3, #20
 8009cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d02:	4b9c      	ldr	r3, [pc, #624]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d06:	0a1b      	lsrs	r3, r3, #8
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009d0e:	4b99      	ldr	r3, [pc, #612]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d12:	08db      	lsrs	r3, r3, #3
 8009d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	fb02 f303 	mul.w	r3, r2, r3
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 8111 	beq.w	8009f54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	f000 8083 	beq.w	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	f200 80a1 	bhi.w	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d056      	beq.n	8009dfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d4e:	e099      	b.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d50:	4b88      	ldr	r3, [pc, #544]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0320 	and.w	r3, r3, #32
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d02d      	beq.n	8009db8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d5c:	4b85      	ldr	r3, [pc, #532]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	08db      	lsrs	r3, r3, #3
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	4a84      	ldr	r2, [pc, #528]	; (8009f78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d68:	fa22 f303 	lsr.w	r3, r2, r3
 8009d6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	ee07 3a90 	vmov	s15, r3
 8009d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d86:	4b7b      	ldr	r3, [pc, #492]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8e:	ee07 3a90 	vmov	s15, r3
 8009d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009db2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009db6:	e087      	b.n	8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dca:	4b6a      	ldr	r3, [pc, #424]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dfa:	e065      	b.n	8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e0e:	4b59      	ldr	r3, [pc, #356]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e16:	ee07 3a90 	vmov	s15, r3
 8009e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e3e:	e043      	b.n	8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e52:	4b48      	ldr	r3, [pc, #288]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e82:	e021      	b.n	8009ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e96:	4b37      	ldr	r3, [pc, #220]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ec6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ec8:	4b2a      	ldr	r3, [pc, #168]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ecc:	0a5b      	lsrs	r3, r3, #9
 8009ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eee:	ee17 2a90 	vmov	r2, s15
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009ef6:	4b1f      	ldr	r3, [pc, #124]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efa:	0c1b      	lsrs	r3, r3, #16
 8009efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f00:	ee07 3a90 	vmov	s15, r3
 8009f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f1c:	ee17 2a90 	vmov	r2, s15
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009f24:	4b13      	ldr	r3, [pc, #76]	; (8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f28:	0e1b      	lsrs	r3, r3, #24
 8009f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f2e:	ee07 3a90 	vmov	s15, r3
 8009f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f4a:	ee17 2a90 	vmov	r2, s15
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f52:	e008      	b.n	8009f66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	609a      	str	r2, [r3, #8]
}
 8009f66:	bf00      	nop
 8009f68:	3724      	adds	r7, #36	; 0x24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	58024400 	.word	0x58024400
 8009f78:	03d09000 	.word	0x03d09000
 8009f7c:	46000000 	.word	0x46000000
 8009f80:	4c742400 	.word	0x4c742400
 8009f84:	4a742400 	.word	0x4a742400
 8009f88:	4af42400 	.word	0x4af42400

08009f8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f9a:	4b53      	ldr	r3, [pc, #332]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d101      	bne.n	8009faa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e099      	b.n	800a0de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009faa:	4b4f      	ldr	r3, [pc, #316]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a4e      	ldr	r2, [pc, #312]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 8009fb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fb6:	f7fa fda5 	bl	8004b04 <HAL_GetTick>
 8009fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fbc:	e008      	b.n	8009fd0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009fbe:	f7fa fda1 	bl	8004b04 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d901      	bls.n	8009fd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e086      	b.n	800a0de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fd0:	4b45      	ldr	r3, [pc, #276]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1f0      	bne.n	8009fbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009fdc:	4b42      	ldr	r3, [pc, #264]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 8009fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	031b      	lsls	r3, r3, #12
 8009fea:	493f      	ldr	r1, [pc, #252]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	628b      	str	r3, [r1, #40]	; 0x28
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	025b      	lsls	r3, r3, #9
 800a002:	b29b      	uxth	r3, r3
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	041b      	lsls	r3, r3, #16
 800a00e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a012:	431a      	orrs	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	3b01      	subs	r3, #1
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a020:	4931      	ldr	r1, [pc, #196]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a022:	4313      	orrs	r3, r2
 800a024:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a026:	4b30      	ldr	r3, [pc, #192]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	492d      	ldr	r1, [pc, #180]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a034:	4313      	orrs	r3, r2
 800a036:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a038:	4b2b      	ldr	r3, [pc, #172]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	f023 0220 	bic.w	r2, r3, #32
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	4928      	ldr	r1, [pc, #160]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a046:	4313      	orrs	r3, r2
 800a048:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a04a:	4b27      	ldr	r3, [pc, #156]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04e:	4a26      	ldr	r2, [pc, #152]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a050:	f023 0310 	bic.w	r3, r3, #16
 800a054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a056:	4b24      	ldr	r3, [pc, #144]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a05a:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <RCCEx_PLL2_Config+0x160>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	69d2      	ldr	r2, [r2, #28]
 800a062:	00d2      	lsls	r2, r2, #3
 800a064:	4920      	ldr	r1, [pc, #128]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a066:	4313      	orrs	r3, r2
 800a068:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a06a:	4b1f      	ldr	r3, [pc, #124]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a070:	f043 0310 	orr.w	r3, r3, #16
 800a074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a07c:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a080:	4a19      	ldr	r2, [pc, #100]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a082:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a086:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a088:	e00f      	b.n	800a0aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d106      	bne.n	800a09e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a090:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	4a14      	ldr	r2, [pc, #80]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a09a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a09c:	e005      	b.n	800a0aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a09e:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	4a11      	ldr	r2, [pc, #68]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a0a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a0aa:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a0e      	ldr	r2, [pc, #56]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a0b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a0b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0b6:	f7fa fd25 	bl	8004b04 <HAL_GetTick>
 800a0ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0bc:	e008      	b.n	800a0d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0be:	f7fa fd21 	bl	8004b04 <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e006      	b.n	800a0de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0d0:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <RCCEx_PLL2_Config+0x15c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0f0      	beq.n	800a0be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	58024400 	.word	0x58024400
 800a0ec:	ffff0007 	.word	0xffff0007

0800a0f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0fe:	4b53      	ldr	r3, [pc, #332]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a102:	f003 0303 	and.w	r3, r3, #3
 800a106:	2b03      	cmp	r3, #3
 800a108:	d101      	bne.n	800a10e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e099      	b.n	800a242 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a10e:	4b4f      	ldr	r3, [pc, #316]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a4e      	ldr	r2, [pc, #312]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a11a:	f7fa fcf3 	bl	8004b04 <HAL_GetTick>
 800a11e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a120:	e008      	b.n	800a134 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a122:	f7fa fcef 	bl	8004b04 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e086      	b.n	800a242 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a134:	4b45      	ldr	r3, [pc, #276]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f0      	bne.n	800a122 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a140:	4b42      	ldr	r3, [pc, #264]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a144:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	051b      	lsls	r3, r3, #20
 800a14e:	493f      	ldr	r1, [pc, #252]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a150:	4313      	orrs	r3, r2
 800a152:	628b      	str	r3, [r1, #40]	; 0x28
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	3b01      	subs	r3, #1
 800a15a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	3b01      	subs	r3, #1
 800a164:	025b      	lsls	r3, r3, #9
 800a166:	b29b      	uxth	r3, r3
 800a168:	431a      	orrs	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	3b01      	subs	r3, #1
 800a170:	041b      	lsls	r3, r3, #16
 800a172:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a176:	431a      	orrs	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	061b      	lsls	r3, r3, #24
 800a180:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a184:	4931      	ldr	r1, [pc, #196]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a186:	4313      	orrs	r3, r2
 800a188:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a18a:	4b30      	ldr	r3, [pc, #192]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	492d      	ldr	r1, [pc, #180]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a19c:	4b2b      	ldr	r3, [pc, #172]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	4928      	ldr	r1, [pc, #160]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a1ae:	4b27      	ldr	r3, [pc, #156]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	4a26      	ldr	r2, [pc, #152]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a1ba:	4b24      	ldr	r3, [pc, #144]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1be:	4b24      	ldr	r3, [pc, #144]	; (800a250 <RCCEx_PLL3_Config+0x160>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	69d2      	ldr	r2, [r2, #28]
 800a1c6:	00d2      	lsls	r2, r2, #3
 800a1c8:	4920      	ldr	r1, [pc, #128]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a1ce:	4b1f      	ldr	r3, [pc, #124]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	4a1e      	ldr	r2, [pc, #120]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d106      	bne.n	800a1ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a1e0:	4b1a      	ldr	r3, [pc, #104]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e4:	4a19      	ldr	r2, [pc, #100]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1ec:	e00f      	b.n	800a20e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d106      	bne.n	800a202 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a1f4:	4b15      	ldr	r3, [pc, #84]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	4a14      	ldr	r2, [pc, #80]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a1fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a1fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a200:	e005      	b.n	800a20e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a202:	4b12      	ldr	r3, [pc, #72]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a206:	4a11      	ldr	r2, [pc, #68]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a208:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a20c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a20e:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a0e      	ldr	r2, [pc, #56]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a21a:	f7fa fc73 	bl	8004b04 <HAL_GetTick>
 800a21e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a220:	e008      	b.n	800a234 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a222:	f7fa fc6f 	bl	8004b04 <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d901      	bls.n	800a234 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e006      	b.n	800a242 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a234:	4b05      	ldr	r3, [pc, #20]	; (800a24c <RCCEx_PLL3_Config+0x15c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0f0      	beq.n	800a222 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	58024400 	.word	0x58024400
 800a250:	ffff0007 	.word	0xffff0007

0800a254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e049      	b.n	800a2fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7f9 ffaa 	bl	80041d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3304      	adds	r3, #4
 800a290:	4619      	mov	r1, r3
 800a292:	4610      	mov	r0, r2
 800a294:	f000 fe0c 	bl	800aeb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
	...

0800a304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b01      	cmp	r3, #1
 800a316:	d001      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e05e      	b.n	800a3da <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68da      	ldr	r2, [r3, #12]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0201 	orr.w	r2, r2, #1
 800a332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a2b      	ldr	r2, [pc, #172]	; (800a3e8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d02c      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a346:	d027      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a27      	ldr	r2, [pc, #156]	; (800a3ec <HAL_TIM_Base_Start_IT+0xe8>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d022      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a26      	ldr	r2, [pc, #152]	; (800a3f0 <HAL_TIM_Base_Start_IT+0xec>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d01d      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a24      	ldr	r2, [pc, #144]	; (800a3f4 <HAL_TIM_Base_Start_IT+0xf0>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d018      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a23      	ldr	r2, [pc, #140]	; (800a3f8 <HAL_TIM_Base_Start_IT+0xf4>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d013      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a21      	ldr	r2, [pc, #132]	; (800a3fc <HAL_TIM_Base_Start_IT+0xf8>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d00e      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a20      	ldr	r2, [pc, #128]	; (800a400 <HAL_TIM_Base_Start_IT+0xfc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d009      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a1e      	ldr	r2, [pc, #120]	; (800a404 <HAL_TIM_Base_Start_IT+0x100>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d004      	beq.n	800a398 <HAL_TIM_Base_Start_IT+0x94>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a1d      	ldr	r2, [pc, #116]	; (800a408 <HAL_TIM_Base_Start_IT+0x104>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d115      	bne.n	800a3c4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	4b1b      	ldr	r3, [pc, #108]	; (800a40c <HAL_TIM_Base_Start_IT+0x108>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b06      	cmp	r3, #6
 800a3a8:	d015      	beq.n	800a3d6 <HAL_TIM_Base_Start_IT+0xd2>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b0:	d011      	beq.n	800a3d6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f042 0201 	orr.w	r2, r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c2:	e008      	b.n	800a3d6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0201 	orr.w	r2, r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	e000      	b.n	800a3d8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40010000 	.word	0x40010000
 800a3ec:	40000400 	.word	0x40000400
 800a3f0:	40000800 	.word	0x40000800
 800a3f4:	40000c00 	.word	0x40000c00
 800a3f8:	40010400 	.word	0x40010400
 800a3fc:	40001800 	.word	0x40001800
 800a400:	40014000 	.word	0x40014000
 800a404:	4000e000 	.word	0x4000e000
 800a408:	4000e400 	.word	0x4000e400
 800a40c:	00010007 	.word	0x00010007

0800a410 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e049      	b.n	800a4b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d106      	bne.n	800a43c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7f9 fe84 	bl	8004144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2202      	movs	r2, #2
 800a440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f000 fd2e 	bl	800aeb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d109      	bne.n	800a4e8 <HAL_TIM_PWM_Start_IT+0x28>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	bf14      	ite	ne
 800a4e0:	2301      	movne	r3, #1
 800a4e2:	2300      	moveq	r3, #0
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	e03c      	b.n	800a562 <HAL_TIM_PWM_Start_IT+0xa2>
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d109      	bne.n	800a502 <HAL_TIM_PWM_Start_IT+0x42>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	bf14      	ite	ne
 800a4fa:	2301      	movne	r3, #1
 800a4fc:	2300      	moveq	r3, #0
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	e02f      	b.n	800a562 <HAL_TIM_PWM_Start_IT+0xa2>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b08      	cmp	r3, #8
 800a506:	d109      	bne.n	800a51c <HAL_TIM_PWM_Start_IT+0x5c>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b01      	cmp	r3, #1
 800a512:	bf14      	ite	ne
 800a514:	2301      	movne	r3, #1
 800a516:	2300      	moveq	r3, #0
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	e022      	b.n	800a562 <HAL_TIM_PWM_Start_IT+0xa2>
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	2b0c      	cmp	r3, #12
 800a520:	d109      	bne.n	800a536 <HAL_TIM_PWM_Start_IT+0x76>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	bf14      	ite	ne
 800a52e:	2301      	movne	r3, #1
 800a530:	2300      	moveq	r3, #0
 800a532:	b2db      	uxtb	r3, r3
 800a534:	e015      	b.n	800a562 <HAL_TIM_PWM_Start_IT+0xa2>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b10      	cmp	r3, #16
 800a53a:	d109      	bne.n	800a550 <HAL_TIM_PWM_Start_IT+0x90>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	bf14      	ite	ne
 800a548:	2301      	movne	r3, #1
 800a54a:	2300      	moveq	r3, #0
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	e008      	b.n	800a562 <HAL_TIM_PWM_Start_IT+0xa2>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b01      	cmp	r3, #1
 800a55a:	bf14      	ite	ne
 800a55c:	2301      	movne	r3, #1
 800a55e:	2300      	moveq	r3, #0
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e0f6      	b.n	800a758 <HAL_TIM_PWM_Start_IT+0x298>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d104      	bne.n	800a57a <HAL_TIM_PWM_Start_IT+0xba>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a578:	e023      	b.n	800a5c2 <HAL_TIM_PWM_Start_IT+0x102>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	d104      	bne.n	800a58a <HAL_TIM_PWM_Start_IT+0xca>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a588:	e01b      	b.n	800a5c2 <HAL_TIM_PWM_Start_IT+0x102>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d104      	bne.n	800a59a <HAL_TIM_PWM_Start_IT+0xda>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a598:	e013      	b.n	800a5c2 <HAL_TIM_PWM_Start_IT+0x102>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	2b0c      	cmp	r3, #12
 800a59e:	d104      	bne.n	800a5aa <HAL_TIM_PWM_Start_IT+0xea>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5a8:	e00b      	b.n	800a5c2 <HAL_TIM_PWM_Start_IT+0x102>
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d104      	bne.n	800a5ba <HAL_TIM_PWM_Start_IT+0xfa>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5b8:	e003      	b.n	800a5c2 <HAL_TIM_PWM_Start_IT+0x102>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2202      	movs	r2, #2
 800a5be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b0c      	cmp	r3, #12
 800a5c6:	d841      	bhi.n	800a64c <HAL_TIM_PWM_Start_IT+0x18c>
 800a5c8:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <HAL_TIM_PWM_Start_IT+0x110>)
 800a5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ce:	bf00      	nop
 800a5d0:	0800a605 	.word	0x0800a605
 800a5d4:	0800a64d 	.word	0x0800a64d
 800a5d8:	0800a64d 	.word	0x0800a64d
 800a5dc:	0800a64d 	.word	0x0800a64d
 800a5e0:	0800a617 	.word	0x0800a617
 800a5e4:	0800a64d 	.word	0x0800a64d
 800a5e8:	0800a64d 	.word	0x0800a64d
 800a5ec:	0800a64d 	.word	0x0800a64d
 800a5f0:	0800a629 	.word	0x0800a629
 800a5f4:	0800a64d 	.word	0x0800a64d
 800a5f8:	0800a64d 	.word	0x0800a64d
 800a5fc:	0800a64d 	.word	0x0800a64d
 800a600:	0800a63b 	.word	0x0800a63b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 0202 	orr.w	r2, r2, #2
 800a612:	60da      	str	r2, [r3, #12]
      break;
 800a614:	e01d      	b.n	800a652 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68da      	ldr	r2, [r3, #12]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f042 0204 	orr.w	r2, r2, #4
 800a624:	60da      	str	r2, [r3, #12]
      break;
 800a626:	e014      	b.n	800a652 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f042 0208 	orr.w	r2, r2, #8
 800a636:	60da      	str	r2, [r3, #12]
      break;
 800a638:	e00b      	b.n	800a652 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f042 0210 	orr.w	r2, r2, #16
 800a648:	60da      	str	r2, [r3, #12]
      break;
 800a64a:	e002      	b.n	800a652 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	73fb      	strb	r3, [r7, #15]
      break;
 800a650:	bf00      	nop
  }

  if (status == HAL_OK)
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d17e      	bne.n	800a756 <HAL_TIM_PWM_Start_IT+0x296>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2201      	movs	r2, #1
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 ffa1 	bl	800b5a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a3d      	ldr	r2, [pc, #244]	; (800a760 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d013      	beq.n	800a698 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a3b      	ldr	r2, [pc, #236]	; (800a764 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00e      	beq.n	800a698 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a3a      	ldr	r2, [pc, #232]	; (800a768 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d009      	beq.n	800a698 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a38      	ldr	r2, [pc, #224]	; (800a76c <HAL_TIM_PWM_Start_IT+0x2ac>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d004      	beq.n	800a698 <HAL_TIM_PWM_Start_IT+0x1d8>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a37      	ldr	r2, [pc, #220]	; (800a770 <HAL_TIM_PWM_Start_IT+0x2b0>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d101      	bne.n	800a69c <HAL_TIM_PWM_Start_IT+0x1dc>
 800a698:	2301      	movs	r3, #1
 800a69a:	e000      	b.n	800a69e <HAL_TIM_PWM_Start_IT+0x1de>
 800a69c:	2300      	movs	r3, #0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a2a      	ldr	r2, [pc, #168]	; (800a760 <HAL_TIM_PWM_Start_IT+0x2a0>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d02c      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c4:	d027      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a2a      	ldr	r2, [pc, #168]	; (800a774 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d022      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a28      	ldr	r2, [pc, #160]	; (800a778 <HAL_TIM_PWM_Start_IT+0x2b8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d01d      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a27      	ldr	r2, [pc, #156]	; (800a77c <HAL_TIM_PWM_Start_IT+0x2bc>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d018      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1e      	ldr	r2, [pc, #120]	; (800a764 <HAL_TIM_PWM_Start_IT+0x2a4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d013      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a23      	ldr	r2, [pc, #140]	; (800a780 <HAL_TIM_PWM_Start_IT+0x2c0>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00e      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1a      	ldr	r2, [pc, #104]	; (800a768 <HAL_TIM_PWM_Start_IT+0x2a8>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d009      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1f      	ldr	r2, [pc, #124]	; (800a784 <HAL_TIM_PWM_Start_IT+0x2c4>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d004      	beq.n	800a716 <HAL_TIM_PWM_Start_IT+0x256>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1d      	ldr	r2, [pc, #116]	; (800a788 <HAL_TIM_PWM_Start_IT+0x2c8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d115      	bne.n	800a742 <HAL_TIM_PWM_Start_IT+0x282>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <HAL_TIM_PWM_Start_IT+0x2cc>)
 800a71e:	4013      	ands	r3, r2
 800a720:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b06      	cmp	r3, #6
 800a726:	d015      	beq.n	800a754 <HAL_TIM_PWM_Start_IT+0x294>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a72e:	d011      	beq.n	800a754 <HAL_TIM_PWM_Start_IT+0x294>
      {
        __HAL_TIM_ENABLE(htim);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a740:	e008      	b.n	800a754 <HAL_TIM_PWM_Start_IT+0x294>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f042 0201 	orr.w	r2, r2, #1
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	e000      	b.n	800a756 <HAL_TIM_PWM_Start_IT+0x296>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a754:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	40010000 	.word	0x40010000
 800a764:	40010400 	.word	0x40010400
 800a768:	40014000 	.word	0x40014000
 800a76c:	40014400 	.word	0x40014400
 800a770:	40014800 	.word	0x40014800
 800a774:	40000400 	.word	0x40000400
 800a778:	40000800 	.word	0x40000800
 800a77c:	40000c00 	.word	0x40000c00
 800a780:	40001800 	.word	0x40001800
 800a784:	4000e000 	.word	0x4000e000
 800a788:	4000e400 	.word	0x4000e400
 800a78c:	00010007 	.word	0x00010007

0800a790 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e08f      	b.n	800a8c4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7f9 fbb5 	bl	8003f28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6899      	ldr	r1, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	4b3e      	ldr	r3, [pc, #248]	; (800a8cc <HAL_TIM_Encoder_Init+0x13c>)
 800a7d2:	400b      	ands	r3, r1
 800a7d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3304      	adds	r3, #4
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4610      	mov	r0, r2
 800a7e2:	f000 fb65 	bl	800aeb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	4313      	orrs	r3, r2
 800a806:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	4b31      	ldr	r3, [pc, #196]	; (800a8d0 <HAL_TIM_Encoder_Init+0x140>)
 800a80c:	4013      	ands	r3, r2
 800a80e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	4313      	orrs	r3, r2
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	4313      	orrs	r3, r2
 800a820:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4b2b      	ldr	r3, [pc, #172]	; (800a8d4 <HAL_TIM_Encoder_Init+0x144>)
 800a826:	4013      	ands	r3, r2
 800a828:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <HAL_TIM_Encoder_Init+0x148>)
 800a82e:	4013      	ands	r3, r2
 800a830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	021b      	lsls	r3, r3, #8
 800a83c:	4313      	orrs	r3, r2
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	4313      	orrs	r3, r2
 800a842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	011a      	lsls	r2, r3, #4
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	031b      	lsls	r3, r3, #12
 800a850:	4313      	orrs	r3, r2
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	4313      	orrs	r3, r2
 800a856:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a85e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a866:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	4313      	orrs	r3, r2
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	fffebff8 	.word	0xfffebff8
 800a8d0:	fffffcfc 	.word	0xfffffcfc
 800a8d4:	fffff3f3 	.word	0xfffff3f3
 800a8d8:	ffff0f0f 	.word	0xffff0f0f

0800a8dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a904:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d110      	bne.n	800a92e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d102      	bne.n	800a918 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a912:	7b7b      	ldrb	r3, [r7, #13]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d001      	beq.n	800a91c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e069      	b.n	800a9f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a92c:	e031      	b.n	800a992 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b04      	cmp	r3, #4
 800a932:	d110      	bne.n	800a956 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d102      	bne.n	800a940 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a93a:	7b3b      	ldrb	r3, [r7, #12]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d001      	beq.n	800a944 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e055      	b.n	800a9f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2202      	movs	r2, #2
 800a950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a954:	e01d      	b.n	800a992 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d108      	bne.n	800a96e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d105      	bne.n	800a96e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a962:	7b7b      	ldrb	r3, [r7, #13]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d102      	bne.n	800a96e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a968:	7b3b      	ldrb	r3, [r7, #12]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d001      	beq.n	800a972 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e03e      	b.n	800a9f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2202      	movs	r2, #2
 800a976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2202      	movs	r2, #2
 800a97e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2202      	movs	r2, #2
 800a986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2202      	movs	r2, #2
 800a98e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <HAL_TIM_Encoder_Start+0xc4>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d008      	beq.n	800a9b0 <HAL_TIM_Encoder_Start+0xd4>
 800a99e:	e00f      	b.n	800a9c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 fdfd 	bl	800b5a8 <TIM_CCxChannelCmd>
      break;
 800a9ae:	e016      	b.n	800a9de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	2104      	movs	r1, #4
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 fdf5 	bl	800b5a8 <TIM_CCxChannelCmd>
      break;
 800a9be:	e00e      	b.n	800a9de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fded 	bl	800b5a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	2104      	movs	r1, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fde6 	bl	800b5a8 <TIM_CCxChannelCmd>
      break;
 800a9dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f042 0201 	orr.w	r2, r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	f003 0302 	and.w	r3, r3, #2
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d122      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d11b      	bne.n	800aa54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f06f 0202 	mvn.w	r2, #2
 800aa24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	f003 0303 	and.w	r3, r3, #3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fa1a 	bl	800ae74 <HAL_TIM_IC_CaptureCallback>
 800aa40:	e005      	b.n	800aa4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fa0c 	bl	800ae60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fa1d 	bl	800ae88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d122      	bne.n	800aaa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	d11b      	bne.n	800aaa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f06f 0204 	mvn.w	r2, #4
 800aa78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f9f0 	bl	800ae74 <HAL_TIM_IC_CaptureCallback>
 800aa94:	e005      	b.n	800aaa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f9e2 	bl	800ae60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f9f3 	bl	800ae88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b08      	cmp	r3, #8
 800aab4:	d122      	bne.n	800aafc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d11b      	bne.n	800aafc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f06f 0208 	mvn.w	r2, #8
 800aacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2204      	movs	r2, #4
 800aad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f9c6 	bl	800ae74 <HAL_TIM_IC_CaptureCallback>
 800aae8:	e005      	b.n	800aaf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f9b8 	bl	800ae60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f9c9 	bl	800ae88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	f003 0310 	and.w	r3, r3, #16
 800ab06:	2b10      	cmp	r3, #16
 800ab08:	d122      	bne.n	800ab50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f003 0310 	and.w	r3, r3, #16
 800ab14:	2b10      	cmp	r3, #16
 800ab16:	d11b      	bne.n	800ab50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f06f 0210 	mvn.w	r2, #16
 800ab20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2208      	movs	r2, #8
 800ab26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f99c 	bl	800ae74 <HAL_TIM_IC_CaptureCallback>
 800ab3c:	e005      	b.n	800ab4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f98e 	bl	800ae60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f99f 	bl	800ae88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d10e      	bne.n	800ab7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d107      	bne.n	800ab7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f06f 0201 	mvn.w	r2, #1
 800ab74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7f9 fdce 	bl	8004718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab86:	2b80      	cmp	r3, #128	; 0x80
 800ab88:	d10e      	bne.n	800aba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab94:	2b80      	cmp	r3, #128	; 0x80
 800ab96:	d107      	bne.n	800aba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fe6c 	bl	800b880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abb6:	d10e      	bne.n	800abd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc2:	2b80      	cmp	r3, #128	; 0x80
 800abc4:	d107      	bne.n	800abd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800abce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fe5f 	bl	800b894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe0:	2b40      	cmp	r3, #64	; 0x40
 800abe2:	d10e      	bne.n	800ac02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abee:	2b40      	cmp	r3, #64	; 0x40
 800abf0:	d107      	bne.n	800ac02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800abfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f94d 	bl	800ae9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	f003 0320 	and.w	r3, r3, #32
 800ac0c:	2b20      	cmp	r3, #32
 800ac0e:	d10e      	bne.n	800ac2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	f003 0320 	and.w	r3, r3, #32
 800ac1a:	2b20      	cmp	r3, #32
 800ac1c:	d107      	bne.n	800ac2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f06f 0220 	mvn.w	r2, #32
 800ac26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fe1f 	bl	800b86c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac2e:	bf00      	nop
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d101      	bne.n	800ac56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ac52:	2302      	movs	r3, #2
 800ac54:	e0ff      	b.n	800ae56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b14      	cmp	r3, #20
 800ac62:	f200 80f0 	bhi.w	800ae46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac66:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800acc1 	.word	0x0800acc1
 800ac70:	0800ae47 	.word	0x0800ae47
 800ac74:	0800ae47 	.word	0x0800ae47
 800ac78:	0800ae47 	.word	0x0800ae47
 800ac7c:	0800ad01 	.word	0x0800ad01
 800ac80:	0800ae47 	.word	0x0800ae47
 800ac84:	0800ae47 	.word	0x0800ae47
 800ac88:	0800ae47 	.word	0x0800ae47
 800ac8c:	0800ad43 	.word	0x0800ad43
 800ac90:	0800ae47 	.word	0x0800ae47
 800ac94:	0800ae47 	.word	0x0800ae47
 800ac98:	0800ae47 	.word	0x0800ae47
 800ac9c:	0800ad83 	.word	0x0800ad83
 800aca0:	0800ae47 	.word	0x0800ae47
 800aca4:	0800ae47 	.word	0x0800ae47
 800aca8:	0800ae47 	.word	0x0800ae47
 800acac:	0800adc5 	.word	0x0800adc5
 800acb0:	0800ae47 	.word	0x0800ae47
 800acb4:	0800ae47 	.word	0x0800ae47
 800acb8:	0800ae47 	.word	0x0800ae47
 800acbc:	0800ae05 	.word	0x0800ae05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68b9      	ldr	r1, [r7, #8]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f998 	bl	800affc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	699a      	ldr	r2, [r3, #24]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f042 0208 	orr.w	r2, r2, #8
 800acda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	699a      	ldr	r2, [r3, #24]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f022 0204 	bic.w	r2, r2, #4
 800acea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6999      	ldr	r1, [r3, #24]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	691a      	ldr	r2, [r3, #16]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	430a      	orrs	r2, r1
 800acfc:	619a      	str	r2, [r3, #24]
      break;
 800acfe:	e0a5      	b.n	800ae4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68b9      	ldr	r1, [r7, #8]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 fa08 	bl	800b11c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	699a      	ldr	r2, [r3, #24]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6999      	ldr	r1, [r3, #24]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	021a      	lsls	r2, r3, #8
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	619a      	str	r2, [r3, #24]
      break;
 800ad40:	e084      	b.n	800ae4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68b9      	ldr	r1, [r7, #8]
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 fa71 	bl	800b230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	69da      	ldr	r2, [r3, #28]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f042 0208 	orr.w	r2, r2, #8
 800ad5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	69da      	ldr	r2, [r3, #28]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f022 0204 	bic.w	r2, r2, #4
 800ad6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	69d9      	ldr	r1, [r3, #28]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	691a      	ldr	r2, [r3, #16]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	61da      	str	r2, [r3, #28]
      break;
 800ad80:	e064      	b.n	800ae4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fad9 	bl	800b340 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	69da      	ldr	r2, [r3, #28]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69d9      	ldr	r1, [r3, #28]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	021a      	lsls	r2, r3, #8
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	61da      	str	r2, [r3, #28]
      break;
 800adc2:	e043      	b.n	800ae4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68b9      	ldr	r1, [r7, #8]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 fb22 	bl	800b414 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0208 	orr.w	r2, r2, #8
 800adde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0204 	bic.w	r2, r2, #4
 800adee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae02:	e023      	b.n	800ae4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fb66 	bl	800b4dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	021a      	lsls	r2, r3, #8
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	430a      	orrs	r2, r1
 800ae42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae44:	e002      	b.n	800ae4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	75fb      	strb	r3, [r7, #23]
      break;
 800ae4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop

0800ae60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a44      	ldr	r2, [pc, #272]	; (800afd4 <TIM_Base_SetConfig+0x124>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d013      	beq.n	800aef0 <TIM_Base_SetConfig+0x40>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aece:	d00f      	beq.n	800aef0 <TIM_Base_SetConfig+0x40>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a41      	ldr	r2, [pc, #260]	; (800afd8 <TIM_Base_SetConfig+0x128>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d00b      	beq.n	800aef0 <TIM_Base_SetConfig+0x40>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a40      	ldr	r2, [pc, #256]	; (800afdc <TIM_Base_SetConfig+0x12c>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d007      	beq.n	800aef0 <TIM_Base_SetConfig+0x40>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a3f      	ldr	r2, [pc, #252]	; (800afe0 <TIM_Base_SetConfig+0x130>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d003      	beq.n	800aef0 <TIM_Base_SetConfig+0x40>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4a3e      	ldr	r2, [pc, #248]	; (800afe4 <TIM_Base_SetConfig+0x134>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d108      	bne.n	800af02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4313      	orrs	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a33      	ldr	r2, [pc, #204]	; (800afd4 <TIM_Base_SetConfig+0x124>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d027      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af10:	d023      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a30      	ldr	r2, [pc, #192]	; (800afd8 <TIM_Base_SetConfig+0x128>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d01f      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a2f      	ldr	r2, [pc, #188]	; (800afdc <TIM_Base_SetConfig+0x12c>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d01b      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a2e      	ldr	r2, [pc, #184]	; (800afe0 <TIM_Base_SetConfig+0x130>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d017      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a2d      	ldr	r2, [pc, #180]	; (800afe4 <TIM_Base_SetConfig+0x134>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d013      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a2c      	ldr	r2, [pc, #176]	; (800afe8 <TIM_Base_SetConfig+0x138>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d00f      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a2b      	ldr	r2, [pc, #172]	; (800afec <TIM_Base_SetConfig+0x13c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d00b      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a2a      	ldr	r2, [pc, #168]	; (800aff0 <TIM_Base_SetConfig+0x140>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d007      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a29      	ldr	r2, [pc, #164]	; (800aff4 <TIM_Base_SetConfig+0x144>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d003      	beq.n	800af5a <TIM_Base_SetConfig+0xaa>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a28      	ldr	r2, [pc, #160]	; (800aff8 <TIM_Base_SetConfig+0x148>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d108      	bne.n	800af6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	4313      	orrs	r3, r2
 800af78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	689a      	ldr	r2, [r3, #8]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a10      	ldr	r2, [pc, #64]	; (800afd4 <TIM_Base_SetConfig+0x124>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d00f      	beq.n	800afb8 <TIM_Base_SetConfig+0x108>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a12      	ldr	r2, [pc, #72]	; (800afe4 <TIM_Base_SetConfig+0x134>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00b      	beq.n	800afb8 <TIM_Base_SetConfig+0x108>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a11      	ldr	r2, [pc, #68]	; (800afe8 <TIM_Base_SetConfig+0x138>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d007      	beq.n	800afb8 <TIM_Base_SetConfig+0x108>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a10      	ldr	r2, [pc, #64]	; (800afec <TIM_Base_SetConfig+0x13c>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d003      	beq.n	800afb8 <TIM_Base_SetConfig+0x108>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a0f      	ldr	r2, [pc, #60]	; (800aff0 <TIM_Base_SetConfig+0x140>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d103      	bne.n	800afc0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	691a      	ldr	r2, [r3, #16]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	615a      	str	r2, [r3, #20]
}
 800afc6:	bf00      	nop
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	40010000 	.word	0x40010000
 800afd8:	40000400 	.word	0x40000400
 800afdc:	40000800 	.word	0x40000800
 800afe0:	40000c00 	.word	0x40000c00
 800afe4:	40010400 	.word	0x40010400
 800afe8:	40014000 	.word	0x40014000
 800afec:	40014400 	.word	0x40014400
 800aff0:	40014800 	.word	0x40014800
 800aff4:	4000e000 	.word	0x4000e000
 800aff8:	4000e400 	.word	0x4000e400

0800affc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	f023 0201 	bic.w	r2, r3, #1
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4b37      	ldr	r3, [pc, #220]	; (800b104 <TIM_OC1_SetConfig+0x108>)
 800b028:	4013      	ands	r3, r2
 800b02a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0303 	bic.w	r3, r3, #3
 800b032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f023 0302 	bic.w	r3, r3, #2
 800b044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a2d      	ldr	r2, [pc, #180]	; (800b108 <TIM_OC1_SetConfig+0x10c>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d00f      	beq.n	800b078 <TIM_OC1_SetConfig+0x7c>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a2c      	ldr	r2, [pc, #176]	; (800b10c <TIM_OC1_SetConfig+0x110>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d00b      	beq.n	800b078 <TIM_OC1_SetConfig+0x7c>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a2b      	ldr	r2, [pc, #172]	; (800b110 <TIM_OC1_SetConfig+0x114>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d007      	beq.n	800b078 <TIM_OC1_SetConfig+0x7c>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a2a      	ldr	r2, [pc, #168]	; (800b114 <TIM_OC1_SetConfig+0x118>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d003      	beq.n	800b078 <TIM_OC1_SetConfig+0x7c>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a29      	ldr	r2, [pc, #164]	; (800b118 <TIM_OC1_SetConfig+0x11c>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d10c      	bne.n	800b092 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f023 0308 	bic.w	r3, r3, #8
 800b07e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f023 0304 	bic.w	r3, r3, #4
 800b090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a1c      	ldr	r2, [pc, #112]	; (800b108 <TIM_OC1_SetConfig+0x10c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d00f      	beq.n	800b0ba <TIM_OC1_SetConfig+0xbe>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a1b      	ldr	r2, [pc, #108]	; (800b10c <TIM_OC1_SetConfig+0x110>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d00b      	beq.n	800b0ba <TIM_OC1_SetConfig+0xbe>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a1a      	ldr	r2, [pc, #104]	; (800b110 <TIM_OC1_SetConfig+0x114>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d007      	beq.n	800b0ba <TIM_OC1_SetConfig+0xbe>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a19      	ldr	r2, [pc, #100]	; (800b114 <TIM_OC1_SetConfig+0x118>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d003      	beq.n	800b0ba <TIM_OC1_SetConfig+0xbe>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a18      	ldr	r2, [pc, #96]	; (800b118 <TIM_OC1_SetConfig+0x11c>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d111      	bne.n	800b0de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	621a      	str	r2, [r3, #32]
}
 800b0f8:	bf00      	nop
 800b0fa:	371c      	adds	r7, #28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	fffeff8f 	.word	0xfffeff8f
 800b108:	40010000 	.word	0x40010000
 800b10c:	40010400 	.word	0x40010400
 800b110:	40014000 	.word	0x40014000
 800b114:	40014400 	.word	0x40014400
 800b118:	40014800 	.word	0x40014800

0800b11c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	f023 0210 	bic.w	r2, r3, #16
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b144:	68fa      	ldr	r2, [r7, #12]
 800b146:	4b34      	ldr	r3, [pc, #208]	; (800b218 <TIM_OC2_SetConfig+0xfc>)
 800b148:	4013      	ands	r3, r2
 800b14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	021b      	lsls	r3, r3, #8
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f023 0320 	bic.w	r3, r3, #32
 800b166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	011b      	lsls	r3, r3, #4
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	4313      	orrs	r3, r2
 800b172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a29      	ldr	r2, [pc, #164]	; (800b21c <TIM_OC2_SetConfig+0x100>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d003      	beq.n	800b184 <TIM_OC2_SetConfig+0x68>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a28      	ldr	r2, [pc, #160]	; (800b220 <TIM_OC2_SetConfig+0x104>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d10d      	bne.n	800b1a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	011b      	lsls	r3, r3, #4
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	4313      	orrs	r3, r2
 800b196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b19e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a1e      	ldr	r2, [pc, #120]	; (800b21c <TIM_OC2_SetConfig+0x100>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d00f      	beq.n	800b1c8 <TIM_OC2_SetConfig+0xac>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a1d      	ldr	r2, [pc, #116]	; (800b220 <TIM_OC2_SetConfig+0x104>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d00b      	beq.n	800b1c8 <TIM_OC2_SetConfig+0xac>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a1c      	ldr	r2, [pc, #112]	; (800b224 <TIM_OC2_SetConfig+0x108>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d007      	beq.n	800b1c8 <TIM_OC2_SetConfig+0xac>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a1b      	ldr	r2, [pc, #108]	; (800b228 <TIM_OC2_SetConfig+0x10c>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d003      	beq.n	800b1c8 <TIM_OC2_SetConfig+0xac>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a1a      	ldr	r2, [pc, #104]	; (800b22c <TIM_OC2_SetConfig+0x110>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d113      	bne.n	800b1f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	621a      	str	r2, [r3, #32]
}
 800b20a:	bf00      	nop
 800b20c:	371c      	adds	r7, #28
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	feff8fff 	.word	0xfeff8fff
 800b21c:	40010000 	.word	0x40010000
 800b220:	40010400 	.word	0x40010400
 800b224:	40014000 	.word	0x40014000
 800b228:	40014400 	.word	0x40014400
 800b22c:	40014800 	.word	0x40014800

0800b230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	69db      	ldr	r3, [r3, #28]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	4b33      	ldr	r3, [pc, #204]	; (800b328 <TIM_OC3_SetConfig+0xf8>)
 800b25c:	4013      	ands	r3, r2
 800b25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 0303 	bic.w	r3, r3, #3
 800b266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4313      	orrs	r3, r2
 800b270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	021b      	lsls	r3, r3, #8
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	4313      	orrs	r3, r2
 800b284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a28      	ldr	r2, [pc, #160]	; (800b32c <TIM_OC3_SetConfig+0xfc>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d003      	beq.n	800b296 <TIM_OC3_SetConfig+0x66>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a27      	ldr	r2, [pc, #156]	; (800b330 <TIM_OC3_SetConfig+0x100>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d10d      	bne.n	800b2b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b29c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	021b      	lsls	r3, r3, #8
 800b2a4:	697a      	ldr	r2, [r7, #20]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a1d      	ldr	r2, [pc, #116]	; (800b32c <TIM_OC3_SetConfig+0xfc>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d00f      	beq.n	800b2da <TIM_OC3_SetConfig+0xaa>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a1c      	ldr	r2, [pc, #112]	; (800b330 <TIM_OC3_SetConfig+0x100>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00b      	beq.n	800b2da <TIM_OC3_SetConfig+0xaa>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	; (800b334 <TIM_OC3_SetConfig+0x104>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d007      	beq.n	800b2da <TIM_OC3_SetConfig+0xaa>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1a      	ldr	r2, [pc, #104]	; (800b338 <TIM_OC3_SetConfig+0x108>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d003      	beq.n	800b2da <TIM_OC3_SetConfig+0xaa>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a19      	ldr	r2, [pc, #100]	; (800b33c <TIM_OC3_SetConfig+0x10c>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d113      	bne.n	800b302 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	011b      	lsls	r3, r3, #4
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	621a      	str	r2, [r3, #32]
}
 800b31c:	bf00      	nop
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	fffeff8f 	.word	0xfffeff8f
 800b32c:	40010000 	.word	0x40010000
 800b330:	40010400 	.word	0x40010400
 800b334:	40014000 	.word	0x40014000
 800b338:	40014400 	.word	0x40014400
 800b33c:	40014800 	.word	0x40014800

0800b340 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	4b24      	ldr	r3, [pc, #144]	; (800b3fc <TIM_OC4_SetConfig+0xbc>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4313      	orrs	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b38a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	031b      	lsls	r3, r3, #12
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	4313      	orrs	r3, r2
 800b396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a19      	ldr	r2, [pc, #100]	; (800b400 <TIM_OC4_SetConfig+0xc0>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d00f      	beq.n	800b3c0 <TIM_OC4_SetConfig+0x80>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a18      	ldr	r2, [pc, #96]	; (800b404 <TIM_OC4_SetConfig+0xc4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00b      	beq.n	800b3c0 <TIM_OC4_SetConfig+0x80>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a17      	ldr	r2, [pc, #92]	; (800b408 <TIM_OC4_SetConfig+0xc8>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d007      	beq.n	800b3c0 <TIM_OC4_SetConfig+0x80>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a16      	ldr	r2, [pc, #88]	; (800b40c <TIM_OC4_SetConfig+0xcc>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d003      	beq.n	800b3c0 <TIM_OC4_SetConfig+0x80>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a15      	ldr	r2, [pc, #84]	; (800b410 <TIM_OC4_SetConfig+0xd0>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d109      	bne.n	800b3d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	019b      	lsls	r3, r3, #6
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	621a      	str	r2, [r3, #32]
}
 800b3ee:	bf00      	nop
 800b3f0:	371c      	adds	r7, #28
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	feff8fff 	.word	0xfeff8fff
 800b400:	40010000 	.word	0x40010000
 800b404:	40010400 	.word	0x40010400
 800b408:	40014000 	.word	0x40014000
 800b40c:	40014400 	.word	0x40014400
 800b410:	40014800 	.word	0x40014800

0800b414 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b414:	b480      	push	{r7}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	4b21      	ldr	r3, [pc, #132]	; (800b4c4 <TIM_OC5_SetConfig+0xb0>)
 800b440:	4013      	ands	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b454:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	041b      	lsls	r3, r3, #16
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	4313      	orrs	r3, r2
 800b460:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <TIM_OC5_SetConfig+0xb4>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d00f      	beq.n	800b48a <TIM_OC5_SetConfig+0x76>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a17      	ldr	r2, [pc, #92]	; (800b4cc <TIM_OC5_SetConfig+0xb8>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d00b      	beq.n	800b48a <TIM_OC5_SetConfig+0x76>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a16      	ldr	r2, [pc, #88]	; (800b4d0 <TIM_OC5_SetConfig+0xbc>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d007      	beq.n	800b48a <TIM_OC5_SetConfig+0x76>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a15      	ldr	r2, [pc, #84]	; (800b4d4 <TIM_OC5_SetConfig+0xc0>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d003      	beq.n	800b48a <TIM_OC5_SetConfig+0x76>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a14      	ldr	r2, [pc, #80]	; (800b4d8 <TIM_OC5_SetConfig+0xc4>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d109      	bne.n	800b49e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	021b      	lsls	r3, r3, #8
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	621a      	str	r2, [r3, #32]
}
 800b4b8:	bf00      	nop
 800b4ba:	371c      	adds	r7, #28
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	fffeff8f 	.word	0xfffeff8f
 800b4c8:	40010000 	.word	0x40010000
 800b4cc:	40010400 	.word	0x40010400
 800b4d0:	40014000 	.word	0x40014000
 800b4d4:	40014400 	.word	0x40014400
 800b4d8:	40014800 	.word	0x40014800

0800b4dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4b22      	ldr	r3, [pc, #136]	; (800b590 <TIM_OC6_SetConfig+0xb4>)
 800b508:	4013      	ands	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	021b      	lsls	r3, r3, #8
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	4313      	orrs	r3, r2
 800b516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b51e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	051b      	lsls	r3, r3, #20
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	4313      	orrs	r3, r2
 800b52a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a19      	ldr	r2, [pc, #100]	; (800b594 <TIM_OC6_SetConfig+0xb8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d00f      	beq.n	800b554 <TIM_OC6_SetConfig+0x78>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a18      	ldr	r2, [pc, #96]	; (800b598 <TIM_OC6_SetConfig+0xbc>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d00b      	beq.n	800b554 <TIM_OC6_SetConfig+0x78>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a17      	ldr	r2, [pc, #92]	; (800b59c <TIM_OC6_SetConfig+0xc0>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d007      	beq.n	800b554 <TIM_OC6_SetConfig+0x78>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a16      	ldr	r2, [pc, #88]	; (800b5a0 <TIM_OC6_SetConfig+0xc4>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d003      	beq.n	800b554 <TIM_OC6_SetConfig+0x78>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a15      	ldr	r2, [pc, #84]	; (800b5a4 <TIM_OC6_SetConfig+0xc8>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d109      	bne.n	800b568 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b55a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	029b      	lsls	r3, r3, #10
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	4313      	orrs	r3, r2
 800b566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	697a      	ldr	r2, [r7, #20]
 800b56c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	621a      	str	r2, [r3, #32]
}
 800b582:	bf00      	nop
 800b584:	371c      	adds	r7, #28
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	feff8fff 	.word	0xfeff8fff
 800b594:	40010000 	.word	0x40010000
 800b598:	40010400 	.word	0x40010400
 800b59c:	40014000 	.word	0x40014000
 800b5a0:	40014400 	.word	0x40014400
 800b5a4:	40014800 	.word	0x40014800

0800b5a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f003 031f 	and.w	r3, r3, #31
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a1a      	ldr	r2, [r3, #32]
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	401a      	ands	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6a1a      	ldr	r2, [r3, #32]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	f003 031f 	and.w	r3, r3, #31
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b5e0:	431a      	orrs	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	621a      	str	r2, [r3, #32]
}
 800b5e6:	bf00      	nop
 800b5e8:	371c      	adds	r7, #28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b604:	2b01      	cmp	r3, #1
 800b606:	d101      	bne.n	800b60c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b608:	2302      	movs	r3, #2
 800b60a:	e077      	b.n	800b6fc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a35      	ldr	r2, [pc, #212]	; (800b708 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d004      	beq.n	800b640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a34      	ldr	r2, [pc, #208]	; (800b70c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d108      	bne.n	800b652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	4313      	orrs	r3, r2
 800b662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a25      	ldr	r2, [pc, #148]	; (800b708 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d02c      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b67e:	d027      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a22      	ldr	r2, [pc, #136]	; (800b710 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d022      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a21      	ldr	r2, [pc, #132]	; (800b714 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d01d      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a1f      	ldr	r2, [pc, #124]	; (800b718 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d018      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a1a      	ldr	r2, [pc, #104]	; (800b70c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d013      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a1b      	ldr	r2, [pc, #108]	; (800b71c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d00e      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a1a      	ldr	r2, [pc, #104]	; (800b720 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d009      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a18      	ldr	r2, [pc, #96]	; (800b724 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d004      	beq.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d10c      	bne.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	40010000 	.word	0x40010000
 800b70c:	40010400 	.word	0x40010400
 800b710:	40000400 	.word	0x40000400
 800b714:	40000800 	.word	0x40000800
 800b718:	40000c00 	.word	0x40000c00
 800b71c:	40001800 	.word	0x40001800
 800b720:	40014000 	.word	0x40014000
 800b724:	4000e000 	.word	0x4000e000
 800b728:	4000e400 	.word	0x4000e400

0800b72c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b736:	2300      	movs	r3, #0
 800b738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b740:	2b01      	cmp	r3, #1
 800b742:	d101      	bne.n	800b748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b744:	2302      	movs	r3, #2
 800b746:	e087      	b.n	800b858 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	4313      	orrs	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	4313      	orrs	r3, r2
 800b778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4313      	orrs	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	4313      	orrs	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	041b      	lsls	r3, r3, #16
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a27      	ldr	r2, [pc, #156]	; (800b864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d004      	beq.n	800b7d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a25      	ldr	r2, [pc, #148]	; (800b868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d106      	bne.n	800b7e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	69db      	ldr	r3, [r3, #28]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a1e      	ldr	r2, [pc, #120]	; (800b864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d004      	beq.n	800b7f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a1d      	ldr	r2, [pc, #116]	; (800b868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d126      	bne.n	800b846 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b802:	051b      	lsls	r3, r3, #20
 800b804:	4313      	orrs	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	4313      	orrs	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	4313      	orrs	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a0e      	ldr	r2, [pc, #56]	; (800b864 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d004      	beq.n	800b838 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a0d      	ldr	r2, [pc, #52]	; (800b868 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d106      	bne.n	800b846 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	40010000 	.word	0x40010000
 800b868:	40010400 	.word	0x40010400

0800b86c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d101      	bne.n	800b8ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e042      	b.n	800b940 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d106      	bne.n	800b8d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7f8 fd0d 	bl	80042ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2224      	movs	r2, #36	; 0x24
 800b8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 0201 	bic.w	r2, r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fcdc 	bl	800c2a8 <UART_SetConfig>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e022      	b.n	800b940 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d002      	beq.n	800b908 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f001 fb3c 	bl	800cf80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685a      	ldr	r2, [r3, #4]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b916:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689a      	ldr	r2, [r3, #8]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b926:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f001 fbc3 	bl	800d0c4 <UART_CheckIdleState>
 800b93e:	4603      	mov	r3, r0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08a      	sub	sp, #40	; 0x28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	4613      	mov	r3, r2
 800b954:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b95c:	2b20      	cmp	r3, #32
 800b95e:	d17a      	bne.n	800ba56 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <HAL_UART_Transmit_DMA+0x24>
 800b966:	88fb      	ldrh	r3, [r7, #6]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e073      	b.n	800ba58 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b976:	2b01      	cmp	r3, #1
 800b978:	d101      	bne.n	800b97e <HAL_UART_Transmit_DMA+0x36>
 800b97a:	2302      	movs	r3, #2
 800b97c:	e06c      	b.n	800ba58 <HAL_UART_Transmit_DMA+0x110>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	88fa      	ldrh	r2, [r7, #6]
 800b990:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2221      	movs	r2, #33	; 0x21
 800b9a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d02c      	beq.n	800ba0e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9b8:	4a29      	ldr	r2, [pc, #164]	; (800ba60 <HAL_UART_Transmit_DMA+0x118>)
 800b9ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9c0:	4a28      	ldr	r2, [pc, #160]	; (800ba64 <HAL_UART_Transmit_DMA+0x11c>)
 800b9c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9c8:	4a27      	ldr	r2, [pc, #156]	; (800ba68 <HAL_UART_Transmit_DMA+0x120>)
 800b9ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9dc:	4619      	mov	r1, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3328      	adds	r3, #40	; 0x28
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	88fb      	ldrh	r3, [r7, #6]
 800b9e8:	f7f9 fd02 	bl	80053f0 <HAL_DMA_Start_IT>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00d      	beq.n	800ba0e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2210      	movs	r2, #16
 800b9f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e024      	b.n	800ba58 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2240      	movs	r2, #64	; 0x40
 800ba14:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	e853 3f00 	ldrex	r3, [r3]
 800ba2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba34:	627b      	str	r3, [r7, #36]	; 0x24
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba3e:	623a      	str	r2, [r7, #32]
 800ba40:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba42:	69f9      	ldr	r1, [r7, #28]
 800ba44:	6a3a      	ldr	r2, [r7, #32]
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e5      	bne.n	800ba1e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e000      	b.n	800ba58 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ba56:	2302      	movs	r3, #2
  }
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3728      	adds	r7, #40	; 0x28
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	0800d58d 	.word	0x0800d58d
 800ba64:	0800d623 	.word	0x0800d623
 800ba68:	0800d799 	.word	0x0800d799

0800ba6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	4613      	mov	r3, r2
 800ba78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba80:	2b20      	cmp	r3, #32
 800ba82:	d142      	bne.n	800bb0a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <HAL_UART_Receive_DMA+0x24>
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e03b      	b.n	800bb0c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d101      	bne.n	800baa2 <HAL_UART_Receive_DMA+0x36>
 800ba9e:	2302      	movs	r3, #2
 800baa0:	e034      	b.n	800bb0c <HAL_UART_Receive_DMA+0xa0>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a17      	ldr	r2, [pc, #92]	; (800bb14 <HAL_UART_Receive_DMA+0xa8>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d01f      	beq.n	800bafa <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d018      	beq.n	800bafa <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	e853 3f00 	ldrex	r3, [r3]
 800bad4:	613b      	str	r3, [r7, #16]
   return(result);
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800badc:	627b      	str	r3, [r7, #36]	; 0x24
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	461a      	mov	r2, r3
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	623b      	str	r3, [r7, #32]
 800bae8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	69f9      	ldr	r1, [r7, #28]
 800baec:	6a3a      	ldr	r2, [r7, #32]
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	61bb      	str	r3, [r7, #24]
   return(result);
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e6      	bne.n	800bac8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bafa:	88fb      	ldrh	r3, [r7, #6]
 800bafc:	461a      	mov	r2, r3
 800bafe:	68b9      	ldr	r1, [r7, #8]
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f001 fbf3 	bl	800d2ec <UART_Start_Receive_DMA>
 800bb06:	4603      	mov	r3, r0
 800bb08:	e000      	b.n	800bb0c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bb0a:	2302      	movs	r3, #2
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3728      	adds	r7, #40	; 0x28
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	58000c00 	.word	0x58000c00

0800bb18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b0ba      	sub	sp, #232	; 0xe8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	69db      	ldr	r3, [r3, #28]
 800bb26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bb42:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb46:	4013      	ands	r3, r2
 800bb48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d11b      	bne.n	800bb8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb58:	f003 0320 	and.w	r3, r3, #32
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d015      	beq.n	800bb8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb64:	f003 0320 	and.w	r3, r3, #32
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d105      	bne.n	800bb78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d009      	beq.n	800bb8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 835a 	beq.w	800c236 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	4798      	blx	r3
      }
      return;
 800bb8a:	e354      	b.n	800c236 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 811f 	beq.w	800bdd4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bb9a:	4b8b      	ldr	r3, [pc, #556]	; (800bdc8 <HAL_UART_IRQHandler+0x2b0>)
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bba2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bba6:	4b89      	ldr	r3, [pc, #548]	; (800bdcc <HAL_UART_IRQHandler+0x2b4>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 8112 	beq.w	800bdd4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d011      	beq.n	800bbe0 <HAL_UART_IRQHandler+0xc8>
 800bbbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbd6:	f043 0201 	orr.w	r2, r3, #1
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe4:	f003 0302 	and.w	r3, r3, #2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d011      	beq.n	800bc10 <HAL_UART_IRQHandler+0xf8>
 800bbec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbf0:	f003 0301 	and.w	r3, r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00b      	beq.n	800bc10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc06:	f043 0204 	orr.w	r2, r3, #4
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d011      	beq.n	800bc40 <HAL_UART_IRQHandler+0x128>
 800bc1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00b      	beq.n	800bc40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2204      	movs	r2, #4
 800bc2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc36:	f043 0202 	orr.w	r2, r3, #2
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc44:	f003 0308 	and.w	r3, r3, #8
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d017      	beq.n	800bc7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc50:	f003 0320 	and.w	r3, r3, #32
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d105      	bne.n	800bc64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc5c:	4b5a      	ldr	r3, [pc, #360]	; (800bdc8 <HAL_UART_IRQHandler+0x2b0>)
 800bc5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2208      	movs	r2, #8
 800bc6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc72:	f043 0208 	orr.w	r2, r3, #8
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d012      	beq.n	800bcae <HAL_UART_IRQHandler+0x196>
 800bc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00c      	beq.n	800bcae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca4:	f043 0220 	orr.w	r2, r3, #32
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 82c0 	beq.w	800c23a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 0320 	and.w	r3, r3, #32
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d013      	beq.n	800bcee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d105      	bne.n	800bcde <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d007      	beq.n	800bcee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d003      	beq.n	800bcee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd02:	2b40      	cmp	r3, #64	; 0x40
 800bd04:	d005      	beq.n	800bd12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d04f      	beq.n	800bdb2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f001 fbd4 	bl	800d4c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd22:	2b40      	cmp	r3, #64	; 0x40
 800bd24:	d141      	bne.n	800bdaa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	3308      	adds	r3, #8
 800bd2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd34:	e853 3f00 	ldrex	r3, [r3]
 800bd38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1d9      	bne.n	800bd26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d013      	beq.n	800bda2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd7e:	4a14      	ldr	r2, [pc, #80]	; (800bdd0 <HAL_UART_IRQHandler+0x2b8>)
 800bd80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fa f8ba 	bl	8005f00 <HAL_DMA_Abort_IT>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d017      	beq.n	800bdc2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda0:	e00f      	b.n	800bdc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fa6a 	bl	800c27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda8:	e00b      	b.n	800bdc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fa66 	bl	800c27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdb0:	e007      	b.n	800bdc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fa62 	bl	800c27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bdc0:	e23b      	b.n	800c23a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdc2:	bf00      	nop
    return;
 800bdc4:	e239      	b.n	800c23a <HAL_UART_IRQHandler+0x722>
 800bdc6:	bf00      	nop
 800bdc8:	10000001 	.word	0x10000001
 800bdcc:	04000120 	.word	0x04000120
 800bdd0:	0800d819 	.word	0x0800d819

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	f040 81ce 	bne.w	800c17a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bdde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bde2:	f003 0310 	and.w	r3, r3, #16
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 81c7 	beq.w	800c17a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bdec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdf0:	f003 0310 	and.w	r3, r3, #16
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 81c0 	beq.w	800c17a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	2210      	movs	r2, #16
 800be00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0c:	2b40      	cmp	r3, #64	; 0x40
 800be0e:	f040 813b 	bne.w	800c088 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a8b      	ldr	r2, [pc, #556]	; (800c048 <HAL_UART_IRQHandler+0x530>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d059      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a89      	ldr	r2, [pc, #548]	; (800c04c <HAL_UART_IRQHandler+0x534>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d053      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a87      	ldr	r2, [pc, #540]	; (800c050 <HAL_UART_IRQHandler+0x538>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d04d      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a85      	ldr	r2, [pc, #532]	; (800c054 <HAL_UART_IRQHandler+0x53c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d047      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a83      	ldr	r2, [pc, #524]	; (800c058 <HAL_UART_IRQHandler+0x540>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d041      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a81      	ldr	r2, [pc, #516]	; (800c05c <HAL_UART_IRQHandler+0x544>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d03b      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a7f      	ldr	r2, [pc, #508]	; (800c060 <HAL_UART_IRQHandler+0x548>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d035      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a7d      	ldr	r2, [pc, #500]	; (800c064 <HAL_UART_IRQHandler+0x54c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d02f      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a7b      	ldr	r2, [pc, #492]	; (800c068 <HAL_UART_IRQHandler+0x550>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d029      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a79      	ldr	r2, [pc, #484]	; (800c06c <HAL_UART_IRQHandler+0x554>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d023      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a77      	ldr	r2, [pc, #476]	; (800c070 <HAL_UART_IRQHandler+0x558>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d01d      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a75      	ldr	r2, [pc, #468]	; (800c074 <HAL_UART_IRQHandler+0x55c>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d017      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a73      	ldr	r2, [pc, #460]	; (800c078 <HAL_UART_IRQHandler+0x560>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d011      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a71      	ldr	r2, [pc, #452]	; (800c07c <HAL_UART_IRQHandler+0x564>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d00b      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a6f      	ldr	r2, [pc, #444]	; (800c080 <HAL_UART_IRQHandler+0x568>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d005      	beq.n	800bed2 <HAL_UART_IRQHandler+0x3ba>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a6d      	ldr	r2, [pc, #436]	; (800c084 <HAL_UART_IRQHandler+0x56c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d105      	bne.n	800bede <HAL_UART_IRQHandler+0x3c6>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	b29b      	uxth	r3, r3
 800bedc:	e004      	b.n	800bee8 <HAL_UART_IRQHandler+0x3d0>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800beec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 81a4 	beq.w	800c23e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800befc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf00:	429a      	cmp	r2, r3
 800bf02:	f080 819c 	bcs.w	800c23e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf14:	69db      	ldr	r3, [r3, #28]
 800bf16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf1a:	f000 8086 	beq.w	800c02a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	461a      	mov	r2, r3
 800bf44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf58:	e841 2300 	strex	r3, r2, [r1]
 800bf5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1da      	bne.n	800bf1e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf72:	e853 3f00 	ldrex	r3, [r3]
 800bf76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf7a:	f023 0301 	bic.w	r3, r3, #1
 800bf7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3308      	adds	r3, #8
 800bf88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e1      	bne.n	800bf68 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3308      	adds	r3, #8
 800bfaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bfca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bfce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bfd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e3      	bne.n	800bfa4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff2:	e853 3f00 	ldrex	r3, [r3]
 800bff6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bffa:	f023 0310 	bic.w	r3, r3, #16
 800bffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	461a      	mov	r2, r3
 800c008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c00c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c00e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c010:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c014:	e841 2300 	strex	r3, r2, [r1]
 800c018:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e4      	bne.n	800bfea <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c024:	4618      	mov	r0, r3
 800c026:	f7f9 fc4d 	bl	80058c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c036:	b29b      	uxth	r3, r3
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f926 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c044:	e0fb      	b.n	800c23e <HAL_UART_IRQHandler+0x726>
 800c046:	bf00      	nop
 800c048:	40020010 	.word	0x40020010
 800c04c:	40020028 	.word	0x40020028
 800c050:	40020040 	.word	0x40020040
 800c054:	40020058 	.word	0x40020058
 800c058:	40020070 	.word	0x40020070
 800c05c:	40020088 	.word	0x40020088
 800c060:	400200a0 	.word	0x400200a0
 800c064:	400200b8 	.word	0x400200b8
 800c068:	40020410 	.word	0x40020410
 800c06c:	40020428 	.word	0x40020428
 800c070:	40020440 	.word	0x40020440
 800c074:	40020458 	.word	0x40020458
 800c078:	40020470 	.word	0x40020470
 800c07c:	40020488 	.word	0x40020488
 800c080:	400204a0 	.word	0x400204a0
 800c084:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c094:	b29b      	uxth	r3, r3
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 80cc 	beq.w	800c242 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c0aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 80c7 	beq.w	800c242 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	e853 3f00 	ldrex	r3, [r3]
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0d6:	647b      	str	r3, [r7, #68]	; 0x44
 800c0d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0de:	e841 2300 	strex	r3, r2, [r1]
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e4      	bne.n	800c0b4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f4:	e853 3f00 	ldrex	r3, [r3]
 800c0f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c0fa:	6a3a      	ldr	r2, [r7, #32]
 800c0fc:	4b54      	ldr	r3, [pc, #336]	; (800c250 <HAL_UART_IRQHandler+0x738>)
 800c0fe:	4013      	ands	r3, r2
 800c100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3308      	adds	r3, #8
 800c10a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c10e:	633a      	str	r2, [r7, #48]	; 0x30
 800c110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1e3      	bne.n	800c0ea <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2220      	movs	r2, #32
 800c126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	60fb      	str	r3, [r7, #12]
   return(result);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f023 0310 	bic.w	r3, r3, #16
 800c14a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c158:	61fb      	str	r3, [r7, #28]
 800c15a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	69b9      	ldr	r1, [r7, #24]
 800c15e:	69fa      	ldr	r2, [r7, #28]
 800c160:	e841 2300 	strex	r3, r2, [r1]
 800c164:	617b      	str	r3, [r7, #20]
   return(result);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e4      	bne.n	800c136 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c16c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f88c 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c178:	e063      	b.n	800c242 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c17e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00e      	beq.n	800c1a4 <HAL_UART_IRQHandler+0x68c>
 800c186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c18a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d008      	beq.n	800c1a4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c19a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f001 fb7c 	bl	800d89a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1a2:	e051      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d014      	beq.n	800c1da <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d105      	bne.n	800c1c8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c1bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d008      	beq.n	800c1da <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d03a      	beq.n	800c246 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	4798      	blx	r3
    }
    return;
 800c1d8:	e035      	b.n	800c246 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d009      	beq.n	800c1fa <HAL_UART_IRQHandler+0x6e2>
 800c1e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f001 fb26 	bl	800d844 <UART_EndTransmit_IT>
    return;
 800c1f8:	e026      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c1fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c202:	2b00      	cmp	r3, #0
 800c204:	d009      	beq.n	800c21a <HAL_UART_IRQHandler+0x702>
 800c206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c20a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 fb55 	bl	800d8c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c218:	e016      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c21e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d010      	beq.n	800c248 <HAL_UART_IRQHandler+0x730>
 800c226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	da0c      	bge.n	800c248 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f001 fb3d 	bl	800d8ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c234:	e008      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
      return;
 800c236:	bf00      	nop
 800c238:	e006      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
    return;
 800c23a:	bf00      	nop
 800c23c:	e004      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
      return;
 800c23e:	bf00      	nop
 800c240:	e002      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
      return;
 800c242:	bf00      	nop
 800c244:	e000      	b.n	800c248 <HAL_UART_IRQHandler+0x730>
    return;
 800c246:	bf00      	nop
  }
}
 800c248:	37e8      	adds	r7, #232	; 0xe8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	effffffe 	.word	0xeffffffe

0800c254 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c29c:	bf00      	nop
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2ac:	b092      	sub	sp, #72	; 0x48
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	689a      	ldr	r2, [r3, #8]
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	69db      	ldr	r3, [r3, #28]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	4bbe      	ldr	r3, [pc, #760]	; (800c5d0 <UART_SetConfig+0x328>)
 800c2d8:	4013      	ands	r3, r2
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	6812      	ldr	r2, [r2, #0]
 800c2de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c2e0:	430b      	orrs	r3, r1
 800c2e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	68da      	ldr	r2, [r3, #12]
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4ab3      	ldr	r2, [pc, #716]	; (800c5d4 <UART_SetConfig+0x32c>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d004      	beq.n	800c314 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c310:	4313      	orrs	r3, r2
 800c312:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689a      	ldr	r2, [r3, #8]
 800c31a:	4baf      	ldr	r3, [pc, #700]	; (800c5d8 <UART_SetConfig+0x330>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	6812      	ldr	r2, [r2, #0]
 800c322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c324:	430b      	orrs	r3, r1
 800c326:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32e:	f023 010f 	bic.w	r1, r3, #15
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	430a      	orrs	r2, r1
 800c33c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4aa6      	ldr	r2, [pc, #664]	; (800c5dc <UART_SetConfig+0x334>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d177      	bne.n	800c438 <UART_SetConfig+0x190>
 800c348:	4ba5      	ldr	r3, [pc, #660]	; (800c5e0 <UART_SetConfig+0x338>)
 800c34a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c34c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c350:	2b28      	cmp	r3, #40	; 0x28
 800c352:	d86d      	bhi.n	800c430 <UART_SetConfig+0x188>
 800c354:	a201      	add	r2, pc, #4	; (adr r2, 800c35c <UART_SetConfig+0xb4>)
 800c356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35a:	bf00      	nop
 800c35c:	0800c401 	.word	0x0800c401
 800c360:	0800c431 	.word	0x0800c431
 800c364:	0800c431 	.word	0x0800c431
 800c368:	0800c431 	.word	0x0800c431
 800c36c:	0800c431 	.word	0x0800c431
 800c370:	0800c431 	.word	0x0800c431
 800c374:	0800c431 	.word	0x0800c431
 800c378:	0800c431 	.word	0x0800c431
 800c37c:	0800c409 	.word	0x0800c409
 800c380:	0800c431 	.word	0x0800c431
 800c384:	0800c431 	.word	0x0800c431
 800c388:	0800c431 	.word	0x0800c431
 800c38c:	0800c431 	.word	0x0800c431
 800c390:	0800c431 	.word	0x0800c431
 800c394:	0800c431 	.word	0x0800c431
 800c398:	0800c431 	.word	0x0800c431
 800c39c:	0800c411 	.word	0x0800c411
 800c3a0:	0800c431 	.word	0x0800c431
 800c3a4:	0800c431 	.word	0x0800c431
 800c3a8:	0800c431 	.word	0x0800c431
 800c3ac:	0800c431 	.word	0x0800c431
 800c3b0:	0800c431 	.word	0x0800c431
 800c3b4:	0800c431 	.word	0x0800c431
 800c3b8:	0800c431 	.word	0x0800c431
 800c3bc:	0800c419 	.word	0x0800c419
 800c3c0:	0800c431 	.word	0x0800c431
 800c3c4:	0800c431 	.word	0x0800c431
 800c3c8:	0800c431 	.word	0x0800c431
 800c3cc:	0800c431 	.word	0x0800c431
 800c3d0:	0800c431 	.word	0x0800c431
 800c3d4:	0800c431 	.word	0x0800c431
 800c3d8:	0800c431 	.word	0x0800c431
 800c3dc:	0800c421 	.word	0x0800c421
 800c3e0:	0800c431 	.word	0x0800c431
 800c3e4:	0800c431 	.word	0x0800c431
 800c3e8:	0800c431 	.word	0x0800c431
 800c3ec:	0800c431 	.word	0x0800c431
 800c3f0:	0800c431 	.word	0x0800c431
 800c3f4:	0800c431 	.word	0x0800c431
 800c3f8:	0800c431 	.word	0x0800c431
 800c3fc:	0800c429 	.word	0x0800c429
 800c400:	2301      	movs	r3, #1
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c406:	e326      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c408:	2304      	movs	r3, #4
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c40e:	e322      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c410:	2308      	movs	r3, #8
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c416:	e31e      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c418:	2310      	movs	r3, #16
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41e:	e31a      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c420:	2320      	movs	r3, #32
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c426:	e316      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c428:	2340      	movs	r3, #64	; 0x40
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42e:	e312      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c430:	2380      	movs	r3, #128	; 0x80
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c436:	e30e      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a69      	ldr	r2, [pc, #420]	; (800c5e4 <UART_SetConfig+0x33c>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d130      	bne.n	800c4a4 <UART_SetConfig+0x1fc>
 800c442:	4b67      	ldr	r3, [pc, #412]	; (800c5e0 <UART_SetConfig+0x338>)
 800c444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c446:	f003 0307 	and.w	r3, r3, #7
 800c44a:	2b05      	cmp	r3, #5
 800c44c:	d826      	bhi.n	800c49c <UART_SetConfig+0x1f4>
 800c44e:	a201      	add	r2, pc, #4	; (adr r2, 800c454 <UART_SetConfig+0x1ac>)
 800c450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c454:	0800c46d 	.word	0x0800c46d
 800c458:	0800c475 	.word	0x0800c475
 800c45c:	0800c47d 	.word	0x0800c47d
 800c460:	0800c485 	.word	0x0800c485
 800c464:	0800c48d 	.word	0x0800c48d
 800c468:	0800c495 	.word	0x0800c495
 800c46c:	2300      	movs	r3, #0
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e2f0      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c474:	2304      	movs	r3, #4
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47a:	e2ec      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c47c:	2308      	movs	r3, #8
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c482:	e2e8      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c484:	2310      	movs	r3, #16
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e2e4      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c48c:	2320      	movs	r3, #32
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e2e0      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c494:	2340      	movs	r3, #64	; 0x40
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e2dc      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c49c:	2380      	movs	r3, #128	; 0x80
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a2:	e2d8      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a4f      	ldr	r2, [pc, #316]	; (800c5e8 <UART_SetConfig+0x340>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d130      	bne.n	800c510 <UART_SetConfig+0x268>
 800c4ae:	4b4c      	ldr	r3, [pc, #304]	; (800c5e0 <UART_SetConfig+0x338>)
 800c4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	2b05      	cmp	r3, #5
 800c4b8:	d826      	bhi.n	800c508 <UART_SetConfig+0x260>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <UART_SetConfig+0x218>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c4d9 	.word	0x0800c4d9
 800c4c4:	0800c4e1 	.word	0x0800c4e1
 800c4c8:	0800c4e9 	.word	0x0800c4e9
 800c4cc:	0800c4f1 	.word	0x0800c4f1
 800c4d0:	0800c4f9 	.word	0x0800c4f9
 800c4d4:	0800c501 	.word	0x0800c501
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e2ba      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e2b6      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e2b2      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c4f0:	2310      	movs	r3, #16
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f6:	e2ae      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c4f8:	2320      	movs	r3, #32
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fe:	e2aa      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c500:	2340      	movs	r3, #64	; 0x40
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c506:	e2a6      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c508:	2380      	movs	r3, #128	; 0x80
 800c50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50e:	e2a2      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a35      	ldr	r2, [pc, #212]	; (800c5ec <UART_SetConfig+0x344>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d130      	bne.n	800c57c <UART_SetConfig+0x2d4>
 800c51a:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <UART_SetConfig+0x338>)
 800c51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	2b05      	cmp	r3, #5
 800c524:	d826      	bhi.n	800c574 <UART_SetConfig+0x2cc>
 800c526:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <UART_SetConfig+0x284>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c545 	.word	0x0800c545
 800c530:	0800c54d 	.word	0x0800c54d
 800c534:	0800c555 	.word	0x0800c555
 800c538:	0800c55d 	.word	0x0800c55d
 800c53c:	0800c565 	.word	0x0800c565
 800c540:	0800c56d 	.word	0x0800c56d
 800c544:	2300      	movs	r3, #0
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e284      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c54c:	2304      	movs	r3, #4
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e280      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c554:	2308      	movs	r3, #8
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e27c      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c55c:	2310      	movs	r3, #16
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e278      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c564:	2320      	movs	r3, #32
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e274      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c56c:	2340      	movs	r3, #64	; 0x40
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c572:	e270      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c574:	2380      	movs	r3, #128	; 0x80
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57a:	e26c      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a1b      	ldr	r2, [pc, #108]	; (800c5f0 <UART_SetConfig+0x348>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d142      	bne.n	800c60c <UART_SetConfig+0x364>
 800c586:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <UART_SetConfig+0x338>)
 800c588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58a:	f003 0307 	and.w	r3, r3, #7
 800c58e:	2b05      	cmp	r3, #5
 800c590:	d838      	bhi.n	800c604 <UART_SetConfig+0x35c>
 800c592:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <UART_SetConfig+0x2f0>)
 800c594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c598:	0800c5b1 	.word	0x0800c5b1
 800c59c:	0800c5b9 	.word	0x0800c5b9
 800c5a0:	0800c5c1 	.word	0x0800c5c1
 800c5a4:	0800c5c9 	.word	0x0800c5c9
 800c5a8:	0800c5f5 	.word	0x0800c5f5
 800c5ac:	0800c5fd 	.word	0x0800c5fd
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e24e      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c5b8:	2304      	movs	r3, #4
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e24a      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e246      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c5c8:	2310      	movs	r3, #16
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e242      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c5d0:	cfff69f3 	.word	0xcfff69f3
 800c5d4:	58000c00 	.word	0x58000c00
 800c5d8:	11fff4ff 	.word	0x11fff4ff
 800c5dc:	40011000 	.word	0x40011000
 800c5e0:	58024400 	.word	0x58024400
 800c5e4:	40004400 	.word	0x40004400
 800c5e8:	40004800 	.word	0x40004800
 800c5ec:	40004c00 	.word	0x40004c00
 800c5f0:	40005000 	.word	0x40005000
 800c5f4:	2320      	movs	r3, #32
 800c5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fa:	e22c      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c5fc:	2340      	movs	r3, #64	; 0x40
 800c5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c602:	e228      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c604:	2380      	movs	r3, #128	; 0x80
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60a:	e224      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4ab1      	ldr	r2, [pc, #708]	; (800c8d8 <UART_SetConfig+0x630>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d176      	bne.n	800c704 <UART_SetConfig+0x45c>
 800c616:	4bb1      	ldr	r3, [pc, #708]	; (800c8dc <UART_SetConfig+0x634>)
 800c618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c61e:	2b28      	cmp	r3, #40	; 0x28
 800c620:	d86c      	bhi.n	800c6fc <UART_SetConfig+0x454>
 800c622:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <UART_SetConfig+0x380>)
 800c624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c628:	0800c6cd 	.word	0x0800c6cd
 800c62c:	0800c6fd 	.word	0x0800c6fd
 800c630:	0800c6fd 	.word	0x0800c6fd
 800c634:	0800c6fd 	.word	0x0800c6fd
 800c638:	0800c6fd 	.word	0x0800c6fd
 800c63c:	0800c6fd 	.word	0x0800c6fd
 800c640:	0800c6fd 	.word	0x0800c6fd
 800c644:	0800c6fd 	.word	0x0800c6fd
 800c648:	0800c6d5 	.word	0x0800c6d5
 800c64c:	0800c6fd 	.word	0x0800c6fd
 800c650:	0800c6fd 	.word	0x0800c6fd
 800c654:	0800c6fd 	.word	0x0800c6fd
 800c658:	0800c6fd 	.word	0x0800c6fd
 800c65c:	0800c6fd 	.word	0x0800c6fd
 800c660:	0800c6fd 	.word	0x0800c6fd
 800c664:	0800c6fd 	.word	0x0800c6fd
 800c668:	0800c6dd 	.word	0x0800c6dd
 800c66c:	0800c6fd 	.word	0x0800c6fd
 800c670:	0800c6fd 	.word	0x0800c6fd
 800c674:	0800c6fd 	.word	0x0800c6fd
 800c678:	0800c6fd 	.word	0x0800c6fd
 800c67c:	0800c6fd 	.word	0x0800c6fd
 800c680:	0800c6fd 	.word	0x0800c6fd
 800c684:	0800c6fd 	.word	0x0800c6fd
 800c688:	0800c6e5 	.word	0x0800c6e5
 800c68c:	0800c6fd 	.word	0x0800c6fd
 800c690:	0800c6fd 	.word	0x0800c6fd
 800c694:	0800c6fd 	.word	0x0800c6fd
 800c698:	0800c6fd 	.word	0x0800c6fd
 800c69c:	0800c6fd 	.word	0x0800c6fd
 800c6a0:	0800c6fd 	.word	0x0800c6fd
 800c6a4:	0800c6fd 	.word	0x0800c6fd
 800c6a8:	0800c6ed 	.word	0x0800c6ed
 800c6ac:	0800c6fd 	.word	0x0800c6fd
 800c6b0:	0800c6fd 	.word	0x0800c6fd
 800c6b4:	0800c6fd 	.word	0x0800c6fd
 800c6b8:	0800c6fd 	.word	0x0800c6fd
 800c6bc:	0800c6fd 	.word	0x0800c6fd
 800c6c0:	0800c6fd 	.word	0x0800c6fd
 800c6c4:	0800c6fd 	.word	0x0800c6fd
 800c6c8:	0800c6f5 	.word	0x0800c6f5
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6d2:	e1c0      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c6d4:	2304      	movs	r3, #4
 800c6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6da:	e1bc      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c6dc:	2308      	movs	r3, #8
 800c6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6e2:	e1b8      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c6e4:	2310      	movs	r3, #16
 800c6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ea:	e1b4      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c6ec:	2320      	movs	r3, #32
 800c6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f2:	e1b0      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c6f4:	2340      	movs	r3, #64	; 0x40
 800c6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fa:	e1ac      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c6fc:	2380      	movs	r3, #128	; 0x80
 800c6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c702:	e1a8      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a75      	ldr	r2, [pc, #468]	; (800c8e0 <UART_SetConfig+0x638>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d130      	bne.n	800c770 <UART_SetConfig+0x4c8>
 800c70e:	4b73      	ldr	r3, [pc, #460]	; (800c8dc <UART_SetConfig+0x634>)
 800c710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c712:	f003 0307 	and.w	r3, r3, #7
 800c716:	2b05      	cmp	r3, #5
 800c718:	d826      	bhi.n	800c768 <UART_SetConfig+0x4c0>
 800c71a:	a201      	add	r2, pc, #4	; (adr r2, 800c720 <UART_SetConfig+0x478>)
 800c71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c720:	0800c739 	.word	0x0800c739
 800c724:	0800c741 	.word	0x0800c741
 800c728:	0800c749 	.word	0x0800c749
 800c72c:	0800c751 	.word	0x0800c751
 800c730:	0800c759 	.word	0x0800c759
 800c734:	0800c761 	.word	0x0800c761
 800c738:	2300      	movs	r3, #0
 800c73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c73e:	e18a      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c740:	2304      	movs	r3, #4
 800c742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c746:	e186      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c748:	2308      	movs	r3, #8
 800c74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c74e:	e182      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c750:	2310      	movs	r3, #16
 800c752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c756:	e17e      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c758:	2320      	movs	r3, #32
 800c75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c75e:	e17a      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c760:	2340      	movs	r3, #64	; 0x40
 800c762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c766:	e176      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c768:	2380      	movs	r3, #128	; 0x80
 800c76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76e:	e172      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a5b      	ldr	r2, [pc, #364]	; (800c8e4 <UART_SetConfig+0x63c>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d130      	bne.n	800c7dc <UART_SetConfig+0x534>
 800c77a:	4b58      	ldr	r3, [pc, #352]	; (800c8dc <UART_SetConfig+0x634>)
 800c77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77e:	f003 0307 	and.w	r3, r3, #7
 800c782:	2b05      	cmp	r3, #5
 800c784:	d826      	bhi.n	800c7d4 <UART_SetConfig+0x52c>
 800c786:	a201      	add	r2, pc, #4	; (adr r2, 800c78c <UART_SetConfig+0x4e4>)
 800c788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78c:	0800c7a5 	.word	0x0800c7a5
 800c790:	0800c7ad 	.word	0x0800c7ad
 800c794:	0800c7b5 	.word	0x0800c7b5
 800c798:	0800c7bd 	.word	0x0800c7bd
 800c79c:	0800c7c5 	.word	0x0800c7c5
 800c7a0:	0800c7cd 	.word	0x0800c7cd
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7aa:	e154      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b2:	e150      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ba:	e14c      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c7bc:	2310      	movs	r3, #16
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c2:	e148      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c7c4:	2320      	movs	r3, #32
 800c7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ca:	e144      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d2:	e140      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c7d4:	2380      	movs	r3, #128	; 0x80
 800c7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7da:	e13c      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a41      	ldr	r2, [pc, #260]	; (800c8e8 <UART_SetConfig+0x640>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	f040 8082 	bne.w	800c8ec <UART_SetConfig+0x644>
 800c7e8:	4b3c      	ldr	r3, [pc, #240]	; (800c8dc <UART_SetConfig+0x634>)
 800c7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7f0:	2b28      	cmp	r3, #40	; 0x28
 800c7f2:	d86d      	bhi.n	800c8d0 <UART_SetConfig+0x628>
 800c7f4:	a201      	add	r2, pc, #4	; (adr r2, 800c7fc <UART_SetConfig+0x554>)
 800c7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fa:	bf00      	nop
 800c7fc:	0800c8a1 	.word	0x0800c8a1
 800c800:	0800c8d1 	.word	0x0800c8d1
 800c804:	0800c8d1 	.word	0x0800c8d1
 800c808:	0800c8d1 	.word	0x0800c8d1
 800c80c:	0800c8d1 	.word	0x0800c8d1
 800c810:	0800c8d1 	.word	0x0800c8d1
 800c814:	0800c8d1 	.word	0x0800c8d1
 800c818:	0800c8d1 	.word	0x0800c8d1
 800c81c:	0800c8a9 	.word	0x0800c8a9
 800c820:	0800c8d1 	.word	0x0800c8d1
 800c824:	0800c8d1 	.word	0x0800c8d1
 800c828:	0800c8d1 	.word	0x0800c8d1
 800c82c:	0800c8d1 	.word	0x0800c8d1
 800c830:	0800c8d1 	.word	0x0800c8d1
 800c834:	0800c8d1 	.word	0x0800c8d1
 800c838:	0800c8d1 	.word	0x0800c8d1
 800c83c:	0800c8b1 	.word	0x0800c8b1
 800c840:	0800c8d1 	.word	0x0800c8d1
 800c844:	0800c8d1 	.word	0x0800c8d1
 800c848:	0800c8d1 	.word	0x0800c8d1
 800c84c:	0800c8d1 	.word	0x0800c8d1
 800c850:	0800c8d1 	.word	0x0800c8d1
 800c854:	0800c8d1 	.word	0x0800c8d1
 800c858:	0800c8d1 	.word	0x0800c8d1
 800c85c:	0800c8b9 	.word	0x0800c8b9
 800c860:	0800c8d1 	.word	0x0800c8d1
 800c864:	0800c8d1 	.word	0x0800c8d1
 800c868:	0800c8d1 	.word	0x0800c8d1
 800c86c:	0800c8d1 	.word	0x0800c8d1
 800c870:	0800c8d1 	.word	0x0800c8d1
 800c874:	0800c8d1 	.word	0x0800c8d1
 800c878:	0800c8d1 	.word	0x0800c8d1
 800c87c:	0800c8c1 	.word	0x0800c8c1
 800c880:	0800c8d1 	.word	0x0800c8d1
 800c884:	0800c8d1 	.word	0x0800c8d1
 800c888:	0800c8d1 	.word	0x0800c8d1
 800c88c:	0800c8d1 	.word	0x0800c8d1
 800c890:	0800c8d1 	.word	0x0800c8d1
 800c894:	0800c8d1 	.word	0x0800c8d1
 800c898:	0800c8d1 	.word	0x0800c8d1
 800c89c:	0800c8c9 	.word	0x0800c8c9
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a6:	e0d6      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c8a8:	2304      	movs	r3, #4
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e0d2      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c8b0:	2308      	movs	r3, #8
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e0ce      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c8b8:	2310      	movs	r3, #16
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8be:	e0ca      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c8c0:	2320      	movs	r3, #32
 800c8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8c6:	e0c6      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c8c8:	2340      	movs	r3, #64	; 0x40
 800c8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ce:	e0c2      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c8d0:	2380      	movs	r3, #128	; 0x80
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d6:	e0be      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c8d8:	40011400 	.word	0x40011400
 800c8dc:	58024400 	.word	0x58024400
 800c8e0:	40007800 	.word	0x40007800
 800c8e4:	40007c00 	.word	0x40007c00
 800c8e8:	40011800 	.word	0x40011800
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4aad      	ldr	r2, [pc, #692]	; (800cba8 <UART_SetConfig+0x900>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d176      	bne.n	800c9e4 <UART_SetConfig+0x73c>
 800c8f6:	4bad      	ldr	r3, [pc, #692]	; (800cbac <UART_SetConfig+0x904>)
 800c8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8fe:	2b28      	cmp	r3, #40	; 0x28
 800c900:	d86c      	bhi.n	800c9dc <UART_SetConfig+0x734>
 800c902:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <UART_SetConfig+0x660>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c9ad 	.word	0x0800c9ad
 800c90c:	0800c9dd 	.word	0x0800c9dd
 800c910:	0800c9dd 	.word	0x0800c9dd
 800c914:	0800c9dd 	.word	0x0800c9dd
 800c918:	0800c9dd 	.word	0x0800c9dd
 800c91c:	0800c9dd 	.word	0x0800c9dd
 800c920:	0800c9dd 	.word	0x0800c9dd
 800c924:	0800c9dd 	.word	0x0800c9dd
 800c928:	0800c9b5 	.word	0x0800c9b5
 800c92c:	0800c9dd 	.word	0x0800c9dd
 800c930:	0800c9dd 	.word	0x0800c9dd
 800c934:	0800c9dd 	.word	0x0800c9dd
 800c938:	0800c9dd 	.word	0x0800c9dd
 800c93c:	0800c9dd 	.word	0x0800c9dd
 800c940:	0800c9dd 	.word	0x0800c9dd
 800c944:	0800c9dd 	.word	0x0800c9dd
 800c948:	0800c9bd 	.word	0x0800c9bd
 800c94c:	0800c9dd 	.word	0x0800c9dd
 800c950:	0800c9dd 	.word	0x0800c9dd
 800c954:	0800c9dd 	.word	0x0800c9dd
 800c958:	0800c9dd 	.word	0x0800c9dd
 800c95c:	0800c9dd 	.word	0x0800c9dd
 800c960:	0800c9dd 	.word	0x0800c9dd
 800c964:	0800c9dd 	.word	0x0800c9dd
 800c968:	0800c9c5 	.word	0x0800c9c5
 800c96c:	0800c9dd 	.word	0x0800c9dd
 800c970:	0800c9dd 	.word	0x0800c9dd
 800c974:	0800c9dd 	.word	0x0800c9dd
 800c978:	0800c9dd 	.word	0x0800c9dd
 800c97c:	0800c9dd 	.word	0x0800c9dd
 800c980:	0800c9dd 	.word	0x0800c9dd
 800c984:	0800c9dd 	.word	0x0800c9dd
 800c988:	0800c9cd 	.word	0x0800c9cd
 800c98c:	0800c9dd 	.word	0x0800c9dd
 800c990:	0800c9dd 	.word	0x0800c9dd
 800c994:	0800c9dd 	.word	0x0800c9dd
 800c998:	0800c9dd 	.word	0x0800c9dd
 800c99c:	0800c9dd 	.word	0x0800c9dd
 800c9a0:	0800c9dd 	.word	0x0800c9dd
 800c9a4:	0800c9dd 	.word	0x0800c9dd
 800c9a8:	0800c9d5 	.word	0x0800c9d5
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e050      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c9b4:	2304      	movs	r3, #4
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e04c      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c9bc:	2308      	movs	r3, #8
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c2:	e048      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c9c4:	2310      	movs	r3, #16
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ca:	e044      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c9cc:	2320      	movs	r3, #32
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e040      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c9d4:	2340      	movs	r3, #64	; 0x40
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e03c      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c9dc:	2380      	movs	r3, #128	; 0x80
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e038      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a71      	ldr	r2, [pc, #452]	; (800cbb0 <UART_SetConfig+0x908>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d130      	bne.n	800ca50 <UART_SetConfig+0x7a8>
 800c9ee:	4b6f      	ldr	r3, [pc, #444]	; (800cbac <UART_SetConfig+0x904>)
 800c9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f2:	f003 0307 	and.w	r3, r3, #7
 800c9f6:	2b05      	cmp	r3, #5
 800c9f8:	d826      	bhi.n	800ca48 <UART_SetConfig+0x7a0>
 800c9fa:	a201      	add	r2, pc, #4	; (adr r2, 800ca00 <UART_SetConfig+0x758>)
 800c9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca00:	0800ca19 	.word	0x0800ca19
 800ca04:	0800ca21 	.word	0x0800ca21
 800ca08:	0800ca29 	.word	0x0800ca29
 800ca0c:	0800ca31 	.word	0x0800ca31
 800ca10:	0800ca39 	.word	0x0800ca39
 800ca14:	0800ca41 	.word	0x0800ca41
 800ca18:	2302      	movs	r3, #2
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e01a      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800ca20:	2304      	movs	r3, #4
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e016      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800ca28:	2308      	movs	r3, #8
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2e:	e012      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800ca30:	2310      	movs	r3, #16
 800ca32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca36:	e00e      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800ca38:	2320      	movs	r3, #32
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e00a      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800ca40:	2340      	movs	r3, #64	; 0x40
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e006      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800ca48:	2380      	movs	r3, #128	; 0x80
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e002      	b.n	800ca56 <UART_SetConfig+0x7ae>
 800ca50:	2380      	movs	r3, #128	; 0x80
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a55      	ldr	r2, [pc, #340]	; (800cbb0 <UART_SetConfig+0x908>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	f040 80f8 	bne.w	800cc52 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca66:	2b20      	cmp	r3, #32
 800ca68:	dc46      	bgt.n	800caf8 <UART_SetConfig+0x850>
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	db75      	blt.n	800cb5a <UART_SetConfig+0x8b2>
 800ca6e:	3b02      	subs	r3, #2
 800ca70:	2b1e      	cmp	r3, #30
 800ca72:	d872      	bhi.n	800cb5a <UART_SetConfig+0x8b2>
 800ca74:	a201      	add	r2, pc, #4	; (adr r2, 800ca7c <UART_SetConfig+0x7d4>)
 800ca76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7a:	bf00      	nop
 800ca7c:	0800caff 	.word	0x0800caff
 800ca80:	0800cb5b 	.word	0x0800cb5b
 800ca84:	0800cb07 	.word	0x0800cb07
 800ca88:	0800cb5b 	.word	0x0800cb5b
 800ca8c:	0800cb5b 	.word	0x0800cb5b
 800ca90:	0800cb5b 	.word	0x0800cb5b
 800ca94:	0800cb17 	.word	0x0800cb17
 800ca98:	0800cb5b 	.word	0x0800cb5b
 800ca9c:	0800cb5b 	.word	0x0800cb5b
 800caa0:	0800cb5b 	.word	0x0800cb5b
 800caa4:	0800cb5b 	.word	0x0800cb5b
 800caa8:	0800cb5b 	.word	0x0800cb5b
 800caac:	0800cb5b 	.word	0x0800cb5b
 800cab0:	0800cb5b 	.word	0x0800cb5b
 800cab4:	0800cb27 	.word	0x0800cb27
 800cab8:	0800cb5b 	.word	0x0800cb5b
 800cabc:	0800cb5b 	.word	0x0800cb5b
 800cac0:	0800cb5b 	.word	0x0800cb5b
 800cac4:	0800cb5b 	.word	0x0800cb5b
 800cac8:	0800cb5b 	.word	0x0800cb5b
 800cacc:	0800cb5b 	.word	0x0800cb5b
 800cad0:	0800cb5b 	.word	0x0800cb5b
 800cad4:	0800cb5b 	.word	0x0800cb5b
 800cad8:	0800cb5b 	.word	0x0800cb5b
 800cadc:	0800cb5b 	.word	0x0800cb5b
 800cae0:	0800cb5b 	.word	0x0800cb5b
 800cae4:	0800cb5b 	.word	0x0800cb5b
 800cae8:	0800cb5b 	.word	0x0800cb5b
 800caec:	0800cb5b 	.word	0x0800cb5b
 800caf0:	0800cb5b 	.word	0x0800cb5b
 800caf4:	0800cb4d 	.word	0x0800cb4d
 800caf8:	2b40      	cmp	r3, #64	; 0x40
 800cafa:	d02a      	beq.n	800cb52 <UART_SetConfig+0x8aa>
 800cafc:	e02d      	b.n	800cb5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cafe:	f7fc ff87 	bl	8009a10 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb04:	e02f      	b.n	800cb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fc ff96 	bl	8009a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb14:	e027      	b.n	800cb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb16:	f107 0318 	add.w	r3, r7, #24
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fd f8e2 	bl	8009ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb24:	e01f      	b.n	800cb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb26:	4b21      	ldr	r3, [pc, #132]	; (800cbac <UART_SetConfig+0x904>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 0320 	and.w	r3, r3, #32
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d009      	beq.n	800cb46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb32:	4b1e      	ldr	r3, [pc, #120]	; (800cbac <UART_SetConfig+0x904>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	08db      	lsrs	r3, r3, #3
 800cb38:	f003 0303 	and.w	r3, r3, #3
 800cb3c:	4a1d      	ldr	r2, [pc, #116]	; (800cbb4 <UART_SetConfig+0x90c>)
 800cb3e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb44:	e00f      	b.n	800cb66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cb46:	4b1b      	ldr	r3, [pc, #108]	; (800cbb4 <UART_SetConfig+0x90c>)
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4a:	e00c      	b.n	800cb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb4c:	4b1a      	ldr	r3, [pc, #104]	; (800cbb8 <UART_SetConfig+0x910>)
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb50:	e009      	b.n	800cb66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb58:	e005      	b.n	800cb66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 81ee 	beq.w	800cf4a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb72:	4a12      	ldr	r2, [pc, #72]	; (800cbbc <UART_SetConfig+0x914>)
 800cb74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb80:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	685a      	ldr	r2, [r3, #4]
 800cb86:	4613      	mov	r3, r2
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	4413      	add	r3, r2
 800cb8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d305      	bcc.n	800cb9e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d910      	bls.n	800cbc0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cba4:	e1d1      	b.n	800cf4a <UART_SetConfig+0xca2>
 800cba6:	bf00      	nop
 800cba8:	40011c00 	.word	0x40011c00
 800cbac:	58024400 	.word	0x58024400
 800cbb0:	58000c00 	.word	0x58000c00
 800cbb4:	03d09000 	.word	0x03d09000
 800cbb8:	003d0900 	.word	0x003d0900
 800cbbc:	0800e134 	.word	0x0800e134
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	60bb      	str	r3, [r7, #8]
 800cbc6:	60fa      	str	r2, [r7, #12]
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbcc:	4ac0      	ldr	r2, [pc, #768]	; (800ced0 <UART_SetConfig+0xc28>)
 800cbce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	603b      	str	r3, [r7, #0]
 800cbd8:	607a      	str	r2, [r7, #4]
 800cbda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cbe2:	f7f3 fb9d 	bl	8000320 <__aeabi_uldivmod>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4610      	mov	r0, r2
 800cbec:	4619      	mov	r1, r3
 800cbee:	f04f 0200 	mov.w	r2, #0
 800cbf2:	f04f 0300 	mov.w	r3, #0
 800cbf6:	020b      	lsls	r3, r1, #8
 800cbf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cbfc:	0202      	lsls	r2, r0, #8
 800cbfe:	6979      	ldr	r1, [r7, #20]
 800cc00:	6849      	ldr	r1, [r1, #4]
 800cc02:	0849      	lsrs	r1, r1, #1
 800cc04:	2000      	movs	r0, #0
 800cc06:	460c      	mov	r4, r1
 800cc08:	4605      	mov	r5, r0
 800cc0a:	eb12 0804 	adds.w	r8, r2, r4
 800cc0e:	eb43 0905 	adc.w	r9, r3, r5
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	469a      	mov	sl, r3
 800cc1a:	4693      	mov	fp, r2
 800cc1c:	4652      	mov	r2, sl
 800cc1e:	465b      	mov	r3, fp
 800cc20:	4640      	mov	r0, r8
 800cc22:	4649      	mov	r1, r9
 800cc24:	f7f3 fb7c 	bl	8000320 <__aeabi_uldivmod>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc36:	d308      	bcc.n	800cc4a <UART_SetConfig+0x9a2>
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc3e:	d204      	bcs.n	800cc4a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc46:	60da      	str	r2, [r3, #12]
 800cc48:	e17f      	b.n	800cf4a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc50:	e17b      	b.n	800cf4a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	69db      	ldr	r3, [r3, #28]
 800cc56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc5a:	f040 80bd 	bne.w	800cdd8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cc5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc62:	2b20      	cmp	r3, #32
 800cc64:	dc48      	bgt.n	800ccf8 <UART_SetConfig+0xa50>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	db7b      	blt.n	800cd62 <UART_SetConfig+0xaba>
 800cc6a:	2b20      	cmp	r3, #32
 800cc6c:	d879      	bhi.n	800cd62 <UART_SetConfig+0xaba>
 800cc6e:	a201      	add	r2, pc, #4	; (adr r2, 800cc74 <UART_SetConfig+0x9cc>)
 800cc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc74:	0800ccff 	.word	0x0800ccff
 800cc78:	0800cd07 	.word	0x0800cd07
 800cc7c:	0800cd63 	.word	0x0800cd63
 800cc80:	0800cd63 	.word	0x0800cd63
 800cc84:	0800cd0f 	.word	0x0800cd0f
 800cc88:	0800cd63 	.word	0x0800cd63
 800cc8c:	0800cd63 	.word	0x0800cd63
 800cc90:	0800cd63 	.word	0x0800cd63
 800cc94:	0800cd1f 	.word	0x0800cd1f
 800cc98:	0800cd63 	.word	0x0800cd63
 800cc9c:	0800cd63 	.word	0x0800cd63
 800cca0:	0800cd63 	.word	0x0800cd63
 800cca4:	0800cd63 	.word	0x0800cd63
 800cca8:	0800cd63 	.word	0x0800cd63
 800ccac:	0800cd63 	.word	0x0800cd63
 800ccb0:	0800cd63 	.word	0x0800cd63
 800ccb4:	0800cd2f 	.word	0x0800cd2f
 800ccb8:	0800cd63 	.word	0x0800cd63
 800ccbc:	0800cd63 	.word	0x0800cd63
 800ccc0:	0800cd63 	.word	0x0800cd63
 800ccc4:	0800cd63 	.word	0x0800cd63
 800ccc8:	0800cd63 	.word	0x0800cd63
 800cccc:	0800cd63 	.word	0x0800cd63
 800ccd0:	0800cd63 	.word	0x0800cd63
 800ccd4:	0800cd63 	.word	0x0800cd63
 800ccd8:	0800cd63 	.word	0x0800cd63
 800ccdc:	0800cd63 	.word	0x0800cd63
 800cce0:	0800cd63 	.word	0x0800cd63
 800cce4:	0800cd63 	.word	0x0800cd63
 800cce8:	0800cd63 	.word	0x0800cd63
 800ccec:	0800cd63 	.word	0x0800cd63
 800ccf0:	0800cd63 	.word	0x0800cd63
 800ccf4:	0800cd55 	.word	0x0800cd55
 800ccf8:	2b40      	cmp	r3, #64	; 0x40
 800ccfa:	d02e      	beq.n	800cd5a <UART_SetConfig+0xab2>
 800ccfc:	e031      	b.n	800cd62 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccfe:	f7fb ff61 	bl	8008bc4 <HAL_RCC_GetPCLK1Freq>
 800cd02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd04:	e033      	b.n	800cd6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd06:	f7fb ff73 	bl	8008bf0 <HAL_RCC_GetPCLK2Freq>
 800cd0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd0c:	e02f      	b.n	800cd6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7fc fe92 	bl	8009a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd1c:	e027      	b.n	800cd6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd1e:	f107 0318 	add.w	r3, r7, #24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fc ffde 	bl	8009ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2c:	e01f      	b.n	800cd6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd2e:	4b69      	ldr	r3, [pc, #420]	; (800ced4 <UART_SetConfig+0xc2c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0320 	and.w	r3, r3, #32
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d009      	beq.n	800cd4e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd3a:	4b66      	ldr	r3, [pc, #408]	; (800ced4 <UART_SetConfig+0xc2c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	08db      	lsrs	r3, r3, #3
 800cd40:	f003 0303 	and.w	r3, r3, #3
 800cd44:	4a64      	ldr	r2, [pc, #400]	; (800ced8 <UART_SetConfig+0xc30>)
 800cd46:	fa22 f303 	lsr.w	r3, r2, r3
 800cd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd4c:	e00f      	b.n	800cd6e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800cd4e:	4b62      	ldr	r3, [pc, #392]	; (800ced8 <UART_SetConfig+0xc30>)
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd52:	e00c      	b.n	800cd6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd54:	4b61      	ldr	r3, [pc, #388]	; (800cedc <UART_SetConfig+0xc34>)
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd58:	e009      	b.n	800cd6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd60:	e005      	b.n	800cd6e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800cd62:	2300      	movs	r3, #0
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f000 80ea 	beq.w	800cf4a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7a:	4a55      	ldr	r2, [pc, #340]	; (800ced0 <UART_SetConfig+0xc28>)
 800cd7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd80:	461a      	mov	r2, r3
 800cd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd84:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd88:	005a      	lsls	r2, r3, #1
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	085b      	lsrs	r3, r3, #1
 800cd90:	441a      	add	r2, r3
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9e:	2b0f      	cmp	r3, #15
 800cda0:	d916      	bls.n	800cdd0 <UART_SetConfig+0xb28>
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cda8:	d212      	bcs.n	800cdd0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	f023 030f 	bic.w	r3, r3, #15
 800cdb2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	085b      	lsrs	r3, r3, #1
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	f003 0307 	and.w	r3, r3, #7
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cdcc:	60da      	str	r2, [r3, #12]
 800cdce:	e0bc      	b.n	800cf4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cdd6:	e0b8      	b.n	800cf4a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cdd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cddc:	2b20      	cmp	r3, #32
 800cdde:	dc4b      	bgt.n	800ce78 <UART_SetConfig+0xbd0>
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f2c0 8087 	blt.w	800cef4 <UART_SetConfig+0xc4c>
 800cde6:	2b20      	cmp	r3, #32
 800cde8:	f200 8084 	bhi.w	800cef4 <UART_SetConfig+0xc4c>
 800cdec:	a201      	add	r2, pc, #4	; (adr r2, 800cdf4 <UART_SetConfig+0xb4c>)
 800cdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf2:	bf00      	nop
 800cdf4:	0800ce7f 	.word	0x0800ce7f
 800cdf8:	0800ce87 	.word	0x0800ce87
 800cdfc:	0800cef5 	.word	0x0800cef5
 800ce00:	0800cef5 	.word	0x0800cef5
 800ce04:	0800ce8f 	.word	0x0800ce8f
 800ce08:	0800cef5 	.word	0x0800cef5
 800ce0c:	0800cef5 	.word	0x0800cef5
 800ce10:	0800cef5 	.word	0x0800cef5
 800ce14:	0800ce9f 	.word	0x0800ce9f
 800ce18:	0800cef5 	.word	0x0800cef5
 800ce1c:	0800cef5 	.word	0x0800cef5
 800ce20:	0800cef5 	.word	0x0800cef5
 800ce24:	0800cef5 	.word	0x0800cef5
 800ce28:	0800cef5 	.word	0x0800cef5
 800ce2c:	0800cef5 	.word	0x0800cef5
 800ce30:	0800cef5 	.word	0x0800cef5
 800ce34:	0800ceaf 	.word	0x0800ceaf
 800ce38:	0800cef5 	.word	0x0800cef5
 800ce3c:	0800cef5 	.word	0x0800cef5
 800ce40:	0800cef5 	.word	0x0800cef5
 800ce44:	0800cef5 	.word	0x0800cef5
 800ce48:	0800cef5 	.word	0x0800cef5
 800ce4c:	0800cef5 	.word	0x0800cef5
 800ce50:	0800cef5 	.word	0x0800cef5
 800ce54:	0800cef5 	.word	0x0800cef5
 800ce58:	0800cef5 	.word	0x0800cef5
 800ce5c:	0800cef5 	.word	0x0800cef5
 800ce60:	0800cef5 	.word	0x0800cef5
 800ce64:	0800cef5 	.word	0x0800cef5
 800ce68:	0800cef5 	.word	0x0800cef5
 800ce6c:	0800cef5 	.word	0x0800cef5
 800ce70:	0800cef5 	.word	0x0800cef5
 800ce74:	0800cee7 	.word	0x0800cee7
 800ce78:	2b40      	cmp	r3, #64	; 0x40
 800ce7a:	d037      	beq.n	800ceec <UART_SetConfig+0xc44>
 800ce7c:	e03a      	b.n	800cef4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce7e:	f7fb fea1 	bl	8008bc4 <HAL_RCC_GetPCLK1Freq>
 800ce82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce84:	e03c      	b.n	800cf00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce86:	f7fb feb3 	bl	8008bf0 <HAL_RCC_GetPCLK2Freq>
 800ce8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce8c:	e038      	b.n	800cf00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fc fdd2 	bl	8009a3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9c:	e030      	b.n	800cf00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce9e:	f107 0318 	add.w	r3, r7, #24
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fc ff1e 	bl	8009ce4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceac:	e028      	b.n	800cf00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceae:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <UART_SetConfig+0xc2c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0320 	and.w	r3, r3, #32
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d012      	beq.n	800cee0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceba:	4b06      	ldr	r3, [pc, #24]	; (800ced4 <UART_SetConfig+0xc2c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	08db      	lsrs	r3, r3, #3
 800cec0:	f003 0303 	and.w	r3, r3, #3
 800cec4:	4a04      	ldr	r2, [pc, #16]	; (800ced8 <UART_SetConfig+0xc30>)
 800cec6:	fa22 f303 	lsr.w	r3, r2, r3
 800ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cecc:	e018      	b.n	800cf00 <UART_SetConfig+0xc58>
 800cece:	bf00      	nop
 800ced0:	0800e134 	.word	0x0800e134
 800ced4:	58024400 	.word	0x58024400
 800ced8:	03d09000 	.word	0x03d09000
 800cedc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cee0:	4b24      	ldr	r3, [pc, #144]	; (800cf74 <UART_SetConfig+0xccc>)
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee4:	e00c      	b.n	800cf00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cee6:	4b24      	ldr	r3, [pc, #144]	; (800cf78 <UART_SetConfig+0xcd0>)
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceea:	e009      	b.n	800cf00 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ceec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef2:	e005      	b.n	800cf00 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cef4:	2300      	movs	r3, #0
 800cef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cefe:	bf00      	nop
    }

    if (pclk != 0U)
 800cf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d021      	beq.n	800cf4a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf0a:	4a1c      	ldr	r2, [pc, #112]	; (800cf7c <UART_SetConfig+0xcd4>)
 800cf0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf10:	461a      	mov	r2, r3
 800cf12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf14:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	085b      	lsrs	r3, r3, #1
 800cf1e:	441a      	add	r2, r3
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf28:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	2b0f      	cmp	r3, #15
 800cf2e:	d909      	bls.n	800cf44 <UART_SetConfig+0xc9c>
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf36:	d205      	bcs.n	800cf44 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	60da      	str	r2, [r3, #12]
 800cf42:	e002      	b.n	800cf4a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	2200      	movs	r2, #0
 800cf64:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cf66:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3748      	adds	r7, #72	; 0x48
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf74:	03d09000 	.word	0x03d09000
 800cf78:	003d0900 	.word	0x003d0900
 800cf7c:	0800e134 	.word	0x0800e134

0800cf80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00a      	beq.n	800cfaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfae:	f003 0302 	and.w	r3, r3, #2
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00a      	beq.n	800cfcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	430a      	orrs	r2, r1
 800cfca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd0:	f003 0304 	and.w	r3, r3, #4
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00a      	beq.n	800cfee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	430a      	orrs	r2, r1
 800cfec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff2:	f003 0308 	and.w	r3, r3, #8
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	430a      	orrs	r2, r1
 800d00e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d014:	f003 0310 	and.w	r3, r3, #16
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00a      	beq.n	800d032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	430a      	orrs	r2, r1
 800d030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d036:	f003 0320 	and.w	r3, r3, #32
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00a      	beq.n	800d054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	430a      	orrs	r2, r1
 800d052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d01a      	beq.n	800d096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	430a      	orrs	r2, r1
 800d074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d07a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d07e:	d10a      	bne.n	800d096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	430a      	orrs	r2, r1
 800d094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00a      	beq.n	800d0b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	430a      	orrs	r2, r1
 800d0b6:	605a      	str	r2, [r3, #4]
  }
}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af02      	add	r7, sp, #8
 800d0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0d4:	f7f7 fd16 	bl	8004b04 <HAL_GetTick>
 800d0d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f003 0308 	and.w	r3, r3, #8
 800d0e4:	2b08      	cmp	r3, #8
 800d0e6:	d10e      	bne.n	800d106 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f82f 	bl	800d15a <UART_WaitOnFlagUntilTimeout>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d001      	beq.n	800d106 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d102:	2303      	movs	r3, #3
 800d104:	e025      	b.n	800d152 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f003 0304 	and.w	r3, r3, #4
 800d110:	2b04      	cmp	r3, #4
 800d112:	d10e      	bne.n	800d132 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f819 	bl	800d15a <UART_WaitOnFlagUntilTimeout>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d12e:	2303      	movs	r3, #3
 800d130:	e00f      	b.n	800d152 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2220      	movs	r2, #32
 800d136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2220      	movs	r2, #32
 800d13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b09c      	sub	sp, #112	; 0x70
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	603b      	str	r3, [r7, #0]
 800d166:	4613      	mov	r3, r2
 800d168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d16a:	e0a9      	b.n	800d2c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d16c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d172:	f000 80a5 	beq.w	800d2c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d176:	f7f7 fcc5 	bl	8004b04 <HAL_GetTick>
 800d17a:	4602      	mov	r2, r0
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d182:	429a      	cmp	r2, r3
 800d184:	d302      	bcc.n	800d18c <UART_WaitOnFlagUntilTimeout+0x32>
 800d186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d140      	bne.n	800d20e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d194:	e853 3f00 	ldrex	r3, [r3]
 800d198:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d1a0:	667b      	str	r3, [r7, #100]	; 0x64
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1b2:	e841 2300 	strex	r3, r2, [r1]
 800d1b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1e6      	bne.n	800d18c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	f023 0301 	bic.w	r3, r3, #1
 800d1d4:	663b      	str	r3, [r7, #96]	; 0x60
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3308      	adds	r3, #8
 800d1dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1de:	64ba      	str	r2, [r7, #72]	; 0x48
 800d1e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1e6:	e841 2300 	strex	r3, r2, [r1]
 800d1ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1e5      	bne.n	800d1be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2220      	movs	r2, #32
 800d1f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2220      	movs	r2, #32
 800d1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e069      	b.n	800d2e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 0304 	and.w	r3, r3, #4
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d051      	beq.n	800d2c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	69db      	ldr	r3, [r3, #28]
 800d222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d22a:	d149      	bne.n	800d2c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d234:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	e853 3f00 	ldrex	r3, [r3]
 800d242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d24a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d254:	637b      	str	r3, [r7, #52]	; 0x34
 800d256:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d25a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d25c:	e841 2300 	strex	r3, r2, [r1]
 800d260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1e6      	bne.n	800d236 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3308      	adds	r3, #8
 800d26e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	e853 3f00 	ldrex	r3, [r3]
 800d276:	613b      	str	r3, [r7, #16]
   return(result);
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	f023 0301 	bic.w	r3, r3, #1
 800d27e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3308      	adds	r3, #8
 800d286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d288:	623a      	str	r2, [r7, #32]
 800d28a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28c:	69f9      	ldr	r1, [r7, #28]
 800d28e:	6a3a      	ldr	r2, [r7, #32]
 800d290:	e841 2300 	strex	r3, r2, [r1]
 800d294:	61bb      	str	r3, [r7, #24]
   return(result);
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1e5      	bne.n	800d268 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2220      	movs	r2, #32
 800d2a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e010      	b.n	800d2e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	69da      	ldr	r2, [r3, #28]
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	bf0c      	ite	eq
 800d2d0:	2301      	moveq	r3, #1
 800d2d2:	2300      	movne	r3, #0
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	79fb      	ldrb	r3, [r7, #7]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	f43f af46 	beq.w	800d16c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3770      	adds	r7, #112	; 0x70
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
	...

0800d2ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b096      	sub	sp, #88	; 0x58
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	88fa      	ldrh	r2, [r7, #6]
 800d304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2200      	movs	r2, #0
 800d30c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2222      	movs	r2, #34	; 0x22
 800d314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d02c      	beq.n	800d37a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d324:	4a42      	ldr	r2, [pc, #264]	; (800d430 <UART_Start_Receive_DMA+0x144>)
 800d326:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d32c:	4a41      	ldr	r2, [pc, #260]	; (800d434 <UART_Start_Receive_DMA+0x148>)
 800d32e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d334:	4a40      	ldr	r2, [pc, #256]	; (800d438 <UART_Start_Receive_DMA+0x14c>)
 800d336:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d33c:	2200      	movs	r2, #0
 800d33e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3324      	adds	r3, #36	; 0x24
 800d34a:	4619      	mov	r1, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d350:	461a      	mov	r2, r3
 800d352:	88fb      	ldrh	r3, [r7, #6]
 800d354:	f7f8 f84c 	bl	80053f0 <HAL_DMA_Start_IT>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00d      	beq.n	800d37a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2210      	movs	r2, #16
 800d362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2220      	movs	r2, #32
 800d372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	e055      	b.n	800d426 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d018      	beq.n	800d3bc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d392:	e853 3f00 	ldrex	r3, [r3]
 800d396:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d39e:	657b      	str	r3, [r7, #84]	; 0x54
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3aa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3b0:	e841 2300 	strex	r3, r2, [r1]
 800d3b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d3b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1e6      	bne.n	800d38a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	f043 0301 	orr.w	r3, r3, #1
 800d3d2:	653b      	str	r3, [r7, #80]	; 0x50
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3308      	adds	r3, #8
 800d3da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3dc:	637a      	str	r2, [r7, #52]	; 0x34
 800d3de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e5      	bne.n	800d3bc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	3308      	adds	r3, #8
 800d3f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	e853 3f00 	ldrex	r3, [r3]
 800d3fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d406:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	3308      	adds	r3, #8
 800d40e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d410:	623a      	str	r2, [r7, #32]
 800d412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d414:	69f9      	ldr	r1, [r7, #28]
 800d416:	6a3a      	ldr	r2, [r7, #32]
 800d418:	e841 2300 	strex	r3, r2, [r1]
 800d41c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1e5      	bne.n	800d3f0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3758      	adds	r7, #88	; 0x58
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	0800d63f 	.word	0x0800d63f
 800d434:	0800d761 	.word	0x0800d761
 800d438:	0800d799 	.word	0x0800d799

0800d43c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b08f      	sub	sp, #60	; 0x3c
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d44a:	6a3b      	ldr	r3, [r7, #32]
 800d44c:	e853 3f00 	ldrex	r3, [r3]
 800d450:	61fb      	str	r3, [r7, #28]
   return(result);
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d458:	637b      	str	r3, [r7, #52]	; 0x34
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	461a      	mov	r2, r3
 800d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d462:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d464:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d46a:	e841 2300 	strex	r3, r2, [r1]
 800d46e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1e6      	bne.n	800d444 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3308      	adds	r3, #8
 800d47c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	e853 3f00 	ldrex	r3, [r3]
 800d484:	60bb      	str	r3, [r7, #8]
   return(result);
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d48c:	633b      	str	r3, [r7, #48]	; 0x30
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	3308      	adds	r3, #8
 800d494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d496:	61ba      	str	r2, [r7, #24]
 800d498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49a:	6979      	ldr	r1, [r7, #20]
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	e841 2300 	strex	r3, r2, [r1]
 800d4a2:	613b      	str	r3, [r7, #16]
   return(result);
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1e5      	bne.n	800d476 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2220      	movs	r2, #32
 800d4ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d4b2:	bf00      	nop
 800d4b4:	373c      	adds	r7, #60	; 0x3c
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
	...

0800d4c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b095      	sub	sp, #84	; 0x54
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d0:	e853 3f00 	ldrex	r3, [r3]
 800d4d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e6:	643b      	str	r3, [r7, #64]	; 0x40
 800d4e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4ee:	e841 2300 	strex	r3, r2, [r1]
 800d4f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1e6      	bne.n	800d4c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3308      	adds	r3, #8
 800d500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	61fb      	str	r3, [r7, #28]
   return(result);
 800d50a:	69fa      	ldr	r2, [r7, #28]
 800d50c:	4b1e      	ldr	r3, [pc, #120]	; (800d588 <UART_EndRxTransfer+0xc8>)
 800d50e:	4013      	ands	r3, r2
 800d510:	64bb      	str	r3, [r7, #72]	; 0x48
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3308      	adds	r3, #8
 800d518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d51a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d51c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e5      	bne.n	800d4fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d532:	2b01      	cmp	r3, #1
 800d534:	d118      	bne.n	800d568 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	e853 3f00 	ldrex	r3, [r3]
 800d542:	60bb      	str	r3, [r7, #8]
   return(result);
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	f023 0310 	bic.w	r3, r3, #16
 800d54a:	647b      	str	r3, [r7, #68]	; 0x44
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	461a      	mov	r2, r3
 800d552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d554:	61bb      	str	r3, [r7, #24]
 800d556:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d558:	6979      	ldr	r1, [r7, #20]
 800d55a:	69ba      	ldr	r2, [r7, #24]
 800d55c:	e841 2300 	strex	r3, r2, [r1]
 800d560:	613b      	str	r3, [r7, #16]
   return(result);
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1e6      	bne.n	800d536 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2220      	movs	r2, #32
 800d56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d57c:	bf00      	nop
 800d57e:	3754      	adds	r7, #84	; 0x54
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	effffffe 	.word	0xeffffffe

0800d58c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b090      	sub	sp, #64	; 0x40
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d598:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5a2:	d037      	beq.n	800d614 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	e853 3f00 	ldrex	r3, [r3]
 800d5ba:	623b      	str	r3, [r7, #32]
   return(result);
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5c2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5cc:	633a      	str	r2, [r7, #48]	; 0x30
 800d5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5d4:	e841 2300 	strex	r3, r2, [r1]
 800d5d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d1e5      	bne.n	800d5ac <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	e853 3f00 	ldrex	r3, [r3]
 800d5ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	461a      	mov	r2, r3
 800d5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fe:	61fb      	str	r3, [r7, #28]
 800d600:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d602:	69b9      	ldr	r1, [r7, #24]
 800d604:	69fa      	ldr	r2, [r7, #28]
 800d606:	e841 2300 	strex	r3, r2, [r1]
 800d60a:	617b      	str	r3, [r7, #20]
   return(result);
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1e6      	bne.n	800d5e0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d612:	e002      	b.n	800d61a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d614:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d616:	f7f5 fd51 	bl	80030bc <HAL_UART_TxCpltCallback>
}
 800d61a:	bf00      	nop
 800d61c:	3740      	adds	r7, #64	; 0x40
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f7fe fe0f 	bl	800c254 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b09c      	sub	sp, #112	; 0x70
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	69db      	ldr	r3, [r3, #28]
 800d650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d654:	d071      	beq.n	800d73a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d658:	2200      	movs	r2, #0
 800d65a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d666:	e853 3f00 	ldrex	r3, [r3]
 800d66a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d66c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d66e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d672:	66bb      	str	r3, [r7, #104]	; 0x68
 800d674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	461a      	mov	r2, r3
 800d67a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d67c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d67e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d684:	e841 2300 	strex	r3, r2, [r1]
 800d688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d68a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1e6      	bne.n	800d65e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3308      	adds	r3, #8
 800d696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69a:	e853 3f00 	ldrex	r3, [r3]
 800d69e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a2:	f023 0301 	bic.w	r3, r3, #1
 800d6a6:	667b      	str	r3, [r7, #100]	; 0x64
 800d6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3308      	adds	r3, #8
 800d6ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6b0:	647a      	str	r2, [r7, #68]	; 0x44
 800d6b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6b8:	e841 2300 	strex	r3, r2, [r1]
 800d6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1e5      	bne.n	800d690 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	e853 3f00 	ldrex	r3, [r3]
 800d6d2:	623b      	str	r3, [r7, #32]
   return(result);
 800d6d4:	6a3b      	ldr	r3, [r7, #32]
 800d6d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6da:	663b      	str	r3, [r7, #96]	; 0x60
 800d6dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6e4:	633a      	str	r2, [r7, #48]	; 0x30
 800d6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ec:	e841 2300 	strex	r3, r2, [r1]
 800d6f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1e5      	bne.n	800d6c4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d6f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6fa:	2220      	movs	r2, #32
 800d6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d704:	2b01      	cmp	r3, #1
 800d706:	d118      	bne.n	800d73a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	e853 3f00 	ldrex	r3, [r3]
 800d714:	60fb      	str	r3, [r7, #12]
   return(result);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f023 0310 	bic.w	r3, r3, #16
 800d71c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d71e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d726:	61fb      	str	r3, [r7, #28]
 800d728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72a:	69b9      	ldr	r1, [r7, #24]
 800d72c:	69fa      	ldr	r2, [r7, #28]
 800d72e:	e841 2300 	strex	r3, r2, [r1]
 800d732:	617b      	str	r3, [r7, #20]
   return(result);
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1e6      	bne.n	800d708 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d73a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d73c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d107      	bne.n	800d752 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d744:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d748:	4619      	mov	r1, r3
 800d74a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d74c:	f7fe fda0 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d750:	e002      	b.n	800d758 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d752:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d754:	f7f5 fcc4 	bl	80030e0 <HAL_UART_RxCpltCallback>
}
 800d758:	bf00      	nop
 800d75a:	3770      	adds	r7, #112	; 0x70
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d772:	2b01      	cmp	r3, #1
 800d774:	d109      	bne.n	800d78a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d77c:	085b      	lsrs	r3, r3, #1
 800d77e:	b29b      	uxth	r3, r3
 800d780:	4619      	mov	r1, r3
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7fe fd84 	bl	800c290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d788:	e002      	b.n	800d790 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f7fe fd6c 	bl	800c268 <HAL_UART_RxHalfCpltCallback>
}
 800d790:	bf00      	nop
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7c0:	2b80      	cmp	r3, #128	; 0x80
 800d7c2:	d109      	bne.n	800d7d8 <UART_DMAError+0x40>
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	2b21      	cmp	r3, #33	; 0x21
 800d7c8:	d106      	bne.n	800d7d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d7d2:	6978      	ldr	r0, [r7, #20]
 800d7d4:	f7ff fe32 	bl	800d43c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7e2:	2b40      	cmp	r3, #64	; 0x40
 800d7e4:	d109      	bne.n	800d7fa <UART_DMAError+0x62>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2b22      	cmp	r3, #34	; 0x22
 800d7ea:	d106      	bne.n	800d7fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d7f4:	6978      	ldr	r0, [r7, #20]
 800d7f6:	f7ff fe63 	bl	800d4c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d800:	f043 0210 	orr.w	r2, r3, #16
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d80a:	6978      	ldr	r0, [r7, #20]
 800d80c:	f7fe fd36 	bl	800c27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d810:	bf00      	nop
 800d812:	3718      	adds	r7, #24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2200      	movs	r2, #0
 800d82a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f7fe fd20 	bl	800c27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d83c:	bf00      	nop
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	60bb      	str	r3, [r7, #8]
   return(result);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d860:	61fb      	str	r3, [r7, #28]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	61bb      	str	r3, [r7, #24]
 800d86c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6979      	ldr	r1, [r7, #20]
 800d870:	69ba      	ldr	r2, [r7, #24]
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	613b      	str	r3, [r7, #16]
   return(result);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e6      	bne.n	800d84c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2220      	movs	r2, #32
 800d882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7f5 fc15 	bl	80030bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d892:	bf00      	nop
 800d894:	3720      	adds	r7, #32
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d89a:	b480      	push	{r7}
 800d89c:	b083      	sub	sp, #12
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d8a2:	bf00      	nop
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr

0800d8ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	b083      	sub	sp, #12
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d8b6:	bf00      	nop
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b083      	sub	sp, #12
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d8ca:	bf00      	nop
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b085      	sub	sp, #20
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d101      	bne.n	800d8ec <HAL_UARTEx_DisableFifoMode+0x16>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	e027      	b.n	800d93c <HAL_UARTEx_DisableFifoMode+0x66>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2224      	movs	r2, #36	; 0x24
 800d8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f022 0201 	bic.w	r2, r2, #1
 800d912:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d91a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2220      	movs	r2, #32
 800d92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3714      	adds	r7, #20
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d101      	bne.n	800d960 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d95c:	2302      	movs	r3, #2
 800d95e:	e02d      	b.n	800d9bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2224      	movs	r2, #36	; 0x24
 800d96c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f022 0201 	bic.w	r2, r2, #1
 800d986:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	430a      	orrs	r2, r1
 800d99a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 f84f 	bl	800da40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2220      	movs	r2, #32
 800d9ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d101      	bne.n	800d9dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9d8:	2302      	movs	r3, #2
 800d9da:	e02d      	b.n	800da38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2224      	movs	r2, #36	; 0x24
 800d9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f022 0201 	bic.w	r2, r2, #1
 800da02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	683a      	ldr	r2, [r7, #0]
 800da14:	430a      	orrs	r2, r1
 800da16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f811 	bl	800da40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2220      	movs	r2, #32
 800da2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d108      	bne.n	800da62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da60:	e031      	b.n	800dac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da62:	2310      	movs	r3, #16
 800da64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da66:	2310      	movs	r3, #16
 800da68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	0e5b      	lsrs	r3, r3, #25
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0307 	and.w	r3, r3, #7
 800da78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	0f5b      	lsrs	r3, r3, #29
 800da82:	b2db      	uxtb	r3, r3
 800da84:	f003 0307 	and.w	r3, r3, #7
 800da88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da8a:	7bbb      	ldrb	r3, [r7, #14]
 800da8c:	7b3a      	ldrb	r2, [r7, #12]
 800da8e:	4911      	ldr	r1, [pc, #68]	; (800dad4 <UARTEx_SetNbDataToProcess+0x94>)
 800da90:	5c8a      	ldrb	r2, [r1, r2]
 800da92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da96:	7b3a      	ldrb	r2, [r7, #12]
 800da98:	490f      	ldr	r1, [pc, #60]	; (800dad8 <UARTEx_SetNbDataToProcess+0x98>)
 800da9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
 800daaa:	7b7a      	ldrb	r2, [r7, #13]
 800daac:	4909      	ldr	r1, [pc, #36]	; (800dad4 <UARTEx_SetNbDataToProcess+0x94>)
 800daae:	5c8a      	ldrb	r2, [r1, r2]
 800dab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dab4:	7b7a      	ldrb	r2, [r7, #13]
 800dab6:	4908      	ldr	r1, [pc, #32]	; (800dad8 <UARTEx_SetNbDataToProcess+0x98>)
 800dab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daba:	fb93 f3f2 	sdiv	r3, r3, r2
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dac6:	bf00      	nop
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	0800e14c 	.word	0x0800e14c
 800dad8:	0800e154 	.word	0x0800e154

0800dadc <__cxa_pure_virtual>:
 800dadc:	b508      	push	{r3, lr}
 800dade:	f000 f80d 	bl	800dafc <_ZSt9terminatev>

0800dae2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dae2:	b508      	push	{r3, lr}
 800dae4:	4780      	blx	r0
 800dae6:	f000 f80e 	bl	800db06 <abort>
	...

0800daec <_ZSt13get_terminatev>:
 800daec:	4b02      	ldr	r3, [pc, #8]	; (800daf8 <_ZSt13get_terminatev+0xc>)
 800daee:	6818      	ldr	r0, [r3, #0]
 800daf0:	f3bf 8f5b 	dmb	ish
 800daf4:	4770      	bx	lr
 800daf6:	bf00      	nop
 800daf8:	24000014 	.word	0x24000014

0800dafc <_ZSt9terminatev>:
 800dafc:	b508      	push	{r3, lr}
 800dafe:	f7ff fff5 	bl	800daec <_ZSt13get_terminatev>
 800db02:	f7ff ffee 	bl	800dae2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800db06 <abort>:
 800db06:	b508      	push	{r3, lr}
 800db08:	2006      	movs	r0, #6
 800db0a:	f000 f873 	bl	800dbf4 <raise>
 800db0e:	2001      	movs	r0, #1
 800db10:	f7f6 fd4a 	bl	80045a8 <_exit>

0800db14 <__errno>:
 800db14:	4b01      	ldr	r3, [pc, #4]	; (800db1c <__errno+0x8>)
 800db16:	6818      	ldr	r0, [r3, #0]
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	24000018 	.word	0x24000018

0800db20 <__libc_init_array>:
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	4d0d      	ldr	r5, [pc, #52]	; (800db58 <__libc_init_array+0x38>)
 800db24:	4c0d      	ldr	r4, [pc, #52]	; (800db5c <__libc_init_array+0x3c>)
 800db26:	1b64      	subs	r4, r4, r5
 800db28:	10a4      	asrs	r4, r4, #2
 800db2a:	2600      	movs	r6, #0
 800db2c:	42a6      	cmp	r6, r4
 800db2e:	d109      	bne.n	800db44 <__libc_init_array+0x24>
 800db30:	4d0b      	ldr	r5, [pc, #44]	; (800db60 <__libc_init_array+0x40>)
 800db32:	4c0c      	ldr	r4, [pc, #48]	; (800db64 <__libc_init_array+0x44>)
 800db34:	f000 f9b0 	bl	800de98 <_init>
 800db38:	1b64      	subs	r4, r4, r5
 800db3a:	10a4      	asrs	r4, r4, #2
 800db3c:	2600      	movs	r6, #0
 800db3e:	42a6      	cmp	r6, r4
 800db40:	d105      	bne.n	800db4e <__libc_init_array+0x2e>
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	f855 3b04 	ldr.w	r3, [r5], #4
 800db48:	4798      	blx	r3
 800db4a:	3601      	adds	r6, #1
 800db4c:	e7ee      	b.n	800db2c <__libc_init_array+0xc>
 800db4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db52:	4798      	blx	r3
 800db54:	3601      	adds	r6, #1
 800db56:	e7f2      	b.n	800db3e <__libc_init_array+0x1e>
 800db58:	0800e164 	.word	0x0800e164
 800db5c:	0800e164 	.word	0x0800e164
 800db60:	0800e164 	.word	0x0800e164
 800db64:	0800e174 	.word	0x0800e174

0800db68 <memcpy>:
 800db68:	440a      	add	r2, r1
 800db6a:	4291      	cmp	r1, r2
 800db6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800db70:	d100      	bne.n	800db74 <memcpy+0xc>
 800db72:	4770      	bx	lr
 800db74:	b510      	push	{r4, lr}
 800db76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db7e:	4291      	cmp	r1, r2
 800db80:	d1f9      	bne.n	800db76 <memcpy+0xe>
 800db82:	bd10      	pop	{r4, pc}

0800db84 <memset>:
 800db84:	4402      	add	r2, r0
 800db86:	4603      	mov	r3, r0
 800db88:	4293      	cmp	r3, r2
 800db8a:	d100      	bne.n	800db8e <memset+0xa>
 800db8c:	4770      	bx	lr
 800db8e:	f803 1b01 	strb.w	r1, [r3], #1
 800db92:	e7f9      	b.n	800db88 <memset+0x4>

0800db94 <realloc>:
 800db94:	4b02      	ldr	r3, [pc, #8]	; (800dba0 <realloc+0xc>)
 800db96:	460a      	mov	r2, r1
 800db98:	4601      	mov	r1, r0
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	f000 b8da 	b.w	800dd54 <_realloc_r>
 800dba0:	24000018 	.word	0x24000018

0800dba4 <_raise_r>:
 800dba4:	291f      	cmp	r1, #31
 800dba6:	b538      	push	{r3, r4, r5, lr}
 800dba8:	4604      	mov	r4, r0
 800dbaa:	460d      	mov	r5, r1
 800dbac:	d904      	bls.n	800dbb8 <_raise_r+0x14>
 800dbae:	2316      	movs	r3, #22
 800dbb0:	6003      	str	r3, [r0, #0]
 800dbb2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dbba:	b112      	cbz	r2, 800dbc2 <_raise_r+0x1e>
 800dbbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbc0:	b94b      	cbnz	r3, 800dbd6 <_raise_r+0x32>
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f000 f830 	bl	800dc28 <_getpid_r>
 800dbc8:	462a      	mov	r2, r5
 800dbca:	4601      	mov	r1, r0
 800dbcc:	4620      	mov	r0, r4
 800dbce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbd2:	f000 b817 	b.w	800dc04 <_kill_r>
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d00a      	beq.n	800dbf0 <_raise_r+0x4c>
 800dbda:	1c59      	adds	r1, r3, #1
 800dbdc:	d103      	bne.n	800dbe6 <_raise_r+0x42>
 800dbde:	2316      	movs	r3, #22
 800dbe0:	6003      	str	r3, [r0, #0]
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	e7e7      	b.n	800dbb6 <_raise_r+0x12>
 800dbe6:	2400      	movs	r4, #0
 800dbe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbec:	4628      	mov	r0, r5
 800dbee:	4798      	blx	r3
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	e7e0      	b.n	800dbb6 <_raise_r+0x12>

0800dbf4 <raise>:
 800dbf4:	4b02      	ldr	r3, [pc, #8]	; (800dc00 <raise+0xc>)
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	6818      	ldr	r0, [r3, #0]
 800dbfa:	f7ff bfd3 	b.w	800dba4 <_raise_r>
 800dbfe:	bf00      	nop
 800dc00:	24000018 	.word	0x24000018

0800dc04 <_kill_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d07      	ldr	r5, [pc, #28]	; (800dc24 <_kill_r+0x20>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	4611      	mov	r1, r2
 800dc10:	602b      	str	r3, [r5, #0]
 800dc12:	f7f6 fcb9 	bl	8004588 <_kill>
 800dc16:	1c43      	adds	r3, r0, #1
 800dc18:	d102      	bne.n	800dc20 <_kill_r+0x1c>
 800dc1a:	682b      	ldr	r3, [r5, #0]
 800dc1c:	b103      	cbz	r3, 800dc20 <_kill_r+0x1c>
 800dc1e:	6023      	str	r3, [r4, #0]
 800dc20:	bd38      	pop	{r3, r4, r5, pc}
 800dc22:	bf00      	nop
 800dc24:	240018a0 	.word	0x240018a0

0800dc28 <_getpid_r>:
 800dc28:	f7f6 bca6 	b.w	8004578 <_getpid>

0800dc2c <sbrk_aligned>:
 800dc2c:	b570      	push	{r4, r5, r6, lr}
 800dc2e:	4e0e      	ldr	r6, [pc, #56]	; (800dc68 <sbrk_aligned+0x3c>)
 800dc30:	460c      	mov	r4, r1
 800dc32:	6831      	ldr	r1, [r6, #0]
 800dc34:	4605      	mov	r5, r0
 800dc36:	b911      	cbnz	r1, 800dc3e <sbrk_aligned+0x12>
 800dc38:	f000 f8bc 	bl	800ddb4 <_sbrk_r>
 800dc3c:	6030      	str	r0, [r6, #0]
 800dc3e:	4621      	mov	r1, r4
 800dc40:	4628      	mov	r0, r5
 800dc42:	f000 f8b7 	bl	800ddb4 <_sbrk_r>
 800dc46:	1c43      	adds	r3, r0, #1
 800dc48:	d00a      	beq.n	800dc60 <sbrk_aligned+0x34>
 800dc4a:	1cc4      	adds	r4, r0, #3
 800dc4c:	f024 0403 	bic.w	r4, r4, #3
 800dc50:	42a0      	cmp	r0, r4
 800dc52:	d007      	beq.n	800dc64 <sbrk_aligned+0x38>
 800dc54:	1a21      	subs	r1, r4, r0
 800dc56:	4628      	mov	r0, r5
 800dc58:	f000 f8ac 	bl	800ddb4 <_sbrk_r>
 800dc5c:	3001      	adds	r0, #1
 800dc5e:	d101      	bne.n	800dc64 <sbrk_aligned+0x38>
 800dc60:	f04f 34ff 	mov.w	r4, #4294967295
 800dc64:	4620      	mov	r0, r4
 800dc66:	bd70      	pop	{r4, r5, r6, pc}
 800dc68:	2400189c 	.word	0x2400189c

0800dc6c <_malloc_r>:
 800dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc70:	1ccd      	adds	r5, r1, #3
 800dc72:	f025 0503 	bic.w	r5, r5, #3
 800dc76:	3508      	adds	r5, #8
 800dc78:	2d0c      	cmp	r5, #12
 800dc7a:	bf38      	it	cc
 800dc7c:	250c      	movcc	r5, #12
 800dc7e:	2d00      	cmp	r5, #0
 800dc80:	4607      	mov	r7, r0
 800dc82:	db01      	blt.n	800dc88 <_malloc_r+0x1c>
 800dc84:	42a9      	cmp	r1, r5
 800dc86:	d905      	bls.n	800dc94 <_malloc_r+0x28>
 800dc88:	230c      	movs	r3, #12
 800dc8a:	603b      	str	r3, [r7, #0]
 800dc8c:	2600      	movs	r6, #0
 800dc8e:	4630      	mov	r0, r6
 800dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc94:	4e2e      	ldr	r6, [pc, #184]	; (800dd50 <_malloc_r+0xe4>)
 800dc96:	f000 f89d 	bl	800ddd4 <__malloc_lock>
 800dc9a:	6833      	ldr	r3, [r6, #0]
 800dc9c:	461c      	mov	r4, r3
 800dc9e:	bb34      	cbnz	r4, 800dcee <_malloc_r+0x82>
 800dca0:	4629      	mov	r1, r5
 800dca2:	4638      	mov	r0, r7
 800dca4:	f7ff ffc2 	bl	800dc2c <sbrk_aligned>
 800dca8:	1c43      	adds	r3, r0, #1
 800dcaa:	4604      	mov	r4, r0
 800dcac:	d14d      	bne.n	800dd4a <_malloc_r+0xde>
 800dcae:	6834      	ldr	r4, [r6, #0]
 800dcb0:	4626      	mov	r6, r4
 800dcb2:	2e00      	cmp	r6, #0
 800dcb4:	d140      	bne.n	800dd38 <_malloc_r+0xcc>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	4631      	mov	r1, r6
 800dcba:	4638      	mov	r0, r7
 800dcbc:	eb04 0803 	add.w	r8, r4, r3
 800dcc0:	f000 f878 	bl	800ddb4 <_sbrk_r>
 800dcc4:	4580      	cmp	r8, r0
 800dcc6:	d13a      	bne.n	800dd3e <_malloc_r+0xd2>
 800dcc8:	6821      	ldr	r1, [r4, #0]
 800dcca:	3503      	adds	r5, #3
 800dccc:	1a6d      	subs	r5, r5, r1
 800dcce:	f025 0503 	bic.w	r5, r5, #3
 800dcd2:	3508      	adds	r5, #8
 800dcd4:	2d0c      	cmp	r5, #12
 800dcd6:	bf38      	it	cc
 800dcd8:	250c      	movcc	r5, #12
 800dcda:	4629      	mov	r1, r5
 800dcdc:	4638      	mov	r0, r7
 800dcde:	f7ff ffa5 	bl	800dc2c <sbrk_aligned>
 800dce2:	3001      	adds	r0, #1
 800dce4:	d02b      	beq.n	800dd3e <_malloc_r+0xd2>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	442b      	add	r3, r5
 800dcea:	6023      	str	r3, [r4, #0]
 800dcec:	e00e      	b.n	800dd0c <_malloc_r+0xa0>
 800dcee:	6822      	ldr	r2, [r4, #0]
 800dcf0:	1b52      	subs	r2, r2, r5
 800dcf2:	d41e      	bmi.n	800dd32 <_malloc_r+0xc6>
 800dcf4:	2a0b      	cmp	r2, #11
 800dcf6:	d916      	bls.n	800dd26 <_malloc_r+0xba>
 800dcf8:	1961      	adds	r1, r4, r5
 800dcfa:	42a3      	cmp	r3, r4
 800dcfc:	6025      	str	r5, [r4, #0]
 800dcfe:	bf18      	it	ne
 800dd00:	6059      	strne	r1, [r3, #4]
 800dd02:	6863      	ldr	r3, [r4, #4]
 800dd04:	bf08      	it	eq
 800dd06:	6031      	streq	r1, [r6, #0]
 800dd08:	5162      	str	r2, [r4, r5]
 800dd0a:	604b      	str	r3, [r1, #4]
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f104 060b 	add.w	r6, r4, #11
 800dd12:	f000 f865 	bl	800dde0 <__malloc_unlock>
 800dd16:	f026 0607 	bic.w	r6, r6, #7
 800dd1a:	1d23      	adds	r3, r4, #4
 800dd1c:	1af2      	subs	r2, r6, r3
 800dd1e:	d0b6      	beq.n	800dc8e <_malloc_r+0x22>
 800dd20:	1b9b      	subs	r3, r3, r6
 800dd22:	50a3      	str	r3, [r4, r2]
 800dd24:	e7b3      	b.n	800dc8e <_malloc_r+0x22>
 800dd26:	6862      	ldr	r2, [r4, #4]
 800dd28:	42a3      	cmp	r3, r4
 800dd2a:	bf0c      	ite	eq
 800dd2c:	6032      	streq	r2, [r6, #0]
 800dd2e:	605a      	strne	r2, [r3, #4]
 800dd30:	e7ec      	b.n	800dd0c <_malloc_r+0xa0>
 800dd32:	4623      	mov	r3, r4
 800dd34:	6864      	ldr	r4, [r4, #4]
 800dd36:	e7b2      	b.n	800dc9e <_malloc_r+0x32>
 800dd38:	4634      	mov	r4, r6
 800dd3a:	6876      	ldr	r6, [r6, #4]
 800dd3c:	e7b9      	b.n	800dcb2 <_malloc_r+0x46>
 800dd3e:	230c      	movs	r3, #12
 800dd40:	603b      	str	r3, [r7, #0]
 800dd42:	4638      	mov	r0, r7
 800dd44:	f000 f84c 	bl	800dde0 <__malloc_unlock>
 800dd48:	e7a1      	b.n	800dc8e <_malloc_r+0x22>
 800dd4a:	6025      	str	r5, [r4, #0]
 800dd4c:	e7de      	b.n	800dd0c <_malloc_r+0xa0>
 800dd4e:	bf00      	nop
 800dd50:	24001898 	.word	0x24001898

0800dd54 <_realloc_r>:
 800dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd58:	4680      	mov	r8, r0
 800dd5a:	4614      	mov	r4, r2
 800dd5c:	460e      	mov	r6, r1
 800dd5e:	b921      	cbnz	r1, 800dd6a <_realloc_r+0x16>
 800dd60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd64:	4611      	mov	r1, r2
 800dd66:	f7ff bf81 	b.w	800dc6c <_malloc_r>
 800dd6a:	b92a      	cbnz	r2, 800dd78 <_realloc_r+0x24>
 800dd6c:	f000 f83e 	bl	800ddec <_free_r>
 800dd70:	4625      	mov	r5, r4
 800dd72:	4628      	mov	r0, r5
 800dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd78:	f000 f884 	bl	800de84 <_malloc_usable_size_r>
 800dd7c:	4284      	cmp	r4, r0
 800dd7e:	4607      	mov	r7, r0
 800dd80:	d802      	bhi.n	800dd88 <_realloc_r+0x34>
 800dd82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd86:	d812      	bhi.n	800ddae <_realloc_r+0x5a>
 800dd88:	4621      	mov	r1, r4
 800dd8a:	4640      	mov	r0, r8
 800dd8c:	f7ff ff6e 	bl	800dc6c <_malloc_r>
 800dd90:	4605      	mov	r5, r0
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d0ed      	beq.n	800dd72 <_realloc_r+0x1e>
 800dd96:	42bc      	cmp	r4, r7
 800dd98:	4622      	mov	r2, r4
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	bf28      	it	cs
 800dd9e:	463a      	movcs	r2, r7
 800dda0:	f7ff fee2 	bl	800db68 <memcpy>
 800dda4:	4631      	mov	r1, r6
 800dda6:	4640      	mov	r0, r8
 800dda8:	f000 f820 	bl	800ddec <_free_r>
 800ddac:	e7e1      	b.n	800dd72 <_realloc_r+0x1e>
 800ddae:	4635      	mov	r5, r6
 800ddb0:	e7df      	b.n	800dd72 <_realloc_r+0x1e>
	...

0800ddb4 <_sbrk_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d06      	ldr	r5, [pc, #24]	; (800ddd0 <_sbrk_r+0x1c>)
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4604      	mov	r4, r0
 800ddbc:	4608      	mov	r0, r1
 800ddbe:	602b      	str	r3, [r5, #0]
 800ddc0:	f7f6 fbfc 	bl	80045bc <_sbrk>
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d102      	bne.n	800ddce <_sbrk_r+0x1a>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	b103      	cbz	r3, 800ddce <_sbrk_r+0x1a>
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	240018a0 	.word	0x240018a0

0800ddd4 <__malloc_lock>:
 800ddd4:	4801      	ldr	r0, [pc, #4]	; (800dddc <__malloc_lock+0x8>)
 800ddd6:	f000 b85d 	b.w	800de94 <__retarget_lock_acquire_recursive>
 800ddda:	bf00      	nop
 800dddc:	240018a4 	.word	0x240018a4

0800dde0 <__malloc_unlock>:
 800dde0:	4801      	ldr	r0, [pc, #4]	; (800dde8 <__malloc_unlock+0x8>)
 800dde2:	f000 b858 	b.w	800de96 <__retarget_lock_release_recursive>
 800dde6:	bf00      	nop
 800dde8:	240018a4 	.word	0x240018a4

0800ddec <_free_r>:
 800ddec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddee:	2900      	cmp	r1, #0
 800ddf0:	d044      	beq.n	800de7c <_free_r+0x90>
 800ddf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf6:	9001      	str	r0, [sp, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f1a1 0404 	sub.w	r4, r1, #4
 800ddfe:	bfb8      	it	lt
 800de00:	18e4      	addlt	r4, r4, r3
 800de02:	f7ff ffe7 	bl	800ddd4 <__malloc_lock>
 800de06:	4a1e      	ldr	r2, [pc, #120]	; (800de80 <_free_r+0x94>)
 800de08:	9801      	ldr	r0, [sp, #4]
 800de0a:	6813      	ldr	r3, [r2, #0]
 800de0c:	b933      	cbnz	r3, 800de1c <_free_r+0x30>
 800de0e:	6063      	str	r3, [r4, #4]
 800de10:	6014      	str	r4, [r2, #0]
 800de12:	b003      	add	sp, #12
 800de14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de18:	f7ff bfe2 	b.w	800dde0 <__malloc_unlock>
 800de1c:	42a3      	cmp	r3, r4
 800de1e:	d908      	bls.n	800de32 <_free_r+0x46>
 800de20:	6825      	ldr	r5, [r4, #0]
 800de22:	1961      	adds	r1, r4, r5
 800de24:	428b      	cmp	r3, r1
 800de26:	bf01      	itttt	eq
 800de28:	6819      	ldreq	r1, [r3, #0]
 800de2a:	685b      	ldreq	r3, [r3, #4]
 800de2c:	1949      	addeq	r1, r1, r5
 800de2e:	6021      	streq	r1, [r4, #0]
 800de30:	e7ed      	b.n	800de0e <_free_r+0x22>
 800de32:	461a      	mov	r2, r3
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	b10b      	cbz	r3, 800de3c <_free_r+0x50>
 800de38:	42a3      	cmp	r3, r4
 800de3a:	d9fa      	bls.n	800de32 <_free_r+0x46>
 800de3c:	6811      	ldr	r1, [r2, #0]
 800de3e:	1855      	adds	r5, r2, r1
 800de40:	42a5      	cmp	r5, r4
 800de42:	d10b      	bne.n	800de5c <_free_r+0x70>
 800de44:	6824      	ldr	r4, [r4, #0]
 800de46:	4421      	add	r1, r4
 800de48:	1854      	adds	r4, r2, r1
 800de4a:	42a3      	cmp	r3, r4
 800de4c:	6011      	str	r1, [r2, #0]
 800de4e:	d1e0      	bne.n	800de12 <_free_r+0x26>
 800de50:	681c      	ldr	r4, [r3, #0]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	6053      	str	r3, [r2, #4]
 800de56:	4421      	add	r1, r4
 800de58:	6011      	str	r1, [r2, #0]
 800de5a:	e7da      	b.n	800de12 <_free_r+0x26>
 800de5c:	d902      	bls.n	800de64 <_free_r+0x78>
 800de5e:	230c      	movs	r3, #12
 800de60:	6003      	str	r3, [r0, #0]
 800de62:	e7d6      	b.n	800de12 <_free_r+0x26>
 800de64:	6825      	ldr	r5, [r4, #0]
 800de66:	1961      	adds	r1, r4, r5
 800de68:	428b      	cmp	r3, r1
 800de6a:	bf04      	itt	eq
 800de6c:	6819      	ldreq	r1, [r3, #0]
 800de6e:	685b      	ldreq	r3, [r3, #4]
 800de70:	6063      	str	r3, [r4, #4]
 800de72:	bf04      	itt	eq
 800de74:	1949      	addeq	r1, r1, r5
 800de76:	6021      	streq	r1, [r4, #0]
 800de78:	6054      	str	r4, [r2, #4]
 800de7a:	e7ca      	b.n	800de12 <_free_r+0x26>
 800de7c:	b003      	add	sp, #12
 800de7e:	bd30      	pop	{r4, r5, pc}
 800de80:	24001898 	.word	0x24001898

0800de84 <_malloc_usable_size_r>:
 800de84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de88:	1f18      	subs	r0, r3, #4
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	bfbc      	itt	lt
 800de8e:	580b      	ldrlt	r3, [r1, r0]
 800de90:	18c0      	addlt	r0, r0, r3
 800de92:	4770      	bx	lr

0800de94 <__retarget_lock_acquire_recursive>:
 800de94:	4770      	bx	lr

0800de96 <__retarget_lock_release_recursive>:
 800de96:	4770      	bx	lr

0800de98 <_init>:
 800de98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9a:	bf00      	nop
 800de9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9e:	bc08      	pop	{r3}
 800dea0:	469e      	mov	lr, r3
 800dea2:	4770      	bx	lr

0800dea4 <_fini>:
 800dea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea6:	bf00      	nop
 800dea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deaa:	bc08      	pop	{r3}
 800deac:	469e      	mov	lr, r3
 800deae:	4770      	bx	lr
